PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 4F 69 04 0015        call init
040050 CD 2B 6A 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*       MACRO printChar char
040100             0004*       LD A, char
040100             0005*       RST.LIL 10h
040100             0006*       ENDMACRO
040100             0007*   
040100             0008*   ; Simulated call to subroutine at HL
040100             0009*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040100             0010*   ; outputs: whatever the subroutine does, including HL and BC
040100             0011*   ; destroys: only what the subroutine does, but always BC
040100             0012*       MACRO callHL
040100             0013*       ld bc,@F ; Address of first instruction after the jump
040100             0014*       push bc ; which constitutes the return address
040100             0015*       jp (hl) ; Jump to the address in HL
040100             0016*   @@:
040100             0017*       ENDMACRO
040100             0018*   
040100             0019*   ; Simulated call to subroutine at IX
040100             0020*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040100             0021*   ; outputs: whatever the subroutine does, including IX and BC
040100             0022*   ; destroys: only what the subroutine does, but always BC
040100             0023*       MACRO callIX
040100             0024*       ld bc,@F ; Address of first instruction after the jump
040100             0025*       push bc ; which constitutes the return address
040100             0026*       jp (ix) ; Jump to the address in IX
040100             0027*   @@:
040100             0028*       ENDMACRO
040100             0029*   
040100             0030*   ; Simulated call to soubroutinte at IY
040100             0031*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040100             0032*   ; outputs: whatever the subroutine does, including IY and BC
040100             0033*   ; destroys: only what the subroutine does, but always BC
040100             0034*       MACRO callIY
040100             0035*       ld bc,@F ; Address of first instruction after the jump
040100             0036*       push bc ; which constitutes the return address
040100             0037*       jp (iy) ; Jump to the address in IY
040100             0038*   @@:
040100             0039*       ENDMACRO
040100             0040*   
040100             0041*   ; put the value in HLU into the accumulator
040100             0042*   ; destroys: af
040100             0043*       MACRO HLU_TO_A
040100             0044*       push hl ; 4 cycles
040100             0045*       inc sp ; 1 cycle
040100             0046*       pop af ; 4 cycles
040100             0047*       dec sp ; 1 cycle
040100             0048*       ; 10 cycles total
040100             0049*       ENDMACRO
040100             0050*   
040100             0051*   A_TO_HLU:
040100             0052*       ; call is 7 cycles
040100 22 0D 01 04 0053*       ld (@scratch),hl ; 7 cycles
040104 32 0F 01 04 0054*       ld (@scratch+2),a ; 5 cycles
040108 2A 0D 01 04 0055*       ld hl,(@scratch) ; 7 cycles
04010C C9          0056*       ret ; 6 cycles
04010D             0057*       ; 25 cycles total
04010D 00 00 00    0058*   @scratch: dl 0
040110             0059*   
040110             0060*       ; TODO: implement this
040110             0061*       ; MACRO A_TO_HLU
040110             0062*       ;     push.s af
040110             0063*       ;     inc sp
040110             0064*       ;     push.s hl
040110             0065*       ;     pop hl
040110             0066*       ;     inc sp
040110             0067*       ;     inc sp
040110             0068*       ; ENDMACRO
040110             0069*   
040110             0070*       MACRO PUSH_ALL
040110             0071*       ex af,af'
040110             0072*       exx
040110             0073*       push af
040110             0074*       push hl
040110             0075*       push bc
040110             0076*       push de
040110             0077*   
040110             0078*       ex af,af'
040110             0079*       exx
040110             0080*       push af
040110             0081*       push hl
040110             0082*       push bc
040110             0083*       push de
040110             0084*       push ix
040110             0085*       push iy
040110             0086*       ENDMACRO
040110             0087*   
040110             0088*       MACRO POP_ALL
040110             0089*       pop iy
040110             0090*       pop ix
040110             0091*       pop de
040110             0092*       pop bc
040110             0093*       pop hl
040110             0094*       pop af
040110             0095*       ex af,af'
040110             0096*       exx
040110             0097*   
040110             0098*       pop de
040110             0099*       pop bc
040110             0100*       pop hl
040110             0101*       pop af
040110             0102*       ex af,af'
040110             0103*       exx
040110             0104*       ENDMACRO
040110             0105*   
040110             0106*   ; Print a zero-terminated string inline with code, e.g.:
040110             0107*   ;
040110             0108*   ;    call printInline
040110             0109*   ;    ASCIZ "Hello, world!\r\n"
040110             0110*   ;
040110             0111*   ; Destroys: HL,AF
040110             0112*   printInline:
040110 E1          0113*       pop hl ; get the return address = pointer to start of string
040111 CD 17 01 04 0114*       call printString ; HL advances to end of string
040115 E5          0115*       push hl ; restore the return address = pointer to end of string
040116 C9          0116*       ret
040117             0117*   
040117             0118*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040117             0119*   ; Print a zero-terminated string
040117             0120*   ; HL: Pointer to string
040117             0121*   printString:
040117 C5          0122*       PUSH BC
040118 01 00 00 00 0123*       LD BC,0
04011C 3E 00       0124*       LD A,0
04011E 5B DF       0125*       RST.LIL 18h
040120 C1          0126*       POP BC
040121 C9          0127*       RET
040122             0128*   ; print a VDU sequence
040122             0129*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040122             0130*   sendVDUsequence:
040122 C5          0131*       PUSH BC
040123 01 00 00 00 0132*       LD BC, 0
040127 4E          0133*       LD C, (HL)
040128 5B DF       0134*       RST.LIL 18h
04012A C1          0135*       POP BC
04012B C9          0136*       RET
04012C             0137*   ; Print Newline sequence to VDP
04012C             0138*   printNewLine:
04012C F5          0139*       push af ; for some reason rst.lil 10h sets carry flag
04012D 3E 0D       0140*       LD A, '\r'
04012F 5B D7       0141*       RST.LIL 10h
040131 3E 0A       0142*       LD A, '\n'
040133 5B D7       0143*       RST.LIL 10h
040135 F1          0144*       pop af
040136 C9          0145*       RET
040137             0146*   
040137             0147*   ; Print a 24-bit HEX number
040137             0148*   ; HLU: Number to print
040137             0149*   printHex24:
040137             0150*       HLU_TO_A
040137 E5          0001*M1     push hl ; 4 cycles
040138 33          0002*M1     inc sp ; 1 cycle
040139 F1          0003*M1     pop af ; 4 cycles
04013A 3B          0004*M1     dec sp ; 1 cycle
04013B             0005*M1     ; 10 cycles total
04013B CD 45 01 04 0151*       CALL printHex8
04013F             0152*   ; Print a 16-bit HEX number
04013F             0153*   ; HL: Number to print
04013F             0154*   printHex16:
04013F 7C          0155*       LD A,H
040140 CD 45 01 04 0156*       CALL printHex8
040144 7D          0157*       LD A,L
040145             0158*   ; Print an 8-bit HEX number
040145             0159*   ; A: Number to print
040145             0160*   printHex8:
040145 4F          0161*       LD C,A
040146 1F          0162*       RRA
040147 1F          0163*       RRA
040148 1F          0164*       RRA
040149 1F          0165*       RRA
04014A CD 4F 01 04 0166*       CALL @F
04014E 79          0167*       LD A,C
04014F             0168*   @@:
04014F E6 0F       0169*       AND 0Fh
040151 C6 90       0170*       ADD A,90h
040153 27          0171*       DAA
040154 CE 40       0172*       ADC A,40h
040156 27          0173*       DAA
040157 5B D7       0174*       RST.LIL 10h
040159 C9          0175*       RET
04015A             0176*   
04015A             0177*   printHexA:
04015A F5          0178*       push af
04015B C5          0179*       push bc
04015C CD 45 01 04 0180*       call printHex8
040160 3E 20       0181*       ld a,' '
040162 5B D7       0182*       rst.lil 10h
040164 C1          0183*       pop bc
040165 F1          0184*       pop af
040166 C9          0185*       ret
040167             0186*   
040167             0187*   printHexHL:
040167 F5          0188*       push af
040168 C5          0189*       push bc
040169 CD 3F 01 04 0190*       call printHex16
04016D 3E 20       0191*       ld a,' '
04016F 5B D7       0192*       rst.lil 10h
040171 C1          0193*       pop bc
040172 F1          0194*       pop af
040173 C9          0195*       ret
040174             0196*   
040174             0197*   printHexUHL:
040174 F5          0198*       push af
040175 C5          0199*       push bc
040176 CD 37 01 04 0200*       call printHex24
04017A 3E 20       0201*       ld a,' '
04017C 5B D7       0202*       rst.lil 10h
04017E C1          0203*       pop bc
04017F F1          0204*       pop af
040180 C9          0205*       ret
040181             0206*   
040181             0207*   printHexAUHL:
040181 F5          0208*       push af
040182 C5          0209*       push bc
040183 CD 45 01 04 0210*       call printHex8
040187 3E 2E       0211*       ld a,'.'
040189 5B D7       0212*       rst.lil 10h
04018B CD 37 01 04 0213*       call printHex24
04018F 3E 20       0214*       ld a,' '
040191 5B D7       0215*       rst.lil 10h
040193 C1          0216*       pop bc
040194 F1          0217*       pop af
040195 C9          0218*       ret
040196             0219*   
040196             0220*   printHexABHL:
040196             0221*   ; preserve registers
040196 C5          0222*       push bc ; b will be ok c will not
040197 F5          0223*       push af ; will get totally destroyed
040198             0224*   ; print a
040198 CD 45 01 04 0225*       call printHex8
04019C             0226*   ; print b
04019C 78          0227*       ld a,b
04019D CD 45 01 04 0228*       call printHex8
0401A1             0229*   ; print hl
0401A1 CD 3F 01 04 0230*       call printHex16
0401A5             0231*   ; restore registers
0401A5 F1          0232*       pop af
0401A6 C1          0233*       pop bc
0401A7 C9          0234*       ret
0401A8             0235*   
0401A8             0236*   printHexBHL:
0401A8             0237*   ; preserve registers
0401A8 C5          0238*       push bc ; b will be ok c will not
0401A9 F5          0239*       push af ; will get totally destroyed
0401AA             0240*   ; print b
0401AA 78          0241*       ld a,b
0401AB CD 45 01 04 0242*       call printHex8
0401AF             0243*   ; print hl
0401AF CD 3F 01 04 0244*       call printHex16
0401B3             0245*   ; restore registers
0401B3 F1          0246*       pop af
0401B4 C1          0247*       pop bc
0401B5 C9          0248*       ret
0401B6             0249*   
0401B6             0250*   printHexCDE:
0401B6             0251*   ; preserve registers
0401B6 C5          0252*       push bc ; b will be ok c will not
0401B7 F5          0253*       push af ; will get totally destroyed
0401B8             0254*   ; print c
0401B8 79          0255*       ld a,c
0401B9 CD 45 01 04 0256*       call printHex8
0401BD             0257*   ; print de
0401BD EB          0258*       ex de,hl
0401BE CD 3F 01 04 0259*       call printHex16
0401C2 EB          0260*       ex de,hl
0401C3             0261*   ; restore registers
0401C3 F1          0262*       pop af
0401C4 C1          0263*       pop bc
0401C5 C9          0264*       ret
0401C6             0265*   
0401C6             0266*   printHexUIX:
0401C6             0267*   ; store everything in scratch
0401C6 22 4F 06 04 0268*       ld (uhl),hl
0401CA ED 43 52 06 0269*       ld (ubc),bc
       04          
0401CF ED 53 55 06 0270*       ld (ude),de
       04          
0401D4 DD 22 58 06 0271*       ld (uix),ix
       04          
0401D9 FD 22 5B 06 0272*       ld (uiy),iy
       04          
0401DE F5          0273*       push af ; fml
0401DF             0274*   
0401DF 21 E6 05 04 0275*       ld hl,str_ixu
0401E3 CD 17 01 04 0276*       call printString
0401E7 2A 58 06 04 0277*       ld hl,(uix)
0401EB CD 37 01 04 0278*       call printHex24
0401EF CD 2C 01 04 0279*       call printNewLine
0401F3             0280*   
0401F3             0281*   ; restore everything
0401F3 2A 4F 06 04 0282*       ld hl, (uhl)
0401F7 ED 4B 52 06 0283*       ld bc, (ubc)
       04          
0401FC ED 5B 55 06 0284*       ld de, (ude)
       04          
040201 DD 2A 58 06 0285*       ld ix, (uix)
       04          
040206 FD 2A 5B 06 0286*       ld iy, (uiy)
       04          
04020B F1          0287*       pop af
04020C             0288*   ; all done
04020C C9          0289*       ret
04020D             0290*   
04020D             0291*   ; Print a 0x HEX prefix
04020D             0292*   DisplayHexPrefix:
04020D 3E 30       0293*       LD A, '0'
04020F 5B D7       0294*       RST.LIL 10h
040211 3E 78       0295*       LD A, 'x'
040213 5B D7       0296*       RST.LIL 10h
040215 C9          0297*       RET
040216             0298*   
040216             0299*       MACRO printDecBC
040216             0300*       push hl
040216             0301*       push bc
040216             0302*       pop hl
040216             0303*       call printDec
040216             0304*       pop hl
040216             0305*       ENDMACRO
040216             0306*   
040216             0307*       MACRO printDecDE
040216             0308*       push hl
040216             0309*       push de
040216             0310*       pop hl
040216             0311*       call printDec
040216             0312*       pop hl
040216             0313*       ENDMACRO
040216             0314*   
040216             0315*       MACRO printDecHL
040216             0316*       call printDec
040216             0317*       ENDMACRO
040216             0318*   
040216             0319*       MACRO printDecIX
040216             0320*       push hl
040216             0321*       push ix
040216             0322*       pop hl
040216             0323*       call printDec
040216             0324*       pop hl
040216             0325*       ENDMACRO
040216             0326*   
040216             0327*       MACRO printDecIY
040216             0328*       push hl
040216             0329*       push iy
040216             0330*       pop hl
040216             0331*       call printDec
040216             0332*       pop hl
040216             0333*       ENDMACRO
040216             0334*   
040216             0335*   
040216             0336*   ; Prints the right justified decimal value in HL without leading zeroes
040216             0337*   ; HL : Value to print
040216             0338*   ; preserves all registers and flags
040216             0339*   printDec:
040216             0340*   ; BEGIN MY CODE
040216             0341*   ; back up all the things
040216 F5          0342*       push af
040217 C5          0343*       push bc
040218 D5          0344*       push de
040219 E5          0345*       push hl
04021A             0346*   ; END MY CODE
04021A 11 42 02 04 0347*       LD DE, _printDecBuffer
04021E CD 52 02 04 0348*       CALL u24_to_ascii
040222             0349*   ; BEGIN MY CODE
040222             0350*   ; replace leading zeroes with spaces
040222 21 42 02 04 0351*       LD HL, _printDecBuffer
040226 06 07       0352*       ld B, 7 ; if HL was 0, we want to keep the final zero
040228             0353*   @loop:
040228 7E          0354*       LD A, (HL)
040229 FE 30       0355*       CP '0'
04022B C2 35 02 04 0356*       JP NZ, @done
04022F 3E 20       0357*       LD A, ' '
040231 77          0358*       LD (HL), A
040232 23          0359*       INC HL
040233             0360*       ; CALL vdu_cursor_forward
040233 10 F3       0361*       DJNZ @loop
040235             0362*   @done:
040235             0363*   ; END MY CODE
040235 21 42 02 04 0364*       LD HL, _printDecBuffer
040239 CD 17 01 04 0365*       CALL printString
04023D             0366*   ; BEGIN MY CODE
04023D             0367*   ; restore all the things
04023D E1          0368*       pop hl
04023E D1          0369*       pop de
04023F C1          0370*       pop bc
040240 F1          0371*       pop af
040241             0372*   ; END MY CODE
040241 C9          0373*       RET
040242 00 00 00 00 0374*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040252             0375*   
040252             0376*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040252             0377*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040252             0378*   ; so it will allways be 8 characters length
040252             0379*   ; HL : Value to convert to string
040252             0380*   ; DE : pointer to buffer, at least 8 byte + 0
040252             0381*   u24_to_ascii:
040252 01 80 69 67 0382*       LD BC,-10000000
040256 CD 89 02 04 0383*       CALL @one_digit
04025A 01 C0 BD F0 0384*       LD BC,-1000000
04025E CD 89 02 04 0385*       CALL @one_digit
040262 01 60 79 FE 0386*       LD BC,-100000
040266 CD 89 02 04 0387*       CALL @one_digit
04026A 01 F0 D8 FF 0388*       LD BC,-10000
04026E CD 89 02 04 0389*       CALL @one_digit
040272 01 18 FC FF 0390*       LD BC,-1000
040276 CD 89 02 04 0391*       CALL @one_digit
04027A 01 9C FF FF 0392*       LD BC,-100
04027E CD 89 02 04 0393*       CALL @one_digit
040282 0E F6       0394*       LD C,-10
040284 CD 89 02 04 0395*       CALL @one_digit
040288 48          0396*       LD C,B
040289             0397*   @one_digit:
040289 3E 2F       0398*       LD A,'0'-1
04028B             0399*   @divide_me:
04028B 3C          0400*       INC A
04028C 09          0401*       ADD HL,BC
04028D 38 FC       0402*       JR C,@divide_me
04028F ED 42       0403*       SBC HL,BC
040291 12          0404*       LD (DE),A
040292 13          0405*       INC DE
040293 C9          0406*       RET
040294             0407*   
040294             0408*   print_u24:
040294 D5          0409*       push de
040295 E5          0410*       push hl
040296 11 42 02 04 0411*       ld de,_printDecBuffer
04029A CD 52 02 04 0412*       call u24_to_ascii
04029E 21 42 02 04 0413*       ld hl,_printDecBuffer
0402A2 CD 17 01 04 0414*       call printString
0402A6 3E 20       0415*       ld a,' '
0402A8 5B D7       0416*       rst.lil 10h
0402AA E1          0417*       pop hl
0402AB D1          0418*       pop de
0402AC C9          0419*       ret
0402AD             0420*   
0402AD             0421*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0402AD             0422*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0402AD             0423*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0402AD             0424*   u168_to_ascii:
0402AD             0425*   ; add a leading space to make room for sign flag if needed
0402AD 3E 20       0426*       ld a,' '
0402AF 12          0427*       ld (de),a
0402B0 13          0428*       inc de
0402B1             0429*   ; Convert integer part
0402B1 E5          0430*       push hl ; Save HL (we’ll need the fractional part later)
0402B2 CD 6D 09 04 0431*       call hlu_udiv256 ; Shift to get integer portion in HL
0402B6 01 F0 D8 FF 0432*       ld bc, -10000
0402BA CD DD 02 04 0433*       call @one_int
0402BE 01 18 FC FF 0434*       ld bc, -1000
0402C2 CD DD 02 04 0435*       call @one_int
0402C6 01 9C FF FF 0436*       ld bc, -100
0402CA CD DD 02 04 0437*       call @one_int
0402CE 0E F6       0438*       ld c, -10
0402D0 CD DD 02 04 0439*       call @one_int
0402D4 48          0440*       ld c, b
0402D5 CD DD 02 04 0441*       call @one_int
0402D9 C3 E8 02 04 0442*       jp @frac ; Jump to fractional part conversion
0402DD             0443*   @one_int:
0402DD 3E 2F       0444*       ld a, '0' - 1 ; Start ASCII character at '0'
0402DF             0445*   @divide_me:
0402DF 3C          0446*       inc a
0402E0 09          0447*       add hl, bc ; Accumulate until overflow
0402E1 38 FC       0448*       jr c, @divide_me
0402E3 ED 42       0449*       sbc hl, bc ; Remove excess after overflow
0402E5 12          0450*       ld (de), a ; Store ASCII digit
0402E6 13          0451*       inc de
0402E7 C9          0452*       ret
0402E8             0453*   ; Convert fractional part
0402E8             0454*   @frac:
0402E8 3E 2E       0455*       ld a, '.' ; Decimal point
0402EA 12          0456*       ld (de), a
0402EB 13          0457*       inc de
0402EC E1          0458*       pop hl ; Restore HL with original fraction
0402ED 06 03       0459*       ld b, 3 ; Loop counter for 3 fractional digits
0402EF             0460*   @frac_loop:
0402EF 26 0A       0461*       ld h, 10 ; Load multiplier for fractional part
0402F1 ED 6C       0462*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402F3 3E 30       0463*       ld a, '0'
0402F5 84          0464*       add a, h ; Convert integer part to ASCII
0402F6 12          0465*       ld (de), a
0402F7 13          0466*       inc de
0402F8 10 F5       0467*       djnz @frac_loop ; Repeat for each fractional digit
0402FA             0468*   ; Add null terminator
0402FA AF          0469*       xor a ; Null terminator
0402FB 12          0470*       ld (de), a
0402FC C9          0471*       ret
0402FD             0472*   
0402FD             0473*   print_u168:
0402FD D5          0474*       push de
0402FE E5          0475*       push hl
0402FF 11 42 02 04 0476*       ld de,_printDecBuffer
040303 CD AD 02 04 0477*       call u168_to_ascii
040307 21 42 02 04 0478*       ld hl,_printDecBuffer
04030B CD 17 01 04 0479*       call printString
04030F E1          0480*       pop hl
040310 D1          0481*       pop de
040311 C9          0482*       ret
040312             0483*   
040312             0484*   ; signed version of u168_to_ascii
040312             0485*   s168_to_ascii:
040312 D5          0486*       push de ; save starting address of buffer
040313 CD 06 09 04 0487*       call hlu_abs
040317 F5          0488*       push af ; save sign flag
040318 CD AD 02 04 0489*       call u168_to_ascii
04031C F1          0490*       pop af ; restore sign flag
04031D D1          0491*       pop de ; restore starting address of buffer
04031E F0          0492*       ret p ; hlu was positive so nothing to do
04031F 3E 2D       0493*       ld a,'-'
040321 12          0494*       ld (de),a
040322 C9          0495*       ret
040323             0496*   
040323             0497*   print_s168:
040323 D5          0498*       push de
040324 E5          0499*       push hl
040325 11 42 02 04 0500*       ld de,_printDecBuffer
040329 CD 12 03 04 0501*       call s168_to_ascii
04032D 21 42 02 04 0502*       ld hl,_printDecBuffer
040331 CD 17 01 04 0503*       call printString
040335 E1          0504*       pop hl
040336 D1          0505*       pop de
040337 C9          0506*       ret
040338             0507*   
040338             0508*   print_s168_hl:
040338 F5          0509*       push af
040339 E5          0510*       push hl
04033A CD 23 03 04 0511*       call print_s168
04033E 3E 20       0512*       ld a,' '
040340 5B D7       0513*       rst.lil 10h
040342 E1          0514*       pop hl
040343 F1          0515*       pop af
040344 C9          0516*       ret
040345             0517*   
040345             0518*   print_s168_bc:
040345 F5          0519*       push af
040346 C5          0520*       push bc
040347 E5          0521*       push hl
040348 C5          0522*       push bc
040349 E1          0523*       pop hl
04034A CD 23 03 04 0524*       call print_s168
04034E 3E 20       0525*       ld a,' '
040350 5B D7       0526*       rst.lil 10h
040352 E1          0527*       pop hl
040353 C1          0528*       pop bc
040354 F1          0529*       pop af
040355 C9          0530*       ret
040356             0531*   
040356             0532*   print_s168_de:
040356 F5          0533*       push af
040357 D5          0534*       push de
040358 E5          0535*       push hl
040359 EB          0536*       ex de,hl
04035A CD 23 03 04 0537*       call print_s168
04035E 3E 20       0538*       ld a,' '
040360 5B D7       0539*       rst.lil 10h
040362 E1          0540*       pop hl
040363 D1          0541*       pop de
040364 F1          0542*       pop af
040365 C9          0543*       ret
040366             0544*   
040366             0545*   print_s168_hl_bc_de:
040366 F5          0546*       push af
040367 C5          0547*       push bc
040368 D5          0548*       push de
040369 E5          0549*       push hl
04036A CD 23 03 04 0550*       call print_s168
04036E 3E 20       0551*       ld a,' '
040370 5B D7       0552*       rst.lil 10h
040372 C5          0553*       push bc
040373 E1          0554*       pop hl
040374 CD 23 03 04 0555*       call print_s168
040378 3E 20       0556*       ld a,' '
04037A 5B D7       0557*       rst.lil 10h
04037C EB          0558*       ex de,hl
04037D CD 23 03 04 0559*       call print_s168
040381 3E 20       0560*       ld a,' '
040383 5B D7       0561*       rst.lil 10h
040385 E1          0562*       pop hl
040386 D1          0563*       pop de
040387 C1          0564*       pop bc
040388 F1          0565*       pop af
040389 C9          0566*       ret
04038A             0567*   
04038A             0568*   print_s168_bc_de:
04038A F5          0569*       push af
04038B C5          0570*       push bc
04038C D5          0571*       push de
04038D C5          0572*       push bc
04038E E1          0573*       pop hl
04038F CD 23 03 04 0574*       call print_s168
040393 3E 20       0575*       ld a,' '
040395 5B D7       0576*       rst.lil 10h
040397 EB          0577*       ex de,hl
040398 CD 23 03 04 0578*       call print_s168
04039C 3E 20       0579*       ld a,' '
04039E 5B D7       0580*       rst.lil 10h
0403A0 E1          0581*       pop hl
0403A1 D1          0582*       pop de
0403A2 C1          0583*       pop bc
0403A3 F1          0584*       pop af
0403A4 C9          0585*       ret
0403A5             0586*   
0403A5             0587*   print_s168_a:
0403A5 F5          0588*       push af
0403A6 C5          0589*       push bc
0403A7 E5          0590*       push hl
0403A8 21 00 00 00 0591*       ld hl,0
0403AC 6F          0592*       ld l,a
0403AD CD 38 03 04 0593*       call print_s168_hl
0403B1 E1          0594*       pop hl
0403B2 C1          0595*       pop bc
0403B3 F1          0596*       pop af
0403B4 C9          0597*       ret
0403B5             0598*   
0403B5             0599*   ; #### new functions added by Brandon R. Gates ####
0403B5             0600*   
0403B5             0601*   ; print the binary representation of the 8-bit value in a
0403B5             0602*   ; destroys a, hl, bc
0403B5             0603*   printBin8:
0403B5 06 08       0604*       ld b,8 ; loop counter for 8 bits
0403B7 21 D2 03 04 0605*       ld hl,@cmd ; set hl to the low byte of the output string
0403BB             0606*       ; (which will be the high bit of the value in a)
0403BB             0607*   @loop:
0403BB 07          0608*       rlca ; put the next highest bit into carry
0403BC 38 04       0609*       jr c,@one
0403BE 36 30       0610*       ld (hl),'0'
0403C0 18 02       0611*       jr @next_bit
0403C2             0612*   @one:
0403C2 36 31       0613*       ld (hl),'1'
0403C4             0614*   @next_bit:
0403C4 23          0615*       inc hl
0403C5 10 F4       0616*       djnz @loop
0403C7             0617*   ; print it
0403C7 21 D2 03 04 0618*       ld hl,@cmd
0403CB 01 08 00 00 0619*       ld bc,@end-@cmd
0403CF 5B DF       0620*       rst.lil $18
0403D1 C9          0621*       ret
0403D2             0622*   @cmd: ds 8 ; eight bytes for eight bits
0403DA             0623*   @end:
0403DA             0624*   
0403DA             0625*   ; print the binary representation of the 8-bit value in a
0403DA             0626*   ; in reverse order (lsb first)
0403DA             0627*   ; destroys a, hl, bc
0403DA             0628*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403DA 06 08       0629*       ld b,8 ; loop counter for 8 bits
0403DC 21 F7 03 04 0630*       ld hl,@cmd ; set hl to the low byte of the output string
0403E0             0631*       ; (which will be the high bit of the value in a)
0403E0             0632*   @loop:
0403E0 0F          0633*       rrca ; put the next lowest bit into carry
0403E1 38 04       0634*       jr c,@one
0403E3 36 30       0635*       ld (hl),'0'
0403E5 18 02       0636*       jr @next_bit
0403E7             0637*   @one:
0403E7 36 31       0638*       ld (hl),'1'
0403E9             0639*   @next_bit:
0403E9 23          0640*       inc hl
0403EA 10 F4       0641*       djnz @loop
0403EC             0642*   ; print it
0403EC 21 F7 03 04 0643*       ld hl,@cmd
0403F0 01 08 00 00 0644*       ld bc,@end-@cmd
0403F4 5B DF       0645*       rst.lil $18
0403F6 C9          0646*       ret
0403F7             0647*   @cmd: ds 8 ; eight bytes for eight bits
0403FF             0648*   @end:
0403FF             0649*   
0403FF             0650*   ; print registers to screen in hexidecimal format
0403FF             0651*   ; inputs: none
0403FF             0652*   ; outputs: values of every register printed to screen
0403FF             0653*   ;    values of each register in global scratch memory
0403FF             0654*   ; destroys: nothing
0403FF             0655*   stepRegistersHex:
0403FF             0656*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403FF 22 4F 06 04 0657*       ld (uhl),hl
040403 ED 43 52 06 0658*       ld (ubc),bc
       04          
040408 ED 53 55 06 0659*       ld (ude),de
       04          
04040D DD 22 58 06 0660*       ld (uix),ix
       04          
040412 FD 22 5B 06 0661*       ld (uiy),iy
       04          
040417 F5          0662*       push af ; fml
040418 E1          0663*       pop hl ; thanks, zilog
040419 22 4C 06 04 0664*       ld (uaf),hl
04041D F5          0665*       push af ; dammit
04041E             0666*   
04041E             0667*   ; home the cursor
04041E             0668*       ; call vdu_home_cursor
04041E             0669*   
04041E             0670*   ; print each register
04041E 21 D2 05 04 0671*       ld hl,str_afu
040422 CD 17 01 04 0672*       call printString
040426 2A 4C 06 04 0673*       ld hl,(uaf)
04042A CD 37 01 04 0674*       call printHex24
04042E CD 2C 01 04 0675*       call printNewLine
040432             0676*   
040432 21 D7 05 04 0677*       ld hl,str_hlu
040436 CD 17 01 04 0678*       call printString
04043A 2A 4F 06 04 0679*       ld hl,(uhl)
04043E CD 37 01 04 0680*       call printHex24
040442 CD 2C 01 04 0681*       call printNewLine
040446             0682*   
040446 21 DC 05 04 0683*       ld hl,str_bcu
04044A CD 17 01 04 0684*       call printString
04044E 2A 52 06 04 0685*       ld hl,(ubc)
040452 CD 37 01 04 0686*       call printHex24
040456 CD 2C 01 04 0687*       call printNewLine
04045A             0688*   
04045A 21 E1 05 04 0689*       ld hl,str_deu
04045E CD 17 01 04 0690*       call printString
040462 2A 55 06 04 0691*       ld hl,(ude)
040466 CD 37 01 04 0692*       call printHex24
04046A CD 2C 01 04 0693*       call printNewLine
04046E             0694*   
04046E 21 E6 05 04 0695*       ld hl,str_ixu
040472 CD 17 01 04 0696*       call printString
040476 2A 58 06 04 0697*       ld hl,(uix)
04047A CD 37 01 04 0698*       call printHex24
04047E CD 2C 01 04 0699*       call printNewLine
040482             0700*   
040482 21 EB 05 04 0701*       ld hl,str_iyu
040486 CD 17 01 04 0702*       call printString
04048A 2A 5B 06 04 0703*       ld hl,(uiy)
04048E CD 37 01 04 0704*       call printHex24
040492 CD 2C 01 04 0705*       call printNewLine
040496             0706*   
040496             0707*       ; call vsync
040496             0708*   
040496 CD 2C 01 04 0709*       call printNewLine
04049A             0710*   
04049A             0711*   ; check for right shift key and quit if pressed
04049A             0712*       MOSCALL mos_getkbmap
04049A 3E 1E       0001*M1 			LD	A, function
04049C 5B CF       0002*M1 			RST.LIL	08h
04049E             0713*   @stayhere:
04049E             0714*   ; 7 RightShift
04049E DD CB 00 76 0715*       bit 6,(ix+0)
0404A2 20 02       0716*       jr nz,@RightShift
0404A4 18 F8       0717*       jr @stayhere
0404A6             0718*   @RightShift:
0404A6 DD CB 0E 86 0719*       res 0,(ix+14) ; debounce the key (hopefully)
0404AA 3E 80       0720*       ld a,%10000000
0404AC             0721*       ; call multiPurposeDelay
0404AC             0722*   
0404AC             0723*   ; restore everything
0404AC 2A 4F 06 04 0724*       ld hl, (uhl)
0404B0 ED 4B 52 06 0725*       ld bc, (ubc)
       04          
0404B5 ED 5B 55 06 0726*       ld de, (ude)
       04          
0404BA DD 2A 58 06 0727*       ld ix, (uix)
       04          
0404BF FD 2A 5B 06 0728*       ld iy, (uiy)
       04          
0404C4 F1          0729*       pop af
0404C5             0730*   ; all done
0404C5 C9          0731*       ret
0404C6             0732*   
0404C6             0733*   ; print registers to screen in hexidecimal format
0404C6             0734*   ; inputs: none
0404C6             0735*   ; outputs: values of every register printed to screen
0404C6             0736*   ;    values of each register in global scratch memory
0404C6             0737*   ; destroys: nothing
0404C6             0738*   dumpRegistersHex:
0404C6             0739*   ; store everything in scratch
0404C6 22 4F 06 04 0740*       ld (uhl),hl
0404CA ED 43 52 06 0741*       ld (ubc),bc
       04          
0404CF ED 53 55 06 0742*       ld (ude),de
       04          
0404D4 DD 22 58 06 0743*       ld (uix),ix
       04          
0404D9 FD 22 5B 06 0744*       ld (uiy),iy
       04          
0404DE F5          0745*       push af ; fml
0404DF E1          0746*       pop hl ; thanks, zilog
0404E0 22 4C 06 04 0747*       ld (uaf),hl
0404E4 F5          0748*       push af ; dammit
0404E5             0749*   
0404E5             0750*   ; home the cursor
0404E5             0751*       ; call vdu_home_cursor
0404E5             0752*       ; call printNewLine
0404E5             0753*   
0404E5             0754*   ; print each register
0404E5 21 D2 05 04 0755*       ld hl,str_afu
0404E9 CD 17 01 04 0756*       call printString
0404ED 2A 4C 06 04 0757*       ld hl,(uaf)
0404F1 CD 37 01 04 0758*       call printHex24
0404F5 CD 2C 01 04 0759*       call printNewLine
0404F9             0760*   
0404F9 21 D7 05 04 0761*       ld hl,str_hlu
0404FD CD 17 01 04 0762*       call printString
040501 2A 4F 06 04 0763*       ld hl,(uhl)
040505 CD 37 01 04 0764*       call printHex24
040509 CD 2C 01 04 0765*       call printNewLine
04050D             0766*   
04050D 21 DC 05 04 0767*       ld hl,str_bcu
040511 CD 17 01 04 0768*       call printString
040515 2A 52 06 04 0769*       ld hl,(ubc)
040519 CD 37 01 04 0770*       call printHex24
04051D CD 2C 01 04 0771*       call printNewLine
040521             0772*   
040521 21 E1 05 04 0773*       ld hl,str_deu
040525 CD 17 01 04 0774*       call printString
040529 2A 55 06 04 0775*       ld hl,(ude)
04052D CD 37 01 04 0776*       call printHex24
040531 CD 2C 01 04 0777*       call printNewLine
040535             0778*   
040535 21 E6 05 04 0779*       ld hl,str_ixu
040539 CD 17 01 04 0780*       call printString
04053D 2A 58 06 04 0781*       ld hl,(uix)
040541 CD 37 01 04 0782*       call printHex24
040545 CD 2C 01 04 0783*       call printNewLine
040549             0784*   
040549 21 EB 05 04 0785*       ld hl,str_iyu
04054D CD 17 01 04 0786*       call printString
040551 2A 5B 06 04 0787*       ld hl,(uiy)
040555 CD 37 01 04 0788*       call printHex24
040559             0789*       ; call printNewLine
040559             0790*   
040559             0791*       ; call vdu_vblank
040559             0792*   
040559             0793*       ; call printNewLine
040559             0794*   ; restore everything
040559 2A 4F 06 04 0795*       ld hl, (uhl)
04055D ED 4B 52 06 0796*       ld bc, (ubc)
       04          
040562 ED 5B 55 06 0797*       ld de, (ude)
       04          
040567 DD 2A 58 06 0798*       ld ix, (uix)
       04          
04056C FD 2A 5B 06 0799*       ld iy, (uiy)
       04          
040571 F1          0800*       pop af
040572             0801*   ; all done
040572 C9          0802*       ret
040573             0803*   
040573             0804*   dumpRegistersHexPrime:
040573 D9          0805*       exx
040574 08          0806*       ex af,af'
040575 CD C6 04 04 0807*       call dumpRegistersHex
040579 08          0808*       ex af,af'
04057A D9          0809*       exx
04057B C9          0810*       ret
04057C             0811*   
04057C             0812*   ; additionally dump prime registers
04057C             0813*   ; inputs: none
04057C             0814*   ; outputs: values of every register printed to screen
04057C             0815*   ; destroys: nothing
04057C             0816*   dumpRegistersHexAll:
04057C CD C6 04 04 0817*       call dumpRegistersHex
040580 08          0818*       ex af,af'
040581 D9          0819*       exx
040582 CD C6 04 04 0820*       call dumpRegistersHex
040586 08          0821*       ex af,af'
040587 D9          0822*       exx
040588 C9          0823*       ret
040589             0824*   
040589             0825*   ; print hlu to screen in hexidecimal format
040589             0826*   ; inputs: none
040589             0827*   ; destroys: nothing
040589             0828*   print_hex_hl:
040589 F5          0829*       push af
04058A E5          0830*       push hl
04058B 21 D7 05 04 0831*       ld hl,str_hlu
04058F CD 17 01 04 0832*       call printString
040593 E1          0833*       pop hl
040594 E5          0834*       push hl
040595 CD 37 01 04 0835*       call printHex24
040599 3E 20       0836*       ld a,' '
04059B 5B D7       0837*       rst.lil 10h
04059D E1          0838*       pop hl
04059E F1          0839*       pop af
04059F C9          0840*       ret
0405A0             0841*   
0405A0             0842*   ; print bcu to screen in hexidecimal format
0405A0             0843*   ; inputs: none
0405A0             0844*   ; destroys: nothing
0405A0             0845*   print_hex_bc:
0405A0 F5          0846*       push af
0405A1 E5          0847*       push hl
0405A2 C5          0848*       push bc
0405A3 21 DC 05 04 0849*       ld hl,str_bcu
0405A7 CD 17 01 04 0850*       call printString
0405AB E1          0851*       pop hl
0405AC E5          0852*       push hl
0405AD CD 37 01 04 0853*       call printHex24
0405B1 3E 20       0854*       ld a,' '
0405B3 5B D7       0855*       rst.lil 10h
0405B5 C1          0856*       pop bc
0405B6 E1          0857*       pop hl
0405B7 F1          0858*       pop af
0405B8 C9          0859*       ret
0405B9             0860*   
0405B9             0861*   ; print deu to screen in hexidecimal format
0405B9             0862*   ; inputs: none
0405B9             0863*   ; destroys: nothing
0405B9             0864*   print_hex_de:
0405B9 F5          0865*       push af
0405BA E5          0866*       push hl
0405BB D5          0867*       push de
0405BC 21 E1 05 04 0868*       ld hl,str_deu
0405C0 CD 17 01 04 0869*       call printString
0405C4 E1          0870*       pop hl
0405C5 E5          0871*       push hl
0405C6 CD 37 01 04 0872*       call printHex24
0405CA 3E 20       0873*       ld a,' '
0405CC 5B D7       0874*       rst.lil 10h
0405CE D1          0875*       pop de
0405CF E1          0876*       pop hl
0405D0 F1          0877*       pop af
0405D1 C9          0878*       ret
0405D2             0879*   
0405D2 20 61 66 3D 0880*   str_afu: db " af=",0
       00          
0405D7 20 68 6C 3D 0881*   str_hlu: db " hl=",0
       00          
0405DC 20 62 63 3D 0882*   str_bcu: db " bc=",0
       00          
0405E1 20 64 65 3D 0883*   str_deu: db " de=",0
       00          
0405E6 20 69 78 3D 0884*   str_ixu: db " ix=",0
       00          
0405EB 20 69 79 3D 0885*   str_iyu: db " iy=",0
       00          
0405F0             0886*   
0405F0             0887*   ; print udeuhl to screen in hexidecimal format
0405F0             0888*   ; inputs: none
0405F0             0889*   ; outputs: concatenated hexidecimal udeuhl
0405F0             0890*   ; destroys: nothing
0405F0             0891*   dumpUDEUHLHex:
0405F0             0892*   ; store everything in scratch
0405F0 22 4F 06 04 0893*       ld (uhl),hl
0405F4 ED 43 52 06 0894*       ld (ubc),bc
       04          
0405F9 ED 53 55 06 0895*       ld (ude),de
       04          
0405FE DD 22 58 06 0896*       ld (uix),ix
       04          
040603 FD 22 5B 06 0897*       ld (uiy),iy
       04          
040608 F5          0898*       push af
040609             0899*   
040609             0900*   ; print each register
040609             0901*   
040609 21 43 06 04 0902*       ld hl,str_udeuhl
04060D CD 17 01 04 0903*       call printString
040611 2A 55 06 04 0904*       ld hl,(ude)
040615 CD 37 01 04 0905*       call printHex24
040619 3E 2E       0906*       ld a,'.' ; print a dot to separate the values
04061B 5B D7       0907*       rst.lil 10h
04061D 2A 4F 06 04 0908*       ld hl,(uhl)
040621 CD 37 01 04 0909*       call printHex24
040625 CD 2C 01 04 0910*       call printNewLine
040629             0911*   
040629             0912*   ; restore everything
040629 2A 4F 06 04 0913*       ld hl, (uhl)
04062D ED 4B 52 06 0914*       ld bc, (ubc)
       04          
040632 ED 5B 55 06 0915*       ld de, (ude)
       04          
040637 DD 2A 58 06 0916*       ld ix, (uix)
       04          
04063C FD 2A 5B 06 0917*       ld iy, (uiy)
       04          
040641 F1          0918*       pop af
040642             0919*   ; all done
040642 C9          0920*       ret
040643             0921*   
040643 75 64 65 2E 0922*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04064C             0923*   
04064C             0924*   ; global scratch memory for registers
04064C 00 00 00    0925*   uaf: dl 0
04064F 00 00 00    0926*   uhl: dl 0
040652 00 00 00    0927*   ubc: dl 0
040655 00 00 00    0928*   ude: dl 0
040658 00 00 00    0929*   uix: dl 0
04065B 00 00 00    0930*   uiy: dl 0
04065E 00 00 00    0931*   usp: dl 0
040661 00 00 00    0932*   upc: dl 0
040664             0933*   
040664             0934*   ; inputs: whatever is in the flags register
040664             0935*   ; outputs: binary representation of flags
040664             0936*   ;          with a header so we know which is what
040664             0937*   ; destroys: nothing
040664             0938*   ; preserves: everything
040664             0939*   dumpFlags:
040664             0940*   ; first we curse zilog for not giving direct access to flags
040664 F5          0941*       push af ; this is so we can send it back unharmed
040665 F5          0942*       push af ; this is so we can pop it to hl
040666             0943*   ; store everything in scratch
040666 22 4F 06 04 0944*       ld (uhl),hl
04066A ED 43 52 06 0945*       ld (ubc),bc
       04          
04066F ED 53 55 06 0946*       ld (ude),de
       04          
040674 DD 22 58 06 0947*       ld (uix),ix
       04          
040679 FD 22 5B 06 0948*       ld (uiy),iy
       04          
04067E             0949*   ; next we print the header
04067E 21 AA 06 04 0950*       ld hl,@header
040682 CD 17 01 04 0951*       call printString
040686 E1          0952*       pop hl ; flags are now in l
040687 7D          0953*       ld a,l ; flags are now in a
040688 CD B5 03 04 0954*       call printBin8
04068C CD 2C 01 04 0955*       call printNewLine
040690             0956*   ; restore everything
040690 2A 4F 06 04 0957*       ld hl, (uhl)
040694 ED 4B 52 06 0958*       ld bc, (ubc)
       04          
040699 ED 5B 55 06 0959*       ld de, (ude)
       04          
04069E DD 2A 58 06 0960*       ld ix, (uix)
       04          
0406A3 FD 2A 5B 06 0961*       ld iy, (uiy)
       04          
0406A8 F1          0962*       pop af ; send her home the way she came
0406A9 C9          0963*       ret
0406AA             0964*   ; Bit 7 (S): Sign flag
0406AA             0965*   ; Bit 6 (Z): Zero flag
0406AA             0966*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0406AA             0967*   ; Bit 4 (H): Half Carry flag
0406AA             0968*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0406AA             0969*   ; Bit 2 (PV): Parity/Overflow flag
0406AA             0970*   ; Bit 1 (N): Subtract flag
0406AA             0971*   ; Bit 0 (C): Carry flag
0406AA 53 5A 78 48 0972*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406B5             0973*   
0406B5             0974*   ; set all the bits in the flag register
0406B5             0975*   ; more of an academic exercise than anything useful
0406B5             0976*   ; inputs; none
0406B5             0977*   ; outputs; a=0,f=255
0406B5             0978*   ; destroys: flags, hl
0406B5             0979*   ; preserves: a, because why not
0406B5             0980*   setAllFlags:
0406B5 21 FF 00 00 0981*       ld hl,255
0406B9 67          0982*       ld h,a ; four cycles to preserve a is cheap
0406BA E5          0983*       push hl
0406BB F1          0984*       pop af
0406BC C9          0985*       ret
0406BD             0986*   
0406BD             0987*   ; reset all the bits in the flag register
0406BD             0988*   ; unlike its inverse counterpart, this may actually be useful
0406BD             0989*   ; inputs; none
0406BD             0990*   ; outputs; a=0,f=0
0406BD             0991*   ; destroys: flags, hl
0406BD             0992*   ; preserves: a, because why not
0406BD             0993*   resetAllFlags:
0406BD 21 00 00 00 0994*       ld hl,0
0406C1 67          0995*       ld h,a ; four cycles to preserve a is cheap
0406C2 E5          0996*       push hl
0406C3 F1          0997*       pop af
0406C4 C9          0998*       ret
0406C5             0999*   
0406C5             1000*   ; wait until user presses a key
0406C5             1001*   ; inputs: none
0406C5             1002*   ; outputs: ascii code of key pressed in a
0406C5             1003*   ; destroys: af,ix
0406C5             1004*   waitKeypress:
0406C5             1005*       MOSCALL mos_getkey
0406C5 3E 00       0001*M1 			LD	A, function
0406C7 5B CF       0002*M1 			RST.LIL	08h
0406C9 C9          1006*       ret
0406CA             1007*   
0406CA             1008*   ; print bytes from an address to the screen in hexidecimal format
0406CA             1009*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406CA             1010*   ; outputs: values of each byte printed to screen separated by spaces
0406CA             1011*   ; destroys: nothing
0406CA             1012*   dumpMemoryHex:
0406CA             1013*   ; save registers to the stack
0406CA C5          1014*       push bc
0406CB E5          1015*       push hl
0406CC F5          1016*       push af
0406CD             1017*   
0406CD             1018*   ; print the address and separator
0406CD CD 37 01 04 1019*       call printHex24
0406D1 3E 3A       1020*       ld a,':'
0406D3 5B D7       1021*       rst.lil 10h
0406D5 3E 20       1022*       ld a,' '
0406D7 5B D7       1023*       rst.lil 10h
0406D9             1024*   
0406D9             1025*   ; set b to be our loop counter
0406D9 F1          1026*       pop af
0406DA 47          1027*       ld b,a
0406DB E1          1028*       pop hl
0406DC E5          1029*       push hl
0406DD F5          1030*       push af
0406DE             1031*   @loop:
0406DE             1032*   ; print the byte
0406DE 7E          1033*       ld a,(hl)
0406DF CD 45 01 04 1034*       call printHex8
0406E3             1035*   ; print a space
0406E3 3E 20       1036*       ld a,' '
0406E5 5B D7       1037*       rst.lil 10h
0406E7 23          1038*       inc hl
0406E8 10 F4       1039*       djnz @loop
0406EA CD 2C 01 04 1040*       call printNewLine
0406EE             1041*   
0406EE             1042*   ; restore everything
0406EE F1          1043*       pop af
0406EF E1          1044*       pop hl
0406F0 C1          1045*       pop bc
0406F1             1046*   
0406F1             1047*   ; all done
0406F1 C9          1048*       ret
0406F2             1049*   
0406F2             1050*   
0406F2             1051*   ; print bytes from an address to the screen in binary format
0406F2             1052*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406F2             1053*   ; outputs: values of each byte printed to screen separated by spaces
0406F2             1054*   ; destroys: nothing
0406F2             1055*   dumpMemoryBin:
0406F2             1056*   ; save all registers to the stack
0406F2 F5          1057*       push af
0406F3 C5          1058*       push bc
0406F4 D5          1059*       push de
0406F5 E5          1060*       push hl
0406F6 DD E5       1061*       push ix
0406F8 FD E5       1062*       push iy
0406FA             1063*   
0406FA             1064*   ; set b to be our loop counter
0406FA 47          1065*       ld b,a
0406FB             1066*   @loop:
0406FB             1067*   ; print the byte
0406FB 7E          1068*       ld a,(hl)
0406FC E5          1069*       push hl
0406FD C5          1070*       push bc
0406FE CD B5 03 04 1071*       call printBin8
040702 C1          1072*       pop bc
040703             1073*   ; print a space
040703 3E 20       1074*       ld a,' '
040705 5B D7       1075*       rst.lil 10h
040707 E1          1076*       pop hl
040708 23          1077*       inc hl
040709 10 F0       1078*       djnz @loop
04070B CD 2C 01 04 1079*       call printNewLine
04070F             1080*   
04070F             1081*   ; restore everything
04070F FD E1       1082*       pop iy
040711 DD E1       1083*       pop ix
040713 E1          1084*       pop hl
040714 D1          1085*       pop de
040715 C1          1086*       pop bc
040716 F1          1087*       pop af
040717             1088*   ; all done
040717 C9          1089*       ret
040718             1090*   
040718             1091*   ; print bytes from an address to the screen in binary format
040718             1092*   ; with the bits of each byte in reverse order (lsb first)
040718             1093*   ; inputs: hl = address of first byte to print, a = number of bytes to print
040718             1094*   ; outputs: values of each byte printed to screen separated by spaces
040718             1095*   ; destroys: nothing
040718             1096*   dumpMemoryBinRev:
040718             1097*   ; save all registers to the stack
040718 F5          1098*       push af
040719 C5          1099*       push bc
04071A D5          1100*       push de
04071B E5          1101*       push hl
04071C DD E5       1102*       push ix
04071E FD E5       1103*       push iy
040720             1104*   
040720             1105*   ; set b to be our loop counter
040720 47          1106*       ld b,a
040721             1107*   @loop:
040721             1108*   ; print the byte
040721 7E          1109*       ld a,(hl)
040722 E5          1110*       push hl
040723 C5          1111*       push bc
040724 CD DA 03 04 1112*       call printBin8Rev
040728 C1          1113*       pop bc
040729             1114*   ; print a space
040729 3E 20       1115*       ld a,' '
04072B 5B D7       1116*       rst.lil 10h
04072D E1          1117*       pop hl
04072E 23          1118*       inc hl
04072F 10 F0       1119*       djnz @loop
040731 CD 2C 01 04 1120*       call printNewLine
040735             1121*   
040735             1122*   ; restore everything
040735 FD E1       1123*       pop iy
040737 DD E1       1124*       pop ix
040739 E1          1125*       pop hl
04073A D1          1126*       pop de
04073B C1          1127*       pop bc
04073C F1          1128*       pop af
04073D             1129*   ; all done
04073D C9          1130*       ret
04073E             0031        include "arith24.inc"
04073E             0001*   ;------------------------------------------------------------------------
04073E             0002*   ;  arith24.asm
04073E             0003*   ;  24-bit ez80 arithmetic routines
04073E             0004*   ;  Copyright (c) Shawn Sijnstra 2024
04073E             0005*   ;  MIT license
04073E             0006*   ;
04073E             0007*   ;  This library was created as a tool to help make ez80
04073E             0008*   ;  24-bit native assembly routines for simple mathematical problems
04073E             0009*   ;  more widely available.
04073E             0010*   ;
04073E             0011*   ;------------------------------------------------------------------------
04073E             0012*   
04073E             0013*   ; ;------------------------------------------------------------------------
04073E             0014*   ; ; DEPRECATED BY umul24 in fixed168.inc
04073E             0015*   ; ;------------------------------------------------------------------------
04073E             0016*   ; ; umul24:	HL = HL*DE (unsigned)
04073E             0017*   ; ; Preserves AF, BC, DE
04073E             0018*   ; ; Uses a fast multiply routine.
04073E             0019*   ; ;------------------------------------------------------------------------
04073E             0020*   ; umul24:
04073E             0021*   ; 	push	DE
04073E             0022*   ; 	push	BC
04073E             0023*   ; 	push	AF
04073E             0024*   ; 	push	HL
04073E             0025*   ; 	pop		BC
04073E             0026*   ;     ld	 	a, 24 ; No. of bits to process
04073E             0027*   ;     ld	 	hl, 0 ; Result
04073E             0028*   ; umul24_lp:
04073E             0029*   ; 	add	hl,hl
04073E             0030*   ; 	ex	de,hl
04073E             0031*   ; 	add	hl,hl
04073E             0032*   ; 	ex	de,hl
04073E             0033*   ; 	jr	nc,umul24_nc
04073E             0034*   ; 	add	hl,bc
04073E             0035*   ; umul24_nc:
04073E             0036*   ; 	dec	a
04073E             0037*   ; 	jr	nz,umul24_lp
04073E             0038*   ; 	pop	af
04073E             0039*   ; 	pop	bc
04073E             0040*   ; 	pop	de
04073E             0041*   ; 	ret
04073E             0042*   
04073E             0043*   
04073E             0044*   ;------------------------------------------------------------------------
04073E             0045*   ; udiv24
04073E             0046*   ; Unsigned 24-bit division
04073E             0047*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04073E             0048*   ;
04073E             0049*   ; Uses AF BC DE HL
04073E             0050*   ; Uses Restoring Division algorithm
04073E             0051*   ;------------------------------------------------------------------------
04073E             0052*   
04073E             0053*   udiv24:
04073E E5          0054*   	push	hl
04073F C1          0055*   	pop		bc	;move dividend to BCU
040740 21 00 00 00 0056*   	ld		hl,0	;result
040744 A7          0057*   	and		a
040745 ED 52       0058*   	sbc		hl,de	;test for div by 0
040747 C8          0059*   	ret		z		;it's zero, carry flag is clear
040748 19          0060*   	add		hl,de	;HL is 0 again
040749 3E 18       0061*   	ld		a,24	;number of loops through.
04074B             0062*   udiv1:
04074B C5          0063*   	push	bc	;complicated way of doing this because of lack of access to top bits
04074C E3          0064*   	ex		(sp),hl
04074D 37          0065*   	scf
04074E ED 6A       0066*   	adc	hl,hl
040750 E3          0067*   	ex	(sp),hl
040751 C1          0068*   	pop	bc		;we now have bc = (bc * 2) + 1
040752             0069*   
040752 ED 6A       0070*   	adc	hl,hl
040754 A7          0071*   	and	a		;is this the bug
040755 ED 52       0072*   	sbc	hl,de
040757 30 02       0073*   	jr	nc,udiv2
040759 19          0074*   	add	hl,de
04075A             0075*   ;	dec	c
04075A 0B          0076*   	dec	bc
04075B             0077*   udiv2:
04075B 3D          0078*   	dec	a
04075C 20 ED       0079*   	jr	nz,udiv1
04075E 37          0080*   	scf		;flag used for div0 error
04075F C5          0081*   	push	bc
040760 D1          0082*   	pop		de	;remainder
040761 C9          0083*   	ret
040762             0084*   
040762             0085*   
040762             0086*   
040762             0087*   ;------------------------------------------------------------------------
040762             0088*   ; neg24
040762             0089*   ; Returns: HLU = 0-HLU
040762             0090*   ; preserves all other registers
040762             0091*   ;------------------------------------------------------------------------
040762             0092*   neg24:
040762 D5          0093*   	push	de
040763 EB          0094*   	ex		de,hl
040764 21 00 00 00 0095*   	ld		hl,0
040768 B7          0096*   	or		a
040769 ED 52       0097*   	sbc		hl,de
04076B D1          0098*   	pop		de
04076C C9          0099*   	ret
04076D             0100*   
04076D             0101*   ;------------------------------------------------------------------------
04076D             0102*   ; or_hlu_deu: 24 bit bitwise OR
04076D             0103*   ; Returns: hlu = hlu OR deu
04076D             0104*   ; preserves all other registers
04076D             0105*   ;------------------------------------------------------------------------
04076D             0106*   or_hlu_deu:
04076D 22 F6 07 04 0107*   	ld	(bitbuf1),hl
040771 ED 53 F9 07 0108*   	ld	(bitbuf2),de
       04          
040776 D5          0109*   	push	de	;preserve DEU
040777 C5          0110*   	push	bc	;preserve BCU
040778 06 03       0111*   	ld		b,3
04077A 21 F6 07 04 0112*   	ld	hl,bitbuf1
04077E 11 F6 07 04 0113*   	ld	de,bitbuf1
040782             0114*   orloop_24:
040782 1A          0115*   	ld	a,(de)
040783 B6          0116*   	or	(hl)
040784 12          0117*   	ld	(de),a
040785 13          0118*   	inc	de
040786 23          0119*   	inc	hl
040787 10 F9       0120*   	djnz	orloop_24
040789 2A F9 07 04 0121*   	ld	hl,(bitbuf2)
04078D C1          0122*   	pop		bc	;restore BC
04078E D1          0123*   	pop		de	;restore DE
04078F             0124*   
04078F             0125*   ;------------------------------------------------------------------------
04078F             0126*   ; and_hlu_deu: 24 bit bitwise AND
04078F             0127*   ; Returns: hlu = hlu AND deu
04078F             0128*   ; preserves all other registers
04078F             0129*   ;------------------------------------------------------------------------
04078F             0130*   and_hlu_deu:
04078F 22 F6 07 04 0131*   	ld	(bitbuf1),hl
040793 ED 53 F9 07 0132*   	ld	(bitbuf2),de
       04          
040798 D5          0133*   	push	de	;preserve DEU
040799 C5          0134*   	push	bc	;preserve BCU
04079A 06 03       0135*   	ld		b,3
04079C 21 F6 07 04 0136*   	ld	hl,bitbuf1
0407A0 11 F6 07 04 0137*   	ld	de,bitbuf1
0407A4             0138*   andloop_24:
0407A4 1A          0139*   	ld	a,(de)
0407A5 A6          0140*   	and	(hl)
0407A6 12          0141*   	ld	(de),a
0407A7 13          0142*   	inc	de
0407A8 23          0143*   	inc	hl
0407A9 10 F9       0144*   	djnz	andloop_24
0407AB 2A F9 07 04 0145*   	ld	hl,(bitbuf2)
0407AF C1          0146*   	pop		bc	;restore BC
0407B0 D1          0147*   	pop		de	;restore DE
0407B1             0148*   
0407B1             0149*   ;------------------------------------------------------------------------
0407B1             0150*   ; xor_hlu_deu: 24 bit bitwise XOR
0407B1             0151*   ; Returns: hlu = hlu XOR deu
0407B1             0152*   ; preserves all other registers
0407B1             0153*   ;------------------------------------------------------------------------
0407B1             0154*   xor_hlu_deu:
0407B1 22 F6 07 04 0155*   	ld	(bitbuf1),hl
0407B5 ED 53 F9 07 0156*   	ld	(bitbuf2),de
       04          
0407BA D5          0157*   	push	de	;preserve DEU
0407BB C5          0158*   	push	bc	;preserve BCU
0407BC 06 03       0159*   	ld		b,3
0407BE 21 F6 07 04 0160*   	ld	hl,bitbuf1
0407C2 11 F6 07 04 0161*   	ld	de,bitbuf1
0407C6             0162*   xorloop_24:
0407C6 1A          0163*   	ld	a,(de)
0407C7 AE          0164*   	xor	(hl)
0407C8 12          0165*   	ld	(de),a
0407C9 13          0166*   	inc	de
0407CA 23          0167*   	inc	hl
0407CB 10 F9       0168*   	djnz	xorloop_24
0407CD 2A F9 07 04 0169*   	ld	hl,(bitbuf2)
0407D1 C1          0170*   	pop		bc	;restore BC
0407D2 D1          0171*   	pop		de	;restore DE
0407D3             0172*   
0407D3             0173*   ;------------------------------------------------------------------------
0407D3             0174*   ; shl_hlu: 24 bit shift left hlu by a positions
0407D3             0175*   ; Returns: hlu = hlu << a
0407D3             0176*   ;		   a = 0
0407D3             0177*   ; NOTE: only considers a up to 16 bits.
0407D3             0178*   ; preserves all other registers
0407D3             0179*   ; modified by Brandon R. Gates to use a instead of de
0407D3             0180*   ;------------------------------------------------------------------------
0407D3             0181*   shl_hlu:
0407D3 B7          0182*   	or a
0407D4 C8          0183*   	ret		z		;we're done
0407D5 29          0184*   	add		hl,hl	;shift HLU left
0407D6 3D          0185*   	dec a
0407D7 18 FA       0186*   	jr		shl_hlu
0407D9             0187*   
0407D9             0188*   ;------------------------------------------------------------------------
0407D9             0189*   ; shr_hlu: 24 bit shift right hlu by a positions
0407D9             0190*   ; Returns: hlu = hlu >> a
0407D9             0191*   ;		   a = 0
0407D9             0192*   ; NOTE: only considers a up to 16 bits.
0407D9             0193*   ; preserves all other registers
0407D9             0194*   ; modified by Brandon R. Gates to use a instead of de
0407D9             0195*   ;------------------------------------------------------------------------
0407D9             0196*   shr_hlu:
0407D9 22 F6 07 04 0197*   	ld		(bitbuf1),hl
0407DD 21 F8 07 04 0198*   	ld		hl,bitbuf1+2
0407E1             0199*   @shr_loop:
0407E1 B7          0200*   	or a
0407E2 28 0D       0201*   	jr		z,@shr_done		;we're done
0407E4             0202*   ;carry is clear from or instruction
0407E4 CB 1E       0203*   	rr		(hl)
0407E6 2B          0204*   	dec		hl
0407E7 CB 1E       0205*   	rr		(hl)
0407E9 2B          0206*   	dec		hl
0407EA CB 1E       0207*   	rr		(hl)
0407EC 23          0208*   	inc		hl
0407ED 23          0209*   	inc		hl
0407EE 3D          0210*   	dec a
0407EF 18 F0       0211*   	jr		@shr_loop
0407F1             0212*   @shr_done:
0407F1 2A F6 07 04 0213*   	ld		hl,(bitbuf1)	;collect result
0407F5 C9          0214*   	ret
0407F6             0215*   
0407F6             0216*   ;------------------------------------------------------------------------
0407F6             0217*   ; Scratch area for calculations
0407F6             0218*   ;------------------------------------------------------------------------
0407F6 00 00 00    0219*   bitbuf1:	dw24	0	;bit manipulation buffer 1
0407F9 00 00 00    0220*   bitbuf2:	dw24	0	;bit manipulation buffer 2
0407FC             0221*   
0407FC             0222*   ; -----------------------------------------------------------------------
0407FC             0223*   ; Functions added by Brandon R. Gates
0407FC             0224*   ; -----------------------------------------------------------------------
0407FC             0225*   
0407FC             0226*   ;------------------------------------------------------------------------
0407FC             0227*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
0407FC             0228*   ;              Determines the LSB of A and shifts HLU accordingly.
0407FC             0229*   ;              HLU = HLU >> LSB(A)
0407FC             0230*   ; Returns: HLU = HLU >> LSB(A)
0407FC             0231*   ; Destroys: af
0407FC             0232*   ;------------------------------------------------------------------------
0407FC             0233*   shr_hlu_log2a:
0407FC B7          0234*   	or a    ; check for zero
0407FD C8          0235*   	ret z   ; nothing to shift so we're done
0407FE C5          0236*   	push 	bc ; preserve
0407FF 06 00       0237*   	ld		b,0 ; clear b
040801             0238*   @find_bit:
040801 0F          0239*   	rrca ; bit 0 to carry
040802 DA 0B 08 04 0240*   	jp c,@found_bit
040806 04          0241*   	inc b ; next bit
040807 C3 01 08 04 0242*   	jp @find_bit
04080B             0243*   @found_bit:
04080B 78          0244*   	ld a,b
04080C CD D9 07 04 0245*   	call shr_hlu
040810 C1          0246*   	pop 	bc ; restore
040811 C9          0247*   	ret
040812             0248*   ; end shr_hlu_log2a
040812             0249*   
040812             0250*   ;------------------------------------------------------------------------
040812             0251*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040812             0252*   ;                Determines the LSB of A and shifts HLU accordingly.
040812             0253*   ;                HLU = HLU << LSB(A)
040812             0254*   ; Returns: HLU = HLU << LSB(A)
040812             0255*   ; Destroys: af
040812             0256*   ;------------------------------------------------------------------------
040812             0257*   shl_hlu_log2a:
040812 B7          0258*   	or a    ; check for zero
040813 C8          0259*   	ret z   ; nothing to shift so we're done
040814 C5          0260*   	push 	bc ; preserve
040815 06 00       0261*   	ld		b,0 ; clear b
040817             0262*   @find_bit:
040817 0F          0263*   	rrca ; bit 0 to carry
040818 DA 21 08 04 0264*   	jp c,@found_bit
04081C 04          0265*   	inc b ; next bit
04081D C3 17 08 04 0266*   	jp @find_bit
040821             0267*   @found_bit:
040821 78          0268*   	ld a,b
040822 CD D3 07 04 0269*   	call shl_hlu
040826 C1          0270*   	pop 	bc ; restore
040827 C9          0271*   	ret
040828             0272*   ; end shl_hlu_log2a
040828             0032        include "maths.inc"
040828 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   ; test the sign of HL
040900             0003*   ; inputs: HL obviously
040900             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040900             0005*   ; destroys: flags
040900             0006*       MACRO sign_hlu
040900             0007*       add hl,de
040900             0008*       or a ; clear flags
040900             0009*       sbc hl,de
040900             0010*       ENDMACRO
040900             0011*   
040900             0012*   
040900             0013*   ;------------------------------------------------------------------------
040900             0014*   ; Scratch area for calculations
040900             0015*   ;------------------------------------------------------------------------
040900 00 00 00    0016*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0017*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0018*   
040906             0019*   ; absolute value of hlu
040906             0020*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0021*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0022*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0023*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0024*   ; destroys: a
040906             0025*   hlu_abs:
040906 19          0026*       add hl,de
040907 B7          0027*       or a
040908 ED 52       0028*       sbc hl,de
04090A FA 0F 09 04 0029*       jp m,@is_neg
04090E C9          0030*       ret ; hlu is positive or zero so we're done
04090F             0031*   @is_neg:
04090F F5          0032*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0033*       call neg_hlu ; negate hlu
040914 F1          0034*       pop af ; get back flags
040915 C9          0035*       ret
040916             0036*   
040916             0037*   ; flip the sign of hlu
040916             0038*   ; inputs: hlu
040916             0039*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0040*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0041*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0042*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0043*   ; destroys a
040916             0044*   neg_hlu:
040916 D5          0045*       push de ; save de
040917 EB          0046*       ex de,hl ; put hl into de
040918 21 00 00 00 0047*       ld hl,0 ; clear hl
04091C AF          0048*       xor a ; clear carry
04091D ED 52       0049*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0050*       pop de ; get de back
040920 C9          0051*       ret ; easy peasy
040921             0052*   
040921             0053*   ;------------------------------------------------------------------------
040921             0054*   ; divide hlu by 2, inspired by above
040921             0055*   ;------------------------------------------------------------------------
040921             0056*   hlu_div2:
040921 22 00 09 04 0057*       ld (scratch1),hl
040925 21 02 09 04 0058*       ld hl,scratch1+2
040929 CB 1E       0059*       rr (hl)
04092B 2B          0060*       dec hl
04092C CB 1E       0061*       rr (hl)
04092E 2B          0062*       dec hl
04092F CB 1E       0063*       rr (hl)
040931 23          0064*       inc hl
040932 23          0065*       inc hl
040933 2A 00 09 04 0066*       ld hl,(scratch1)
040937 C9          0067*       ret
040938             0068*   
040938             0069*   ; this is my little hack to divide by 16
040938             0070*   hlu_div16:
040938 AF          0071*       xor a
040939 29          0072*       add hl,hl
04093A 17          0073*       rla
04093B 29          0074*       add hl,hl
04093C 17          0075*       rla
04093D 29          0076*       add hl,hl
04093E 17          0077*       rla
04093F 29          0078*       add hl,hl
040940 17          0079*       rla
040941 22 4E 09 04 0080*       ld (@scratch),hl
040945 32 51 09 04 0081*       ld (@scratch+3),a
040949 2A 4F 09 04 0082*       ld hl,(@scratch+1)
04094D C9          0083*       ret
04094E             0084*   @scratch: ds 4
040952             0085*   
040952             0086*   ; hlu signed division by 256
040952             0087*   ; returns: hlu / 256
040952             0088*   ; destroys: af
040952             0089*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0090*       xor a ; assume hl is positive
040953 22 69 09 04 0091*       ld (@buffer),hl
040957             0092*       sign_hlu
040957 19          0001*M1     add hl,de
040958 B7          0002*M1     or a ; clear flags
040959 ED 52       0003*M1     sbc hl,de
04095B F2 60 09 04 0093*       jp p,@hl_pos
04095F 3D          0094*       dec a
040960             0095*   @hl_pos:
040960 32 6C 09 04 0096*       ld (@buffer+3),a
040964 2A 6A 09 04 0097*       ld hl,(@buffer+1)
040968 C9          0098*       ret
040969             0099*   @buffer: ds 4
04096D             0100*   
04096D             0101*   ; hlu 1 byte right shift, unsigned
04096D             0102*   ; returns: hlu / 256, fractional portion in a
04096D             0103*   ; destroys: af
04096D             0104*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0105*       xor a
04096E 32 7F 09 04 0106*       ld (@buffer+3),a
040972 7D          0107*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0108*       ld (@buffer),hl
040977 2A 7D 09 04 0109*       ld hl,(@buffer+1)
04097B C9          0110*       ret
04097C             0111*   @buffer: ds 4
040980             0112*   
040980             0113*       MACRO hlu_mul256
040980             0114*       add hl,hl ; * 2
040980             0115*       add hl,hl ; * 4
040980             0116*       add hl,hl ; * 8
040980             0117*       add hl,hl ; * 16
040980             0118*       add hl,hl ; * 32
040980             0119*       add hl,hl ; * 64
040980             0120*       add hl,hl ; * 128
040980             0121*       add hl,hl ; * 256
040980             0122*       ENDMACRO
040980             0123*   
       FF FF FF FF 
040980 00 00 00 00 0124*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0125*   add_bcd_arg2: db #00,#00,#00,#00
040988             0126*   
040988             0127*   ; set bcd values in a scratch memory address from registers bcde
040988             0128*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0129*   ; destroys ; hl
040988             0130*   set_bcd:
040988 73          0131*       ld (hl),e
040989 23          0132*       inc hl
04098A 72          0133*       ld (hl),d
04098B 23          0134*       inc hl
04098C 71          0135*       ld (hl),c
04098D 23          0136*       inc hl
04098E 70          0137*       ld (hl),b
04098F C9          0138*       ret
040990             0139*   
040990             0140*   ; load bcd values from a scratch memory address to bcde
040990             0141*   ; input: hl; scratch address
040990             0142*   ; output: bcde; 8-place bcd number
040990             0143*   ; destroys: hl
040990             0144*   get_bcd:
040990 5E          0145*       ld e,(hl)
040991 23          0146*       inc hl
040992 56          0147*       ld d,(hl)
040993 23          0148*       inc hl
040994 4E          0149*       ld c,(hl)
040995 23          0150*       inc hl
040996 46          0151*       ld b,(hl)
040997 C9          0152*       ret
040998             0153*   
040998             0154*   ; BCD addition
040998             0155*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0156*   ;       a is the number of bytes holding each number (number of places/2)
040998             0157*   ; outputs: (hl) + (de) --> (hl)
040998             0158*   ; destroys: a,b,de,hl
040998             0159*   add_bcd:
040998 47          0160*       ld b,a ; loop counter
040999 AF          0161*       xor a ; reset a, clear carry flag
04099A             0162*   adcec:
04099A 1A          0163*       ld a,(de) ; addend to acc
04099B 8E          0164*       adc a,(hl) ; add (hl) to acc
04099C 27          0165*       daa ; adjust result to bcd
04099D 77          0166*       ld (hl),a ; store result
04099E 23          0167*       inc hl ; advance memory pointers
04099F 13          0168*       inc de
0409A0 10 F8       0169*       djnz adcec ; loop until b == 0
0409A2 C9          0170*       ret
0409A3             0171*   
0409A3             0172*   ; BCD subtraction
0409A3             0173*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0174*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0175*   ; outputs: (hl) - (de) --> (hl)
0409A3             0176*   ; destroys: a,b,de,hl
0409A3             0177*   sub_bcd:
0409A3 47          0178*       ld b,a ; loop counter
0409A4 AF          0179*       xor a ; reset a,clear carry flag
0409A5             0180*   subdec:
0409A5 1A          0181*       ld a,(de) ; subtrahend to acc
0409A6 9E          0182*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0183*       daa ; adjust result to bcd
0409A8 77          0184*       ld (hl),a ; store result
0409A9 23          0185*       inc hl ; advance memory pointers
0409AA 13          0186*       inc de
0409AB 10 F8       0187*       djnz subdec ; loop until b == 0
0409AD C9          0188*       ret
0409AE             0189*   
0409AE             0190*   ; http://www.z80.info/pseudo-random.txt
0409AE             0191*   rand_8:
0409AE C5          0192*       push bc
0409AF 3A C2 09 04 0193*       ld a,(r_seed)
0409B3 4F          0194*       ld c,a
0409B4             0195*   
0409B4 0F          0196*       rrca ; multiply by 32
0409B5 0F          0197*       rrca
0409B6 0F          0198*       rrca
0409B7 EE 1F       0199*       xor 0x1f
0409B9             0200*   
0409B9 81          0201*       add a,c
0409BA DE FF       0202*       sbc a,255 ; carry
0409BC             0203*   
0409BC 32 C2 09 04 0204*       ld (r_seed),a
0409C0 C1          0205*       pop bc
0409C1 C9          0206*       ret
0409C2 50          0207*   r_seed: defb $50
0409C3             0208*   
0409C3             0209*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0210*   prng24:
0409C3             0211*   ;;Expects ADL mode.
0409C3             0212*   ;;Output: HL
0409C3             0213*   ;;50cc
0409C3             0214*   ;;33 bytes
0409C3             0215*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0216*       ld de,(seed1)
       04          
0409C8 B7          0217*       or a
0409C9 ED 62       0218*       sbc hl,hl
0409CB 19          0219*       add hl,de
0409CC 29          0220*       add hl,hl
0409CD 29          0221*       add hl,hl
0409CE 2C          0222*       inc l
0409CF 19          0223*       add hl,de
0409D0 22 E4 09 04 0224*       ld (seed1),hl
0409D4 2A E7 09 04 0225*       ld hl,(seed2)
0409D8 29          0226*       add hl,hl
0409D9 9F          0227*       sbc a,a
0409DA E6 1B       0228*       and %00011011
0409DC AD          0229*       xor l
0409DD 6F          0230*       ld l,a
0409DE 22 E7 09 04 0231*       ld (seed2),hl
0409E2 19          0232*       add hl,de
0409E3 C9          0233*       ret
0409E4 00 00 00    0234*   seed1: dl 0
0409E7 00 00 00    0235*   seed2: dl 0
0409EA             0033        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0034        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   umul24:
040AB8 CD 46 0A 04 0121*       call mul24
040ABC 2A 40 0A 04 0122*       ld hl,(mul24out)
040AC0 C9          0123*       ret
040AC1             0124*   
040AC1             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AC1             0126*   umul168:
040AC1 CD 46 0A 04 0127*       call mul24
040AC5 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC9 C9          0129*       ret
040ACA             0130*   
040ACA             0131*   ; UH.L * UD.E --> UH.L (signed)
040ACA             0132*   smul168:
040ACA             0133*   ; make everything positive and store sign flags
040ACA CD 06 09 04 0134*       call hlu_abs
040ACE F5          0135*       push af
040ACF EB          0136*       ex de,hl
040AD0 CD 06 09 04 0137*       call hlu_abs
040AD4 EB          0138*       ex de,hl
040AD5 F5          0139*       push af
040AD6             0140*   ; do the division
040AD6 CD C1 0A 04 0141*       call umul168 ; hl = product
040ADA             0142*   ; adjust sign of result
040ADA F1          0143*       pop af ; sign de
040ADB FA E6 0A 04 0144*       jp m,@de_neg
040ADF F1          0145*       pop af ; sign hl
040AE0 F0          0146*       ret p ; both positive, nothing to do
040AE1             0147*   @hl_neg:
040AE1 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040AE5 C9          0149*       ret
040AE6             0150*   @de_neg:
040AE6 F1          0151*       pop af
040AE7 F8          0152*       ret m ; both negative, nothing to do
040AE8 CD 16 09 04 0153*       call neg_hlu ; result is negative
040AEC C9          0154*       ret
040AED             0155*   
040AED             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AED             0157*   ; perform unsigned division of 16.8 fixed place values
040AED             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AED             0159*   udiv168:
040AED             0160*   ; back up divisor
040AED ED 53 24 0B 0161*       ld (@ude),de
       04          
040AF2             0162*   ; get the 16-bit integer part of the quotient
040AF2 CD 3E 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AF6             0164*   ; load quotient to upper three bytes of output
040AF6 ED 53 2B 0B 0165*       ld (div168_out+1),de
       04          
040AFB             0166*   @div256:
040AFB             0167*   ; multiply remainder by 256
040AFB             0168*       hlu_mul256
040AFB 29          0001*M1     add hl,hl ; * 2
040AFC 29          0002*M1     add hl,hl ; * 4
040AFD 29          0003*M1     add hl,hl ; * 8
040AFE 29          0004*M1     add hl,hl ; * 16
040AFF 29          0005*M1     add hl,hl ; * 32
040B00 29          0006*M1     add hl,hl ; * 64
040B01 29          0007*M1     add hl,hl ; * 128
040B02 29          0008*M1     add hl,hl ; * 256
040B03             0169*   ; skip fractional computation if remainder is zero
040B03             0170*       sign_hlu
040B03 19          0001*M1     add hl,de
040B04 B7          0002*M1     or a ; clear flags
040B05 ED 52       0003*M1     sbc hl,de
040B07 20 03       0171*       jr nz,@div_frac
040B09 AF          0172*       xor a
040B0A 18 0A       0173*       jr @write_frac
040B0C             0174*   ; now divide the shifted remainder by the divisor
040B0C             0175*   @div_frac:
040B0C ED 5B 24 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B11 CD 3E 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B15             0178*   ; load low byte of quotient to low byte of output
040B15 7B          0179*       ld a,e
040B16             0180*   @write_frac:
040B16 32 2A 0B 04 0181*       ld (div168_out),a
040B1A             0182*   ; load de with return value
040B1A ED 5B 2A 0B 0183*       ld de,(div168_out)
       04          
040B1F             0184*   ; load a with any overflow
040B1F 3A 2D 0B 04 0185*       ld a,(div168_out+3)
040B23 C9          0186*       ret ; ud.e is the 16.8 result
040B24             0187*   @ude: ds 6
040B2A             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B2E             0189*   
040B2E             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B2E             0191*   ; perform signed division of 16.8 fixed place values
040B2E             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B2E             0193*   sdiv168:
040B2E             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B2E CD 06 09 04 0195*       call hlu_abs
040B32 F5          0196*       push af
040B33 EB          0197*       ex de,hl
040B34 CD 06 09 04 0198*       call hlu_abs
040B38 EB          0199*       ex de,hl
040B39 F5          0200*       push af
040B3A             0201*   ; do the division
040B3A CD ED 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B3E             0203*   ; adjust sign of result
040B3E F1          0204*       pop af ; sign de
040B3F FA 4C 0B 04 0205*       jp m,@de_neg
040B43 F1          0206*       pop af ; sign hl
040B44 F0          0207*       ret p ; both positive, nothing to do
040B45             0208*   @hl_neg:
040B45 EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B4A EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0212*       ret
040B4C             0213*   @de_neg:
040B4C F1          0214*       pop af
040B4D F8          0215*       ret m ; both negative, nothing to do
040B4E EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B4F CD 16 09 04 0217*       call neg_hlu ; result is negative
040B53 EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B54 C9          0219*       ret
040B55             0220*   
040B55             0221*   ; convert signed angles from a 360 to 256 degree circle
040B55             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B55             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B55             0224*   ; destroys: TODO
040B55             0225*   deg_360_to_256:
040B55 D5          0226*       push de ; preserve de
040B56             0227*   ; make angle positive and store sign flag
040B56 CD 06 09 04 0228*       call hlu_abs
040B5A F5          0229*       push af
040B5B             0230*   ; multiply by coversion factor of 256/360
040B5B 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B5F CD C1 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B63             0233*   ; restore sign flag and adjust output accordingly
040B63 F1          0234*       pop af
040B64 F2 6C 0B 04 0235*       jp p,@pos ; positive number
040B68 CD 16 09 04 0236*       call neg_hlu
040B6C             0237*   @pos:
040B6C             0238*   ; restore de and return uh.l as the result
040B6C D1          0239*       pop de
040B6D C9          0240*       ret
040B6E             0241*   
040B6E             0242*   ; convert signed angles from a 256 to 360 degree circle
040B6E             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B6E             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B6E             0245*   ; destroys: TODO
040B6E             0246*   deg_256_to_360:
040B6E D5          0247*       push de ; preserve de
040B6F             0248*   ; make angle positive and store sign flag
040B6F CD 06 09 04 0249*       call hlu_abs
040B73 F5          0250*       push af
040B74             0251*   ; multiply by coversion factor of 360/256
040B74 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B78 CD C1 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B7C             0254*   ; restore sign flag and adjust output accordingly
040B7C F1          0255*       pop af
040B7D F2 85 0B 04 0256*       jp p,@pos ; positive number
040B81 CD 16 09 04 0257*       call neg_hlu
040B85             0258*   @pos:
040B85             0259*   ; restore de and return uh.l as the result
040B85 D1          0260*       pop de
040B86 C9          0261*       ret
040B87             0262*   
040B87             0263*   ; fixed 16.8 routine
040B87             0264*   ; cos(uh.l) --> uh.l
040B87             0265*   ; destroys: f, hl
040B87             0266*   cos168:
040B87 D5          0267*       push de ; preserve de
040B88             0268*   ; for cos we simply increment the angle by 90 degrees
040B88             0269*   ; or 0x004000 in 16.8 degrees256
040B88             0270*   ; which makes it a sin problem
040B88 11 00 40 00 0271*       ld de,0x004000
040B8C 19          0272*       add hl,de ; modulo 256 happens below
040B8D D1          0273*       pop de ; restore de
040B8E             0274*   ; fall through to sin168
040B8E             0275*   
040B8E             0276*   ; ---------------------
040B8E             0277*   ; fixed 16.8 routine
040B8E             0278*   ; sin(uh.l) --> uh.l
040B8E             0279*   ; destroys: f, hl
040B8E             0280*   sin168:
040B8E D5          0281*       push de
040B8F             0282*   ; handle negative angles appropriately
040B8F CD 06 09 04 0283*       call hlu_abs
040B93 F2 9C 0B 04 0284*       jp p,@F
040B97 11 00 00 FF 0285*       ld de,-256*256
040B9B 19          0286*       add hl,de
040B9C             0287*   @@:
040B9C 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B9E ED 6C       0289*       mlt hl
040BA0 11 0A 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040BA4 19          0291*       add hl,de ; bump hl by the index
040BA5 ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040BA7 D1          0293*       pop de
040BA8 C9          0294*       ret
040BA9             0295*   
040BA9             0296*   ; 16.8 fixed inputs / outputs
040BA9             0297*   ; takes: uh.l as angle in degrees 256
040BA9             0298*   ;        ud.e as radius
040BA9             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA9             0300*   ;        displacements from origin (0,0)
040BA9             0301*   ; destroys: everything except indexes
040BA9             0302*   polar_to_cartesian:
040BA9             0303*   ; back up input parameters
040BA9 22 D8 0B 04 0304*       ld (@angle), hl
040BAD ED 53 DB 0B 0305*       ld (@radius), de
       04          
040BB2             0306*   ; compute dx = sin(uh.l) * ud.e
040BB2 CD 8E 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BB6 ED 5B DB 0B 0308*       ld de,(@radius)
       04          
040BBB CD CA 0A 04 0309*       call smul168 ; uh.l = dx
040BBF E5          0310*       push hl
040BC0             0311*   ; compute dy = -cos(uh.l) * ud.e
040BC0 2A D8 0B 04 0312*       ld hl,(@angle)
040BC4 CD 87 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BC8 ED 5B DB 0B 0314*       ld de,(@radius)
       04          
040BCD CD CA 0A 04 0315*       call smul168 ; uh.l = dy
040BD1 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BD5 EB          0317*       ex de,hl ; de = dy for output
040BD6 C1          0318*       pop bc ; bc = dx for output
040BD7             0319*   ; and out
040BD7 C9          0320*       ret
040BD8             0321*   @angle: ds 3
040BDB             0322*   @radius: ds 3
040BDE             0323*   
040BDE             0324*   ; 16.8 fixed inputs / outputs
040BDE             0325*   ; inputs: ub.c as dx, ud.e as dy
040BDE             0326*   ;        displacements from origin (0,0)
040BDE             0327*   ; returns: uh.l as angle in degrees 256
040BDE             0328*   ;        ud.e as radius
040BDE             0329*   ; destroys: everything except indexes
040BDE             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BDE ED 43 18 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BE3 ED 53 1E 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BE8             0333*   ; compute radius
040BE8 CD 24 0C 04 0334*       call distance168 ; uh.l = radius
040BEC E5          0335*       push hl ; save radius
040BED             0336*   ; compute angle
040BED ED 4B 18 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BF2 ED 5B 1E 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BF7 CD 59 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BFB             0340*   ; return result
040BFB D1          0341*       pop de ; de = radius (was hl)
040BFC C9          0342*       ret
040BFD             0343*   ; end cartesian_to_polar
040BFD             0344*   
040BFD             0345*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040BFD             0346*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040BFD             0347*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040BFD             0348*   ;         also populates scratch locations dx168 and dy168
040BFD             0349*   ; destroys: a,hl,bc,de
040BFD             0350*   dxy168:
040BFD             0351*   ; compute dx = x1-x0
040BFD AF          0352*       xor a ; clear carry
040BFE DD E5       0353*       push ix ; move ix to hl via the stack
040C00 E1          0354*       pop hl ; hl = x1
040C01 ED 42       0355*       sbc hl,bc ; hl = dx
040C03 22 18 0C 04 0356*       ld (dx168),hl ; dx to scratch
040C07             0357*   ; compute dy = y1-y0
040C07 AF          0358*       xor a ; clear carry
040C08 FD E5       0359*       push iy ; move iy to hl via the stack
040C0A E1          0360*       pop hl ; hl = y1
040C0B ED 52       0361*       sbc hl,de ; hl = dy
040C0D 22 1E 0C 04 0362*       ld (dy168),hl ; dy to scratch
040C11             0363*   ; populate output registers and return
040C11 EB          0364*       ex de,hl ; ud.e = dy
040C12 ED 4B 18 0C 0365*       ld bc,(dx168) ; ub.c = dx
       04          
040C17 C9          0366*       ret
040C18 00 00 00 00 0367*   dx168: blkb 6,0
       00 00       
040C1E 00 00 00 00 0368*   dy168: blkb 6,0
       00 00       
040C24             0369*   
040C24             0370*   ; compute the euclidian distance between two cartesian coordinates
040C24             0371*   ; using the formula d = sqrt(dx^2+dy^2)
040C24             0372*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C24             0373*   ; output; uh.l is the 16.8 fixed format distance
040C24             0374*   ;         also populates scratch locations dx168 and dy168
040C24             0375*   ; destroys: a,hl,bc,de
040C24             0376*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C24             0377*   ;       thus the result will always be an integer, albeit in 16.8 format
040C24             0378*   distance168:
040C24             0379*   ; compute dy^2
040C24 2A 1E 0C 04 0380*       ld hl,(dy168)
040C28 CD 06 09 04 0381*       call hlu_abs
040C2C CD 6D 09 04 0382*       call hlu_udiv256 ; make integer to avoid overflow
040C30 E5          0383*       push hl
040C31 D1          0384*       pop de
040C32 CD B8 0A 04 0385*       call umul24 ; hl = dy^2
040C36 E5          0386*       push hl ; save dy^2
040C37             0387*   ; compute dx^2
040C37 2A 18 0C 04 0388*       ld hl,(dx168)
040C3B CD 06 09 04 0389*       call hlu_abs
040C3F CD 6D 09 04 0390*       call hlu_udiv256 ; make integer to avoid overflow
040C43 E5          0391*       push hl
040C44 D1          0392*       pop de
040C45 CD B8 0A 04 0393*       call umul24 ; hl = dx^2
040C49             0394*   ; add dx^2 and dy^2
040C49 D1          0395*       pop de ; de = dy^2 (was hl)
040C4A 19          0396*       add hl,de ; hl = dx^2 + dy^2
040C4B             0397*   ; compute the square root
040C4B CD 24 0D 04 0398*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C4F EB          0399*       ex de,hl ; hl = distance
040C50             0400*       hlu_mul256 ; convert back to 16.8 fixed
040C50 29          0001*M1     add hl,hl ; * 2
040C51 29          0002*M1     add hl,hl ; * 4
040C52 29          0003*M1     add hl,hl ; * 8
040C53 29          0004*M1     add hl,hl ; * 16
040C54 29          0005*M1     add hl,hl ; * 32
040C55 29          0006*M1     add hl,hl ; * 64
040C56 29          0007*M1     add hl,hl ; * 128
040C57 29          0008*M1     add hl,hl ; * 256
040C58 C9          0401*       ret
040C59             0402*   
040C59             0403*   ; atan2_(ub.c,ud.e) --> uh.l
040C59             0404*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C59             0405*   ;   whether inputs are integers or fractional doesn't matter
040C59             0406*   ;   so long as the sign bit of the upper byte is correct
040C59             0407*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C59             0408*   ; angles are COMPASS HEADINGS based on
040C59             0409*   ; screen coordinate conventions,where the y axis is flipped
040C59             0410*   ; #E0 224      0       32 #20
040C59             0411*   ;        -x,-y | +x,-y
040C59             0412*   ; #C0 192------+------ 64 #40
040C59             0413*   ;        -x,+y | +x,+y
040C59             0414*   ; #A0 160   128 #80   96 #60
040C59             0415*   atan2_168fast:
040C59             0416*   ; get signs and make everything positive
040C59             0417*   ; get abs(x) and store its original sign
040C59 C5          0418*       push bc
040C5A E1          0419*       pop hl
040C5B CD 06 09 04 0420*       call hlu_abs ; if x was negative this also sets the sign flag
040C5F E5          0421*       push hl ; store abs(x)
040C60 C1          0422*       pop bc ; bc = abs(x)
040C61 F5          0423*       push af ; store sign of x
040C62             0424*   ; get abs(y) and store its original sign
040C62 EB          0425*       ex de,hl ; hl = y
040C63 CD 06 09 04 0426*       call hlu_abs ; if y was negative this also sets the sign flag
040C67 EB          0427*       ex de,hl ; de = abs(y)
040C68 F5          0428*       push af ; store sign of y
040C69             0429*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040C69             0430*   ; this ensures that our lookup value is between 0 and 1 inclusive
040C69 AF          0431*       xor a ; clear the carry flag
040C6A D5          0432*       push de
040C6B E1          0433*       pop hl
040C6C ED 42       0434*       sbc hl,bc
040C6E F5          0435*       push af ; save sign of de - bc
040C6F F2 78 0C 04 0436*       jp p,@1 ; bc <= de, so we skip ahead
040C73             0437*   ; otherwise we swap bc and de
040C73 C5          0438*       push bc
040C74 E1          0439*       pop hl
040C75 EB          0440*       ex de,hl
040C76 E5          0441*       push hl
040C77 C1          0442*       pop bc
040C78             0443*   @1:
040C78             0444*   ; now we're ready to snag our preliminary result
040C78 C5          0445*       push bc
040C79 E1          0446*       pop hl
040C7A CD E8 0C 04 0447*       call atan_168fast ; uh.l comes back with prelim result
040C7E             0448*   ; now we adjust uh.l based on sign of de - bc
040C7E F1          0449*       pop af
040C7F F2 8B 0C 04 0450*       jp p,@2 ; bc <= de,so we skip ahead
040C83 EB          0451*       ex de,hl
040C84 21 00 40 00 0452*       ld hl,64*256 ; subtract from 64 (90) degrees
040C88 AF          0453*       xor a ; clear the carry flag
040C89 ED 52       0454*       sbc hl,de
040C8B             0455*   @2:
040C8B             0456*   ; adjust the result based on quadrant
040C8B             0457*   ; #E0 224      0       32 #20
040C8B             0458*   ;        -x,-y | +x,-y
040C8B             0459*   ; #C0 192------+------ 64 #40
040C8B             0460*   ;        -x,+y | +x,+y
040C8B             0461*   ; #A0 160   128 #80   96 #60
040C8B F1          0462*       pop af ; sign of y
040C8C CA C9 0C 04 0463*       jp z,@y_zero
040C90 F2 A9 0C 04 0464*       jp p,@y_pos
040C94             0465*   ; y neg,check x
040C94 F1          0466*       pop af ; sign of x
040C95 CA A3 0C 04 0467*       jp z,@y_neg_x_zero
040C99 F2 A8 0C 04 0468*       jp p,@y_neg_x_pos
040C9D             0469*   ; y neg,x neg
040C9D             0470*   ; angle is 128 to 256 (270 to 360)
040C9D             0471*   ; negating the intermediate does the trick
040C9D CD 16 09 04 0472*       call neg_hlu
040CA1 18 31       0473*       jr @zero_hlu
040CA3             0474*   
040CA3             0475*   @y_neg_x_zero:
040CA3             0476*   ; y neg,x zero
040CA3             0477*   ; angle is 0
040CA3 21 00 00 00 0478*       ld hl,0
040CA7 C9          0479*       ret
040CA8             0480*   @y_neg_x_pos:
040CA8             0481*   ; y neg,x pos
040CA8             0482*   ; angle is 0 to 64 (0 to 90)
040CA8             0483*   ; so we're good
040CA8 C9          0484*       ret
040CA9             0485*   
040CA9             0486*   @y_pos:
040CA9 F1          0487*       pop af ; sign of x
040CAA CA B9 0C 04 0488*       jp z,@y_pos_x_zero
040CAE F2 BE 0C 04 0489*       jp p,@y_pos_x_pos
040CB2             0490*   ; y pos,x neg
040CB2             0491*   ; angle is 128 to 192 (180-270)
040CB2             0492*   ; so we add 128 to intermediate
040CB2 11 00 80 00 0493*       ld de,128*256
040CB6 19          0494*       add hl,de
040CB7 18 1B       0495*       jr @zero_hlu
040CB9             0496*   @y_pos_x_zero:
040CB9             0497*   ; y pos,x zero
040CB9             0498*   ; angle is 128 (180)
040CB9 21 00 80 00 0499*       ld hl,128*256
040CBD C9          0500*       ret
040CBE             0501*   @y_pos_x_pos:
040CBE             0502*   ; y pos,x pos
040CBE             0503*   ; angle is 64 to 128 (90 to 180)
040CBE             0504*   ; neg the intermediate and add 180 degrees
040CBE CD 16 09 04 0505*       call neg_hlu
040CC2 11 00 80 00 0506*       ld de,128*256
040CC6 19          0507*       add hl,de
040CC7 18 0B       0508*       jr @zero_hlu
040CC9             0509*   
040CC9             0510*   @y_zero:
040CC9 F1          0511*       pop af ; sign of x
040CCA FA CF 0C 04 0512*       jp m,@y_zero_x_neg
040CCE             0513*   ; y zero,x pos
040CCE             0514*   ; angle is 64 (90),nothing to do
040CCE C9          0515*       ret
040CCF             0516*   @y_zero_x_neg:
040CCF             0517*   ; y zero ,x neg
040CCF             0518*   ; angle is 192 (270)
040CCF 21 00 C0 00 0519*       ld hl,192*256
040CD3 C9          0520*       ret
040CD4             0521*   @zero_hlu:
040CD4 AF          0522*       xor a
040CD5 22 E2 0C 04 0523*       ld (@scratch),hl
040CD9 32 E4 0C 04 0524*       ld (@scratch+2),a
040CDD 2A E2 0C 04 0525*       ld hl,(@scratch)
040CE1 C9          0526*       ret
040CE2             0527*   @scratch: ds 6
040CE8             0528*   
040CE8             0529*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040CE8             0530*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040CE8             0531*   ; destroys: a,hl,bc,de
040CE8             0532*   ; note: only works for angles from 0 to 32 (45) degrees
040CE8             0533*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040CE8             0534*   atan_168fast:
040CE8             0535*   ; because we use compass headings instead of geometric angles
040CE8             0536*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040CE8             0537*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040CE8 CD ED 0A 04 0538*       call udiv168 ; ud.e = dx/dy
040CEC EB          0539*       ex de,hl ; uh.l = dx/dy
040CED             0540*   ; test uh.l for 0
040CED 19          0541*       add hl,de
040CEE B7          0542*       or a
040CEF ED 52       0543*       sbc hl,de
040CF1 28 22       0544*       jr z,@is_zero
040CF3             0545*   ; test uh.l for 1
040CF3 AF          0546*       xor a ; clear carry
040CF4 EB          0547*       ex de,hl
040CF5 21 00 01 00 0548*       ld hl,1*256 ; 1 in 16.8 fixed format
040CF9 ED 52       0549*       sbc hl,de
040CFB 28 13       0550*       jr z,@is_45
040CFD EB          0551*       ex de,hl
040CFE             0552*   ; no special cases so we move on
040CFE             0553*   ; l contains the fractional portion of tan(uh.l)
040CFE             0554*   ; we multiply it by three to get our lookup table index
040CFE 26 03       0555*       ld h,3
040D00 ED 6C       0556*       mlt hl ; index into lut
040D02 11 00 00 00 0557*       ld de,0 ; clear deu
040D06 54          0558*       ld d,h ; copy hl to de
040D07 5D          0559*       ld e,l ; de contains our index
040D08 21 0D 11 04 0560*       ld hl,atan_lut_168 ; grab the lut address
040D0C 19          0561*       add hl,de ; bump hl by the index
040D0D ED 27       0562*       ld hl,(hl) ; don't try this on a z80!
040D0F C9          0563*       ret ; and out
040D10             0564*   @is_45:
040D10 21 00 20 00 0565*       ld hl,32*256
040D14 C9          0566*       ret
040D15             0567*   ; for the case tan(0)
040D15             0568*   @is_zero:
040D15 21 00 00 00 0569*       ld hl,0*256
040D19 C9          0570*       ret
040D1A             0571*   
040D1A             0572*   ; Expects  ADL mode
040D1A             0573*   ; Inputs:  UH.L
040D1A             0574*   ; Outputs: UH.L is the 16.8 square root
040D1A             0575*   ;          UDE is the integer difference inputHL-DE^2
040D1A             0576*   sqrt168:
040D1A CD 24 0D 04 0577*       call sqrt24
040D1E EB          0578*       ex de,hl
040D1F 29          0579*       add hl,hl
040D20 29          0580*       add hl,hl
040D21 29          0581*       add hl,hl
040D22 29          0582*       add hl,hl
040D23 C9          0583*       ret
040D24             0584*   
040D24             0585*   ; credit: xeda112358
040D24             0586*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D24             0587*   sqrt24:
040D24             0588*   ; Expects ADL mode
040D24             0589*   ; Inputs: HL
040D24             0590*   ; Outputs: DE is the integer square root
040D24             0591*   ;  HL is the difference inputHL-DE^2
040D24             0592*   ;  c flag reset
040D24 01 00 00 00 0593*       ld bc,0 ; clear bcu
040D28 11 00 00 00 0594*       ld de,0 ; clear deu
040D2C AF          0595*       xor a
040D2D 45          0596*       ld b,l
040D2E C5          0597*       push bc
040D2F 47          0598*       ld b,a
040D30 6F          0599*       ld l,a
040D31             0600*   ; Iteration 1
040D31 29          0601*       add hl,hl
040D32 CB 11       0602*       rl c
040D34 29          0603*       add hl,hl
040D35 CB 11       0604*       rl c
040D37 91          0605*       sub c
040D38 30 04       0606*       jr nc,$+6
040D3A 1C          0607*       inc e
040D3B 1C          0608*       inc e
040D3C 2F          0609*       cpl
040D3D 4F          0610*       ld c,a
040D3E             0611*   ; Iteration 2
040D3E 29          0612*       add hl,hl
040D3F CB 11       0613*       rl c
040D41 29          0614*       add hl,hl
040D42 CB 11       0615*       rl c
040D44 CB 13       0616*       rl e
040D46 7B          0617*       ld a,e
040D47 91          0618*       sub c
040D48 30 04       0619*       jr nc,$+6
040D4A 1C          0620*       inc e
040D4B 1C          0621*       inc e
040D4C 2F          0622*       cpl
040D4D 4F          0623*       ld c,a
040D4E             0624*   ; Iteration 3
040D4E 29          0625*       add hl,hl
040D4F CB 11       0626*       rl c
040D51 29          0627*       add hl,hl
040D52 CB 11       0628*       rl c
040D54 CB 13       0629*       rl e
040D56 7B          0630*       ld a,e
040D57 91          0631*       sub c
040D58 30 04       0632*       jr nc,$+6
040D5A 1C          0633*       inc e
040D5B 1C          0634*       inc e
040D5C 2F          0635*       cpl
040D5D 4F          0636*       ld c,a
040D5E             0637*   ; Iteration 4
040D5E 29          0638*       add hl,hl
040D5F CB 11       0639*       rl c
040D61 29          0640*       add hl,hl
040D62 CB 11       0641*       rl c
040D64 CB 13       0642*       rl e
040D66 7B          0643*       ld a,e
040D67 91          0644*       sub c
040D68 30 04       0645*       jr nc,$+6
040D6A 1C          0646*       inc e
040D6B 1C          0647*       inc e
040D6C 2F          0648*       cpl
040D6D 4F          0649*       ld c,a
040D6E             0650*   ; Iteration 5
040D6E 29          0651*       add hl,hl
040D6F CB 11       0652*       rl c
040D71 29          0653*       add hl,hl
040D72 CB 11       0654*       rl c
040D74 CB 13       0655*       rl e
040D76 7B          0656*       ld a,e
040D77 91          0657*       sub c
040D78 30 04       0658*       jr nc,$+6
040D7A 1C          0659*       inc e
040D7B 1C          0660*       inc e
040D7C 2F          0661*       cpl
040D7D 4F          0662*       ld c,a
040D7E             0663*   ; Iteration 6
040D7E 29          0664*       add hl,hl
040D7F CB 11       0665*       rl c
040D81 29          0666*       add hl,hl
040D82 CB 11       0667*       rl c
040D84 CB 13       0668*       rl e
040D86 7B          0669*       ld a,e
040D87 91          0670*       sub c
040D88 30 04       0671*       jr nc,$+6
040D8A 1C          0672*       inc e
040D8B 1C          0673*       inc e
040D8C 2F          0674*       cpl
040D8D 4F          0675*       ld c,a
040D8E             0676*   ; Iteration 7
040D8E 29          0677*       add hl,hl
040D8F CB 11       0678*       rl c
040D91 29          0679*       add hl,hl
040D92 CB 11       0680*       rl c
040D94 CB 10       0681*       rl b
040D96 EB          0682*       ex de,hl
040D97 29          0683*       add hl,hl
040D98 E5          0684*       push hl
040D99 ED 42       0685*       sbc hl,bc
040D9B 30 06       0686*       jr nc,$+8
040D9D 7C          0687*       ld a,h
040D9E 2F          0688*       cpl
040D9F 47          0689*       ld b,a
040DA0 7D          0690*       ld a,l
040DA1 2F          0691*       cpl
040DA2 4F          0692*       ld c,a
040DA3 E1          0693*       pop hl
040DA4 30 02       0694*       jr nc,$+4
040DA6 23          0695*       inc hl
040DA7 23          0696*       inc hl
040DA8 EB          0697*       ex de,hl
040DA9             0698*   ; Iteration 8
040DA9 29          0699*       add hl,hl
040DAA 69          0700*       ld l,c
040DAB 60          0701*       ld h,b
040DAC ED 6A       0702*       adc hl,hl
040DAE ED 6A       0703*       adc hl,hl
040DB0 EB          0704*       ex de,hl
040DB1 29          0705*       add hl,hl
040DB2 ED 52       0706*       sbc hl,de
040DB4 19          0707*       add hl,de
040DB5 EB          0708*       ex de,hl
040DB6 30 04       0709*       jr nc,$+6
040DB8 ED 52       0710*       sbc hl,de
040DBA 13          0711*       inc de
040DBB 13          0712*       inc de
040DBC             0713*   ; Iteration 9
040DBC F1          0714*       pop af
040DBD 17          0715*       rla
040DBE ED 6A       0716*       adc hl,hl
040DC0 17          0717*       rla
040DC1 ED 6A       0718*       adc hl,hl
040DC3 EB          0719*       ex de,hl
040DC4 29          0720*       add hl,hl
040DC5 ED 52       0721*       sbc hl,de
040DC7 19          0722*       add hl,de
040DC8 EB          0723*       ex de,hl
040DC9 30 04       0724*       jr nc,$+6
040DCB ED 52       0725*       sbc hl,de
040DCD 13          0726*       inc de
040DCE 13          0727*       inc de
040DCF             0728*   ; Iteration 10
040DCF 17          0729*       rla
040DD0 ED 6A       0730*       adc hl,hl
040DD2 17          0731*       rla
040DD3 ED 6A       0732*       adc hl,hl
040DD5 EB          0733*       ex de,hl
040DD6 29          0734*       add hl,hl
040DD7 ED 52       0735*       sbc hl,de
040DD9 19          0736*       add hl,de
040DDA EB          0737*       ex de,hl
040DDB 30 04       0738*       jr nc,$+6
040DDD ED 52       0739*       sbc hl,de
040DDF 13          0740*       inc de
040DE0 13          0741*       inc de
040DE1             0742*   ; Iteration 11
040DE1 17          0743*       rla
040DE2 ED 6A       0744*       adc hl,hl
040DE4 17          0745*       rla
040DE5 ED 6A       0746*       adc hl,hl
040DE7 EB          0747*       ex de,hl
040DE8 29          0748*       add hl,hl
040DE9 ED 52       0749*       sbc hl,de
040DEB 19          0750*       add hl,de
040DEC EB          0751*       ex de,hl
040DED 30 04       0752*       jr nc,$+6
040DEF ED 52       0753*       sbc hl,de
040DF1 13          0754*       inc de
040DF2 13          0755*       inc de
040DF3             0756*   ; Iteration 12
040DF3 17          0757*       rla
040DF4 ED 6A       0758*       adc hl,hl
040DF6 17          0759*       rla
040DF7 ED 6A       0760*       adc hl,hl
040DF9 EB          0761*       ex de,hl
040DFA 29          0762*       add hl,hl
040DFB ED 52       0763*       sbc hl,de
040DFD 19          0764*       add hl,de
040DFE EB          0765*       ex de,hl
040DFF 30 04       0766*       jr nc,$+6
040E01 ED 52       0767*       sbc hl,de
040E03 13          0768*       inc de
040E04 13          0769*       inc de
040E05 CB 1A       0770*       rr d
040E07 CB 1B       0771*       rr e
040E09 C9          0772*       ret
040E0A             0773*   
040E0A             0774*   sin_lut_168:
040E0A 00 00 00    0775*       dl 0x000000 ; 0.000 00, 0.000
040E0D 06 00 00    0776*       dl 0x000006 ; 1.406 01, 0.025
040E10 0C 00 00    0777*       dl 0x00000C ; 2.813 02, 0.049
040E13 12 00 00    0778*       dl 0x000012 ; 4.219 03, 0.074
040E16 19 00 00    0779*       dl 0x000019 ; 5.625 04, 0.098
040E19 1F 00 00    0780*       dl 0x00001F ; 7.031 05, 0.122
040E1C 25 00 00    0781*       dl 0x000025 ; 8.438 06, 0.147
040E1F 2B 00 00    0782*       dl 0x00002B ; 9.844 07, 0.171
040E22 31 00 00    0783*       dl 0x000031 ; 11.250 08, 0.195
040E25 38 00 00    0784*       dl 0x000038 ; 12.656 09, 0.219
040E28 3E 00 00    0785*       dl 0x00003E ; 14.063 0A, 0.243
040E2B 44 00 00    0786*       dl 0x000044 ; 15.469 0B, 0.267
040E2E 4A 00 00    0787*       dl 0x00004A ; 16.875 0C, 0.290
040E31 50 00 00    0788*       dl 0x000050 ; 18.281 0D, 0.314
040E34 56 00 00    0789*       dl 0x000056 ; 19.688 0E, 0.337
040E37 5C 00 00    0790*       dl 0x00005C ; 21.094 0F, 0.360
040E3A 61 00 00    0791*       dl 0x000061 ; 22.500 10, 0.383
040E3D 67 00 00    0792*       dl 0x000067 ; 23.906 11, 0.405
040E40 6D 00 00    0793*       dl 0x00006D ; 25.313 12, 0.428
040E43 73 00 00    0794*       dl 0x000073 ; 26.719 13, 0.450
040E46 78 00 00    0795*       dl 0x000078 ; 28.125 14, 0.471
040E49 7E 00 00    0796*       dl 0x00007E ; 29.531 15, 0.493
040E4C 83 00 00    0797*       dl 0x000083 ; 30.938 16, 0.514
040E4F 88 00 00    0798*       dl 0x000088 ; 32.344 17, 0.535
040E52 8E 00 00    0799*       dl 0x00008E ; 33.750 18, 0.556
040E55 93 00 00    0800*       dl 0x000093 ; 35.156 19, 0.576
040E58 98 00 00    0801*       dl 0x000098 ; 36.563 1A, 0.596
040E5B 9D 00 00    0802*       dl 0x00009D ; 37.969 1B, 0.615
040E5E A2 00 00    0803*       dl 0x0000A2 ; 39.375 1C, 0.634
040E61 A7 00 00    0804*       dl 0x0000A7 ; 40.781 1D, 0.653
040E64 AB 00 00    0805*       dl 0x0000AB ; 42.188 1E, 0.672
040E67 B0 00 00    0806*       dl 0x0000B0 ; 43.594 1F, 0.690
040E6A B5 00 00    0807*       dl 0x0000B5 ; 45.000 20, 0.707
040E6D B9 00 00    0808*       dl 0x0000B9 ; 46.406 21, 0.724
040E70 BD 00 00    0809*       dl 0x0000BD ; 47.813 22, 0.741
040E73 C1 00 00    0810*       dl 0x0000C1 ; 49.219 23, 0.757
040E76 C5 00 00    0811*       dl 0x0000C5 ; 50.625 24, 0.773
040E79 C9 00 00    0812*       dl 0x0000C9 ; 52.031 25, 0.788
040E7C CD 00 00    0813*       dl 0x0000CD ; 53.438 26, 0.803
040E7F D1 00 00    0814*       dl 0x0000D1 ; 54.844 27, 0.818
040E82 D4 00 00    0815*       dl 0x0000D4 ; 56.250 28, 0.831
040E85 D8 00 00    0816*       dl 0x0000D8 ; 57.656 29, 0.845
040E88 DB 00 00    0817*       dl 0x0000DB ; 59.063 2A, 0.858
040E8B DE 00 00    0818*       dl 0x0000DE ; 60.469 2B, 0.870
040E8E E1 00 00    0819*       dl 0x0000E1 ; 61.875 2C, 0.882
040E91 E4 00 00    0820*       dl 0x0000E4 ; 63.281 2D, 0.893
040E94 E7 00 00    0821*       dl 0x0000E7 ; 64.688 2E, 0.904
040E97 EA 00 00    0822*       dl 0x0000EA ; 66.094 2F, 0.914
040E9A EC 00 00    0823*       dl 0x0000EC ; 67.500 30, 0.924
040E9D EE 00 00    0824*       dl 0x0000EE ; 68.906 31, 0.933
040EA0 F1 00 00    0825*       dl 0x0000F1 ; 70.313 32, 0.942
040EA3 F3 00 00    0826*       dl 0x0000F3 ; 71.719 33, 0.950
040EA6 F4 00 00    0827*       dl 0x0000F4 ; 73.125 34, 0.957
040EA9 F6 00 00    0828*       dl 0x0000F6 ; 74.531 35, 0.964
040EAC F8 00 00    0829*       dl 0x0000F8 ; 75.938 36, 0.970
040EAF F9 00 00    0830*       dl 0x0000F9 ; 77.344 37, 0.976
040EB2 FB 00 00    0831*       dl 0x0000FB ; 78.750 38, 0.981
040EB5 FC 00 00    0832*       dl 0x0000FC ; 80.156 39, 0.985
040EB8 FD 00 00    0833*       dl 0x0000FD ; 81.563 3A, 0.989
040EBB FE 00 00    0834*       dl 0x0000FE ; 82.969 3B, 0.992
040EBE FE 00 00    0835*       dl 0x0000FE ; 84.375 3C, 0.995
040EC1 FF 00 00    0836*       dl 0x0000FF ; 85.781 3D, 0.997
040EC4 FF 00 00    0837*       dl 0x0000FF ; 87.188 3E, 0.999
040EC7 FF 00 00    0838*       dl 0x0000FF ; 88.594 3F, 1.000
040ECA 00 01 00    0839*       dl 0x000100 ; 90.000 40, 1.000
040ECD FF 00 00    0840*       dl 0x0000FF ; 91.406 41, 1.000
040ED0 FF 00 00    0841*       dl 0x0000FF ; 92.813 42, 0.999
040ED3 FF 00 00    0842*       dl 0x0000FF ; 94.219 43, 0.997
040ED6 FE 00 00    0843*       dl 0x0000FE ; 95.625 44, 0.995
040ED9 FE 00 00    0844*       dl 0x0000FE ; 97.031 45, 0.992
040EDC FD 00 00    0845*       dl 0x0000FD ; 98.438 46, 0.989
040EDF FC 00 00    0846*       dl 0x0000FC ; 99.844 47, 0.985
040EE2 FB 00 00    0847*       dl 0x0000FB ; 101.250 48, 0.981
040EE5 F9 00 00    0848*       dl 0x0000F9 ; 102.656 49, 0.976
040EE8 F8 00 00    0849*       dl 0x0000F8 ; 104.063 4A, 0.970
040EEB F6 00 00    0850*       dl 0x0000F6 ; 105.469 4B, 0.964
040EEE F4 00 00    0851*       dl 0x0000F4 ; 106.875 4C, 0.957
040EF1 F3 00 00    0852*       dl 0x0000F3 ; 108.281 4D, 0.950
040EF4 F1 00 00    0853*       dl 0x0000F1 ; 109.688 4E, 0.942
040EF7 EE 00 00    0854*       dl 0x0000EE ; 111.094 4F, 0.933
040EFA EC 00 00    0855*       dl 0x0000EC ; 112.500 50, 0.924
040EFD EA 00 00    0856*       dl 0x0000EA ; 113.906 51, 0.914
040F00 E7 00 00    0857*       dl 0x0000E7 ; 115.313 52, 0.904
040F03 E4 00 00    0858*       dl 0x0000E4 ; 116.719 53, 0.893
040F06 E1 00 00    0859*       dl 0x0000E1 ; 118.125 54, 0.882
040F09 DE 00 00    0860*       dl 0x0000DE ; 119.531 55, 0.870
040F0C DB 00 00    0861*       dl 0x0000DB ; 120.938 56, 0.858
040F0F D8 00 00    0862*       dl 0x0000D8 ; 122.344 57, 0.845
040F12 D4 00 00    0863*       dl 0x0000D4 ; 123.750 58, 0.831
040F15 D1 00 00    0864*       dl 0x0000D1 ; 125.156 59, 0.818
040F18 CD 00 00    0865*       dl 0x0000CD ; 126.563 5A, 0.803
040F1B C9 00 00    0866*       dl 0x0000C9 ; 127.969 5B, 0.788
040F1E C5 00 00    0867*       dl 0x0000C5 ; 129.375 5C, 0.773
040F21 C1 00 00    0868*       dl 0x0000C1 ; 130.781 5D, 0.757
040F24 BD 00 00    0869*       dl 0x0000BD ; 132.188 5E, 0.741
040F27 B9 00 00    0870*       dl 0x0000B9 ; 133.594 5F, 0.724
040F2A B5 00 00    0871*       dl 0x0000B5 ; 135.000 60, 0.707
040F2D B0 00 00    0872*       dl 0x0000B0 ; 136.406 61, 0.690
040F30 AB 00 00    0873*       dl 0x0000AB ; 137.813 62, 0.672
040F33 A7 00 00    0874*       dl 0x0000A7 ; 139.219 63, 0.653
040F36 A2 00 00    0875*       dl 0x0000A2 ; 140.625 64, 0.634
040F39 9D 00 00    0876*       dl 0x00009D ; 142.031 65, 0.615
040F3C 98 00 00    0877*       dl 0x000098 ; 143.438 66, 0.596
040F3F 93 00 00    0878*       dl 0x000093 ; 144.844 67, 0.576
040F42 8E 00 00    0879*       dl 0x00008E ; 146.250 68, 0.556
040F45 88 00 00    0880*       dl 0x000088 ; 147.656 69, 0.535
040F48 83 00 00    0881*       dl 0x000083 ; 149.063 6A, 0.514
040F4B 7E 00 00    0882*       dl 0x00007E ; 150.469 6B, 0.493
040F4E 78 00 00    0883*       dl 0x000078 ; 151.875 6C, 0.471
040F51 73 00 00    0884*       dl 0x000073 ; 153.281 6D, 0.450
040F54 6D 00 00    0885*       dl 0x00006D ; 154.688 6E, 0.428
040F57 67 00 00    0886*       dl 0x000067 ; 156.094 6F, 0.405
040F5A 61 00 00    0887*       dl 0x000061 ; 157.500 70, 0.383
040F5D 5C 00 00    0888*       dl 0x00005C ; 158.906 71, 0.360
040F60 56 00 00    0889*       dl 0x000056 ; 160.313 72, 0.337
040F63 50 00 00    0890*       dl 0x000050 ; 161.719 73, 0.314
040F66 4A 00 00    0891*       dl 0x00004A ; 163.125 74, 0.290
040F69 44 00 00    0892*       dl 0x000044 ; 164.531 75, 0.267
040F6C 3E 00 00    0893*       dl 0x00003E ; 165.938 76, 0.243
040F6F 38 00 00    0894*       dl 0x000038 ; 167.344 77, 0.219
040F72 31 00 00    0895*       dl 0x000031 ; 168.750 78, 0.195
040F75 2B 00 00    0896*       dl 0x00002B ; 170.156 79, 0.171
040F78 25 00 00    0897*       dl 0x000025 ; 171.563 7A, 0.147
040F7B 1F 00 00    0898*       dl 0x00001F ; 172.969 7B, 0.122
040F7E 19 00 00    0899*       dl 0x000019 ; 174.375 7C, 0.098
040F81 12 00 00    0900*       dl 0x000012 ; 175.781 7D, 0.074
040F84 0C 00 00    0901*       dl 0x00000C ; 177.188 7E, 0.049
040F87 06 00 00    0902*       dl 0x000006 ; 178.594 7F, 0.025
040F8A 00 00 00    0903*       dl 0x000000 ; 180.000 80, 0.000
040F8D FA FF FF    0904*       dl 0xFFFFFA ; 181.406 81, -0.025
040F90 F4 FF FF    0905*       dl 0xFFFFF4 ; 182.813 82, -0.049
040F93 EE FF FF    0906*       dl 0xFFFFEE ; 184.219 83, -0.074
040F96 E7 FF FF    0907*       dl 0xFFFFE7 ; 185.625 84, -0.098
040F99 E1 FF FF    0908*       dl 0xFFFFE1 ; 187.031 85, -0.122
040F9C DB FF FF    0909*       dl 0xFFFFDB ; 188.438 86, -0.147
040F9F D5 FF FF    0910*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FA2 CF FF FF    0911*       dl 0xFFFFCF ; 191.250 88, -0.195
040FA5 C8 FF FF    0912*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FA8 C2 FF FF    0913*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FAB BC FF FF    0914*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FAE B6 FF FF    0915*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FB1 B0 FF FF    0916*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FB4 AA FF FF    0917*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FB7 A4 FF FF    0918*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FBA 9F FF FF    0919*       dl 0xFFFF9F ; 202.500 90, -0.383
040FBD 99 FF FF    0920*       dl 0xFFFF99 ; 203.906 91, -0.405
040FC0 93 FF FF    0921*       dl 0xFFFF93 ; 205.313 92, -0.428
040FC3 8D FF FF    0922*       dl 0xFFFF8D ; 206.719 93, -0.450
040FC6 88 FF FF    0923*       dl 0xFFFF88 ; 208.125 94, -0.471
040FC9 82 FF FF    0924*       dl 0xFFFF82 ; 209.531 95, -0.493
040FCC 7D FF FF    0925*       dl 0xFFFF7D ; 210.938 96, -0.514
040FCF 78 FF FF    0926*       dl 0xFFFF78 ; 212.344 97, -0.535
040FD2 72 FF FF    0927*       dl 0xFFFF72 ; 213.750 98, -0.556
040FD5 6D FF FF    0928*       dl 0xFFFF6D ; 215.156 99, -0.576
040FD8 68 FF FF    0929*       dl 0xFFFF68 ; 216.563 9A, -0.596
040FDB 63 FF FF    0930*       dl 0xFFFF63 ; 217.969 9B, -0.615
040FDE 5E FF FF    0931*       dl 0xFFFF5E ; 219.375 9C, -0.634
040FE1 59 FF FF    0932*       dl 0xFFFF59 ; 220.781 9D, -0.653
040FE4 55 FF FF    0933*       dl 0xFFFF55 ; 222.188 9E, -0.672
040FE7 50 FF FF    0934*       dl 0xFFFF50 ; 223.594 9F, -0.690
040FEA 4B FF FF    0935*       dl 0xFFFF4B ; 225.000 A0, -0.707
040FED 47 FF FF    0936*       dl 0xFFFF47 ; 226.406 A1, -0.724
040FF0 43 FF FF    0937*       dl 0xFFFF43 ; 227.813 A2, -0.741
040FF3 3F FF FF    0938*       dl 0xFFFF3F ; 229.219 A3, -0.757
040FF6 3B FF FF    0939*       dl 0xFFFF3B ; 230.625 A4, -0.773
040FF9 37 FF FF    0940*       dl 0xFFFF37 ; 232.031 A5, -0.788
040FFC 33 FF FF    0941*       dl 0xFFFF33 ; 233.438 A6, -0.803
040FFF 2F FF FF    0942*       dl 0xFFFF2F ; 234.844 A7, -0.818
041002 2C FF FF    0943*       dl 0xFFFF2C ; 236.250 A8, -0.831
041005 28 FF FF    0944*       dl 0xFFFF28 ; 237.656 A9, -0.845
041008 25 FF FF    0945*       dl 0xFFFF25 ; 239.063 AA, -0.858
04100B 22 FF FF    0946*       dl 0xFFFF22 ; 240.469 AB, -0.870
04100E 1F FF FF    0947*       dl 0xFFFF1F ; 241.875 AC, -0.882
041011 1C FF FF    0948*       dl 0xFFFF1C ; 243.281 AD, -0.893
041014 19 FF FF    0949*       dl 0xFFFF19 ; 244.688 AE, -0.904
041017 16 FF FF    0950*       dl 0xFFFF16 ; 246.094 AF, -0.914
04101A 14 FF FF    0951*       dl 0xFFFF14 ; 247.500 B0, -0.924
04101D 12 FF FF    0952*       dl 0xFFFF12 ; 248.906 B1, -0.933
041020 0F FF FF    0953*       dl 0xFFFF0F ; 250.313 B2, -0.942
041023 0D FF FF    0954*       dl 0xFFFF0D ; 251.719 B3, -0.950
041026 0C FF FF    0955*       dl 0xFFFF0C ; 253.125 B4, -0.957
041029 0A FF FF    0956*       dl 0xFFFF0A ; 254.531 B5, -0.964
04102C 08 FF FF    0957*       dl 0xFFFF08 ; 255.938 B6, -0.970
04102F 07 FF FF    0958*       dl 0xFFFF07 ; 257.344 B7, -0.976
041032 05 FF FF    0959*       dl 0xFFFF05 ; 258.750 B8, -0.981
041035 04 FF FF    0960*       dl 0xFFFF04 ; 260.156 B9, -0.985
041038 03 FF FF    0961*       dl 0xFFFF03 ; 261.563 BA, -0.989
04103B 02 FF FF    0962*       dl 0xFFFF02 ; 262.969 BB, -0.992
04103E 02 FF FF    0963*       dl 0xFFFF02 ; 264.375 BC, -0.995
041041 01 FF FF    0964*       dl 0xFFFF01 ; 265.781 BD, -0.997
041044 01 FF FF    0965*       dl 0xFFFF01 ; 267.188 BE, -0.999
041047 01 FF FF    0966*       dl 0xFFFF01 ; 268.594 BF, -1.000
04104A 00 FF FF    0967*       dl 0xFFFF00 ; 270.000 C0, -1.000
04104D 01 FF FF    0968*       dl 0xFFFF01 ; 271.406 C1, -1.000
041050 01 FF FF    0969*       dl 0xFFFF01 ; 272.813 C2, -0.999
041053 01 FF FF    0970*       dl 0xFFFF01 ; 274.219 C3, -0.997
041056 02 FF FF    0971*       dl 0xFFFF02 ; 275.625 C4, -0.995
041059 02 FF FF    0972*       dl 0xFFFF02 ; 277.031 C5, -0.992
04105C 03 FF FF    0973*       dl 0xFFFF03 ; 278.438 C6, -0.989
04105F 04 FF FF    0974*       dl 0xFFFF04 ; 279.844 C7, -0.985
041062 05 FF FF    0975*       dl 0xFFFF05 ; 281.250 C8, -0.981
041065 07 FF FF    0976*       dl 0xFFFF07 ; 282.656 C9, -0.976
041068 08 FF FF    0977*       dl 0xFFFF08 ; 284.063 CA, -0.970
04106B 0A FF FF    0978*       dl 0xFFFF0A ; 285.469 CB, -0.964
04106E 0C FF FF    0979*       dl 0xFFFF0C ; 286.875 CC, -0.957
041071 0D FF FF    0980*       dl 0xFFFF0D ; 288.281 CD, -0.950
041074 0F FF FF    0981*       dl 0xFFFF0F ; 289.688 CE, -0.942
041077 12 FF FF    0982*       dl 0xFFFF12 ; 291.094 CF, -0.933
04107A 14 FF FF    0983*       dl 0xFFFF14 ; 292.500 D0, -0.924
04107D 16 FF FF    0984*       dl 0xFFFF16 ; 293.906 D1, -0.914
041080 19 FF FF    0985*       dl 0xFFFF19 ; 295.313 D2, -0.904
041083 1C FF FF    0986*       dl 0xFFFF1C ; 296.719 D3, -0.893
041086 1F FF FF    0987*       dl 0xFFFF1F ; 298.125 D4, -0.882
041089 22 FF FF    0988*       dl 0xFFFF22 ; 299.531 D5, -0.870
04108C 25 FF FF    0989*       dl 0xFFFF25 ; 300.938 D6, -0.858
04108F 28 FF FF    0990*       dl 0xFFFF28 ; 302.344 D7, -0.845
041092 2C FF FF    0991*       dl 0xFFFF2C ; 303.750 D8, -0.831
041095 2F FF FF    0992*       dl 0xFFFF2F ; 305.156 D9, -0.818
041098 33 FF FF    0993*       dl 0xFFFF33 ; 306.563 DA, -0.803
04109B 37 FF FF    0994*       dl 0xFFFF37 ; 307.969 DB, -0.788
04109E 3B FF FF    0995*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410A1 3F FF FF    0996*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410A4 43 FF FF    0997*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410A7 47 FF FF    0998*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410AA 4B FF FF    0999*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410AD 50 FF FF    1000*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410B0 55 FF FF    1001*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410B3 59 FF FF    1002*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410B6 5E FF FF    1003*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410B9 63 FF FF    1004*       dl 0xFFFF63 ; 322.031 E5, -0.615
0410BC 68 FF FF    1005*       dl 0xFFFF68 ; 323.438 E6, -0.596
0410BF 6D FF FF    1006*       dl 0xFFFF6D ; 324.844 E7, -0.576
0410C2 72 FF FF    1007*       dl 0xFFFF72 ; 326.250 E8, -0.556
0410C5 78 FF FF    1008*       dl 0xFFFF78 ; 327.656 E9, -0.535
0410C8 7D FF FF    1009*       dl 0xFFFF7D ; 329.063 EA, -0.514
0410CB 82 FF FF    1010*       dl 0xFFFF82 ; 330.469 EB, -0.493
0410CE 88 FF FF    1011*       dl 0xFFFF88 ; 331.875 EC, -0.471
0410D1 8D FF FF    1012*       dl 0xFFFF8D ; 333.281 ED, -0.450
0410D4 93 FF FF    1013*       dl 0xFFFF93 ; 334.688 EE, -0.428
0410D7 99 FF FF    1014*       dl 0xFFFF99 ; 336.094 EF, -0.405
0410DA 9F FF FF    1015*       dl 0xFFFF9F ; 337.500 F0, -0.383
0410DD A4 FF FF    1016*       dl 0xFFFFA4 ; 338.906 F1, -0.360
0410E0 AA FF FF    1017*       dl 0xFFFFAA ; 340.313 F2, -0.337
0410E3 B0 FF FF    1018*       dl 0xFFFFB0 ; 341.719 F3, -0.314
0410E6 B6 FF FF    1019*       dl 0xFFFFB6 ; 343.125 F4, -0.290
0410E9 BC FF FF    1020*       dl 0xFFFFBC ; 344.531 F5, -0.267
0410EC C2 FF FF    1021*       dl 0xFFFFC2 ; 345.938 F6, -0.243
0410EF C8 FF FF    1022*       dl 0xFFFFC8 ; 347.344 F7, -0.219
0410F2 CF FF FF    1023*       dl 0xFFFFCF ; 348.750 F8, -0.195
0410F5 D5 FF FF    1024*       dl 0xFFFFD5 ; 350.156 F9, -0.171
0410F8 DB FF FF    1025*       dl 0xFFFFDB ; 351.563 FA, -0.147
0410FB E1 FF FF    1026*       dl 0xFFFFE1 ; 352.969 FB, -0.122
0410FE E7 FF FF    1027*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041101 EE FF FF    1028*       dl 0xFFFFEE ; 355.781 FD, -0.074
041104 F4 FF FF    1029*       dl 0xFFFFF4 ; 357.188 FE, -0.049
041107 FA FF FF    1030*       dl 0xFFFFFA ; 358.594 FF, -0.025
04110A 00 00 00    1031*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
04110D             1032*   
04110D             1033*   atan_lut_168:
04110D 00 00 00    1034*       dl 0x000000 ; 000000, 0.000
041110 28 00 00    1035*       dl 0x000028 ; 000001, 0.224
041113 51 00 00    1036*       dl 0x000051 ; 000002, 0.448
041116 7A 00 00    1037*       dl 0x00007A ; 000003, 0.671
041119 A2 00 00    1038*       dl 0x0000A2 ; 000004, 0.895
04111C CB 00 00    1039*       dl 0x0000CB ; 000005, 1.119
04111F F4 00 00    1040*       dl 0x0000F4 ; 000006, 1.343
041122 1D 01 00    1041*       dl 0x00011D ; 000007, 1.566
041125 45 01 00    1042*       dl 0x000145 ; 000008, 1.790
041128 6E 01 00    1043*       dl 0x00016E ; 000009, 2.013
04112B 97 01 00    1044*       dl 0x000197 ; 00000A, 2.237
04112E BF 01 00    1045*       dl 0x0001BF ; 00000B, 2.460
041131 E8 01 00    1046*       dl 0x0001E8 ; 00000C, 2.684
041134 11 02 00    1047*       dl 0x000211 ; 00000D, 2.907
041137 39 02 00    1048*       dl 0x000239 ; 00000E, 3.130
04113A 62 02 00    1049*       dl 0x000262 ; 00000F, 3.353
04113D 8B 02 00    1050*       dl 0x00028B ; 000010, 3.576
041140 B3 02 00    1051*       dl 0x0002B3 ; 000011, 3.799
041143 DC 02 00    1052*       dl 0x0002DC ; 000012, 4.022
041146 04 03 00    1053*       dl 0x000304 ; 000013, 4.245
041149 2D 03 00    1054*       dl 0x00032D ; 000014, 4.467
04114C 55 03 00    1055*       dl 0x000355 ; 000015, 4.690
04114F 7E 03 00    1056*       dl 0x00037E ; 000016, 4.912
041152 A6 03 00    1057*       dl 0x0003A6 ; 000017, 5.134
041155 CE 03 00    1058*       dl 0x0003CE ; 000018, 5.356
041158 F7 03 00    1059*       dl 0x0003F7 ; 000019, 5.578
04115B 1F 04 00    1060*       dl 0x00041F ; 00001A, 5.799
04115E 48 04 00    1061*       dl 0x000448 ; 00001B, 6.021
041161 70 04 00    1062*       dl 0x000470 ; 00001C, 6.242
041164 98 04 00    1063*       dl 0x000498 ; 00001D, 6.463
041167 C0 04 00    1064*       dl 0x0004C0 ; 00001E, 6.684
04116A E8 04 00    1065*       dl 0x0004E8 ; 00001F, 6.905
04116D 11 05 00    1066*       dl 0x000511 ; 000020, 7.125
041170 39 05 00    1067*       dl 0x000539 ; 000021, 7.345
041173 61 05 00    1068*       dl 0x000561 ; 000022, 7.565
041176 89 05 00    1069*       dl 0x000589 ; 000023, 7.785
041179 B1 05 00    1070*       dl 0x0005B1 ; 000024, 8.005
04117C D9 05 00    1071*       dl 0x0005D9 ; 000025, 8.224
04117F 01 06 00    1072*       dl 0x000601 ; 000026, 8.443
041182 28 06 00    1073*       dl 0x000628 ; 000027, 8.662
041185 50 06 00    1074*       dl 0x000650 ; 000028, 8.881
041188 78 06 00    1075*       dl 0x000678 ; 000029, 9.099
04118B A0 06 00    1076*       dl 0x0006A0 ; 00002A, 9.317
04118E C7 06 00    1077*       dl 0x0006C7 ; 00002B, 9.535
041191 EF 06 00    1078*       dl 0x0006EF ; 00002C, 9.752
041194 16 07 00    1079*       dl 0x000716 ; 00002D, 9.970
041197 3E 07 00    1080*       dl 0x00073E ; 00002E, 10.187
04119A 65 07 00    1081*       dl 0x000765 ; 00002F, 10.403
04119D 8D 07 00    1082*       dl 0x00078D ; 000030, 10.620
0411A0 B4 07 00    1083*       dl 0x0007B4 ; 000031, 10.836
0411A3 DB 07 00    1084*       dl 0x0007DB ; 000032, 11.051
0411A6 03 08 00    1085*       dl 0x000803 ; 000033, 11.267
0411A9 2A 08 00    1086*       dl 0x00082A ; 000034, 11.482
0411AC 51 08 00    1087*       dl 0x000851 ; 000035, 11.697
0411AF 78 08 00    1088*       dl 0x000878 ; 000036, 11.911
0411B2 9F 08 00    1089*       dl 0x00089F ; 000037, 12.125
0411B5 C6 08 00    1090*       dl 0x0008C6 ; 000038, 12.339
0411B8 ED 08 00    1091*       dl 0x0008ED ; 000039, 12.553
0411BB 13 09 00    1092*       dl 0x000913 ; 00003A, 12.766
0411BE 3A 09 00    1093*       dl 0x00093A ; 00003B, 12.978
0411C1 61 09 00    1094*       dl 0x000961 ; 00003C, 13.191
0411C4 87 09 00    1095*       dl 0x000987 ; 00003D, 13.403
0411C7 AE 09 00    1096*       dl 0x0009AE ; 00003E, 13.614
0411CA D4 09 00    1097*       dl 0x0009D4 ; 00003F, 13.825
0411CD FB 09 00    1098*       dl 0x0009FB ; 000040, 14.036
0411D0 21 0A 00    1099*       dl 0x000A21 ; 000041, 14.247
0411D3 47 0A 00    1100*       dl 0x000A47 ; 000042, 14.457
0411D6 6D 0A 00    1101*       dl 0x000A6D ; 000043, 14.666
0411D9 94 0A 00    1102*       dl 0x000A94 ; 000044, 14.876
0411DC BA 0A 00    1103*       dl 0x000ABA ; 000045, 15.085
0411DF E0 0A 00    1104*       dl 0x000AE0 ; 000046, 15.293
0411E2 05 0B 00    1105*       dl 0x000B05 ; 000047, 15.501
0411E5 2B 0B 00    1106*       dl 0x000B2B ; 000048, 15.709
0411E8 51 0B 00    1107*       dl 0x000B51 ; 000049, 15.916
0411EB 77 0B 00    1108*       dl 0x000B77 ; 00004A, 16.123
0411EE 9C 0B 00    1109*       dl 0x000B9C ; 00004B, 16.329
0411F1 C2 0B 00    1110*       dl 0x000BC2 ; 00004C, 16.535
0411F4 E7 0B 00    1111*       dl 0x000BE7 ; 00004D, 16.740
0411F7 0C 0C 00    1112*       dl 0x000C0C ; 00004E, 16.945
0411FA 32 0C 00    1113*       dl 0x000C32 ; 00004F, 17.150
0411FD 57 0C 00    1114*       dl 0x000C57 ; 000050, 17.354
041200 7C 0C 00    1115*       dl 0x000C7C ; 000051, 17.558
041203 A1 0C 00    1116*       dl 0x000CA1 ; 000052, 17.761
041206 C6 0C 00    1117*       dl 0x000CC6 ; 000053, 17.964
041209 EB 0C 00    1118*       dl 0x000CEB ; 000054, 18.166
04120C 0F 0D 00    1119*       dl 0x000D0F ; 000055, 18.368
04120F 34 0D 00    1120*       dl 0x000D34 ; 000056, 18.569
041212 58 0D 00    1121*       dl 0x000D58 ; 000057, 18.770
041215 7D 0D 00    1122*       dl 0x000D7D ; 000058, 18.970
041218 A1 0D 00    1123*       dl 0x000DA1 ; 000059, 19.170
04121B C6 0D 00    1124*       dl 0x000DC6 ; 00005A, 19.370
04121E EA 0D 00    1125*       dl 0x000DEA ; 00005B, 19.569
041221 0E 0E 00    1126*       dl 0x000E0E ; 00005C, 19.767
041224 32 0E 00    1127*       dl 0x000E32 ; 00005D, 19.965
041227 56 0E 00    1128*       dl 0x000E56 ; 00005E, 20.163
04122A 7A 0E 00    1129*       dl 0x000E7A ; 00005F, 20.360
04122D 9E 0E 00    1130*       dl 0x000E9E ; 000060, 20.556
041230 C1 0E 00    1131*       dl 0x000EC1 ; 000061, 20.752
041233 E5 0E 00    1132*       dl 0x000EE5 ; 000062, 20.947
041236 08 0F 00    1133*       dl 0x000F08 ; 000063, 21.142
041239 2C 0F 00    1134*       dl 0x000F2C ; 000064, 21.337
04123C 4F 0F 00    1135*       dl 0x000F4F ; 000065, 21.531
04123F 72 0F 00    1136*       dl 0x000F72 ; 000066, 21.724
041242 95 0F 00    1137*       dl 0x000F95 ; 000067, 21.917
041245 B8 0F 00    1138*       dl 0x000FB8 ; 000068, 22.109
041248 DB 0F 00    1139*       dl 0x000FDB ; 000069, 22.301
04124B FE 0F 00    1140*       dl 0x000FFE ; 00006A, 22.493
04124E 21 10 00    1141*       dl 0x001021 ; 00006B, 22.683
041251 44 10 00    1142*       dl 0x001044 ; 00006C, 22.874
041254 66 10 00    1143*       dl 0x001066 ; 00006D, 23.063
041257 89 10 00    1144*       dl 0x001089 ; 00006E, 23.253
04125A AB 10 00    1145*       dl 0x0010AB ; 00006F, 23.441
04125D CD 10 00    1146*       dl 0x0010CD ; 000070, 23.629
041260 EF 10 00    1147*       dl 0x0010EF ; 000071, 23.817
041263 11 11 00    1148*       dl 0x001111 ; 000072, 24.004
041266 33 11 00    1149*       dl 0x001133 ; 000073, 24.191
041269 55 11 00    1150*       dl 0x001155 ; 000074, 24.376
04126C 77 11 00    1151*       dl 0x001177 ; 000075, 24.562
04126F 99 11 00    1152*       dl 0x001199 ; 000076, 24.747
041272 BA 11 00    1153*       dl 0x0011BA ; 000077, 24.931
041275 DC 11 00    1154*       dl 0x0011DC ; 000078, 25.115
041278 FD 11 00    1155*       dl 0x0011FD ; 000079, 25.298
04127B 1E 12 00    1156*       dl 0x00121E ; 00007A, 25.481
04127E 3F 12 00    1157*       dl 0x00123F ; 00007B, 25.663
041281 60 12 00    1158*       dl 0x001260 ; 00007C, 25.844
041284 81 12 00    1159*       dl 0x001281 ; 00007D, 26.025
041287 A2 12 00    1160*       dl 0x0012A2 ; 00007E, 26.206
04128A C3 12 00    1161*       dl 0x0012C3 ; 00007F, 26.386
04128D E4 12 00    1162*       dl 0x0012E4 ; 000080, 26.565
041290 04 13 00    1163*       dl 0x001304 ; 000081, 26.744
041293 25 13 00    1164*       dl 0x001325 ; 000082, 26.922
041296 45 13 00    1165*       dl 0x001345 ; 000083, 27.100
041299 65 13 00    1166*       dl 0x001365 ; 000084, 27.277
04129C 85 13 00    1167*       dl 0x001385 ; 000085, 27.453
04129F A5 13 00    1168*       dl 0x0013A5 ; 000086, 27.629
0412A2 C5 13 00    1169*       dl 0x0013C5 ; 000087, 27.805
0412A5 E5 13 00    1170*       dl 0x0013E5 ; 000088, 27.979
0412A8 05 14 00    1171*       dl 0x001405 ; 000089, 28.154
0412AB 24 14 00    1172*       dl 0x001424 ; 00008A, 28.327
0412AE 44 14 00    1173*       dl 0x001444 ; 00008B, 28.501
0412B1 63 14 00    1174*       dl 0x001463 ; 00008C, 28.673
0412B4 83 14 00    1175*       dl 0x001483 ; 00008D, 28.845
0412B7 A2 14 00    1176*       dl 0x0014A2 ; 00008E, 29.017
0412BA C1 14 00    1177*       dl 0x0014C1 ; 00008F, 29.187
0412BD E0 14 00    1178*       dl 0x0014E0 ; 000090, 29.358
0412C0 FF 14 00    1179*       dl 0x0014FF ; 000091, 29.527
0412C3 1E 15 00    1180*       dl 0x00151E ; 000092, 29.697
0412C6 3C 15 00    1181*       dl 0x00153C ; 000093, 29.865
0412C9 5B 15 00    1182*       dl 0x00155B ; 000094, 30.033
0412CC 79 15 00    1183*       dl 0x001579 ; 000095, 30.201
0412CF 98 15 00    1184*       dl 0x001598 ; 000096, 30.368
0412D2 B6 15 00    1185*       dl 0x0015B6 ; 000097, 30.534
0412D5 D4 15 00    1186*       dl 0x0015D4 ; 000098, 30.700
0412D8 F2 15 00    1187*       dl 0x0015F2 ; 000099, 30.865
0412DB 10 16 00    1188*       dl 0x001610 ; 00009A, 31.030
0412DE 2E 16 00    1189*       dl 0x00162E ; 00009B, 31.194
0412E1 4C 16 00    1190*       dl 0x00164C ; 00009C, 31.357
0412E4 6A 16 00    1191*       dl 0x00166A ; 00009D, 31.520
0412E7 87 16 00    1192*       dl 0x001687 ; 00009E, 31.682
0412EA A5 16 00    1193*       dl 0x0016A5 ; 00009F, 31.844
0412ED C2 16 00    1194*       dl 0x0016C2 ; 0000A0, 32.005
0412F0 DF 16 00    1195*       dl 0x0016DF ; 0000A1, 32.166
0412F3 FC 16 00    1196*       dl 0x0016FC ; 0000A2, 32.326
0412F6 19 17 00    1197*       dl 0x001719 ; 0000A3, 32.486
0412F9 36 17 00    1198*       dl 0x001736 ; 0000A4, 32.645
0412FC 53 17 00    1199*       dl 0x001753 ; 0000A5, 32.803
0412FF 70 17 00    1200*       dl 0x001770 ; 0000A6, 32.961
041302 8C 17 00    1201*       dl 0x00178C ; 0000A7, 33.118
041305 A9 17 00    1202*       dl 0x0017A9 ; 0000A8, 33.275
041308 C5 17 00    1203*       dl 0x0017C5 ; 0000A9, 33.431
04130B E2 17 00    1204*       dl 0x0017E2 ; 0000AA, 33.587
04130E FE 17 00    1205*       dl 0x0017FE ; 0000AB, 33.742
041311 1A 18 00    1206*       dl 0x00181A ; 0000AC, 33.896
041314 36 18 00    1207*       dl 0x001836 ; 0000AD, 34.050
041317 52 18 00    1208*       dl 0x001852 ; 0000AE, 34.203
04131A 6E 18 00    1209*       dl 0x00186E ; 0000AF, 34.356
04131D 8A 18 00    1210*       dl 0x00188A ; 0000B0, 34.509
041320 A5 18 00    1211*       dl 0x0018A5 ; 0000B1, 34.660
041323 C1 18 00    1212*       dl 0x0018C1 ; 0000B2, 34.811
041326 DC 18 00    1213*       dl 0x0018DC ; 0000B3, 34.962
041329 F7 18 00    1214*       dl 0x0018F7 ; 0000B4, 35.112
04132C 13 19 00    1215*       dl 0x001913 ; 0000B5, 35.262
04132F 2E 19 00    1216*       dl 0x00192E ; 0000B6, 35.410
041332 49 19 00    1217*       dl 0x001949 ; 0000B7, 35.559
041335 64 19 00    1218*       dl 0x001964 ; 0000B8, 35.707
041338 7F 19 00    1219*       dl 0x00197F ; 0000B9, 35.854
04133B 99 19 00    1220*       dl 0x001999 ; 0000BA, 36.001
04133E B4 19 00    1221*       dl 0x0019B4 ; 0000BB, 36.147
041341 CE 19 00    1222*       dl 0x0019CE ; 0000BC, 36.293
041344 E9 19 00    1223*       dl 0x0019E9 ; 0000BD, 36.438
041347 03 1A 00    1224*       dl 0x001A03 ; 0000BE, 36.582
04134A 1D 1A 00    1225*       dl 0x001A1D ; 0000BF, 36.726
04134D 37 1A 00    1226*       dl 0x001A37 ; 0000C0, 36.870
041350 51 1A 00    1227*       dl 0x001A51 ; 0000C1, 37.013
041353 6B 1A 00    1228*       dl 0x001A6B ; 0000C2, 37.155
041356 85 1A 00    1229*       dl 0x001A85 ; 0000C3, 37.297
041359 9F 1A 00    1230*       dl 0x001A9F ; 0000C4, 37.439
04135C B9 1A 00    1231*       dl 0x001AB9 ; 0000C5, 37.579
04135F D2 1A 00    1232*       dl 0x001AD2 ; 0000C6, 37.720
041362 EC 1A 00    1233*       dl 0x001AEC ; 0000C7, 37.859
041365 05 1B 00    1234*       dl 0x001B05 ; 0000C8, 37.999
041368 1E 1B 00    1235*       dl 0x001B1E ; 0000C9, 38.137
04136B 37 1B 00    1236*       dl 0x001B37 ; 0000CA, 38.276
04136E 50 1B 00    1237*       dl 0x001B50 ; 0000CB, 38.413
041371 69 1B 00    1238*       dl 0x001B69 ; 0000CC, 38.550
041374 82 1B 00    1239*       dl 0x001B82 ; 0000CD, 38.687
041377 9B 1B 00    1240*       dl 0x001B9B ; 0000CE, 38.823
04137A B4 1B 00    1241*       dl 0x001BB4 ; 0000CF, 38.959
04137D CC 1B 00    1242*       dl 0x001BCC ; 0000D0, 39.094
041380 E5 1B 00    1243*       dl 0x001BE5 ; 0000D1, 39.228
041383 FD 1B 00    1244*       dl 0x001BFD ; 0000D2, 39.362
041386 16 1C 00    1245*       dl 0x001C16 ; 0000D3, 39.496
041389 2E 1C 00    1246*       dl 0x001C2E ; 0000D4, 39.629
04138C 46 1C 00    1247*       dl 0x001C46 ; 0000D5, 39.762
04138F 5E 1C 00    1248*       dl 0x001C5E ; 0000D6, 39.894
041392 76 1C 00    1249*       dl 0x001C76 ; 0000D7, 40.025
041395 8E 1C 00    1250*       dl 0x001C8E ; 0000D8, 40.156
041398 A5 1C 00    1251*       dl 0x001CA5 ; 0000D9, 40.286
04139B BD 1C 00    1252*       dl 0x001CBD ; 0000DA, 40.416
04139E D5 1C 00    1253*       dl 0x001CD5 ; 0000DB, 40.546
0413A1 EC 1C 00    1254*       dl 0x001CEC ; 0000DC, 40.675
0413A4 04 1D 00    1255*       dl 0x001D04 ; 0000DD, 40.803
0413A7 1B 1D 00    1256*       dl 0x001D1B ; 0000DE, 40.931
0413AA 32 1D 00    1257*       dl 0x001D32 ; 0000DF, 41.059
0413AD 49 1D 00    1258*       dl 0x001D49 ; 0000E0, 41.186
0413B0 60 1D 00    1259*       dl 0x001D60 ; 0000E1, 41.312
0413B3 77 1D 00    1260*       dl 0x001D77 ; 0000E2, 41.438
0413B6 8E 1D 00    1261*       dl 0x001D8E ; 0000E3, 41.564
0413B9 A5 1D 00    1262*       dl 0x001DA5 ; 0000E4, 41.689
0413BC BB 1D 00    1263*       dl 0x001DBB ; 0000E5, 41.814
0413BF D2 1D 00    1264*       dl 0x001DD2 ; 0000E6, 41.938
0413C2 E9 1D 00    1265*       dl 0x001DE9 ; 0000E7, 42.061
0413C5 FF 1D 00    1266*       dl 0x001DFF ; 0000E8, 42.184
0413C8 15 1E 00    1267*       dl 0x001E15 ; 0000E9, 42.307
0413CB 2C 1E 00    1268*       dl 0x001E2C ; 0000EA, 42.429
0413CE 42 1E 00    1269*       dl 0x001E42 ; 0000EB, 42.551
0413D1 58 1E 00    1270*       dl 0x001E58 ; 0000EC, 42.672
0413D4 6E 1E 00    1271*       dl 0x001E6E ; 0000ED, 42.793
0413D7 84 1E 00    1272*       dl 0x001E84 ; 0000EE, 42.913
0413DA 99 1E 00    1273*       dl 0x001E99 ; 0000EF, 43.033
0413DD AF 1E 00    1274*       dl 0x001EAF ; 0000F0, 43.152
0413E0 C5 1E 00    1275*       dl 0x001EC5 ; 0000F1, 43.271
0413E3 DA 1E 00    1276*       dl 0x001EDA ; 0000F2, 43.390
0413E6 F0 1E 00    1277*       dl 0x001EF0 ; 0000F3, 43.508
0413E9 05 1F 00    1278*       dl 0x001F05 ; 0000F4, 43.625
0413EC 1B 1F 00    1279*       dl 0x001F1B ; 0000F5, 43.742
0413EF 30 1F 00    1280*       dl 0x001F30 ; 0000F6, 43.859
0413F2 45 1F 00    1281*       dl 0x001F45 ; 0000F7, 43.975
0413F5 5A 1F 00    1282*       dl 0x001F5A ; 0000F8, 44.091
0413F8 6F 1F 00    1283*       dl 0x001F6F ; 0000F9, 44.206
0413FB 84 1F 00    1284*       dl 0x001F84 ; 0000FA, 44.321
0413FE 99 1F 00    1285*       dl 0x001F99 ; 0000FB, 44.435
041401 AD 1F 00    1286*       dl 0x001FAD ; 0000FC, 44.549
041404 C2 1F 00    1287*       dl 0x001FC2 ; 0000FD, 44.662
041407 D7 1F 00    1288*       dl 0x001FD7 ; 0000FE, 44.775
04140A EB 1F 00    1289*       dl 0x001FEB ; 0000FF, 44.888
04140D 00 20 00    1290*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041410             0035        include "fonts.inc"
041410 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 25 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1B 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1D 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1D 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0036        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 BF 16 04 0018*       ld (logo_xvel),hl
041611 22 C2 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,240-16*256 ; allow space for text at bottom of screen
041619 22 C8 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 F8 FF 0024*       ld hl,-8*256 ; 8 pixels from top of screen
041622 19          0025*       add hl,de ; distance for logo to travel
041623 11 00 B1 FF 0026*       ld de,-sprites_num_images*256
041627 CD 2E 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162B ED 53 C5 16 0028*       ld (logo_yvel),de
       04          
041630             0029*   ; all done
041630 C9          0030*       ret
041631             0031*   
041631             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041631             0033*   img_load_main:
041631             0034*   ; back up loop counter
041631 C5          0035*       push bc
041632             0036*   
041632             0037*   ; load the next image
041632 CD 69 16 04 0038*       call load_next_image
041636             0039*   
041636             0040*   ; plot the background
041636 CD 4B 19 04 0041*       call vdu_cls
04163A 21 02 00 00 0042*       ld hl,BUF_SPLASH_BG
04163E CD 38 1A 04 0043*       call vdu_buff_select
041642 01 00 00 00 0044*       ld bc,0
041646 11 00 00 00 0045*       ld de,0
04164A CD 20 1E 04 0046*       call vdu_plot_bmp
04164E             0047*   
04164E             0048*   ; ; draw the most recently loaded image
04164E             0049*   ; 	ld hl,(cur_buffer_id)
04164E             0050*   ; 	call vdu_buff_select
04164E             0051*   ; 	ld bc,0
04164E             0052*   ; 	ld de,0
04164E             0053*   ; 	call vdu_plot_bmp
04164E             0054*   
04164E             0055*   ; move logo
04164E CD 9A 16 04 0056*       call move_logo
041652             0057*   
041652             0058*   ; print current filename
041652 2A 03 16 04 0059*       ld hl,(cur_filename)
041656 CD 17 01 04 0060*       call printString
04165A             0061*   
04165A             0062*   ; flip the framebuffer
04165A             0063*       ; call vdu_flip
04165A             0064*   
04165A             0065*   ; decrement loop counter
04165A C1          0066*       pop bc
04165B 0B          0067*       dec bc
04165C 79          0068*       ld a,c
04165D B7          0069*       or a
04165E C2 31 16 04 0070*       jp nz,img_load_main
041662 78          0071*       ld a,b
041663 B7          0072*       or a
041664 C2 31 16 04 0073*       jp nz,img_load_main
041668 C9          0074*       ret
041669             0075*   
041669             0076*   load_next_image:
041669 FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
04166E FD E5       0078*       push iy
041670 FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041673 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041676 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041679 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167C FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04167F 22 06 16 04 0084*       ld (cur_buffer_id),hl
041683 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041686 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168B CD 56 1B 04 0087*       call vdu_load_img
04168F FD E1       0088*       pop iy
041691 ED 33 12    0089*       lea iy,iy+image_record_size
041694 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
041699 C9          0091*       ret
04169A             0092*   
04169A             0093*   move_logo:
04169A             0094*   ; activate logo bitmap
04169A 21 03 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04169E CD 38 1A 04 0096*       call vdu_buff_select
0416A2             0097*   ; update position based on velocity parameters
0416A2 2A C8 16 04 0098*       ld hl,(logo_ypos)
0416A6 ED 5B C5 16 0099*       ld de,(logo_yvel)
       04          
0416AB 19          0100*       add hl,de
0416AC 22 C8 16 04 0101*       ld (logo_ypos),hl
0416B0             0102*   ; draw logo
0416B0 ED 4B C2 16 0103*       ld bc,(logo_xpos)
       04          
0416B5 ED 5B C8 16 0104*       ld de,(logo_ypos)
       04          
0416BA CD 3C 1E 04 0105*       call vdu_plot_bmp168
0416BE C9          0106*       ret
0416BF             0107*   
0416BF 00 00 00    0108*   logo_xvel: dl 0
0416C2 00 00 00    0109*   logo_xpos: dl 0
0416C5             0110*   
0416C5 00 00 00    0111*   logo_yvel: dl 0
0416C8 00 00 00    0112*   logo_ypos: dl 0
0416CB             0113*   
0416CB             0114*   load_ui_images:
0416CB             0115*   ; initialize image loading variables
0416CB 21 00 53 04 0116*       ld hl,ui_image_list
0416CF 22 00 16 04 0117*       ld (cur_image_list),hl
0416D3             0118*   ; load images
0416D3 06 04       0119*       ld b,ui_num_images
0416D5             0120*   @loop:
0416D5 C5          0121*       push bc
0416D6 CD 69 16 04 0122*       call load_next_image
0416DA C1          0123*       pop bc
0416DB 10 F8       0124*       djnz @loop
0416DD C9          0125*       ret
0416DE             0126*   
0416DE             0127*   load_sprite_images:
0416DE             0128*   ; initialize image loading variables
0416DE 21 00 45 04 0129*       ld hl,sprites_image_list
0416E2 22 00 16 04 0130*       ld (cur_image_list),hl
0416E6 01 4F 00 00 0131*       ld bc,sprites_num_images
0416EA             0132*   ; load images
0416EA CD 31 16 04 0133*       call img_load_main
0416EE C9          0134*       ret
0416EF             0135*   
0416EF             0136*   load_tilesets:
0416EF             0137*   ; initialize image loading variables
0416EF 21 00 28 04 0138*       ld hl,tiles_dg_image_list
0416F3 22 00 16 04 0139*       ld (cur_image_list),hl
0416F7 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0416FB             0141*   ; load images
0416FB CD 31 16 04 0142*       call img_load_main
0416FF             0143*   
0416FF             0144*   ; ; initialize image loading variables
0416FF             0145*   ;     ld hl,tiles_xevious_image_list
0416FF             0146*   ;     ld (cur_image_list),hl
0416FF             0147*   ;     ld bc,tiles_xevious_num_images
0416FF             0148*   ; ; load images
0416FF             0149*   ;     call img_load_main
0416FF C9          0150*       ret
041700             0037        include "timer.inc"
041700             0001*       align 256
041700             0002*   
041700             0003*   ; Table 32. Timer Control Registers
041700             0004*   ; this constant is the base address of the timer control registers
041700             0005*   ; each timer takes three bytes:
041700             0006*   ;   0: control register
041700             0007*   ;   1: low byte of timer reset value
041700             0008*   ;   2: high byte of timer reset value
041700             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041700             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041700             0011*   TMR_CTL:     equ 80h
041700             0012*   
041700             0013*   ; Timer Control Register Bit Definitions
041700             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041700             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041700             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041700             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041700             0018*                               ; the TMRx_CTL register is read.
041700             0019*   
041700             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041700             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041700             0022*   
041700             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041700             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041700             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041700             0026*                               ; written to the counter when the end-of-count value is reached.
041700             0027*   
041700             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041700             0029*   CLK_DIV_256:  equ %00001100 ;
041700             0030*   CLK_DIV_64:   equ %00001000 ;
041700             0031*   CLK_DIV_16:   equ %00000100 ;
041700             0032*   CLK_DIV_4:    equ %00000000 ;
041700             0033*   
041700             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041700             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041700             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041700             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041700             0038*                               ; programmer must ensure that this bit is set to 1 each time
041700             0039*                               ; SINGLE-PASS mode is used.
041700             0040*   
041700             0041*   ; disable/enable the programmable reload timer
041700             0042*   PRT_EN_0:     equ %00000000 ;
041700             0043*   PRT_EN_1:     equ %00000001 ;
041700             0044*   
041700             0045*   ; Table 37. Timer Input Source Select Register
041700             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041700             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041700             0048*   ;   00: System clock / CLK_DIV
041700             0049*   ;   01: RTC / CLK_DIV
041700             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041700             0051*   ;   10: GPIO port B pin 1.
041700             0052*   ;   11: GPIO port B pin 1.
041700             0053*   TMR_ISS:   equ 92h ; register address
041700             0054*   
041700             0055*   ; Table 51. Real-Time Clock Control Register
041700             0056*   RTC_CTRL: equ EDh ; register address
041700             0057*   
041700             0058*   ; alarm interrupt disable/enable
041700             0059*   RTC_ALARM_0:    equ %00000000
041700             0060*   RTC_ALARM_1:    equ %10000000
041700             0061*   
041700             0062*   ; interrupt on alarm disable/enable
041700             0063*   RTC_INT_ENT_0:  equ %00000000
041700             0064*   RTC_INT_ENT_1:  equ %01000000
041700             0065*   
041700             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041700             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041700             0068*   
041700             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041700             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041700             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041700             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041700             0073*   
041700             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041700             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041700             0076*   
041700             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041700             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041700             0079*   
041700             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041700             0081*                                   ; RTC counter is enabled.
041700             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041700             0083*                                   ; RTC counter is disabled.
041700             0084*   
041700             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041700             0086*   
041700             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041700             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041700 00 00 00    0089*   prt_reload: dl 0x000000
041703             0090*   
041703             0091*   ; set PRT timer
041703             0092*   prt_set:
041703 21 00 00 00 0093*       ld hl,0
041707 22 51 17 04 0094*       ld (prt_irq_counter),hl
04170B 2A 00 17 04 0095*       ld hl,(prt_reload)
04170F ED 29 84    0096*       out0 ($84),l
041712 ED 21 85    0097*   	out0 ($85),h
041715             0098*   ; disable timer
041715 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041717 ED 39 83    0100*   	out0 ($83),a
04171A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04171A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04171C ED 39 83    0103*   	out0 ($83),a
04171F C9          0104*       ret
041720             0105*   
041720             0106*   ; ===============================================
041720             0107*   ; PRT Timer Interrupt Handling
041720             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041720             0109*   ; -----------------------------------------------
041720             0110*   prt_irq_init:
041720             0111*       ; set up interrupt vector table 2
041720 21 00 00 00 0112*   	ld hl,0
041724 3A 0C 01 00 0113*   	ld a,($10c)
041728 6F          0114*   	ld l,a
041729 3A 0D 01 00 0115*   	ld a,($10d)
04172D 67          0116*   	ld h,a
04172E             0117*   
04172E             0118*   	; skip over CALL ($c3)
04172E 23          0119*   	inc hl
04172F             0120*   	; load address of jump into vector table 2 (in ram)
04172F ED 27       0121*   	ld hl,(hl)
041731             0122*   
041731             0123*   	; write CALL prt_irq_handler to vector table 2
041731 3E C3       0124*   	ld a,$c3
041733 77          0125*   	ld (hl),a
041734 23          0126*   	inc hl
041735 11 3C 17 04 0127*   	ld de,prt_irq_handler
041739 ED 1F       0128*   	ld (hl),de
04173B             0129*   
04173B C9          0130*       ret
04173C             0131*   
04173C             0132*   prt_irq_handler:
04173C F3          0133*   	di
04173D F5          0134*   	push af
04173E E5          0135*       push hl
04173F ED 38 83    0136*   	in0 a,($83)
041742 2A 51 17 04 0137*   	ld hl,(prt_irq_counter)
041746 23          0138*   	inc hl
041747 22 51 17 04 0139*   	ld (prt_irq_counter),hl
04174B E1          0140*       pop hl
04174C F1          0141*   	pop af
04174D FB          0142*   	ei
04174E 5B ED 4D    0143*   	reti.l
041751             0144*   
041751             0145*   prt_irq_counter:
041751 00 00 00    0146*   	.dl 0
041754             0147*   prt_irq_counter_saved:
041754 00 00 00    0148*       .dl 0
041757             0149*   
041757             0150*   prt_loop_reset:
041757 E5          0151*       push hl
041758 21 00 00 00 0152*   	ld hl,0
04175C 22 51 17 04 0153*   	ld (prt_irq_counter),hl
041760 22 C2 17 04 0154*       ld (prt_loop_counter),hl
041764 22 C5 17 04 0155*       ld (prt_loops),hl
041768 CD 03 17 04 0156*       call prt_set
04176C E1          0157*       pop hl
04176D C9          0158*       ret
04176E             0159*   
04176E             0160*   prt_loop_start:
04176E E5          0161*       push hl
04176F 21 00 00 00 0162*   	ld hl,0
041773 22 51 17 04 0163*   	ld (prt_irq_counter),hl
041777 E1          0164*       pop hl
041778 C9          0165*       ret
041779             0166*   
041779             0167*   prt_loop_stop:
041779 E5          0168*       push hl
04177A D5          0169*       push de
04177B 2A 51 17 04 0170*       ld hl,(prt_irq_counter)
04177F ED 5B C2 17 0171*       ld de,(prt_loop_counter)
       04          
041784 19          0172*       add hl,de
041785 22 C2 17 04 0173*       ld (prt_loop_counter),hl
041789 21 00 00 00 0174*       ld hl,0
04178D 22 51 17 04 0175*       ld (prt_irq_counter),hl
041791 2A C5 17 04 0176*       ld hl,(prt_loops)
041795 23          0177*       inc hl
041796 22 C5 17 04 0178*       ld (prt_loops),hl
04179A D1          0179*       pop de
04179B E1          0180*       pop hl
04179C C9          0181*       ret
04179D             0182*   
04179D             0183*   ; inputs: bc = y,x text coordinates to print
04179D             0184*   prt_loop_print:
04179D F5          0185*       push af
04179E E5          0186*       push hl
04179F C5          0187*       push bc
0417A0 D5          0188*       push de
0417A1 DD E5       0189*       push ix
0417A3 FD E5       0190*       push iy
0417A5 CD 37 19 04 0191*       call vdu_move_cursor
0417A9             0192*   
0417A9 2A C2 17 04 0193*       ld hl,(prt_loop_counter)
0417AD CD 16 02 04 0194*       call printDec
0417B1             0195*   
0417B1 2A C5 17 04 0196*       ld hl,(prt_loops)
0417B5 CD 16 02 04 0197*       call printDec
0417B9             0198*   
0417B9 FD E1       0199*       pop iy
0417BB DD E1       0200*       pop ix
0417BD D1          0201*       pop de
0417BE C1          0202*       pop bc
0417BF E1          0203*       pop hl
0417C0 F1          0204*       pop af
0417C1 C9          0205*       ret
0417C2             0206*   
0417C2             0207*   prt_loop_counter:
0417C2 00 00 00    0208*       .dl 0
0417C5             0209*   prt_loops:
0417C5 00 00 00    0210*       .dl 0
0417C8             0211*   
0417C8             0212*   ; ===============================================
0417C8             0213*   ; Timer functions
0417C8             0214*   ; -----------------------------------------------
0417C8             0215*   ; set a countdown timer
0417C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417C8             0217*   ; returns: hl = current time
0417C8             0218*   tmr_set:
0417C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0417CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0417CB 3E 08       0001*M1 			LD	A, function
0417CD 5B CF       0002*M1 			RST.LIL	08h
0417CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0417D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0417D5 C9          0223*       ret
0417D6             0224*   
0417D6             0225*   ; gets time remaining on a countdown timer
0417D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0417D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0417D6             0229*   tmr_get:
0417D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0417D6 3E 08       0001*M1 			LD	A, function
0417D8 5B CF       0002*M1 			RST.LIL	08h
0417DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0417DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0417E0 AF          0233*       xor a                   ; clear carry
0417E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0417E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0417E6 AF          0236*       xor a                   ; clear carry
0417E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0417E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0417E9 C9          0239*       ret
0417EA             0240*   
0417EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0417F0             0242*   
       FF FF FF FF 
       FF FF 
0417F0 00 00 00    0243*   timestamp_now: dl 0
0417F3 00 00 00    0244*   timestamp_old: dl 0
0417F6 00 00 00    0245*   timestamp_chg: dl 0
0417F9             0246*   
0417F9             0247*   ; update the global timestamp from the system clock
0417F9             0248*   ; inputs: none
0417F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0417F9             0250*   ;          ix = pointer to syvars table
0417F9             0251*   ; destroys: af,hl,de,ix
0417F9             0252*   timestamp_tick:
0417F9 ED 5B F0 17 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0417FE ED 53 F3 17 0254*       ld (timestamp_old),de   ; save previous time
       04          
041803             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041803 3E 08       0001*M1 			LD	A, function
041805 5B CF       0002*M1 			RST.LIL	08h
041807 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04180A 22 F0 17 04 0257*       ld (timestamp_now),hl   ; save current time
04180E AF          0258*       xor a                   ; clear carry
04180F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041811 22 F6 17 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041815 C9          0261*       ret
041816             0262*   
041816             0263*   ; set a countdown timer
041816             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041816             0265*   ; requires: timestamp_tick to be called at least once before this function
041816             0266*   ; returns: hl = current time
041816             0267*   ; destroys: hl
041816             0268*   timestamp_tmr_set:
041816 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041819 2A F0 17 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04181D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041820 C9          0272*       ret
041821             0273*   
041821             0274*   ; gets time remaining on a countdown timer following the global timestamp
041821             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041821             0276*   ; requires: timestamp_tick to be called at least once before this function
041821             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041821             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041821             0279*   ; destroys: af,hl,de
041821             0280*   timestamp_tmr_get:
041821 ED 5B F0 17 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041826 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041829 AF          0283*       xor a                   ; clear carry
04182A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04182C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04182F AF          0286*       xor a                   ; clear carry
041830 ED 5A       0287*       adc hl,de               ; hl = time remaining
041832             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041832 C9          0289*       ret
041833             0290*   
041833             0291*   ; set a stopwatch
041833             0292*   ; returns: hl = start time
041833             0293*   ; destroys: hl,ix
041833             0294*   stopwatch_set:
041833             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041833 3E 08       0001*M1 			LD	A, function
041835 5B CF       0002*M1 			RST.LIL	08h
041837 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04183A 22 4F 18 04 0297*       ld (stopwatch_started),hl            ; set start time
04183E C9          0298*       ret
04183F             0299*   
04183F             0300*   ; gets time elapsed on a stopwatch
04183F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04183F             0302*   ; destroys: af,hl,de,ix
04183F             0303*   stopwatch_get:
04183F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04183F 3E 08       0001*M1 			LD	A, function
041841 5B CF       0002*M1 			RST.LIL	08h
041843 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041846 ED 5B 4F 18 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04184B AF          0307*       xor a                   ; clear carry
04184C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04184E C9          0309*       ret
04184F             0310*   
04184F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041852             0312*   
041852             0313*   ; ------------------
041852             0314*   ; delay routine
041852             0315*   ; Author: Richard Turrnidge
041852             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041852             0317*   ; routine waits a fixed time,then returns
041852             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041852             0319*   ; eg. ld A,00000100b
041852             0320*   
041852             0321*   multiPurposeDelay:
       FF FF FF 
041852 F5          0322*       push af
041853 C5          0323*       push bc
041854 DD E5       0324*       push ix
041856 47          0325*       ld b,a
041857 3E 08       0326*       ld a,$08
041859 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04185B             0328*   
04185B             0329*   waitLoop:
04185B             0330*   
04185B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04185E             0332*   
04185E             0333*                                   ;   we check if bit set is same as last time we checked.
04185E             0334*                                   ;   bit 0 - don't use
04185E             0335*                                   ;   bit 1 - changes 64 times per second
04185E             0336*                                   ;   bit 2 - changes 32 times per second
04185E             0337*                                   ;   bit 3 - changes 16 times per second
04185E             0338*   
04185E             0339*                                   ;   bit 4 - changes 8 times per second
04185E             0340*                                   ;   bit 5 - changes 4 times per second
04185E             0341*                                   ;   bit 6 - changes 2 times per second
04185E             0342*                                   ;   bit 7 - changes 1 times per second
04185E A0          0343*       and b
04185F 4F          0344*       ld c,a
041860 3A 71 18 04 0345*       ld a,(oldTimeStamp)
041864 B9          0346*       cp c                        ; is A same as last value?
041865 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041867 79          0348*       ld a,c
041868 32 71 18 04 0349*       ld (oldTimeStamp),a        ; set new value
04186C             0350*   
04186C DD E1       0351*       pop ix
04186E C1          0352*       pop bc
04186F F1          0353*       pop af
041870 C9          0354*       ret
041871             0355*   
041871 00          0356*   oldTimeStamp:   .db 00h
041872             0038        include "vdu.inc"
041872 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041900             0002*   
041900             0003*   ; VDU 30: Home cursor
041900             0004*   vdu_home_cursor:
041900 3E 1E       0005*       ld a,30
041902 5B D7       0006*   	rst.lil $10
041904 C9          0007*   	ret
041905             0008*   
041905             0009*   vdu_cursor_on:
041905 21 10 19 04 0010*   	ld hl,@cmd
041909 01 03 00 00 0011*   	ld bc,@end-@cmd
04190D 5B DF       0012*   	rst.lil $18
04190F C9          0013*   	ret
041910             0014*   @cmd:
041910 17 01 01    0015*   	db 23,1,1
041913             0016*   @end:
041913             0017*   
041913             0018*   vdu_cursor_off:
041913 21 1E 19 04 0019*   	ld hl,@cmd
041917 01 03 00 00 0020*   	ld bc,@end-@cmd
04191B 5B DF       0021*   	rst.lil $18
04191D C9          0022*   	ret
04191E             0023*   @cmd:
04191E 17 01 00    0024*   	db 23,1,0
041921             0025*   @end:
041921             0026*   
041921             0027*   ; VDU 5: Write text at graphics cursor
041921             0028*   ; inputs: a is the character to write to the screen
041921             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041921             0030*   ; outputs: see the name of the function
041921             0031*   ; destroys: a, hl, bc
041921             0032*   vdu_char_to_gfx_cursor:
041921 32 31 19 04 0033*   	ld (@arg),a
041925 21 30 19 04 0034*   	ld hl,@cmd
041929 01 02 00 00 0035*   	ld bc,@end-@cmd
04192D 5B DF       0036*   	rst.lil $18
04192F C9          0037*   	ret
041930 05          0038*   @cmd: db 5
041931 00          0039*   @arg: db 0
041932             0040*   @end:
041932             0041*   ; VDU 9: Move cursor forward one character
041932             0042*   vdu_cursor_forward:
041932 3E 09       0043*       ld a,9
041934 5B D7       0044*   	rst.lil $10
041936 C9          0045*   	ret
041937             0046*   
041937             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041937             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041937             0049*   vdu_move_cursor:
041937 ED 43 48 19 0050*       ld (@x0),bc
       04          
04193C 21 47 19 04 0051*   	ld hl,@cmd
041940 01 03 00 00 0052*   	ld bc,@end-@cmd
041944 5B DF       0053*   	rst.lil $18
041946 C9          0054*   	ret
041947 1F          0055*   @cmd: 	db 31
041948 00          0056*   @x0:	db 0
041949 00          0057*   @y0: 	db 0
04194A 00          0058*   @end: 	db 0 ; padding
04194B             0059*   
04194B             0060*   ; VDU 12: Clear text area (CLS)
04194B             0061*   vdu_cls:
04194B 3E 0C       0062*       ld a,12
04194D 5B D7       0063*   	rst.lil $10
04194F C9          0064*   	ret
041950             0065*   
041950             0066*   vdu_flip:
041950 21 5B 19 04 0067*   	ld hl,@cmd
041954 01 03 00 00 0068*   	ld bc,@end-@cmd
041958 5B DF       0069*   	rst.lil $18
04195A C9          0070*   	ret
04195B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04195E             0072*   @end:
04195E             0073*   
04195E             0074*   ; VDU 16: Clear graphics area (CLG)
04195E             0075*   vdu_clg:
04195E 3E 10       0076*       ld a,16
041960 5B D7       0077*   	rst.lil $10
041962 C9          0078*   	ret
041963             0079*   
041963             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041963             0081*   ; VDU 23, 7: Scrolling
041963             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041963             0083*   ; inputs: a, extent; l, direction; h; speed
041963             0084*   vdu_scroll_down:
041963 32 78 19 04 0085*   	ld (@extent),a
041967 22 79 19 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04196B 21 76 19 04 0087*   	ld hl,@cmd
04196F 01 05 00 00 0088*   	ld bc,@end-@cmd
041973 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041975 C9          0090*   	ret
041976 17 07       0091*   @cmd:       db 23,7
041978 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041979 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04197A 00          0094*   @speed:     db 0x00 ; pixels
04197B 00          0095*   @end:		db 0x00 ; padding
04197C             0096*   
04197C             0097*   ; COLOUR MODES
04197C             0098*   ; Mode	Effect
04197C             0099*   ; 0	Set on-screen pixel to target colour value
04197C             0100*   ; 1	OR value with the on-screen pixel
04197C             0101*   ; 2	AND value with the on-screen pixel
04197C             0102*   ; 3	XOR value with the on-screen pixel
04197C             0103*   ; 4	Invert the on-screen pixel
04197C             0104*   ; 5	No operation
04197C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04197C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04197C             0107*   
04197C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04197C             0109*   vdu_colour_text:
04197C 32 8C 19 04 0110*   	ld (@arg),a
041980 21 8B 19 04 0111*   	ld hl,@cmd
041984 01 02 00 00 0112*   	ld bc,@end-@cmd
041988 5B DF       0113*   	rst.lil $18
04198A C9          0114*   	ret
04198B 11          0115*   @cmd: db 17
04198C 00          0116*   @arg: db 0
04198D             0117*   @end:
04198D             0118*   
04198D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04198D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04198D             0121*   vdu_gcol:
04198D 32 A2 19 04 0122*   	ld (@mode),a
041991 79          0123*       ld a,c
041992 32 A3 19 04 0124*       ld (@col),a
041996 21 A1 19 04 0125*   	ld hl,@cmd
04199A 01 03 00 00 0126*   	ld bc,@end-@cmd
04199E 5B DF       0127*   	rst.lil $18
0419A0 C9          0128*   	ret
0419A1 12          0129*   @cmd:  db 18
0419A2 00          0130*   @mode: db 0
0419A3 00          0131*   @col:  db 0
0419A4             0132*   @end:
0419A4             0133*   
0419A4             0134*   
0419A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0419A4             0136*   ; MIND THE LITTLE-ENDIANESS
0419A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0419A4             0138*   ; outputs; nothing
0419A4             0139*   ; destroys: a might make it out alive
0419A4             0140*   vdu_set_txt_viewport:
0419A4 ED 43 BA 19 0141*       ld (@lb),bc
       04          
0419A9 ED 53 BC 19 0142*   	ld (@rt),de
       04          
0419AE 21 B9 19 04 0143*   	ld hl,@cmd
0419B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0419B6 5B DF       0145*   	rst.lil $18
0419B8 C9          0146*   	ret
0419B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0419BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0419BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0419BE 00          0150*   @end:   db 0x00	  ; padding
0419BF             0151*   
0419BF             0152*   ; Wait for VBLANK interrupt
0419BF             0153*   vdu_vblank:
0419BF DD E5       0154*       PUSH 	IX
0419C1             0155*   	MOSCALL	mos_sysvars
0419C1 3E 08       0001*M1 			LD	A, function
0419C3 5B CF       0002*M1 			RST.LIL	08h
0419C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0419C8             0157*   @wait:
0419C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0419CB 28 FB       0159*       JR	Z, @wait
0419CD DD E1       0160*       POP	IX
0419CF C9          0161*       RET
0419D0             0162*   
0419D0             0163*   ; VDU 29, x; y;: Set graphics origin
0419D0             0164*   ; This command sets the graphics origin.
0419D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0419D0             0166*   ; inputs: bc=x0,de=y0
0419D0             0167*   ; outputs; nothing
0419D0             0168*   ; destroys: a might make it out alive
0419D0             0169*   vdu_set_gfx_origin:
0419D0 ED 43 E6 19 0170*       ld (@x0),bc
       04          
0419D5 ED 53 E8 19 0171*       ld (@y0),de
       04          
0419DA 21 E5 19 04 0172*       ld hl,@cmd
0419DE 01 05 00 00 0173*       ld bc,@end-@cmd
0419E2 5B DF       0174*       rst.lil $18
0419E4 C9          0175*       ret
0419E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0419E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0419E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0419EA 00          0179*   @end:   db 0x00	  ; padding
0419EB             0180*   
0419EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0419EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0419EB             0183*   ; 	because we have turned off logical screen scaling
0419EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0419EB             0185*   ; outputs; nothing
0419EB             0186*   ; destroys: a might make it out alive
0419EB             0187*   vdu_set_gfx_viewport:
0419EB ED 43 0B 1A 0188*       ld (@x0),bc
       04          
0419F0 FD 22 0D 1A 0189*       ld (@y1),iy
       04          
0419F5 DD 22 0F 1A 0190*   	ld (@x1),ix
       04          
0419FA ED 53 11 1A 0191*   	ld (@y0),de
       04          
0419FF 21 0A 1A 04 0192*   	ld hl,@cmd
041A03 01 09 00 00 0193*   	ld bc,@end-@cmd
041A07 5B DF       0194*   	rst.lil $18
041A09 C9          0195*   	ret
041A0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041A0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041A0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041A0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041A11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041A13 00          0201*   @end:   db 0x00	  ; padding
041A14             0202*   
041A14             0203*   ; SCREEN MODES
041A14             0204*   ; ===============================
041A14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041A14             0206*   ; ---   ----  ----  ----  -------
041A14             0207*   ; 11    320   240   2     60hz
041A14             0208*   ; 139   320   240   2     60hz
041A14             0209*   ; 23    512   384   2     60hz
041A14             0210*   ; 151   512   384   2     60hz
041A14             0211*   ; 6     640   240   2     60hz
041A14             0212*   ; 134   640   240   2     60hz
041A14             0213*   ; 2     640   480   2     60hz
041A14             0214*   ; 130   640   480   2     60hz
041A14             0215*   ; 17    800   600   2     60hz
041A14             0216*   ; 145   800   600   2     60hz
041A14             0217*   ; 18    1024  768   2     60hz
041A14             0218*   ; 146   1024  768   2     60hz
041A14             0219*   ; ---   ----  ----  ----  -------
041A14             0220*   ; 10    320   240   4     60hz
041A14             0221*   ; 138   320   240   4     60hz
041A14             0222*   ; 22    512   384   4     60hz
041A14             0223*   ; 150   512   384   4     60hz
041A14             0224*   ; 5     640   240   4     60hz
041A14             0225*   ; 133   640   240   4     60hz
041A14             0226*   ; 1     640   480   4     60hz
041A14             0227*   ; 129   640   480   4     60hz
041A14             0228*   ; 16    800   600   4     60hz
041A14             0229*   ; 19    1024  768   4     60hz
041A14             0230*   ; ---   ----  ----  ----  -------
041A14             0231*   ; 9     320   240   16    60hz
041A14             0232*   ; 137   320   240   16    60hz
041A14             0233*   ; 21    512   384   16    60hz
041A14             0234*   ; 149   512   384   16    60hz
041A14             0235*   ; 4     640   240   16    60hz
041A14             0236*   ; 132   640   240   16    60hz
041A14             0237*   ; 0     640   480   16    60hz
041A14             0238*   ; 7     n/a   n/a   16    60hz
041A14             0239*   ; ---   ----  ----  ----  -------
041A14             0240*   ; 8     320   240   64    60hz
041A14             0241*   ; 136   320   240   64    60hz
041A14             0242*   ; 20    512   384   64    60hz
041A14             0243*   ; 3     640   240   64    60hz
041A14             0244*   ; ---   ----  ----  ----  -------
041A14             0245*   vdu_set_screen_mode:
041A14 32 24 1A 04 0246*   	ld (@arg),a
041A18 21 23 1A 04 0247*   	ld hl,@cmd
041A1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041A20 5B DF       0249*   	rst.lil $18
041A22 C9          0250*   	ret
041A23 16          0251*   @cmd: db 22 ; set screen mode
041A24 00          0252*   @arg: db 0  ; screen mode parameter
041A25             0253*   @end:
041A25             0254*   
041A25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041A25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041A25             0257*   ; note: default setting on boot is scaling ON
041A25             0258*   vdu_set_scaling:
041A25 32 37 1A 04 0259*   	ld (@arg),a
041A29 21 34 1A 04 0260*   	ld hl,@cmd
041A2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041A31 5B DF       0262*   	rst.lil $18
041A33 C9          0263*   	ret
041A34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041A37 00          0265*   @arg: db 0  ; scaling on/off
041A38             0266*   @end:
041A38             0267*   
041A38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041A38             0269*   ; inputs: hl=bufferId
041A38             0270*   vdu_buff_select:
041A38 22 4A 1A 04 0271*   	ld (@bufferId),hl
041A3C 21 47 1A 04 0272*   	ld hl,@cmd
041A40 01 05 00 00 0273*   	ld bc,@end-@cmd
041A44 5B DF       0274*   	rst.lil $18
041A46 C9          0275*   	ret
041A47 17 1B 20    0276*   @cmd: db 23,27,0x20
041A4A 00 00       0277*   @bufferId: dw 0x0000
041A4C 00          0278*   @end: db 0x00 ; padding
041A4D             0279*   
041A4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041A4D             0281*   ; inputs: a=format; bc=width; de=height
041A4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041A4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041A4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041A4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041A4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041A4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041A4D             0288*   vdu_bmp_create:
041A4D ED 43 69 1A 0289*       ld (@width),bc
       04          
041A52 ED 53 6B 1A 0290*       ld (@height),de
       04          
041A57 32 6D 1A 04 0291*       ld (@fmt),a
041A5B 21 66 1A 04 0292*   	ld hl,@cmd
041A5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041A63 5B DF       0294*   	rst.lil $18
041A65 C9          0295*   	ret
041A66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041A69 00 00       0297*   @width:     dw 0x0000
041A6B 00 00       0298*   @height:    dw 0x0000
041A6D 00          0299*   @fmt:       db 0x00
041A6E             0300*   @end:
041A6E             0301*   
041A6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041A6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041A6E             0304*   vdu_load_img_rgba2_to_8:
041A6E             0305*   ; backup the target buffer id and image dimensions
041A6E E5          0306*       push hl
041A6F D5          0307*       push de
041A70 C5          0308*       push bc
041A71             0309*   ; load the rgba2 image to working buffer 65534
041A71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041A75 CD 78 1B 04 0311*   	call vdu_load_buffer_from_file
041A79             0312*   ; restore the image dimensions and target buffer id
041A79 C1          0313*       pop bc
041A7A D1          0314*       pop de
041A7B E1          0315*       pop hl
041A7C             0316*   ; fall through to vdu_rgba2_to_8
041A7C             0317*   
041A7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041A7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041A7C             0320*   ; the "expand bitmap" command is:
041A7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041A7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041A7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041A7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041A7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041A7C             0326*   ; VDU 23,27,&21,width%;height%;0
041A7C             0327*   ; -------------------------------------------------------------------
041A7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041A7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041A7C             0330*   vdu_rgba2_to_8:
041A7C             0331*   ; load the image dimensions and buffer id parameters
041A7C ED 43 D8 1A 0332*       ld (@width),bc
       04          
041A81 ED 53 DA 1A 0333*       ld (@height),de
       04          
041A86 22 BD 1A 04 0334*       ld (@bufferId0),hl
041A8A 22 CA 1A 04 0335*       ld (@bufferId2),hl
041A8E 22 D3 1A 04 0336*       ld (@bufferId1),hl
041A92             0337*   ; clean up bytes that got stomped on by the ID loads
041A92 3E 48       0338*       ld a,0x48
041A94 32 BF 1A 04 0339*       ld (@bufferId0+2),a
041A98 3E 17       0340*       ld a,23
041A9A 32 D5 1A 04 0341*       ld (@bufferId1+2),a
041A9E 3E 18       0342*       ld a,24
041AA0 32 CC 1A 04 0343*       ld (@bufferId2+2),a
041AA4 AF          0344*       xor a
041AA5 32 DC 1A 04 0345*       ld (@height+2),a
041AA9             0346*   ; send the vdu command strings
041AA9 21 B4 1A 04 0347*       ld hl,@beg
041AAD 01 29 00 00 0348*       ld bc,@end-@beg
041AB1 5B DF       0349*       rst.lil $18
041AB3 C9          0350*       ret
041AB4             0351*   @beg:
041AB4             0352*   ; Command 14: Consolidate blocks in a buffer
041AB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041AB4 17 00 A0    0354*       db 23,0,0xA0
041AB7 FE FF       0355*       dw 65534 ; workingBufferId
041AB9 0E          0356*       db 14 ; consolidate blocks
041ABA             0357*   ; the "expand bitmap" command is:
041ABA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041ABA 17 00 A0    0359*       db 23,0,0xA0
041ABD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041ABF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041AC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041AC1 FE FF       0363*       dw 65534 ; sourceBufferId
041AC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041AC7             0365*   ; reverse the byte order to fix endian-ness:
041AC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041AC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041AC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041AC7 17 00 A0    0369*       db 23,0,0xA0
041ACA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041ACC 18          0371*       db 24 ; reverse byte order
041ACD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041ACE 04 00       0373*       dw 4 ; size (4 bytes)
041AD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041AD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041AD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041AD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041AD5             0378*   ; VDU 23,27,&21,width%;height%;0
041AD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041AD8 00 00       0380*   @width: dw 0x0000
041ADA 00 00       0381*   @height: dw 0x0000
041ADC 00          0382*       db 0x00 ; rgba8888 format
041ADD             0383*   @end:
041ADD             0384*   
041ADD             0385*   ; scratch variables
041ADD 00 00 00    0386*   bufferId0: dl 0x000000
041AE0 00 00 00    0387*   bufferId1: dl 0x000000
041AE3             0388*   
041AE3             0389*   ; load a vdu buffer from local memory
041AE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041AE3             0391*   vdu_load_buffer:
041AE3 ED 43 0C 1B 0392*       ld (@length),bc
       04          
041AE8 D5          0393*       push de ; save data pointer
041AE9             0394*   ; send the vdu command string
041AE9 7D          0395*       ld a,l
041AEA 32 09 1B 04 0396*       ld (@bufferId),a
041AEE 7C          0397*       ld a,h
041AEF 32 0A 1B 04 0398*       ld (@bufferId+1),a
041AF3 21 06 1B 04 0399*       ld hl,@cmd
041AF7 01 08 00 00 0400*       ld bc,@end-@cmd
041AFB 5B DF       0401*       rst.lil $18
041AFD             0402*   ; send the buffer data
041AFD E1          0403*       pop hl ; pointer to data
041AFE ED 4B 0C 1B 0404*       ld bc,(@length)
       04          
041B03 5B DF       0405*       rst.lil $18 ; send it
041B05 C9          0406*       ret
041B06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041B06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041B09 00 00       0409*   @bufferId:	dw 0x0000
041B0B 00          0410*   		    db 0 ; load buffer
041B0C 00 00       0411*   @length:	dw 0x0000
041B0E 00          0412*   @end: db 0 ; padding
041B0F             0413*   
041B0F             0414*   ; clear a buffer
041B0F             0415*   ; inputs: hl = bufferId
041B0F             0416*   vdu_clear_buffer:
041B0F 7D          0417*       ld a,l
041B10 32 27 1B 04 0418*       ld (@bufferId),a
041B14 7C          0419*       ld a,h
041B15 32 28 1B 04 0420*       ld (@bufferId+1),a
041B19 21 24 1B 04 0421*       ld hl,@cmd
041B1D 01 06 00 00 0422*       ld bc,@end-@cmd
041B21 5B DF       0423*       rst.lil $18
041B23 C9          0424*       ret
041B24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041B27 00 00       0426*   @bufferId:	dw 0x0000
041B29 02          0427*   		    db 2 ; clear buffer
041B2A             0428*   @end:
041B2A             0429*   
041B2A             0430*   vdu_clear_all_buffers:
041B2A             0431*   ; clear all buffers
041B2A 21 35 1B 04 0432*       ld hl,@beg
041B2E 01 06 00 00 0433*       ld bc,@end-@beg
041B32 5B DF       0434*       rst.lil $18
041B34 C9          0435*       ret
041B35 17 00 A0    0436*   @beg: db 23,0,$A0
041B38 FF FF       0437*         dw -1 ; clear all buffers
041B3A 02          0438*         db 2  ; command 2: clear a buffer
041B3B             0439*   @end:
041B3B             0440*   
041B3B             0441*   ; Command 14: Consolidate blocks in a buffer
041B3B             0442*   vdu_consolidate_buffer:
041B3B             0443*   ; set parameters for vdu call
041B3B 7D          0444*       ld a,l
041B3C 32 53 1B 04 0445*       ld (@bufferId),a
041B40 7C          0446*       ld a,h
041B41 32 54 1B 04 0447*       ld (@bufferId+1),a
041B45 21 50 1B 04 0448*       ld hl,@beg
041B49 01 06 00 00 0449*       ld bc,@end-@beg
041B4D 5B DF       0450*       rst.lil $18
041B4F C9          0451*       ret
041B50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041B50 17 00 A0    0453*   @beg: db 23,0,0xA0
041B53 00 00       0454*   @bufferId: dw 0x0000
041B55 0E          0455*              db 14
041B56             0456*   @end:
041B56             0457*   
041B56             0458*   ; load an image file to a buffer and make it a bitmap
041B56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041B56             0460*   vdu_load_img:
041B56             0461*   ; back up image type and dimension parameters
041B56 22 DD 1A 04 0462*       ld (bufferId0),hl
041B5A F5          0463*       push af
041B5B C5          0464*   	push bc
041B5C D5          0465*   	push de
041B5D             0466*   ; load the image
041B5D CD 78 1B 04 0467*   	call vdu_load_buffer_from_file
041B61             0468*   ; now make it a bitmap
041B61 2A DD 1A 04 0469*       ld hl,(bufferId0)
041B65 CD 3B 1B 04 0470*       call vdu_consolidate_buffer
041B69 2A DD 1A 04 0471*       ld hl,(bufferId0)
041B6D CD 38 1A 04 0472*       call vdu_buff_select
041B71 D1          0473*   	pop de ; image height
041B72 C1          0474*   	pop bc ; image width
041B73 F1          0475*   	pop af ; image type
041B74 C3 4D 1A 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041B78             0477*   
041B78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041B78             0479*   vdu_load_buffer_from_file:
041B78 22 DD 1A 04 0480*       ld (bufferId0),hl
041B7C             0481*   
041B7C             0482*   ; clear target buffer
041B7C CD 0F 1B 04 0483*       call vdu_clear_buffer
041B80             0484*   
041B80             0485*   ; open the file in read mode
041B80             0486*   ; Open a file
041B80             0487*   ; HLU: Filename
041B80             0488*   ;   C: Mode
041B80             0489*   ; Returns:
041B80             0490*   ;   A: Filehandle, or 0 if couldn't open
041B80 FD E5       0491*   	push iy ; pointer to filename
041B82 E1          0492*   	pop hl
041B83 0E 01       0493*   	ld c,fa_read
041B85             0494*       MOSCALL mos_fopen
041B85 3E 0A       0001*M1 			LD	A, function
041B87 5B CF       0002*M1 			RST.LIL	08h
041B89 32 C4 1B 04 0495*       ld (@filehandle),a
041B8D             0496*   
041B8D             0497*   @read_file:
041B8D             0498*   ; Read a block of data from a file
041B8D             0499*   ;   C: Filehandle
041B8D             0500*   ; HLU: Pointer to where to write the data to
041B8D             0501*   ; DEU: Number of bytes to read
041B8D             0502*   ; Returns:
041B8D             0503*   ; DEU: Number of bytes read
041B8D 3A C4 1B 04 0504*       ld a,(@filehandle)
041B91 4F          0505*       ld c,a
041B92 21 00 E0 B7 0506*       ld hl,filedata
041B96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041B9A             0508*       MOSCALL mos_fread
041B9A 3E 1A       0001*M1 			LD	A, function
041B9C 5B CF       0002*M1 			RST.LIL	08h
041B9E             0509*   
041B9E             0510*   ; test de for zero bytes read
041B9E 21 00 00 00 0511*       ld hl,0
041BA2 AF          0512*       xor a ; clear carry
041BA3 ED 52       0513*       sbc hl,de
041BA5 CA BB 1B 04 0514*       jp z,@close_file
041BA9             0515*   
041BA9             0516*   ; load a vdu buffer from local memory
041BA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BA9 2A DD 1A 04 0518*       ld hl,(bufferId0)
041BAD D5          0519*       push de ; chunksize
041BAE C1          0520*       pop bc
041BAF 11 00 E0 B7 0521*       ld de,filedata
041BB3 CD E3 1A 04 0522*       call vdu_load_buffer
041BB7             0523*   
041BB7             0524*   ; read the next block
041BB7 C3 8D 1B 04 0525*       jp @read_file
041BBB             0526*   
041BBB             0527*   ; close the file
041BBB             0528*   @close_file:
041BBB 3A C4 1B 04 0529*       ld a,(@filehandle)
041BBF             0530*       MOSCALL mos_fclose
041BBF 3E 0B       0001*M1 			LD	A, function
041BC1 5B CF       0002*M1 			RST.LIL	08h
041BC3 C9          0531*       ret ; vdu_load_buffer_from_file
041BC4             0532*   
041BC4 00          0533*   @filehandle: db 0 ; file handle
041BC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041BC8             0535*   
041BC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041BCB             0537*   
041BCB             0538*   ; File information structure (FILINFO)
041BCB             0539*   @filinfo:
041BCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041BCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041BD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041BD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041BD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041BE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041CE1             0039        include "vdu_fonts.inc"
041CE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041D00             0002*   ; select font
041D00             0003*   ; inputs: hl = bufferId, a = font flags
041D00             0004*   ; Flags:
041D00             0005*   ; Bit	Description
041D00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041D00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041D00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041D00             0009*   ; 1-7	Reserved for future use
041D00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041D00             0011*   vdu_font_select:
041D00 22 17 1D 04 0012*       ld (@bufferId),hl
041D04 32 19 1D 04 0013*       ld (@flags),a
041D08 21 13 1D 04 0014*       ld hl,@cmd
041D0C 01 07 00 00 0015*       ld bc,@end-@cmd
041D10 5B DF       0016*       rst.lil $18
041D12 C9          0017*       ret
041D13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041D17 00 00       0019*   @bufferId: dw 0x0000
041D19 00          0020*   @flags: db 0x00
041D1A             0021*   @end:
041D1A             0022*   
041D1A             0023*   ; create font from buffer
041D1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041D1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041D1A             0026*   vdu_font_create:
041D1A 22 3F 1D 04 0027*       ld (@bufferId),hl
041D1E ED 53 41 1D 0028*       ld (@width),de ; also loads height
       04          
041D23 32 44 1D 04 0029*       ld (@flags),a
041D27 7A          0030*       ld a,d ; height
041D28 32 43 1D 04 0031*       ld (@ascent),a ; ascent = height
041D2C             0032*   ; consolidate buffer
041D2C CD 3B 1B 04 0033*       call vdu_consolidate_buffer
041D30             0034*   ; create font
041D30 21 3B 1D 04 0035*       ld hl,@cmd
041D34 01 0A 00 00 0036*       ld bc,@end-@cmd
041D38 5B DF       0037*       rst.lil $18
041D3A C9          0038*       ret
041D3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041D3F 00 00       0040*   @bufferId: dw 0x0000
041D41 00          0041*   @width: db 0x00
041D42 00          0042*   @height: db 0x00
041D43 00          0043*   @ascent: db 0x00
041D44 00          0044*   @flags: db 0x00
041D45             0045*   @end:
041D45             0046*   
041D45             0047*   ; set or adjust font property
041D45             0048*   ; inputs: hl = bufferId, a = field, de = value
041D45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041D45             0050*   vdu_font_property:
041D45 22 61 1D 04 0051*       ld (@bufferId),hl
041D49 32 63 1D 04 0052*       ld (@field),a
041D4D ED 53 64 1D 0053*       ld (@value),de
       04          
041D52 21 5D 1D 04 0054*       ld hl,@cmd
041D56 01 09 00 00 0055*       ld bc,@end-@cmd
041D5A 5B DF       0056*       rst.lil $18
041D5C C9          0057*       ret
041D5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041D61 00 00       0059*   @bufferId: dw 0x0000
041D63 00          0060*   @field: db 0x00
041D64 00 00       0061*   @value: dw 0x0000
041D66 00          0062*   @end: db 0x00 ; padding
041D67             0063*   
041D67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041D67             0065*   
041D67             0066*   ; Clear/Delete font
041D67             0067*   ; inputs: hl = bufferId
041D67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041D67             0069*   vdu_font_clear:
041D67 22 7A 1D 04 0070*       ld (@bufferId),hl
041D6B 21 76 1D 04 0071*       ld hl,@cmd
041D6F 01 06 00 00 0072*       ld bc,@end-@cmd
041D73 5B DF       0073*       rst.lil $18
041D75 C9          0074*       ret
041D76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041D7A 00 00       0076*   @bufferId: dw 0x0000
041D7C 00          0077*   @end: db 0x00 ; padding
041D7D             0078*   
041D7D             0079*   ; Copy system font to buffer
041D7D             0080*   ; inputs: hl = bufferId
041D7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041D7D             0082*   vdu_font_copy_system:
041D7D 22 90 1D 04 0083*       ld (@bufferId),hl
041D81 21 8C 1D 04 0084*       ld hl,@cmd
041D85 01 06 00 00 0085*       ld bc,@end-@cmd
041D89 5B DF       0086*       rst.lil $18
041D8B C9          0087*       ret
041D8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041D90 00 00       0089*   @bufferId: dw 0x0000
041D92 00          0090*   @end: db 0x00 ; padding
041D93             0040        include "vdu_plot.inc"
041D93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041E00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E00             0003*   ; PLOT code 	(Decimal) 	Effect
041E00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041E00             0005*   plot_sl_both: equ 0x00
041E00             0006*   
041E00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041E00             0008*   plot_sl_first: equ 0x08
041E00             0009*   
041E00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041E00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041E00             0012*   
041E00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041E00             0014*   plot_sl_last: equ 0x20
041E00             0015*   
041E00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041E00             0017*   plot_sl_none: equ 0x28
041E00             0018*   
041E00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041E00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041E00             0021*   
041E00             0022*   ; &40-&47 	64-71 	Point plot
041E00             0023*   plot_pt: equ 0x40
041E00             0024*   
041E00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041E00             0026*   plot_lf_lr_non_bg: equ 0x48
041E00             0027*   
041E00             0028*   ; &50-&57 	80-87 	Triangle fill
041E00             0029*   plot_tf: equ 0x50
041E00             0030*   
041E00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041E00             0032*   plot_lf_r_bg: equ 0x58
041E00             0033*   
041E00             0034*   ; &60-&67 	96-103 	Rectangle fill
041E00             0035*   plot_rf: equ 0x60
041E00             0036*   
041E00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041E00             0038*   plot_lf_lr_fg: equ 0x60
041E00             0039*   
041E00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041E00             0041*   plot_pf: equ 0x70
041E00             0042*   
041E00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041E00             0044*   plot_lf_r_non_fg: equ 0x78
041E00             0045*   
041E00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041E00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041E00             0048*   
041E00             0049*   ; &90-&97 	144-151 	Circle outline
041E00             0050*   plot_co: equ 0x90
041E00             0051*   
041E00             0052*   ; &98-&9F 	152-159 	Circle fill
041E00             0053*   plot_cf: equ 0x98
041E00             0054*   
041E00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041E00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041E00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041E00             0058*   
041E00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041E00             0060*   plot_rcm: equ 0xB8
041E00             0061*   
041E00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041E00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041E00             0064*   ; &D0-&D7 	208-215 	Not defined
041E00             0065*   ; &D8-&DF 	216-223 	Not defined
041E00             0066*   ; &E0-&E7 	224-231 	Not defined
041E00             0067*   
041E00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041E00             0069*   plot_bmp: equ 0xE8
041E00             0070*   
041E00             0071*   ; &F0-&F7 	240-247 	Not defined
041E00             0072*   ; &F8-&FF 	248-255 	Not defined
041E00             0073*   
041E00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041E00             0075*   ; Agon Console8 VDP 2.2.0
041E00             0076*   
041E00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041E00             0078*   ; Plot code 	Effect
041E00             0079*   ; 0 	Move relative
041E00             0080*   mv_rel: equ 0
041E00             0081*   
041E00             0082*   ; 1 	Plot relative in current foreground colour
041E00             0083*   dr_rel_fg: equ 1
041E00             0084*   
041E00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041E00             0086*   ; 3 	Plot relative in current background colour
041E00             0087*   dr_rel_bg: equ 3
041E00             0088*   
041E00             0089*   ; 4 	Move absolute
041E00             0090*   mv_abs: equ 4
041E00             0091*   
041E00             0092*   ; 5 	Plot absolute in current foreground colour
041E00             0093*   dr_abs_fg: equ 5
041E00             0094*   
041E00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041E00             0096*   ; 7 	Plot absolute in current background colour
041E00             0097*   dr_abs_bg: equ 7
041E00             0098*   
041E00             0099*   ; Codes 0-3 use the position data provided as part of the command
041E00             0100*   ; as a relative position, adding the position given to the current
041E00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041E00             0102*   ; as part of the command as an absolute position, setting the current
041E00             0103*   ; graphical cursor position to the position given.
041E00             0104*   
041E00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041E00             0106*   ; current pixel colour. These operations cannot currently be supported
041E00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041E00             0108*   ; supported. Support for these codes may be added in a future version
041E00             0109*   ; of the VDP firmware.
041E00             0110*   
041E00             0111*   ; 16 colour palette constants
041E00             0112*   c_black: equ 0
041E00             0113*   c_red_dk: equ 1
041E00             0114*   c_green_dk: equ 2
041E00             0115*   c_yellow_dk: equ 3
041E00             0116*   c_blue_dk: equ 4
041E00             0117*   c_magenta_dk: equ 5
041E00             0118*   c_cyan_dk: equ 6
041E00             0119*   c_grey: equ 7
041E00             0120*   c_grey_dk: equ 8
041E00             0121*   c_red: equ 9
041E00             0122*   c_green: equ 10
041E00             0123*   c_yellow: equ 11
041E00             0124*   c_blue: equ 12
041E00             0125*   c_magenta: equ 13
041E00             0126*   c_cyan: equ 14
041E00             0127*   c_white: equ 15
041E00             0128*   
041E00             0129*   ; VDU 25, mode, x; y;: PLOT command
041E00             0130*   ; inputs: a=mode, bc=x0, de=y0
041E00             0131*   vdu_plot:
041E00 32 1A 1E 04 0132*       ld (@mode),a
041E04 ED 43 1B 1E 0133*       ld (@x0),bc
       04          
041E09 ED 53 1D 1E 0134*       ld (@y0),de
       04          
041E0E 21 19 1E 04 0135*   	ld hl,@cmd
041E12 01 06 00 00 0136*   	ld bc,@end-@cmd
041E16 5B DF       0137*   	rst.lil $18
041E18 C9          0138*   	ret
041E19 19          0139*   @cmd:   db 25
041E1A 00          0140*   @mode:  db 0
041E1B 00 00       0141*   @x0: 	dw 0
041E1D 00 00       0142*   @y0: 	dw 0
041E1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041E20             0144*   
041E20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041E20             0147*   ; VDU 25, mode, x; y;: PLOT command
041E20             0148*   ; inputs: bc=x0, de=y0
041E20             0149*   ; prerequisites: vdu_buff_select
041E20             0150*   vdu_plot_bmp:
041E20 ED 43 37 1E 0151*       ld (@x0),bc
       04          
041E25 ED 53 39 1E 0152*       ld (@y0),de
       04          
041E2A 21 35 1E 04 0153*   	ld hl,@cmd
041E2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041E32 5B DF       0155*   	rst.lil $18
041E34 C9          0156*   	ret
041E35 19          0157*   @cmd:   db 25
041E36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E37 00 00       0159*   @x0: 	dw 0x0000
041E39 00 00       0160*   @y0: 	dw 0x0000
041E3B 00          0161*   @end:   db 0x00 ; padding
041E3C             0162*   
041E3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041E3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041E3C             0166*   ; inputs: bc=x0, de=y0
041E3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041E3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041E3C             0169*   ;   the fractional portiion of the inputs are truncated
041E3C             0170*   ;   leaving only the 16-bit integer portion
041E3C             0171*   ; prerequisites: vdu_buff_select
041E3C             0172*   vdu_plot_bmp168:
041E3C             0173*   ; populate in the reverse of normal to keep the
041E3C             0174*   ; inputs from stomping on each other
041E3C ED 53 5A 1E 0175*       ld (@y0-1),de
       04          
041E41 ED 43 58 1E 0176*       ld (@x0-1),bc
       04          
041E46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041E48 32 58 1E 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041E4C 21 57 1E 04 0179*   	ld hl,@cmd
041E50 01 06 00 00 0180*   	ld bc,@end-@cmd
041E54 5B DF       0181*   	rst.lil $18
041E56 C9          0182*   	ret
041E57 19          0183*   @cmd:   db 25
041E58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E59 00 00       0185*   @x0: 	dw 0x0000
041E5B 00 00       0186*   @y0: 	dw 0x0000
041E5D             0187*   @end:  ; no padding required b/c we shifted de right
041E5D             0188*   
041E5D             0189*   ; draw a filled rectangle
041E5D             0190*   vdu_plot_rf:
041E5D ED 43 84 1E 0191*       ld (@x0),bc
       04          
041E62 ED 53 86 1E 0192*       ld (@y0),de
       04          
041E67 DD 22 8A 1E 0193*       ld (@x1),ix
       04          
041E6C FD 22 8C 1E 0194*       ld (@y1),iy
       04          
041E71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041E73 32 88 1E 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041E77 21 82 1E 04 0197*   	ld hl,@cmd0
041E7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041E7F 5B DF       0199*   	rst.lil $18
041E81 C9          0200*       ret
041E82 19          0201*   @cmd0:  db 25 ; plot
041E83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041E84 00 00       0203*   @x0:    dw 0x0000
041E86 00 00       0204*   @y0:    dw 0x0000
041E88 19          0205*   @cmd1:  db 25 ; plot
041E89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041E8A 00 00       0207*   @x1:    dw 0x0000
041E8C 00 00       0208*   @y1:    dw 0x0000
041E8E 00          0209*   @end:   db 0x00 ; padding
041E8F             0210*   
041E8F             0211*   ; draw a filled circle
041E8F             0212*   vdu_plot_cf:
041E8F ED 43 B6 1E 0213*       ld (@x0),bc
       04          
041E94 ED 53 B8 1E 0214*       ld (@y0),de
       04          
041E99 DD 22 BC 1E 0215*       ld (@x1),ix
       04          
041E9E FD 22 BE 1E 0216*       ld (@y1),iy
       04          
041EA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041EA5 32 BA 1E 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041EA9 21 B4 1E 04 0219*   	ld hl,@cmd0
041EAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041EB1 5B DF       0221*   	rst.lil $18
041EB3 C9          0222*       ret
041EB4 19          0223*   @cmd0:  db 25 ; plot
041EB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041EB6 00 00       0225*   @x0:    dw 0x0000
041EB8 00 00       0226*   @y0:    dw 0x0000
041EBA 19          0227*   @cmd1:  db 25 ; plot
041EBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041EBC 00 00       0229*   @x1:    dw 0x0000
041EBE 00 00       0230*   @y1:    dw 0x0000
041EC0 00          0231*   @end:   db 0x00 ; padding
041EC1             0041        include "vdu_sprites.inc"
041EC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041F00             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041F00             0003*   ; the VDP can support up to 256 sprites. They must be defined
041F00             0004*   ; contiguously, and so the first sprite is sprite 0.
041F00             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041F00             0006*   ; Once a selection of sprites have been defined, you can activate
041F00             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
041F00             0008*   ; of sprites to activate. This will activate the first n sprites,
041F00             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041F00             0010*   
041F00             0011*   ; A single sprite can have multiple "frames", referring to
041F00             0012*   ; different bitmaps.
041F00             0013*   ; (These bitmaps do not need to be the same size.)
041F00             0014*   ; This allows a sprite to include an animation sequence,
041F00             0015*   ; which can be stepped through one frame at a time, or picked
041F00             0016*   ; in any order.
041F00             0017*   
041F00             0018*   ; Any format of bitmap can be used as a sprite frame. It should
041F00             0019*   ; be noted however that "native" format bitmaps are not
041F00             0020*   ; recommended for use as sprite frames, as they cannot get
041F00             0021*   ; erased from the screen. (As noted above, the "native" bitmap
041F00             0022*   ; format is not really intended for general use.) This is part
041F00             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041F00             0024*   ; screen are now stored in RGBA2222 format.
041F00             0025*   
041F00             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
041F00             0027*   ; and then later shown again.
041F00             0028*   
041F00             0029*   ; Moving sprites around the screen is done by changing the
041F00             0030*   ; position of the sprite. This can be done either by setting
041F00             0031*   ; the absolute position of the sprite, or by moving the sprite
041F00             0032*   ; by a given number of pixels. (Sprites are positioned using
041F00             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
041F00             0034*   ; In the current sprite system, sprites will not update their
041F00             0035*   ; position on-screen until either another drawing operation is
041F00             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041F00             0037*   
041F00             0038*   ; VDU 23, 27, 4, n: Select sprite n
041F00             0039*   ; inputs: a is the 8-bit sprite id
041F00             0040*   vdu_sprite_select:
041F00 32 12 1F 04 0041*       ld (@sprite),a
041F04 21 0F 1F 04 0042*       ld hl,@cmd
041F08 01 04 00 00 0043*       ld bc,@end-@cmd
041F0C 5B DF       0044*       rst.lil $18
041F0E C9          0045*       ret
041F0F 17 1B 04    0046*   @cmd:    db 23,27,4
041F12 00          0047*   @sprite: db 0x00
041F13             0048*   @end:
041F13             0049*   
041F13             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
041F13             0051*   ; inputs: none
041F13             0052*   ; prerequisites: vdu_sprite_select
041F13             0053*   vdu_sprite_clear_frames:
041F13 21 1E 1F 04 0054*       ld hl,@cmd
041F17 01 03 00 00 0055*       ld bc,@end-@cmd
041F1B 5B DF       0056*       rst.lil $18
041F1D C9          0057*       ret
041F1E 17 1B 05    0058*   @cmd: db 23,27,5
041F21             0059*   @end:
041F21             0060*   
041F21             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041F21             0062*   ; inputs: a is the 8-bit bitmap number
041F21             0063*   ; prerequisites: vdu_sprite_select
041F21             0064*   vdu_sprite_add_bmp:
041F21 32 33 1F 04 0065*       ld (@bmp),a
041F25 21 30 1F 04 0066*       ld hl,@cmd
041F29 01 04 00 00 0067*       ld bc,@end-@cmd
041F2D 5B DF       0068*       rst.lil $18
041F2F C9          0069*       ret
041F30 17 1B 06    0070*   @cmd: db 23,27,6
041F33 00          0071*   @bmp: db 0x00
041F34             0072*   @end:
041F34             0073*   
041F34             0074*   ; VDU 23, 27, 7, n: Activate n sprites
041F34             0075*   ; inputs: a is the number of sprites to activate
041F34             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
041F34             0077*   vdu_sprite_activate:
041F34 32 46 1F 04 0078*       ld (@num),a
041F38 21 43 1F 04 0079*       ld hl,@cmd
041F3C 01 04 00 00 0080*       ld bc,@end-@cmd
041F40 5B DF       0081*       rst.lil $18
041F42 C9          0082*       ret
041F43 17 1B 07    0083*   @cmd: db 23,27,7
041F46 00          0084*   @num: db 0x00
041F47             0085*   @end:
041F47             0086*   
041F47             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
041F47             0088*   ; inputs: none
041F47             0089*   ; prerequisites: vdu_sprite_select
041F47             0090*   vdu_sprite_next_frame:
041F47 21 52 1F 04 0091*       ld hl,@cmd
041F4B 01 03 00 00 0092*       ld bc,@end-@cmd
041F4F 5B DF       0093*       rst.lil $18
041F51 C9          0094*       ret
041F52 17 1B 08    0095*   @cmd: db 23,27,8
041F55             0096*   @end:
041F55             0097*   
041F55             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
041F55             0099*   ; inputs: none
041F55             0100*   ; prerequisites: vdu_sprite_select
041F55             0101*   vdu_sprite_prev_frame:
041F55 21 60 1F 04 0102*       ld hl,@cmd
041F59 01 03 00 00 0103*       ld bc,@end-@cmd
041F5D 5B DF       0104*       rst.lil $18
041F5F C9          0105*       ret
041F60 17 1B 09    0106*   @cmd: db 23,27,9
041F63             0107*   @end:
041F63             0108*   
041F63             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041F63             0110*   ; inputs: a is frame number to select
041F63             0111*   ; prerequisites: vdu_sprite_select
041F63             0112*   vdu_sprite_select_frame:
041F63 32 75 1F 04 0113*       ld (@frame),a
041F67 21 72 1F 04 0114*       ld hl,@cmd
041F6B 01 04 00 00 0115*       ld bc,@end-@cmd
041F6F 5B DF       0116*       rst.lil $18
041F71 C9          0117*       ret
041F72 17 1B 0A    0118*   @cmd:    db 23,27,10
041F75 00          0119*   @frame:  db 0x00
041F76             0120*   @end:
041F76             0121*   
041F76             0122*   ; VDU 23, 27, 11: Show current sprite
041F76             0123*   ; inputs: none
041F76             0124*   ; prerequisites: vdu_sprite_select
041F76             0125*   vdu_sprite_show:
041F76 21 81 1F 04 0126*       ld hl,@cmd
041F7A 01 03 00 00 0127*       ld bc,@end-@cmd
041F7E 5B DF       0128*       rst.lil $18
041F80 C9          0129*       ret
041F81 17 1B 0B    0130*   @cmd: db 23,27,11
041F84             0131*   @end:
041F84             0132*   
041F84             0133*   ; VDU 23, 27, 12: Hide current sprite
041F84             0134*   ; inputs: none
041F84             0135*   ; prerequisites: vdu_sprite_select
041F84             0136*   vdu_sprite_hide:
041F84 21 8F 1F 04 0137*       ld hl,@cmd
041F88 01 03 00 00 0138*       ld bc,@end-@cmd
041F8C 5B DF       0139*       rst.lil $18
041F8E C9          0140*       ret
041F8F 17 1B 0C    0141*   @cmd: db 23,27,12
041F92             0142*   @end:
041F92             0143*   
041F92             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041F92             0145*   ; inputs: bc is x coordinate, de is y coordinate
041F92             0146*   ; prerequisites: vdu_sprite_select
041F92             0147*   vdu_sprite_move_abs:
041F92 ED 43 AA 1F 0148*       ld (@xpos),bc
       04          
041F97 ED 53 AC 1F 0149*       ld (@ypos),de
       04          
041F9C 21 A7 1F 04 0150*       ld hl,@cmd
041FA0 01 07 00 00 0151*       ld bc,@end-@cmd
041FA4 5B DF       0152*       rst.lil $18
041FA6 C9          0153*       ret
041FA7 17 1B 0D    0154*   @cmd:  db 23,27,13
041FAA 00 00       0155*   @xpos: dw 0x0000
041FAC 00 00       0156*   @ypos: dw 0x0000
041FAE 00          0157*   @end:  db 0x00 ; padding
041FAF             0158*   
041FAF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FAF             0160*   ; inputs: bc is x coordinate, de is y coordinate
041FAF             0161*   ; prerequisites: vdu_sprite_select
041FAF             0162*   vdu_sprite_move_rel:
041FAF ED 43 C7 1F 0163*       ld (@dx),bc
       04          
041FB4 ED 53 C9 1F 0164*       ld (@dy),de
       04          
041FB9 21 C4 1F 04 0165*       ld hl,@cmd
041FBD 01 07 00 00 0166*       ld bc,@end-@cmd
041FC1 5B DF       0167*       rst.lil $18
041FC3 C9          0168*       ret
041FC4 17 1B 0E    0169*   @cmd: db 23,27,14
041FC7 00 00       0170*   @dx:  dw 0x0000
041FC9 00 00       0171*   @dy:  dw 0x0000
041FCB 00          0172*   @end: db 0x00 ; padding
041FCC             0173*   
041FCC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041FCC             0175*   ; USING 16.8 FIXED POINT COORDINATES
041FCC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041FCC             0177*   ;   the fractional portiion of the inputs are truncated
041FCC             0178*   ;   leaving only the 16-bit integer portion
041FCC             0179*   ; prerequisites: vdu_sprite_select
041FCC             0180*   vdu_sprite_move_abs168:
041FCC             0181*   ; offset inputs by the gfx origin
041FCC             0182*   ; y coordinate
041FCC 21 00 00 00 0183*       ld hl,origin_top*256
041FD0 19          0184*       add hl,de
041FD1 22 F3 1F 04 0185*       ld (@ypos-1),hl
041FD5             0186*   ; x coordinate
041FD5 21 00 80 00 0187*       ld hl,origin_left*256
041FD9 09          0188*       add hl,bc
041FDA 22 F1 1F 04 0189*       ld (@xpos-1),hl
041FDE             0190*   ; prepare vdu command
041FDE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
041FE0 32 F1 1F 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
041FE4 21 EF 1F 04 0193*       ld hl,@cmd
041FE8 01 07 00 00 0194*       ld bc,@end-@cmd
041FEC 5B DF       0195*       rst.lil $18
041FEE C9          0196*       ret
041FEF 17 1B 0D    0197*   @cmd:  db 23,27,13
041FF2 00 00       0198*   @xpos: dw 0x0000
041FF4 00 00       0199*   @ypos: dw 0x0000
041FF6             0200*   @end:  ; no padding required b/c we shifted de right
041FF6             0201*   
041FF6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FF6             0203*   ; USING 16.8 FIXED POINT COORDINATES
041FF6             0204*   ; inputs: ub.c is dx, ud.e is dy
041FF6             0205*   ;   the fractional portiion of the inputs are truncated
041FF6             0206*   ;   leaving only the 16-bit integer portion
041FF6             0207*   ; prerequisites: vdu_sprite_select
041FF6             0208*   vdu_sprite_move_rel168:
041FF6             0209*   ; populate in the reverse of normal to keep the
041FF6             0210*   ; inputs from stomping on each other
041FF6 ED 53 15 20 0211*       ld (@dy-1),de
       04          
041FFB ED 43 13 20 0212*       ld (@dx-1),bc
       04          
042000 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042002 32 13 20 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042006 21 11 20 04 0215*       ld hl,@cmd
04200A 01 07 00 00 0216*       ld bc,@end-@cmd
04200E 5B DF       0217*       rst.lil $18
042010 C9          0218*       ret
042011 17 1B 0E    0219*   @cmd:  db 23,27,14
042014 00 00       0220*   @dx: dw 0x0000
042016 00 00       0221*   @dy: dw 0x0000
042018             0222*   @end:  ; no padding required b/c we shifted de right
042018             0223*   
042018             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042018             0225*   ; inputs: none
042018             0226*   vdu_sprite_update:
042018 21 23 20 04 0227*       ld hl,@cmd
04201C 01 03 00 00 0228*       ld bc,@end-@cmd
042020 5B DF       0229*       rst.lil $18
042022 C9          0230*       ret
042023 17 1B 0F    0231*   @cmd: db 23,27,15
042026             0232*   @end:
042026             0233*   
042026             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042026             0235*   ; inputs: none
042026             0236*   vdu_sprite_bmp_reset:
042026 21 31 20 04 0237*       ld hl,@cmd
04202A 01 03 00 00 0238*       ld bc,@end-@cmd
04202E 5B DF       0239*       rst.lil $18
042030 C9          0240*       ret
042031 17 1B 10    0241*   @cmd: db 23,27,16
042034             0242*   @end:
042034             0243*   
042034             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042034             0245*   ; inputs: none
042034             0246*   vdu_sprite_reset:
042034 21 3F 20 04 0247*       ld hl,@cmd
042038 01 03 00 00 0248*       ld bc,@end-@cmd
04203C 5B DF       0249*       rst.lil $18
04203E C9          0250*       ret
04203F 17 1B 11    0251*   @cmd: db 23,27,17
042042             0252*   @end:
042042             0253*   
042042             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042042             0255*   ; inputs: a is the GCOL paint mode
042042             0256*   ; prerequisites: vdu_sprite_select
042042             0257*   vdu_sprite_set_gcol:
042042 32 54 20 04 0258*       ld (@mode),a
042046 21 51 20 04 0259*       ld hl,@cmd
04204A 01 04 00 00 0260*       ld bc,@end-@cmd
04204E 5B DF       0261*       rst.lil $18
042050 C9          0262*       ret
042051 17 1B 12    0263*   @cmd:  db 23,27,18
042054 00          0264*   @mode: db 0x00
042055             0265*   @end:
042055             0266*   
042055             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042055             0268*   ; inputs: hl=bufferId
042055             0269*   ; prerequisites: vdu_sprite_select
042055             0270*   vdu_sprite_add_buff:
042055 22 67 20 04 0271*       ld (@bufferId),hl
042059 21 64 20 04 0272*       ld hl,@cmd
04205D 01 05 00 00 0273*       ld bc,@end-@cmd
042061 5B DF       0274*       rst.lil $18
042063 C9          0275*       ret
042064 17 1B 26    0276*   @cmd:      db 23,27,0x26
042067 00 00       0277*   @bufferId: dw 0x0000
042069 00          0278*   @end:      db 0x00 ; padding
04206A             0042    
04206A             0043    ; APPLICATION INCLUDES
04206A             0044        include "collisions.inc"
04206A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042100             0002*   ; ====== COLLISION DETECTION ======
042100             0003*   ; --- constants ---
042100             0004*   ; sprite_collisions flags
042100             0005*   collides_with_player: equ %00000001
042100             0006*   collides_with_laser: equ %00000010
042100             0007*   sprite_alive: equ 6 ; set when sprite is alive
042100             0008*   sprite_just_died: equ 7 ; set when sprite just died
042100             0009*   
042100             0010*   collide_top: equ %00001000
042100             0011*   collide_bottom: equ %00000100
042100             0012*   collide_left: equ %00000010
042100             0013*   collide_right: equ %00000001
042100             0014*   
042100             0015*   ; this routine detects collisions between two collidable objects,
042100             0016*   ; which can include sprites, active tiles, or any screen coordinate
042100             0017*   ; which has been set up with a sprite table structure that includes dim_x
042100             0018*   ; representing the radius of the collidable object
042100             0019*   ; inputs: ix and iy point to the colliding objects' sprite table records
042100             0020*   ; outputs: uh.l = distance - sum of radii
042100             0021*   ;          zero flag set or sign flag negative if collision detected
042100             0022*   ;          dx168 and dy168 are also populated with the signed displacements
042100             0023*   ; destroys: everything except indexes
042100             0024*   check_collision:
042100             0025*   ; compute dx = x1-x0
042100 DD 27 01    0026*       ld hl,(ix+sprite_x)
042103 FD 17 01    0027*       ld de,(iy+sprite_x)
042106 AF          0028*       xor a ; clear carry
042107 ED 52       0029*       sbc hl,de
042109 22 18 0C 04 0030*       ld (dx168),hl ; dx to scratch
04210D             0031*   ; compute dy = y1-y0
04210D DD 27 04    0032*       ld hl,(ix+sprite_y)
042110 FD 17 04    0033*       ld de,(iy+sprite_y)
042113 AF          0034*       xor a ; clear carry
042114 ED 52       0035*       sbc hl,de ; hl = dy
042116 22 1E 0C 04 0036*       ld (dy168),hl ; dy to scratch
04211A             0037*   ; compute euclidean distance between centers
04211A CD 24 0C 04 0038*       call distance168 ; uh.l = distance
04211E             0039*   ; check for overlap by summing half the radii
04211E DD 7E 1E    0040*       ld a,(ix+sprite_dim_x)
042121 CB 3F       0041*       srl a ; divide by 2
042123 FD 5E 1E    0042*       ld e,(iy+sprite_dim_x)
042126 CB 3B       0043*       srl e ; divide by 2
042128 83          0044*       add a,e
042129 11 00 00 00 0045*       ld de,0 ; clear deu and e
04212D 57          0046*       ld d,a ; ud.e = sum of radii
04212E B7          0047*       or a ; clear carry
04212F ED 52       0048*       sbc hl,de ; uh.l = distance - sum of radii
042131 C9          0049*       ret
042132             0050*   ; end check_collision
042132             0045        include "enemies.inc"
042132 04          0001*   max_enemy_sprites: db 4
042133             0002*   
042133             0003*   ; sprite_type
042133             0004*   enemy_dead: equ 0
042133             0005*   enemy_air: equ 1
042133             0006*   enemy_ground: equ 2
042133             0007*   enemy_projectile: equ 3
042133             0008*   explosion: equ 255
042133             0009*   move_enemies:
042133             0010*   ; are there any active enemies or explosions?
042133 3A 93 5C 04 0011*       ld a,(table_active_sprites)
042137 A7          0012*       and a ; will be zero if no alive enemies or explosions
042138 C2 3D 21 04 0013*       jp nz,@they_live
04213C             0014*       ; DEPRECATED: though may be used in the future
04213C             0015*       ; ld hl,enemies_dead
04213C             0016*       ; ld (enemies_state),hl
04213C             0017*       ; END DEPRECATED
04213C C9          0018*       ret
04213D             0019*   @they_live:
04213D             0020*   ; initialize pointers and loop counter
04213D FD 21 00 5A 0021*       ld iy,table_base ; set iy to first record in table
       04          
042142 06 10       0022*       ld b,table_max_records ; loop counter
042144             0023*   @move_loop:
042144 FD 22 90 5C 0024*       ld (table_pointer),iy ; update table pointer
       04          
042149 C5          0025*       push bc ; backup loop counter
04214A             0026*   ; check top bit of sprite_type to see if sprite is just spawned
04214A FD 7E 16    0027*       ld a,(iy+sprite_type)
04214D CB 7F       0028*       bit 7,a
04214F C2 8E 21 04 0029*       jp nz,@next_record ; if just spawned, skip to next record
042153             0030*   ; check sprite_type to see if sprite is active
042153 A7          0031*       and a ; if zero, sprite is dead
042154 CA 8E 21 04 0032*       jp z,@next_record ; ... and we skip to next record
042158             0033*   ; otherwise we prepare to move the sprite
042158 FD 27 1A    0034*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04215B             0035*       callHL
04215B 01 61 21 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04215F C5          0002*M1     push bc ; which constitutes the return address
042160 E9          0003*M1     jp (hl) ; Jump to the address in HL
042161             0004*M1 @@:
042161             0036*   ; move_enemies_loop_return: return from behavior subroutines
042161 FD 2A 90 5C 0037*       ld iy,(table_pointer) ; get back table pointer
       04          
042166             0038*   ; now we check results of all the moves
042166 FD CB 1D 7E 0039*       bit sprite_just_died,(iy+sprite_collisions)
04216A CA 76 21 04 0040*       jp z,@draw_sprite ; if not dead, draw sprite
04216E CD EC 5C 04 0041*       call table_deactivate_sprite
042172 C3 8E 21 04 0042*       jp @next_record ; and to the next record
042176             0043*   @draw_sprite:
042176 FD 7E 00    0044*       ld a,(iy+sprite_id) ; get spriteId
042179 CD 00 1F 04 0045*       call vdu_sprite_select ; select sprite
04217D FD 7E 28    0046*       ld a,(iy+sprite_frame)
042180 CD 63 1F 04 0047*       call vdu_sprite_select_frame
042184 FD 07 01    0048*       ld bc,(iy+sprite_x)
042187 FD 17 04    0049*       ld de,(iy+sprite_y)
04218A CD CC 1F 04 0050*       call vdu_sprite_move_abs168
04218E             0051*   ; fall through to @next_record
04218E             0052*   @next_record:
04218E ED 33 29    0053*       lea iy,iy+table_bytes_per_record
042191 AF          0054*       xor a ; clears carry flag
042192 32 94 5C 04 0055*       ld (sprite_screen_edge),a ; clear screen edge collision flag
042196 C1          0056*       pop bc ; get back our loop counter
042197 10 AB       0057*       djnz @move_loop ; loop until we've checked all the records
042199             0058*   ; reset all just spawned flags
042199 FD 21 00 5A 0059*       ld iy,table_base
       04          
04219E 06 10       0060*       ld b,table_max_records
0421A0             0061*   @reset_just_spawned:
0421A0 C5          0062*       push bc ; back up loop counter
0421A1 FD CB 16 7E 0063*       bit 7,(iy+sprite_type) ; check if just spawned
0421A5 CA D8 21 04 0064*       jp z,@F
0421A9 FD CB 16 BE 0065*       res 7,(iy+sprite_type) ; clear just spawned flag
0421AD FD 7E 00    0066*       ld a,(iy+sprite_id)
0421B0 CD 00 1F 04 0067*       call vdu_sprite_select
0421B4 FD 27 17    0068*       ld hl,(iy+sprite_base_bufferId)
0421B7 FD 46 21    0069*       ld b,(iy+sprite_num_animations)
0421BA FD 4E 20    0070*       ld c,(iy+sprite_num_orientations)
0421BD ED 4C       0071*       mlt bc ; bc total frames
0421BF CD 6F 5E 04 0072*       call sprite_load_frames
0421C3 FD 7E 28    0073*       ld a,(iy+sprite_frame)
0421C6 CD 63 1F 04 0074*       call vdu_sprite_select_frame
0421CA FD 07 01    0075*       ld bc,(iy+sprite_x)
0421CD FD 17 04    0076*       ld de,(iy+sprite_y)
0421D0 CD CC 1F 04 0077*       call vdu_sprite_move_abs168
0421D4 CD 76 1F 04 0078*       call vdu_sprite_show
0421D8             0079*   @@:
0421D8 ED 33 29    0080*       lea iy,iy+table_bytes_per_record
0421DB C1          0081*       pop bc ; get back loop counter
0421DC 10 C2       0082*       djnz @reset_just_spawned
0421DE             0083*   ; and done
0421DE C9          0084*       ret
0421DF             0085*   
0421DF             0086*   ; ; ######### SPRITE BEHAVIOR ROUTINES #########
0421DF             0087*   ; ; each sprite in the table must have one of these defined
0421DF             0088*   ; ; but they need not be unique to a particular sprite
0421DF             0089*   ; ; these are jumped to from move_enemies_do_program,but could come from other places
0421DF             0090*   ; ; and have the option but not obligation to go back to move_enemies_loop_return
0421DF             0091*   ; ; but they can call anything they want between those two endpoints
0421DF             0092*   ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
0421DF             0093*   
0421DF             0094*   ; move_nop: ; does nothing but burn a few cycles changing the PC
0421DF             0095*   ;     ret
0421DF             0096*   
0421DF             0097*   ; move_explosion:
0421DF             0098*   ;     call animate_explosion
0421DF             0099*   ;     ret
0421DF             0100*   
0421DF             0101*   check_enemy_collisions:
0421DF             0102*   ; check what we collide with
0421DF FD 7E 1D    0103*       ld a,(iy+sprite_collisions)
0421E2 F5          0104*       push af ; save collision flags
0421E3 E6 01       0105*       and collides_with_player ; check for collisions with player
0421E5 C4 12 22 04 0106*       call nz,check_enemy_collision_player
0421E9 F1          0107*       pop af ; restore collision flags
0421EA E6 02       0108*       and collides_with_laser ; check for collisions with laser
0421EC C4 F1 21 04 0109*       call nz,check_enemy_collision_laser
0421F0 C9          0110*       ret
0421F1             0111*   check_enemy_collision_laser: ; check for collisions with laser
0421F1 DD 21 00 54 0112*       ld ix,laser_start_variables
       04          
0421F6 DD CB 1D 76 0113*       bit sprite_alive,(ix+sprite_collisions)
0421FA C8          0114*       ret z ; laser dead, nothing to do
0421FB CD 00 21 04 0115*       call check_collision
0421FF F0          0116*       ret p ; no collision
042200 DD 21 00 54 0117*       ld ix,laser_start_variables
       04          
042205 DD CB 1D FE 0118*       set sprite_just_died,(ix+sprite_collisions)
042209 DD CB 1D F6 0119*       set sprite_alive,(ix+sprite_collisions)
04220D CD 26 22 04 0120*       call enemy_kill
042211 C9          0121*       ret
042212             0122*   check_enemy_collision_player: ; check for collisions with player
042212 DD 21 0A 58 0123*       ld ix,player_start_variables
       04          
042217 DD CB 1D 76 0124*       bit sprite_alive,(ix+sprite_collisions)
04221B C8          0125*       ret z ; player dead, no collision
04221C CD 00 21 04 0126*       call check_collision
042220 F0          0127*       ret p ; no collision
042221 CD 26 22 04 0128*       call enemy_kill
042225 C9          0129*       ret
042226             0130*   ; end check_enemy_collisions
042226             0131*   
042226             0132*   ; move_fireballs:
042226             0133*   ;     call move_sprite ; move sprite
042226             0134*   ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
042226             0135*   ;     and a ; if zero we're still within screen bounds
042226             0136*   ;     jp z,move_fireballs_alive
042226             0137*   ; ; otherwise kill sprite
042226             0138*   ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
042226             0139*   ;     ld (iy+sprite_collisions),a
042226             0140*   ;     ret
042226             0141*   ; move_fireballs_alive:
042226             0142*   ;     ld a,(sprite_animation_timer)
042226             0143*   ;     dec a
042226             0144*   ;     ld (sprite_animation_timer),a
042226             0145*   ;     jp nz,move_fireballs_draw
042226             0146*   ;     ld a,(sprite_animation)
042226             0147*   ;     xor %1
042226             0148*   ;     ld (sprite_animation),a
042226             0149*   ;     ld a,6 ; 1/10th of a second timer
042226             0150*   ;     ld (sprite_animation_timer),a
042226             0151*   ;     ; fall through
042226             0152*   
042226             0153*   ; move_fireballs_draw:
042226             0154*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
042226             0155*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
042226             0156*   ;     call check_collisions
042226             0157*   ;     ret
042226             0158*   
042226             0159*   ; this routine vanquishes the enemy sprite
042226             0160*   ; and replaces it with an animated explosion
042226             0161*   ; we jump here instead of call because
042226             0162*   ; we want to return to differing locations in the loop
042226             0163*   ; depending on whether we're still sploding
042226             0164*   ; destroys: everything except index registers
042226             0165*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
042226             0166*   enemy_kill:
042226 FD 2A 90 5C 0167*       ld iy,(table_pointer)
       04          
04222B             0168*   ; tally up points
04222B 2A 00 58 04 0169*       ld hl,(player_score)
04222F 01 00 00 00 0170*       ld bc,0 ; clear bcu
042233 FD 4E 26    0171*       ld c,(iy+sprite_points)
042236 09          0172*       add hl,bc
042237 22 00 58 04 0173*       ld (player_score),hl
04223B             0174*   ; ; initialize explosion
04223B             0175*   ; init_explosion:
04223B             0176*   ;     ld hl,explosion
04223B             0177*   ;     ld (sprite_base_bufferId),hl
04223B             0178*   ;     ld hl,move_explosion
04223B             0179*   ;     ld (sprite_move_program),hl
04223B             0180*   ;     ld a,%00000000 ; collides with nothing
04223B             0181*   ;     ld (iy+sprite_collisions),a
04223B             0182*   ;     ld hl,0 ; north
04223B             0183*   ;     ld (sprite_heading),hl
04223B             0184*   ;     ld a,0x04 ; will decrement to 03
04223B             0185*   ;     ld (sprite_animation),a
04223B             0186*   ;     ld a,0x07 ; 7/60th of a second timer
04223B             0187*   ;     ld (sprite_animation_timer),a
04223B             0188*   ;     xor a
04223B             0189*   ;     ld (sprite_move_timer),a
04223B             0190*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04223B             0191*   ; ; fall through to next_explosion
04223B             0192*   ; next_explosion:
04223B             0193*   ;     ld a,(sprite_animation)
04223B             0194*   ;     dec a ; if rolled negative from zero,we're done sploding
04223B             0195*   ;     jp m,done_explosion
04223B             0196*   ;     ld (sprite_animation),a
04223B             0197*   ;     ld a,0x7 ; 7/60th of a second timer
04223B             0198*   ;     ld (sprite_animation_timer),a
04223B             0199*   ; ; fall through to animate_explosion
04223B             0200*   ; animate_explosion:
04223B             0201*   ;     ld hl,sprite_y+1
04223B             0202*   ;     inc (hl) ; move explosion down 1 pixel
04223B             0203*   ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
04223B             0204*   ;     ld hl,sprite_animation_timer
04223B             0205*   ;     dec (hl) ; if timer is zero,we do next animation
04223B             0206*   ;     jp z,next_explosion
04223B             0207*   ;     ;otherwise we fall through to draw the current one
04223B             0208*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04223B             0209*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
04223B             0210*   ;     ret ; now we go back to caller
04223B             0211*   ; done_explosion:
04223B FD CB 1D FE 0212*       set sprite_just_died,(iy+sprite_collisions)
04223F 3E FF       0213*       ld a,-1 ; return -1 to indicate enemy died
042241 C9          0214*       ret ; now we go back to caller
042242             0215*   ; end enemy_kill
042242             0046        include "enemy_fireball.inc"
042242 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042300             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042300             0003*   
042300             0004*   fireball_defaults:
042300 03          0005*       db enemy_projectile        ; type
042301 06 01 00    0006*       dl BUF_FIREBALL_A	    ; base_bufferId
042304 51 23 04    0007*       dl move_enemy_fireball	; move_program
042307 03          0008*       db collides_with_laser | collides_with_player ; collisions
042308 07          0009*       db 7	                ; dim_x
042309 07          0010*       db 7                    ; dim_y
04230A 01          0011*       db 1                    ; num_orientations
04230B 01          0012*       db 1                    ; num_animations
04230C 00          0013*       db 0	                ; animation
04230D 00          0014*       db 0	                ; animation_timer
04230E 01          0015*       db 1	                ; move_timer
04230F 00          0016*       db 0	                ; move_step
042310 14          0017*       db 20	                ; points
042311 05          0018*       db 5	                ; shield_damage
042312 00          0019*       db 0                    ; animation_frame
042313             0020*   
042313             0021*   enemy_spawn_fireball:
042313 21 00 23 04 0022*       ld hl,fireball_defaults
042317 CD 31 5E 04 0023*       call spawn_sprite_from_sprite
04231B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04231C             0025*   ; other specific initialization
04231C             0026*   ; ------------------------------------------------
04231C             0027*   ; center the fireball on the turret
04231C 11 80 01 00 0028*       ld de,3*128 ; half the fireball size
042320 FD 27 01    0029*       ld hl,(iy+sprite_x)
042323 19          0030*       add hl,de
042324 DD 2F 01    0031*       ld (ix+sprite_x),hl
042327 FD 27 04    0032*       ld hl,(iy+sprite_y)
04232A 19          0033*       add hl,de
04232B DD 2F 04    0034*       ld (ix+sprite_y),hl
04232E             0035*   ; copy component velocities from targeting_computer
04232E 2A 34 63 04 0036*       ld hl,(Vp_x)
042332 DD 2F 07    0037*       ld (ix+sprite_xvel),hl
042335 2A 37 63 04 0038*       ld hl,(Vp_y)
042339 DD 2F 0A    0039*       ld (ix+sprite_yvel),hl
04233C             0040*   ; move projectile one frame's distance so it isn't drawn right over turret
04233C DD 27 01    0041*       ld hl,(ix+sprite_x)
04233F DD 17 07    0042*       ld de,(ix+sprite_xvel)
042342 19          0043*       add hl,de
042343 DD 2F 01    0044*       ld (ix+sprite_x),hl
042346 DD 27 04    0045*       ld hl,(ix+sprite_y)
042349 DD 17 0A    0046*       ld de,(ix+sprite_yvel)
04234C 19          0047*       add hl,de
04234D DD 2F 04    0048*       ld (ix+sprite_y),hl
042350 C9          0049*       ret
042351             0050*   ; end enemy_spawn_fireball
042351             0051*   
042351             0052*   move_enemy_fireball:
042351             0053*   ; run the movement program for the fireball enemy
042351 CD 5B 5D 04 0054*       call move_sprite
042355 B7          0055*       or a ; a will be non-zero if have scrolled off screen
042356 C2 EC 5C 04 0056*       jp nz,table_deactivate_sprite
04235A C9          0057*       ret
04235B             0058*   ; end move_enemy_fireball
04235B             0047        include "enemy_seeker.inc"
04235B FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042400             0002*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042400             0003*   
042400             0004*   seeker_defaults:
042400 01          0005*       db enemy_air         ; type
042401 0B 01 00    0006*       dl BUF_SEEKER_000	    ; base_bufferId
042404 24 24 04    0007*       dl move_enemy_seeker	; move_program
042407 03          0008*       db collides_with_laser | collides_with_player ; collisions
042408 10          0009*       db 16	                ; dim_x
042409 10          0010*       db 16                   ; dim_y
04240A 20          0011*       db 32                   ; num_orientations
04240B 01          0012*       db 1                    ; num_animations
04240C 00          0013*       db 0	                ; animation
04240D 00          0014*       db 0	                ; animation_timer
04240E 01          0015*       db 1	                ; move_timer
04240F 00          0016*       db 0	                ; move_step
042410 0A          0017*       db 10	                ; points
042411 02          0018*       db 2	                ; shield_damage
042412 00          0019*       db 0                    ; animation_frame
042413             0020*   
042413             0021*   enemy_spawn_seeker:
042413 21 00 24 04 0022*       ld hl,seeker_defaults
042417 CD 31 5E 04 0023*       call spawn_sprite_from_sprite
04241B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04241C             0025*   ; other specific initialization
04241C 21 80 02 00 0026*       ld hl,speed_seeker
042420 DD 2F 0D    0027*       ld (ix+sprite_vel),hl
042423 C9          0028*       ret
042424             0029*   ; end enemy_spawn_seeker
042424             0030*   
042424             0031*   move_enemy_seeker:
042424             0032*   ; run the movement program for the seeker enemy
042424 CD 29 24 04 0033*       call en_nav_seek_zag
042428 C9          0034*       ret
042429             0035*   ; end move_enemy_seeker
042429             0036*   
042429             0037*   ; contains the logic for how to move the enemy
042429             0038*   ; and then does the moving
042429             0039*   ; inputs: a fully-populated active sprite table
042429             0040*   ;         player position variables
042429             0041*   ; destroys: everything except index registers
042429             0042*   ; outputs: moving enemies
042429             0043*   en_nav_seek_zag:
042429             0044*   ; set velocity and orientation by player's relative location
042429             0045*   ; move enemies y-axis
042429             0046*   ; where is player relative to us?
042429 CD 00 63 04 0047*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
04242D             0048*   ; is player above or below us?
04242D ED 53 55 06 0049*       ld (ude),de ; dy
       04          
042432 3A 57 06 04 0050*       ld a,(ude+2) ; deu
042436 17          0051*       rla ; shift sign bit into carry
042437 D2 5A 24 04 0052*       jp nc,@zig_zag ; player is below,evade
04243B             0053*   ; player is even or above,so home in on current heading
04243B FD 2F 10    0054*       ld (iy+sprite_heading),hl ; save sprite heading
04243E             0055*   ; fall through to @compute_velocities
04243E             0056*   @compute_velocities:
04243E CD FC 5D 04 0057*       call sprite_compute_velocities
042442             0058*   ; change the animation frame to match heading
042442 CD 62 5E 04 0059*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
042446 C3 5B 5D 04 0060*       jp move_sprite ; will return to caller from there
04244A             0061*   @zig_zag_start:
04244A FD 2A 90 5C 0062*       ld iy,(table_pointer)
       04          
04244F CD AE 09 04 0063*       call rand_8
042453 E6 3F       0064*       and %00111111 ; limit it to 64
042455 CB DF       0065*       set 3,a ; make sure it's at least 8
042457 FD 77 24    0066*       ld (iy+sprite_move_timer),a ; store it
04245A             0067*       ; fall through to @zig_zag
04245A             0068*   @zig_zag:
04245A FD 7E 24    0069*       ld a,(iy+sprite_move_timer)
04245D 3D          0070*       dec a
04245E FD 77 24    0071*       ld (iy+sprite_move_timer),a
042461 C2 87 24 04 0072*       jp nz,@zig_zag_no_switch
042465             0073*       ; otherwise flip direction and restart timer
042465 FD 7E 25    0074*       ld a,(iy+sprite_move_step)
042468 EE 01       0075*       xor %1 ; flips bit zero
04246A FD 77 25    0076*       ld (iy+sprite_move_step),a ; store it
04246D C2 7C 24 04 0077*       jp nz,@F ; zag right
042471             0078*   ;otherwise zag left
042471 21 00 A0 00 0079*       ld hl,160*256; southwest heading
042475 FD 2F 10    0080*       ld (iy+sprite_heading),hl ; save sprite heading
042478 C3 4A 24 04 0081*       jp @zig_zag_start
04247C             0082*   @@: ; zag right
04247C 21 00 60 00 0083*       ld hl,96*256; southeast heading
042480 FD 2F 10    0084*       ld (iy+sprite_heading),hl ; save sprite heading
042483 C3 4A 24 04 0085*       jp @zig_zag_start
042487             0086*   @zig_zag_no_switch:
042487             0087*       ; ld a,(sprite_orientation)
042487 FD 27 10    0088*       ld hl,(iy+sprite_heading)
04248A C3 3E 24 04 0089*       jp @compute_velocities
04248E             0090*   ; end en_nav_seek_zag
04248E             0048        include "fonts_list.inc"
04248E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042500             0002*   
042500             0003*   ; Generated by asm_config_editor.py
042500             0004*   font_list_record_size: equ 12
042500             0005*   font_list_width: equ 0
042500             0006*   font_list_height: equ 3
042500             0007*   font_list_bufferId: equ 6
042500             0008*   font_list_filename: equ 9
042500             0009*   
042500             0010*   num_fonts: equ 18
042500             0011*   
042500             0012*   ; Index list:
042500             0013*   amiga_forever_16x24: equ 64000
042500             0014*   amiga_forever_8x16: equ 64001
042500             0015*   amiga_forever_8x8: equ 64002
042500             0016*   computer_pixel_7_10x15: equ 64003
042500             0017*   computer_pixel_7_10x24: equ 64004
042500             0018*   computer_pixel_7_8x16: equ 64005
042500             0019*   Lat2_Terminus12x6_6x12: equ 64006
042500             0020*   Lat2_TerminusBold14_8x14: equ 64007
042500             0021*   Lat2_VGA14_8x14: equ 64008
042500             0022*   Lat2_VGA16_8x16: equ 64009
042500             0023*   Lat2_VGA8_8x8: equ 64010
042500             0024*   Lat7_Fixed13_8x13: equ 64011
042500             0025*   Lat7_Terminus12x6_6x12: equ 64012
042500             0026*   Lat7_TerminusBold16_8x16: equ 64013
042500             0027*   Lat7_VGA14_8x14: equ 64014
042500             0028*   Lat7_VGA8x8: equ 64015
042500             0029*   scriptorium_12x14: equ 64016
042500             0030*   Squarewave_Bold_8x12: equ 64017
042500             0031*   
042500             0032*   font_list: ; width; height; bufferId; filename;:
042500 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 25 04 
04250C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 25 04 
042518 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 26 04 
042524 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 26 04 
042530 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 26 04 
04253C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 26 04 
042548 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 26 04 
042554 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 26 04 
042560 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 26 04 
04256C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 26 04 
042578 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 27 04 
042584 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 27 04 
042590 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 27 04 
04259C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 27 04 
0425A8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 27 04 
0425B4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 27 04 
0425C0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 27 04 
0425CC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 27 04 
0425D8             0051*   
0425D8             0052*   ; files_list: ; filename:
0425D8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
0425F7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042615 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042632 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042654 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042676 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042697 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
0426B9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
0426DD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0426F8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042713 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
04272C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042749 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
04276B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
04278F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0427AA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0427C3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
0427E0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042800             0049        include "images_tiles_dg.inc"
042800             0001*   ; Generated by tiles_dg.py
042800             0002*   
042800             0003*   tiles_dg_num_images: equ 184
042800             0004*   
042800             0005*   ; bufferIds:
042800             0006*   
042800             0007*   
042800             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042800 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 34 04 00 
       02 00       
042812 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 35 04 01 
       02 00       
042824 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 35 04 02 
       02 00       
042836 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 35 04 03 
       02 00       
042848 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 35 04 04 
       02 00       
04285A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 35 04 05 
       02 00       
04286C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 35 04 06 
       02 00       
04287E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 35 04 07 
       02 00       
042890 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 35 04 08 
       02 00       
0428A2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 35 04 09 
       02 00       
0428B4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 35 04 0A 
       02 00       
0428C6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 35 04 0B 
       02 00       
0428D8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 35 04 0C 
       02 00       
0428EA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 36 04 0D 
       02 00       
0428FC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 36 04 0E 
       02 00       
04290E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 36 04 0F 
       02 00       
042920 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 36 04 10 
       02 00       
042932 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 36 04 19 
       02 00       
042944 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 36 04 1A 
       02 00       
042956 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 36 04 1B 
       02 00       
042968 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 36 04 1C 
       02 00       
04297A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 36 04 1D 
       02 00       
04298C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 36 04 1E 
       02 00       
04299E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 36 04 1F 
       02 00       
0429B0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 36 04 20 
       02 00       
0429C2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 36 04 21 
       02 00       
0429D4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 37 04 22 
       02 00       
0429E6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 37 04 23 
       02 00       
0429F8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 37 04 24 
       02 00       
042A0A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 37 04 25 
       02 00       
042A1C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 37 04 26 
       02 00       
042A2E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 37 04 27 
       02 00       
042A40 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 37 04 28 
       02 00       
042A52 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 37 04 31 
       02 00       
042A64 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 37 04 32 
       02 00       
042A76 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 37 04 33 
       02 00       
042A88 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 37 04 34 
       02 00       
042A9A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 37 04 35 
       02 00       
042AAC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 38 04 36 
       02 00       
042ABE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 38 04 37 
       02 00       
042AD0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 38 04 38 
       02 00       
042AE2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 38 04 39 
       02 00       
042AF4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 38 04 3A 
       02 00       
042B06 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 38 04 3B 
       02 00       
042B18 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 38 04 41 
       02 00       
042B2A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 38 04 42 
       02 00       
042B3C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 38 04 43 
       02 00       
042B4E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 38 04 44 
       02 00       
042B60 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 38 04 45 
       02 00       
042B72 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 38 04 46 
       02 00       
042B84 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 39 04 47 
       02 00       
042B96 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 39 04 48 
       02 00       
042BA8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 39 04 49 
       02 00       
042BBA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 39 04 4A 
       02 00       
042BCC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 39 04 4B 
       02 00       
042BDE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 39 04 51 
       02 00       
042BF0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 39 04 52 
       02 00       
042C02 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 39 04 53 
       02 00       
042C14 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 39 04 54 
       02 00       
042C26 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 39 04 55 
       02 00       
042C38 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 39 04 56 
       02 00       
042C4A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 39 04 57 
       02 00       
042C5C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 3A 04 58 
       02 00       
042C6E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 3A 04 59 
       02 00       
042C80 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 3A 04 5A 
       02 00       
042C92 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 3A 04 5B 
       02 00       
042CA4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 3A 04 61 
       02 00       
042CB6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 3A 04 62 
       02 00       
042CC8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 3A 04 63 
       02 00       
042CDA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 3A 04 64 
       02 00       
042CEC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 3A 04 65 
       02 00       
042CFE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 3A 04 66 
       02 00       
042D10 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 3A 04 67 
       02 00       
042D22 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 3A 04 68 
       02 00       
042D34 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 3B 04 69 
       02 00       
042D46 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 3B 04 6A 
       02 00       
042D58 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 3B 04 6B 
       02 00       
042D6A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 3B 04 6C 
       02 00       
042D7C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 3B 04 71 
       02 00       
042D8E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 3B 04 72 
       02 00       
042DA0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 3B 04 73 
       02 00       
042DB2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 3B 04 74 
       02 00       
042DC4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 3B 04 75 
       02 00       
042DD6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 3B 04 76 
       02 00       
042DE8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 3B 04 77 
       02 00       
042DFA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 3B 04 78 
       02 00       
042E0C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 3B 04 79 
       02 00       
042E1E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 3C 04 7A 
       02 00       
042E30 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 3C 04 7B 
       02 00       
042E42 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 3C 04 81 
       02 00       
042E54 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 3C 04 82 
       02 00       
042E66 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 3C 04 83 
       02 00       
042E78 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 3C 04 84 
       02 00       
042E8A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 3C 04 85 
       02 00       
042E9C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 3C 04 86 
       02 00       
042EAE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 3C 04 87 
       02 00       
042EC0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 3C 04 88 
       02 00       
042ED2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 3C 04 89 
       02 00       
042EE4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 3C 04 8A 
       02 00       
042EF6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 3D 04 8B 
       02 00       
042F08 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 3D 04 8C 
       02 00       
042F1A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 3D 04 8D 
       02 00       
042F2C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 3D 04 8E 
       02 00       
042F3E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 3D 04 91 
       02 00       
042F50 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 3D 04 92 
       02 00       
042F62 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 3D 04 93 
       02 00       
042F74 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 3D 04 94 
       02 00       
042F86 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 3D 04 95 
       02 00       
042F98 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 3D 04 96 
       02 00       
042FAA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 3D 04 97 
       02 00       
042FBC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 3D 04 98 
       02 00       
042FCE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 3E 04 99 
       02 00       
042FE0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 3E 04 9A 
       02 00       
042FF2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 3E 04 9B 
       02 00       
043004 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 3E 04 9C 
       02 00       
043016 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 3E 04 9D 
       02 00       
043028 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 3E 04 9E 
       02 00       
04303A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 3E 04 A1 
       02 00       
04304C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 3E 04 A2 
       02 00       
04305E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 3E 04 A3 
       02 00       
043070 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 3E 04 A4 
       02 00       
043082 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 3E 04 A5 
       02 00       
043094 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 3E 04 A6 
       02 00       
0430A6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 3F 04 A7 
       02 00       
0430B8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 3F 04 A8 
       02 00       
0430CA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 3F 04 A9 
       02 00       
0430DC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 3F 04 AA 
       02 00       
0430EE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 3F 04 AB 
       02 00       
043100 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 3F 04 AC 
       02 00       
043112 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 3F 04 B1 
       02 00       
043124 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 3F 04 B2 
       02 00       
043136 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 3F 04 B3 
       02 00       
043148 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 3F 04 B4 
       02 00       
04315A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 3F 04 B5 
       02 00       
04316C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 3F 04 B6 
       02 00       
04317E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 40 04 B7 
       02 00       
043190 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 40 04 B8 
       02 00       
0431A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 40 04 B9 
       02 00       
0431B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 40 04 BA 
       02 00       
0431C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 40 04 BB 
       02 00       
0431D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 40 04 BC 
       02 00       
0431EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 40 04 C1 
       02 00       
0431FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 40 04 C2 
       02 00       
04320E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 40 04 C3 
       02 00       
043220 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 40 04 C4 
       02 00       
043232 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 40 04 C5 
       02 00       
043244 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 40 04 C6 
       02 00       
043256 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 40 04 C7 
       02 00       
043268 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 41 04 C8 
       02 00       
04327A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 41 04 C9 
       02 00       
04328C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 41 04 CA 
       02 00       
04329E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 41 04 CB 
       02 00       
0432B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 41 04 CC 
       02 00       
0432C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 41 04 D1 
       02 00       
0432D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 41 04 D2 
       02 00       
0432E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 41 04 D3 
       02 00       
0432F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 41 04 D4 
       02 00       
04330A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 41 04 D5 
       02 00       
04331C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 41 04 D6 
       02 00       
04332E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 41 04 D7 
       02 00       
043340 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 42 04 D8 
       02 00       
043352 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 42 04 D9 
       02 00       
043364 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 42 04 DA 
       02 00       
043376 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 42 04 DB 
       02 00       
043388 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 42 04 DC 
       02 00       
04339A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 42 04 E1 
       02 00       
0433AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 42 04 E2 
       02 00       
0433BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 42 04 E3 
       02 00       
0433D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 42 04 E4 
       02 00       
0433E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 42 04 E5 
       02 00       
0433F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 42 04 E6 
       02 00       
043406 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 42 04 E7 
       02 00       
043418 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 43 04 E8 
       02 00       
04342A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 43 04 E9 
       02 00       
04343C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 43 04 EA 
       02 00       
04344E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 43 04 EB 
       02 00       
043460 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 43 04 EC 
       02 00       
043472 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 43 04 F1 
       02 00       
043484 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 43 04 F2 
       02 00       
043496 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 43 04 F3 
       02 00       
0434A8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 43 04 F5 
       02 00       
0434BA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 43 04 F6 
       02 00       
0434CC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 43 04 F7 
       02 00       
0434DE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 43 04 F8 
       02 00       
0434F0             0193*   
0434F0             0194*   tiles_dg_files_list: ; filename:
0434F0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043505 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04351A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04352F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043544 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043559 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04356E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043583 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043598 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0435AD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0435C2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0435D7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0435EC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043601 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043616 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
04362B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043640 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043655 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
04366A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
04367F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043694 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
0436A9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
0436BE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
0436D3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
0436E8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0436FD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043712 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043727 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04373C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043751 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043766 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04377B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043790 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0437A5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0437BA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0437CF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
0437E4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
0437F9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
04380E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043823 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043838 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04384D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043862 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043877 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04388C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
0438A1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
0438B6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0438CB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0438E0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0438F5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04390A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
04391F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043934 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043949 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
04395E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043973 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043988 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04399D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0439B2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0439C7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0439DC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0439F1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043A06 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043A1B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043A30 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043A45 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043A5A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043A6F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043A84 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043A99 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043AAE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043AC3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043AD8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043AED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043B02 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043B17 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043B2C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043B41 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043B56 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043B6B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043B80 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043B95 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043BAA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043BBF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043BD4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043BE9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043BFE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043C13 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043C28 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043C3D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043C52 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043C67 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043C7C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043C91 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043CA6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043CBB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043CD0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043CE5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043CFA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043D0F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043D24 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043D39 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
043D4E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
043D63 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043D78 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043D8D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043DA2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043DB7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043DCC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043DE1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043DF6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043E0B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043E20 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043E35 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043E4A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043E5F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
043E74 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043E89 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043E9E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043EB3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043EC8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043EDD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043EF2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043F07 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043F1C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043F31 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043F46 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043F5B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043F70 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043F85 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043F9A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043FAF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043FC4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043FD9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043FEE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044003 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044018 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04402D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044042 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044057 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04406C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044081 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044096 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0440AB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0440C0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0440D5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0440EA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0440FF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044114 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044129 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04413E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044153 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044168 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04417D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044192 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0441A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0441BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0441D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0441E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0441FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044210 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044225 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04423A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04424F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044264 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044279 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04428E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0442A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0442B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0442CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0442E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0442F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04430C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044321 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044336 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04434B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044360 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044375 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04438A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04439F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0443B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0443C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0443DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0443F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044408             0050        ; include "images_tiles_xevious.inc"
044408             0051        include "images_sprites.inc"
044408 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
044500             0002*   
044500             0003*   ; Generated by make_images.py
044500             0004*   
044500             0005*   sprites_num_images: equ 79
044500             0006*   
044500             0007*   ; buffer_ids:
044500             0008*   BUF_CRATER: equ 256
044500             0009*   BUF_EXPLOSION_A: equ 257
044500             0010*   BUF_EXPLOSION_B: equ 258
044500             0011*   BUF_EXPLOSION_C: equ 259
044500             0012*   BUF_EXPLOSION_D: equ 260
044500             0013*   BUF_EXPLOSION_E: equ 261
044500             0014*   BUF_FIREBALL_A: equ 262
044500             0015*   BUF_FIREBALL_B: equ 263
044500             0016*   BUF_LASER_A: equ 264
044500             0017*   BUF_LASER_B: equ 265
044500             0018*   BUF_PAD: equ 266
044500             0019*   BUF_SEEKER_000: equ 267
044500             0020*   BUF_SEEKER_008: equ 268
044500             0021*   BUF_SEEKER_016: equ 269
044500             0022*   BUF_SEEKER_024: equ 270
044500             0023*   BUF_SEEKER_032: equ 271
044500             0024*   BUF_SEEKER_040: equ 272
044500             0025*   BUF_SEEKER_048: equ 273
044500             0026*   BUF_SEEKER_056: equ 274
044500             0027*   BUF_SEEKER_064: equ 275
044500             0028*   BUF_SEEKER_072: equ 276
044500             0029*   BUF_SEEKER_080: equ 277
044500             0030*   BUF_SEEKER_088: equ 278
044500             0031*   BUF_SEEKER_096: equ 279
044500             0032*   BUF_SEEKER_104: equ 280
044500             0033*   BUF_SEEKER_112: equ 281
044500             0034*   BUF_SEEKER_120: equ 282
044500             0035*   BUF_SEEKER_128: equ 283
044500             0036*   BUF_SEEKER_136: equ 284
044500             0037*   BUF_SEEKER_144: equ 285
044500             0038*   BUF_SEEKER_152: equ 286
044500             0039*   BUF_SEEKER_160: equ 287
044500             0040*   BUF_SEEKER_168: equ 288
044500             0041*   BUF_SEEKER_176: equ 289
044500             0042*   BUF_SEEKER_184: equ 290
044500             0043*   BUF_SEEKER_192: equ 291
044500             0044*   BUF_SEEKER_200: equ 292
044500             0045*   BUF_SEEKER_208: equ 293
044500             0046*   BUF_SEEKER_216: equ 294
044500             0047*   BUF_SEEKER_224: equ 295
044500             0048*   BUF_SEEKER_232: equ 296
044500             0049*   BUF_SEEKER_240: equ 297
044500             0050*   BUF_SEEKER_248: equ 298
044500             0051*   BUF_SHIP_0L: equ 299
044500             0052*   BUF_SHIP_1C: equ 300
044500             0053*   BUF_SHIP_2R: equ 301
044500             0054*   BUF_SHIP_SMALL: equ 302
044500             0055*   BUF_TURRET_000: equ 303
044500             0056*   BUF_TURRET_008: equ 304
044500             0057*   BUF_TURRET_016: equ 305
044500             0058*   BUF_TURRET_024: equ 306
044500             0059*   BUF_TURRET_032: equ 307
044500             0060*   BUF_TURRET_040: equ 308
044500             0061*   BUF_TURRET_048: equ 309
044500             0062*   BUF_TURRET_056: equ 310
044500             0063*   BUF_TURRET_064: equ 311
044500             0064*   BUF_TURRET_072: equ 312
044500             0065*   BUF_TURRET_080: equ 313
044500             0066*   BUF_TURRET_088: equ 314
044500             0067*   BUF_TURRET_096: equ 315
044500             0068*   BUF_TURRET_104: equ 316
044500             0069*   BUF_TURRET_112: equ 317
044500             0070*   BUF_TURRET_120: equ 318
044500             0071*   BUF_TURRET_128: equ 319
044500             0072*   BUF_TURRET_136: equ 320
044500             0073*   BUF_TURRET_144: equ 321
044500             0074*   BUF_TURRET_152: equ 322
044500             0075*   BUF_TURRET_160: equ 323
044500             0076*   BUF_TURRET_168: equ 324
044500             0077*   BUF_TURRET_176: equ 325
044500             0078*   BUF_TURRET_184: equ 326
044500             0079*   BUF_TURRET_192: equ 327
044500             0080*   BUF_TURRET_200: equ 328
044500             0081*   BUF_TURRET_208: equ 329
044500             0082*   BUF_TURRET_216: equ 330
044500             0083*   BUF_TURRET_224: equ 331
044500             0084*   BUF_TURRET_232: equ 332
044500             0085*   BUF_TURRET_240: equ 333
044500             0086*   BUF_TURRET_248: equ 334
044500             0087*   
044500             0088*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044500 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       8E 4A 04 00 
       01 00       
044512 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       A3 4A 04 01 
       01 00       
044524 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       BD 4A 04 02 
       01 00       
044536 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       D7 4A 04 03 
       01 00       
044548 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       F1 4A 04 04 
       01 00       
04455A 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       0B 4B 04 05 
       01 00       
04456C 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       25 4B 04 06 
       01 00       
04457E 01 00 00 07 0096*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       3E 4B 04 07 
       01 00       
044590 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       57 4B 04 08 
       01 00       
0445A2 01 00 00 05 0098*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       6D 4B 04 09 
       01 00       
0445B4 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       83 4B 04 0A 
       01 00       
0445C6 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       95 4B 04 0B 
       01 00       
0445D8 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       AE 4B 04 0C 
       01 00       
0445EA 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       C7 4B 04 0D 
       01 00       
0445FC 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       E0 4B 04 0E 
       01 00       
04460E 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       F9 4B 04 0F 
       01 00       
044620 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       12 4C 04 10 
       01 00       
044632 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       2B 4C 04 11 
       01 00       
044644 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       44 4C 04 12 
       01 00       
044656 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       5D 4C 04 13 
       01 00       
044668 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       76 4C 04 14 
       01 00       
04467A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       8F 4C 04 15 
       01 00       
04468C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       A8 4C 04 16 
       01 00       
04469E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       C1 4C 04 17 
       01 00       
0446B0 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       DA 4C 04 18 
       01 00       
0446C2 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       F3 4C 04 19 
       01 00       
0446D4 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       0C 4D 04 1A 
       01 00       
0446E6 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       25 4D 04 1B 
       01 00       
0446F8 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       3E 4D 04 1C 
       01 00       
04470A 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       57 4D 04 1D 
       01 00       
04471C 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       70 4D 04 1E 
       01 00       
04472E 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       89 4D 04 1F 
       01 00       
044740 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       A2 4D 04 20 
       01 00       
044752 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       BB 4D 04 21 
       01 00       
044764 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       D4 4D 04 22 
       01 00       
044776 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       ED 4D 04 23 
       01 00       
044788 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       06 4E 04 24 
       01 00       
04479A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       1F 4E 04 25 
       01 00       
0447AC 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       38 4E 04 26 
       01 00       
0447BE 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       51 4E 04 27 
       01 00       
0447D0 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       6A 4E 04 28 
       01 00       
0447E2 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       83 4E 04 29 
       01 00       
0447F4 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       9C 4E 04 2A 
       01 00       
044806 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       B5 4E 04 2B 
       01 00       
044818 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       CB 4E 04 2C 
       01 00       
04482A 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       E1 4E 04 2D 
       01 00       
04483C 01 00 00 08 0135*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       F7 4E 04 2E 
       01 00       
04484E 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       10 4F 04 2F 
       01 00       
044860 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       29 4F 04 30 
       01 00       
044872 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       42 4F 04 31 
       01 00       
044884 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       5B 4F 04 32 
       01 00       
044896 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       74 4F 04 33 
       01 00       
0448A8 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       8D 4F 04 34 
       01 00       
0448BA 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       A6 4F 04 35 
       01 00       
0448CC 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       BF 4F 04 36 
       01 00       
0448DE 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       D8 4F 04 37 
       01 00       
0448F0 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       F1 4F 04 38 
       01 00       
044902 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       0A 50 04 39 
       01 00       
044914 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       23 50 04 3A 
       01 00       
044926 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       3C 50 04 3B 
       01 00       
044938 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       55 50 04 3C 
       01 00       
04494A 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       6E 50 04 3D 
       01 00       
04495C 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       87 50 04 3E 
       01 00       
04496E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       A0 50 04 3F 
       01 00       
044980 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       B9 50 04 40 
       01 00       
044992 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       D2 50 04 41 
       01 00       
0449A4 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       EB 50 04 42 
       01 00       
0449B6 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       04 51 04 43 
       01 00       
0449C8 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       1D 51 04 44 
       01 00       
0449DA 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       36 51 04 45 
       01 00       
0449EC 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       4F 51 04 46 
       01 00       
0449FE 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       68 51 04 47 
       01 00       
044A10 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       81 51 04 48 
       01 00       
044A22 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       9A 51 04 49 
       01 00       
044A34 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       B3 51 04 4A 
       01 00       
044A46 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       CC 51 04 4B 
       01 00       
044A58 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       E5 51 04 4C 
       01 00       
044A6A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       FE 51 04 4D 
       01 00       
044A7C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       17 52 04 4E 
       01 00       
044A8E             0168*   
044A8E             0169*   ; files_list: ; filename:
044A8E 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044AA3 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044ABD 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044AD7 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044AF1 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044B0B 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044B25 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044B3E 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044B57 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044B6D 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044B83 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044B95 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044BAE 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044BC7 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044BE0 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044BF9 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044C12 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044C2B 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044C44 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044C5D 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044C76 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044C8F 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044CA8 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044CC1 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044CDA 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044CF3 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044D0C 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044D25 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044D3E 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044D57 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044D70 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044D89 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044DA2 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044DBB 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044DD4 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044DED 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044E06 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044E1F 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044E38 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044E51 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044E6A 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044E83 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044E9C 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044EB5 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
044ECB 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044EE1 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
044EF7 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
044F10 73 70 72 69 0217*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044F29 73 70 72 69 0218*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044F42 73 70 72 69 0219*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044F5B 73 70 72 69 0220*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044F74 73 70 72 69 0221*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044F8D 73 70 72 69 0222*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044FA6 73 70 72 69 0223*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044FBF 73 70 72 69 0224*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044FD8 73 70 72 69 0225*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044FF1 73 70 72 69 0226*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04500A 73 70 72 69 0227*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045023 73 70 72 69 0228*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04503C 73 70 72 69 0229*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045055 73 70 72 69 0230*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04506E 73 70 72 69 0231*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045087 73 70 72 69 0232*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0450A0 73 70 72 69 0233*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0450B9 73 70 72 69 0234*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0450D2 73 70 72 69 0235*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0450EB 73 70 72 69 0236*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045104 73 70 72 69 0237*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04511D 73 70 72 69 0238*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045136 73 70 72 69 0239*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04514F 73 70 72 69 0240*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045168 73 70 72 69 0241*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045181 73 70 72 69 0242*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04519A 73 70 72 69 0243*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0451B3 73 70 72 69 0244*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0451CC 73 70 72 69 0245*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0451E5 73 70 72 69 0246*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0451FE 73 70 72 69 0247*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045217 73 70 72 69 0248*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045230             0052        include "images_ui.inc"
045230 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045300             0002*   
045300             0003*   ; Generated by make_images.py
045300             0004*   
045300             0005*   ui_num_images: equ 4
045300             0006*   
045300             0007*   ; buffer_ids:
045300             0008*   BUF_BEZEL_L: equ 0
045300             0009*   BUF_BEZEL_R: equ 1
045300             0010*   BUF_SPLASH_BG: equ 2
045300             0011*   BUF_SPLASH_LOGO: equ 3
045300             0012*   
045300             0013*   ui_image_list: ; type; width; height; size; filename; bufferId:
045300 01 00 00 80 0014*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       48 53 04 00 
       00 00       
045312 01 00 00 80 0015*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       59 53 04 01 
       00 00       
045324 01 00 00 40 0016*   	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       6A 53 04 02 
       00 00       
045336 01 00 00 40 0017*   	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       7D 53 04 03 
       00 00       
045348             0018*   
045348             0019*   ; files_list: ; filename:
045348 75 69 2F 62 0020*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045359 75 69 2F 62 0021*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04536A 75 69 2F 73 0022*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04537D 75 69 2F 73 0023*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
045392             0053        include "laser.inc"
045392 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045400             0002*   
045400             0003*   ; ##### LASER SPRITE PARAMETERS #####
045400             0004*   ; uses the same offsets from its table base as the main sprite table:
045400             0005*   laser_start_variables: ; label marking beginning of table
045400 11          0006*   laser_id:                db table_max_records+1 ; 1 bytes unique spriteId, zero-based
045401             0007*   ; sprite state variables
045401 00 00 00    0008*   laser_x:                 dl                   0 ; 3 bytes 16.8 fractional x position in pixels
045404 00 00 00    0009*   laser_y:                 dl                   0 ; 3 bytes 16.8 fractional y position in pixels
045407 00 00 00    0010*   laser_xvel:              dl                   0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04540A 00 FA FF    0011*   laser_yvel:              dl              -6*256 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04540D 00 FA FF    0012*   laser_vel:               dl              -6*256 ; 3 bytes velocity px/frame (16.8 fixed)
045410 00 00 00    0013*   laser_heading:           dl                   0 ; 3 bytes sprite movement direction deg256 16.8 fixed
045413 00 00 00    0014*   laser_orientation:       dl                   0 ; 3 bytes orientation bits
045416             0015*   ; sprite definition variables
045416 00          0016*   laser_type:              db                   0 ; 1 bytes not currently used
045417 08 01 00    0017*   laser_base_bufferId:     dl         BUF_LASER_A ; 3 bytes bitmap bufferId
04541A 00 00 00    0018*   laser_move_program:      dl                   0 ; 3 bytes not currently used
04541D 00          0019*   laser_collisions:        db                   0 ; 1 bytes see collisions.inc constants for bit definitions
04541E 10          0020*   laser_dim_x:             db                  16 ; 1 bytes sprite width in pixels
04541F 10          0021*   laser_dim_y:             db                  16 ; 1 bytes sprite height in pixels
045420 01          0022*   laser_num_orientations:  db                   1 ; 1 bytes number of orientations for this sprite
045421 02          0023*   laser_num_animations:    db                   2 ; 1 bytes number of animations for this sprite
045422 01          0024*   laser_animation:         db                   1 ; 1 bytes current animation index, zero-based
045423 00          0025*   laser_animation_timer:   db                   0 ; 1 bytes when hits zero, draw next animation
045424 00          0026*   laser_move_timer:        db                   0 ; 1 bytes when zero, go to next move program, or step
045425 00          0027*   laser_move_step:         db                   0 ; 1 bytes stage in a move program sequence, varies
045426 00          0028*   laser_points:            db                   0 ; 1 bytes points awarded for killing this sprite type
045427 00          0029*   laser_shield_damage:     db                   0 ; 1 bytes shield points deducted for collision
045428 00          0030*   laser_frame:             db                   0 ; 1 bytes current animation frame
045429             0031*   laser_end_variables: ; for when we want to traverse this table in reverse
045429             0032*   laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
045429             0033*   laser_animation_timer_reset: equ 2 ; animate every two frames
045429             0034*   
045429             0035*   laser_control:
045429             0036*   ; point to laser sprite variables
045429 FD 21 00 54 0037*       ld iy,laser_start_variables
       04          
04542E FD 22 90 5C 0038*       ld (table_pointer),iy
       04          
045433             0039*   ; did laser just die?
045433 FD CB 1D 7E 0040*       bit sprite_just_died,(iy+sprite_collisions)
045437 C2 C0 54 04 0041*       jp nz,kill_laser
04543B             0042*   ; select laser sprite
04543B 3A 00 54 04 0043*       ld a,(laser_id)
04543F CD 00 1F 04 0044*       call vdu_sprite_select
045443             0045*   ; update laser position
045443 CD 5B 5D 04 0046*       call move_sprite
045447             0047*   ; are we at top of screen?
045447 3A 94 5C 04 0048*       ld a,(sprite_screen_edge)
04544B E6 08       0049*       and collide_top
04544D C2 C0 54 04 0050*       jp nz,kill_laser
045451             0051*   ; check animation timer
045451 FD 35 23    0052*       dec (iy+sprite_animation_timer)
045454 C2 61 54 04 0053*       jp nz,@F
045458 3E 02       0054*       ld a,laser_animation_timer_reset
04545A FD 77 23    0055*       ld (iy+sprite_animation_timer),a
04545D CD 47 1F 04 0056*       call vdu_sprite_next_frame
045461             0057*   @@: ; draw the sprite
045461 FD 07 01    0058*       ld bc,(iy+sprite_x)
045464 FD 17 04    0059*       ld de,(iy+sprite_y)
045467 CD CC 1F 04 0060*       call vdu_sprite_move_abs168
04546B             0061*   ; return to caller
04546B C9          0062*       ret
04546C             0063*   ; end laser_control
04546C             0064*   
04546C             0065*   fire_laser:
04546C             0066*   ; point to laser sprite variables
04546C FD 21 00 54 0067*       ld iy,laser_start_variables
       04          
045471 FD 22 90 5C 0068*       ld (table_pointer),iy
       04          
045476             0069*   ; is laser already active?
045476 FD CB 1D 76 0070*       bit sprite_alive,(iy+sprite_collisions)
04547A C0          0071*       ret nz ; laser already active
04547B             0072*   ; otherwise,FIRE ZEE LASER!!1111
04547B             0073*   ; set laser status to active
04547B FD CB 1D F6 0074*       set sprite_alive,(iy+sprite_collisions)
04547F             0075*   ; initialize laser sprite parameters
04547F             0076*   ; x-coordinate
04547F DD 21 0A 58 0077*       ld ix,player_start_variables
       04          
045484 DD 27 01    0078*       ld hl,(ix+sprite_x)
045487 11 00 05 00 0079*       ld de,5*256 ; horizontal center with player sprite
04548B 19          0080*       add hl,de
04548C FD 2F 01    0081*       ld (iy+sprite_x),hl
04548F             0082*   ; y-coordinate
04548F DD 27 04    0083*       ld hl,(ix+sprite_y)
045492 11 00 FA FF 0084*       ld de,-6*256 ; set laser y a few pixels above player
045496 FD 2F 04    0085*       ld (iy+sprite_y),hl
045499             0086*   ; set laser velocity
045499 21 00 FA FF 0087*       ld hl,laser_speed
04549D FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
0454A0             0089*   ; set laser animation frame and timer
0454A0 AF          0090*       xor a ; first frame
0454A1 FD 77 28    0091*       ld (iy+sprite_frame),a
0454A4 3E 02       0092*       ld a,laser_animation_timer_reset
0454A6 FD 77 23    0093*       ld (iy+sprite_animation_timer),a
0454A9             0094*   ; plot the sprite and make it visible
0454A9 3A 00 54 04 0095*       ld a,(laser_id)
0454AD CD 00 1F 04 0096*       call vdu_sprite_select
0454B1 FD 07 01    0097*       ld bc,(iy+sprite_x)
0454B4 FD 17 04    0098*       ld de,(iy+sprite_y)
0454B7 CD CC 1F 04 0099*       call vdu_sprite_move_abs168
0454BB CD 76 1F 04 0100*       call vdu_sprite_show
0454BF             0101*   ; return to caller
0454BF C9          0102*       ret
0454C0             0103*   ; end fire_laser
0454C0             0104*   
0454C0             0105*   kill_laser:
0454C0             0106*   ; update status to inactive
0454C0 AF          0107*       xor a ; zero out a
0454C1 32 1D 54 04 0108*       ld (laser_collisions),a
0454C5             0109*   ; hide the sprite
0454C5 3A 00 54 04 0110*       ld a,(laser_id)
0454C9 CD 00 1F 04 0111*       call vdu_sprite_select
0454CD CD 84 1F 04 0112*       call vdu_sprite_hide
0454D1 C9          0113*       ret
0454D2             0114*   ; end kill_laser
0454D2             0054        include "levels.inc"
0454D2 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045500             0002*   
045500             0003*   ; tileset indices
045500             0004*   tiles_dg: equ 0
045500             0005*   ; tiles_xevious: equ 1
045500 00 00 00    0006*   tileset_ptr_idx: dl 0
045503             0007*   tileset_ptrs:
045503             0008*       ; dl tiles_xevious_levels
045503 CC 55 04    0009*       dl tileset_00_levels
045506 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045509             0011*   
045509             0012*   ; get a pointer to the current tileset
045509             0013*   ; inputs: tileset_ptr_idx
045509             0014*   ; returns: ix = pointer to tileset levels lut
045509             0015*   get_tileset_ptr:
045509 3A 00 55 04 0016*       ld a,(tileset_ptr_idx)
04550D 57          0017*       ld d,a ; d = tileset index
04550E 1E 03       0018*       ld e,3 ; three bytes per index record
045510 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045512 DD 21 03 55 0020*       ld ix,tileset_ptrs
       04          
045517 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045519 C9          0022*       ret
04551A             0023*   ; end get_tileset_ptr
04551A             0024*   
04551A             0025*   ; intialize a tileset
04551A             0026*   ; inputs: a = index into tileset_ptrs
04551A             0027*   init_tileset:
04551A 32 00 55 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04551E CD 09 55 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045522 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045525 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045528 32 58 55 04 0032*       ld (num_levels),a
04552C AF          0033*       xor a ; reset current level to zero
04552D 32 57 55 04 0034*       ld (cur_level),a
045531 C3 89 55 04 0035*       jp init_level
045535             0036*   ; end init_tileset
045535             0037*   
045535             0038*   next_tileset:
045535 21 00 55 04 0039*       ld hl,tileset_ptr_idx
045539 34          0040*       inc (hl) ; bump to next index
04553A CD 09 55 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04553E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045541             0043*       sign_hlu ; check for list terminator (0)
045541 19          0001*M1     add hl,de
045542 B7          0002*M1     or a ; clear flags
045543 ED 52       0003*M1     sbc hl,de
045545 C2 53 55 04 0044*       jp nz,@F ; not end of list
045549 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04554B 32 00 55 04 0046*       ld (tileset_ptr_idx),a
04554F C3 35 55 04 0047*       jp next_tileset ; try again
045553             0048*   @@:
045553 C3 1A 55 04 0049*       jp init_tileset
045557             0050*   ; end next_tileset
045557             0051*   
045557 00          0052*   cur_level: db 0
045558 00          0053*   num_levels: db 0
045559             0054*   
045559             0055*   ; get a pointer to the current level lookup record
045559             0056*   ; inputs: tileset_ptr_idx, cur_level
045559             0057*   ; returns: ix = pointer to level definition
045559             0058*   get_level_ptr:
045559 CD 09 55 04 0059*       call get_tileset_ptr
04555D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045560 3A 57 55 04 0061*       ld a,(cur_level)
045564 57          0062*       ld d,a ; d = level index
045565 1E 03       0063*       ld e,3 ; three bytes per level record
045567 ED 5C       0064*       mlt de ; offset into tileset levels lut
045569 DD 19       0065*       add ix,de ; ix = pointer to level record
04556B C9          0066*       ret
04556C             0067*   ; end get_level_ptr
04556C             0068*   
04556C             0069*   ; advance to the next level in the current tileset
04556C             0070*   ; inputs: tileset_ptr_idx, cur_level
04556C             0071*   next_level:
04556C 21 57 55 04 0072*       ld hl,cur_level
045570 34          0073*       inc (hl) ; bump to next level
045571 CD 59 55 04 0074*       call get_level_ptr ; ix points to current level lookup record
045575 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045578             0076*       sign_hlu ; check for list terminator (0)
045578 19          0001*M1     add hl,de
045579 B7          0002*M1     or a ; clear flags
04557A ED 52       0003*M1     sbc hl,de
04557C C2 89 55 04 0077*       jp nz,@F ; not end of list
045580 AF          0078*       xor a ; reset level to zero
045581 32 57 55 04 0079*       ld (cur_level),a
045585 C3 35 55 04 0080*       jp next_tileset ; try next tileset
045589             0081*   @@: ; fall through to init_level
045589             0082*   ; end next_level
045589             0083*   
045589             0084*   ; inputs: ix pointed to tileset level definition
045589             0085*   init_level:
045589 CD 59 55 04 0086*       call get_level_ptr ; ix points to level lookup record
04558D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045590             0088*   ; set tiles_cols
045590 DD 7E 00    0089*       ld a,(ix+0)
045593 32 06 65 04 0090*       ld (tiles_cols),a
045597             0091*   ; set tiles_row counter
045597 DD 7E 01    0092*       ld a,(ix+1)
04559A 32 03 65 04 0093*       ld (tiles_row),a
04559E             0094*   ; set cur_baseBufferId
04559E DD 27 04    0095*       ld hl,(ix+4)
0455A1 22 07 65 04 0096*       ld (cur_baseBufferId),hl
0455A5             0097*   ; set tiles_row_defs
0455A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0455A8 DD 22 00 65 0099*       ld (tiles_row_defs),ix
       04          
0455AD             0100*   
0455AD C9          0101*       ret ; DEBUG
0455AE             0102*   
0455AE             0103*   print_level:
0455AE             0104*   level_x: equ 48
0455AE             0105*   level_y: equ 0
0455AE 0E 30       0106*       ld c,level_x
0455B0 06 00       0107*       ld b,level_y
0455B2 CD 37 19 04 0108*       call vdu_move_cursor
0455B6 CD 10 01 04 0109*       call printInline
0455BA 4C 65 76 65 0110*       asciz "Level: "
       6C 3A 20 00 
0455C2 3A 57 55 04 0111*       ld a,(cur_level)
0455C6 CD 5A 01 04 0112*       call printHexA
0455CA             0113*       ; call printNewLine
0455CA             0114*       ; ld hl,(cur_baseBufferId)
0455CA             0115*       ; call printDec
0455CA             0116*   
0455CA             0117*   ; ; draw initial background tiles
0455CA             0118*   ; ; TODO: make this a stars background
0455CA             0119*   ;     ld hl,BUF_STATION_BG_00
0455CA             0120*   ;     call vdu_buff_select
0455CA             0121*   ;     ld bc,0
0455CA             0122*   ;     ld de,field_top
0455CA             0123*   ;     call vdu_plot_bmp
0455CA             0124*   
0455CA             0125*   ;     ld hl,BUF_STATION_BG_01
0455CA             0126*   ;     call vdu_buff_select
0455CA             0127*   ;     ld bc,0
0455CA             0128*   ;     ld de,field_top+256
0455CA             0129*   ;     call vdu_plot_bmp
0455CA             0130*   
0455CA C9          0131*       ret
0455CB             0132*   ; end init_level
0455CB             0055        include "levels_tileset_0.inc"
0455CB             0001*   ; Generated from tiles/dg/dg0_00.tmx
0455CB             0002*   
0455CB 01          0003*   tileset_00_num_levels: db 1
0455CC             0004*   
0455CC             0005*   tileset_00_levels:
0455CC D2 55 04    0006*   	dl tileset_00_level_00
0455CF 00 00 00    0007*   	dl 0 ; list terminator
0455D2             0008*   
0455D2             0009*   tileset_00_level_00: ; Level 0
0455D2 10          0010*   	db 16          ; num cols
0455D3 20 00 00    0011*   	dl 32          ; num rows
0455D6 00 02 00    0012*   	dl 512 ; base bufferId
0455D9 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,113,114,115,104,000,000,000,000,000
       00 65 74 71 
       72 73 68 00 
       00 00 00 00 
0455E9 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0455F9 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,098,098,099,113,113,114,098,104,000
       F6 62 61 62 
       62 63 71 71 
       72 62 68 00 
045609 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045619 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,098,098,098,081,082,074,083,084,104
       97 63 61 62 
       62 62 51 52 
       4A 53 54 68 
045629 63 71 72 96 0018*   	db 099,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045639 71 72 62 9A 0019*   	db 113,114,098,154,155,097,098,097,165,168,055,248,005,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       05 F8 38 72 
045649 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045659 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045669 71 64 71 72 0022*   	db 113,100,113,114,113,114,098,114,115,113,087,088,188,113,100,113
       71 72 62 72 
       73 71 57 58 
       BC 71 64 71 
045679 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045689 64 71 49 00 0024*   	db 100,113,073,000,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045699 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0456A9 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0456B9 62 72 62 63 0027*   	db 098,114,098,099,113,114,113,114,241,242,099,097,098,097,098,100
       71 72 71 72 
       F1 F2 63 61 
       62 61 62 64 
0456C9 73 72 71 72 0028*   	db 115,114,113,114,097,098,113,114,180,114,113,100,113,114,113,114
       61 62 71 72 
       B4 72 71 64 
       71 72 71 72 
0456D9 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0456E9 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0456F9 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045709 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,113,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 71 64 
       57 58 71 72 
045719 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045729 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045739 71 64 37 F8 0035*   	db 113,100,055,248,000,248,056,114,073,148,148,040,105,075,098,100
       00 F8 38 72 
       49 94 94 28 
       69 4B 62 64 
045749 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,000,055,075,113,114
       F8 33 34 72 
       49 84 38 00 
       37 4B 71 72 
045759 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,098
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 62 
045769 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045779 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045789 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045799 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0457A9 00 00 62 71 0042*   	db 000,000,098,113,114,098,098,099,097,098,097,211,100,098,102,000
       72 62 62 63 
       61 62 61 D3 
       64 62 66 00 
0457B9 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0457C9 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0457D9             0056        ; include "levels_xevious.inc"
0457D9             0057        include "player.inc"
0457D9 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045800             0002*   
045800             0003*   ; ######## GAME STATE VARIABLES #######
045800             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045800 00 00 00    0005*   player_score: dl 0 ; integer
045803             0006*   ; player current shields,binary
045803             0007*   ; when < 0 player splodes
045803             0008*   ; restores to player_max_shields when new ship spawns
045803 10 00 00    0009*   player_shields: dl 16 ; integer
045806             0010*   ; max player shields,binary
045806             0011*   ; can increase with power-ups (todo)
045806 10 00 00    0012*   player_max_shields: dl 16 ; integer
045809             0013*   ; when reaches zero,game ends
045809             0014*   ; can increase based on TODO
045809 03          0015*   player_ships: db 3 ; integer
04580A             0016*   
04580A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
04580A             0018*   
04580A             0019*   ; ######### PLAYER SPRITE PARAMETERS ##########
04580A             0020*   ; uses the same offsets from its table base as the main sprite table:
04580A             0021*   player_start_variables: ; label marking beginning of table
04580A 10          0022*   player_id:                db table_max_records ; 1 bytes unique spriteId, zero-based
04580B             0023*   ; sprite state variables
04580B 00 00 00    0024*   player_x:                 dl                 0 ; 3 bytes 16.8 fractional x position in pixels
04580E 00 00 00    0025*   player_y:                 dl                 0 ; 3 bytes 16.8 fractional y position in pixels
045811 00 00 00    0026*   player_xvel:              dl                 0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
045814 00 00 00    0027*   player_yvel:              dl                 0 ; 3 bytes y-component velocity, 16.8 fixed, pixels
045817 00 03 00    0028*   player_vel:               dl             3*256 ; 3 bytes velocity px/frame (16.8 fixed)
04581A 00 00 00    0029*   player_heading:           dl                 0 ; 3 bytes sprite movement direction deg256 16.8 fixed
04581D 00 00 00    0030*   player_orientation:       dl                 0 ; 3 bytes orientation bits
045820             0031*   ; sprite definition variables
045820 00          0032*   player_type:              db                 0 ; 1 bytes not currently used
045821 2B 01 00    0033*   player_base_bufferId:     dl       BUF_SHIP_0L ; 3 bytes bitmap bufferId
045824 00 00 00    0034*   player_move_program:      dl                 0 ; 3 bytes not currently used
045827 00          0035*   player_collisions:        db                 0 ; 1 bytes see collisions.inc constants for bit definitions
045828 10          0036*   player_dim_x:             db                16 ; 1 bytes sprite width in pixels
045829 10          0037*   player_dim_y:             db                16 ; 1 bytes sprite height in pixels
04582A 01          0038*   player_num_orientations:  db                 1 ; 1 bytes number of orientations for this sprite
04582B 03          0039*   player_num_animations:    db                 3 ; 1 bytes number of animations for this sprite
04582C 01          0040*   player_animation:         db                 1 ; 1 bytes current animation index, zero-based
04582D 00          0041*   player_animation_timer:   db                 0 ; 1 bytes when hits zero, draw next animation
04582E 00          0042*   player_move_timer:        db                 0 ; 1 bytes when zero, go to next move program, or step
04582F 00          0043*   player_move_step:         db                 0 ; 1 bytes stage in a move program sequence, varies
045830 00          0044*   player_points:            db                 0 ; 1 bytes points awarded for killing this sprite type
045831 00          0045*   player_shield_damage:     db                 0 ; 1 bytes shield points deducted for collision
045832 00          0046*   player_frame:             db                 0 ; 1 bytes current animation frame
045833             0047*   player_end_variables: ; for when we want to traverse this table in reverse
045833             0048*   
045833             0049*   ; set initial player position
045833             0050*   ; inputs: none,everything is hardcoded
045833             0051*   ; outputs: player_x/y set to bottom-left corner of screen
045833             0052*   ; destroys: a
045833             0053*   player_init:
045833 3A 0A 58 04 0054*   	ld a,(player_id)
045837 CD 00 1F 04 0055*   	call vdu_sprite_select
04583B CD 13 1F 04 0056*       call vdu_sprite_clear_frames
04583F 21 2B 01 00 0057*       ld hl,BUF_SHIP_0L
045843 CD 55 20 04 0058*       call vdu_sprite_add_buff
045847 21 2C 01 00 0059*       ld hl,BUF_SHIP_1C
04584B CD 55 20 04 0060*       call vdu_sprite_add_buff
04584F 21 2D 01 00 0061*       ld hl,BUF_SHIP_2R
045853 CD 55 20 04 0062*       call vdu_sprite_add_buff
045857 01 00 00 00 0063*       ld bc,0
04585B ED 43 0B 58 0064*       ld (player_x),bc
       04          
045860 11 00 6F 01 0065*       ld de,sprite_bottom*256 ; max sprite y-coordinate
045864 ED 53 0E 58 0066*       ld (player_y),de
       04          
045869 CD CC 1F 04 0067*       call vdu_sprite_move_abs168
04586D CD 76 1F 04 0068*       call vdu_sprite_show
045871 21 D2 61 04 0069*       ld hl,player_alive
045875 22 C4 61 04 0070*       ld (player_state),hl
045879 21 27 58 04 0071*       ld hl,player_collisions
04587D CB F6       0072*       set sprite_alive,(hl)
04587F C9          0073*       ret
045880             0074*   
045880             0075*   ; process player keyboard input, set player bitmap
045880             0076*   ; velocities and draw player bitmap at updated coordinates
045880             0077*   ; Inputs: player_x/y set at desired position
045880             0078*   ; Returns: player bitmap drawn at updated position
045880             0079*   ; Destroys: probably everything except maybe iy
045880             0080*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
045880             0081*   ; TODO: requires sprite implementation
045880             0082*   player_input:
045880             0083*   ; ; did we die last frame?
045880             0084*   ;     ld a,(player_collisions)
045880             0085*   ;     and %00000010 ; zero flag will be set if not dead
045880             0086*   ;     jr z,player_not_dead
045880             0087*   ; ; yes we died
045880             0088*   ;     call kill_player
045880             0089*   ;     ret ; done
045880             0090*   player_not_dead: ; yay we didn't die
045880             0091*   ; reset player component velocities to zero as the default
045880 21 00 00 00 0092*   	ld hl,0
045884 22 11 58 04 0093*   	ld (player_xvel),hl
045888 22 14 58 04 0094*   	ld (player_yvel),hl
04588C             0095*   ; make ship the active sprite
04588C 3A 0A 58 04 0096*       ld a,(player_id)
045890 CD 00 1F 04 0097*       call vdu_sprite_select
045894             0098*   ; check for keypresses and branch accordingly
045894             0099*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045894             0100*       MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
045894 3E 1E       0001*M1 			LD	A, function
045896 5B CF       0002*M1 			RST.LIL	08h
045898             0101*   ; we test all four arrow keys and add/subract velocities accordingly
045898             0102*   ; this handles the case where two opposing movement keys
045898             0103*   ; are down simultaneously (velocities will net to zero)
045898             0104*   ; and allows diagonal movement when a vertical and horizontal key are down
045898             0105*   ; it also allows movement and action keys to be detected simultaneously
045898             0106*   ; so we can walk and chew gum at the same time
045898 3E 01       0107*       ld a,1 ; set ship's default animation to center
04589A             0108*           ; if left and right are both down a will net to
04589A             0109*   
04589A             0110*   ; 99 Space: fire main weapon
04589A DD CB 0C 56 0111*       bit 2,(ix+12)
04589E F5          0112*       push af ; save flags for after player movement processed
04589F             0113*   ; 26 Left: move player left
04589F DD CB 03 4E 0114*       bit 1,(ix+3)
0458A3 CA B5 58 04 0115*       jp z,@F
0458A7 2A 11 58 04 0116*       ld hl,(player_xvel)
0458AB 01 00 FD FF 0117*       ld bc,-speed_player
0458AF 09          0118*       add hl,bc
0458B0 22 11 58 04 0119*       ld (player_xvel),hl
0458B4 3D          0120*       dec a ; set ship's animation to left
0458B5             0121*   @@:
0458B5             0122*   ; 122 Right: move player right
0458B5 DD CB 0F 4E 0123*       bit 1,(ix+15)
0458B9 CA CB 58 04 0124*   	jp z,@F
0458BD 2A 11 58 04 0125*       ld hl,(player_xvel)
0458C1 01 00 03 00 0126*       ld bc,speed_player
0458C5 09          0127*       add hl,bc
0458C6 22 11 58 04 0128*       ld (player_xvel),hl
0458CA 3C          0129*       inc a ; set ship's animation to right
0458CB             0130*   @@:
0458CB             0131*   ; 58 Up: move player up
0458CB DD CB 07 4E 0132*       bit 1,(ix+7)
0458CF CA E0 58 04 0133*   	jp z,@F
0458D3 2A 14 58 04 0134*       ld hl,(player_yvel)
0458D7 01 00 FD FF 0135*       ld bc,-speed_player
0458DB 09          0136*       add hl,bc
0458DC 22 14 58 04 0137*       ld (player_yvel),hl
0458E0             0138*   @@:
0458E0             0139*   ; 42 Down: move player down
0458E0 DD CB 05 4E 0140*       bit 1,(ix+5)
0458E4 CA F5 58 04 0141*   	jp z,@F
0458E8 2A 14 58 04 0142*       ld hl,(player_yvel)
0458EC 01 00 03 00 0143*       ld bc,speed_player
0458F0 09          0144*       add hl,bc
0458F1 22 14 58 04 0145*       ld (player_yvel),hl
0458F5             0146*   @@:
0458F5             0147*   ; a should land here loaded with the correct frame
0458F5 CD 63 1F 04 0148*       call vdu_sprite_select_frame
0458F9             0149*   ; draw player at updated position
0458F9 FD 21 0A 58 0150*       ld iy,player_start_variables
       04          
0458FE FD 22 90 5C 0151*       ld (table_pointer),iy
       04          
045903 CD 5B 5D 04 0152*       call move_sprite
045907 ED 4B 0B 58 0153*       ld bc,(player_x)
       04          
04590C ED 5B 0E 58 0154*       ld de,(player_y)
       04          
045911 CD CC 1F 04 0155*   	call vdu_sprite_move_abs168
045915             0156*   ; process player laser fire
045915 F1          0157*       pop af ; restore flags from spacebar check
045916 C2 6C 54 04 0158*       jp nz,fire_laser ; will return to caller from there
04591A C9          0159*       ret
04591B             0160*   ; end player_input
04591B             0161*   
04591B             0162*   score_x: equ 48
04591B             0163*   score_y: equ 1
04591B             0164*   ; prints the player's score
04591B             0165*   print_score:
04591B C9          0166*       ret ;DEBUG
04591C             0167*   
04591C 0E 30       0168*       ld c,score_x
04591E 06 01       0169*       ld b,score_y
045920 CD 37 19 04 0170*       call vdu_move_cursor
045924             0171*   ; TODO: make this part of the UI setup and only print as needed
045924 CD 10 01 04 0172*       call printInline
045928 53 63 6F 72 0173*       asciz "Score:"
       65 3A 00    
04592F             0174*   ; END TODO
04592F 2A 00 58 04 0175*       ld hl,(player_score)
045933 CD 16 02 04 0176*       call printDec
045937 C9          0177*       ret
045938             0178*   
045938             0179*   ; ###################################################################
045938             0180*   ; TODO: the below is all stuff from the original code we need to port
045938             0181*   ; ###################################################################
045938             0182*   
045938             0183*   kill_player:
045938             0184*   ; ; set player status to dead
045938             0185*   ;     xor a; sets all player flags to zero
045938             0186*   ;     ld (player_collisions),a
045938             0187*   ; ; deduct a ship from the inventory
045938             0188*   ;     ld a,(player_ships)
045938             0189*   ;     dec a
045938             0190*   ;     ld (player_ships),a
045938             0191*   ; ; are we out of ships?
045938             0192*   ;     jp z,game_over
045938             0193*   ; ; wait a few ticks
045938             0194*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045938             0195*   ;     ld (player_move_timer),a
045938             0196*   ; kill_player_loop:
045938             0197*   ;     call vdu_vblank
045938             0198*   ;     ld a,(player_move_timer)
045938             0199*   ;     dec a
045938             0200*   ;     ld (player_move_timer),a
045938             0201*   ;     jr nz,kill_player_loop
045938             0202*   ;     call player_init ; player respawn if timer zero
045938 C9          0203*       ret ; and out
045939             0204*   
045939             0205*   ; draws the player's shields level
045939             0206*   ; draw_shields:
045939             0207*   ; TODO: Agonize this routine
045939             0208*   ; ; prep the loop to draw the bars
045939             0209*   ;     ld a,(player_shields) ; snag shields
045939             0210*   ;     and a
045939             0211*   ;     ret z ; don't draw if zero shields
045939             0212*   ; ; set loop counter and drawing position
045939             0213*   ;     ld b,a ; loop counter
045939             0214*   ;     ld hl,#5300+48+12
045939             0215*   ; ; set color based on bars remaining
045939             0216*   ;     ld c,103 ; bright green 28fe0a
045939             0217*   ;     cp 9
045939             0218*   ;     jp p,draw_shields_loop
045939             0219*   ;     ld c,74 ; bright yellow eafe5b
045939             0220*   ;     cp 3
045939             0221*   ;     jp p,draw_shields_loop
045939             0222*   ;     ld c,28 ; bright red fe0a0a
045939             0223*   ; draw_shields_loop:
045939             0224*   ;     push bc ; yup,outta
045939             0225*   ;     push hl ; registers again
045939             0226*   ;     ; ld a,#A8 ; ▀,168
045939             0227*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045939             0228*   ;     ; call draw_char
045939             0229*   ;     call draw_num ; we nuked draw_char for the time being
045939             0230*   ;     pop hl
045939             0231*   ;     ld a,8
045939             0232*   ;     add a,l
045939             0233*   ;     ld l,a
045939             0234*   ;     pop bc
045939             0235*   ;     djnz draw_shields_loop
045939             0236*       ; ret
045939             0237*   
045939             0238*   
045939             0239*   ; draw_lives:
045939             0240*   ;     ld hl,player_small ; make small yellow ship the active sprite
045939             0241*   ;     ld (sprite_base_bufferId),hl
045939             0242*   ;     ; ld a,#80 ; northern orientation
045939             0243*   ;     ; ld (sprite_orientation),a
045939             0244*   ;     ld hl,0 ; north
045939             0245*   ;     ld (sprite_heading),hl
045939             0246*   ;     xor a
045939             0247*   ;     ld (sprite_frame),a
045939             0248*   ;     ld a,#56 ; top of visible screen
045939             0249*   ;     ld (sprite_y+1),a
045939             0250*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045939             0251*   ;     ld a,(player_ships)
045939             0252*   ;     dec a ; we draw one fewer ships than lives
045939             0253*   ;     ret z ; nothing to draw here, move along
045939             0254*   ;     ld b,a ; loop counter
045939             0255*   ;     ld a,256-16 ; initial x position
045939             0256*   ; draw_lives_loop:
045939             0257*   ;     ld (sprite_x+1),a
045939             0258*   ;     push af
045939             0259*   ;     push bc
045939             0260*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045939             0261*   ;     pop bc
045939             0262*   ;     pop af
045939             0263*   ;     sub 10
045939             0264*   ;     djnz draw_lives_loop
045939             0265*   ;     ret
045939             0058        include "sprites.inc"
045939             0001*   ; ###### SPRITE TABLE FIELD INDICES ######
045939             0002*   table_bytes_per_record:    equ  41; 40 bytes ;40 bytes per sprite record
045939             0003*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
045939             0004*   ; sprite state variables
045939             0005*   sprite_state_variables:    equ   1; beginning of sprite state variables
045939             0006*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045939             0007*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045939             0008*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045939             0009*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045939             0010*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045939             0011*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
045939             0012*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
045939             0013*   ; sprite definition variables
045939             0014*   sprite_definitions:        equ  22; beginnning of sprite definition variables
045939             0015*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
045939             0016*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045939             0017*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
045939             0018*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045939             0019*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
045939             0020*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
045939             0021*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
045939             0022*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
045939             0023*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
045939             0024*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045939             0025*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045939             0026*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045939             0027*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
045939             0028*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045939             0029*   sprite_frame:              equ  40; 1 bytes ;current animation frame
045939             0030*   
045939             0031*   ; ###### SPRITE TABLE VARIABLES ######
045939             0032*   ; maximum number of sprites
045939             0033*   table_max_records: equ 16 ; it can handle more but this is pushing it
045939             0034*   table_total_bytes: equ table_max_records*table_bytes_per_record
045939             0035*   
045939             0036*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045939 FF FF FF FF 0037*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045A00             0038*   table_base:
045A00 00 00 00 00 0039*   sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
045C90             0040*   sprite_end_variables: ; in case we want to traverse the table in reverse
045C90             0041*   
045C90             0042*   ; pointer to top address of current record, initialized to table_base
045C90 00 5A 04    0043*   table_pointer: dl table_base
045C93             0044*   ; how many active sprites
045C93 00          0045*   table_active_sprites: db 0x00
045C94             0046*   ; flag indicating collision with screen edge
045C94             0047*   ; uses orientation codes to specify which edge(s)
045C94 00          0048*   sprite_screen_edge: db #00
045C95             0049*   
045C95             0050*   ; origin_top: equ 48
045C95             0051*   origin_top: equ 0
045C95             0052*   origin_left: equ 128
045C95             0053*   field_top: equ 0
045C95             0054*   field_bottom: equ 383-origin_top
045C95             0055*   field_left: equ 0
045C95             0056*   field_right: equ 255
045C95             0057*   sprite_top: equ field_top + 0
045C95             0058*   sprite_bottom: equ field_bottom-16
045C95             0059*   sprite_left: equ field_left
045C95             0060*   sprite_right: equ field_right-16
045C95             0061*   
045C95             0062*   ; ######### COLLISION SPRITE PARAMETERS ##########
045C95             0063*   ; integer coordinates are all that are needed for collision calculations
045C95 00          0064*   collision_x: db 0x00
045C96 00          0065*   collision_y: db 0x00
045C97 00          0066*   collision_dim_x: db 0x00
045C98 00          0067*   collision_dim_y: db 0x00
045C99             0068*   
045C99             0069*   ; scratch variables
045C99 00          0070*   x: db 0x00 ; 8-bit signed integer
045C9A 00          0071*   y: db 0x00 ; 8-bit signed integer
045C9B 00 00 00    0072*   x0: dl 0x000000 ; 16.8 signed fixed place
045C9E 00 00 00    0073*   y0: dl 0x000000 ; 16.8 signed fixed place
045CA1 00 00 00    0074*   incx1: dl 0x000000 ; 16.8 signed fixed place
045CA4 00 00 00    0075*   incy1: dl 0x000000 ; 16.8 signed fixed place
045CA7 00 00 00    0076*   incx2: dl 0x000000 ; 16.8 signed fixed place
045CAA 00 00 00    0077*   incy2: dl 0x000000 ; 16.8 signed fixed place
045CAD             0078*   
045CAD             0079*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
045CAD 00 00 00    0080*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
045CB0 00 00 00    0081*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
045CB3 00 00 00    0082*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
045CB6             0083*   
045CB6             0084*   table_init:
045CB6 DD 21 00 5A 0085*       ld ix,table_base
       04          
045CBB AF          0086*       xor a ; sprite id
045CBC 0E 00       0087*       ld c,0 ; sprite type
045CBE 06 10       0088*       ld b,table_max_records ; loop counter
045CC0             0089*   @loop:
045CC0 DD 77 00    0090*       ld (ix+sprite_id),a
045CC3 DD 71 16    0091*       ld (ix+sprite_type),c
045CC6 ED 32 29    0092*       lea ix,ix+table_bytes_per_record
045CC9 3C          0093*       inc a
045CCA 10 F4       0094*       djnz @loop
045CCC C9          0095*       ret
045CCD             0096*   
045CCD             0097*   ; gets the next available sprite id
045CCD             0098*   ; inputs; none
045CCD             0099*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
045CCD             0100*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
045CCD             0101*   ; destroys: a,b,c,hl,ix
045CCD             0102*   ; affects: bumps table_active_sprites by one
045CCD             0103*   table_get_next_id:
045CCD DD 21 00 5A 0104*       ld ix,table_base
       04          
045CD2 06 10       0105*       ld b,table_max_records
045CD4 0E 00       0106*       ld c,0 ; sprite id counter
045CD6             0107*   @loop:
045CD6 DD 7E 16    0108*       ld a,(ix+sprite_type)
045CD9 A7          0109*       and a
045CDA 28 08       0110*       jr z,@found
045CDC ED 32 29    0111*       lea ix,ix+table_bytes_per_record
045CDF 0C          0112*       inc c
045CE0 10 F4       0113*       djnz @loop
045CE2             0114*   @notfound:
045CE2 AF          0115*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045CE3 C9          0116*       ret
045CE4             0117*   @found:
045CE4             0118*   ; bump number of active sprites
045CE4 21 93 5C 04 0119*       ld hl,table_active_sprites
045CE8 34          0120*       inc (hl)
045CE9             0121*   ; return sprite id
045CE9 79          0122*       ld a,c
045CEA 37          0123*       scf ; sets carry flag indicating we found a free sprite
045CEB C9          0124*       ret ; done
045CEC             0125*   ; end table_get_next_id
045CEC             0126*   
045CEC             0127*   ; deactivate the sprite with the given id
045CEC             0128*   ; inputs: iy set to sprite record
045CEC             0129*   ; outputs: nothing
045CEC             0130*   ; destroys: a,hl
045CEC             0131*   ; affects: decrements table_active_sprites by one
045CEC             0132*   table_deactivate_sprite:
045CEC FD 7E 00    0133*       ld a,(iy+sprite_id) ; get spriteId
045CEF CD 00 1F 04 0134*       call vdu_sprite_select ; select sprite
045CF3 CD 84 1F 04 0135*       call vdu_sprite_hide
045CF7 AF          0136*       xor a
045CF8 FD 77 16    0137*       ld (iy+sprite_type),a
045CFB 21 93 5C 04 0138*       ld hl,table_active_sprites
045CFF 35          0139*       dec (hl)
045D00 C9          0140*       ret
045D01             0141*   ; end table_deactivate_sprite
045D01             0142*   
045D01             0143*   sprites_init:
045D01             0144*   ; initialize sprites
045D01 CD 34 20 04 0145*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
045D05 AF          0146*   	xor a
045D06             0147*   @sprite_loop:
045D06 F5          0148*   	push af
045D07 CD 00 1F 04 0149*   	call vdu_sprite_select
045D0B 21 00 01 00 0150*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
045D0F CD 55 20 04 0151*   	call vdu_sprite_add_buff
045D13 F1          0152*   	pop af
045D14 3C          0153*   	inc a
045D15 FE 12       0154*   	cp table_max_records+2 ; tack on sprites for player and laser
045D17 20 ED       0155*   	jr nz,@sprite_loop
045D19 3C          0156*   	inc a
045D1A CD 34 1F 04 0157*   	call vdu_sprite_activate
045D1E             0158*   
045D1E             0159*   ; define player sprite
045D1E 3A 0A 58 04 0160*   	ld a,(player_id)
045D22 CD 00 1F 04 0161*   	call vdu_sprite_select
045D26 CD 13 1F 04 0162*   	call vdu_sprite_clear_frames
045D2A 21 2B 01 00 0163*   	ld hl,BUF_SHIP_0L
045D2E 01 03 00 00 0164*   	ld bc,3 ; three bitmaps for player ship
045D32             0165*   @sprite_player_loop:
045D32 C5          0166*   	push bc
045D33 E5          0167*   	push hl
045D34 CD 55 20 04 0168*   	call vdu_sprite_add_buff
045D38 E1          0169*   	pop hl
045D39 23          0170*   	inc hl
045D3A C1          0171*   	pop bc
045D3B 10 F5       0172*   	djnz @sprite_player_loop
045D3D             0173*   
045D3D             0174*   ; define laser sprite
045D3D 3A 00 54 04 0175*   	ld a,(laser_id)
045D41 CD 00 1F 04 0176*   	call vdu_sprite_select
045D45 CD 13 1F 04 0177*   	call vdu_sprite_clear_frames
045D49 21 08 01 00 0178*   	ld hl,BUF_LASER_A
045D4D 06 02       0179*   	ld b,2 ; two bitmaps for laser
045D4F             0180*   @sprite_laser_loop:
045D4F C5          0181*   	push bc
045D50 E5          0182*   	push hl
045D51 CD 55 20 04 0183*   	call vdu_sprite_add_buff
045D55 E1          0184*   	pop hl
045D56 23          0185*   	inc hl
045D57 C1          0186*   	pop bc
045D58 10 F5       0187*   	djnz @sprite_laser_loop
045D5A             0188*   ; all done
045D5A C9          0189*       ret
045D5B             0190*   ; end sprites_init
045D5B             0191*   
045D5B             0192*   ; compute a sprite's new position based on its component x,y velocities
045D5B             0193*   ; with screen boundary checking and update its sprite table record accordingly
045D5B             0194*   ; inputs: table_pointer set to sprite record
045D5B             0195*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
045D5B             0196*   ; destroys: everything
045D5B             0197*   ; note: actual rendering of sprite must be handled by caller
045D5B             0198*   move_sprite:
045D5B FD 2A 90 5C 0199*       ld iy,(table_pointer)
       04          
045D60             0200*   ; x-axis movement
045D60 FD 27 01    0201*       ld hl,(iy+sprite_x)
045D63 FD 17 07    0202*       ld de,(iy+sprite_xvel)
045D66 19          0203*       add hl,de
045D67 FD 2F 01    0204*       ld (iy+sprite_x),hl
045D6A             0205*   ; y-axis movement
045D6A FD 27 04    0206*       ld hl,(iy+sprite_y)
045D6D FD 17 0A    0207*       ld de,(iy+sprite_yvel)
045D70 19          0208*       add hl,de
045D71 FD 2F 04    0209*       ld (iy+sprite_y),hl
045D74             0210*   ; detect screen edge collisions
045D74 AF          0211*       xor a ; reset screen edge collision flag and clear carry
045D75 32 94 5C 04 0212*       ld (sprite_screen_edge),a
045D79             0213*   ; y-axis first since we already have it in hl
045D79 11 00 00 00 0214*       ld de,-sprite_top*256
045D7D ED 5A       0215*       adc hl,de
045D7F FA A9 5D 04 0216*       jp m,@top
045D83 ED 52       0217*       sbc hl,de ; hl back to original value
045D85 11 00 91 FE 0218*       ld de,-sprite_bottom*256
045D89 ED 5A       0219*       adc hl,de
045D8B F2 B3 5D 04 0220*       jp p,@bottom
045D8F             0221*   @xaxis:
045D8F FD 27 01    0222*       ld hl,(iy+sprite_x)
045D92 11 00 00 00 0223*       ld de,-sprite_left*256
045D96 ED 5A       0224*       adc hl,de
045D98 FA CE 5D 04 0225*       jp m,@left
045D9C ED 52       0226*       sbc hl,de ; hl back to original value
045D9E 11 00 11 FF 0227*       ld de,-sprite_right*256
045DA2 ED 5A       0228*       adc hl,de
045DA4 F2 DC 5D 04 0229*       jp p,@right
045DA8             0230*   ; no edge collisions so go home
045DA8 C9          0231*       ret
045DA9             0232*   @top:
045DA9 3E 08       0233*       ld a,collide_top
045DAB 21 00 00 00 0234*       ld hl,sprite_top*256
045DAF C3 B9 5D 04 0235*       jp @collide_y
045DB3             0236*   @bottom:
045DB3 3E 04       0237*       ld a,collide_bottom
045DB5 21 00 6F 01 0238*       ld hl,sprite_bottom*256
045DB9             0239*   @collide_y:
045DB9 32 94 5C 04 0240*       ld (sprite_screen_edge),a
045DBD FD 2F 04    0241*       ld (iy+sprite_y),hl
045DC0             0242*   ; reverse y-axis velocity
045DC0 FD 27 0A    0243*       ld hl,(iy+sprite_yvel)
045DC3 CD 16 09 04 0244*       call neg_hlu
045DC7 FD 2F 0A    0245*       ld (iy+sprite_yvel),hl
045DCA             0246*   ; go check for x-axis collisions
045DCA C3 8F 5D 04 0247*       jp @xaxis
045DCE             0248*   @left:
045DCE 3A 94 5C 04 0249*       ld a,(sprite_screen_edge)
045DD2 F6 02       0250*       or a,collide_left
045DD4 21 00 00 00 0251*       ld hl,sprite_left*256
045DD8 C3 E6 5D 04 0252*       jp @collide_x
045DDC             0253*   @right:
045DDC 3A 94 5C 04 0254*       ld a,(sprite_screen_edge)
045DE0 F6 01       0255*       or a,collide_right
045DE2 21 00 EF 00 0256*       ld hl,sprite_right*256
045DE6             0257*   @collide_x:
045DE6 32 94 5C 04 0258*       ld (sprite_screen_edge),a
045DEA FD 2F 01    0259*       ld (iy+sprite_x),hl
045DED             0260*   ; reverse x-axis velocity
045DED FD 27 07    0261*       ld hl,(iy+sprite_xvel)
045DF0 CD 16 09 04 0262*       call neg_hlu
045DF4 FD 2F 07    0263*       ld (iy+sprite_xvel),hl
045DF7             0264*   ; final collision flag to a and return
045DF7 3A 94 5C 04 0265*       ld a,(sprite_screen_edge)
045DFB C9          0266*       ret
045DFC             0267*   ; end move_sprite
045DFC             0268*   
045DFC             0269*   sprite_compute_velocities:
045DFC FD 2A 90 5C 0270*       ld iy,(table_pointer)
       04          
045E01 FD 17 0D    0271*       ld de,(iy+sprite_vel)
045E04 CD A9 0B 04 0272*       call polar_to_cartesian
045E08 FD 2A 90 5C 0273*       ld iy,(table_pointer)
       04          
045E0D FD 0F 07    0274*       ld (iy+sprite_xvel),bc ; save x-velocity component
045E10 FD 1F 0A    0275*       ld (iy+sprite_yvel),de ; save y-velocity component
045E13 C9          0276*       ret
045E14             0277*   ; end sprite_compute_velocities
045E14             0278*   
045E14             0279*   ; create a new sprite at the same location as an existing sprite
045E14             0280*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
045E14             0281*   spawn_sprite:
045E14 E5          0282*       push hl ; back up pointer to new sprite defaults
045E15 CD CD 5C 04 0283*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
045E19 E1          0284*       pop hl ; restore pointer to new sprite defaults
045E1A D0          0285*       ret nc ; no carry means no free sprite slots, so we go home
045E1B             0286*   ; copy default settings to new sprite
045E1B DD E5       0287*       push ix ; back up pointer to new sprite record
045E1D ED 32 16    0288*       lea ix,ix+sprite_definitions ; bump pointer to copy to
045E20 DD E5       0289*       push ix ; pointer to default sprite settings
045E22 D1          0290*       pop de ; address to copy to
045E23 01 13 00 00 0291*       ld bc,table_bytes_per_record-sprite_definitions ; number of bytes to copy
045E27 ED B0       0292*       ldir ; copies defaults to new sprite record
045E29             0293*   ; return to caller
045E29 DD E1       0294*       pop ix ; restore pointer to new sprite record
045E2B DD CB 16 FE 0295*       set 7,(ix+sprite_type) ; set just spawned flag
045E2F 37          0296*       scf ; set carry flag to indicate success
045E30 C9          0297*       ret
045E31             0298*   
045E31             0299*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
045E31             0300*   spawn_sprite_from_sprite:
045E31 CD 14 5E 04 0301*       call spawn_sprite
045E35 D0          0302*       ret nc ; no carry means no free sprite slots, so we go home
045E36             0303*   ; copy sprite position, velocity and orientation from existing sprite
045E36 FD 2A 90 5C 0304*       ld iy,(table_pointer) ; get existing sprite record
       04          
045E3B FD 27 01    0305*       ld hl,(iy+sprite_x)
045E3E DD 2F 01    0306*       ld (ix+sprite_x),hl
045E41 FD 27 04    0307*       ld hl,(iy+sprite_y)
045E44 DD 2F 04    0308*       ld (ix+sprite_y),hl
045E47             0309*   ; return to caller
045E47 DD CB 16 FE 0310*       set 7,(ix+sprite_type) ; set just spawned flag
045E4B 37          0311*       scf ; set carry flag to indicate success
045E4C C9          0312*       ret
045E4D             0313*   
045E4D             0314*   ; compute animation frame based on sprite_animation and sprite_heading
045E4D             0315*   ; inputs: table_pointer set to sprite record
045E4D             0316*   ; outputs: a, sprite_frame set to animation frame
045E4D             0317*   ; destroys: a,hl
045E4D             0318*   sprite_frame_heading_animation:
045E4D FD 7E 11    0319*       ld a,(iy+sprite_heading+1) ; we want the integer portion
045E50 CB 3F       0320*       srl a ; divide integer portion by 8
045E52 CB 3F       0321*       srl a
045E54 CB 3F       0322*       srl a
045E56 FD 66 22    0323*       ld h,(iy+sprite_animation)
045E59 2E 20       0324*       ld l,32 ; 32 orientation frames per animation
045E5B ED 6C       0325*       mlt hl ; hl = offset from base animation
045E5D 85          0326*       add a,l ; modulo256 since animation_frame is only 1 byte
045E5E FD 77 28    0327*       ld (iy+sprite_frame),a
045E61 C9          0328*       ret
045E62             0329*   ; end sprite_frame_heading_animation
045E62             0330*   
045E62             0331*   ; compute animation frame based on sprite_heading
045E62             0332*   ; inputs: table_pointer set to sprite record
045E62             0333*   ; outputs: a, sprite_frame set to animation frame
045E62             0334*   ; destroys: a,hl
045E62             0335*   sprite_frame_heading:
045E62 FD 7E 11    0336*       ld a,(iy+sprite_heading+1) ; we want the integer portion
045E65 CB 3F       0337*       srl a ; divide integer portion by 8
045E67 CB 3F       0338*       srl a
045E69 CB 3F       0339*       srl a
045E6B FD 77 28    0340*       ld (iy+sprite_frame),a
045E6E C9          0341*       ret
045E6F             0342*   ; end sprite_frame_heading
045E6F             0343*   
045E6F             0344*   ; load a sprite with animation bitmaps
045E6F             0345*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
045E6F             0346*   sprite_load_frames:
045E6F             0347*   ; back up input parameters
045E6F E5          0348*       push hl ; base bufferId
045E70 C5          0349*       push bc ; bc = number of frames
045E71 CD 13 1F 04 0350*       call vdu_sprite_clear_frames
045E75 C1          0351*       pop bc ; bc = number of frames
045E76 E1          0352*       pop hl ; = base bufferId
045E77             0353*   @load_frames:
045E77 C5          0354*       push bc ; back up loop counter
045E78 E5          0355*       push hl ; back up base bufferId
045E79 CD 55 20 04 0356*       call vdu_sprite_add_buff
045E7D E1          0357*       pop hl ; restore base bufferId
045E7E 23          0358*       inc hl ; bump it to the next frame
045E7F             0359*   ; decrement loop counter
045E7F C1          0360*       pop bc
045E80 0B          0361*       dec bc
045E81 79          0362*       ld a,c
045E82 B7          0363*       or a
045E83 C2 77 5E 04 0364*       jp nz,@load_frames
045E87 78          0365*       ld a,b
045E88 B7          0366*       or a
045E89 C2 77 5E 04 0367*       jp nz,@load_frames
045E8D C9          0368*       ret
045E8E             0369*   ; end sprite_load_frames
045E8E             0370*   
045E8E             0371*   dump_sprite_record:
045E8E             0372*       ; call vdu_home_cursor
045E8E CD 10 01 04 0373*       call printInline
045E92 69 64 3A 20 0374*       asciz "id:   "
       20 20 00    
045E99 DD 7E 00    0375*       ld a,(ix+sprite_id)
045E9C CD 5A 01 04 0376*       call printHexA
045EA0             0377*   
045EA0 CD 10 01 04 0378*       call printInline
045EA4 0D 0A 78 3A 0379*       asciz "\r\nx:   "
       20 20 20 00 
045EAC DD 27 01    0380*       ld hl,(ix+sprite_x)
045EAF CD 38 03 04 0381*       call print_s168_hl
045EB3             0382*   
045EB3 CD 10 01 04 0383*       call printInline
045EB7 0D 0A 79 3A 0384*       asciz "\r\ny:   "
       20 20 20 00 
045EBF DD 27 04    0385*       ld hl,(ix+sprite_y)
045EC2 CD 38 03 04 0386*       call print_s168_hl
045EC6             0387*   
045EC6 CD 10 01 04 0388*       call printInline
045ECA 0D 0A 78 76 0389*       asciz "\r\nxv:  "
       3A 20 20 00 
045ED2 DD 27 07    0390*       ld hl,(ix+sprite_xvel)
045ED5 CD 38 03 04 0391*       call print_s168_hl
045ED9             0392*   
045ED9 CD 10 01 04 0393*       call printInline
045EDD 0D 0A 79 76 0394*       asciz "\r\nyv:  "
       3A 20 20 00 
045EE5 DD 27 0A    0395*       ld hl,(ix+sprite_yvel)
045EE8 CD 38 03 04 0396*       call print_s168_hl
045EEC             0397*   
045EEC CD 10 01 04 0398*       call printInline
045EF0 0D 0A 76 3A 0399*       asciz "\r\nv:   "
       20 20 20 00 
045EF8 DD 27 0D    0400*       ld hl,(ix+sprite_vel)
045EFB CD 38 03 04 0401*       call print_s168_hl
045EFF             0402*   
045EFF CD 10 01 04 0403*       call printInline
045F03 0D 0A 68 64 0404*       asciz "\r\nhdg  "
       67 20 20 00 
045F0B DD 27 10    0405*       ld hl,(ix+sprite_heading)
045F0E CD 38 03 04 0406*       call print_s168_hl
045F12             0407*   
045F12 CD 10 01 04 0408*       call printInline
045F16 0D 0A 6F 72 0409*       asciz "\r\nori: "
       69 3A 20 00 
045F1E DD 27 13    0410*       ld hl,(ix+sprite_orientation)
045F21 CD 38 03 04 0411*       call print_s168_hl
045F25             0412*   
045F25 CD 10 01 04 0413*       call printInline
045F29 0D 0A 74 79 0414*       asciz "\r\ntyp: "
       70 3A 20 00 
045F31 DD 7E 16    0415*       ld a,(ix+sprite_type)
045F34 CD 5A 01 04 0416*       call printHexA
045F38             0417*   
045F38 CD 10 01 04 0418*       call printInline
045F3C 0D 0A 42 49 0419*       asciz "\r\nBId: "
       64 3A 20 00 
045F44 DD 27 17    0420*       ld hl,(ix+sprite_base_bufferId)
045F47 CD 37 01 04 0421*       call printHex24
045F4B             0422*   
045F4B CD 10 01 04 0423*       call printInline
045F4F 0D 0A 6D 50 0424*       asciz "\r\nmPg: "
       67 3A 20 00 
045F57 DD 27 1A    0425*       ld hl,(ix+sprite_move_program)
045F5A CD 37 01 04 0426*       call printHex24
045F5E             0427*   
045F5E CD 10 01 04 0428*       call printInline
045F62 0D 0A 63 6F 0429*       asciz "\r\ncol: "
       6C 3A 20 00 
045F6A DD 7E 1D    0430*       ld a,(ix+sprite_collisions)
045F6D CD B5 03 04 0431*       call printBin8
045F71             0432*   
045F71 CD 10 01 04 0433*       call printInline
045F75 0D 0A 73 7A 0434*       asciz "\r\nszx: "
       78 3A 20 00 
045F7D DD 7E 1E    0435*       ld a,(ix+sprite_dim_x)
045F80 CD 5A 01 04 0436*       call printHexA
045F84             0437*   
045F84 CD 10 01 04 0438*       call printInline
045F88 0D 0A 73 7A 0439*       asciz "\r\nszy: "
       79 3A 20 00 
045F90 DD 7E 1F    0440*       ld a,(ix+sprite_dim_y)
045F93 CD 5A 01 04 0441*       call printHexA
045F97             0442*   
045F97 CD 10 01 04 0443*       call printInline
045F9B 0D 0A 23 6F 0444*       asciz "\r\n#ori:"
       72 69 3A 00 
045FA3 DD 7E 20    0445*       ld a,(ix+sprite_num_orientations)
045FA6 CD 5A 01 04 0446*       call printHexA
045FAA             0447*   
045FAA CD 10 01 04 0448*       call printInline
045FAE 0D 0A 23 61 0449*       asciz "\r\n#ani:"
       6E 69 3A 00 
045FB6 DD 7E 21    0450*       ld a,(ix+sprite_num_animations)
045FB9 CD 5A 01 04 0451*       call printHexA
045FBD             0452*   
045FBD CD 10 01 04 0453*       call printInline
045FC1 0D 0A 61 6E 0454*       asciz "\r\nani: "
       69 3A 20 00 
045FC9 DD 7E 22    0455*       ld a,(ix+sprite_animation)
045FCC CD 5A 01 04 0456*       call printHexA
045FD0             0457*   
045FD0 CD 10 01 04 0458*       call printInline
045FD4 0D 0A 61 6E 0459*       asciz "\r\nanit:"
       69 74 3A 00 
045FDC DD 7E 23    0460*       ld a,(ix+sprite_animation_timer)
045FDF CD 5A 01 04 0461*       call printHexA
045FE3             0462*   
045FE3 CD 10 01 04 0463*       call printInline
045FE7 0D 0A 6D 76 0464*       asciz "\r\nmvt: "
       74 3A 20 00 
045FEF DD 7E 24    0465*       ld a,(ix+sprite_move_timer)
045FF2 CD 5A 01 04 0466*       call printHexA
045FF6             0467*   
045FF6 CD 10 01 04 0468*       call printInline
045FFA 0D 0A 6D 76 0469*       asciz "\r\nmvs: "
       73 3A 20 00 
046002 DD 7E 25    0470*       ld a,(ix+sprite_move_step)
046005 CD 5A 01 04 0471*       call printHexA
046009             0472*   
046009 CD 10 01 04 0473*       call printInline
04600D 0D 0A 70 74 0474*       asciz "\r\npts: "
       73 3A 20 00 
046015 DD 7E 26    0475*       ld a,(ix+sprite_points)
046018 CD 5A 01 04 0476*       call printHexA
04601C             0477*   
04601C CD 10 01 04 0478*       call printInline
046020 0D 0A 64 6D 0479*       asciz "\r\ndmg: "
       67 3A 20 00 
046028 DD 7E 27    0480*       ld a,(ix+sprite_shield_damage)
04602B CD 5A 01 04 0481*       call printHexA
04602F             0482*   
04602F CD 10 01 04 0483*       call printInline
046033 0D 0A 66 72 0484*       asciz "\r\nfrm: "
       6D 3A 20 00 
04603B DD 7E 28    0485*       ld a,(ix+sprite_frame)
04603E CD 5A 01 04 0486*       call printHexA
046042             0487*   
046042             0488*       ; call waitKeypress
046042 C9          0489*       ret
046043             0059        include "state.inc"
046043 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046100             0002*   
046100             0003*   ; Game state variables
046100 0E 61 04    0004*   game_state:  dl game_main_menu
046103             0005*   
046103             0006*   do_game:
046103 2A 00 61 04 0007*       ld hl,(game_state)   ; Load the current game state
046107             0008*       callHL                ; Call the corresponding state handler
046107 01 0D 61 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04610B C5          0002*M1     push bc ; which constitutes the return address
04610C E9          0003*M1     jp (hl) ; Jump to the address in HL
04610D             0004*M1 @@:
04610D C9          0009*       ret
04610E             0010*   
04610E             0011*   ; ========================
04610E             0012*   ; Main Game States
04610E             0013*   ; ========================
04610E             0014*   
04610E             0015*   game_main_menu:
04610E             0016*       ; Handle main menu options
04610E             0017*       ; Example: Check input for "Start Game"
04610E CD F6 61 04 0018*       call check_input_menu
046112 C2 17 61 04 0019*       jp nz, game_initialize ; Start game on selection
046116 C9          0020*       ret
046117             0021*   
046117             0022*   game_initialize:
046117             0023*   ; reset the sprite table
046117 CD B6 5C 04 0024*       call table_init
04611B AF          0025*       xor a
04611C 32 93 5C 04 0026*       ld (table_active_sprites),a
046120 21 00 5A 04 0027*       ld hl,table_base
046124 22 90 5C 04 0028*       ld (table_pointer),hl
046128             0029*   ; initialize sprites
046128 CD 01 5D 04 0030*       call sprites_init
04612C             0031*   ; initialize the first level
04612C 3E 00       0032*       ld a,tiles_dg
04612E CD 1A 55 04 0033*       call init_tileset
046132             0034*   ; initialize player
046132 21 00 00 00 0035*       ld hl,0
046136 22 00 58 04 0036*       ld (player_score),hl
04613A 2A 06 58 04 0037*       ld hl,(player_max_shields)
04613E 22 03 58 04 0038*       ld (player_shields),hl
046142 3E 03       0039*       ld a,3
046144 32 09 58 04 0040*       ld (player_ships),a
046148 CD 33 58 04 0041*       call player_init
04614C             0042*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04614C             0043*   ;     ld hl,enemies_dead
04614C             0044*   ;     ld (enemies_state),hl
04614C             0045*   ; ; END TODO
04614C             0046*   ; set the game state to playing
04614C 21 56 61 04 0047*       ld hl,game_playing
046150 22 00 61 04 0048*       ld (game_state), hl
046154 C9          0049*       ret
046155             0050*   ; done initializing
046155 C9          0051*       ret
046156             0052*   
046156             0053*   game_playing:
046156             0054*   ; Main gameplay loop
046156 CD 10 65 04 0055*       call tiles_plot
04615A CD C7 61 04 0056*       call do_player
04615E CD E0 61 04 0057*       call do_enemies
046162             0058*   ; update UI: TODO make this a standalone function
046162 CD 1B 59 04 0059*       call print_score
046166 C9          0060*       ret
046167             0061*   
046167             0062*   game_paused:
046167             0063*       ; Pause menu logic
046167 CD F9 61 04 0064*       call check_input_pause
04616B C2 56 61 04 0065*       jp nz, game_playing ; Resume game
04616F CA 0E 61 04 0066*       jp z, game_main_menu ; Exit to main menu
046173 C9          0067*       ret
046174             0068*   
046174             0069*   game_level_transition:
046174             0070*       ; Handle level transitions
046174 CD FA 61 04 0071*       call load_next_level
046178 21 56 61 04 0072*       ld hl, game_playing
04617C 22 00 61 04 0073*       ld (game_state), hl
046180 C9          0074*       ret
046181             0075*   
046181             0076*   game_over:
046181             0077*       ; Display game over screen
046181 CD FB 61 04 0078*       call display_game_over
046185 C2 0E 61 04 0079*       jp nz, game_main_menu ; Return to main menu on input
046189 C9          0080*       ret
04618A             0081*   
04618A             0082*   game_victory:
04618A             0083*       ; Display victory screen
04618A CD FC 61 04 0084*       call display_victory
04618E C2 0E 61 04 0085*       jp nz, game_main_menu ; Return to main menu on input
046192 C9          0086*       ret
046193             0087*   
046193             0088*   ; ========================
046193             0089*   ; Supporting States
046193             0090*   ; ========================
046193             0091*   
046193             0092*   game_loading:
046193             0093*       ; Show loading screen while preparing assets
046193 CD FD 61 04 0094*       call load_resources
046197 21 17 61 04 0095*       ld hl, game_initialize
04619B 22 00 61 04 0096*       ld (game_state), hl
04619F C9          0097*       ret
0461A0             0098*   
0461A0             0099*   game_cutscene:
0461A0             0100*       ; Play a non-interactive cutscene
0461A0 CD FE 61 04 0101*       call play_cutscene
0461A4 C2 56 61 04 0102*       jp nz, game_playing ; Return to gameplay after cutscene
0461A8 C9          0103*       ret
0461A9             0104*   
0461A9             0105*   game_inventory:
0461A9             0106*       ; Open inventory or shop
0461A9 CD FF 61 04 0107*       call display_inventory
0461AD C2 56 61 04 0108*       jp nz, game_playing ; Return to gameplay after inventory close
0461B1 C9          0109*       ret
0461B2             0110*   
0461B2             0111*   game_map:
0461B2             0112*       ; Display map or quest
0461B2 CD 00 62 04 0113*       call display_map
0461B6 C2 56 61 04 0114*       jp nz, game_playing ; Return to gameplay after map close
0461BA C9          0115*       ret
0461BB             0116*   
0461BB             0117*   game_exit:
0461BB             0118*       ; Handle exit logic
0461BB CD 01 62 04 0119*       call save_game
0461BF C3 02 62 04 0120*       jp exit_game         ; Safely shut down
0461C3 C9          0121*       ret
0461C4             0122*   
0461C4             0123*   ; ========================
0461C4             0124*   ; Sub-state branching (Example for player state)
0461C4             0125*   ; ========================
0461C4             0126*   
0461C4 D2 61 04    0127*   player_state:  dl player_alive ; Player state variable
0461C7             0128*   
0461C7             0129*   do_player:
0461C7 2A C4 61 04 0130*       ld hl,(player_state)
0461CB             0131*       callHL                ; Call the corresponding player state
0461CB 01 D1 61 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0461CF C5          0002*M1     push bc ; which constitutes the return address
0461D0 E9          0003*M1     jp (hl) ; Jump to the address in HL
0461D1             0004*M1 @@:
0461D1 C9          0132*       ret
0461D2             0133*   
0461D2             0134*   player_alive:
0461D2 CD 80 58 04 0135*       call player_input     ; Handle player input
0461D6 CD 29 54 04 0136*       call laser_control    ; Handle laser movement and collision detection
0461DA C9          0137*       ret
0461DB             0138*   
0461DB             0139*   player_dead:
0461DB CD 29 54 04 0140*       call laser_control    ; Handle laser movement and collision detection
0461DF C9          0141*       ret
0461E0             0142*   
0461E0             0143*   do_enemies:
0461E0 2A EB 61 04 0144*       ld hl,(enemies_state)
0461E4             0145*       callHL
0461E4 01 EA 61 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0461E8 C5          0002*M1     push bc ; which constitutes the return address
0461E9 E9          0003*M1     jp (hl) ; Jump to the address in HL
0461EA             0004*M1 @@:
0461EA C9          0146*       ret
0461EB F1 61 04    0147*   enemies_state: dl enemies_alive
0461EE             0148*   
0461EE             0149*   enemies_dead:
0461EE C9          0150*       ret
0461EF             0151*   
0461EF             0152*   enemies_respawning:
0461EF C9          0153*       ret
0461F0             0154*   
0461F0             0155*   enemies_respawn:
0461F0 C9          0156*       ret
0461F1             0157*   
0461F1             0158*   enemies_alive:
0461F1 CD 33 21 04 0159*       call move_enemies
0461F5 C9          0160*       ret
0461F6             0161*   
0461F6             0162*   check_input_menu:
0461F6 C9          0163*       ret
0461F7             0164*   
0461F7             0165*   update_game_world:
0461F7 C9          0166*       ret
0461F8             0167*   
0461F8             0168*   check_game_events:
0461F8 C9          0169*       ret
0461F9             0170*   
0461F9             0171*   check_input_pause:
0461F9 C9          0172*       ret
0461FA             0173*   
0461FA             0174*   load_next_level:
0461FA C9          0175*       ret
0461FB             0176*   
0461FB             0177*   display_game_over:
0461FB C9          0178*       ret
0461FC             0179*   
0461FC             0180*   display_victory:
0461FC C9          0181*       ret
0461FD             0182*   
0461FD             0183*   load_resources:
0461FD C9          0184*       ret
0461FE             0185*   
0461FE             0186*   play_cutscene:
0461FE C9          0187*       ret
0461FF             0188*   
0461FF             0189*   display_inventory:
0461FF C9          0190*       ret
046200             0191*   
046200             0192*   display_map:
046200 C9          0193*       ret
046201             0194*   
046201             0195*   save_game:
046201 C9          0196*       ret
046202             0197*   
046202             0198*   exit_game:
046202 C9          0199*       ret
046203             0200*   
046203             0060        include "targeting.inc"
046203 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046300             0002*   
046300             0003*   ; compute orientation to player
046300             0004*   ; based on relative positions
046300             0005*   ; returns: h.l 16.8 fixed angle256 to player
046300             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
046300             0007*   ;    representing delta-x/y *to* target respectively
046300             0008*   orientation_to_player:
046300 FD 2A 90 5C 0009*       ld iy,(table_pointer)
       04          
046305 FD 07 01    0010*       ld bc,(iy+sprite_x)
046308 FD 17 04    0011*       ld de,(iy+sprite_y)
04630B DD 2A 0B 58 0012*       ld ix,(player_x)
       04          
046310 FD 2A 0E 58 0013*       ld iy,(player_y)
       04          
046315 CD FD 0B 04 0014*       call dxy168
046319 C5          0015*       push bc ; dx
04631A D5          0016*       push de ; dy
04631B CD 59 0C 04 0017*       call atan2_168fast ; uh.l = angle to player
04631F 22 2B 63 04 0018*       ld (Bearing_t),hl
046323 D1          0019*       pop de ; dy
046324 C1          0020*       pop bc ; dx
046325 FD 2A 90 5C 0021*       ld iy,(table_pointer)
       04          
04632A C9          0022*       ret
04632B             0023*   ; end orientation_to_player
04632B             0024*   
04632B             0025*   ; targeting_computer variables fixed 16.8 format
04632B 00 00 00    0026*   Bearing_t: dl 0x000000 ; angle to target
04632E 00 00 00    0027*   Heading_t: dl 0x000000 ; angle of target motion
046331 00 00 00    0028*   Vp: dl 0x000000 ; velocity of projectile
046334 00 00 00    0029*   Vp_x: dl 0x000000 ; x component of projectile velocity
046337 00 00 00    0030*   Vp_y: dl 0x000000 ; y component of projectile velocity
04633A 00 00 00    0031*   Vt: dl 0x000000 ; velocity of target
04633D 00 00 00    0032*   Vt_x: dl 0x000000 ; x component of target velocity
046340 00 00 00    0033*   Vt_y: dl 0x000000 ; y component of target velocity
046343             0034*   
046343 00 00 00    0035*   Heading_p: dl 0x000000 ; angle of projectile motion
046346             0036*   
046346             0037*   ; Inputs:   Bearing_t, Vp
046346             0038*   ; Note:     a call to orientation_to_player provides Bearing_t
046346             0039*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
046346             0040*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
046346             0041*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
046346             0042*   targeting_computer:
046346             0043*   ; compute target velocity from x,y component velocities
046346 ED 4B 11 58 0044*       ld bc,(player_xvel)
       04          
04634B ED 5B 14 58 0045*       ld de,(player_yvel)
       04          
046350 21 00 FF FF 0046*       ld hl,-1*256 ; account for vertical ground movement
046354 19          0047*       add hl,de
046355 EB          0048*       ex de,hl ; ud.e = player_yvel-1
046356 CD DE 0B 04 0049*       call cartesian_to_polar ; uh.l = Heading_t, ud.e = Vt
04635A 22 2E 63 04 0050*       ld (Heading_t),hl
04635E ED 53 3A 63 0051*       ld (Vt),de
       04          
046363             0052*   
046363             0053*   ; Bearing_t is already set by orientation_to_player
046363             0054*   ; compute Heading_t-Bearing_t
046363 ED 5B 2B 63 0055*       ld de,(Bearing_t)
       04          
046368 A7          0056*       and a ; clear carry
046369 ED 52       0057*       sbc hl,de ; Uh.l = Heading_t-Bearing_t
04636B             0058*   
04636B             0059*   ; compute sin(Heading_t-Bearing_t)
04636B CD 8E 0B 04 0060*       call sin168 ; uh.l = sin(Heading_t-Bearing_t)
04636F             0061*   
04636F             0062*   ; compute (Vt*sin(Heading_t-Bearing_t))
04636F ED 5B 3A 63 0063*       ld de,(Vt)
       04          
046374 CD CA 0A 04 0064*       call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
046378             0065*   
046378             0066*   ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
046378 ED 5B 31 63 0067*       ld de,(Vp)
       04          
04637D CD 2E 0B 04 0068*       call sdiv168 ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
046381             0069*   ; answer is in radians, convert to degrees256
046381 11 BE 28 00 0070*       ld de,0x0028BE ; 40.74 = 57.29578*256/360
046385 CD CA 0A 04 0071*       call smul168 ; uh.l = angle in degrees256
046389             0072*   
046389             0073*   ; add lead angle to target bearing
046389 ED 5B 2B 63 0074*       ld de,(Bearing_t)
       04          
04638E 19          0075*       add hl,de ; h.l = lead angle+target bearing
04638F E5          0076*       push hl
046390             0077*   
046390             0078*   ; compute component projectile velocities
046390 ED 5B 31 63 0079*       ld de,(Vp)
       04          
046395 CD A9 0B 04 0080*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
046399 ED 43 34 63 0081*       ld (Vp_x),bc
       04          
04639E ED 53 37 63 0082*       ld (Vp_y),de
       04          
0463A3 E1          0083*       pop hl ; uh.l = lead angle+target bearing
0463A4             0084*   
0463A4 22 43 63 04 0085*       ld (Heading_p),hl
0463A8             0086*   
0463A8             0087*       PUSH_ALL
0463A8 08          0001*M1     ex af,af'
0463A9 D9          0002*M1     exx
0463AA F5          0003*M1     push af
0463AB E5          0004*M1     push hl
0463AC C5          0005*M1     push bc
0463AD D5          0006*M1     push de
0463AE             0007*M1 
0463AE 08          0008*M1     ex af,af'
0463AF D9          0009*M1     exx
0463B0 F5          0010*M1     push af
0463B1 E5          0011*M1     push hl
0463B2 C5          0012*M1     push bc
0463B3 D5          0013*M1     push de
0463B4 DD E5       0014*M1     push ix
0463B6 FD E5       0015*M1     push iy
0463B8 CD 00 19 04 0088*       call vdu_home_cursor
0463BC CD 10 01 04 0089*       call printInline
0463C0 42 74 20 00 0090*       asciz "Bt "
0463C4 2A 2B 63 04 0091*       ld hl,(Bearing_t)
0463C8 CD 38 03 04 0092*       call print_s168_hl
0463CC             0093*   
0463CC CD 10 01 04 0094*       call printInline
0463D0 0D 0A 48 74 0095*       asciz "\r\nHt "
       20 00       
0463D6 2A 2E 63 04 0096*       ld hl,(Heading_t)
0463DA CD 38 03 04 0097*       call print_s168_hl
0463DE             0098*   
0463DE CD 10 01 04 0099*       call printInline
0463E2 0D 0A 56 74 0100*       asciz "\r\nVt "
       20 00       
0463E8 2A 3A 63 04 0101*       ld hl,(Vt)
0463EC CD 38 03 04 0102*       call print_s168_hl
0463F0             0103*   
0463F0 CD 10 01 04 0104*       call printInline
0463F4 0D 0A 56 74 0105*       asciz "\r\nVtx"
       78 00       
0463FA 2A 11 58 04 0106*       ld hl,(player_xvel)
0463FE CD 38 03 04 0107*       call print_s168_hl
046402             0108*   
046402 CD 10 01 04 0109*       call printInline
046406 0D 0A 56 74 0110*       asciz "\r\nVty"
       79 00       
04640C 2A 14 58 04 0111*       ld hl,(player_yvel)
046410 CD 38 03 04 0112*       call print_s168_hl
046414             0113*   
046414 CD 10 01 04 0114*       call printInline
046418 0D 0A 48 70 0115*       asciz "\r\nHp "
       20 00       
04641E 2A 43 63 04 0116*       ld hl,(Heading_p)
046422 CD 38 03 04 0117*       call print_s168_hl
046426             0118*   
046426 CD 10 01 04 0119*       call printInline
04642A 0D 0A 56 70 0120*       asciz "\r\nVp "
       20 00       
046430 2A 31 63 04 0121*       ld hl,(Vp)
046434 CD 38 03 04 0122*       call print_s168_hl
046438             0123*   
046438 CD 10 01 04 0124*       call printInline
04643C 0D 0A 56 70 0125*       asciz "\r\nVpx"
       78 00       
046442 2A 34 63 04 0126*       ld hl,(Vp_x)
046446 CD 38 03 04 0127*       call print_s168_hl
04644A             0128*   
04644A CD 10 01 04 0129*       call printInline
04644E 0D 0A 56 70 0130*       asciz "\r\nVpy"
       79 00       
046454 2A 37 63 04 0131*       ld hl,(Vp_y)
046458 CD 38 03 04 0132*       call print_s168_hl
04645C             0133*   
04645C             0134*       POP_ALL
04645C FD E1       0001*M1     pop iy
04645E DD E1       0002*M1     pop ix
046460 D1          0003*M1     pop de
046461 C1          0004*M1     pop bc
046462 E1          0005*M1     pop hl
046463 F1          0006*M1     pop af
046464 08          0007*M1     ex af,af'
046465 D9          0008*M1     exx
046466             0009*M1 
046466 D1          0010*M1     pop de
046467 C1          0011*M1     pop bc
046468 E1          0012*M1     pop hl
046469 F1          0013*M1     pop af
04646A 08          0014*M1     ex af,af'
04646B D9          0015*M1     exx
04646C C9          0135*       ret
04646D             0061        include "tiles.inc"
04646D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046500             0002*   
046500             0003*   ; ######### TILES #########
046500             0004*   ; TODO: implement buffering of tiles here when there isn't other stuff to do
046500             0005*   ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
046500 00 00 00    0006*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046503 00 00 00    0007*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046506             0008*       ; initialize to zero for a maximum of 256 rows in a level
046506 00          0009*   tiles_cols: db 0 ; number of tile columns in the current level
046507             0010*   
046507 00 00 00    0011*   cur_baseBufferId: dl 0
04650A 00 00 00    0012*   tiles_x_plot: dl 0
04650D F1 FF FF    0013*   tiles_y_plot: dl -15
046510             0014*   
046510             0015*   tiles_plot:
046510             0016*   ; set gfx viewport to playing field window
046510 01 00 00 00 0017*       ld bc,field_left
046514 11 00 00 00 0018*       ld de,field_top
046518 DD 21 FF 00 0019*       ld ix,field_right
       00          
04651D FD 21 7F 01 0020*       ld iy,field_bottom
       00          
046522 CD EB 19 04 0021*       call vdu_set_gfx_viewport
046526             0022*   ; move the background down one pixel
046526 3E 02       0023*       ld a,2 ; current gfx viewport
046528 2E 02       0024*       ld l,2 ; direction=down
04652A 26 01       0025*       ld h,1 ; speed=1 px
04652C CD 63 19 04 0026*       call vdu_scroll_down
046530             0027*   ; set gfx viewport to one scanline to optimise plotting tiles
046530 01 00 00 00 0028*       ld bc,0 ; leftmost x-coord
046534 11 00 00 00 0029*       ld de,0 ; topmost y-coord
046538 DD 21 FF 00 0030*       ld ix,255 ; rightmost x-coord
       00          
04653D FD 21 00 00 0031*       ld iy,0 ; bottommost y-coord
       00          
046542 CD EB 19 04 0032*       call vdu_set_gfx_viewport
046546             0033*   ; plot the background
046546 CD 4E 66 04 0034*       call bg_plot
04654A             0035*   ; initialize tiles loop
04654A 21 00 00 00 0036*       ld hl,0 ; init plotting x-coordinate
04654E 22 0A 65 04 0037*       ld (tiles_x_plot),hl
046552 2A 00 65 04 0038*       ld hl,(tiles_row_defs)
046556 3A 06 65 04 0039*       ld a,(tiles_cols)
04655A 47          0040*       ld b,a ; column loop counter
04655B             0041*   @loop:
04655B C5          0042*       push bc ; save the loop counter
04655C             0043*   ; read the tile defintion for the current column
04655C 7E          0044*       ld a,(hl) ; a has tile definition
04655D E5          0045*       push hl ; save pointer to tile definition
04655E 2A 07 65 04 0046*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046562 6F          0047*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046563 CD 38 1A 04 0048*       call vdu_buff_select ; tile bitmap buffer is now active
046567             0049*   ; plot the active bitmap
046567 ED 4B 0A 65 0050*       ld bc,(tiles_x_plot)
       04          
04656C ED 5B 0D 65 0051*       ld de,(tiles_y_plot)
       04          
046571 CD 20 1E 04 0052*       call vdu_plot_bmp
046575             0053*   ; bump x-coords the width of one tile and save it
046575 2A 0A 65 04 0054*       ld hl,(tiles_x_plot)
046579 01 10 00 00 0055*       ld bc,16
04657D 09          0056*       add hl,bc
04657E 22 0A 65 04 0057*       ld (tiles_x_plot),hl
046582             0058*   ; prepare to loop to next column
046582 E1          0059*       pop hl ; get back pointer to tile def
046583 23          0060*       inc hl ; bump it to the next column
046584 C1          0061*       pop bc ; snag our loop counter
046585 10 D4       0062*       djnz @loop
046587             0063*   ; increment tiles plotting y-coordinate
046587             0064*   ; when it hits zero, we go to next row of tiles in the map
046587             0065*   ; (we use ix b/c we want to preserve hl for the next step)
046587 DD 21 0D 65 0066*       ld ix,tiles_y_plot
       04          
04658C DD 34 00    0067*       inc (ix)
04658F C0          0068*       ret nz
046590             0069*   ; do active tiles
046590 E5          0070*       push hl ; save pointer to next row tile def
046591 CD C3 65 04 0071*       call do_active_tiles
046595 E1          0072*       pop hl ; get back pointer to next row tile def
046596             0073*   ; time to bump tiles_row_defs to next row
046596             0074*   ; (hl was already there at the end of the loop)
046596 22 00 65 04 0075*       ld (tiles_row_defs),hl
04659A             0076*   ; reset coords to plot next row of tiles
04659A 21 00 00 00 0077*       ld hl,0
04659E 22 0A 65 04 0078*       ld (tiles_x_plot),hl
0465A2 21 F1 FF FF 0079*       ld hl,-15
0465A6 22 0D 65 04 0080*       ld (tiles_y_plot),hl
0465AA             0081*   ; decrement tiles row counter
0465AA 21 03 65 04 0082*       ld hl,tiles_row
0465AE 35          0083*       dec (hl)
0465AF C0          0084*       ret nz
0465B0             0085*   @inc_level:
0465B0             0086*   ; increase the number of enemy sprites
0465B0 3A 32 21 04 0087*       ld a,(max_enemy_sprites)
0465B4 3C          0088*       inc a
0465B5 FE 10       0089*       cp table_max_records ; if we're at the global limit,skip ahead at max level
0465B7 CA 6C 55 04 0090*       jp z,next_level
0465BB 32 32 21 04 0091*       ld (max_enemy_sprites),a ; otherwise save the updated number
0465BF C3 6C 55 04 0092*       jp next_level
0465C3             0093*   ; end tiles_plot
0465C3             0094*   
0465C3             0095*   do_active_tiles:
0465C3             0096*   ; initialize tiles loop
0465C3 21 00 00 00 0097*       ld hl,0 ; init plotting x-coordinate
0465C7 22 0A 65 04 0098*       ld (tiles_x_plot),hl
0465CB 2A 00 65 04 0099*       ld hl,(tiles_row_defs)
0465CF 3A 06 65 04 0100*       ld a,(tiles_cols)
0465D3 47          0101*       ld b,a ; column loop counter
0465D4             0102*   @loop:
0465D4 C5          0103*       push bc ; save the loop counter
0465D5             0104*   ; read the tile defintion for the current column
0465D5 7E          0105*       ld a,(hl) ; a has tile definition
0465D6 E5          0106*       push hl ; save pointer to tile definition
0465D7 B7          0107*       or a ; check for null tile
0465D8 CA F4 65 04 0108*       jp z,@next_tile ; skip to next tile if null
0465DC FE 11       0109*       cp 17 ; carry reset if active tile
0465DE D2 F4 65 04 0110*       jp nc,@next_tile ; skip to next tile if not active
0465E2             0111*   ; call the tile activation routine
0465E2 21 4F 66 04 0112*       ld hl,tile_activation_routines
0465E6 16 03       0113*       ld d,3 ; three bytes per table entry
0465E8 5F          0114*       ld e,a ; a is the tile type
0465E9 ED 5C       0115*       mlt de ; de is now the offset to the table entry
0465EB 19          0116*       add hl,de ; hl is now the address of the table entry
0465EC ED 27       0117*       ld hl,(hl) ; hl is now the activation routine address
0465EE             0118*       callHL ; call the activation routine
0465EE 01 F4 65 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0465F2 C5          0002*M1     push bc ; which constitutes the return address
0465F3 E9          0003*M1     jp (hl) ; Jump to the address in HL
0465F4             0004*M1 @@:
0465F4             0119*   @next_tile:
0465F4             0120*   ; bump x-coords the width of one tile and save it
0465F4 2A 0A 65 04 0121*       ld hl,(tiles_x_plot)
0465F8 01 10 00 00 0122*       ld bc,16
0465FC 09          0123*       add hl,bc
0465FD 22 0A 65 04 0124*       ld (tiles_x_plot),hl
046601             0125*   ; prepare to loop to next column
046601 E1          0126*       pop hl ; get back pointer to tile def
046602 23          0127*       inc hl ; bump it to the next column
046603 C1          0128*       pop bc ; snag our loop counter
046604 10 CE       0129*       djnz @loop
046606 C9          0130*       ret ; done
046607             0131*   ; end do_active_tiles
046607             0132*   
046607             0133*   ; create a new sprite at the same location as an active tile
046607             0134*   ; inputs: hl = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
046607             0135*   spawn_sprite_from_tile:
046607 CD 14 5E 04 0136*       call spawn_sprite
04660B D0          0137*       ret nc ; no carry means no free sprite slots, so we go home
04660C             0138*   ; update the new sprite's position and make it visible
04660C 2A 0A 65 04 0139*       ld hl,(tiles_x_plot)
046610             0140*       hlu_mul256
046610 29          0001*M1     add hl,hl ; * 2
046611 29          0002*M1     add hl,hl ; * 4
046612 29          0003*M1     add hl,hl ; * 8
046613 29          0004*M1     add hl,hl ; * 16
046614 29          0005*M1     add hl,hl ; * 32
046615 29          0006*M1     add hl,hl ; * 64
046616 29          0007*M1     add hl,hl ; * 128
046617 29          0008*M1     add hl,hl ; * 256
046618 E5          0141*       push hl
046619 C1          0142*       pop bc
04661A DD 0F 01    0143*       ld (ix+sprite_x),bc
04661D 11 00 FF FF 0144*       ld de,-1*256 ; TODO: implement y-coord for reals
046621 DD 1F 04    0145*       ld (ix+sprite_y),de
046624 21 00 01 00 0146*       ld hl,1*256
046628 DD 2F 0A    0147*       ld (ix+sprite_yvel),hl
04662B             0148*   ; return to caller
04662B 37          0149*       scf ; set carry flag to indicate success
04662C C9          0150*       ret
04662D             0151*   ; end spawn_sprite_from_tile
04662D             0152*   
04662D             0153*   move_active_tile:
04662D             0154*   ; y-axis movement
04662D FD 27 04    0155*       ld hl,(iy+sprite_y)
046630 FD 17 0A    0156*       ld de,(iy+sprite_yvel)
046633 19          0157*       add hl,de
046634 FD 2F 04    0158*       ld (iy+sprite_y),hl
046637             0159*   ; detect screen edge collisions
046637 AF          0160*       xor a ; reset screen edge collision flag and clear carry
046638 32 94 5C 04 0161*       ld (sprite_screen_edge),a
04663C             0162*   ; y-axis bottom is all we need to test
04663C 11 00 91 FE 0163*       ld de,-sprite_bottom*256
046640 ED 5A       0164*       adc hl,de
046642 F2 47 66 04 0165*       jp p,@bottom ; scrolled off screen so deactivate
046646 C9          0166*       ret ; still on screen so do nothing further
046647             0167*   @bottom:
046647 3E 04       0168*       ld a,collide_bottom
046649 32 94 5C 04 0169*       ld (sprite_screen_edge),a
04664D C9          0170*       ret
04664E             0171*   
04664E             0172*   
04664E             0173*   ; bg_y_plot: dl -1
04664E             0174*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
04664E             0175*   
04664E             0176*   bg_plot: ; TODO: implement this
04664E             0177*   ; ; load current bg tile bufferId as default
04664E             0178*   ;     ld hl,(bg_bufferId)
04664E             0179*   ; ; check whether it is time for a new background tile
04664E             0180*   ;     ld a,(bg_y_plot)
04664E             0181*   ;     inc a
04664E             0182*   ;     ld (bg_y_plot),a
04664E             0183*   ;     jp nz,@F ; not time for a new tile so draw current one
04664E             0184*   ; ; load the next background tile
04664E             0185*   ;     ld hl,BUF_STATION_BG_00
04664E             0186*   ;     call rand_8
04664E             0187*   ;     and %0000011
04664E             0188*   ;     add a,l
04664E             0189*   ;     ld l,a
04664E             0190*   ;     ld a,0
04664E             0191*   ;     adc a,h
04664E             0192*   ;     ld h,a
04664E             0193*   ;     ld (bg_bufferId),hl
04664E             0194*   ; @@:
04664E             0195*   ;     call vdu_buff_select
04664E             0196*   ;     ld bc,0
04664E             0197*   ;     ld de,(bg_y_plot)
04664E             0198*   ;     inc de
04664E             0199*   ;     call vdu_plot_bmp
04664E             0200*   ; all done
04664E C9          0201*       ret
04664F             0202*   
04664F             0203*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
04664F             0204*   tile_pad_small: equ 1
04664F             0205*   tile_pad_med: equ 2
04664F             0206*   tile_pad_large: equ 3
04664F             0207*   tile_pad_huge: equ 4
04664F             0208*   tile_turret_fireball: equ 5
04664F             0209*   tile_laser_turret: equ 6
04664F             0210*   tile_twin_laser_turret: equ 7
04664F             0211*   tile_gatling_turret: equ 8
04664F             0212*   tile_electrode_r: equ 9
04664F             0213*   tile_electrode_u: equ 10
04664F             0214*   tile_piston_r: equ 11
04664F             0215*   tile_piston_u: equ 12
04664F             0216*   tile_spark_r: equ 13
04664F             0217*   tile_spark_u: equ 14
04664F             0218*   tile_flame_r: equ 15
04664F             0219*   tile_flame_u: equ 16
04664F             0220*   
04664F             0221*   active_tile_timer: equ 24 ; 2/10ths of a second
04664F             0222*   tile_activation_routines:
04664F 82 66 04    0223*       dl activate_null_tile ; dummy spacer since tiled is 1-based
046652 13 67 04    0224*       dl activate_pad_small
046655 82 66 04    0225*       dl activate_null_tile  ;  activate_pad_med
046658 82 66 04    0226*       dl activate_null_tile  ;  activate_pad_large
04665B 82 66 04    0227*       dl activate_null_tile  ;  activate_pad_huge
04665E 13 68 04    0228*       dl activate_turret_fireball
046661 82 66 04    0229*       dl activate_null_tile  ;  activate_laser_turret
046664 82 66 04    0230*       dl activate_null_tile  ;  activate_twin_laser_turret
046667 82 66 04    0231*       dl activate_null_tile  ;  activate_gatling_turret
04666A 82 66 04    0232*       dl activate_null_tile  ;  activate_electrode_r
04666D 82 66 04    0233*       dl activate_null_tile  ;  activate_electrode_u
046670 82 66 04    0234*       dl activate_null_tile  ;  activate_piston_r
046673 82 66 04    0235*       dl activate_null_tile  ;  activate_piston_u
046676 82 66 04    0236*       dl activate_null_tile  ;  activate_spark_r
046679 82 66 04    0237*       dl activate_null_tile  ;  activate_spark_u
04667C 82 66 04    0238*       dl activate_null_tile  ;  activate_flame_r
04667F 82 66 04    0239*       dl activate_null_tile  ;  activate_flame_u
046682             0240*   ; end tile_activation_routines
046682             0241*   
046682             0242*   activate_null_tile:
046682 C9          0243*       ret ; dummy routine, do nothing
046683             0244*   
046683             0245*   ; ld_act_laser_turret:
046683             0246*   ;     ; call sprite_variables_to_stack
046683             0247*   
046683             0248*   ;     ld hl,move_laser_turret
046683             0249*   ;     ld (sprite_move_program),hl
046683             0250*   
046683             0251*   ;     xor a
046683             0252*   ;     ld (sprite_animation),a
046683             0253*   ;     ld (sprite_move_step),a
046683             0254*   
046683             0255*   ;     call rand_8     ; snag a random number
046683             0256*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
046683             0257*   ;     add a,64 ; range is now 64-127
046683             0258*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046683             0259*   
046683             0260*   ;     ld a,%10 ; collides with laser but not player
046683             0261*   ;     ld (iy+sprite_collisions),a
046683             0262*   
046683             0263*   ;     ld a,#10 ; BCD
046683             0264*   ;     ld (sprite_points),a
046683             0265*   ;     ld a,0 ; binary
046683             0266*   ;     ld (sprite_shield_damage),a
046683             0267*   
046683             0268*   ;     ld hl,tile_turret_fireball ; dt_ld_act loads this to sprite_base_bufferId
046683             0269*   ;     jp dt_ld_act
046683             0270*   
046683             0271*   
046683             0272*   ; move_laser_turret:
046683             0273*   ; ; compute orientation to player
046683             0274*   ;     call orientation_to_player
046683             0275*   ; ; h.l 8.8 fixed angle256 to player
046683             0276*   ; ; bc and de as signed 16-bit integers
046683             0277*   ; ; representing delta-x/y *to* target respectively
046683             0278*   ;     ld (Bearing_t),hl
046683             0279*   ;     ld hl,0x0400
046683             0280*   ;     ld (Vp),hl
046683             0281*   ;     call targeting_computer
046683             0282*   ;     ld (sprite_heading),hl ; store bearing to player
046683             0283*   ; ; is it time to launch a fireball?
046683             0284*   ;     ld hl,sprite_move_timer
046683             0285*   ;     dec (hl)
046683             0286*   ;     jp nz,move_laser_turret_boilerplate
046683             0287*   ;     call fireballs_init
046683             0288*   ;     ; reset move timer so can fire again if player doesn't take us out
046683             0289*   ;     call rand_8     ; snag a random number
046683             0290*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
046683             0291*   ;     add a,64 ; range is now 64-127
046683             0292*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046683             0293*   ; move_laser_turret_boilerplate:
046683             0294*   ;     call move_active_tiles
046683             0295*   ;     call check_collisions
046683             0296*   ;     ret
046683             0297*   
046683             0298*   
046683             0299*   ; fireballs_init:
046683             0300*   ;     ; call sprite_variables_to_stack
046683             0301*   
046683             0302*   ;     ld hl,enemy_fireball
046683             0303*   ;     ld (sprite_base_bufferId),hl
046683             0304*   
046683             0305*   ;     ld hl,move_fireballs
046683             0306*   ;     ld (sprite_move_program),hl
046683             0307*   
046683             0308*   ;     ld a,%11 ; collides with laser and player
046683             0309*   ;     ld (iy+sprite_collisions),a
046683             0310*   
046683             0311*   ;     ld hl,(Vp)
046683             0312*   ;     ld (sprite_vel),hl
046683             0313*   ;     ld hl,(Vp_x)
046683             0314*   ;     ld (sprite_xvel),hl
046683             0315*   ;     ld hl,(Vp_y)
046683             0316*   ;     inc h ; account for ground movement
046683             0317*   ;     ld (sprite_yvel),hl
046683             0318*   
046683             0319*   ;     xor a ; zero a
046683             0320*   ;     ld (sprite_animation),a
046683             0321*   ;     ld (sprite_move_step),a
046683             0322*   ;     ld (sprite_move_timer),a
046683             0323*   
046683             0324*   ;     ld a,6 ; 1/10th of a second timer
046683             0325*   ;     ld (sprite_animation_timer),a
046683             0326*   
046683             0327*   ;     ld a,0x00 ; BCD
046683             0328*   ;     ld (sprite_points),a
046683             0329*   ;     ld a,1 ; binary
046683             0330*   ;     ld (sprite_shield_damage),a
046683             0331*   
046683             0332*   ;     call table_add_record ; plops that on the sprite stack for later
046683             0333*   ;     ; call sprite_variables_from_stack ; come back to where we started
046683             0334*   ;     ret
046683             0062        include "tile_pad_small.inc"
046683 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046700             0002*   pad_small_defaults:
046700 01          0003*       db tile_pad_small       ; type
046701 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
046704 22 67 04    0005*       dl move_pad_small       ; move_program
046707 02          0006*       db collides_with_laser  ; collisions
046708 10          0007*       db 16                   ; dim_x
046709 10          0008*       db 16                   ; dim_y
04670A 01          0009*       db 1                    ; num_orientations
04670B 01          0010*       db 1                    ; num_animations
04670C 00          0011*       db 0                    ; animation
04670D 00          0012*       db 0                    ; animation_timer
04670E 18          0013*       db 24                   ; move_timer
04670F 00          0014*       db 0                    ; move_step
046710 05          0015*       db 5                    ; points
046711 00          0016*       db 0                    ; shield_damage
046712 00          0017*       db 0                    ; animation_frame
046713             0018*   
046713             0019*   activate_pad_small:
046713 21 00 67 04 0020*       ld hl,pad_small_defaults
046717             0021*   ; get next available sprite id
046717 CD 07 66 04 0022*       call spawn_sprite_from_tile
04671B D0          0023*       ret nc ; no carry means no free sprite slots, so we go home
04671C             0024*   ; TODO: other specific initialization
04671C 3E 40       0025*       ld a,64
04671E FD 77 24    0026*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
046721 C9          0027*       ret
046722             0028*   ; end activate_pad_small
046722             0029*   
046722             0030*   move_pad_small:
046722 CD 2D 66 04 0031*       call move_active_tile
046726 B7          0032*       or a ; a will be non-zero if have scrolled off screen
046727 C2 EC 5C 04 0033*       jp nz,table_deactivate_sprite
04672B             0034*   ; check whether it is time to spawn a seeker
04672B FD 35 24    0035*       dec (iy+sprite_move_timer)
04672E C0          0036*       ret nz
04672F             0037*   pad_small_reset_move_timer:
04672F CD AE 09 04 0038*       call rand_8     ; snag a random number
046733 E6 1F       0039*       and %00011111   ; keep only 5 lowest bits (max 31)
046735 C6 40       0040*       add a,64 ; range is now 64-127
046737 FD 77 24    0041*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
04673A CD 13 24 04 0042*       call enemy_spawn_seeker
04673E C9          0043*       ret
04673F             0063        include "tile_turret_fireball.inc"
04673F FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046800             0002*   turret_fireball_defaults:
046800 02          0003*       db enemy_ground         ; type
046801 2F 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
046804 22 68 04    0005*       dl move_turret_fireball ; move_program
046807 02          0006*       db collides_with_laser  ; collisions
046808 10          0007*       db 16                   ; dim_x
046809 10          0008*       db 16                   ; dim_y
04680A 20          0009*       db 32                   ; num_orientations
04680B 01          0010*       db 1                    ; num_animations
04680C 00          0011*       db 0                    ; animation
04680D 00          0012*       db 0                    ; animation_timer
04680E 18          0013*       db 24                   ; move_timer
04680F 00          0014*       db 0                    ; move_step
046810 05          0015*       db 5                    ; points
046811 00          0016*       db 0                    ; shield_damage
046812 00          0017*       db 0                    ; animation_frame
046813             0018*   
046813             0019*   activate_turret_fireball:
046813 21 00 68 04 0020*       ld hl,turret_fireball_defaults
046817             0021*   ; get next available sprite id
046817 CD 07 66 04 0022*       call spawn_sprite_from_tile
04681B D0          0023*       ret nc ; no carry means no free sprite slots, so we go home
04681C             0024*   ; TODO: other specific initialization
04681C 3E 40       0025*       ld a,64
04681E FD 77 24    0026*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a fireball
046821 C9          0027*       ret
046822             0028*   ; end activate_turret_fireball
046822             0029*   
046822             0030*   move_turret_fireball:
046822 CD 2D 66 04 0031*       call move_active_tile
046826 B7          0032*       or a ; a will be non-zero if have scrolled off screen
046827 C2 EC 5C 04 0033*       jp nz,table_deactivate_sprite
04682B             0034*   ; target player
04682B 21 00 04 00 0035*       ld hl,speed_fireball
04682F 22 31 63 04 0036*       ld (Vp),hl ; param for targeting_computer
046833 CD 00 63 04 0037*       call orientation_to_player ; sets params for targeting_computer
046837 CD 46 63 04 0038*       call targeting_computer
04683B FD 2F 10    0039*       ld (iy+sprite_heading),hl ; save sprite heading
04683E CD 62 5E 04 0040*       call sprite_frame_heading
046842             0041*   ; check whether it is time to spawn a fireball
046842 FD 35 24    0042*       dec (iy+sprite_move_timer)
046845 C0          0043*       ret nz
046846             0044*   ; spwan a fireball
046846 CD 13 23 04 0045*       call enemy_spawn_fireball
04684A             0046*       ; fall through to reset move timer
04684A             0047*   turret_fireball_reset_move_timer:
04684A CD AE 09 04 0048*       call rand_8     ; snag a random number
04684E E6 1F       0049*       and %00011111   ; keep only 5 lowest bits (max 31)
046850 C6 40       0050*       add a,64 ; range is now 64-127
046852 FD 77 24    0051*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a fireball
046855 C9          0052*       ret
046856             0064    
046856 FF FF FF FF 0065        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
046900             0066    
046900             0067    ; --- MAIN PROGRAM FILE ---
046900 57 65 6C 63 0068    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04691B 4C 6F 61 64 0069    loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
046926 4C 6F 61 64 0070    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046934 50 72 65 73 0071    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04694F             0072    
04694F             0073    init:
04694F             0074    ; clear all buffers
04694F CD 2A 1B 04 0075        call vdu_clear_all_buffers
046953             0076    
046953             0077    ; set up the display
046953 3E 08       0078        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
046955 CD 14 1A 04 0079        call vdu_set_screen_mode
046959 AF          0080        xor a
04695A CD 25 1A 04 0081        call vdu_set_scaling
04695E             0082    
04695E             0083    ; ; enable additional audio channels
04695E             0084    ; 	call vdu_enable_channels
04695E             0085    
04695E             0086    ; set text background color
04695E 3E 9A       0087        ld a,26+128 ; violet
046960 CD 7C 19 04 0088        call vdu_colour_text
046964             0089    
046964             0090    ; set text foreground color
046964 3E 2F       0091        ld a,47 ; aaaaff lavenderish
046966 CD 7C 19 04 0092        call vdu_colour_text
04696A             0093    
04696A             0094    ; set gfx bg color
04696A AF          0095        xor a ; plotting mode 0
04696B 3E 9A       0096        ld a,26+128 ; violet
04696D CD 8D 19 04 0097        call vdu_gcol
046971 CD 4B 19 04 0098        call vdu_cls
046975             0099    
046975             0100    ; set the cursor off
046975 CD 13 19 04 0101        call vdu_cursor_off
046979             0102    
046979             0103    ; VDU 28, left, bottom, right, top: Set text viewport **
046979             0104    ; MIND THE LITTLE-ENDIANESS
046979             0105    ; inputs: c=left,b=bottom,e=right,d=top
046979 0E 00       0106        ld c,0 ; left
04697B 16 1D       0107        ld d,29 ; top
04697D 1E 27       0108        ld e,39 ; right
04697F 06 1D       0109        ld b,29; bottom
046981 CD A4 19 04 0110        call vdu_set_txt_viewport
046985             0111    
046985             0112    ; print loading ui message
046985 21 1B 69 04 0113        ld hl,loading_ui
046989 CD 17 01 04 0114        call printString
04698D CD 50 19 04 0115        call vdu_flip
046991             0116    
046991             0117    ; load UI images
046991 CD CB 16 04 0118        call load_ui_images
046995             0119    
046995             0120    ; load sprites
046995 CD 09 16 04 0121        call img_load_init ; sets up the animated load screen
046999 CD DE 16 04 0122        call load_sprite_images
04699D             0123    
04699D             0124    ; load tileset_ptrs
04699D CD EF 16 04 0125        call load_tilesets
0469A1             0126    
0469A1             0127    ; ; load sound effects ; TODO
0469A1             0128    ; 	ld bc,SFX_num_buffers
0469A1             0129    ; 	ld hl,SFX_buffer_id_lut
0469A1             0130    ; 	ld (cur_buffer_id_lut),hl
0469A1             0131    ; 	ld hl,SFX_load_routines_table
0469A1             0132    ; 	ld (cur_load_jump_table),hl
0469A1             0133    ; 	call sfx_load_main
0469A1             0134    
0469A1             0135    ; print loading complete message and wait for user keypress
0469A1             0136        ; call vdu_cls
0469A1             0137        ; ld hl,loading_complete
0469A1             0138        ; call printString
0469A1 CD 50 19 04 0139        call vdu_flip
0469A5 CD C5 06 04 0140        call waitKeypress
0469A9             0141    
0469A9             0142    ; set up display for gameplay
0469A9             0143        ; ld a,8
0469A9 3E 14       0144        ld a,20
0469AB CD 14 1A 04 0145        call vdu_set_screen_mode
0469AF AF          0146        xor a
0469B0 CD 25 1A 04 0147        call vdu_set_scaling
0469B4 CD 13 19 04 0148        call vdu_cursor_off
0469B8             0149    ; load fonts
0469B8 CD 00 15 04 0150    	call fonts_load
0469BC             0151    ; select font
0469BC             0152        ; ld hl,computer_pixel_7_8x16
0469BC 21 02 FA 00 0153        ld hl,amiga_forever_8x8 ; DEBUG
0469C0 3E 01       0154        ld a,1 ; flags
0469C2 CD 00 1D 04 0155        call vdu_font_select
0469C6             0156    ; plot bezel art
0469C6 21 00 00 00 0157        ld hl,BUF_BEZEL_L
0469CA CD 38 1A 04 0158        call vdu_buff_select
0469CE 01 00 00 00 0159        ld bc,0
0469D2 11 00 00 00 0160        ld de,0
0469D6 CD 20 1E 04 0161        call vdu_plot_bmp
0469DA 21 01 00 00 0162        ld hl,BUF_BEZEL_R
0469DE CD 38 1A 04 0163        call vdu_buff_select
0469E2 01 80 01 00 0164        ld bc,384
0469E6 11 00 00 00 0165        ld de,0
0469EA CD 20 1E 04 0166        call vdu_plot_bmp
0469EE             0167    ; set gfx origin and viewport to playing field window
0469EE 01 80 00 00 0168        ld bc,origin_left
0469F2 11 00 00 00 0169        ld de,origin_top
0469F6 CD D0 19 04 0170        call vdu_set_gfx_origin
0469FA 01 00 00 00 0171        ld bc,field_left
0469FE 11 00 00 00 0172        ld de,field_top
046A02 DD 21 FF 00 0173        ld ix,field_right
       00          
046A07 FD 21 7F 01 0174        ld iy,field_bottom
       00          
046A0C CD EB 19 04 0175        call vdu_set_gfx_viewport
046A10             0176    ; set background color
046A10 3E 9A       0177        ld a,26+128 ; violet
046A12 CD 8D 19 04 0178        call vdu_gcol
046A16 CD 5E 19 04 0179        call vdu_clg
046A1A             0180    ; VDU 28, left, bottom, right, top: Set text viewport **
046A1A 0E 00       0181        ld c,0 ; left
046A1C 16 00       0182        ld d,0 ; top
046A1E 1E 3E       0183        ld e,62 ; right
046A20 06 30       0184        ld b,48; bottom
046A22 CD A4 19 04 0185        call vdu_set_txt_viewport
046A26             0186    
046A26             0187    ; initialize the global timestamp
046A26 CD F9 17 04 0188        call timestamp_tick
046A2A             0189    
046A2A             0190    ; done with init
046A2A C9          0191        ret
046A2B             0192    
046A2B             0193    main:
046A2B             0194    ; start a new game
046A2B CD 17 61 04 0195        call game_initialize
046A2F             0196    
046A2F             0197    main_loop:
046A2F             0198    ; update the global timestamp
046A2F CD F9 17 04 0199        call timestamp_tick
046A33             0200    
046A33             0201    ; do gamestate logic
046A33 CD 03 61 04 0202        call do_game
046A37             0203    
046A37             0204        ; CALL DEBUG_PRINT_TABLE
046A37             0205    
046A37             0206    ; wait for the next vblank mitigate flicker and for loop timing
046A37 CD BF 19 04 0207        call vdu_vblank
046A3B CD BF 19 04 0208        call vdu_vblank ; DEBUG
046A3F CD BF 19 04 0209        call vdu_vblank ; DEBUG
046A43             0210    
046A43             0211    ; poll keyboard for escape keypress
046A43 3E 08       0212        ld a, $08 ; code to send to MOS
046A45 5B CF       0213        rst.lil $08 ; get IX pointer to System Variables
046A47             0214    
046A47 DD 7E 05    0215        ld a, (ix + $05) ; get ASCII code of key pressed
046A4A FE 1B       0216        cp 27 ; check if 27 (ascii code for ESC)
046A4C CA 54 6A 04 0217        jp z, main_end ; if pressed, jump to exit
046A50             0218    
046A50 C3 2F 6A 04 0219        jp main_loop
046A54             0220    
046A54             0221    main_end:
046A54 CD 05 19 04 0222        call vdu_cursor_on
046A58 C9          0223        ret
046A59             0224    
046A59             0225    DEBUG_PRINT:
046A59             0226        PUSH_ALL
046A59 08          0001M1      ex af,af'
046A5A D9          0002M1      exx
046A5B F5          0003M1      push af
046A5C E5          0004M1      push hl
046A5D C5          0005M1      push bc
046A5E D5          0006M1      push de
046A5F             0007M1  
046A5F 08          0008M1      ex af,af'
046A60 D9          0009M1      exx
046A61 F5          0010M1      push af
046A62 E5          0011M1      push hl
046A63 C5          0012M1      push bc
046A64 D5          0013M1      push de
046A65 DD E5       0014M1      push ix
046A67 FD E5       0015M1      push iy
046A69 0E 00       0227        ld c,0
046A6B 06 00       0228        ld b,0
046A6D CD 37 19 04 0229        call vdu_move_cursor
046A71             0230        POP_ALL
046A71 FD E1       0001M1      pop iy
046A73 DD E1       0002M1      pop ix
046A75 D1          0003M1      pop de
046A76 C1          0004M1      pop bc
046A77 E1          0005M1      pop hl
046A78 F1          0006M1      pop af
046A79 08          0007M1      ex af,af'
046A7A D9          0008M1      exx
046A7B             0009M1  
046A7B D1          0010M1      pop de
046A7C C1          0011M1      pop bc
046A7D E1          0012M1      pop hl
046A7E F1          0013M1      pop af
046A7F 08          0014M1      ex af,af'
046A80 D9          0015M1      exx
046A81             0231        PUSH_ALL
046A81 08          0001M1      ex af,af'
046A82 D9          0002M1      exx
046A83 F5          0003M1      push af
046A84 E5          0004M1      push hl
046A85 C5          0005M1      push bc
046A86 D5          0006M1      push de
046A87             0007M1  
046A87 08          0008M1      ex af,af'
046A88 D9          0009M1      exx
046A89 F5          0010M1      push af
046A8A E5          0011M1      push hl
046A8B C5          0012M1      push bc
046A8C D5          0013M1      push de
046A8D DD E5       0014M1      push ix
046A8F FD E5       0015M1      push iy
046A91 CD 64 06 04 0232        call dumpFlags
046A95             0233        POP_ALL
046A95 FD E1       0001M1      pop iy
046A97 DD E1       0002M1      pop ix
046A99 D1          0003M1      pop de
046A9A C1          0004M1      pop bc
046A9B E1          0005M1      pop hl
046A9C F1          0006M1      pop af
046A9D 08          0007M1      ex af,af'
046A9E D9          0008M1      exx
046A9F             0009M1  
046A9F D1          0010M1      pop de
046AA0 C1          0011M1      pop bc
046AA1 E1          0012M1      pop hl
046AA2 F1          0013M1      pop af
046AA3 08          0014M1      ex af,af'
046AA4 D9          0015M1      exx
046AA5             0234        PUSH_ALL
046AA5 08          0001M1      ex af,af'
046AA6 D9          0002M1      exx
046AA7 F5          0003M1      push af
046AA8 E5          0004M1      push hl
046AA9 C5          0005M1      push bc
046AAA D5          0006M1      push de
046AAB             0007M1  
046AAB 08          0008M1      ex af,af'
046AAC D9          0009M1      exx
046AAD F5          0010M1      push af
046AAE E5          0011M1      push hl
046AAF C5          0012M1      push bc
046AB0 D5          0013M1      push de
046AB1 DD E5       0014M1      push ix
046AB3 FD E5       0015M1      push iy
046AB5 CD C6 04 04 0235        call dumpRegistersHex
046AB9             0236        ; call waitKeypress
046AB9             0237        POP_ALL
046AB9 FD E1       0001M1      pop iy
046ABB DD E1       0002M1      pop ix
046ABD D1          0003M1      pop de
046ABE C1          0004M1      pop bc
046ABF E1          0005M1      pop hl
046AC0 F1          0006M1      pop af
046AC1 08          0007M1      ex af,af'
046AC2 D9          0008M1      exx
046AC3             0009M1  
046AC3 D1          0010M1      pop de
046AC4 C1          0011M1      pop bc
046AC5 E1          0012M1      pop hl
046AC6 F1          0013M1      pop af
046AC7 08          0014M1      ex af,af'
046AC8 D9          0015M1      exx
046AC9 C9          0238        ret
046ACA             0239    
046ACA             0240    DEBUG_PRINT_TABLE:
046ACA             0241        PUSH_ALL
046ACA 08          0001M1      ex af,af'
046ACB D9          0002M1      exx
046ACC F5          0003M1      push af
046ACD E5          0004M1      push hl
046ACE C5          0005M1      push bc
046ACF D5          0006M1      push de
046AD0             0007M1  
046AD0 08          0008M1      ex af,af'
046AD1 D9          0009M1      exx
046AD2 F5          0010M1      push af
046AD3 E5          0011M1      push hl
046AD4 C5          0012M1      push bc
046AD5 D5          0013M1      push de
046AD6 DD E5       0014M1      push ix
046AD8 FD E5       0015M1      push iy
046ADA CD 00 19 04 0242        call vdu_home_cursor
046ADE             0243        ; LIST_FIELD sprite_move_program,3 ; DEBUG
046ADE             0244        ; LIST_FIELD sprite_type,1 ; DEBUG
046ADE             0245    
046ADE DD 21 00 5A 0246        ld ix,table_base
       04          
046AE3 CD 8E 5E 04 0247        call dump_sprite_record
046AE7 CD 2C 01 04 0248        call printNewLine
046AEB CD 2C 01 04 0249        call printNewLine
046AEF             0250    
046AEF ED 32 29    0251        lea ix,ix+table_bytes_per_record
046AF2 CD 8E 5E 04 0252        call dump_sprite_record
046AF6 CD 2C 01 04 0253        call printNewLine
046AFA             0254    
046AFA             0255        ; call waitKeypress
046AFA             0256        POP_ALL
046AFA FD E1       0001M1      pop iy
046AFC DD E1       0002M1      pop ix
046AFE D1          0003M1      pop de
046AFF C1          0004M1      pop bc
046B00 E1          0005M1      pop hl
046B01 F1          0006M1      pop af
046B02 08          0007M1      ex af,af'
046B03 D9          0008M1      exx
046B04             0009M1  
046B04 D1          0010M1      pop de
046B05 C1          0011M1      pop bc
046B06 E1          0012M1      pop hl
046B07 F1          0013M1      pop af
046B08 08          0014M1      ex af,af'
046B09 D9          0015M1      exx
046B0A C9          0257        RET
046B0B             0258    
046B0B             0259    DEBUG_WAITKEYPRESS:
046B0B             0260        PUSH_ALL
046B0B 08          0001M1      ex af,af'
046B0C D9          0002M1      exx
046B0D F5          0003M1      push af
046B0E E5          0004M1      push hl
046B0F C5          0005M1      push bc
046B10 D5          0006M1      push de
046B11             0007M1  
046B11 08          0008M1      ex af,af'
046B12 D9          0009M1      exx
046B13 F5          0010M1      push af
046B14 E5          0011M1      push hl
046B15 C5          0012M1      push bc
046B16 D5          0013M1      push de
046B17 DD E5       0014M1      push ix
046B19 FD E5       0015M1      push iy
046B1B CD C5 06 04 0261        call waitKeypress
046B1F             0262        POP_ALL
046B1F FD E1       0001M1      pop iy
046B21 DD E1       0002M1      pop ix
046B23 D1          0003M1      pop de
046B24 C1          0004M1      pop bc
046B25 E1          0005M1      pop hl
046B26 F1          0006M1      pop af
046B27 08          0007M1      ex af,af'
046B28 D9          0008M1      exx
046B29             0009M1  
046B29 D1          0010M1      pop de
046B2A C1          0011M1      pop bc
046B2B E1          0012M1      pop hl
046B2C F1          0013M1      pop af
046B2D 08          0014M1      ex af,af'
046B2E D9          0015M1      exx
046B2F C9          0263        RET

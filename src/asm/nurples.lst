PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD D1 57 04 0015       call init
040050 CD AD 58 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 AF 05 04 0267*      ld (uhl),hl
04012A ED 43 B2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 B5 05 0269*      ld (ude),de
       04          
040134 DD 22 B8 05 0270*      ld (uix),ix
       04          
040139 FD 22 BB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 46 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A B8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A AF 05 04 0281*      ld hl, (uhl)
040157 ED 4B B2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B B5 05 0283*      ld de, (ude)
       04          
040161 DD 2A B8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A BB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD 0B 07 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD A4 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 AF 05 04 0656*      ld (uhl),hl
040363 ED 43 B2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 B5 05 0658*      ld (ude),de
       04          
04036D DD 22 B8 05 0659*      ld (uix),ix
       04          
040372 FD 22 BB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 AC 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 32 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A AC 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 37 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A AF 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 3C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A B2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 41 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A B5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 46 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A B8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 4B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A BB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A AF 05 04 0723*      ld hl, (uhl)
040410 ED 4B B2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B B5 05 0725*      ld de, (ude)
       04          
04041A DD 2A B8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A BB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 AF 05 04 0739*      ld (uhl),hl
04042A ED 43 B2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 B5 05 0741*      ld (ude),de
       04          
040434 DD 22 B8 05 0742*      ld (uix),ix
       04          
040439 FD 22 BB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 AC 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 32 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A AC 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455 CD 8C 00 04 0758*      call printNewLine
040459             0759*  
040459 21 37 05 04 0760*      ld hl,str_hlu
04045D CD 77 00 04 0761*      call printString
040461 2A AF 05 04 0762*      ld hl,(uhl)
040465 CD 97 00 04 0763*      call printHex24
040469 CD 8C 00 04 0764*      call printNewLine
04046D             0765*  
04046D 21 3C 05 04 0766*      ld hl,str_bcu
040471 CD 77 00 04 0767*      call printString
040475 2A B2 05 04 0768*      ld hl,(ubc)
040479 CD 97 00 04 0769*      call printHex24
04047D CD 8C 00 04 0770*      call printNewLine
040481             0771*  
040481 21 41 05 04 0772*      ld hl,str_deu
040485 CD 77 00 04 0773*      call printString
040489 2A B5 05 04 0774*      ld hl,(ude)
04048D CD 97 00 04 0775*      call printHex24
040491 CD 8C 00 04 0776*      call printNewLine
040495             0777*  
040495 21 46 05 04 0778*      ld hl,str_ixu
040499 CD 77 00 04 0779*      call printString
04049D 2A B8 05 04 0780*      ld hl,(uix)
0404A1 CD 97 00 04 0781*      call printHex24
0404A5 CD 8C 00 04 0782*      call printNewLine
0404A9             0783*  
0404A9 21 4B 05 04 0784*      ld hl,str_iyu
0404AD CD 77 00 04 0785*      call printString
0404B1 2A BB 05 04 0786*      ld hl,(uiy)
0404B5 CD 97 00 04 0787*      call printHex24
0404B9             0788*      ; call printNewLine
0404B9             0789*  
0404B9             0790*      ; call vdu_vblank
0404B9             0791*  
0404B9             0792*      ; call printNewLine
0404B9             0793*  ; restore everything
0404B9 2A AF 05 04 0794*      ld hl, (uhl)
0404BD ED 4B B2 05 0795*      ld bc, (ubc)
       04          
0404C2 ED 5B B5 05 0796*      ld de, (ude)
       04          
0404C7 DD 2A B8 05 0797*      ld ix, (uix)
       04          
0404CC FD 2A BB 05 0798*      ld iy, (uiy)
       04          
0404D1 F1          0799*      pop af
0404D2             0800*  ; all done
0404D2 C9          0801*      ret
0404D3             0802*  
0404D3             0803*  dumpRegistersHexPrime:
0404D3 D9          0804*      exx
0404D4 08          0805*      ex af,af'
0404D5 CD 26 04 04 0806*      call dumpRegistersHex
0404D9 08          0807*      ex af,af'
0404DA D9          0808*      exx
0404DB C9          0809*      ret
0404DC             0810*  
0404DC             0811*  ; additionally dump prime registers
0404DC             0812*  ; inputs: none
0404DC             0813*  ; outputs: values of every register printed to screen
0404DC             0814*  ; destroys: nothing
0404DC             0815*  dumpRegistersHexAll:
0404DC CD 26 04 04 0816*      call dumpRegistersHex
0404E0 08          0817*      ex af,af'
0404E1 D9          0818*      exx
0404E2 CD 26 04 04 0819*      call dumpRegistersHex
0404E6 08          0820*      ex af,af'
0404E7 D9          0821*      exx
0404E8 C9          0822*      ret
0404E9             0823*  
0404E9             0824*  ; print hlu to screen in hexidecimal format
0404E9             0825*  ; inputs: none
0404E9             0826*  ; destroys: nothing
0404E9             0827*  print_hex_hl:
0404E9 F5          0828*      push af
0404EA E5          0829*      push hl
0404EB 21 37 05 04 0830*      ld hl,str_hlu
0404EF CD 77 00 04 0831*      call printString
0404F3 E1          0832*      pop hl
0404F4 E5          0833*      push hl
0404F5 CD 97 00 04 0834*      call printHex24
0404F9 3E 20       0835*      ld a,' '
0404FB 5B D7       0836*      rst.lil 10h
0404FD E1          0837*      pop hl
0404FE F1          0838*      pop af
0404FF C9          0839*      ret
040500             0840*  
040500             0841*  ; print bcu to screen in hexidecimal format
040500             0842*  ; inputs: none
040500             0843*  ; destroys: nothing
040500             0844*  print_hex_bc:
040500 F5          0845*      push af
040501 E5          0846*      push hl
040502 C5          0847*      push bc
040503 21 3C 05 04 0848*      ld hl,str_bcu
040507 CD 77 00 04 0849*      call printString
04050B E1          0850*      pop hl
04050C E5          0851*      push hl
04050D CD 97 00 04 0852*      call printHex24
040511 3E 20       0853*      ld a,' '
040513 5B D7       0854*      rst.lil 10h
040515 C1          0855*      pop bc
040516 E1          0856*      pop hl
040517 F1          0857*      pop af
040518 C9          0858*      ret
040519             0859*  
040519             0860*  ; print deu to screen in hexidecimal format
040519             0861*  ; inputs: none
040519             0862*  ; destroys: nothing
040519             0863*  print_hex_de:
040519 F5          0864*      push af
04051A E5          0865*      push hl
04051B D5          0866*      push de
04051C 21 41 05 04 0867*      ld hl,str_deu
040520 CD 77 00 04 0868*      call printString
040524 E1          0869*      pop hl
040525 E5          0870*      push hl
040526 CD 97 00 04 0871*      call printHex24
04052A 3E 20       0872*      ld a,' '
04052C 5B D7       0873*      rst.lil 10h
04052E D1          0874*      pop de
04052F E1          0875*      pop hl
040530 F1          0876*      pop af
040531 C9          0877*      ret
040532             0878*  
040532 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040537 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04053C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040541 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040546 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04054B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040550             0885*  
040550             0886*  ; print udeuhl to screen in hexidecimal format
040550             0887*  ; inputs: none
040550             0888*  ; outputs: concatenated hexidecimal udeuhl
040550             0889*  ; destroys: nothing
040550             0890*  dumpUDEUHLHex:
040550             0891*  ; store everything in scratch
040550 22 AF 05 04 0892*      ld (uhl),hl
040554 ED 43 B2 05 0893*      ld (ubc),bc
       04          
040559 ED 53 B5 05 0894*      ld (ude),de
       04          
04055E DD 22 B8 05 0895*      ld (uix),ix
       04          
040563 FD 22 BB 05 0896*      ld (uiy),iy
       04          
040568 F5          0897*      push af
040569             0898*  
040569             0899*  ; print each register
040569             0900*  
040569 21 A3 05 04 0901*      ld hl,str_udeuhl
04056D CD 77 00 04 0902*      call printString
040571 2A B5 05 04 0903*      ld hl,(ude)
040575 CD 97 00 04 0904*      call printHex24
040579 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04057B 5B D7       0906*      rst.lil 10h
04057D 2A AF 05 04 0907*      ld hl,(uhl)
040581 CD 97 00 04 0908*      call printHex24
040585 CD 8C 00 04 0909*      call printNewLine
040589             0910*  
040589             0911*  ; restore everything
040589 2A AF 05 04 0912*      ld hl, (uhl)
04058D ED 4B B2 05 0913*      ld bc, (ubc)
       04          
040592 ED 5B B5 05 0914*      ld de, (ude)
       04          
040597 DD 2A B8 05 0915*      ld ix, (uix)
       04          
04059C FD 2A BB 05 0916*      ld iy, (uiy)
       04          
0405A1 F1          0917*      pop af
0405A2             0918*  ; all done
0405A2 C9          0919*      ret
0405A3             0920*  
0405A3 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0405AC             0922*  
0405AC             0923*  ; global scratch memory for registers
0405AC 00 00 00    0924*  uaf: dl 0
0405AF 00 00 00    0925*  uhl: dl 0
0405B2 00 00 00    0926*  ubc: dl 0
0405B5 00 00 00    0927*  ude: dl 0
0405B8 00 00 00    0928*  uix: dl 0
0405BB 00 00 00    0929*  uiy: dl 0
0405BE 00 00 00    0930*  usp: dl 0
0405C1 00 00 00    0931*  upc: dl 0
0405C4             0932*  
0405C4             0933*  ; inputs: whatever is in the flags register
0405C4             0934*  ; outputs: binary representation of flags
0405C4             0935*  ;          with a header so we know which is what
0405C4             0936*  ; destroys: nothing
0405C4             0937*  ; preserves: everything
0405C4             0938*  dumpFlags:
0405C4             0939*  ; first we curse zilog for not giving direct access to flags
0405C4 F5          0940*      push af ; this is so we can send it back unharmed
0405C5 F5          0941*      push af ; this is so we can pop it to hl
0405C6             0942*  ; store everything in scratch
0405C6 22 AF 05 04 0943*      ld (uhl),hl
0405CA ED 43 B2 05 0944*      ld (ubc),bc
       04          
0405CF ED 53 B5 05 0945*      ld (ude),de
       04          
0405D4 DD 22 B8 05 0946*      ld (uix),ix
       04          
0405D9 FD 22 BB 05 0947*      ld (uiy),iy
       04          
0405DE             0948*  ; next we print the header
0405DE 21 0A 06 04 0949*      ld hl,@header
0405E2 CD 77 00 04 0950*      call printString
0405E6 E1          0951*      pop hl ; flags are now in l
0405E7 7D          0952*      ld a,l ; flags are now in a
0405E8 CD 15 03 04 0953*      call printBin8
0405EC CD 8C 00 04 0954*      call printNewLine
0405F0             0955*  ; restore everything
0405F0 2A AF 05 04 0956*      ld hl, (uhl)
0405F4 ED 4B B2 05 0957*      ld bc, (ubc)
       04          
0405F9 ED 5B B5 05 0958*      ld de, (ude)
       04          
0405FE DD 2A B8 05 0959*      ld ix, (uix)
       04          
040603 FD 2A BB 05 0960*      ld iy, (uiy)
       04          
040608 F1          0961*      pop af ; send her home the way she came
040609 C9          0962*      ret
04060A             0963*  ; Bit 7 (S): Sign flag
04060A             0964*  ; Bit 6 (Z): Zero flag
04060A             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04060A             0966*  ; Bit 4 (H): Half Carry flag
04060A             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04060A             0968*  ; Bit 2 (PV): Parity/Overflow flag
04060A             0969*  ; Bit 1 (N): Subtract flag
04060A             0970*  ; Bit 0 (C): Carry flag
04060A 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040615             0972*  
040615             0973*  ; set all the bits in the flag register
040615             0974*  ; more of an academic exercise than anything useful
040615             0975*  ; inputs; none
040615             0976*  ; outputs; a=0,f=255
040615             0977*  ; destroys: flags, hl
040615             0978*  ; preserves: a, because why not
040615             0979*  setAllFlags:
040615 21 FF 00 00 0980*      ld hl,255
040619 67          0981*      ld h,a ; four cycles to preserve a is cheap
04061A E5          0982*      push hl
04061B F1          0983*      pop af
04061C C9          0984*      ret
04061D             0985*  
04061D             0986*  ; reset all the bits in the flag register
04061D             0987*  ; unlike its inverse counterpart, this may actually be useful
04061D             0988*  ; inputs; none
04061D             0989*  ; outputs; a=0,f=0
04061D             0990*  ; destroys: flags, hl
04061D             0991*  ; preserves: a, because why not
04061D             0992*  resetAllFlags:
04061D 21 00 00 00 0993*      ld hl,0
040621 67          0994*      ld h,a ; four cycles to preserve a is cheap
040622 E5          0995*      push hl
040623 F1          0996*      pop af
040624 C9          0997*      ret
040625             0998*  
040625             0999*  ; wait until user presses a key
040625             1000*  ; inputs: none
040625             1001*  ; outputs: ascii code of key pressed in a
040625             1002*  ; destroys: af,ix
040625             1003*  waitKeypress:
040625             1004*      MOSCALL mos_getkey
040625 3E 00       0001*M 			LD	A, function
040627 5B CF       0002*M 			RST.LIL	08h
040629 C9          1005*      ret
04062A             1006*  
04062A             1007*  ; print bytes from an address to the screen in hexidecimal format
04062A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04062A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04062A             1010*  ; destroys: nothing
04062A             1011*  dumpMemoryHex:
04062A             1012*  ; save registers to the stack
04062A C5          1013*      push bc
04062B E5          1014*      push hl
04062C F5          1015*      push af
04062D             1016*  
04062D             1017*  ; print the address and separator
04062D CD 97 00 04 1018*      call printHex24
040631 3E 3A       1019*      ld a,':'
040633 5B D7       1020*      rst.lil 10h
040635 3E 20       1021*      ld a,' '
040637 5B D7       1022*      rst.lil 10h
040639             1023*  
040639             1024*  ; set b to be our loop counter
040639 F1          1025*      pop af
04063A 47          1026*      ld b,a
04063B E1          1027*      pop hl
04063C E5          1028*      push hl
04063D F5          1029*      push af
04063E             1030*  @loop:
04063E             1031*  ; print the byte
04063E 7E          1032*      ld a,(hl)
04063F CD A5 00 04 1033*      call printHex8
040643             1034*  ; print a space
040643 3E 20       1035*      ld a,' '
040645 5B D7       1036*      rst.lil 10h
040647 23          1037*      inc hl
040648 10 F4       1038*      djnz @loop
04064A CD 8C 00 04 1039*      call printNewLine
04064E             1040*  
04064E             1041*  ; restore everything
04064E F1          1042*      pop af
04064F E1          1043*      pop hl
040650 C1          1044*      pop bc
040651             1045*  
040651             1046*  ; all done
040651 C9          1047*      ret
040652             1048*  
040652             1049*  
040652             1050*  ; print bytes from an address to the screen in binary format
040652             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040652             1052*  ; outputs: values of each byte printed to screen separated by spaces
040652             1053*  ; destroys: nothing
040652             1054*  dumpMemoryBin:
040652             1055*  ; save all registers to the stack
040652 F5          1056*      push af
040653 C5          1057*      push bc
040654 D5          1058*      push de
040655 E5          1059*      push hl
040656 DD E5       1060*      push ix
040658 FD E5       1061*      push iy
04065A             1062*  
04065A             1063*  ; set b to be our loop counter
04065A 47          1064*      ld b,a
04065B             1065*  @loop:
04065B             1066*  ; print the byte
04065B 7E          1067*      ld a,(hl)
04065C E5          1068*      push hl
04065D C5          1069*      push bc
04065E CD 15 03 04 1070*      call printBin8
040662 C1          1071*      pop bc
040663             1072*  ; print a space
040663 3E 20       1073*      ld a,' '
040665 5B D7       1074*      rst.lil 10h
040667 E1          1075*      pop hl
040668 23          1076*      inc hl
040669 10 F0       1077*      djnz @loop
04066B CD 8C 00 04 1078*      call printNewLine
04066F             1079*  
04066F             1080*  ; restore everything
04066F FD E1       1081*      pop iy
040671 DD E1       1082*      pop ix
040673 E1          1083*      pop hl
040674 D1          1084*      pop de
040675 C1          1085*      pop bc
040676 F1          1086*      pop af
040677             1087*  ; all done
040677 C9          1088*      ret
040678             1089*  
040678             1090*  ; print bytes from an address to the screen in binary format
040678             1091*  ; with the bits of each byte in reverse order (lsb first)
040678             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040678             1093*  ; outputs: values of each byte printed to screen separated by spaces
040678             1094*  ; destroys: nothing
040678             1095*  dumpMemoryBinRev:
040678             1096*  ; save all registers to the stack
040678 F5          1097*      push af
040679 C5          1098*      push bc
04067A D5          1099*      push de
04067B E5          1100*      push hl
04067C DD E5       1101*      push ix
04067E FD E5       1102*      push iy
040680             1103*  
040680             1104*  ; set b to be our loop counter
040680 47          1105*      ld b,a
040681             1106*  @loop:
040681             1107*  ; print the byte
040681 7E          1108*      ld a,(hl)
040682 E5          1109*      push hl
040683 C5          1110*      push bc
040684 CD 3A 03 04 1111*      call printBin8Rev
040688 C1          1112*      pop bc
040689             1113*  ; print a space
040689 3E 20       1114*      ld a,' '
04068B 5B D7       1115*      rst.lil 10h
04068D E1          1116*      pop hl
04068E 23          1117*      inc hl
04068F 10 F0       1118*      djnz @loop
040691 CD 8C 00 04 1119*      call printNewLine
040695             1120*  
040695             1121*  ; restore everything
040695 FD E1       1122*      pop iy
040697 DD E1       1123*      pop ix
040699 E1          1124*      pop hl
04069A D1          1125*      pop de
04069B C1          1126*      pop bc
04069C F1          1127*      pop af
04069D             1128*  ; all done
04069D C9          1129*      ret
04069E             0031       include "maths.inc"
04069E             0001*  ; test the sign of HL
04069E             0002*  ; inputs: HL obviously
04069E             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04069E             0004*  ; destroys: flags
04069E             0005*      MACRO sign_hlu
04069E             0006*      add hl,de
04069E             0007*      or a
04069E             0008*      sbc hl,de
04069E             0009*      ENDMACRO
04069E             0010*  
04069E             0011*  
04069E             0012*  ;------------------------------------------------------------------------
04069E             0013*  ; Scratch area for calculations
04069E             0014*  ;------------------------------------------------------------------------
04069E 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
0406A1 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
0406A4             0017*  
0406A4             0018*  ; absolute value of hlu
0406A4             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0406A4             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0406A4             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0406A4             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0406A4             0023*  ; destroys: a
0406A4             0024*  hlu_abs:
0406A4 19          0025*      add hl,de
0406A5 B7          0026*      or a
0406A6 ED 52       0027*      sbc hl,de
0406A8 FA AD 06 04 0028*      jp m,@is_neg
0406AC C9          0029*      ret ; hlu is positive or zero so we're done
0406AD             0030*  @is_neg:
0406AD F5          0031*      push af ; otherwise, save current flags for return
0406AE CD B4 06 04 0032*      call neg_hlu ; negate hlu
0406B2 F1          0033*      pop af ; get back flags
0406B3 C9          0034*      ret
0406B4             0035*  
0406B4             0036*  ; flip the sign of hlu
0406B4             0037*  ; inputs: hlu
0406B4             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406B4             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406B4             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406B4             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406B4             0042*  ; destroys a
0406B4             0043*  neg_hlu:
0406B4 D5          0044*      push de ; save de
0406B5 EB          0045*      ex de,hl ; put hl into de
0406B6 21 00 00 00 0046*      ld hl,0 ; clear hl
0406BA AF          0047*      xor a ; clear carry
0406BB ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406BD D1          0049*      pop de ; get de back
0406BE C9          0050*      ret ; easy peasy
0406BF             0051*  
0406BF             0052*  ;------------------------------------------------------------------------
0406BF             0053*  ; divide hlu by 2, inspired by above
0406BF             0054*  ;------------------------------------------------------------------------
0406BF             0055*  hlu_div2:
0406BF 22 9E 06 04 0056*      ld (scratch1),hl
0406C3 21 A0 06 04 0057*      ld hl,scratch1+2
0406C7 CB 1E       0058*      rr (hl)
0406C9 2B          0059*      dec hl
0406CA CB 1E       0060*      rr (hl)
0406CC 2B          0061*      dec hl
0406CD CB 1E       0062*      rr (hl)
0406CF 23          0063*      inc hl
0406D0 23          0064*      inc hl
0406D1 2A 9E 06 04 0065*      ld hl,(scratch1)
0406D5 C9          0066*      ret
0406D6             0067*  
0406D6             0068*  ; this is my little hack to divide by 16
0406D6             0069*  hlu_div16:
0406D6 AF          0070*      xor a
0406D7 29          0071*      add hl,hl
0406D8 17          0072*      rla
0406D9 29          0073*      add hl,hl
0406DA 17          0074*      rla
0406DB 29          0075*      add hl,hl
0406DC 17          0076*      rla
0406DD 29          0077*      add hl,hl
0406DE 17          0078*      rla
0406DF 22 EC 06 04 0079*      ld (@scratch),hl
0406E3 32 EF 06 04 0080*      ld (@scratch+3),a
0406E7 2A ED 06 04 0081*      ld hl,(@scratch+1)
0406EB C9          0082*      ret
0406EC             0083*  @scratch: ds 4
0406F0             0084*  
0406F0             0085*  ; hlu signed division by 256
0406F0             0086*  ; returns: hlu / 256
0406F0             0087*  ; destroys: af
0406F0             0088*  hlu_sdiv256:
0406F0 AF          0089*      xor a ; assume hl is positive
0406F1 22 07 07 04 0090*      ld (@buffer),hl
0406F5             0091*      sign_hlu
0406F5 19          0001*M     add hl,de
0406F6 B7          0002*M     or a
0406F7 ED 52       0003*M     sbc hl,de
0406F9 F2 FE 06 04 0092*      jp p,@hl_pos
0406FD 3D          0093*      dec a
0406FE             0094*  @hl_pos:
0406FE 32 0A 07 04 0095*      ld (@buffer+3),a
040702 2A 08 07 04 0096*      ld hl,(@buffer+1)
040706 C9          0097*      ret
040707             0098*  @buffer: ds 4
04070B             0099*  
04070B             0100*  ; hlu 1 byte right shift, unsigned
04070B             0101*  ; returns: hlu / 256, fractional portion in a
04070B             0102*  ; destroys: af
04070B             0103*  hlu_udiv256:
04070B AF          0104*      xor a
04070C 32 1D 07 04 0105*      ld (@buffer+3),a
040710 7D          0106*      ld a,l ; save the fractional portion
040711 22 1A 07 04 0107*      ld (@buffer),hl
040715 2A 1B 07 04 0108*      ld hl,(@buffer+1)
040719 C9          0109*      ret
04071A             0110*  @buffer: ds 4
04071E             0111*  
04071E             0112*      MACRO hlu_mul256
04071E             0113*      add hl,hl ; * 2
04071E             0114*      add hl,hl ; * 4
04071E             0115*      add hl,hl ; * 8
04071E             0116*      add hl,hl ; * 16
04071E             0117*      add hl,hl ; * 32
04071E             0118*      add hl,hl ; * 64
04071E             0119*      add hl,hl ; * 128
04071E             0120*      add hl,hl ; * 256
04071E             0121*      ENDMACRO
04071E             0122*  
04071E             0123*  ; compute the modulo of hlu by deu
04071E             0124*  ; outputs: hlu = hlu % deu
04071E             0125*  ; destroys: f, hl
04071E             0126*  hlu_mod:
04071E B7          0127*      or a ; clear carry
04071F             0128*  @loop:
04071F ED 52       0129*      sbc hl,de
040721 DA 29 07 04 0130*      jp c, @end
040725 C3 1F 07 04 0131*      jp @loop
040729             0132*  @end:
040729 19          0133*      add hl,de
04072A C9          0134*      ret
04072B             0135*  
04072B             0136*  
04072B 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04072F 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
040733             0139*  
040733             0140*  ; set bcd values in a scratch memory address from registers bcde
040733             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
040733             0142*  ; destroys ; hl
040733             0143*  set_bcd:
040733 73          0144*      ld (hl),e
040734 23          0145*      inc hl
040735 72          0146*      ld (hl),d
040736 23          0147*      inc hl
040737 71          0148*      ld (hl),c
040738 23          0149*      inc hl
040739 70          0150*      ld (hl),b
04073A C9          0151*      ret
04073B             0152*  
04073B             0153*  ; load bcd values from a scratch memory address to bcde
04073B             0154*  ; input: hl; scratch address
04073B             0155*  ; output: bcde; 8-place bcd number
04073B             0156*  ; destroys: hl
04073B             0157*  get_bcd:
04073B 5E          0158*      ld e,(hl)
04073C 23          0159*      inc hl
04073D 56          0160*      ld d,(hl)
04073E 23          0161*      inc hl
04073F 4E          0162*      ld c,(hl)
040740 23          0163*      inc hl
040741 46          0164*      ld b,(hl)
040742 C9          0165*      ret
040743             0166*  
040743             0167*  ; BCD addition
040743             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040743             0169*  ;       a is the number of bytes holding each number (number of places/2)
040743             0170*  ; outputs: (hl) + (de) --> (hl)
040743             0171*  ; destroys: a,b,de,hl
040743             0172*  add_bcd:
040743 47          0173*      ld b,a ; loop counter
040744 AF          0174*      xor a ; reset a, clear carry flag
040745             0175*  adcec:
040745 1A          0176*      ld a,(de) ; addend to acc
040746 8E          0177*      adc a,(hl) ; add (hl) to acc
040747 27          0178*      daa ; adjust result to bcd
040748 77          0179*      ld (hl),a ; store result
040749 23          0180*      inc hl ; advance memory pointers
04074A 13          0181*      inc de
04074B 10 F8       0182*      djnz adcec ; loop until b == 0
04074D C9          0183*      ret
04074E             0184*  
04074E             0185*  ; BCD subtraction
04074E             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04074E             0187*  ;       a is the number of bytes holding each number (number of places/2)
04074E             0188*  ; outputs: (hl) - (de) --> (hl)
04074E             0189*  ; destroys: a,b,de,hl
04074E             0190*  sub_bcd:
04074E 47          0191*      ld b,a ; loop counter
04074F AF          0192*      xor a ; reset a,clear carry flag
040750             0193*  subdec:
040750 1A          0194*      ld a,(de) ; subtrahend to acc
040751 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040752 27          0196*      daa ; adjust result to bcd
040753 77          0197*      ld (hl),a ; store result
040754 23          0198*      inc hl ; advance memory pointers
040755 13          0199*      inc de
040756 10 F8       0200*      djnz subdec ; loop until b == 0
040758 C9          0201*      ret
040759             0202*  
040759             0203*  ; http://www.z80.info/pseudo-random.txt
040759             0204*  rand_8:
040759 C5          0205*      push bc
04075A 3A 6D 07 04 0206*      ld a,(r_seed)
04075E 4F          0207*      ld c,a
04075F             0208*  
04075F 0F          0209*      rrca ; multiply by 32
040760 0F          0210*      rrca
040761 0F          0211*      rrca
040762 EE 1F       0212*      xor 0x1f
040764             0213*  
040764 81          0214*      add a,c
040765 DE FF       0215*      sbc a,255 ; carry
040767             0216*  
040767 32 6D 07 04 0217*      ld (r_seed),a
04076B C1          0218*      pop bc
04076C C9          0219*      ret
04076D 50          0220*  r_seed: defb $50
04076E             0221*  
04076E             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04076E             0223*  prng24:
04076E             0224*  ;;Expects ADL mode.
04076E             0225*  ;;Output: HL
04076E             0226*  ;;50cc
04076E             0227*  ;;33 bytes
04076E             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04076E ED 5B 8F 07 0229*      ld de,(seed1)
       04          
040773 B7          0230*      or a
040774 ED 62       0231*      sbc hl,hl
040776 19          0232*      add hl,de
040777 29          0233*      add hl,hl
040778 29          0234*      add hl,hl
040779 2C          0235*      inc l
04077A 19          0236*      add hl,de
04077B 22 8F 07 04 0237*      ld (seed1),hl
04077F 2A 92 07 04 0238*      ld hl,(seed2)
040783 29          0239*      add hl,hl
040784 9F          0240*      sbc a,a
040785 E6 1B       0241*      and %00011011
040787 AD          0242*      xor l
040788 6F          0243*      ld l,a
040789 22 92 07 04 0244*      ld (seed2),hl
04078D 19          0245*      add hl,de
04078E C9          0246*      ret
04078F 00 00 00    0247*  seed1: dl 0
040792 00 00 00    0248*  seed2: dl 0
040795             0032       include "files.inc"
040795             0001*  ; load to onboard 8k sram
040795             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040795             0033       include "fixed168.inc"
040795             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040795             0002*  ; uses EZ80 MLT instruction for speed
040795             0003*  ; operation: UHL * A --> UHL
040795             0004*  ; destroys: AF, HL
040795             0005*  smul24x8:
040795             0006*  ; make hl positive and store sign flag
040795 CD A4 06 04 0007*      call hlu_abs
040799 F5          0008*      push af
04079A             0009*  ; do the division
04079A CD A5 07 04 0010*      call mul24x8 ; hl = product
04079E             0011*  ; adjust sign of result
04079E F1          0012*      pop af ; sign de
04079F F0          0013*      ret p ; hl was positive, nothing to do
0407A0 CD B4 06 04 0014*      call neg_hlu ; result is negative
0407A4 C9          0015*      ret
0407A5             0016*  
0407A5             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0407A5             0018*  ; uses EZ80 MLT instruction for speed
0407A5             0019*  ; operation: UHL * A --> AUHL
0407A5             0020*  ; destroys: AF, HL
0407A5             0021*  mul24x8:
0407A5 D5          0022*      push de ; preserve de
0407A6             0023*  ; low byte
0407A6 5D          0024*      ld e,l
0407A7 57          0025*      ld d,a
0407A8 ED 5C       0026*      mlt de
0407AA 6B          0027*      ld l,e ; product low byte
0407AB 08          0028*      ex af,af' ; save multiplier
0407AC 7A          0029*      ld a,d ; carry
0407AD 08          0030*      ex af,af' ; save carry, restore multiplier
0407AE             0031*  ; high byte
0407AE 5C          0032*      ld e,h
0407AF 57          0033*      ld d,a
0407B0 ED 5C       0034*      mlt de
0407B2 08          0035*      ex af,af' ; save multiplier, restore carry
0407B3 83          0036*      add a,e ; add carry
0407B4 67          0037*      ld h,a ; product middle byte
0407B5 7A          0038*      ld a,d ; carry
0407B6 08          0039*      ex af,af' ; save carry, restore multiplier
0407B7             0040*  ; upper byte
0407B7 22 D2 07 04 0041*      ld (@scratch),hl ; 7 cycles
0407BB 5F          0042*      ld e,a
0407BC 3A D4 07 04 0043*      ld a,(@scratch+2)
0407C0 57          0044*      ld d,a
0407C1 ED 5C       0045*      mlt de
0407C3 08          0046*      ex af,af' ; restore carry
0407C4 8B          0047*      adc a,e ; add carry
0407C5 32 D4 07 04 0048*      ld (@scratch+2),a ; 5 cycles
0407C9 2A D2 07 04 0049*      ld hl,(@scratch) ; 7 cycles
0407CD             0050*  ; highest byte
0407CD 3E 00       0051*      ld a,0 ; preserve carry flag
0407CF 8A          0052*      adc a,d ; product highest byte
0407D0 D1          0053*      pop de ; restore de
0407D1 C9          0054*      ret
0407D2             0055*  @scratch: ds 3
0407D5             0056*  
0407D5 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0407DB             0058*  
0407DB             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0407DB             0060*  ; operation: UHL * UDE --> mul24out
0407DB             0061*  mul24:
0407DB DD E5       0062*      push ix ; preserve
0407DD             0063*  ; point to output buffer and clear it
0407DD DD 21 D5 07 0064*      ld ix,mul24out
       04          
0407E2 C5          0065*      push bc
0407E3 01 00 00 00 0066*      ld bc,0
0407E7 DD 0F 00    0067*      ld (ix),bc
0407EA DD 0F 03    0068*      ld (ix+3),bc
0407ED C1          0069*      pop bc
0407EE             0070*  ; STEP 1: UHL * E
0407EE 7B          0071*      ld a,e
0407EF E5          0072*      push hl
0407F0 CD A5 07 04 0073*      call mul24x8
0407F4 DD 2F 00    0074*      ld (ix+0),hl
0407F7 DD 77 03    0075*      ld (ix+3),a
0407FA             0076*  ; STEP 2: UHL * D
0407FA E1          0077*      pop hl
0407FB E5          0078*      push hl
0407FC 7A          0079*      ld a,d
0407FD CD A5 07 04 0080*      call mul24x8
040801 CD 1A 08 04 0081*      call @accumulate
040805             0082*  ; STEP 3: UHL * DEU
040805 E1          0083*      pop hl
040806 ED 53 4A 08 0084*      ld (@de),de
       04          
04080B 3A 4C 08 04 0085*      ld a,(@de+2)
04080F CD A5 07 04 0086*      call mul24x8
040813 CD 1A 08 04 0087*      call @accumulate
040817             0088*  ; all done
040817 DD E1       0089*      pop ix ; restore
040819 C9          0090*      ret
04081A             0091*  @accumulate:
04081A DD 23       0092*      inc ix
04081C             0093*  ; highest byte of product to carry
04081C DD 77 03    0094*      ld (ix+3),a
04081F             0095*  ; low byte of product
04081F 7D          0096*      ld a,l
040820 DD 86 00    0097*      add a,(ix+0)
040823 DD 77 00    0098*      ld (ix+0),a
040826             0099*  ; high byte of product
040826 7C          0100*      ld a,h
040827 DD 8E 01    0101*      adc a,(ix+1)
04082A DD 77 01    0102*      ld (ix+1),a
04082D             0103*  ; uppper byte of product
04082D 22 47 08 04 0104*      ld (@hl),hl
040831 3A 49 08 04 0105*      ld a,(@hl+2)
040835 DD 8E 02    0106*      adc a,(ix+2)
040838 DD 77 02    0107*      ld (ix+2),a
04083B             0108*  ; carry
04083B 3E 00       0109*      ld a,0 ; preserve flags
04083D DD 8E 03    0110*      adc a,(ix+3)
040840 DD 77 03    0111*      ld (ix+3),a
040843 C9          0112*      ret
040844             0113*  
040844 00 00 00    0114*  @ix: dl 0
040847 00 00 00    0115*  @hl: dl 0
04084A 00 00 00    0116*  @de: dl 0
04084D             0117*  
04084D             0118*  ; UHL * UDE --> UHL (unsigned)
04084D             0119*  umul24:
04084D CD DB 07 04 0120*      call mul24
040851 2A D5 07 04 0121*      ld hl,(mul24out)
040855 C9          0122*      ret
040856             0123*  
040856             0124*  ; UH.L = UH.L*UD.E (unsigned)
040856             0125*  umul168:
040856 CD DB 07 04 0126*      call mul24
04085A 2A D6 07 04 0127*      ld hl,(mul24out+1)
04085E C9          0128*      ret
04085F             0129*  
04085F             0130*  ; UH.L * UD.E --> UH.L (signed)
04085F             0131*  smul168:
04085F             0132*  ; make everything positive and store sign flags
04085F CD A4 06 04 0133*      call hlu_abs
040863 F5          0134*      push af
040864 EB          0135*      ex de,hl
040865 CD A4 06 04 0136*      call hlu_abs
040869 EB          0137*      ex de,hl
04086A F5          0138*      push af
04086B             0139*  ; do the division
04086B CD 56 08 04 0140*      call umul168 ; hl = product
04086F             0141*  ; adjust sign of result
04086F F1          0142*      pop af ; sign de
040870 FA 7B 08 04 0143*      jp m,@de_neg
040874 F1          0144*      pop af ; sign hl
040875 F0          0145*      ret p ; both positive, nothing to do
040876             0146*  @hl_neg:
040876 CD B4 06 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04087A C9          0148*      ret
04087B             0149*  @de_neg:
04087B F1          0150*      pop af
04087C F8          0151*      ret m ; both negative, nothing to do
04087D CD B4 06 04 0152*      call neg_hlu ; result is negative
040881 C9          0153*      ret
040882             0154*  
040882             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040882             0156*  ; perform unsigned division of 16.8 fixed place values
040882             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040882             0158*  udiv168:
040882             0159*  ; back up divisor
040882 ED 53 B9 08 0160*      ld (@ude),de
       04          
040887             0161*  ; get the 16-bit integer part of the quotient
040887 CD EA 08 04 0162*      call udiv24 ; de = quotient, hl = remainder
04088B             0163*  ; load quotient to upper three bytes of output
04088B ED 53 C0 08 0164*      ld (div168_out+1),de
       04          
040890             0165*  @div256:
040890             0166*  ; multiply remainder by 256
040890             0167*      hlu_mul256
040890 29          0001*M     add hl,hl ; * 2
040891 29          0002*M     add hl,hl ; * 4
040892 29          0003*M     add hl,hl ; * 8
040893 29          0004*M     add hl,hl ; * 16
040894 29          0005*M     add hl,hl ; * 32
040895 29          0006*M     add hl,hl ; * 64
040896 29          0007*M     add hl,hl ; * 128
040897 29          0008*M     add hl,hl ; * 256
040898             0168*  ; skip fractional computation if remainder is zero
040898             0169*      sign_hlu
040898 19          0001*M     add hl,de
040899 B7          0002*M     or a
04089A ED 52       0003*M     sbc hl,de
04089C 20 03       0170*      jr nz,@div_frac
04089E AF          0171*      xor a
04089F 18 0A       0172*      jr @write_frac
0408A1             0173*  ; now divide the shifted remainder by the divisor
0408A1             0174*  @div_frac:
0408A1 ED 5B B9 08 0175*      ld de,(@ude) ; get back divisor
       04          
0408A6 CD EA 08 04 0176*      call udiv24 ; de = quotient, hl = remainder
0408AA             0177*  ; load low byte of quotient to low byte of output
0408AA 7B          0178*      ld a,e
0408AB             0179*  @write_frac:
0408AB 32 BF 08 04 0180*      ld (div168_out),a
0408AF             0181*  ; load de with return value
0408AF ED 5B BF 08 0182*      ld de,(div168_out)
       04          
0408B4             0183*  ; load a with any overflow
0408B4 3A C2 08 04 0184*      ld a,(div168_out+3)
0408B8 C9          0185*      ret ; ud.e is the 16.8 result
0408B9             0186*  @ude: ds 6
0408BF             0187*  div168_out: ds 4 ; the extra byte is for overflow
0408C3             0188*  
0408C3             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0408C3             0190*  ; perform signed division of 16.8 fixed place values
0408C3             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0408C3             0192*  sdiv168:
0408C3             0193*  ; make everything positive and store sign flags
0408C3 CD A4 06 04 0194*      call hlu_abs
0408C7 F5          0195*      push af
0408C8 EB          0196*      ex de,hl
0408C9 CD A4 06 04 0197*      call hlu_abs
0408CD EB          0198*      ex de,hl
0408CE F5          0199*      push af
0408CF             0200*  ; do the division
0408CF CD 82 08 04 0201*      call udiv168 ; de = quotient, hl = remainder
0408D3             0202*  ; adjust sign of result
0408D3 F1          0203*      pop af ; sign de
0408D4 FA E1 08 04 0204*      jp m,@de_neg
0408D8 F1          0205*      pop af ; sign hl
0408D9 F0          0206*      ret p ; both positive, nothing to do
0408DA             0207*  @hl_neg:
0408DA EB          0208*      ex de,hl ; hl = quotient, de = remainder
0408DB CD B4 06 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0408DF EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0408E0 C9          0211*      ret
0408E1             0212*  @de_neg:
0408E1 F1          0213*      pop af
0408E2 F8          0214*      ret m ; both negative, nothing to do
0408E3 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0408E4 CD B4 06 04 0216*      call neg_hlu ; result is negative
0408E8 EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0408E9 C9          0218*      ret
0408EA             0219*  
0408EA             0220*  ;------------------------------------------------------------------------
0408EA             0221*  ;  arith24.asm
0408EA             0222*  ;  24-bit ez80 arithmetic routines
0408EA             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0408EA             0224*  ;  MIT license
0408EA             0225*  ;
0408EA             0226*  ;  This library was created as a tool to help make ez80
0408EA             0227*  ;  24-bit native assembly routines for simple mathematical problems
0408EA             0228*  ;  more widely available.
0408EA             0229*  ;
0408EA             0230*  ;------------------------------------------------------------------------
0408EA             0231*  ;
0408EA             0232*  ;------------------------------------------------------------------------
0408EA             0233*  ; udiv24
0408EA             0234*  ; Unsigned 24-bit division
0408EA             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0408EA             0236*  ;
0408EA             0237*  ; Uses AF BC DE HL
0408EA             0238*  ; Uses Restoring Division algorithm
0408EA             0239*  ;------------------------------------------------------------------------
0408EA             0240*  
0408EA             0241*  udiv24:
0408EA E5          0242*      push hl
0408EB C1          0243*      pop bc ;move dividend to BCU
0408EC 21 00 00 00 0244*      ld hl,0 ;result
0408F0 A7          0245*      and a
0408F1 ED 52       0246*      sbc hl,de ;test for div by 0
0408F3 C8          0247*      ret z ;it's zero, carry flag is clear
0408F4 19          0248*      add hl,de ;HL is 0 again
0408F5 3E 18       0249*      ld a,24 ;number of loops through.
0408F7             0250*  udiv1:
0408F7 C5          0251*      push bc ;complicated way of doing this because of lack of access to top bits
0408F8 E3          0252*      ex (sp),hl
0408F9 37          0253*      scf
0408FA ED 6A       0254*      adc hl,hl
0408FC E3          0255*      ex (sp),hl
0408FD C1          0256*      pop bc ;we now have bc = (bc * 2) + 1
0408FE             0257*  
0408FE ED 6A       0258*      adc hl,hl
040900 A7          0259*      and a ;is this the bug
040901 ED 52       0260*      sbc hl,de
040903 30 02       0261*      jr nc,udiv2
040905 19          0262*      add hl,de
040906             0263*  ;	dec	c
040906 0B          0264*      dec bc
040907             0265*  udiv2:
040907 3D          0266*      dec a
040908 20 ED       0267*      jr nz,udiv1
04090A 37          0268*      scf ;flag used for div0 error
04090B C5          0269*      push bc
04090C D1          0270*      pop de ;remainder
04090D C9          0271*      ret
04090E             0272*  
04090E             0273*  ;------------------------------------------------------------------------
04090E             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
04090E             0275*  ;------------------------------------------------------------------------
04090E             0276*  
04090E             0277*  
04090E             0278*      ; include "trig24fast.inc"
04090E             0279*  
04090E             0280*  
04090E             0281*  ; convert signed angles from a 360 to 256 degree circle
04090E             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
04090E             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
04090E             0284*  ; destroys: TODO
04090E             0285*  deg_360_to_256:
04090E D5          0286*      push de ; preserve de
04090F             0287*  ; make angle positive and store sign flag
04090F CD A4 06 04 0288*      call hlu_abs
040913 F5          0289*      push af
040914             0290*  ; multiply by coversion factor of 256/360
040914 11 B6 00 00 0291*      ld de,0x0000B6 ; 0.711
040918 CD 56 08 04 0292*      call umul168 ; uh.l = uh.l * 0.711
04091C             0293*  ; restore sign flag and adjust output accordingly
04091C F1          0294*      pop af
04091D F2 25 09 04 0295*      jp p,@pos ; positive number
040921 CD B4 06 04 0296*      call neg_hlu
040925             0297*  @pos:
040925             0298*  ; restore de and return uh.l as the result
040925 D1          0299*      pop de
040926 C9          0300*      ret
040927             0301*  
040927             0302*  ; convert signed angles from a 256 to 360 degree circle
040927             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040927             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040927             0305*  ; destroys: TODO
040927             0306*  deg_256_to_360:
040927 D5          0307*      push de ; preserve de
040928             0308*  ; make angle positive and store sign flag
040928 CD A4 06 04 0309*      call hlu_abs
04092C F5          0310*      push af
04092D             0311*  ; multiply by coversion factor of 360/256
04092D 11 68 01 00 0312*      ld de,0x000168 ; 1.406
040931 CD 56 08 04 0313*      call umul168 ; uh.l = uh.l * 1.406
040935             0314*  ; restore sign flag and adjust output accordingly
040935 F1          0315*      pop af
040936 F2 3E 09 04 0316*      jp p,@pos ; positive number
04093A CD B4 06 04 0317*      call neg_hlu
04093E             0318*  @pos:
04093E             0319*  ; restore de and return uh.l as the result
04093E D1          0320*      pop de
04093F C9          0321*      ret
040940             0322*  
040940             0323*  ; fixed 16.8 routine
040940             0324*  ; cos(uh.l) --> uh.l
040940             0325*  ; destroys: f, hl
040940             0326*  cos168:
040940 D5          0327*      push de ; preserve de
040941             0328*  ; for cos we simply increment the angle by 90 degrees
040941             0329*  ; or 0x004000 in 16.8 degrees256
040941             0330*  ; which makes it a sin problem
040941 11 00 40 00 0331*      ld de,0x004000
040945 19          0332*      add hl,de ; modulo 256 happens below
040946 D1          0333*      pop de ; restore de
040947             0334*  ; fall through to sin168
040947             0335*  
040947             0336*  ; ---------------------
040947             0337*  ; fixed 16.8 routine
040947             0338*  ; sin(uh.l) --> uh.l
040947             0339*  ; destroys: f, hl
040947             0340*  sin168:
040947 D5          0341*      push de
040948             0342*  ; handle negative angles appropriately
040948 CD A4 06 04 0343*      call hlu_abs
04094C F2 55 09 04 0344*      jp p,@F
040950 11 00 00 FF 0345*      ld de,-256*256
040954 19          0346*      add hl,de
040955             0347*  @@:
040955 2E 03       0348*      ld l,3 ; multiply by 3 to get our lookup index
040957 ED 6C       0349*      mlt hl
040959 11 A4 0B 04 0350*      ld de,sin_lut_168 ; grab the lut address
04095D 19          0351*      add hl,de ; bump hl by the index
04095E ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
040960 D1          0353*      pop de
040961 C9          0354*      ret
040962             0355*  
040962             0356*  ; 16.8 fixed inputs / outputs
040962             0357*  ; takes: uh.l as angle in degrees 256
040962             0358*  ;        ud.e as radius
040962             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040962             0360*  ;        displacements from origin (0,0)
040962             0361*  ; destroys: everything except indexes
040962             0362*  polar_to_cartesian:
040962             0363*  ; back up input parameters
040962 22 91 09 04 0364*      ld (@angle), hl
040966 ED 53 94 09 0365*      ld (@radius), de
       04          
04096B             0366*  ; compute dx = sin(uh.l) * ud.e
04096B CD 47 09 04 0367*      call sin168 ; uh.l = sin(uh.l)
04096F ED 5B 94 09 0368*      ld de,(@radius)
       04          
040974 CD 5F 08 04 0369*      call smul168 ; uh.l = dx
040978 E5          0370*      push hl
040979             0371*  ; compute dy = -cos(uh.l) * ud.e
040979 2A 91 09 04 0372*      ld hl,(@angle)
04097D CD 40 09 04 0373*      call cos168 ; uh.l = cos(uh.l)
040981 ED 5B 94 09 0374*      ld de,(@radius)
       04          
040986 CD 5F 08 04 0375*      call smul168 ; uh.l = dy
04098A CD B4 06 04 0376*      call neg_hlu ; invert dy for screen coords convention
04098E EB          0377*      ex de,hl ; de = dy for output
04098F C1          0378*      pop bc ; bc = dx for output
040990             0379*  ; and out
040990 C9          0380*      ret
040991             0381*  @angle: ds 3
040994             0382*  @radius: ds 3
040997             0383*  
040997             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040997             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040997             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040997             0387*  ;         also populates scratch locations dx168 and dy168
040997             0388*  ; destroys: a,hl,bc,de
040997             0389*  dxy168:
040997             0390*  ; compute dx = x1-x0
040997 AF          0391*      xor a ; clear carry
040998 DD E5       0392*      push ix ; move ix to hl via the stack
04099A E1          0393*      pop hl ; hl = x1
04099B ED 42       0394*      sbc hl,bc ; hl = dx
04099D 22 B2 09 04 0395*      ld (dx168),hl ; dx to scratch
0409A1             0396*  ; compute dy = y1-y0
0409A1 AF          0397*      xor a ; clear carry
0409A2 FD E5       0398*      push iy ; move iy to hl via the stack
0409A4 E1          0399*      pop hl ; hl = y1
0409A5 ED 52       0400*      sbc hl,de ; hl = dy
0409A7 22 B8 09 04 0401*      ld (dy168),hl ; dy to scratch
0409AB             0402*  ; populate output registers and return
0409AB EB          0403*      ex de,hl ; ud.e = dy
0409AC ED 4B B2 09 0404*      ld bc,(dx168) ; ub.c = dx
       04          
0409B1 C9          0405*      ret
0409B2 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0409B8 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0409BE             0408*  
0409BE             0409*  ; compute the euclidian distance between two cartesian coordinates
0409BE             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0409BE             0411*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0409BE             0412*  ; output; uh.l is the 16.8 fixed format distance
0409BE             0413*  ;         also populates scratch locations dx168 and dy168
0409BE             0414*  ; destroys: a,hl,bc,de
0409BE             0415*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0409BE             0416*  ;       thus the result will always be an integer, albeit in 16.8 format
0409BE             0417*  distance168:
0409BE             0418*  ; compute dy^2
0409BE 2A B8 09 04 0419*      ld hl,(dy168)
0409C2 CD A4 06 04 0420*      call hlu_abs
0409C6 CD 0B 07 04 0421*      call hlu_udiv256 ; make integer to avoid overflow
0409CA E5          0422*      push hl
0409CB D1          0423*      pop de
0409CC CD 4D 08 04 0424*      call umul24 ; hl = dy^2
0409D0 E5          0425*      push hl ; save dy^2
0409D1             0426*  ; compute dx^2
0409D1 2A B2 09 04 0427*      ld hl,(dx168)
0409D5 CD A4 06 04 0428*      call hlu_abs
0409D9 CD 0B 07 04 0429*      call hlu_udiv256 ; make integer to avoid overflow
0409DD E5          0430*      push hl
0409DE D1          0431*      pop de
0409DF CD 4D 08 04 0432*      call umul24 ; hl = dx^2
0409E3             0433*  ; add dx^2 and dy^2
0409E3 D1          0434*      pop de ; de = dy^2 (was hl)
0409E4 19          0435*      add hl,de ; hl = dx^2 + dy^2
0409E5             0436*  ; compute the square root
0409E5 CD BE 0A 04 0437*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
0409E9 EB          0438*      ex de,hl ; hl = distance
0409EA             0439*      hlu_mul256 ; convert back to 16.8 fixed
0409EA 29          0001*M     add hl,hl ; * 2
0409EB 29          0002*M     add hl,hl ; * 4
0409EC 29          0003*M     add hl,hl ; * 8
0409ED 29          0004*M     add hl,hl ; * 16
0409EE 29          0005*M     add hl,hl ; * 32
0409EF 29          0006*M     add hl,hl ; * 64
0409F0 29          0007*M     add hl,hl ; * 128
0409F1 29          0008*M     add hl,hl ; * 256
0409F2 C9          0440*      ret
0409F3             0441*  
0409F3             0442*  ; atan2_(ub.c,ud.e) --> uh.l
0409F3             0443*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0409F3             0444*  ;   whether inputs are integers or fractional doesn't matter
0409F3             0445*  ;   so long as the sign bit of the upper byte is correct
0409F3             0446*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0409F3             0447*  ; angles are COMPASS HEADINGS based on
0409F3             0448*  ; screen coordinate conventions,where the y axis is flipped
0409F3             0449*  ; #E0 224      0       32 #20
0409F3             0450*  ;        -x,-y | +x,-y
0409F3             0451*  ; #C0 192------+------ 64 #40
0409F3             0452*  ;        -x,+y | +x,+y
0409F3             0453*  ; #A0 160   128 #80   96 #60
0409F3             0454*  atan2_168fast:
0409F3             0455*  ; get signs and make everything positive
0409F3             0456*  ; get abs(x) and store its original sign
0409F3 C5          0457*      push bc
0409F4 E1          0458*      pop hl
0409F5 CD A4 06 04 0459*      call hlu_abs ; if x was negative this also sets the sign flag
0409F9 E5          0460*      push hl ; store abs(x)
0409FA C1          0461*      pop bc ; bc = abs(x)
0409FB F5          0462*      push af ; store sign of x
0409FC             0463*  ; get abs(y) and store its original sign
0409FC EB          0464*      ex de,hl ; hl = y
0409FD CD A4 06 04 0465*      call hlu_abs ; if y was negative this also sets the sign flag
040A01 EB          0466*      ex de,hl ; de = abs(y)
040A02 F5          0467*      push af ; store sign of y
040A03             0468*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040A03             0469*  ; this ensures that our lookup value is between 0 and 1 inclusive
040A03 AF          0470*      xor a ; clear the carry flag
040A04 D5          0471*      push de
040A05 E1          0472*      pop hl
040A06 ED 42       0473*      sbc hl,bc
040A08 F5          0474*      push af ; save sign of de - bc
040A09 F2 12 0A 04 0475*      jp p,@1 ; bc <= de, so we skip ahead
040A0D             0476*  ; otherwise we swap bc and de
040A0D C5          0477*      push bc
040A0E E1          0478*      pop hl
040A0F EB          0479*      ex de,hl
040A10 E5          0480*      push hl
040A11 C1          0481*      pop bc
040A12             0482*  @1:
040A12             0483*  ; now we're ready to snag our preliminary result
040A12 C5          0484*      push bc
040A13 E1          0485*      pop hl
040A14 CD 82 0A 04 0486*      call atan_168fast ; uh.l comes back with prelim result
040A18             0487*  ; now we adjust uh.l based on sign of de - bc
040A18 F1          0488*      pop af
040A19 F2 25 0A 04 0489*      jp p,@2 ; bc <= de,so we skip ahead
040A1D EB          0490*      ex de,hl
040A1E 21 00 40 00 0491*      ld hl,64*256 ; subtract from 64 (90) degrees
040A22 AF          0492*      xor a ; clear the carry flag
040A23 ED 52       0493*      sbc hl,de
040A25             0494*  @2:
040A25             0495*  ; adjust the result based on quadrant
040A25             0496*  ; #E0 224      0       32 #20
040A25             0497*  ;        -x,-y | +x,-y
040A25             0498*  ; #C0 192------+------ 64 #40
040A25             0499*  ;        -x,+y | +x,+y
040A25             0500*  ; #A0 160   128 #80   96 #60
040A25 F1          0501*      pop af ; sign of y
040A26 CA 63 0A 04 0502*      jp z,@y_zero
040A2A F2 43 0A 04 0503*      jp p,@y_pos
040A2E             0504*  ; y neg,check x
040A2E F1          0505*      pop af ; sign of x
040A2F CA 3D 0A 04 0506*      jp z,@y_neg_x_zero
040A33 F2 42 0A 04 0507*      jp p,@y_neg_x_pos
040A37             0508*  ; y neg,x neg
040A37             0509*  ; angle is 128 to 256 (270 to 360)
040A37             0510*  ; negating the intermediate does the trick
040A37 CD B4 06 04 0511*      call neg_hlu
040A3B 18 31       0512*      jr @zero_hlu
040A3D             0513*  
040A3D             0514*  @y_neg_x_zero:
040A3D             0515*  ; y neg,x zero
040A3D             0516*  ; angle is 0
040A3D 21 00 00 00 0517*      ld hl,0
040A41 C9          0518*      ret
040A42             0519*  @y_neg_x_pos:
040A42             0520*  ; y neg,x pos
040A42             0521*  ; angle is 0 to 64 (0 to 90)
040A42             0522*  ; so we're good
040A42 C9          0523*      ret
040A43             0524*  
040A43             0525*  @y_pos:
040A43 F1          0526*      pop af ; sign of x
040A44 CA 53 0A 04 0527*      jp z,@y_pos_x_zero
040A48 F2 58 0A 04 0528*      jp p,@y_pos_x_pos
040A4C             0529*  ; y pos,x neg
040A4C             0530*  ; angle is 128 to 192 (180-270)
040A4C             0531*  ; so we add 128 to intermediate
040A4C 11 00 80 00 0532*      ld de,128*256
040A50 19          0533*      add hl,de
040A51 18 1B       0534*      jr @zero_hlu
040A53             0535*  @y_pos_x_zero:
040A53             0536*  ; y pos,x zero
040A53             0537*  ; angle is 128 (180)
040A53 21 00 80 00 0538*      ld hl,128*256
040A57 C9          0539*      ret
040A58             0540*  @y_pos_x_pos:
040A58             0541*  ; y pos,x pos
040A58             0542*  ; angle is 64 to 128 (90 to 180)
040A58             0543*  ; neg the intermediate and add 180 degrees
040A58 CD B4 06 04 0544*      call neg_hlu
040A5C 11 00 80 00 0545*      ld de,128*256
040A60 19          0546*      add hl,de
040A61 18 0B       0547*      jr @zero_hlu
040A63             0548*  
040A63             0549*  @y_zero:
040A63 F1          0550*      pop af ; sign of x
040A64 FA 69 0A 04 0551*      jp m,@y_zero_x_neg
040A68             0552*  ; y zero,x pos
040A68             0553*  ; angle is 64 (90),nothing to do
040A68 C9          0554*      ret
040A69             0555*  @y_zero_x_neg:
040A69             0556*  ; y zero ,x neg
040A69             0557*  ; angle is 192 (270)
040A69 21 00 C0 00 0558*      ld hl,192*256
040A6D C9          0559*      ret
040A6E             0560*  @zero_hlu:
040A6E AF          0561*      xor a
040A6F 22 7C 0A 04 0562*      ld (@scratch),hl
040A73 32 7E 0A 04 0563*      ld (@scratch+2),a
040A77 2A 7C 0A 04 0564*      ld hl,(@scratch)
040A7B C9          0565*      ret
040A7C             0566*  @scratch: ds 6
040A82             0567*  
040A82             0568*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A82             0569*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040A82             0570*  ; destroys: a,hl,bc,de
040A82             0571*  ; note: only works for angles from 0 to 32 (45) degrees
040A82             0572*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040A82             0573*  atan_168fast:
040A82             0574*  ; because we use compass headings instead of geometric angles
040A82             0575*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040A82             0576*  ; we can do faster unsigned division here because we know dx and dy are positive
040A82 CD 82 08 04 0577*      call udiv168 ; ud.e = dx/dy
040A86 EB          0578*      ex de,hl ; uh.l = dx/dy
040A87             0579*  ; test uh.l for 0
040A87 19          0580*      add hl,de
040A88 B7          0581*      or a
040A89 ED 52       0582*      sbc hl,de
040A8B 28 22       0583*      jr z,@is_zero
040A8D             0584*  ; test uh.l for 1
040A8D AF          0585*      xor a ; clear carry
040A8E EB          0586*      ex de,hl
040A8F 21 00 01 00 0587*      ld hl,1*256 ; 1 in 16.8 fixed format
040A93 ED 52       0588*      sbc hl,de
040A95 28 13       0589*      jr z,@is_45
040A97 EB          0590*      ex de,hl
040A98             0591*  ; no special cases so we move on
040A98             0592*  ; l contains the fractional portion of tan(uh.l)
040A98             0593*  ; we multiply it by three to get our lookup table index
040A98 26 03       0594*      ld h,3
040A9A ED 6C       0595*      mlt hl ; index into lut
040A9C 11 00 00 00 0596*      ld de,0 ; clear deu
040AA0 54          0597*      ld d,h ; copy hl to de
040AA1 5D          0598*      ld e,l ; de contains our index
040AA2 21 A7 0E 04 0599*      ld hl,atan_lut_168 ; grab the lut address
040AA6 19          0600*      add hl,de ; bump hl by the index
040AA7 ED 27       0601*      ld hl,(hl) ; don't try this on a z80!
040AA9 C9          0602*      ret ; and out
040AAA             0603*  @is_45:
040AAA 21 00 40 00 0604*      ld hl,64*256
040AAE C9          0605*      ret
040AAF             0606*  ; for the case tan(0)
040AAF             0607*  @is_zero:
040AAF 21 00 00 00 0608*      ld hl,0*256
040AB3 C9          0609*      ret
040AB4             0610*  
040AB4             0611*  ; Expects  ADL mode
040AB4             0612*  ; Inputs:  UH.L
040AB4             0613*  ; Outputs: UH.L is the 16.8 square root
040AB4             0614*  ;          UDE is the integer difference inputHL-DE^2
040AB4             0615*  sqrt168:
040AB4 CD BE 0A 04 0616*      call sqrt24
040AB8 EB          0617*      ex de,hl
040AB9 29          0618*      add hl,hl
040ABA 29          0619*      add hl,hl
040ABB 29          0620*      add hl,hl
040ABC 29          0621*      add hl,hl
040ABD C9          0622*      ret
040ABE             0623*  
040ABE             0624*  ; credit: xeda112358
040ABE             0625*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040ABE             0626*  sqrt24:
040ABE             0627*  ; Expects ADL mode
040ABE             0628*  ; Inputs: HL
040ABE             0629*  ; Outputs: DE is the integer square root
040ABE             0630*  ;  HL is the difference inputHL-DE^2
040ABE             0631*  ;  c flag reset
040ABE 01 00 00 00 0632*      ld bc,0 ; clear bcu
040AC2 11 00 00 00 0633*      ld de,0 ; clear deu
040AC6 AF          0634*      xor a
040AC7 45          0635*      ld b,l
040AC8 C5          0636*      push bc
040AC9 47          0637*      ld b,a
040ACA 6F          0638*      ld l,a
040ACB             0639*  ; Iteration 1
040ACB 29          0640*      add hl,hl
040ACC CB 11       0641*      rl c
040ACE 29          0642*      add hl,hl
040ACF CB 11       0643*      rl c
040AD1 91          0644*      sub c
040AD2 30 04       0645*      jr nc,$+6
040AD4 1C          0646*      inc e
040AD5 1C          0647*      inc e
040AD6 2F          0648*      cpl
040AD7 4F          0649*      ld c,a
040AD8             0650*  ; Iteration 2
040AD8 29          0651*      add hl,hl
040AD9 CB 11       0652*      rl c
040ADB 29          0653*      add hl,hl
040ADC CB 11       0654*      rl c
040ADE CB 13       0655*      rl e
040AE0 7B          0656*      ld a,e
040AE1 91          0657*      sub c
040AE2 30 04       0658*      jr nc,$+6
040AE4 1C          0659*      inc e
040AE5 1C          0660*      inc e
040AE6 2F          0661*      cpl
040AE7 4F          0662*      ld c,a
040AE8             0663*  ; Iteration 3
040AE8 29          0664*      add hl,hl
040AE9 CB 11       0665*      rl c
040AEB 29          0666*      add hl,hl
040AEC CB 11       0667*      rl c
040AEE CB 13       0668*      rl e
040AF0 7B          0669*      ld a,e
040AF1 91          0670*      sub c
040AF2 30 04       0671*      jr nc,$+6
040AF4 1C          0672*      inc e
040AF5 1C          0673*      inc e
040AF6 2F          0674*      cpl
040AF7 4F          0675*      ld c,a
040AF8             0676*  ; Iteration 4
040AF8 29          0677*      add hl,hl
040AF9 CB 11       0678*      rl c
040AFB 29          0679*      add hl,hl
040AFC CB 11       0680*      rl c
040AFE CB 13       0681*      rl e
040B00 7B          0682*      ld a,e
040B01 91          0683*      sub c
040B02 30 04       0684*      jr nc,$+6
040B04 1C          0685*      inc e
040B05 1C          0686*      inc e
040B06 2F          0687*      cpl
040B07 4F          0688*      ld c,a
040B08             0689*  ; Iteration 5
040B08 29          0690*      add hl,hl
040B09 CB 11       0691*      rl c
040B0B 29          0692*      add hl,hl
040B0C CB 11       0693*      rl c
040B0E CB 13       0694*      rl e
040B10 7B          0695*      ld a,e
040B11 91          0696*      sub c
040B12 30 04       0697*      jr nc,$+6
040B14 1C          0698*      inc e
040B15 1C          0699*      inc e
040B16 2F          0700*      cpl
040B17 4F          0701*      ld c,a
040B18             0702*  ; Iteration 6
040B18 29          0703*      add hl,hl
040B19 CB 11       0704*      rl c
040B1B 29          0705*      add hl,hl
040B1C CB 11       0706*      rl c
040B1E CB 13       0707*      rl e
040B20 7B          0708*      ld a,e
040B21 91          0709*      sub c
040B22 30 04       0710*      jr nc,$+6
040B24 1C          0711*      inc e
040B25 1C          0712*      inc e
040B26 2F          0713*      cpl
040B27 4F          0714*      ld c,a
040B28             0715*  ; Iteration 7
040B28 29          0716*      add hl,hl
040B29 CB 11       0717*      rl c
040B2B 29          0718*      add hl,hl
040B2C CB 11       0719*      rl c
040B2E CB 10       0720*      rl b
040B30 EB          0721*      ex de,hl
040B31 29          0722*      add hl,hl
040B32 E5          0723*      push hl
040B33 ED 42       0724*      sbc hl,bc
040B35 30 06       0725*      jr nc,$+8
040B37 7C          0726*      ld a,h
040B38 2F          0727*      cpl
040B39 47          0728*      ld b,a
040B3A 7D          0729*      ld a,l
040B3B 2F          0730*      cpl
040B3C 4F          0731*      ld c,a
040B3D E1          0732*      pop hl
040B3E 30 02       0733*      jr nc,$+4
040B40 23          0734*      inc hl
040B41 23          0735*      inc hl
040B42 EB          0736*      ex de,hl
040B43             0737*  ; Iteration 8
040B43 29          0738*      add hl,hl
040B44 69          0739*      ld l,c
040B45 60          0740*      ld h,b
040B46 ED 6A       0741*      adc hl,hl
040B48 ED 6A       0742*      adc hl,hl
040B4A EB          0743*      ex de,hl
040B4B 29          0744*      add hl,hl
040B4C ED 52       0745*      sbc hl,de
040B4E 19          0746*      add hl,de
040B4F EB          0747*      ex de,hl
040B50 30 04       0748*      jr nc,$+6
040B52 ED 52       0749*      sbc hl,de
040B54 13          0750*      inc de
040B55 13          0751*      inc de
040B56             0752*  ; Iteration 9
040B56 F1          0753*      pop af
040B57 17          0754*      rla
040B58 ED 6A       0755*      adc hl,hl
040B5A 17          0756*      rla
040B5B ED 6A       0757*      adc hl,hl
040B5D EB          0758*      ex de,hl
040B5E 29          0759*      add hl,hl
040B5F ED 52       0760*      sbc hl,de
040B61 19          0761*      add hl,de
040B62 EB          0762*      ex de,hl
040B63 30 04       0763*      jr nc,$+6
040B65 ED 52       0764*      sbc hl,de
040B67 13          0765*      inc de
040B68 13          0766*      inc de
040B69             0767*  ; Iteration 10
040B69 17          0768*      rla
040B6A ED 6A       0769*      adc hl,hl
040B6C 17          0770*      rla
040B6D ED 6A       0771*      adc hl,hl
040B6F EB          0772*      ex de,hl
040B70 29          0773*      add hl,hl
040B71 ED 52       0774*      sbc hl,de
040B73 19          0775*      add hl,de
040B74 EB          0776*      ex de,hl
040B75 30 04       0777*      jr nc,$+6
040B77 ED 52       0778*      sbc hl,de
040B79 13          0779*      inc de
040B7A 13          0780*      inc de
040B7B             0781*  ; Iteration 11
040B7B 17          0782*      rla
040B7C ED 6A       0783*      adc hl,hl
040B7E 17          0784*      rla
040B7F ED 6A       0785*      adc hl,hl
040B81 EB          0786*      ex de,hl
040B82 29          0787*      add hl,hl
040B83 ED 52       0788*      sbc hl,de
040B85 19          0789*      add hl,de
040B86 EB          0790*      ex de,hl
040B87 30 04       0791*      jr nc,$+6
040B89 ED 52       0792*      sbc hl,de
040B8B 13          0793*      inc de
040B8C 13          0794*      inc de
040B8D             0795*  ; Iteration 12
040B8D 17          0796*      rla
040B8E ED 6A       0797*      adc hl,hl
040B90 17          0798*      rla
040B91 ED 6A       0799*      adc hl,hl
040B93 EB          0800*      ex de,hl
040B94 29          0801*      add hl,hl
040B95 ED 52       0802*      sbc hl,de
040B97 19          0803*      add hl,de
040B98 EB          0804*      ex de,hl
040B99 30 04       0805*      jr nc,$+6
040B9B ED 52       0806*      sbc hl,de
040B9D 13          0807*      inc de
040B9E 13          0808*      inc de
040B9F CB 1A       0809*      rr d
040BA1 CB 1B       0810*      rr e
040BA3 C9          0811*      ret
040BA4             0812*  
040BA4             0813*  sin_lut_168:
040BA4 00 00 00    0814*      dl 0x000000 ; 0.000 00, 0.000
040BA7 06 00 00    0815*      dl 0x000006 ; 1.406 01, 0.025
040BAA 0C 00 00    0816*      dl 0x00000C ; 2.813 02, 0.049
040BAD 12 00 00    0817*      dl 0x000012 ; 4.219 03, 0.074
040BB0 19 00 00    0818*      dl 0x000019 ; 5.625 04, 0.098
040BB3 1F 00 00    0819*      dl 0x00001F ; 7.031 05, 0.122
040BB6 25 00 00    0820*      dl 0x000025 ; 8.438 06, 0.147
040BB9 2B 00 00    0821*      dl 0x00002B ; 9.844 07, 0.171
040BBC 31 00 00    0822*      dl 0x000031 ; 11.250 08, 0.195
040BBF 38 00 00    0823*      dl 0x000038 ; 12.656 09, 0.219
040BC2 3E 00 00    0824*      dl 0x00003E ; 14.063 0A, 0.243
040BC5 44 00 00    0825*      dl 0x000044 ; 15.469 0B, 0.267
040BC8 4A 00 00    0826*      dl 0x00004A ; 16.875 0C, 0.290
040BCB 50 00 00    0827*      dl 0x000050 ; 18.281 0D, 0.314
040BCE 56 00 00    0828*      dl 0x000056 ; 19.688 0E, 0.337
040BD1 5C 00 00    0829*      dl 0x00005C ; 21.094 0F, 0.360
040BD4 61 00 00    0830*      dl 0x000061 ; 22.500 10, 0.383
040BD7 67 00 00    0831*      dl 0x000067 ; 23.906 11, 0.405
040BDA 6D 00 00    0832*      dl 0x00006D ; 25.313 12, 0.428
040BDD 73 00 00    0833*      dl 0x000073 ; 26.719 13, 0.450
040BE0 78 00 00    0834*      dl 0x000078 ; 28.125 14, 0.471
040BE3 7E 00 00    0835*      dl 0x00007E ; 29.531 15, 0.493
040BE6 83 00 00    0836*      dl 0x000083 ; 30.938 16, 0.514
040BE9 88 00 00    0837*      dl 0x000088 ; 32.344 17, 0.535
040BEC 8E 00 00    0838*      dl 0x00008E ; 33.750 18, 0.556
040BEF 93 00 00    0839*      dl 0x000093 ; 35.156 19, 0.576
040BF2 98 00 00    0840*      dl 0x000098 ; 36.563 1A, 0.596
040BF5 9D 00 00    0841*      dl 0x00009D ; 37.969 1B, 0.615
040BF8 A2 00 00    0842*      dl 0x0000A2 ; 39.375 1C, 0.634
040BFB A7 00 00    0843*      dl 0x0000A7 ; 40.781 1D, 0.653
040BFE AB 00 00    0844*      dl 0x0000AB ; 42.188 1E, 0.672
040C01 B0 00 00    0845*      dl 0x0000B0 ; 43.594 1F, 0.690
040C04 B5 00 00    0846*      dl 0x0000B5 ; 45.000 20, 0.707
040C07 B9 00 00    0847*      dl 0x0000B9 ; 46.406 21, 0.724
040C0A BD 00 00    0848*      dl 0x0000BD ; 47.813 22, 0.741
040C0D C1 00 00    0849*      dl 0x0000C1 ; 49.219 23, 0.757
040C10 C5 00 00    0850*      dl 0x0000C5 ; 50.625 24, 0.773
040C13 C9 00 00    0851*      dl 0x0000C9 ; 52.031 25, 0.788
040C16 CD 00 00    0852*      dl 0x0000CD ; 53.438 26, 0.803
040C19 D1 00 00    0853*      dl 0x0000D1 ; 54.844 27, 0.818
040C1C D4 00 00    0854*      dl 0x0000D4 ; 56.250 28, 0.831
040C1F D8 00 00    0855*      dl 0x0000D8 ; 57.656 29, 0.845
040C22 DB 00 00    0856*      dl 0x0000DB ; 59.063 2A, 0.858
040C25 DE 00 00    0857*      dl 0x0000DE ; 60.469 2B, 0.870
040C28 E1 00 00    0858*      dl 0x0000E1 ; 61.875 2C, 0.882
040C2B E4 00 00    0859*      dl 0x0000E4 ; 63.281 2D, 0.893
040C2E E7 00 00    0860*      dl 0x0000E7 ; 64.688 2E, 0.904
040C31 EA 00 00    0861*      dl 0x0000EA ; 66.094 2F, 0.914
040C34 EC 00 00    0862*      dl 0x0000EC ; 67.500 30, 0.924
040C37 EE 00 00    0863*      dl 0x0000EE ; 68.906 31, 0.933
040C3A F1 00 00    0864*      dl 0x0000F1 ; 70.313 32, 0.942
040C3D F3 00 00    0865*      dl 0x0000F3 ; 71.719 33, 0.950
040C40 F4 00 00    0866*      dl 0x0000F4 ; 73.125 34, 0.957
040C43 F6 00 00    0867*      dl 0x0000F6 ; 74.531 35, 0.964
040C46 F8 00 00    0868*      dl 0x0000F8 ; 75.938 36, 0.970
040C49 F9 00 00    0869*      dl 0x0000F9 ; 77.344 37, 0.976
040C4C FB 00 00    0870*      dl 0x0000FB ; 78.750 38, 0.981
040C4F FC 00 00    0871*      dl 0x0000FC ; 80.156 39, 0.985
040C52 FD 00 00    0872*      dl 0x0000FD ; 81.563 3A, 0.989
040C55 FE 00 00    0873*      dl 0x0000FE ; 82.969 3B, 0.992
040C58 FE 00 00    0874*      dl 0x0000FE ; 84.375 3C, 0.995
040C5B FF 00 00    0875*      dl 0x0000FF ; 85.781 3D, 0.997
040C5E FF 00 00    0876*      dl 0x0000FF ; 87.188 3E, 0.999
040C61 FF 00 00    0877*      dl 0x0000FF ; 88.594 3F, 1.000
040C64 00 01 00    0878*      dl 0x000100 ; 90.000 40, 1.000
040C67 FF 00 00    0879*      dl 0x0000FF ; 91.406 41, 1.000
040C6A FF 00 00    0880*      dl 0x0000FF ; 92.813 42, 0.999
040C6D FF 00 00    0881*      dl 0x0000FF ; 94.219 43, 0.997
040C70 FE 00 00    0882*      dl 0x0000FE ; 95.625 44, 0.995
040C73 FE 00 00    0883*      dl 0x0000FE ; 97.031 45, 0.992
040C76 FD 00 00    0884*      dl 0x0000FD ; 98.438 46, 0.989
040C79 FC 00 00    0885*      dl 0x0000FC ; 99.844 47, 0.985
040C7C FB 00 00    0886*      dl 0x0000FB ; 101.250 48, 0.981
040C7F F9 00 00    0887*      dl 0x0000F9 ; 102.656 49, 0.976
040C82 F8 00 00    0888*      dl 0x0000F8 ; 104.063 4A, 0.970
040C85 F6 00 00    0889*      dl 0x0000F6 ; 105.469 4B, 0.964
040C88 F4 00 00    0890*      dl 0x0000F4 ; 106.875 4C, 0.957
040C8B F3 00 00    0891*      dl 0x0000F3 ; 108.281 4D, 0.950
040C8E F1 00 00    0892*      dl 0x0000F1 ; 109.688 4E, 0.942
040C91 EE 00 00    0893*      dl 0x0000EE ; 111.094 4F, 0.933
040C94 EC 00 00    0894*      dl 0x0000EC ; 112.500 50, 0.924
040C97 EA 00 00    0895*      dl 0x0000EA ; 113.906 51, 0.914
040C9A E7 00 00    0896*      dl 0x0000E7 ; 115.313 52, 0.904
040C9D E4 00 00    0897*      dl 0x0000E4 ; 116.719 53, 0.893
040CA0 E1 00 00    0898*      dl 0x0000E1 ; 118.125 54, 0.882
040CA3 DE 00 00    0899*      dl 0x0000DE ; 119.531 55, 0.870
040CA6 DB 00 00    0900*      dl 0x0000DB ; 120.938 56, 0.858
040CA9 D8 00 00    0901*      dl 0x0000D8 ; 122.344 57, 0.845
040CAC D4 00 00    0902*      dl 0x0000D4 ; 123.750 58, 0.831
040CAF D1 00 00    0903*      dl 0x0000D1 ; 125.156 59, 0.818
040CB2 CD 00 00    0904*      dl 0x0000CD ; 126.563 5A, 0.803
040CB5 C9 00 00    0905*      dl 0x0000C9 ; 127.969 5B, 0.788
040CB8 C5 00 00    0906*      dl 0x0000C5 ; 129.375 5C, 0.773
040CBB C1 00 00    0907*      dl 0x0000C1 ; 130.781 5D, 0.757
040CBE BD 00 00    0908*      dl 0x0000BD ; 132.188 5E, 0.741
040CC1 B9 00 00    0909*      dl 0x0000B9 ; 133.594 5F, 0.724
040CC4 B5 00 00    0910*      dl 0x0000B5 ; 135.000 60, 0.707
040CC7 B0 00 00    0911*      dl 0x0000B0 ; 136.406 61, 0.690
040CCA AB 00 00    0912*      dl 0x0000AB ; 137.813 62, 0.672
040CCD A7 00 00    0913*      dl 0x0000A7 ; 139.219 63, 0.653
040CD0 A2 00 00    0914*      dl 0x0000A2 ; 140.625 64, 0.634
040CD3 9D 00 00    0915*      dl 0x00009D ; 142.031 65, 0.615
040CD6 98 00 00    0916*      dl 0x000098 ; 143.438 66, 0.596
040CD9 93 00 00    0917*      dl 0x000093 ; 144.844 67, 0.576
040CDC 8E 00 00    0918*      dl 0x00008E ; 146.250 68, 0.556
040CDF 88 00 00    0919*      dl 0x000088 ; 147.656 69, 0.535
040CE2 83 00 00    0920*      dl 0x000083 ; 149.063 6A, 0.514
040CE5 7E 00 00    0921*      dl 0x00007E ; 150.469 6B, 0.493
040CE8 78 00 00    0922*      dl 0x000078 ; 151.875 6C, 0.471
040CEB 73 00 00    0923*      dl 0x000073 ; 153.281 6D, 0.450
040CEE 6D 00 00    0924*      dl 0x00006D ; 154.688 6E, 0.428
040CF1 67 00 00    0925*      dl 0x000067 ; 156.094 6F, 0.405
040CF4 61 00 00    0926*      dl 0x000061 ; 157.500 70, 0.383
040CF7 5C 00 00    0927*      dl 0x00005C ; 158.906 71, 0.360
040CFA 56 00 00    0928*      dl 0x000056 ; 160.313 72, 0.337
040CFD 50 00 00    0929*      dl 0x000050 ; 161.719 73, 0.314
040D00 4A 00 00    0930*      dl 0x00004A ; 163.125 74, 0.290
040D03 44 00 00    0931*      dl 0x000044 ; 164.531 75, 0.267
040D06 3E 00 00    0932*      dl 0x00003E ; 165.938 76, 0.243
040D09 38 00 00    0933*      dl 0x000038 ; 167.344 77, 0.219
040D0C 31 00 00    0934*      dl 0x000031 ; 168.750 78, 0.195
040D0F 2B 00 00    0935*      dl 0x00002B ; 170.156 79, 0.171
040D12 25 00 00    0936*      dl 0x000025 ; 171.563 7A, 0.147
040D15 1F 00 00    0937*      dl 0x00001F ; 172.969 7B, 0.122
040D18 19 00 00    0938*      dl 0x000019 ; 174.375 7C, 0.098
040D1B 12 00 00    0939*      dl 0x000012 ; 175.781 7D, 0.074
040D1E 0C 00 00    0940*      dl 0x00000C ; 177.188 7E, 0.049
040D21 06 00 00    0941*      dl 0x000006 ; 178.594 7F, 0.025
040D24 00 00 00    0942*      dl 0x000000 ; 180.000 80, 0.000
040D27 FA FF FF    0943*      dl 0xFFFFFA ; 181.406 81, -0.025
040D2A F4 FF FF    0944*      dl 0xFFFFF4 ; 182.813 82, -0.049
040D2D EE FF FF    0945*      dl 0xFFFFEE ; 184.219 83, -0.074
040D30 E7 FF FF    0946*      dl 0xFFFFE7 ; 185.625 84, -0.098
040D33 E1 FF FF    0947*      dl 0xFFFFE1 ; 187.031 85, -0.122
040D36 DB FF FF    0948*      dl 0xFFFFDB ; 188.438 86, -0.147
040D39 D5 FF FF    0949*      dl 0xFFFFD5 ; 189.844 87, -0.171
040D3C CF FF FF    0950*      dl 0xFFFFCF ; 191.250 88, -0.195
040D3F C8 FF FF    0951*      dl 0xFFFFC8 ; 192.656 89, -0.219
040D42 C2 FF FF    0952*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040D45 BC FF FF    0953*      dl 0xFFFFBC ; 195.469 8B, -0.267
040D48 B6 FF FF    0954*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040D4B B0 FF FF    0955*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040D4E AA FF FF    0956*      dl 0xFFFFAA ; 199.688 8E, -0.337
040D51 A4 FF FF    0957*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040D54 9F FF FF    0958*      dl 0xFFFF9F ; 202.500 90, -0.383
040D57 99 FF FF    0959*      dl 0xFFFF99 ; 203.906 91, -0.405
040D5A 93 FF FF    0960*      dl 0xFFFF93 ; 205.313 92, -0.428
040D5D 8D FF FF    0961*      dl 0xFFFF8D ; 206.719 93, -0.450
040D60 88 FF FF    0962*      dl 0xFFFF88 ; 208.125 94, -0.471
040D63 82 FF FF    0963*      dl 0xFFFF82 ; 209.531 95, -0.493
040D66 7D FF FF    0964*      dl 0xFFFF7D ; 210.938 96, -0.514
040D69 78 FF FF    0965*      dl 0xFFFF78 ; 212.344 97, -0.535
040D6C 72 FF FF    0966*      dl 0xFFFF72 ; 213.750 98, -0.556
040D6F 6D FF FF    0967*      dl 0xFFFF6D ; 215.156 99, -0.576
040D72 68 FF FF    0968*      dl 0xFFFF68 ; 216.563 9A, -0.596
040D75 63 FF FF    0969*      dl 0xFFFF63 ; 217.969 9B, -0.615
040D78 5E FF FF    0970*      dl 0xFFFF5E ; 219.375 9C, -0.634
040D7B 59 FF FF    0971*      dl 0xFFFF59 ; 220.781 9D, -0.653
040D7E 55 FF FF    0972*      dl 0xFFFF55 ; 222.188 9E, -0.672
040D81 50 FF FF    0973*      dl 0xFFFF50 ; 223.594 9F, -0.690
040D84 4B FF FF    0974*      dl 0xFFFF4B ; 225.000 A0, -0.707
040D87 47 FF FF    0975*      dl 0xFFFF47 ; 226.406 A1, -0.724
040D8A 43 FF FF    0976*      dl 0xFFFF43 ; 227.813 A2, -0.741
040D8D 3F FF FF    0977*      dl 0xFFFF3F ; 229.219 A3, -0.757
040D90 3B FF FF    0978*      dl 0xFFFF3B ; 230.625 A4, -0.773
040D93 37 FF FF    0979*      dl 0xFFFF37 ; 232.031 A5, -0.788
040D96 33 FF FF    0980*      dl 0xFFFF33 ; 233.438 A6, -0.803
040D99 2F FF FF    0981*      dl 0xFFFF2F ; 234.844 A7, -0.818
040D9C 2C FF FF    0982*      dl 0xFFFF2C ; 236.250 A8, -0.831
040D9F 28 FF FF    0983*      dl 0xFFFF28 ; 237.656 A9, -0.845
040DA2 25 FF FF    0984*      dl 0xFFFF25 ; 239.063 AA, -0.858
040DA5 22 FF FF    0985*      dl 0xFFFF22 ; 240.469 AB, -0.870
040DA8 1F FF FF    0986*      dl 0xFFFF1F ; 241.875 AC, -0.882
040DAB 1C FF FF    0987*      dl 0xFFFF1C ; 243.281 AD, -0.893
040DAE 19 FF FF    0988*      dl 0xFFFF19 ; 244.688 AE, -0.904
040DB1 16 FF FF    0989*      dl 0xFFFF16 ; 246.094 AF, -0.914
040DB4 14 FF FF    0990*      dl 0xFFFF14 ; 247.500 B0, -0.924
040DB7 12 FF FF    0991*      dl 0xFFFF12 ; 248.906 B1, -0.933
040DBA 0F FF FF    0992*      dl 0xFFFF0F ; 250.313 B2, -0.942
040DBD 0D FF FF    0993*      dl 0xFFFF0D ; 251.719 B3, -0.950
040DC0 0C FF FF    0994*      dl 0xFFFF0C ; 253.125 B4, -0.957
040DC3 0A FF FF    0995*      dl 0xFFFF0A ; 254.531 B5, -0.964
040DC6 08 FF FF    0996*      dl 0xFFFF08 ; 255.938 B6, -0.970
040DC9 07 FF FF    0997*      dl 0xFFFF07 ; 257.344 B7, -0.976
040DCC 05 FF FF    0998*      dl 0xFFFF05 ; 258.750 B8, -0.981
040DCF 04 FF FF    0999*      dl 0xFFFF04 ; 260.156 B9, -0.985
040DD2 03 FF FF    1000*      dl 0xFFFF03 ; 261.563 BA, -0.989
040DD5 02 FF FF    1001*      dl 0xFFFF02 ; 262.969 BB, -0.992
040DD8 02 FF FF    1002*      dl 0xFFFF02 ; 264.375 BC, -0.995
040DDB 01 FF FF    1003*      dl 0xFFFF01 ; 265.781 BD, -0.997
040DDE 01 FF FF    1004*      dl 0xFFFF01 ; 267.188 BE, -0.999
040DE1 01 FF FF    1005*      dl 0xFFFF01 ; 268.594 BF, -1.000
040DE4 00 FF FF    1006*      dl 0xFFFF00 ; 270.000 C0, -1.000
040DE7 01 FF FF    1007*      dl 0xFFFF01 ; 271.406 C1, -1.000
040DEA 01 FF FF    1008*      dl 0xFFFF01 ; 272.813 C2, -0.999
040DED 01 FF FF    1009*      dl 0xFFFF01 ; 274.219 C3, -0.997
040DF0 02 FF FF    1010*      dl 0xFFFF02 ; 275.625 C4, -0.995
040DF3 02 FF FF    1011*      dl 0xFFFF02 ; 277.031 C5, -0.992
040DF6 03 FF FF    1012*      dl 0xFFFF03 ; 278.438 C6, -0.989
040DF9 04 FF FF    1013*      dl 0xFFFF04 ; 279.844 C7, -0.985
040DFC 05 FF FF    1014*      dl 0xFFFF05 ; 281.250 C8, -0.981
040DFF 07 FF FF    1015*      dl 0xFFFF07 ; 282.656 C9, -0.976
040E02 08 FF FF    1016*      dl 0xFFFF08 ; 284.063 CA, -0.970
040E05 0A FF FF    1017*      dl 0xFFFF0A ; 285.469 CB, -0.964
040E08 0C FF FF    1018*      dl 0xFFFF0C ; 286.875 CC, -0.957
040E0B 0D FF FF    1019*      dl 0xFFFF0D ; 288.281 CD, -0.950
040E0E 0F FF FF    1020*      dl 0xFFFF0F ; 289.688 CE, -0.942
040E11 12 FF FF    1021*      dl 0xFFFF12 ; 291.094 CF, -0.933
040E14 14 FF FF    1022*      dl 0xFFFF14 ; 292.500 D0, -0.924
040E17 16 FF FF    1023*      dl 0xFFFF16 ; 293.906 D1, -0.914
040E1A 19 FF FF    1024*      dl 0xFFFF19 ; 295.313 D2, -0.904
040E1D 1C FF FF    1025*      dl 0xFFFF1C ; 296.719 D3, -0.893
040E20 1F FF FF    1026*      dl 0xFFFF1F ; 298.125 D4, -0.882
040E23 22 FF FF    1027*      dl 0xFFFF22 ; 299.531 D5, -0.870
040E26 25 FF FF    1028*      dl 0xFFFF25 ; 300.938 D6, -0.858
040E29 28 FF FF    1029*      dl 0xFFFF28 ; 302.344 D7, -0.845
040E2C 2C FF FF    1030*      dl 0xFFFF2C ; 303.750 D8, -0.831
040E2F 2F FF FF    1031*      dl 0xFFFF2F ; 305.156 D9, -0.818
040E32 33 FF FF    1032*      dl 0xFFFF33 ; 306.563 DA, -0.803
040E35 37 FF FF    1033*      dl 0xFFFF37 ; 307.969 DB, -0.788
040E38 3B FF FF    1034*      dl 0xFFFF3B ; 309.375 DC, -0.773
040E3B 3F FF FF    1035*      dl 0xFFFF3F ; 310.781 DD, -0.757
040E3E 43 FF FF    1036*      dl 0xFFFF43 ; 312.188 DE, -0.741
040E41 47 FF FF    1037*      dl 0xFFFF47 ; 313.594 DF, -0.724
040E44 4B FF FF    1038*      dl 0xFFFF4B ; 315.000 E0, -0.707
040E47 50 FF FF    1039*      dl 0xFFFF50 ; 316.406 E1, -0.690
040E4A 55 FF FF    1040*      dl 0xFFFF55 ; 317.813 E2, -0.672
040E4D 59 FF FF    1041*      dl 0xFFFF59 ; 319.219 E3, -0.653
040E50 5E FF FF    1042*      dl 0xFFFF5E ; 320.625 E4, -0.634
040E53 63 FF FF    1043*      dl 0xFFFF63 ; 322.031 E5, -0.615
040E56 68 FF FF    1044*      dl 0xFFFF68 ; 323.438 E6, -0.596
040E59 6D FF FF    1045*      dl 0xFFFF6D ; 324.844 E7, -0.576
040E5C 72 FF FF    1046*      dl 0xFFFF72 ; 326.250 E8, -0.556
040E5F 78 FF FF    1047*      dl 0xFFFF78 ; 327.656 E9, -0.535
040E62 7D FF FF    1048*      dl 0xFFFF7D ; 329.063 EA, -0.514
040E65 82 FF FF    1049*      dl 0xFFFF82 ; 330.469 EB, -0.493
040E68 88 FF FF    1050*      dl 0xFFFF88 ; 331.875 EC, -0.471
040E6B 8D FF FF    1051*      dl 0xFFFF8D ; 333.281 ED, -0.450
040E6E 93 FF FF    1052*      dl 0xFFFF93 ; 334.688 EE, -0.428
040E71 99 FF FF    1053*      dl 0xFFFF99 ; 336.094 EF, -0.405
040E74 9F FF FF    1054*      dl 0xFFFF9F ; 337.500 F0, -0.383
040E77 A4 FF FF    1055*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040E7A AA FF FF    1056*      dl 0xFFFFAA ; 340.313 F2, -0.337
040E7D B0 FF FF    1057*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040E80 B6 FF FF    1058*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040E83 BC FF FF    1059*      dl 0xFFFFBC ; 344.531 F5, -0.267
040E86 C2 FF FF    1060*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040E89 C8 FF FF    1061*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040E8C CF FF FF    1062*      dl 0xFFFFCF ; 348.750 F8, -0.195
040E8F D5 FF FF    1063*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040E92 DB FF FF    1064*      dl 0xFFFFDB ; 351.563 FA, -0.147
040E95 E1 FF FF    1065*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040E98 E7 FF FF    1066*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040E9B EE FF FF    1067*      dl 0xFFFFEE ; 355.781 FD, -0.074
040E9E F4 FF FF    1068*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040EA1 FA FF FF    1069*      dl 0xFFFFFA ; 358.594 FF, -0.025
040EA4 00 00 00    1070*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040EA7             1071*  
040EA7             1072*  atan_lut_168:
040EA7 00 00 00    1073*      dl 0x000000 ; 000000, 0.000
040EAA 28 00 00    1074*      dl 0x000028 ; 000001, 0.224
040EAD 51 00 00    1075*      dl 0x000051 ; 000002, 0.448
040EB0 7A 00 00    1076*      dl 0x00007A ; 000003, 0.671
040EB3 A2 00 00    1077*      dl 0x0000A2 ; 000004, 0.895
040EB6 CB 00 00    1078*      dl 0x0000CB ; 000005, 1.119
040EB9 F4 00 00    1079*      dl 0x0000F4 ; 000006, 1.343
040EBC 1D 01 00    1080*      dl 0x00011D ; 000007, 1.566
040EBF 45 01 00    1081*      dl 0x000145 ; 000008, 1.790
040EC2 6E 01 00    1082*      dl 0x00016E ; 000009, 2.013
040EC5 97 01 00    1083*      dl 0x000197 ; 00000A, 2.237
040EC8 BF 01 00    1084*      dl 0x0001BF ; 00000B, 2.460
040ECB E8 01 00    1085*      dl 0x0001E8 ; 00000C, 2.684
040ECE 11 02 00    1086*      dl 0x000211 ; 00000D, 2.907
040ED1 39 02 00    1087*      dl 0x000239 ; 00000E, 3.130
040ED4 62 02 00    1088*      dl 0x000262 ; 00000F, 3.353
040ED7 8B 02 00    1089*      dl 0x00028B ; 000010, 3.576
040EDA B3 02 00    1090*      dl 0x0002B3 ; 000011, 3.799
040EDD DC 02 00    1091*      dl 0x0002DC ; 000012, 4.022
040EE0 04 03 00    1092*      dl 0x000304 ; 000013, 4.245
040EE3 2D 03 00    1093*      dl 0x00032D ; 000014, 4.467
040EE6 55 03 00    1094*      dl 0x000355 ; 000015, 4.690
040EE9 7E 03 00    1095*      dl 0x00037E ; 000016, 4.912
040EEC A6 03 00    1096*      dl 0x0003A6 ; 000017, 5.134
040EEF CE 03 00    1097*      dl 0x0003CE ; 000018, 5.356
040EF2 F7 03 00    1098*      dl 0x0003F7 ; 000019, 5.578
040EF5 1F 04 00    1099*      dl 0x00041F ; 00001A, 5.799
040EF8 48 04 00    1100*      dl 0x000448 ; 00001B, 6.021
040EFB 70 04 00    1101*      dl 0x000470 ; 00001C, 6.242
040EFE 98 04 00    1102*      dl 0x000498 ; 00001D, 6.463
040F01 C0 04 00    1103*      dl 0x0004C0 ; 00001E, 6.684
040F04 E8 04 00    1104*      dl 0x0004E8 ; 00001F, 6.905
040F07 11 05 00    1105*      dl 0x000511 ; 000020, 7.125
040F0A 39 05 00    1106*      dl 0x000539 ; 000021, 7.345
040F0D 61 05 00    1107*      dl 0x000561 ; 000022, 7.565
040F10 89 05 00    1108*      dl 0x000589 ; 000023, 7.785
040F13 B1 05 00    1109*      dl 0x0005B1 ; 000024, 8.005
040F16 D9 05 00    1110*      dl 0x0005D9 ; 000025, 8.224
040F19 01 06 00    1111*      dl 0x000601 ; 000026, 8.443
040F1C 28 06 00    1112*      dl 0x000628 ; 000027, 8.662
040F1F 50 06 00    1113*      dl 0x000650 ; 000028, 8.881
040F22 78 06 00    1114*      dl 0x000678 ; 000029, 9.099
040F25 A0 06 00    1115*      dl 0x0006A0 ; 00002A, 9.317
040F28 C7 06 00    1116*      dl 0x0006C7 ; 00002B, 9.535
040F2B EF 06 00    1117*      dl 0x0006EF ; 00002C, 9.752
040F2E 16 07 00    1118*      dl 0x000716 ; 00002D, 9.970
040F31 3E 07 00    1119*      dl 0x00073E ; 00002E, 10.187
040F34 65 07 00    1120*      dl 0x000765 ; 00002F, 10.403
040F37 8D 07 00    1121*      dl 0x00078D ; 000030, 10.620
040F3A B4 07 00    1122*      dl 0x0007B4 ; 000031, 10.836
040F3D DB 07 00    1123*      dl 0x0007DB ; 000032, 11.051
040F40 03 08 00    1124*      dl 0x000803 ; 000033, 11.267
040F43 2A 08 00    1125*      dl 0x00082A ; 000034, 11.482
040F46 51 08 00    1126*      dl 0x000851 ; 000035, 11.697
040F49 78 08 00    1127*      dl 0x000878 ; 000036, 11.911
040F4C 9F 08 00    1128*      dl 0x00089F ; 000037, 12.125
040F4F C6 08 00    1129*      dl 0x0008C6 ; 000038, 12.339
040F52 ED 08 00    1130*      dl 0x0008ED ; 000039, 12.553
040F55 13 09 00    1131*      dl 0x000913 ; 00003A, 12.766
040F58 3A 09 00    1132*      dl 0x00093A ; 00003B, 12.978
040F5B 61 09 00    1133*      dl 0x000961 ; 00003C, 13.191
040F5E 87 09 00    1134*      dl 0x000987 ; 00003D, 13.403
040F61 AE 09 00    1135*      dl 0x0009AE ; 00003E, 13.614
040F64 D4 09 00    1136*      dl 0x0009D4 ; 00003F, 13.825
040F67 FB 09 00    1137*      dl 0x0009FB ; 000040, 14.036
040F6A 21 0A 00    1138*      dl 0x000A21 ; 000041, 14.247
040F6D 47 0A 00    1139*      dl 0x000A47 ; 000042, 14.457
040F70 6D 0A 00    1140*      dl 0x000A6D ; 000043, 14.666
040F73 94 0A 00    1141*      dl 0x000A94 ; 000044, 14.876
040F76 BA 0A 00    1142*      dl 0x000ABA ; 000045, 15.085
040F79 E0 0A 00    1143*      dl 0x000AE0 ; 000046, 15.293
040F7C 05 0B 00    1144*      dl 0x000B05 ; 000047, 15.501
040F7F 2B 0B 00    1145*      dl 0x000B2B ; 000048, 15.709
040F82 51 0B 00    1146*      dl 0x000B51 ; 000049, 15.916
040F85 77 0B 00    1147*      dl 0x000B77 ; 00004A, 16.123
040F88 9C 0B 00    1148*      dl 0x000B9C ; 00004B, 16.329
040F8B C2 0B 00    1149*      dl 0x000BC2 ; 00004C, 16.535
040F8E E7 0B 00    1150*      dl 0x000BE7 ; 00004D, 16.740
040F91 0C 0C 00    1151*      dl 0x000C0C ; 00004E, 16.945
040F94 32 0C 00    1152*      dl 0x000C32 ; 00004F, 17.150
040F97 57 0C 00    1153*      dl 0x000C57 ; 000050, 17.354
040F9A 7C 0C 00    1154*      dl 0x000C7C ; 000051, 17.558
040F9D A1 0C 00    1155*      dl 0x000CA1 ; 000052, 17.761
040FA0 C6 0C 00    1156*      dl 0x000CC6 ; 000053, 17.964
040FA3 EB 0C 00    1157*      dl 0x000CEB ; 000054, 18.166
040FA6 0F 0D 00    1158*      dl 0x000D0F ; 000055, 18.368
040FA9 34 0D 00    1159*      dl 0x000D34 ; 000056, 18.569
040FAC 58 0D 00    1160*      dl 0x000D58 ; 000057, 18.770
040FAF 7D 0D 00    1161*      dl 0x000D7D ; 000058, 18.970
040FB2 A1 0D 00    1162*      dl 0x000DA1 ; 000059, 19.170
040FB5 C6 0D 00    1163*      dl 0x000DC6 ; 00005A, 19.370
040FB8 EA 0D 00    1164*      dl 0x000DEA ; 00005B, 19.569
040FBB 0E 0E 00    1165*      dl 0x000E0E ; 00005C, 19.767
040FBE 32 0E 00    1166*      dl 0x000E32 ; 00005D, 19.965
040FC1 56 0E 00    1167*      dl 0x000E56 ; 00005E, 20.163
040FC4 7A 0E 00    1168*      dl 0x000E7A ; 00005F, 20.360
040FC7 9E 0E 00    1169*      dl 0x000E9E ; 000060, 20.556
040FCA C1 0E 00    1170*      dl 0x000EC1 ; 000061, 20.752
040FCD E5 0E 00    1171*      dl 0x000EE5 ; 000062, 20.947
040FD0 08 0F 00    1172*      dl 0x000F08 ; 000063, 21.142
040FD3 2C 0F 00    1173*      dl 0x000F2C ; 000064, 21.337
040FD6 4F 0F 00    1174*      dl 0x000F4F ; 000065, 21.531
040FD9 72 0F 00    1175*      dl 0x000F72 ; 000066, 21.724
040FDC 95 0F 00    1176*      dl 0x000F95 ; 000067, 21.917
040FDF B8 0F 00    1177*      dl 0x000FB8 ; 000068, 22.109
040FE2 DB 0F 00    1178*      dl 0x000FDB ; 000069, 22.301
040FE5 FE 0F 00    1179*      dl 0x000FFE ; 00006A, 22.493
040FE8 21 10 00    1180*      dl 0x001021 ; 00006B, 22.683
040FEB 44 10 00    1181*      dl 0x001044 ; 00006C, 22.874
040FEE 66 10 00    1182*      dl 0x001066 ; 00006D, 23.063
040FF1 89 10 00    1183*      dl 0x001089 ; 00006E, 23.253
040FF4 AB 10 00    1184*      dl 0x0010AB ; 00006F, 23.441
040FF7 CD 10 00    1185*      dl 0x0010CD ; 000070, 23.629
040FFA EF 10 00    1186*      dl 0x0010EF ; 000071, 23.817
040FFD 11 11 00    1187*      dl 0x001111 ; 000072, 24.004
041000 33 11 00    1188*      dl 0x001133 ; 000073, 24.191
041003 55 11 00    1189*      dl 0x001155 ; 000074, 24.376
041006 77 11 00    1190*      dl 0x001177 ; 000075, 24.562
041009 99 11 00    1191*      dl 0x001199 ; 000076, 24.747
04100C BA 11 00    1192*      dl 0x0011BA ; 000077, 24.931
04100F DC 11 00    1193*      dl 0x0011DC ; 000078, 25.115
041012 FD 11 00    1194*      dl 0x0011FD ; 000079, 25.298
041015 1E 12 00    1195*      dl 0x00121E ; 00007A, 25.481
041018 3F 12 00    1196*      dl 0x00123F ; 00007B, 25.663
04101B 60 12 00    1197*      dl 0x001260 ; 00007C, 25.844
04101E 81 12 00    1198*      dl 0x001281 ; 00007D, 26.025
041021 A2 12 00    1199*      dl 0x0012A2 ; 00007E, 26.206
041024 C3 12 00    1200*      dl 0x0012C3 ; 00007F, 26.386
041027 E4 12 00    1201*      dl 0x0012E4 ; 000080, 26.565
04102A 04 13 00    1202*      dl 0x001304 ; 000081, 26.744
04102D 25 13 00    1203*      dl 0x001325 ; 000082, 26.922
041030 45 13 00    1204*      dl 0x001345 ; 000083, 27.100
041033 65 13 00    1205*      dl 0x001365 ; 000084, 27.277
041036 85 13 00    1206*      dl 0x001385 ; 000085, 27.453
041039 A5 13 00    1207*      dl 0x0013A5 ; 000086, 27.629
04103C C5 13 00    1208*      dl 0x0013C5 ; 000087, 27.805
04103F E5 13 00    1209*      dl 0x0013E5 ; 000088, 27.979
041042 05 14 00    1210*      dl 0x001405 ; 000089, 28.154
041045 24 14 00    1211*      dl 0x001424 ; 00008A, 28.327
041048 44 14 00    1212*      dl 0x001444 ; 00008B, 28.501
04104B 63 14 00    1213*      dl 0x001463 ; 00008C, 28.673
04104E 83 14 00    1214*      dl 0x001483 ; 00008D, 28.845
041051 A2 14 00    1215*      dl 0x0014A2 ; 00008E, 29.017
041054 C1 14 00    1216*      dl 0x0014C1 ; 00008F, 29.187
041057 E0 14 00    1217*      dl 0x0014E0 ; 000090, 29.358
04105A FF 14 00    1218*      dl 0x0014FF ; 000091, 29.527
04105D 1E 15 00    1219*      dl 0x00151E ; 000092, 29.697
041060 3C 15 00    1220*      dl 0x00153C ; 000093, 29.865
041063 5B 15 00    1221*      dl 0x00155B ; 000094, 30.033
041066 79 15 00    1222*      dl 0x001579 ; 000095, 30.201
041069 98 15 00    1223*      dl 0x001598 ; 000096, 30.368
04106C B6 15 00    1224*      dl 0x0015B6 ; 000097, 30.534
04106F D4 15 00    1225*      dl 0x0015D4 ; 000098, 30.700
041072 F2 15 00    1226*      dl 0x0015F2 ; 000099, 30.865
041075 10 16 00    1227*      dl 0x001610 ; 00009A, 31.030
041078 2E 16 00    1228*      dl 0x00162E ; 00009B, 31.194
04107B 4C 16 00    1229*      dl 0x00164C ; 00009C, 31.357
04107E 6A 16 00    1230*      dl 0x00166A ; 00009D, 31.520
041081 87 16 00    1231*      dl 0x001687 ; 00009E, 31.682
041084 A5 16 00    1232*      dl 0x0016A5 ; 00009F, 31.844
041087 C2 16 00    1233*      dl 0x0016C2 ; 0000A0, 32.005
04108A DF 16 00    1234*      dl 0x0016DF ; 0000A1, 32.166
04108D FC 16 00    1235*      dl 0x0016FC ; 0000A2, 32.326
041090 19 17 00    1236*      dl 0x001719 ; 0000A3, 32.486
041093 36 17 00    1237*      dl 0x001736 ; 0000A4, 32.645
041096 53 17 00    1238*      dl 0x001753 ; 0000A5, 32.803
041099 70 17 00    1239*      dl 0x001770 ; 0000A6, 32.961
04109C 8C 17 00    1240*      dl 0x00178C ; 0000A7, 33.118
04109F A9 17 00    1241*      dl 0x0017A9 ; 0000A8, 33.275
0410A2 C5 17 00    1242*      dl 0x0017C5 ; 0000A9, 33.431
0410A5 E2 17 00    1243*      dl 0x0017E2 ; 0000AA, 33.587
0410A8 FE 17 00    1244*      dl 0x0017FE ; 0000AB, 33.742
0410AB 1A 18 00    1245*      dl 0x00181A ; 0000AC, 33.896
0410AE 36 18 00    1246*      dl 0x001836 ; 0000AD, 34.050
0410B1 52 18 00    1247*      dl 0x001852 ; 0000AE, 34.203
0410B4 6E 18 00    1248*      dl 0x00186E ; 0000AF, 34.356
0410B7 8A 18 00    1249*      dl 0x00188A ; 0000B0, 34.509
0410BA A5 18 00    1250*      dl 0x0018A5 ; 0000B1, 34.660
0410BD C1 18 00    1251*      dl 0x0018C1 ; 0000B2, 34.811
0410C0 DC 18 00    1252*      dl 0x0018DC ; 0000B3, 34.962
0410C3 F7 18 00    1253*      dl 0x0018F7 ; 0000B4, 35.112
0410C6 13 19 00    1254*      dl 0x001913 ; 0000B5, 35.262
0410C9 2E 19 00    1255*      dl 0x00192E ; 0000B6, 35.410
0410CC 49 19 00    1256*      dl 0x001949 ; 0000B7, 35.559
0410CF 64 19 00    1257*      dl 0x001964 ; 0000B8, 35.707
0410D2 7F 19 00    1258*      dl 0x00197F ; 0000B9, 35.854
0410D5 99 19 00    1259*      dl 0x001999 ; 0000BA, 36.001
0410D8 B4 19 00    1260*      dl 0x0019B4 ; 0000BB, 36.147
0410DB CE 19 00    1261*      dl 0x0019CE ; 0000BC, 36.293
0410DE E9 19 00    1262*      dl 0x0019E9 ; 0000BD, 36.438
0410E1 03 1A 00    1263*      dl 0x001A03 ; 0000BE, 36.582
0410E4 1D 1A 00    1264*      dl 0x001A1D ; 0000BF, 36.726
0410E7 37 1A 00    1265*      dl 0x001A37 ; 0000C0, 36.870
0410EA 51 1A 00    1266*      dl 0x001A51 ; 0000C1, 37.013
0410ED 6B 1A 00    1267*      dl 0x001A6B ; 0000C2, 37.155
0410F0 85 1A 00    1268*      dl 0x001A85 ; 0000C3, 37.297
0410F3 9F 1A 00    1269*      dl 0x001A9F ; 0000C4, 37.439
0410F6 B9 1A 00    1270*      dl 0x001AB9 ; 0000C5, 37.579
0410F9 D2 1A 00    1271*      dl 0x001AD2 ; 0000C6, 37.720
0410FC EC 1A 00    1272*      dl 0x001AEC ; 0000C7, 37.859
0410FF 05 1B 00    1273*      dl 0x001B05 ; 0000C8, 37.999
041102 1E 1B 00    1274*      dl 0x001B1E ; 0000C9, 38.137
041105 37 1B 00    1275*      dl 0x001B37 ; 0000CA, 38.276
041108 50 1B 00    1276*      dl 0x001B50 ; 0000CB, 38.413
04110B 69 1B 00    1277*      dl 0x001B69 ; 0000CC, 38.550
04110E 82 1B 00    1278*      dl 0x001B82 ; 0000CD, 38.687
041111 9B 1B 00    1279*      dl 0x001B9B ; 0000CE, 38.823
041114 B4 1B 00    1280*      dl 0x001BB4 ; 0000CF, 38.959
041117 CC 1B 00    1281*      dl 0x001BCC ; 0000D0, 39.094
04111A E5 1B 00    1282*      dl 0x001BE5 ; 0000D1, 39.228
04111D FD 1B 00    1283*      dl 0x001BFD ; 0000D2, 39.362
041120 16 1C 00    1284*      dl 0x001C16 ; 0000D3, 39.496
041123 2E 1C 00    1285*      dl 0x001C2E ; 0000D4, 39.629
041126 46 1C 00    1286*      dl 0x001C46 ; 0000D5, 39.762
041129 5E 1C 00    1287*      dl 0x001C5E ; 0000D6, 39.894
04112C 76 1C 00    1288*      dl 0x001C76 ; 0000D7, 40.025
04112F 8E 1C 00    1289*      dl 0x001C8E ; 0000D8, 40.156
041132 A5 1C 00    1290*      dl 0x001CA5 ; 0000D9, 40.286
041135 BD 1C 00    1291*      dl 0x001CBD ; 0000DA, 40.416
041138 D5 1C 00    1292*      dl 0x001CD5 ; 0000DB, 40.546
04113B EC 1C 00    1293*      dl 0x001CEC ; 0000DC, 40.675
04113E 04 1D 00    1294*      dl 0x001D04 ; 0000DD, 40.803
041141 1B 1D 00    1295*      dl 0x001D1B ; 0000DE, 40.931
041144 32 1D 00    1296*      dl 0x001D32 ; 0000DF, 41.059
041147 49 1D 00    1297*      dl 0x001D49 ; 0000E0, 41.186
04114A 60 1D 00    1298*      dl 0x001D60 ; 0000E1, 41.312
04114D 77 1D 00    1299*      dl 0x001D77 ; 0000E2, 41.438
041150 8E 1D 00    1300*      dl 0x001D8E ; 0000E3, 41.564
041153 A5 1D 00    1301*      dl 0x001DA5 ; 0000E4, 41.689
041156 BB 1D 00    1302*      dl 0x001DBB ; 0000E5, 41.814
041159 D2 1D 00    1303*      dl 0x001DD2 ; 0000E6, 41.938
04115C E9 1D 00    1304*      dl 0x001DE9 ; 0000E7, 42.061
04115F FF 1D 00    1305*      dl 0x001DFF ; 0000E8, 42.184
041162 15 1E 00    1306*      dl 0x001E15 ; 0000E9, 42.307
041165 2C 1E 00    1307*      dl 0x001E2C ; 0000EA, 42.429
041168 42 1E 00    1308*      dl 0x001E42 ; 0000EB, 42.551
04116B 58 1E 00    1309*      dl 0x001E58 ; 0000EC, 42.672
04116E 6E 1E 00    1310*      dl 0x001E6E ; 0000ED, 42.793
041171 84 1E 00    1311*      dl 0x001E84 ; 0000EE, 42.913
041174 99 1E 00    1312*      dl 0x001E99 ; 0000EF, 43.033
041177 AF 1E 00    1313*      dl 0x001EAF ; 0000F0, 43.152
04117A C5 1E 00    1314*      dl 0x001EC5 ; 0000F1, 43.271
04117D DA 1E 00    1315*      dl 0x001EDA ; 0000F2, 43.390
041180 F0 1E 00    1316*      dl 0x001EF0 ; 0000F3, 43.508
041183 05 1F 00    1317*      dl 0x001F05 ; 0000F4, 43.625
041186 1B 1F 00    1318*      dl 0x001F1B ; 0000F5, 43.742
041189 30 1F 00    1319*      dl 0x001F30 ; 0000F6, 43.859
04118C 45 1F 00    1320*      dl 0x001F45 ; 0000F7, 43.975
04118F 5A 1F 00    1321*      dl 0x001F5A ; 0000F8, 44.091
041192 6F 1F 00    1322*      dl 0x001F6F ; 0000F9, 44.206
041195 84 1F 00    1323*      dl 0x001F84 ; 0000FA, 44.321
041198 99 1F 00    1324*      dl 0x001F99 ; 0000FB, 44.435
04119B AD 1F 00    1325*      dl 0x001FAD ; 0000FC, 44.549
04119E C2 1F 00    1326*      dl 0x001FC2 ; 0000FD, 44.662
0411A1 D7 1F 00    1327*      dl 0x001FD7 ; 0000FE, 44.775
0411A4 EB 1F 00    1328*      dl 0x001FEB ; 0000FF, 44.888
0411A7 00 20 00    1329*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
0411AA             0034       include "fonts.inc"
0411AA             0001*  fonts_load:
0411AA DD 21 E9 1C 0002*      ld ix,font_list ; pointer to font list lookup
       04          
0411AF 06 12       0003*      ld b,num_fonts ; loop counter
0411B1             0004*  
0411B1             0005*  @load_loop:
0411B1 C5          0006*      push bc ; save loop counter
0411B2             0007*  
0411B2             0008*  ; load font into a buffer
0411B2 DD 27 06    0009*      ld hl,(ix+font_list_bufferId)
0411B5 DD 31 09    0010*      ld iy,(ix+font_list_filename)
0411B8 CD C5 16 04 0011*      call vdu_load_buffer_from_file
0411BC             0012*  
0411BC             0013*  ; create font from buffer
0411BC DD 27 06    0014*      ld hl,(ix+font_list_bufferId)
0411BF DD 5E 00    0015*      ld e,(ix+font_list_width)
0411C2 DD 56 03    0016*      ld d,(ix+font_list_height)
0411C5 3E 00       0017*      ld a,0 ; flags
0411C7 CD 48 18 04 0018*      call vdu_font_create
0411CB             0019*  
0411CB             0020*  ; select font
0411CB DD 27 06    0021*      ld hl,(ix+font_list_bufferId)
0411CE 3E 01       0022*      ld a,1 ; flags
0411D0 CD 2E 18 04 0023*      call vdu_font_select
0411D4             0024*  
0411D4             0025*  ; ; debug print filename
0411D4             0026*  ;     call printNewLine
0411D4             0027*  ;     ld hl,(ix+font_list_filename)
0411D4             0028*  ;     call printString
0411D4             0029*  
0411D4             0030*  ; advance font_list pointer to next record
0411D4 ED 32 0C    0031*      lea ix,ix+font_list_record_size
0411D7             0032*  
0411D7             0033*  ; restore loop counter
0411D7 C1          0034*      pop bc
0411D8 10 D7       0035*      djnz @load_loop
0411DA             0036*  
0411DA             0037*  ; all done
0411DA C9          0038*      ret
0411DB             0035       include "images.inc"
0411DB             0001*  image_type: equ 0
0411DB             0002*  image_width: equ image_type+3
0411DB             0003*  image_height: equ image_width+3
0411DB             0004*  image_filesize: equ image_height+3
0411DB             0005*  image_filename: equ image_filesize+3
0411DB             0006*  image_bufferId: equ image_filename+3
0411DB             0007*  image_record_size: equ image_bufferId+3
0411DB             0008*  
0411DB 00 00 00    0009*  cur_image_list: dl 0
0411DE 00 00 00    0010*  cur_filename: dl 0
0411E1 00 00 00    0011*  cur_buffer_id: dl 0
0411E4             0012*  
0411E4             0013*  img_load_init:
0411E4             0014*  ; initialize logo's position parameters
0411E4 21 00 00 00 0015*      ld hl,0
0411E8 22 9A 12 04 0016*      ld (logo_xvel),hl
0411EC 22 9D 12 04 0017*      ld (logo_xpos),hl
0411F0             0018*  ; begin 16.8 maths to determine logo's y position and velocity
0411F0 21 00 E0 00 0019*      ld hl,240-16*256 ; allow space for text at bottom of screen
0411F4 22 A3 12 04 0020*      ld (logo_ypos),hl
0411F8 EB          0021*      ex de,hl
0411F9 21 00 F8 FF 0022*      ld hl,-8*256 ; 8 pixels from top of screen
0411FD 19          0023*      add hl,de ; distance for logo to travel
0411FE 11 00 B1 FF 0024*      ld de,-sprites_num_images*256
041202 CD C3 08 04 0025*      call sdiv168 ; ud.e = distance / num images = y velocity
041206 ED 53 A0 12 0026*      ld (logo_yvel),de
       04          
04120B             0027*  ; all done
04120B C9          0028*      ret
04120C             0029*  
04120C             0030*  ; inputs: bc is the number of images to load, cur_image_list set
04120C             0031*  img_load_main:
04120C             0032*  ; back up loop counter
04120C C5          0033*      push bc
04120D             0034*  
04120D             0035*  ; load the next image
04120D CD 44 12 04 0036*      call load_next_image
041211             0037*  
041211             0038*  ; plot the background
041211 CD 98 14 04 0039*      call vdu_cls
041215 21 02 00 00 0040*      ld hl,BUF_SPLASH_BG
041219 CD 85 15 04 0041*      call vdu_buff_select
04121D 01 00 00 00 0042*      ld bc,0
041221 11 00 00 00 0043*      ld de,0
041225 CD E1 18 04 0044*      call vdu_plot_bmp
041229             0045*  
041229             0046*  ; ; draw the most recently loaded image
041229             0047*  ; 	ld hl,(cur_buffer_id)
041229             0048*  ; 	call vdu_buff_select
041229             0049*  ; 	ld bc,0
041229             0050*  ; 	ld de,0
041229             0051*  ; 	call vdu_plot_bmp
041229             0052*  
041229             0053*  ; move logo
041229 CD 75 12 04 0054*      call move_logo
04122D             0055*  
04122D             0056*  ; print current filename
04122D 2A DE 11 04 0057*      ld hl,(cur_filename)
041231 CD 77 00 04 0058*      call printString
041235             0059*  
041235             0060*  ; flip the framebuffer
041235             0061*      ; call vdu_flip
041235             0062*  
041235             0063*  ; decrement loop counter
041235 C1          0064*      pop bc
041236 0B          0065*      dec bc
041237 79          0066*      ld a,c
041238 B7          0067*      or a
041239 C2 0C 12 04 0068*      jp nz,img_load_main
04123D 78          0069*      ld a,b
04123E B7          0070*      or a
04123F C2 0C 12 04 0071*      jp nz,img_load_main
041243 C9          0072*      ret
041244             0073*  
041244             0074*  load_next_image:
041244 FD 2A DB 11 0075*      ld iy,(cur_image_list)
       04          
041249 FD E5       0076*      push iy
04124B FD 7E 00    0077*      ld a,(iy+image_type) ; get image type
04124E FD 07 03    0078*      ld bc,(iy+image_width) ; get image width
041251 FD 17 06    0079*      ld de,(iy+image_height) ; get image height
041254 FD 31 09    0080*      ld ix,(iy+image_filesize) ; get image file size
041257 FD 27 0F    0081*      ld hl,(iy+image_bufferId) ; get image bufferId
04125A 22 E1 11 04 0082*      ld (cur_buffer_id),hl
04125E FD 37 0C    0083*      ld iy,(iy+image_filename) ; get image filename
041261 FD 22 DE 11 0084*      ld (cur_filename),iy
       04          
041266 CD A3 16 04 0085*      call vdu_load_img
04126A FD E1       0086*      pop iy
04126C ED 33 12    0087*      lea iy,iy+image_record_size
04126F FD 22 DB 11 0088*      ld (cur_image_list),iy
       04          
041274 C9          0089*      ret
041275             0090*  
041275             0091*  move_logo:
041275             0092*  ; activate logo bitmap
041275 21 03 00 00 0093*      ld hl, BUF_SPLASH_LOGO
041279 CD 85 15 04 0094*      call vdu_buff_select
04127D             0095*  ; update position based on velocity parameters
04127D 2A A3 12 04 0096*      ld hl,(logo_ypos)
041281 ED 5B A0 12 0097*      ld de,(logo_yvel)
       04          
041286 19          0098*      add hl,de
041287 22 A3 12 04 0099*      ld (logo_ypos),hl
04128B             0100*  ; draw logo
04128B ED 4B 9D 12 0101*      ld bc,(logo_xpos)
       04          
041290 ED 5B A3 12 0102*      ld de,(logo_ypos)
       04          
041295 CD FD 18 04 0103*      call vdu_plot_bmp168
041299 C9          0104*      ret
04129A             0105*  
04129A 00 00 00    0106*  logo_xvel: dl 0
04129D 00 00 00    0107*  logo_xpos: dl 0
0412A0             0108*  
0412A0 00 00 00    0109*  logo_yvel: dl 0
0412A3 00 00 00    0110*  logo_ypos: dl 0
0412A6             0111*  
0412A6             0112*  load_ui_images:
0412A6             0113*  ; initialize image loading variables
0412A6 21 21 49 04 0114*      ld hl,ui_image_list
0412AA 22 DB 11 04 0115*      ld (cur_image_list),hl
0412AE             0116*  ; load images
0412AE 06 04       0117*      ld b,ui_num_images
0412B0             0118*  @loop:
0412B0 C5          0119*      push bc
0412B1 CD 44 12 04 0120*      call load_next_image
0412B5 C1          0121*      pop bc
0412B6 10 F8       0122*      djnz @loop
0412B8 C9          0123*      ret
0412B9             0124*  
0412B9             0125*  load_sprite_images:
0412B9             0126*  ; initialize image loading variables
0412B9 21 F1 3B 04 0127*      ld hl,sprites_image_list
0412BD 22 DB 11 04 0128*      ld (cur_image_list),hl
0412C1 01 4F 00 00 0129*      ld bc,sprites_num_images
0412C5             0130*  ; load images
0412C5 CD 0C 12 04 0131*      call img_load_main
0412C9 C9          0132*      ret
0412CA             0133*  
0412CA             0134*  load_tilesets:
0412CA             0135*  ; initialize image loading variables
0412CA 21 E9 1F 04 0136*      ld hl,tiles_dg_image_list
0412CE 22 DB 11 04 0137*      ld (cur_image_list),hl
0412D2 01 B8 00 00 0138*      ld bc,tiles_dg_num_images
0412D6             0139*  ; load images
0412D6 CD 0C 12 04 0140*      call img_load_main
0412DA             0141*  
0412DA             0142*  ; ; initialize image loading variables
0412DA             0143*  ;     ld hl,tiles_xevious_image_list
0412DA             0144*  ;     ld (cur_image_list),hl
0412DA             0145*  ;     ld bc,tiles_xevious_num_images
0412DA             0146*  ; ; load images
0412DA             0147*  ;     call img_load_main
0412DA C9          0148*      ret
0412DB             0036       include "timer.inc"
0412DB             0001*  ; Table 32. Timer Control Registers
0412DB             0002*  ; this constant is the base address of the timer control registers
0412DB             0003*  ; each timer takes three bytes:
0412DB             0004*  ;   0: control register
0412DB             0005*  ;   1: low byte of timer reset value
0412DB             0006*  ;   2: high byte of timer reset value
0412DB             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412DB             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412DB             0009*  TMR_CTL:     equ 80h
0412DB             0010*  
0412DB             0011*  ; Timer Control Register Bit Definitions
0412DB             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412DB             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412DB             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412DB             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412DB             0016*                              ; the TMRx_CTL register is read.
0412DB             0017*  
0412DB             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412DB             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412DB             0020*  
0412DB             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412DB             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412DB             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412DB             0024*                              ; written to the counter when the end-of-count value is reached.
0412DB             0025*  
0412DB             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412DB             0027*  CLK_DIV_256:  equ %00001100 ;
0412DB             0028*  CLK_DIV_64:   equ %00001000 ;
0412DB             0029*  CLK_DIV_16:   equ %00000100 ;
0412DB             0030*  CLK_DIV_4:    equ %00000000 ;
0412DB             0031*  
0412DB             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412DB             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412DB             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412DB             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412DB             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412DB             0037*                              ; SINGLE-PASS mode is used.
0412DB             0038*  
0412DB             0039*  ; disable/enable the programmable reload timer
0412DB             0040*  PRT_EN_0:     equ %00000000 ;
0412DB             0041*  PRT_EN_1:     equ %00000001 ;
0412DB             0042*  
0412DB             0043*  ; Table 37. Timer Input Source Select Register
0412DB             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412DB             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412DB             0046*  ;   00: System clock / CLK_DIV
0412DB             0047*  ;   01: RTC / CLK_DIV
0412DB             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412DB             0049*  ;   10: GPIO port B pin 1.
0412DB             0050*  ;   11: GPIO port B pin 1.
0412DB             0051*  TMR_ISS:   equ 92h ; register address
0412DB             0052*  
0412DB             0053*  ; Table 51. Real-Time Clock Control Register
0412DB             0054*  RTC_CTRL: equ EDh ; register address
0412DB             0055*  
0412DB             0056*  ; alarm interrupt disable/enable
0412DB             0057*  RTC_ALARM_0:    equ %00000000
0412DB             0058*  RTC_ALARM_1:    equ %10000000
0412DB             0059*  
0412DB             0060*  ; interrupt on alarm disable/enable
0412DB             0061*  RTC_INT_ENT_0:  equ %00000000
0412DB             0062*  RTC_INT_ENT_1:  equ %01000000
0412DB             0063*  
0412DB             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412DB             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412DB             0066*  
0412DB             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412DB             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412DB             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412DB             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412DB             0071*  
0412DB             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412DB             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412DB             0074*  
0412DB             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412DB             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412DB             0077*  
0412DB             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412DB             0079*                                  ; RTC counter is enabled.
0412DB             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412DB             0081*                                  ; RTC counter is disabled.
0412DB             0082*  
0412DB             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412DB             0084*  
0412DB             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412DB             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412DB 00 00 00    0087*  prt_reload: dl 0x000000
0412DE             0088*  
0412DE             0089*  ; set PRT timer
0412DE             0090*  prt_set:
0412DE 21 00 00 00 0091*      ld hl,0
0412E2 22 2C 13 04 0092*      ld (prt_irq_counter),hl
0412E6 2A DB 12 04 0093*      ld hl,(prt_reload)
0412EA ED 29 84    0094*      out0 ($84),l
0412ED ED 21 85    0095*  	out0 ($85),h
0412F0             0096*  ; disable timer
0412F0 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0412F2 ED 39 83    0098*  	out0 ($83),a
0412F5             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0412F5 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0412F7 ED 39 83    0101*  	out0 ($83),a
0412FA C9          0102*      ret
0412FB             0103*  
0412FB             0104*  ; ===============================================
0412FB             0105*  ; PRT Timer Interrupt Handling
0412FB             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0412FB             0107*  ; -----------------------------------------------
0412FB             0108*  prt_irq_init:
0412FB             0109*      ; set up interrupt vector table 2
0412FB 21 00 00 00 0110*  	ld hl,0
0412FF 3A 0C 01 00 0111*  	ld a,($10c)
041303 6F          0112*  	ld l,a
041304 3A 0D 01 00 0113*  	ld a,($10d)
041308 67          0114*  	ld h,a
041309             0115*  
041309             0116*  	; skip over CALL ($c3)
041309 23          0117*  	inc hl
04130A             0118*  	; load address of jump into vector table 2 (in ram)
04130A ED 27       0119*  	ld hl,(hl)
04130C             0120*  
04130C             0121*  	; write CALL prt_irq_handler to vector table 2
04130C 3E C3       0122*  	ld a,$c3
04130E 77          0123*  	ld (hl),a
04130F 23          0124*  	inc hl
041310 11 17 13 04 0125*  	ld de,prt_irq_handler
041314 ED 1F       0126*  	ld (hl),de
041316             0127*  
041316 C9          0128*      ret
041317             0129*  
041317             0130*  prt_irq_handler:
041317 F3          0131*  	di
041318 F5          0132*  	push af
041319 E5          0133*      push hl
04131A ED 38 83    0134*  	in0 a,($83)
04131D 2A 2C 13 04 0135*  	ld hl,(prt_irq_counter)
041321 23          0136*  	inc hl
041322 22 2C 13 04 0137*  	ld (prt_irq_counter),hl
041326 E1          0138*      pop hl
041327 F1          0139*  	pop af
041328 FB          0140*  	ei
041329 5B ED 4D    0141*  	reti.l
04132C             0142*  
04132C             0143*  prt_irq_counter:
04132C 00 00 00    0144*  	.dl 0
04132F             0145*  prt_irq_counter_saved:
04132F 00 00 00    0146*      .dl 0
041332             0147*  
041332             0148*  prt_loop_reset:
041332 E5          0149*      push hl
041333 21 00 00 00 0150*  	ld hl,0
041337 22 2C 13 04 0151*  	ld (prt_irq_counter),hl
04133B 22 9D 13 04 0152*      ld (prt_loop_counter),hl
04133F 22 A0 13 04 0153*      ld (prt_loops),hl
041343 CD DE 12 04 0154*      call prt_set
041347 E1          0155*      pop hl
041348 C9          0156*      ret
041349             0157*  
041349             0158*  prt_loop_start:
041349 E5          0159*      push hl
04134A 21 00 00 00 0160*  	ld hl,0
04134E 22 2C 13 04 0161*  	ld (prt_irq_counter),hl
041352 E1          0162*      pop hl
041353 C9          0163*      ret
041354             0164*  
041354             0165*  prt_loop_stop:
041354 E5          0166*      push hl
041355 D5          0167*      push de
041356 2A 2C 13 04 0168*      ld hl,(prt_irq_counter)
04135A ED 5B 9D 13 0169*      ld de,(prt_loop_counter)
       04          
04135F 19          0170*      add hl,de
041360 22 9D 13 04 0171*      ld (prt_loop_counter),hl
041364 21 00 00 00 0172*      ld hl,0
041368 22 2C 13 04 0173*      ld (prt_irq_counter),hl
04136C 2A A0 13 04 0174*      ld hl,(prt_loops)
041370 23          0175*      inc hl
041371 22 A0 13 04 0176*      ld (prt_loops),hl
041375 D1          0177*      pop de
041376 E1          0178*      pop hl
041377 C9          0179*      ret
041378             0180*  
041378             0181*  ; inputs: bc = y,x text coordinates to print
041378             0182*  prt_loop_print:
041378 F5          0183*      push af
041379 E5          0184*      push hl
04137A C5          0185*      push bc
04137B D5          0186*      push de
04137C DD E5       0187*      push ix
04137E FD E5       0188*      push iy
041380 CD 84 14 04 0189*      call vdu_move_cursor
041384             0190*  
041384 2A 9D 13 04 0191*      ld hl,(prt_loop_counter)
041388 CD 76 01 04 0192*      call printDec
04138C             0193*  
04138C 2A A0 13 04 0194*      ld hl,(prt_loops)
041390 CD 76 01 04 0195*      call printDec
041394             0196*  
041394 FD E1       0197*      pop iy
041396 DD E1       0198*      pop ix
041398 D1          0199*      pop de
041399 C1          0200*      pop bc
04139A E1          0201*      pop hl
04139B F1          0202*      pop af
04139C C9          0203*      ret
04139D             0204*  
04139D             0205*  prt_loop_counter:
04139D 00 00 00    0206*      .dl 0
0413A0             0207*  prt_loops:
0413A0 00 00 00    0208*      .dl 0
0413A3             0209*  
0413A3             0210*  ; ===============================================
0413A3             0211*  ; Timer functions
0413A3             0212*  ; -----------------------------------------------
0413A3             0213*  ; set a countdown timer
0413A3             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413A3             0215*  ; returns: hl = current time
0413A3             0216*  tmr_set:
0413A3 FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
0413A6             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
0413A6 3E 08       0001*M 			LD	A, function
0413A8 5B CF       0002*M 			RST.LIL	08h
0413AA DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
0413AD FD 2F 00    0220*      ld (iy+0),hl            ; set start time
0413B0 C9          0221*      ret
0413B1             0222*  
0413B1             0223*  ; gets time remaining on a countdown timer
0413B1             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413B1             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413B1             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413B1             0227*  tmr_get:
0413B1             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
0413B1 3E 08       0001*M 			LD	A, function
0413B3 5B CF       0002*M 			RST.LIL	08h
0413B5 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413B8 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413BB AF          0231*      xor a                   ; clear carry
0413BC ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413BE FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413C1 AF          0234*      xor a                   ; clear carry
0413C2 ED 5A       0235*      adc hl,de               ; hl = time remaining
0413C4             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413C4 C9          0237*      ret
0413C5             0238*  
0413C5             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413CB             0240*  
0413CB 00 00 00    0241*  timestamp_now: dl 0
0413CE 00 00 00    0242*  timestamp_old: dl 0
0413D1 00 00 00    0243*  timestamp_chg: dl 0
0413D4             0244*  
0413D4             0245*  ; update the global timestamp from the system clock
0413D4             0246*  ; inputs: none
0413D4             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413D4             0248*  ;          ix = pointer to syvars table
0413D4             0249*  ; destroys: af,hl,de,ix
0413D4             0250*  timestamp_tick:
0413D4 ED 5B CB 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413D9 ED 53 CE 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413DE             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413DE 3E 08       0001*M 			LD	A, function
0413E0 5B CF       0002*M 			RST.LIL	08h
0413E2 DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413E5 22 CB 13 04 0255*      ld (timestamp_now),hl   ; save current time
0413E9 AF          0256*      xor a                   ; clear carry
0413EA ED 52       0257*      sbc hl,de               ; hl = time elapsed
0413EC 22 D1 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
0413F0 C9          0259*      ret
0413F1             0260*  
0413F1             0261*  ; set a countdown timer
0413F1             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413F1             0263*  ; requires: timestamp_tick to be called at least once before this function
0413F1             0264*  ; returns: hl = current time
0413F1             0265*  ; destroys: hl
0413F1             0266*  timestamp_tmr_set:
0413F1 FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
0413F4 2A CB 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
0413F8 FD 2F 00    0269*      ld (iy+0),hl            ; set start time
0413FB C9          0270*      ret
0413FC             0271*  
0413FC             0272*  ; gets time remaining on a countdown timer following the global timestamp
0413FC             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413FC             0274*  ; requires: timestamp_tick to be called at least once before this function
0413FC             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413FC             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413FC             0277*  ; destroys: af,hl,de
0413FC             0278*  timestamp_tmr_get:
0413FC ED 5B CB 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
041401 FD 27 00    0280*      ld hl,(iy+0)            ; get start time
041404 AF          0281*      xor a                   ; clear carry
041405 ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041407 FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
04140A AF          0284*      xor a                   ; clear carry
04140B ED 5A       0285*      adc hl,de               ; hl = time remaining
04140D             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04140D C9          0287*      ret
04140E             0288*  
04140E             0289*  ; set a stopwatch
04140E             0290*  ; returns: hl = start time
04140E             0291*  ; destroys: hl,ix
04140E             0292*  stopwatch_set:
04140E             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
04140E 3E 08       0001*M 			LD	A, function
041410 5B CF       0002*M 			RST.LIL	08h
041412 DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
041415 22 2A 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041419 C9          0296*      ret
04141A             0297*  
04141A             0298*  ; gets time elapsed on a stopwatch
04141A             0299*  ; returns: hl = time elapsed in 1/120ths of a second
04141A             0300*  ; destroys: af,hl,de,ix
04141A             0301*  stopwatch_get:
04141A             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
04141A 3E 08       0001*M 			LD	A, function
04141C 5B CF       0002*M 			RST.LIL	08h
04141E DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
041421 ED 5B 2A 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
041426 AF          0305*      xor a                   ; clear carry
041427 ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041429 C9          0307*      ret
04142A             0308*  
04142A             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04142D             0310*  
04142D             0311*  ; ------------------
04142D             0312*  ; delay routine
04142D             0313*  ; Author: Richard Turrnidge
04142D             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04142D             0315*  ; routine waits a fixed time,then returns
04142D             0316*  ; arrive with A =  the delay byte. One bit to be set only.
04142D             0317*  ; eg. ld A,00000100b
04142D             0318*  
04142D             0319*  multiPurposeDelay:
04142D F5          0320*      push af
04142E C5          0321*      push bc
04142F DD E5       0322*      push ix
041431 47          0323*      ld b,a
041432 3E 08       0324*      ld a,$08
041434 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
041436             0326*  
041436             0327*  waitLoop:
041436             0328*  
041436 DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041439             0330*  
041439             0331*                                  ;   we check if bit set is same as last time we checked.
041439             0332*                                  ;   bit 0 - don't use
041439             0333*                                  ;   bit 1 - changes 64 times per second
041439             0334*                                  ;   bit 2 - changes 32 times per second
041439             0335*                                  ;   bit 3 - changes 16 times per second
041439             0336*  
041439             0337*                                  ;   bit 4 - changes 8 times per second
041439             0338*                                  ;   bit 5 - changes 4 times per second
041439             0339*                                  ;   bit 6 - changes 2 times per second
041439             0340*                                  ;   bit 7 - changes 1 times per second
041439 A0          0341*      and b
04143A 4F          0342*      ld c,a
04143B 3A 4C 14 04 0343*      ld a,(oldTimeStamp)
04143F B9          0344*      cp c                        ; is A same as last value?
041440 28 F4       0345*      jr z,waitLoop              ; loop here if it is
041442 79          0346*      ld a,c
041443 32 4C 14 04 0347*      ld (oldTimeStamp),a        ; set new value
041447             0348*  
041447 DD E1       0349*      pop ix
041449 C1          0350*      pop bc
04144A F1          0351*      pop af
04144B C9          0352*      ret
04144C             0353*  
04144C 00          0354*  oldTimeStamp:   .db 00h
04144D             0037       include "vdu.inc"
04144D             0001*  
04144D             0002*  ; VDU 30: Home cursor
04144D             0003*  vdu_home_cursor:
04144D 3E 1E       0004*      ld a,30
04144F 5B D7       0005*  	rst.lil $10
041451 C9          0006*  	ret
041452             0007*  
041452             0008*  vdu_cursor_on:
041452 21 5D 14 04 0009*  	ld hl,@cmd
041456 01 03 00 00 0010*  	ld bc,@end-@cmd
04145A 5B DF       0011*  	rst.lil $18
04145C C9          0012*  	ret
04145D             0013*  @cmd:
04145D 17 01 01    0014*  	db 23,1,1
041460             0015*  @end:
041460             0016*  
041460             0017*  vdu_cursor_off:
041460 21 6B 14 04 0018*  	ld hl,@cmd
041464 01 03 00 00 0019*  	ld bc,@end-@cmd
041468 5B DF       0020*  	rst.lil $18
04146A C9          0021*  	ret
04146B             0022*  @cmd:
04146B 17 01 00    0023*  	db 23,1,0
04146E             0024*  @end:
04146E             0025*  
04146E             0026*  ; VDU 5: Write text at graphics cursor
04146E             0027*  ; inputs: a is the character to write to the screen
04146E             0028*  ; prerequisites: the graphics cursor at the intended position on screen
04146E             0029*  ; outputs: see the name of the function
04146E             0030*  ; destroys: a, hl, bc
04146E             0031*  vdu_char_to_gfx_cursor:
04146E 32 7E 14 04 0032*  	ld (@arg),a
041472 21 7D 14 04 0033*  	ld hl,@cmd
041476 01 02 00 00 0034*  	ld bc,@end-@cmd
04147A 5B DF       0035*  	rst.lil $18
04147C C9          0036*  	ret
04147D 05          0037*  @cmd: db 5
04147E 00          0038*  @arg: db 0
04147F             0039*  @end:
04147F             0040*  ; VDU 9: Move cursor forward one character
04147F             0041*  vdu_cursor_forward:
04147F 3E 09       0042*      ld a,9
041481 5B D7       0043*  	rst.lil $10
041483 C9          0044*  	ret
041484             0045*  
041484             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041484             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041484             0048*  vdu_move_cursor:
041484 ED 43 95 14 0049*      ld (@x0),bc
       04          
041489 21 94 14 04 0050*  	ld hl,@cmd
04148D 01 03 00 00 0051*  	ld bc,@end-@cmd
041491 5B DF       0052*  	rst.lil $18
041493 C9          0053*  	ret
041494 1F          0054*  @cmd: 	db 31
041495 00          0055*  @x0:	db 0
041496 00          0056*  @y0: 	db 0
041497 00          0057*  @end: 	db 0 ; padding
041498             0058*  
041498             0059*  ; VDU 12: Clear text area (CLS)
041498             0060*  vdu_cls:
041498 3E 0C       0061*      ld a,12
04149A 5B D7       0062*  	rst.lil $10
04149C C9          0063*  	ret
04149D             0064*  
04149D             0065*  vdu_flip:
04149D 21 A8 14 04 0066*  	ld hl,@cmd
0414A1 01 03 00 00 0067*  	ld bc,@end-@cmd
0414A5 5B DF       0068*  	rst.lil $18
0414A7 C9          0069*  	ret
0414A8 17 00 C3    0070*  @cmd: db 23,0,0xC3
0414AB             0071*  @end:
0414AB             0072*  
0414AB             0073*  ; VDU 16: Clear graphics area (CLG)
0414AB             0074*  vdu_clg:
0414AB 3E 10       0075*      ld a,16
0414AD 5B D7       0076*  	rst.lil $10
0414AF C9          0077*  	ret
0414B0             0078*  
0414B0             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0414B0             0080*  ; VDU 23, 7: Scrolling
0414B0             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0414B0             0082*  ; inputs: a, extent; l, direction; h; speed
0414B0             0083*  vdu_scroll_down:
0414B0 32 C5 14 04 0084*  	ld (@extent),a
0414B4 22 C6 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414B8 21 C3 14 04 0086*  	ld hl,@cmd
0414BC 01 05 00 00 0087*  	ld bc,@end-@cmd
0414C0 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414C2 C9          0089*  	ret
0414C3 17 07       0090*  @cmd:       db 23,7
0414C5 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414C6 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414C7 00          0093*  @speed:     db 0x00 ; pixels
0414C8 00          0094*  @end:		db 0x00 ; padding
0414C9             0095*  
0414C9             0096*  ; COLOUR MODES
0414C9             0097*  ; Mode	Effect
0414C9             0098*  ; 0	Set on-screen pixel to target colour value
0414C9             0099*  ; 1	OR value with the on-screen pixel
0414C9             0100*  ; 2	AND value with the on-screen pixel
0414C9             0101*  ; 3	XOR value with the on-screen pixel
0414C9             0102*  ; 4	Invert the on-screen pixel
0414C9             0103*  ; 5	No operation
0414C9             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414C9             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414C9             0106*  
0414C9             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414C9             0108*  vdu_colour_text:
0414C9 32 D9 14 04 0109*  	ld (@arg),a
0414CD 21 D8 14 04 0110*  	ld hl,@cmd
0414D1 01 02 00 00 0111*  	ld bc,@end-@cmd
0414D5 5B DF       0112*  	rst.lil $18
0414D7 C9          0113*  	ret
0414D8 11          0114*  @cmd: db 17
0414D9 00          0115*  @arg: db 0
0414DA             0116*  @end:
0414DA             0117*  
0414DA             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414DA             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414DA             0120*  vdu_gcol:
0414DA 32 EF 14 04 0121*  	ld (@mode),a
0414DE 79          0122*      ld a,c
0414DF 32 F0 14 04 0123*      ld (@col),a
0414E3 21 EE 14 04 0124*  	ld hl,@cmd
0414E7 01 03 00 00 0125*  	ld bc,@end-@cmd
0414EB 5B DF       0126*  	rst.lil $18
0414ED C9          0127*  	ret
0414EE 12          0128*  @cmd:  db 18
0414EF 00          0129*  @mode: db 0
0414F0 00          0130*  @col:  db 0
0414F1             0131*  @end:
0414F1             0132*  
0414F1             0133*  
0414F1             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
0414F1             0135*  ; MIND THE LITTLE-ENDIANESS
0414F1             0136*  ; inputs: c=left,b=bottom,e=right,d=top
0414F1             0137*  ; outputs; nothing
0414F1             0138*  ; destroys: a might make it out alive
0414F1             0139*  vdu_set_txt_viewport:
0414F1 ED 43 07 15 0140*      ld (@lb),bc
       04          
0414F6 ED 53 09 15 0141*  	ld (@rt),de
       04          
0414FB 21 06 15 04 0142*  	ld hl,@cmd
0414FF 01 05 00 00 0143*  	ld bc,@end-@cmd
041503 5B DF       0144*  	rst.lil $18
041505 C9          0145*  	ret
041506 1C          0146*  @cmd:   db 28 ; set text viewport command
041507 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
041509 00 00       0148*  @rt: 	dw 0x0000 ; set by de
04150B 00          0149*  @end:   db 0x00	  ; padding
04150C             0150*  
04150C             0151*  ; Wait for VBLANK interrupt
04150C             0152*  vdu_vblank:
04150C DD E5       0153*      PUSH 	IX
04150E             0154*  	MOSCALL	mos_sysvars
04150E 3E 08       0001*M 			LD	A, function
041510 5B CF       0002*M 			RST.LIL	08h
041512 DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041515             0156*  @wait:
041515 DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041518 28 FB       0158*      JR	Z, @wait
04151A DD E1       0159*      POP	IX
04151C C9          0160*      RET
04151D             0161*  
04151D             0162*  ; VDU 29, x; y;: Set graphics origin
04151D             0163*  ; This command sets the graphics origin.
04151D             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
04151D             0165*  ; inputs: bc=x0,de=y0
04151D             0166*  ; outputs; nothing
04151D             0167*  ; destroys: a might make it out alive
04151D             0168*  vdu_set_gfx_origin:
04151D ED 43 33 15 0169*      ld (@x0),bc
       04          
041522 ED 53 35 15 0170*      ld (@y0),de
       04          
041527 21 32 15 04 0171*      ld hl,@cmd
04152B 01 05 00 00 0172*      ld bc,@end-@cmd
04152F 5B DF       0173*      rst.lil $18
041531 C9          0174*      ret
041532 1D          0175*  @cmd:   db 29 ; set graphics origin command
041533 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041535 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041537 00          0178*  @end:   db 0x00	  ; padding
041538             0179*  
041538             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041538             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041538             0182*  ; 	because we have turned off logical screen scaling
041538             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041538             0184*  ; outputs; nothing
041538             0185*  ; destroys: a might make it out alive
041538             0186*  vdu_set_gfx_viewport:
041538 ED 43 58 15 0187*      ld (@x0),bc
       04          
04153D FD 22 5A 15 0188*      ld (@y1),iy
       04          
041542 DD 22 5C 15 0189*  	ld (@x1),ix
       04          
041547 ED 53 5E 15 0190*  	ld (@y0),de
       04          
04154C 21 57 15 04 0191*  	ld hl,@cmd
041550 01 09 00 00 0192*  	ld bc,@end-@cmd
041554 5B DF       0193*  	rst.lil $18
041556 C9          0194*  	ret
041557 18          0195*  @cmd:   db 24 ; set graphics viewport command
041558 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
04155A 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
04155C 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
04155E 00 00       0199*  @y0: 	dw 0x0000 ; set by de
041560 00          0200*  @end:   db 0x00	  ; padding
041561             0201*  
041561             0202*  ; SCREEN MODES
041561             0203*  ; ===============================
041561             0204*  ; Mode  Horz  Vert  Cols  Refresh
041561             0205*  ; ---   ----  ----  ----  -------
041561             0206*  ; 11    320   240   2     60hz
041561             0207*  ; 139   320   240   2     60hz
041561             0208*  ; 23    512   384   2     60hz
041561             0209*  ; 151   512   384   2     60hz
041561             0210*  ; 6     640   240   2     60hz
041561             0211*  ; 134   640   240   2     60hz
041561             0212*  ; 2     640   480   2     60hz
041561             0213*  ; 130   640   480   2     60hz
041561             0214*  ; 17    800   600   2     60hz
041561             0215*  ; 145   800   600   2     60hz
041561             0216*  ; 18    1024  768   2     60hz
041561             0217*  ; 146   1024  768   2     60hz
041561             0218*  ; ---   ----  ----  ----  -------
041561             0219*  ; 10    320   240   4     60hz
041561             0220*  ; 138   320   240   4     60hz
041561             0221*  ; 22    512   384   4     60hz
041561             0222*  ; 150   512   384   4     60hz
041561             0223*  ; 5     640   240   4     60hz
041561             0224*  ; 133   640   240   4     60hz
041561             0225*  ; 1     640   480   4     60hz
041561             0226*  ; 129   640   480   4     60hz
041561             0227*  ; 16    800   600   4     60hz
041561             0228*  ; 19    1024  768   4     60hz
041561             0229*  ; ---   ----  ----  ----  -------
041561             0230*  ; 9     320   240   16    60hz
041561             0231*  ; 137   320   240   16    60hz
041561             0232*  ; 21    512   384   16    60hz
041561             0233*  ; 149   512   384   16    60hz
041561             0234*  ; 4     640   240   16    60hz
041561             0235*  ; 132   640   240   16    60hz
041561             0236*  ; 0     640   480   16    60hz
041561             0237*  ; 7     n/a   n/a   16    60hz
041561             0238*  ; ---   ----  ----  ----  -------
041561             0239*  ; 8     320   240   64    60hz
041561             0240*  ; 136   320   240   64    60hz
041561             0241*  ; 20    512   384   64    60hz
041561             0242*  ; 3     640   240   64    60hz
041561             0243*  ; ---   ----  ----  ----  -------
041561             0244*  vdu_set_screen_mode:
041561 32 71 15 04 0245*  	ld (@arg),a
041565 21 70 15 04 0246*  	ld hl,@cmd
041569 01 02 00 00 0247*  	ld bc,@end-@cmd
04156D 5B DF       0248*  	rst.lil $18
04156F C9          0249*  	ret
041570 16          0250*  @cmd: db 22 ; set screen mode
041571 00          0251*  @arg: db 0  ; screen mode parameter
041572             0252*  @end:
041572             0253*  
041572             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041572             0255*  ; inputs: a is scaling mode, 1=on, 0=off
041572             0256*  ; note: default setting on boot is scaling ON
041572             0257*  vdu_set_scaling:
041572 32 84 15 04 0258*  	ld (@arg),a
041576 21 81 15 04 0259*  	ld hl,@cmd
04157A 01 04 00 00 0260*  	ld bc,@end-@cmd
04157E 5B DF       0261*  	rst.lil $18
041580 C9          0262*  	ret
041581 17 00 C0    0263*  @cmd: db 23,0,0xC0
041584 00          0264*  @arg: db 0  ; scaling on/off
041585             0265*  @end:
041585             0266*  
041585             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041585             0268*  ; inputs: hl=bufferId
041585             0269*  vdu_buff_select:
041585 22 97 15 04 0270*  	ld (@bufferId),hl
041589 21 94 15 04 0271*  	ld hl,@cmd
04158D 01 05 00 00 0272*  	ld bc,@end-@cmd
041591 5B DF       0273*  	rst.lil $18
041593 C9          0274*  	ret
041594 17 1B 20    0275*  @cmd: db 23,27,0x20
041597 00 00       0276*  @bufferId: dw 0x0000
041599 00          0277*  @end: db 0x00 ; padding
04159A             0278*  
04159A             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04159A             0280*  ; inputs: a=format; bc=width; de=height
04159A             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04159A             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04159A             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
04159A             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
04159A             0285*  ; 2 	Mono/Mask (1-bit per pixel)
04159A             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
04159A             0287*  vdu_bmp_create:
04159A ED 43 B6 15 0288*      ld (@width),bc
       04          
04159F ED 53 B8 15 0289*      ld (@height),de
       04          
0415A4 32 BA 15 04 0290*      ld (@fmt),a
0415A8 21 B3 15 04 0291*  	ld hl,@cmd
0415AC 01 08 00 00 0292*  	ld bc,@end-@cmd
0415B0 5B DF       0293*  	rst.lil $18
0415B2 C9          0294*  	ret
0415B3 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415B6 00 00       0296*  @width:     dw 0x0000
0415B8 00 00       0297*  @height:    dw 0x0000
0415BA 00          0298*  @fmt:       db 0x00
0415BB             0299*  @end:
0415BB             0300*  
0415BB             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415BB             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415BB             0303*  vdu_load_img_rgba2_to_8:
0415BB             0304*  ; backup the target buffer id and image dimensions
0415BB E5          0305*      push hl
0415BC D5          0306*      push de
0415BD C5          0307*      push bc
0415BE             0308*  ; load the rgba2 image to working buffer 65534
0415BE 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415C2 CD C5 16 04 0310*  	call vdu_load_buffer_from_file
0415C6             0311*  ; restore the image dimensions and target buffer id
0415C6 C1          0312*      pop bc
0415C7 D1          0313*      pop de
0415C8 E1          0314*      pop hl
0415C9             0315*  ; fall through to vdu_rgba2_to_8
0415C9             0316*  
0415C9             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415C9             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415C9             0319*  ; the "expand bitmap" command is:
0415C9             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415C9             0321*  ; and then to reverse the byte order to fix endian-ness:
0415C9             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415C9             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415C9             0324*  ; VDU 23,27,&20,targetBufferID%;
0415C9             0325*  ; VDU 23,27,&21,width%;height%;0
0415C9             0326*  ; -------------------------------------------------------------------
0415C9             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415C9             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415C9             0329*  vdu_rgba2_to_8:
0415C9             0330*  ; load the image dimensions and buffer id parameters
0415C9 ED 43 25 16 0331*      ld (@width),bc
       04          
0415CE ED 53 27 16 0332*      ld (@height),de
       04          
0415D3 22 0A 16 04 0333*      ld (@bufferId0),hl
0415D7 22 17 16 04 0334*      ld (@bufferId2),hl
0415DB 22 20 16 04 0335*      ld (@bufferId1),hl
0415DF             0336*  ; clean up bytes that got stomped on by the ID loads
0415DF 3E 48       0337*      ld a,0x48
0415E1 32 0C 16 04 0338*      ld (@bufferId0+2),a
0415E5 3E 17       0339*      ld a,23
0415E7 32 22 16 04 0340*      ld (@bufferId1+2),a
0415EB 3E 18       0341*      ld a,24
0415ED 32 19 16 04 0342*      ld (@bufferId2+2),a
0415F1 AF          0343*      xor a
0415F2 32 29 16 04 0344*      ld (@height+2),a
0415F6             0345*  ; send the vdu command strings
0415F6 21 01 16 04 0346*      ld hl,@beg
0415FA 01 29 00 00 0347*      ld bc,@end-@beg
0415FE 5B DF       0348*      rst.lil $18
041600 C9          0349*      ret
041601             0350*  @beg:
041601             0351*  ; Command 14: Consolidate blocks in a buffer
041601             0352*  ; VDU 23, 0, &A0, bufferId; 14
041601 17 00 A0    0353*      db 23,0,0xA0
041604 FE FF       0354*      dw 65534 ; workingBufferId
041606 0E          0355*      db 14 ; consolidate blocks
041607             0356*  ; the "expand bitmap" command is:
041607             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041607 17 00 A0    0358*      db 23,0,0xA0
04160A 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
04160C 48          0360*      db 0x48 ; given as decimal command 72 in the docs
04160D 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
04160E FE FF       0362*      dw 65534 ; sourceBufferId
041610 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041614             0364*  ; reverse the byte order to fix endian-ness:
041614             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041614             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041614             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041614 17 00 A0    0368*      db 23,0,0xA0
041617 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041619 18          0370*      db 24 ; reverse byte order
04161A 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
04161B 04 00       0372*      dw 4 ; size (4 bytes)
04161D             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04161D             0374*  ; VDU 23,27,&20,targetBufferID%;
04161D 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
041620 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
041622             0377*  ; VDU 23,27,&21,width%;height%;0
041622 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041625 00 00       0379*  @width: dw 0x0000
041627 00 00       0380*  @height: dw 0x0000
041629 00          0381*      db 0x00 ; rgba8888 format
04162A             0382*  @end:
04162A             0383*  
04162A             0384*  ; scratch variables
04162A 00 00 00    0385*  bufferId0: dl 0x000000
04162D 00 00 00    0386*  bufferId1: dl 0x000000
041630             0387*  
041630             0388*  ; load a vdu buffer from local memory
041630             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041630             0390*  vdu_load_buffer:
041630 ED 43 59 16 0391*      ld (@length),bc
       04          
041635 D5          0392*      push de ; save data pointer
041636             0393*  ; send the vdu command string
041636 7D          0394*      ld a,l
041637 32 56 16 04 0395*      ld (@bufferId),a
04163B 7C          0396*      ld a,h
04163C 32 57 16 04 0397*      ld (@bufferId+1),a
041640 21 53 16 04 0398*      ld hl,@cmd
041644 01 08 00 00 0399*      ld bc,@end-@cmd
041648 5B DF       0400*      rst.lil $18
04164A             0401*  ; send the buffer data
04164A E1          0402*      pop hl ; pointer to data
04164B ED 4B 59 16 0403*      ld bc,(@length)
       04          
041650 5B DF       0404*      rst.lil $18 ; send it
041652 C9          0405*      ret
041653             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041653 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041656 00 00       0408*  @bufferId:	dw 0x0000
041658 00          0409*  		    db 0 ; load buffer
041659 00 00       0410*  @length:	dw 0x0000
04165B 00          0411*  @end: db 0 ; padding
04165C             0412*  
04165C             0413*  ; clear a buffer
04165C             0414*  ; inputs: hl = bufferId
04165C             0415*  vdu_clear_buffer:
04165C 7D          0416*      ld a,l
04165D 32 74 16 04 0417*      ld (@bufferId),a
041661 7C          0418*      ld a,h
041662 32 75 16 04 0419*      ld (@bufferId+1),a
041666 21 71 16 04 0420*      ld hl,@cmd
04166A 01 06 00 00 0421*      ld bc,@end-@cmd
04166E 5B DF       0422*      rst.lil $18
041670 C9          0423*      ret
041671 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041674 00 00       0425*  @bufferId:	dw 0x0000
041676 02          0426*  		    db 2 ; clear buffer
041677             0427*  @end:
041677             0428*  
041677             0429*  vdu_clear_all_buffers:
041677             0430*  ; clear all buffers
041677 21 82 16 04 0431*      ld hl,@beg
04167B 01 06 00 00 0432*      ld bc,@end-@beg
04167F 5B DF       0433*      rst.lil $18
041681 C9          0434*      ret
041682 17 00 A0    0435*  @beg: db 23,0,$A0
041685 FF FF       0436*        dw -1 ; clear all buffers
041687 02          0437*        db 2  ; command 2: clear a buffer
041688             0438*  @end:
041688             0439*  
041688             0440*  ; Command 14: Consolidate blocks in a buffer
041688             0441*  vdu_consolidate_buffer:
041688             0442*  ; set parameters for vdu call
041688 7D          0443*      ld a,l
041689 32 A0 16 04 0444*      ld (@bufferId),a
04168D 7C          0445*      ld a,h
04168E 32 A1 16 04 0446*      ld (@bufferId+1),a
041692 21 9D 16 04 0447*      ld hl,@beg
041696 01 06 00 00 0448*      ld bc,@end-@beg
04169A 5B DF       0449*      rst.lil $18
04169C C9          0450*      ret
04169D             0451*  ; VDU 23, 0, &A0, bufferId; 14
04169D 17 00 A0    0452*  @beg: db 23,0,0xA0
0416A0 00 00       0453*  @bufferId: dw 0x0000
0416A2 0E          0454*             db 14
0416A3             0455*  @end:
0416A3             0456*  
0416A3             0457*  ; load an image file to a buffer and make it a bitmap
0416A3             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0416A3             0459*  vdu_load_img:
0416A3             0460*  ; back up image type and dimension parameters
0416A3 22 2A 16 04 0461*      ld (bufferId0),hl
0416A7 F5          0462*      push af
0416A8 C5          0463*  	push bc
0416A9 D5          0464*  	push de
0416AA             0465*  ; load the image
0416AA CD C5 16 04 0466*  	call vdu_load_buffer_from_file
0416AE             0467*  ; now make it a bitmap
0416AE 2A 2A 16 04 0468*      ld hl,(bufferId0)
0416B2 CD 88 16 04 0469*      call vdu_consolidate_buffer
0416B6 2A 2A 16 04 0470*      ld hl,(bufferId0)
0416BA CD 85 15 04 0471*      call vdu_buff_select
0416BE D1          0472*  	pop de ; image height
0416BF C1          0473*  	pop bc ; image width
0416C0 F1          0474*  	pop af ; image type
0416C1 C3 9A 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416C5             0476*  
0416C5             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416C5             0478*  vdu_load_buffer_from_file:
0416C5 22 2A 16 04 0479*      ld (bufferId0),hl
0416C9             0480*  
0416C9             0481*  ; clear target buffer
0416C9 CD 5C 16 04 0482*      call vdu_clear_buffer
0416CD             0483*  
0416CD             0484*  ; open the file in read mode
0416CD             0485*  ; Open a file
0416CD             0486*  ; HLU: Filename
0416CD             0487*  ;   C: Mode
0416CD             0488*  ; Returns:
0416CD             0489*  ;   A: Filehandle, or 0 if couldn't open
0416CD FD E5       0490*  	push iy ; pointer to filename
0416CF E1          0491*  	pop hl
0416D0 0E 01       0492*  	ld c,fa_read
0416D2             0493*      MOSCALL mos_fopen
0416D2 3E 0A       0001*M 			LD	A, function
0416D4 5B CF       0002*M 			RST.LIL	08h
0416D6 32 11 17 04 0494*      ld (@filehandle),a
0416DA             0495*  
0416DA             0496*  @read_file:
0416DA             0497*  ; Read a block of data from a file
0416DA             0498*  ;   C: Filehandle
0416DA             0499*  ; HLU: Pointer to where to write the data to
0416DA             0500*  ; DEU: Number of bytes to read
0416DA             0501*  ; Returns:
0416DA             0502*  ; DEU: Number of bytes read
0416DA 3A 11 17 04 0503*      ld a,(@filehandle)
0416DE 4F          0504*      ld c,a
0416DF 21 00 E0 B7 0505*      ld hl,filedata
0416E3 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416E7             0507*      MOSCALL mos_fread
0416E7 3E 1A       0001*M 			LD	A, function
0416E9 5B CF       0002*M 			RST.LIL	08h
0416EB             0508*  
0416EB             0509*  ; test de for zero bytes read
0416EB 21 00 00 00 0510*      ld hl,0
0416EF AF          0511*      xor a ; clear carry
0416F0 ED 52       0512*      sbc hl,de
0416F2 CA 08 17 04 0513*      jp z,@close_file
0416F6             0514*  
0416F6             0515*  ; load a vdu buffer from local memory
0416F6             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0416F6 2A 2A 16 04 0517*      ld hl,(bufferId0)
0416FA D5          0518*      push de ; chunksize
0416FB C1          0519*      pop bc
0416FC 11 00 E0 B7 0520*      ld de,filedata
041700 CD 30 16 04 0521*      call vdu_load_buffer
041704             0522*  
041704             0523*  ; read the next block
041704 C3 DA 16 04 0524*      jp @read_file
041708             0525*  
041708             0526*  ; close the file
041708             0527*  @close_file:
041708 3A 11 17 04 0528*      ld a,(@filehandle)
04170C             0529*      MOSCALL mos_fclose
04170C 3E 0B       0001*M 			LD	A, function
04170E 5B CF       0002*M 			RST.LIL	08h
041710 C9          0530*      ret ; vdu_load_buffer_from_file
041711             0531*  
041711 00          0532*  @filehandle: db 0 ; file handle
041712 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041715             0534*  
041715 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041718             0536*  
041718             0537*  ; File information structure (FILINFO)
041718             0538*  @filinfo:
041718 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04171C 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04171E 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041720 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041721 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04172E 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04182E             0038       include "vdu_fonts.inc"
04182E             0001*  ; select font
04182E             0002*  ; inputs: hl = bufferId, a = font flags
04182E             0003*  ; Flags:
04182E             0004*  ; Bit	Description
04182E             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
04182E             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
04182E             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
04182E             0008*  ; 1-7	Reserved for future use
04182E             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04182E             0010*  vdu_font_select:
04182E 22 45 18 04 0011*      ld (@bufferId),hl
041832 32 47 18 04 0012*      ld (@flags),a
041836 21 41 18 04 0013*      ld hl,@cmd
04183A 01 07 00 00 0014*      ld bc,@end-@cmd
04183E 5B DF       0015*      rst.lil $18
041840 C9          0016*      ret
041841 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041845 00 00       0018*  @bufferId: dw 0x0000
041847 00          0019*  @flags: db 0x00
041848             0020*  @end:
041848             0021*  
041848             0022*  ; create font from buffer
041848             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041848             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041848             0025*  vdu_font_create:
041848 22 6D 18 04 0026*      ld (@bufferId),hl
04184C ED 53 6F 18 0027*      ld (@width),de ; also loads height
       04          
041851 32 72 18 04 0028*      ld (@flags),a
041855 7A          0029*      ld a,d ; height
041856 32 71 18 04 0030*      ld (@ascent),a ; ascent = height
04185A             0031*  ; consolidate buffer
04185A CD 88 16 04 0032*      call vdu_consolidate_buffer
04185E             0033*  ; create font
04185E 21 69 18 04 0034*      ld hl,@cmd
041862 01 0A 00 00 0035*      ld bc,@end-@cmd
041866 5B DF       0036*      rst.lil $18
041868 C9          0037*      ret
041869 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
04186D 00 00       0039*  @bufferId: dw 0x0000
04186F 00          0040*  @width: db 0x00
041870 00          0041*  @height: db 0x00
041871 00          0042*  @ascent: db 0x00
041872 00          0043*  @flags: db 0x00
041873             0044*  @end:
041873             0045*  
041873             0046*  ; set or adjust font property
041873             0047*  ; inputs: hl = bufferId, a = field, de = value
041873             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041873             0049*  vdu_font_property:
041873 22 8F 18 04 0050*      ld (@bufferId),hl
041877 32 91 18 04 0051*      ld (@field),a
04187B ED 53 92 18 0052*      ld (@value),de
       04          
041880 21 8B 18 04 0053*      ld hl,@cmd
041884 01 09 00 00 0054*      ld bc,@end-@cmd
041888 5B DF       0055*      rst.lil $18
04188A C9          0056*      ret
04188B 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
04188F 00 00       0058*  @bufferId: dw 0x0000
041891 00          0059*  @field: db 0x00
041892 00 00       0060*  @value: dw 0x0000
041894 00          0061*  @end: db 0x00 ; padding
041895             0062*  
041895             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041895             0064*  
041895             0065*  ; Clear/Delete font
041895             0066*  ; inputs: hl = bufferId
041895             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041895             0068*  vdu_font_clear:
041895 22 A8 18 04 0069*      ld (@bufferId),hl
041899 21 A4 18 04 0070*      ld hl,@cmd
04189D 01 06 00 00 0071*      ld bc,@end-@cmd
0418A1 5B DF       0072*      rst.lil $18
0418A3 C9          0073*      ret
0418A4 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
0418A8 00 00       0075*  @bufferId: dw 0x0000
0418AA 00          0076*  @end: db 0x00 ; padding
0418AB             0077*  
0418AB             0078*  ; Copy system font to buffer
0418AB             0079*  ; inputs: hl = bufferId
0418AB             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0418AB             0081*  vdu_font_copy_system:
0418AB 22 BE 18 04 0082*      ld (@bufferId),hl
0418AF 21 BA 18 04 0083*      ld hl,@cmd
0418B3 01 06 00 00 0084*      ld bc,@end-@cmd
0418B7 5B DF       0085*      rst.lil $18
0418B9 C9          0086*      ret
0418BA 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418BE 00 00       0088*  @bufferId: dw 0x0000
0418C0 00          0089*  @end: db 0x00 ; padding
0418C1             0039       include "vdu_plot.inc"
0418C1             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418C1             0002*  ; PLOT code 	(Decimal) 	Effect
0418C1             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418C1             0004*  plot_sl_both: equ 0x00
0418C1             0005*  
0418C1             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418C1             0007*  plot_sl_first: equ 0x08
0418C1             0008*  
0418C1             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418C1             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418C1             0011*  
0418C1             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418C1             0013*  plot_sl_last: equ 0x20
0418C1             0014*  
0418C1             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418C1             0016*  plot_sl_none: equ 0x28
0418C1             0017*  
0418C1             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418C1             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418C1             0020*  
0418C1             0021*  ; &40-&47 	64-71 	Point plot
0418C1             0022*  plot_pt: equ 0x40
0418C1             0023*  
0418C1             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418C1             0025*  plot_lf_lr_non_bg: equ 0x48
0418C1             0026*  
0418C1             0027*  ; &50-&57 	80-87 	Triangle fill
0418C1             0028*  plot_tf: equ 0x50
0418C1             0029*  
0418C1             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418C1             0031*  plot_lf_r_bg: equ 0x58
0418C1             0032*  
0418C1             0033*  ; &60-&67 	96-103 	Rectangle fill
0418C1             0034*  plot_rf: equ 0x60
0418C1             0035*  
0418C1             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418C1             0037*  plot_lf_lr_fg: equ 0x60
0418C1             0038*  
0418C1             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418C1             0040*  plot_pf: equ 0x70
0418C1             0041*  
0418C1             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418C1             0043*  plot_lf_r_non_fg: equ 0x78
0418C1             0044*  
0418C1             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418C1             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418C1             0047*  
0418C1             0048*  ; &90-&97 	144-151 	Circle outline
0418C1             0049*  plot_co: equ 0x90
0418C1             0050*  
0418C1             0051*  ; &98-&9F 	152-159 	Circle fill
0418C1             0052*  plot_cf: equ 0x98
0418C1             0053*  
0418C1             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418C1             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418C1             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418C1             0057*  
0418C1             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418C1             0059*  plot_rcm: equ 0xB8
0418C1             0060*  
0418C1             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418C1             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418C1             0063*  ; &D0-&D7 	208-215 	Not defined
0418C1             0064*  ; &D8-&DF 	216-223 	Not defined
0418C1             0065*  ; &E0-&E7 	224-231 	Not defined
0418C1             0066*  
0418C1             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418C1             0068*  plot_bmp: equ 0xE8
0418C1             0069*  
0418C1             0070*  ; &F0-&F7 	240-247 	Not defined
0418C1             0071*  ; &F8-&FF 	248-255 	Not defined
0418C1             0072*  
0418C1             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418C1             0074*  ; Agon Console8 VDP 2.2.0
0418C1             0075*  
0418C1             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418C1             0077*  ; Plot code 	Effect
0418C1             0078*  ; 0 	Move relative
0418C1             0079*  mv_rel: equ 0
0418C1             0080*  
0418C1             0081*  ; 1 	Plot relative in current foreground colour
0418C1             0082*  dr_rel_fg: equ 1
0418C1             0083*  
0418C1             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418C1             0085*  ; 3 	Plot relative in current background colour
0418C1             0086*  dr_rel_bg: equ 3
0418C1             0087*  
0418C1             0088*  ; 4 	Move absolute
0418C1             0089*  mv_abs: equ 4
0418C1             0090*  
0418C1             0091*  ; 5 	Plot absolute in current foreground colour
0418C1             0092*  dr_abs_fg: equ 5
0418C1             0093*  
0418C1             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418C1             0095*  ; 7 	Plot absolute in current background colour
0418C1             0096*  dr_abs_bg: equ 7
0418C1             0097*  
0418C1             0098*  ; Codes 0-3 use the position data provided as part of the command
0418C1             0099*  ; as a relative position, adding the position given to the current
0418C1             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418C1             0101*  ; as part of the command as an absolute position, setting the current
0418C1             0102*  ; graphical cursor position to the position given.
0418C1             0103*  
0418C1             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418C1             0105*  ; current pixel colour. These operations cannot currently be supported
0418C1             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418C1             0107*  ; supported. Support for these codes may be added in a future version
0418C1             0108*  ; of the VDP firmware.
0418C1             0109*  
0418C1             0110*  ; 16 colour palette constants
0418C1             0111*  c_black: equ 0
0418C1             0112*  c_red_dk: equ 1
0418C1             0113*  c_green_dk: equ 2
0418C1             0114*  c_yellow_dk: equ 3
0418C1             0115*  c_blue_dk: equ 4
0418C1             0116*  c_magenta_dk: equ 5
0418C1             0117*  c_cyan_dk: equ 6
0418C1             0118*  c_grey: equ 7
0418C1             0119*  c_grey_dk: equ 8
0418C1             0120*  c_red: equ 9
0418C1             0121*  c_green: equ 10
0418C1             0122*  c_yellow: equ 11
0418C1             0123*  c_blue: equ 12
0418C1             0124*  c_magenta: equ 13
0418C1             0125*  c_cyan: equ 14
0418C1             0126*  c_white: equ 15
0418C1             0127*  
0418C1             0128*  ; VDU 25, mode, x; y;: PLOT command
0418C1             0129*  ; inputs: a=mode, bc=x0, de=y0
0418C1             0130*  vdu_plot:
0418C1 32 DB 18 04 0131*      ld (@mode),a
0418C5 ED 43 DC 18 0132*      ld (@x0),bc
       04          
0418CA ED 53 DE 18 0133*      ld (@y0),de
       04          
0418CF 21 DA 18 04 0134*  	ld hl,@cmd
0418D3 01 06 00 00 0135*  	ld bc,@end-@cmd
0418D7 5B DF       0136*  	rst.lil $18
0418D9 C9          0137*  	ret
0418DA 19          0138*  @cmd:   db 25
0418DB 00          0139*  @mode:  db 0
0418DC 00 00       0140*  @x0: 	dw 0
0418DE 00 00       0141*  @y0: 	dw 0
0418E0 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418E1             0143*  
0418E1             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418E1             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418E1             0146*  ; VDU 25, mode, x; y;: PLOT command
0418E1             0147*  ; inputs: bc=x0, de=y0
0418E1             0148*  ; prerequisites: vdu_buff_select
0418E1             0149*  vdu_plot_bmp:
0418E1 ED 43 F8 18 0150*      ld (@x0),bc
       04          
0418E6 ED 53 FA 18 0151*      ld (@y0),de
       04          
0418EB 21 F6 18 04 0152*  	ld hl,@cmd
0418EF 01 06 00 00 0153*  	ld bc,@end-@cmd
0418F3 5B DF       0154*  	rst.lil $18
0418F5 C9          0155*  	ret
0418F6 19          0156*  @cmd:   db 25
0418F7 ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0418F8 00 00       0158*  @x0: 	dw 0x0000
0418FA 00 00       0159*  @y0: 	dw 0x0000
0418FC 00          0160*  @end:   db 0x00 ; padding
0418FD             0161*  
0418FD             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418FD             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0418FD             0164*  ; VDU 25, mode, x; y;: PLOT command
0418FD             0165*  ; inputs: bc=x0, de=y0
0418FD             0166*  ; USING 16.8 FIXED POINT COORDINATES
0418FD             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0418FD             0168*  ;   the fractional portiion of the inputs are truncated
0418FD             0169*  ;   leaving only the 16-bit integer portion
0418FD             0170*  ; prerequisites: vdu_buff_select
0418FD             0171*  vdu_plot_bmp168:
0418FD             0172*  ; populate in the reverse of normal to keep the
0418FD             0173*  ; inputs from stomping on each other
0418FD ED 53 1B 19 0174*      ld (@y0-1),de
       04          
041902 ED 43 19 19 0175*      ld (@x0-1),bc
       04          
041907 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
041909 32 19 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04190D 21 18 19 04 0178*  	ld hl,@cmd
041911 01 06 00 00 0179*  	ld bc,@end-@cmd
041915 5B DF       0180*  	rst.lil $18
041917 C9          0181*  	ret
041918 19          0182*  @cmd:   db 25
041919 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04191A 00 00       0184*  @x0: 	dw 0x0000
04191C 00 00       0185*  @y0: 	dw 0x0000
04191E             0186*  @end:  ; no padding required b/c we shifted de right
04191E             0187*  
04191E             0188*  ; draw a filled rectangle
04191E             0189*  vdu_plot_rf:
04191E ED 43 45 19 0190*      ld (@x0),bc
       04          
041923 ED 53 47 19 0191*      ld (@y0),de
       04          
041928 DD 22 4B 19 0192*      ld (@x1),ix
       04          
04192D FD 22 4D 19 0193*      ld (@y1),iy
       04          
041932 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041934 32 49 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041938 21 43 19 04 0196*  	ld hl,@cmd0
04193C 01 0C 00 00 0197*  	ld bc,@end-@cmd0
041940 5B DF       0198*  	rst.lil $18
041942 C9          0199*      ret
041943 19          0200*  @cmd0:  db 25 ; plot
041944 04          0201*  @arg0:  db plot_sl_both+mv_abs
041945 00 00       0202*  @x0:    dw 0x0000
041947 00 00       0203*  @y0:    dw 0x0000
041949 19          0204*  @cmd1:  db 25 ; plot
04194A 65          0205*  @arg1:  db plot_rf+dr_abs_fg
04194B 00 00       0206*  @x1:    dw 0x0000
04194D 00 00       0207*  @y1:    dw 0x0000
04194F 00          0208*  @end:   db 0x00 ; padding
041950             0209*  
041950             0210*  ; draw a filled circle
041950             0211*  vdu_plot_cf:
041950 ED 43 77 19 0212*      ld (@x0),bc
       04          
041955 ED 53 79 19 0213*      ld (@y0),de
       04          
04195A DD 22 7D 19 0214*      ld (@x1),ix
       04          
04195F FD 22 7F 19 0215*      ld (@y1),iy
       04          
041964 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041966 32 7B 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04196A 21 75 19 04 0218*  	ld hl,@cmd0
04196E 01 0C 00 00 0219*  	ld bc,@end-@cmd0
041972 5B DF       0220*  	rst.lil $18
041974 C9          0221*      ret
041975 19          0222*  @cmd0:  db 25 ; plot
041976 04          0223*  @arg0:  db plot_sl_both+mv_abs
041977 00 00       0224*  @x0:    dw 0x0000
041979 00 00       0225*  @y0:    dw 0x0000
04197B 19          0226*  @cmd1:  db 25 ; plot
04197C 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
04197D 00 00       0228*  @x1:    dw 0x0000
04197F 00 00       0229*  @y1:    dw 0x0000
041981 00          0230*  @end:   db 0x00 ; padding
041982             0040       include "vdu_sprites.inc"
041982             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041982             0002*  ; the VDP can support up to 256 sprites. They must be defined
041982             0003*  ; contiguously, and so the first sprite is sprite 0.
041982             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041982             0005*  ; Once a selection of sprites have been defined, you can activate
041982             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
041982             0007*  ; of sprites to activate. This will activate the first n sprites,
041982             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041982             0009*  
041982             0010*  ; A single sprite can have multiple "frames", referring to
041982             0011*  ; different bitmaps.
041982             0012*  ; (These bitmaps do not need to be the same size.)
041982             0013*  ; This allows a sprite to include an animation sequence,
041982             0014*  ; which can be stepped through one frame at a time, or picked
041982             0015*  ; in any order.
041982             0016*  
041982             0017*  ; Any format of bitmap can be used as a sprite frame. It should
041982             0018*  ; be noted however that "native" format bitmaps are not
041982             0019*  ; recommended for use as sprite frames, as they cannot get
041982             0020*  ; erased from the screen. (As noted above, the "native" bitmap
041982             0021*  ; format is not really intended for general use.) This is part
041982             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041982             0023*  ; screen are now stored in RGBA2222 format.
041982             0024*  
041982             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
041982             0026*  ; and then later shown again.
041982             0027*  
041982             0028*  ; Moving sprites around the screen is done by changing the
041982             0029*  ; position of the sprite. This can be done either by setting
041982             0030*  ; the absolute position of the sprite, or by moving the sprite
041982             0031*  ; by a given number of pixels. (Sprites are positioned using
041982             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
041982             0033*  ; In the current sprite system, sprites will not update their
041982             0034*  ; position on-screen until either another drawing operation is
041982             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
041982             0036*  
041982             0037*  ; VDU 23, 27, 4, n: Select sprite n
041982             0038*  ; inputs: a is the 8-bit sprite id
041982             0039*  vdu_sprite_select:
041982 32 94 19 04 0040*      ld (@sprite),a
041986 21 91 19 04 0041*      ld hl,@cmd
04198A 01 04 00 00 0042*      ld bc,@end-@cmd
04198E 5B DF       0043*      rst.lil $18
041990 C9          0044*      ret
041991 17 1B 04    0045*  @cmd:    db 23,27,4
041994 00          0046*  @sprite: db 0x00
041995             0047*  @end:
041995             0048*  
041995             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041995             0050*  ; inputs: none
041995             0051*  ; prerequisites: vdu_sprite_select
041995             0052*  vdu_sprite_clear_frames:
041995 21 A0 19 04 0053*      ld hl,@cmd
041999 01 03 00 00 0054*      ld bc,@end-@cmd
04199D 5B DF       0055*      rst.lil $18
04199F C9          0056*      ret
0419A0 17 1B 05    0057*  @cmd: db 23,27,5
0419A3             0058*  @end:
0419A3             0059*  
0419A3             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0419A3             0061*  ; inputs: a is the 8-bit bitmap number
0419A3             0062*  ; prerequisites: vdu_sprite_select
0419A3             0063*  vdu_sprite_add_bmp:
0419A3 32 B5 19 04 0064*      ld (@bmp),a
0419A7 21 B2 19 04 0065*      ld hl,@cmd
0419AB 01 04 00 00 0066*      ld bc,@end-@cmd
0419AF 5B DF       0067*      rst.lil $18
0419B1 C9          0068*      ret
0419B2 17 1B 06    0069*  @cmd: db 23,27,6
0419B5 00          0070*  @bmp: db 0x00
0419B6             0071*  @end:
0419B6             0072*  
0419B6             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419B6             0074*  ; inputs: a is the number of sprites to activate
0419B6             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419B6             0076*  vdu_sprite_activate:
0419B6 32 C8 19 04 0077*      ld (@num),a
0419BA 21 C5 19 04 0078*      ld hl,@cmd
0419BE 01 04 00 00 0079*      ld bc,@end-@cmd
0419C2 5B DF       0080*      rst.lil $18
0419C4 C9          0081*      ret
0419C5 17 1B 07    0082*  @cmd: db 23,27,7
0419C8 00          0083*  @num: db 0x00
0419C9             0084*  @end:
0419C9             0085*  
0419C9             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419C9             0087*  ; inputs: none
0419C9             0088*  ; prerequisites: vdu_sprite_select
0419C9             0089*  vdu_sprite_next_frame:
0419C9 21 D4 19 04 0090*      ld hl,@cmd
0419CD 01 03 00 00 0091*      ld bc,@end-@cmd
0419D1 5B DF       0092*      rst.lil $18
0419D3 C9          0093*      ret
0419D4 17 1B 08    0094*  @cmd: db 23,27,8
0419D7             0095*  @end:
0419D7             0096*  
0419D7             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419D7             0098*  ; inputs: none
0419D7             0099*  ; prerequisites: vdu_sprite_select
0419D7             0100*  vdu_sprite_prev_frame:
0419D7 21 E2 19 04 0101*      ld hl,@cmd
0419DB 01 03 00 00 0102*      ld bc,@end-@cmd
0419DF 5B DF       0103*      rst.lil $18
0419E1 C9          0104*      ret
0419E2 17 1B 09    0105*  @cmd: db 23,27,9
0419E5             0106*  @end:
0419E5             0107*  
0419E5             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419E5             0109*  ; inputs: a is frame number to select
0419E5             0110*  ; prerequisites: vdu_sprite_select
0419E5             0111*  vdu_sprite_select_frame:
0419E5 32 F7 19 04 0112*      ld (@frame),a
0419E9 21 F4 19 04 0113*      ld hl,@cmd
0419ED 01 04 00 00 0114*      ld bc,@end-@cmd
0419F1 5B DF       0115*      rst.lil $18
0419F3 C9          0116*      ret
0419F4 17 1B 0A    0117*  @cmd:    db 23,27,10
0419F7 00          0118*  @frame:  db 0x00
0419F8             0119*  @end:
0419F8             0120*  
0419F8             0121*  ; VDU 23, 27, 11: Show current sprite
0419F8             0122*  ; inputs: none
0419F8             0123*  ; prerequisites: vdu_sprite_select
0419F8             0124*  vdu_sprite_show:
0419F8 21 03 1A 04 0125*      ld hl,@cmd
0419FC 01 03 00 00 0126*      ld bc,@end-@cmd
041A00 5B DF       0127*      rst.lil $18
041A02 C9          0128*      ret
041A03 17 1B 0B    0129*  @cmd: db 23,27,11
041A06             0130*  @end:
041A06             0131*  
041A06             0132*  ; VDU 23, 27, 12: Hide current sprite
041A06             0133*  ; inputs: none
041A06             0134*  ; prerequisites: vdu_sprite_select
041A06             0135*  vdu_sprite_hide:
041A06 21 11 1A 04 0136*      ld hl,@cmd
041A0A 01 03 00 00 0137*      ld bc,@end-@cmd
041A0E 5B DF       0138*      rst.lil $18
041A10 C9          0139*      ret
041A11 17 1B 0C    0140*  @cmd: db 23,27,12
041A14             0141*  @end:
041A14             0142*  
041A14             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A14             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A14             0145*  ; prerequisites: vdu_sprite_select
041A14             0146*  vdu_sprite_move_abs:
041A14 ED 43 2C 1A 0147*      ld (@xpos),bc
       04          
041A19 ED 53 2E 1A 0148*      ld (@ypos),de
       04          
041A1E 21 29 1A 04 0149*      ld hl,@cmd
041A22 01 07 00 00 0150*      ld bc,@end-@cmd
041A26 5B DF       0151*      rst.lil $18
041A28 C9          0152*      ret
041A29 17 1B 0D    0153*  @cmd:  db 23,27,13
041A2C 00 00       0154*  @xpos: dw 0x0000
041A2E 00 00       0155*  @ypos: dw 0x0000
041A30 00          0156*  @end:  db 0x00 ; padding
041A31             0157*  
041A31             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A31             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A31             0160*  ; prerequisites: vdu_sprite_select
041A31             0161*  vdu_sprite_move_rel:
041A31 ED 43 49 1A 0162*      ld (@dx),bc
       04          
041A36 ED 53 4B 1A 0163*      ld (@dy),de
       04          
041A3B 21 46 1A 04 0164*      ld hl,@cmd
041A3F 01 07 00 00 0165*      ld bc,@end-@cmd
041A43 5B DF       0166*      rst.lil $18
041A45 C9          0167*      ret
041A46 17 1B 0E    0168*  @cmd: db 23,27,14
041A49 00 00       0169*  @dx:  dw 0x0000
041A4B 00 00       0170*  @dy:  dw 0x0000
041A4D 00          0171*  @end: db 0x00 ; padding
041A4E             0172*  
041A4E             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A4E             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A4E             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A4E             0176*  ;   the fractional portiion of the inputs are truncated
041A4E             0177*  ;   leaving only the 16-bit integer portion
041A4E             0178*  ; prerequisites: vdu_sprite_select
041A4E             0179*  vdu_sprite_move_abs168:
041A4E             0180*  ; offset inputs by the gfx origin
041A4E             0181*  ; y coordinate
041A4E 21 00 00 00 0182*      ld hl,origin_top*256
041A52 19          0183*      add hl,de
041A53 22 75 1A 04 0184*      ld (@ypos-1),hl
041A57             0185*  ; x coordinate
041A57 21 00 80 00 0186*      ld hl,origin_left*256
041A5B 09          0187*      add hl,bc
041A5C 22 73 1A 04 0188*      ld (@xpos-1),hl
041A60             0189*  ; prepare vdu command
041A60 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A62 32 73 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A66 21 71 1A 04 0192*      ld hl,@cmd
041A6A 01 07 00 00 0193*      ld bc,@end-@cmd
041A6E 5B DF       0194*      rst.lil $18
041A70 C9          0195*      ret
041A71 17 1B 0D    0196*  @cmd:  db 23,27,13
041A74 00 00       0197*  @xpos: dw 0x0000
041A76 00 00       0198*  @ypos: dw 0x0000
041A78             0199*  @end:  ; no padding required b/c we shifted de right
041A78             0200*  
041A78             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A78             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A78             0203*  ; inputs: ub.c is dx, ud.e is dy
041A78             0204*  ;   the fractional portiion of the inputs are truncated
041A78             0205*  ;   leaving only the 16-bit integer portion
041A78             0206*  ; prerequisites: vdu_sprite_select
041A78             0207*  vdu_sprite_move_rel168:
041A78             0208*  ; populate in the reverse of normal to keep the
041A78             0209*  ; inputs from stomping on each other
041A78 ED 53 97 1A 0210*      ld (@dy-1),de
       04          
041A7D ED 43 95 1A 0211*      ld (@dx-1),bc
       04          
041A82 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A84 32 95 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A88 21 93 1A 04 0214*      ld hl,@cmd
041A8C 01 07 00 00 0215*      ld bc,@end-@cmd
041A90 5B DF       0216*      rst.lil $18
041A92 C9          0217*      ret
041A93 17 1B 0E    0218*  @cmd:  db 23,27,14
041A96 00 00       0219*  @dx: dw 0x0000
041A98 00 00       0220*  @dy: dw 0x0000
041A9A             0221*  @end:  ; no padding required b/c we shifted de right
041A9A             0222*  
041A9A             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041A9A             0224*  ; inputs: none
041A9A             0225*  vdu_sprite_update:
041A9A 21 A5 1A 04 0226*      ld hl,@cmd
041A9E 01 03 00 00 0227*      ld bc,@end-@cmd
041AA2 5B DF       0228*      rst.lil $18
041AA4 C9          0229*      ret
041AA5 17 1B 0F    0230*  @cmd: db 23,27,15
041AA8             0231*  @end:
041AA8             0232*  
041AA8             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041AA8             0234*  ; inputs: none
041AA8             0235*  vdu_sprite_bmp_reset:
041AA8 21 B3 1A 04 0236*      ld hl,@cmd
041AAC 01 03 00 00 0237*      ld bc,@end-@cmd
041AB0 5B DF       0238*      rst.lil $18
041AB2 C9          0239*      ret
041AB3 17 1B 10    0240*  @cmd: db 23,27,16
041AB6             0241*  @end:
041AB6             0242*  
041AB6             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041AB6             0244*  ; inputs: none
041AB6             0245*  vdu_sprite_reset:
041AB6 21 C1 1A 04 0246*      ld hl,@cmd
041ABA 01 03 00 00 0247*      ld bc,@end-@cmd
041ABE 5B DF       0248*      rst.lil $18
041AC0 C9          0249*      ret
041AC1 17 1B 11    0250*  @cmd: db 23,27,17
041AC4             0251*  @end:
041AC4             0252*  
041AC4             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041AC4             0254*  ; inputs: a is the GCOL paint mode
041AC4             0255*  ; prerequisites: vdu_sprite_select
041AC4             0256*  vdu_sprite_set_gcol:
041AC4 32 D6 1A 04 0257*      ld (@mode),a
041AC8 21 D3 1A 04 0258*      ld hl,@cmd
041ACC 01 04 00 00 0259*      ld bc,@end-@cmd
041AD0 5B DF       0260*      rst.lil $18
041AD2 C9          0261*      ret
041AD3 17 1B 12    0262*  @cmd:  db 23,27,18
041AD6 00          0263*  @mode: db 0x00
041AD7             0264*  @end:
041AD7             0265*  
041AD7             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AD7             0267*  ; inputs: hl=bufferId
041AD7             0268*  ; prerequisites: vdu_sprite_select
041AD7             0269*  vdu_sprite_add_buff:
041AD7 22 E9 1A 04 0270*      ld (@bufferId),hl
041ADB 21 E6 1A 04 0271*      ld hl,@cmd
041ADF 01 05 00 00 0272*      ld bc,@end-@cmd
041AE3 5B DF       0273*      rst.lil $18
041AE5 C9          0274*      ret
041AE6 17 1B 26    0275*  @cmd:      db 23,27,0x26
041AE9 00 00       0276*  @bufferId: dw 0x0000
041AEB 00          0277*  @end:      db 0x00 ; padding
041AEC             0041   
041AEC             0042   ; APPLICATION INCLUDES
041AEC             0043       include "collisions.inc"
041AEC             0001*  ; ====== COLLISION DETECTION ======
041AEC             0002*  ; --- constants ---
041AEC             0003*  ; sprite_collisions flags
041AEC             0004*  collides_with_player: equ %00000001
041AEC             0005*  collides_with_laser: equ %00000010
041AEC             0006*  sprite_alive: equ 6 ; set when sprite is alive
041AEC             0007*  sprite_just_died: equ 7 ; set when sprite just died
041AEC             0008*  
041AEC             0009*  collide_top: equ %00001000
041AEC             0010*  collide_bottom: equ %00000100
041AEC             0011*  collide_left: equ %00000010
041AEC             0012*  collide_right: equ %00000001
041AEC             0013*  
041AEC             0014*  ; this routine detects collisions between two collidable objects,
041AEC             0015*  ; which can include sprites, active tiles, or any screen coordinate
041AEC             0016*  ; which has been set up with a sprite table structure that includes dim_x
041AEC             0017*  ; representing the radius of the collidable object
041AEC             0018*  ; inputs: ix and iy point to the colliding objects' sprite table records
041AEC             0019*  ; outputs: uh.l = distance - sum of radii
041AEC             0020*  ;          zero flag set or sign flag negative if collision detected
041AEC             0021*  ;          dx168 and dy168 are also populated with the signed displacements
041AEC             0022*  ; destroys: everything except indexes
041AEC             0023*  check_collision:
041AEC             0024*  ; compute dx = x1-x0
041AEC DD 27 01    0025*      ld hl,(ix+sprite_x)
041AEF FD 17 01    0026*      ld de,(iy+sprite_x)
041AF2 AF          0027*      xor a ; clear carry
041AF3 ED 52       0028*      sbc hl,de
041AF5 22 B2 09 04 0029*      ld (dx168),hl ; dx to scratch
041AF9             0030*  ; compute dy = y1-y0
041AF9 DD 27 04    0031*      ld hl,(ix+sprite_y)
041AFC FD 17 04    0032*      ld de,(iy+sprite_y)
041AFF AF          0033*      xor a ; clear carry
041B00 ED 52       0034*      sbc hl,de ; hl = dy
041B02 22 B8 09 04 0035*      ld (dy168),hl ; dy to scratch
041B06             0036*  ; compute euclidean distance between centers
041B06 CD BE 09 04 0037*      call distance168 ; uh.l = distance
041B0A             0038*  ; check for overlap by summing half the radii
041B0A DD 7E 1E    0039*      ld a,(ix+sprite_dim_x)
041B0D CB 3F       0040*      srl a ; divide by 2
041B0F FD 5E 1E    0041*      ld e,(iy+sprite_dim_x)
041B12 CB 3B       0042*      srl e ; divide by 2
041B14 83          0043*      add a,e
041B15 11 00 00 00 0044*      ld de,0 ; clear deu and e
041B19 57          0045*      ld d,a ; ud.e = sum of radii
041B1A B7          0046*      or a ; clear carry
041B1B ED 52       0047*      sbc hl,de ; uh.l = distance - sum of radii
041B1D C9          0048*      ret
041B1E             0049*  ; end check_collision
041B1E             0044       include "enemies.inc"
041B1E 04          0001*  max_enemy_sprites: db 4
041B1F             0002*  
041B1F             0003*  ; sprite_type
041B1F             0004*  enemy_dead: equ 0
041B1F             0005*  enemy_seeker: equ 1
041B1F             0006*  
041B1F             0007*  fireballs: equ 6
041B1F             0008*  explosion: equ 255
041B1F             0009*  move_enemies:
041B1F             0010*  ; are there any active enemies or explosions?
041B1F 3A 16 51 04 0011*      ld a,(table_active_sprites)
041B23 A7          0012*      and a ; will be zero if no alive enemies or explosions
041B24 C2 29 1B 04 0013*      jp nz,@they_live
041B28             0014*      ; DEPRECATED: though may be used in the future
041B28             0015*      ; ld hl,enemies_dead
041B28             0016*      ; ld (enemies_state),hl
041B28             0017*      ; END DEPRECATED
041B28 C9          0018*      ret
041B29             0019*  @they_live:
041B29             0020*  ; initialize pointers and loop counter
041B29 FD 21 93 4E 0021*      ld iy,table_base ; set iy to first record in table
       04          
041B2E 06 10       0022*      ld b,table_max_records ; loop counter
041B30             0023*  @move_loop:
041B30 FD 22 13 51 0024*      ld (table_pointer),iy ; update table pointer
       04          
041B35 C5          0025*      push bc ; backup loop counter
041B36             0026*  ; check top bit of sprite_type to see if sprite is just spawned
041B36 FD 7E 16    0027*      ld a,(iy+sprite_type)
041B39 CB 7F       0028*      bit 7,a
041B3B C2 73 1B 04 0029*      jp nz,@next_record ; if just spawned, skip to next record
041B3F             0030*  ; check sprite_type to see if sprite is active
041B3F A7          0031*      and a ; if zero, sprite is dead
041B40 CA 73 1B 04 0032*      jp z,@next_record ; ... and we skip to next record
041B44             0033*  ; otherwise we prepare to move the sprite
041B44 FD 7E 00    0034*      ld a,(iy+sprite_id) ; get spriteId
041B47 CD 82 19 04 0035*      call vdu_sprite_select ; select sprite
041B4B FD 27 1A    0036*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B4E             0037*      callHL
041B4E 01 54 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B52 C5          0002*M     push bc ; which constitutes the return address
041B53 E9          0003*M     jp (hl) ; Jump to the address in HL
041B54             0004*M @@:
041B54             0038*  ; move_enemies_loop_return: return from behavior subroutines
041B54 FD 2A 13 51 0039*      ld iy,(table_pointer) ; get back table pointer
       04          
041B59             0040*  ; now we check results of all the moves
041B59 FD CB 1D 7E 0041*      bit sprite_just_died,(iy+sprite_collisions)
041B5D CA 69 1B 04 0042*      jp z,@draw_sprite ; if not dead, draw sprite
041B61 CD 59 51 04 0043*      call table_deactivate_sprite
041B65 C3 73 1B 04 0044*      jp @next_record ; and to the next record
041B69             0045*  @draw_sprite:
041B69 FD 07 01    0046*      ld bc,(iy+sprite_x)
041B6C FD 17 04    0047*      ld de,(iy+sprite_y)
041B6F CD 4E 1A 04 0048*      call vdu_sprite_move_abs168
041B73             0049*  ; fall through to @next_record
041B73             0050*  @next_record:
041B73 ED 33 28    0051*      lea iy,iy+table_bytes_per_record
041B76 AF          0052*      xor a ; clears carry flag
041B77 32 17 51 04 0053*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B7B C1          0054*      pop bc ; get back our loop counter
041B7C 10 B2       0055*      djnz @move_loop ; loop until we've checked all the records
041B7E             0056*  ; reset all just spawned flags
041B7E FD 21 93 4E 0057*      ld iy,table_base
       04          
041B83 06 10       0058*      ld b,table_max_records
041B85             0059*  @reset_just_spawned:
041B85 C5          0060*      push bc ; back up loop counter
041B86 FD CB 16 7E 0061*      bit 7,(iy+sprite_type) ; check if just spawned
041B8A CA A7 1B 04 0062*      jp z,@F
041B8E FD CB 16 BE 0063*      res 7,(iy+sprite_type) ; clear just spawned flag
041B92 FD 7E 00    0064*      ld a,(iy+sprite_id)
041B95 CD 82 19 04 0065*      call vdu_sprite_select
041B99 FD 07 01    0066*      ld bc,(iy+sprite_x)
041B9C FD 17 04    0067*      ld de,(iy+sprite_y)
041B9F             0068*  
041B9F             0069*      ; CALL DEBUG_PRINT
041B9F             0070*  
041B9F CD 4E 1A 04 0071*      call vdu_sprite_move_abs168
041BA3 CD F8 19 04 0072*      call vdu_sprite_show
041BA7             0073*  @@:
041BA7 ED 33 28    0074*      lea iy,iy+table_bytes_per_record
041BAA C1          0075*      pop bc ; get back loop counter
041BAB 10 D8       0076*      djnz @reset_just_spawned
041BAD             0077*  ; and done
041BAD C9          0078*      ret
041BAE             0079*  
041BAE             0080*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041BAE             0081*  ; ; each sprite in the table must have one of these defined
041BAE             0082*  ; ; but they need not be unique to a particular sprite
041BAE             0083*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041BAE             0084*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041BAE             0085*  ; ; but they can call anything they want between those two endpoints
041BAE             0086*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041BAE             0087*  
041BAE             0088*  ; move_nop: ; does nothing but burn a few cycles changing the PC
041BAE             0089*  ;     ret
041BAE             0090*  
041BAE             0091*  ; move_explosion:
041BAE             0092*  ;     call animate_explosion
041BAE             0093*  ;     ret
041BAE             0094*  
041BAE             0095*  check_enemy_collisions:
041BAE             0096*  ; check what we collide with
041BAE FD 7E 1D    0097*      ld a,(iy+sprite_collisions)
041BB1 F5          0098*      push af ; save collision flags
041BB2 E6 01       0099*      and collides_with_player ; check for collisions with player
041BB4 C4 E1 1B 04 0100*      call nz,check_enemy_collision_player
041BB8 F1          0101*      pop af ; restore collision flags
041BB9 E6 02       0102*      and collides_with_laser ; check for collisions with laser
041BBB C4 C0 1B 04 0103*      call nz,check_enemy_collision_laser
041BBF C9          0104*      ret
041BC0             0105*  check_enemy_collision_laser: ; check for collisions with laser
041BC0 DD 21 B3 49 0106*      ld ix,laser_start_variables
       04          
041BC5 DD CB 1D 76 0107*      bit sprite_alive,(ix+sprite_collisions)
041BC9 C8          0108*      ret z ; laser dead, nothing to do
041BCA CD EC 1A 04 0109*      call check_collision
041BCE F0          0110*      ret p ; no collision
041BCF DD 21 B3 49 0111*      ld ix,laser_start_variables
       04          
041BD4 DD CB 1D FE 0112*      set sprite_just_died,(ix+sprite_collisions)
041BD8 DD CB 1D F6 0113*      set sprite_alive,(ix+sprite_collisions)
041BDC CD 1C 1C 04 0114*      call enemy_kill
041BE0 C9          0115*      ret
041BE1             0116*  check_enemy_collision_player: ; check for collisions with player
041BE1 DD 21 66 4D 0117*      ld ix,player_start_variables
       04          
041BE6 DD CB 1D 76 0118*      bit sprite_alive,(ix+sprite_collisions)
041BEA C8          0119*      ret z ; player dead, no collision
041BEB CD EC 1A 04 0120*      call check_collision
041BEF F0          0121*      ret p ; no collision
041BF0 CD 1C 1C 04 0122*      call enemy_kill
041BF4 C9          0123*      ret
041BF5             0124*  ; end check_enemy_collisions
041BF5             0125*  
041BF5             0126*  ; move_fireballs:
041BF5             0127*  ;     call move_sprite ; move sprite
041BF5             0128*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
041BF5             0129*  ;     and a ; if zero we're still within screen bounds
041BF5             0130*  ;     jp z,move_fireballs_alive
041BF5             0131*  ; ; otherwise kill sprite
041BF5             0132*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
041BF5             0133*  ;     ld (iy+sprite_collisions),a
041BF5             0134*  ;     ret
041BF5             0135*  ; move_fireballs_alive:
041BF5             0136*  ;     ld a,(sprite_animation_timer)
041BF5             0137*  ;     dec a
041BF5             0138*  ;     ld (sprite_animation_timer),a
041BF5             0139*  ;     jp nz,move_fireballs_draw
041BF5             0140*  ;     ld a,(sprite_animation)
041BF5             0141*  ;     xor %1
041BF5             0142*  ;     ld (sprite_animation),a
041BF5             0143*  ;     ld a,6 ; 1/10th of a second timer
041BF5             0144*  ;     ld (sprite_animation_timer),a
041BF5             0145*  ;     ; fall through
041BF5             0146*  
041BF5             0147*  ; move_fireballs_draw:
041BF5             0148*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BF5             0149*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041BF5             0150*  ;     call check_collisions
041BF5             0151*  ;     ret
041BF5             0152*  
041BF5             0153*  ; compute orientation to player
041BF5             0154*  ; based on relative positions
041BF5             0155*  ; returns: h.l 16.8 fixed angle256 to player
041BF5             0156*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
041BF5             0157*  ;    representing delta-x/y *to* target respectively
041BF5             0158*  orientation_to_player:
041BF5 FD 2A 13 51 0159*      ld iy,(table_pointer)
       04          
041BFA FD 07 01    0160*      ld bc,(iy+sprite_x)
041BFD FD 17 04    0161*      ld de,(iy+sprite_y)
041C00 DD 2A 67 4D 0162*      ld ix,(player_x)
       04          
041C05 FD 2A 6A 4D 0163*      ld iy,(player_y)
       04          
041C0A CD 97 09 04 0164*      call dxy168
041C0E C5          0165*      push bc
041C0F D5          0166*      push de
041C10 CD F3 09 04 0167*      call atan2_168fast
041C14 D1          0168*      pop de
041C15 C1          0169*      pop bc
041C16 FD 2A 13 51 0170*      ld iy,(table_pointer)
       04          
041C1B C9          0171*      ret
041C1C             0172*  
041C1C             0173*  ; this routine vanquishes the enemy sprite
041C1C             0174*  ; and replaces it with an animated explosion
041C1C             0175*  ; we jump here instead of call because
041C1C             0176*  ; we want to return to differing locations in the loop
041C1C             0177*  ; depending on whether we're still sploding
041C1C             0178*  ; destroys: everything except index registers
041C1C             0179*  ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
041C1C             0180*  enemy_kill:
041C1C FD 2A 13 51 0181*      ld iy,(table_pointer)
       04          
041C21             0182*  ; tally up points
041C21 2A 5C 4D 04 0183*      ld hl,(player_score)
041C25 01 00 00 00 0184*      ld bc,0 ; clear bcu
041C29 FD 4E 26    0185*      ld c,(iy+sprite_points)
041C2C 09          0186*      add hl,bc
041C2D 22 5C 4D 04 0187*      ld (player_score),hl
041C31             0188*  ; ; initialize explosion
041C31             0189*  ; init_explosion:
041C31             0190*  ;     ld hl,explosion
041C31             0191*  ;     ld (sprite_base_bufferId),hl
041C31             0192*  ;     ld hl,move_explosion
041C31             0193*  ;     ld (sprite_move_program),hl
041C31             0194*  ;     ld a,%00000000 ; collides with nothing
041C31             0195*  ;     ld (iy+sprite_collisions),a
041C31             0196*  ;     ld hl,0 ; north
041C31             0197*  ;     ld (sprite_heading),hl
041C31             0198*  ;     ld a,0x04 ; will decrement to 03
041C31             0199*  ;     ld (sprite_animation),a
041C31             0200*  ;     ld a,0x07 ; 7/60th of a second timer
041C31             0201*  ;     ld (sprite_animation_timer),a
041C31             0202*  ;     xor a
041C31             0203*  ;     ld (sprite_move_timer),a
041C31             0204*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041C31             0205*  ; ; fall through to next_explosion
041C31             0206*  ; next_explosion:
041C31             0207*  ;     ld a,(sprite_animation)
041C31             0208*  ;     dec a ; if rolled negative from zero,we're done sploding
041C31             0209*  ;     jp m,done_explosion
041C31             0210*  ;     ld (sprite_animation),a
041C31             0211*  ;     ld a,0x7 ; 7/60th of a second timer
041C31             0212*  ;     ld (sprite_animation_timer),a
041C31             0213*  ; ; fall through to animate_explosion
041C31             0214*  ; animate_explosion:
041C31             0215*  ;     ld hl,sprite_y+1
041C31             0216*  ;     inc (hl) ; move explosion down 1 pixel
041C31             0217*  ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
041C31             0218*  ;     ld hl,sprite_animation_timer
041C31             0219*  ;     dec (hl) ; if timer is zero,we do next animation
041C31             0220*  ;     jp z,next_explosion
041C31             0221*  ;     ;otherwise we fall through to draw the current one
041C31             0222*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041C31             0223*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041C31             0224*  ;     ret ; now we go back to caller
041C31             0225*  ; done_explosion:
041C31 FD CB 1D FE 0226*      set sprite_just_died,(iy+sprite_collisions)
041C35 3E FF       0227*      ld a,-1 ; return -1 to indicate enemy died
041C37 C9          0228*      ret ; now we go back to caller
041C38             0229*  ; end enemy_kill
041C38             0045       include "enemy_seeker.inc"
041C38             0001*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041C38             0002*  
041C38             0003*  seeker_defaults:
041C38 01          0004*      db enemy_seeker	        ; type
041C39 0B 01 00    0005*      dl BUF_SEEKER_000	    ; base_bufferId
041C3C 73 1C 04    0006*      dl move_enemy_seeker	; move_program
041C3F 03          0007*      db collides_with_laser | collides_with_player ; collisions
041C40 10          0008*      db 16	                ; dim_x
041C41 10          0009*      db 16                   ; dim_y
041C42 20          0010*      db 32                   ; num_orientations
041C43 01          0011*      db 1                    ; num_animations
041C44 00          0012*      db 0	                ; animation
041C45 00          0013*      db 0	                ; animation_timer
041C46 01          0014*      db 1	                ; move_timer
041C47 00          0015*      db 0	                ; move_step
041C48 0A          0016*      db 10	                ; points
041C49 02          0017*      db 2	                ; shield_damage
041C4A             0018*  
041C4A             0019*  enemy_spawn_seeker:
041C4A FD 21 38 1C 0020*      ld iy,seeker_defaults
       04          
041C4F CD 7A 52 04 0021*      call spawn_sprite_from_sprite
041C53 D0          0022*      ret nc ; no carry means no free sprite slots, so we go home
041C54             0023*  ; ix comes back with the pointer to the new sprite variables
041C54             0024*  ; a comes back with the spriteId of the new sprite
041C54             0025*  ; initialize the new sprite
041C54 DD 77 00    0026*      ld (ix+sprite_id),a
041C57 06 20       0027*      ld b,32 ; number of frames
041C59 DD 27 17    0028*      ld hl,(ix+sprite_base_bufferId)
041C5C CD C6 52 04 0029*      call sprite_load_frames
041C60             0030*  ; copy coordinates of active sprite to new sprite
041C60 FD 2A 13 51 0031*      ld iy,(table_pointer)
       04          
041C65 E6 01       0032*      and %00000001 ; 50/50 chance of moving left or right on spanw
041C67 FD 77 25    0033*      ld (iy+sprite_move_step),a
041C6A             0034*  ; update the new sprite's position and make it visible
041C6A CD 4E 1A 04 0035*      call vdu_sprite_move_abs168
041C6E CD F8 19 04 0036*      call vdu_sprite_show
041C72 C9          0037*      ret
041C73             0038*  ; end enemy_spawn_seeker
041C73             0039*  
041C73             0040*  move_enemy_seeker:
041C73             0041*  ; run the movement program for the seeker enemy
041C73 CD 7B 1C 04 0042*      call en_nav_seek_zag
041C77 C3 AE 1B 04 0043*      jp check_enemy_collisions
041C7B             0044*  ; end move_enemy_seeker
041C7B             0045*  
041C7B             0046*  ; contains the logic for how to move the enemy
041C7B             0047*  ; and then does the moving
041C7B             0048*  ; inputs: a fully-populated active sprite table
041C7B             0049*  ;         player position variables
041C7B             0050*  ; destroys: everything except index registers
041C7B             0051*  ; outputs: moving enemies
041C7B             0052*  en_nav_seek_zag:
041C7B             0053*  ; set velocity and orientation by player's relative location
041C7B             0054*  ; move enemies y-axis
041C7B             0055*  ; where is player relative to us?
041C7B CD F5 1B 04 0056*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041C7F             0057*  ; is player above or below us?
041C7F ED 53 B5 05 0058*      ld (ude),de ; dy
       04          
041C84 3A B7 05 04 0059*      ld a,(ude+2) ; deu
041C88 17          0060*      rla ; shift sign bit into carry
041C89 D2 B5 1C 04 0061*      jp nc,@zig_zag ; player is below,evade
041C8D             0062*  ; player is even or above,so home in on current heading
041C8D FD 2F 10    0063*      ld (iy+sprite_heading),hl ; save sprite heading
041C90             0064*  ; fall through to @compute_velocities
041C90             0065*  @compute_velocities:
041C90 CD 62 52 04 0066*      call sprite_compute_velocities
041C94             0067*  ; change the animation frame to match heading
041C94 FD 7E 11    0068*      ld a,(iy+sprite_heading+1) ; we want the integer portion
041C97 CB 3F       0069*      srl a ; divide integer portion by 8
041C99 CB 3F       0070*      srl a
041C9B CB 3F       0071*      srl a
041C9D CD E5 19 04 0072*      call vdu_sprite_select_frame
041CA1 C3 C1 51 04 0073*      jp move_sprite ; will return to caller from there
041CA5             0074*  @zig_zag_start:
041CA5 FD 2A 13 51 0075*      ld iy,(table_pointer)
       04          
041CAA CD 59 07 04 0076*      call rand_8
041CAE E6 3F       0077*      and %00111111 ; limit it to 64
041CB0 CB DF       0078*      set 3,a ; make sure it's at least 8
041CB2 FD 77 24    0079*      ld (iy+sprite_move_timer),a ; store it
041CB5             0080*      ; fall through to @zig_zag
041CB5             0081*  @zig_zag:
041CB5 FD 7E 24    0082*      ld a,(iy+sprite_move_timer)
041CB8 3D          0083*      dec a
041CB9 FD 77 24    0084*      ld (iy+sprite_move_timer),a
041CBC C2 E2 1C 04 0085*      jp nz,@zig_zag_no_switch
041CC0             0086*      ; otherwise flip direction and restart timer
041CC0 FD 7E 25    0087*      ld a,(iy+sprite_move_step)
041CC3 EE 01       0088*      xor %1 ; flips bit one
041CC5 FD 77 25    0089*      ld (iy+sprite_move_step),a ; store it
041CC8 C2 D7 1C 04 0090*      jp nz,@F ; zag right
041CCC             0091*  ;otherwise zag left
041CCC 21 00 A0 00 0092*      ld hl,160*256; southwest heading
041CD0 FD 2F 10    0093*      ld (iy+sprite_heading),hl ; save sprite heading
041CD3 C3 A5 1C 04 0094*      jp @zig_zag_start
041CD7             0095*  @@: ; zag right
041CD7 21 00 60 00 0096*      ld hl,96*256; southeast heading
041CDB FD 2F 10    0097*      ld (iy+sprite_heading),hl ; save sprite heading
041CDE C3 A5 1C 04 0098*      jp @zig_zag_start
041CE2             0099*  @zig_zag_no_switch:
041CE2             0100*      ; ld a,(sprite_orientation)
041CE2 FD 27 10    0101*      ld hl,(iy+sprite_heading)
041CE5 C3 90 1C 04 0102*      jp @compute_velocities
041CE9             0103*  ; end en_nav_seek_zag
041CE9             0046       include "fonts_list.inc"
041CE9             0001*  ; Generated by asm_config_editor.py
041CE9             0002*  font_list_record_size: equ 12
041CE9             0003*  font_list_width: equ 0
041CE9             0004*  font_list_height: equ 3
041CE9             0005*  font_list_bufferId: equ 6
041CE9             0006*  font_list_filename: equ 9
041CE9             0007*  
041CE9             0008*  num_fonts: equ 18
041CE9             0009*  
041CE9             0010*  ; Index list:
041CE9             0011*  amiga_forever_16x24: equ 64000
041CE9             0012*  amiga_forever_8x16: equ 64001
041CE9             0013*  amiga_forever_8x8: equ 64002
041CE9             0014*  computer_pixel_7_10x15: equ 64003
041CE9             0015*  computer_pixel_7_10x24: equ 64004
041CE9             0016*  computer_pixel_7_8x16: equ 64005
041CE9             0017*  Lat2_Terminus12x6_6x12: equ 64006
041CE9             0018*  Lat2_TerminusBold14_8x14: equ 64007
041CE9             0019*  Lat2_VGA14_8x14: equ 64008
041CE9             0020*  Lat2_VGA16_8x16: equ 64009
041CE9             0021*  Lat2_VGA8_8x8: equ 64010
041CE9             0022*  Lat7_Fixed13_8x13: equ 64011
041CE9             0023*  Lat7_Terminus12x6_6x12: equ 64012
041CE9             0024*  Lat7_TerminusBold16_8x16: equ 64013
041CE9             0025*  Lat7_VGA14_8x14: equ 64014
041CE9             0026*  Lat7_VGA8x8: equ 64015
041CE9             0027*  scriptorium_12x14: equ 64016
041CE9             0028*  Squarewave_Bold_8x12: equ 64017
041CE9             0029*  
041CE9             0030*  font_list: ; width; height; bufferId; filename;:
041CE9 10 00 00 18 0031*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 C1 1D 04 
041CF5 08 00 00 10 0032*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 E0 1D 04 
041D01 08 00 00 08 0033*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 FE 1D 04 
041D0D 0A 00 00 0F 0034*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 1B 1E 04 
041D19 0A 00 00 18 0035*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 3D 1E 04 
041D25 08 00 00 10 0036*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 5F 1E 04 
041D31 06 00 00 0C 0037*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 80 1E 04 
041D3D 08 00 00 0E 0038*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 A2 1E 04 
041D49 08 00 00 0E 0039*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 C6 1E 04 
041D55 08 00 00 10 0040*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 E1 1E 04 
041D61 08 00 00 08 0041*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 FC 1E 04 
041D6D 08 00 00 0D 0042*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 15 1F 04 
041D79 06 00 00 0C 0043*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 32 1F 04 
041D85 08 00 00 10 0044*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 54 1F 04 
041D91 08 00 00 0E 0045*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 78 1F 04 
041D9D 08 00 00 08 0046*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 93 1F 04 
041DA9 0C 00 00 0E 0047*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 AC 1F 04 
041DB5 08 00 00 0C 0048*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 C9 1F 04 
041DC1             0049*  
041DC1             0050*  ; files_list: ; filename:
041DC1 66 6F 6E 74 0051*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
041DE0 66 6F 6E 74 0052*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041DFE 66 6F 6E 74 0053*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041E1B 66 6F 6E 74 0054*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
041E3D 66 6F 6E 74 0055*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
041E5F 66 6F 6E 74 0056*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
041E80 66 6F 6E 74 0057*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041EA2 66 6F 6E 74 0058*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041EC6 66 6F 6E 74 0059*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041EE1 66 6F 6E 74 0060*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041EFC 66 6F 6E 74 0061*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041F15 66 6F 6E 74 0062*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
041F32 66 6F 6E 74 0063*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041F54 66 6F 6E 74 0064*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
041F78 66 6F 6E 74 0065*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041F93 66 6F 6E 74 0066*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041FAC 66 6F 6E 74 0067*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
041FC9 66 6F 6E 74 0068*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
041FE9             0047       include "images_tiles_dg.inc"
041FE9             0001*  ; Generated by tiles_dg.py
041FE9             0002*  
041FE9             0003*  tiles_dg_num_images: equ 184
041FE9             0004*  
041FE9             0005*  ; bufferIds:
041FE9             0006*  
041FE9             0007*  
041FE9             0008*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
041FE9 01 00 00 10 0009*  	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       D9 2C 04 00 
       02 00       
041FFB 01 00 00 10 0010*  	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       EE 2C 04 01 
       02 00       
04200D 01 00 00 10 0011*  	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       03 2D 04 02 
       02 00       
04201F 01 00 00 10 0012*  	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       18 2D 04 03 
       02 00       
042031 01 00 00 10 0013*  	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       2D 2D 04 04 
       02 00       
042043 01 00 00 10 0014*  	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       42 2D 04 05 
       02 00       
042055 01 00 00 10 0015*  	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       57 2D 04 06 
       02 00       
042067 01 00 00 10 0016*  	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       6C 2D 04 07 
       02 00       
042079 01 00 00 10 0017*  	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       81 2D 04 08 
       02 00       
04208B 01 00 00 10 0018*  	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       96 2D 04 09 
       02 00       
04209D 01 00 00 10 0019*  	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       AB 2D 04 0A 
       02 00       
0420AF 01 00 00 10 0020*  	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       C0 2D 04 0B 
       02 00       
0420C1 01 00 00 10 0021*  	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       D5 2D 04 0C 
       02 00       
0420D3 01 00 00 10 0022*  	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       EA 2D 04 0D 
       02 00       
0420E5 01 00 00 10 0023*  	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       FF 2D 04 0E 
       02 00       
0420F7 01 00 00 10 0024*  	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       14 2E 04 0F 
       02 00       
042109 01 00 00 10 0025*  	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       29 2E 04 10 
       02 00       
04211B 01 00 00 10 0026*  	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       3E 2E 04 19 
       02 00       
04212D 01 00 00 10 0027*  	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       53 2E 04 1A 
       02 00       
04213F 01 00 00 10 0028*  	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       68 2E 04 1B 
       02 00       
042151 01 00 00 10 0029*  	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       7D 2E 04 1C 
       02 00       
042163 01 00 00 10 0030*  	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       92 2E 04 1D 
       02 00       
042175 01 00 00 10 0031*  	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       A7 2E 04 1E 
       02 00       
042187 01 00 00 10 0032*  	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       BC 2E 04 1F 
       02 00       
042199 01 00 00 10 0033*  	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       D1 2E 04 20 
       02 00       
0421AB 01 00 00 10 0034*  	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       E6 2E 04 21 
       02 00       
0421BD 01 00 00 10 0035*  	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       FB 2E 04 22 
       02 00       
0421CF 01 00 00 10 0036*  	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       10 2F 04 23 
       02 00       
0421E1 01 00 00 10 0037*  	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       25 2F 04 24 
       02 00       
0421F3 01 00 00 10 0038*  	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       3A 2F 04 25 
       02 00       
042205 01 00 00 10 0039*  	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       4F 2F 04 26 
       02 00       
042217 01 00 00 10 0040*  	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       64 2F 04 27 
       02 00       
042229 01 00 00 10 0041*  	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       79 2F 04 28 
       02 00       
04223B 01 00 00 10 0042*  	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       8E 2F 04 31 
       02 00       
04224D 01 00 00 10 0043*  	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       A3 2F 04 32 
       02 00       
04225F 01 00 00 10 0044*  	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       B8 2F 04 33 
       02 00       
042271 01 00 00 10 0045*  	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       CD 2F 04 34 
       02 00       
042283 01 00 00 10 0046*  	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       E2 2F 04 35 
       02 00       
042295 01 00 00 10 0047*  	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       F7 2F 04 36 
       02 00       
0422A7 01 00 00 10 0048*  	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       0C 30 04 37 
       02 00       
0422B9 01 00 00 10 0049*  	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       21 30 04 38 
       02 00       
0422CB 01 00 00 10 0050*  	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       36 30 04 39 
       02 00       
0422DD 01 00 00 10 0051*  	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       4B 30 04 3A 
       02 00       
0422EF 01 00 00 10 0052*  	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       60 30 04 3B 
       02 00       
042301 01 00 00 10 0053*  	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       75 30 04 41 
       02 00       
042313 01 00 00 10 0054*  	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       8A 30 04 42 
       02 00       
042325 01 00 00 10 0055*  	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       9F 30 04 43 
       02 00       
042337 01 00 00 10 0056*  	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       B4 30 04 44 
       02 00       
042349 01 00 00 10 0057*  	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       C9 30 04 45 
       02 00       
04235B 01 00 00 10 0058*  	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       DE 30 04 46 
       02 00       
04236D 01 00 00 10 0059*  	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       F3 30 04 47 
       02 00       
04237F 01 00 00 10 0060*  	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       08 31 04 48 
       02 00       
042391 01 00 00 10 0061*  	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       1D 31 04 49 
       02 00       
0423A3 01 00 00 10 0062*  	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       32 31 04 4A 
       02 00       
0423B5 01 00 00 10 0063*  	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       47 31 04 4B 
       02 00       
0423C7 01 00 00 10 0064*  	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       5C 31 04 51 
       02 00       
0423D9 01 00 00 10 0065*  	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       71 31 04 52 
       02 00       
0423EB 01 00 00 10 0066*  	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       86 31 04 53 
       02 00       
0423FD 01 00 00 10 0067*  	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       9B 31 04 54 
       02 00       
04240F 01 00 00 10 0068*  	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       B0 31 04 55 
       02 00       
042421 01 00 00 10 0069*  	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       C5 31 04 56 
       02 00       
042433 01 00 00 10 0070*  	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       DA 31 04 57 
       02 00       
042445 01 00 00 10 0071*  	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       EF 31 04 58 
       02 00       
042457 01 00 00 10 0072*  	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       04 32 04 59 
       02 00       
042469 01 00 00 10 0073*  	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       19 32 04 5A 
       02 00       
04247B 01 00 00 10 0074*  	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       2E 32 04 5B 
       02 00       
04248D 01 00 00 10 0075*  	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       43 32 04 61 
       02 00       
04249F 01 00 00 10 0076*  	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       58 32 04 62 
       02 00       
0424B1 01 00 00 10 0077*  	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       6D 32 04 63 
       02 00       
0424C3 01 00 00 10 0078*  	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       82 32 04 64 
       02 00       
0424D5 01 00 00 10 0079*  	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       97 32 04 65 
       02 00       
0424E7 01 00 00 10 0080*  	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       AC 32 04 66 
       02 00       
0424F9 01 00 00 10 0081*  	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       C1 32 04 67 
       02 00       
04250B 01 00 00 10 0082*  	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       D6 32 04 68 
       02 00       
04251D 01 00 00 10 0083*  	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       EB 32 04 69 
       02 00       
04252F 01 00 00 10 0084*  	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       00 33 04 6A 
       02 00       
042541 01 00 00 10 0085*  	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       15 33 04 6B 
       02 00       
042553 01 00 00 10 0086*  	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       2A 33 04 6C 
       02 00       
042565 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       3F 33 04 71 
       02 00       
042577 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       54 33 04 72 
       02 00       
042589 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       69 33 04 73 
       02 00       
04259B 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       7E 33 04 74 
       02 00       
0425AD 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       93 33 04 75 
       02 00       
0425BF 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       A8 33 04 76 
       02 00       
0425D1 01 00 00 10 0093*  	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       BD 33 04 77 
       02 00       
0425E3 01 00 00 10 0094*  	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       D2 33 04 78 
       02 00       
0425F5 01 00 00 10 0095*  	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       E7 33 04 79 
       02 00       
042607 01 00 00 10 0096*  	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       FC 33 04 7A 
       02 00       
042619 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       11 34 04 7B 
       02 00       
04262B 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       26 34 04 81 
       02 00       
04263D 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       3B 34 04 82 
       02 00       
04264F 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       50 34 04 83 
       02 00       
042661 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       65 34 04 84 
       02 00       
042673 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       7A 34 04 85 
       02 00       
042685 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       8F 34 04 86 
       02 00       
042697 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       A4 34 04 87 
       02 00       
0426A9 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       B9 34 04 88 
       02 00       
0426BB 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       CE 34 04 89 
       02 00       
0426CD 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       E3 34 04 8A 
       02 00       
0426DF 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       F8 34 04 8B 
       02 00       
0426F1 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       0D 35 04 8C 
       02 00       
042703 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       22 35 04 8D 
       02 00       
042715 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       37 35 04 8E 
       02 00       
042727 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       4C 35 04 91 
       02 00       
042739 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       61 35 04 92 
       02 00       
04274B 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       76 35 04 93 
       02 00       
04275D 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       8B 35 04 94 
       02 00       
04276F 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       A0 35 04 95 
       02 00       
042781 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       B5 35 04 96 
       02 00       
042793 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       CA 35 04 97 
       02 00       
0427A5 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       DF 35 04 98 
       02 00       
0427B7 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       F4 35 04 99 
       02 00       
0427C9 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       09 36 04 9A 
       02 00       
0427DB 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       1E 36 04 9B 
       02 00       
0427ED 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       33 36 04 9C 
       02 00       
0427FF 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       48 36 04 9D 
       02 00       
042811 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       5D 36 04 9E 
       02 00       
042823 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       72 36 04 A1 
       02 00       
042835 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       87 36 04 A2 
       02 00       
042847 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       9C 36 04 A3 
       02 00       
042859 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       B1 36 04 A4 
       02 00       
04286B 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       C6 36 04 A5 
       02 00       
04287D 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       DB 36 04 A6 
       02 00       
04288F 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       F0 36 04 A7 
       02 00       
0428A1 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       05 37 04 A8 
       02 00       
0428B3 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       1A 37 04 A9 
       02 00       
0428C5 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       2F 37 04 AA 
       02 00       
0428D7 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       44 37 04 AB 
       02 00       
0428E9 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       59 37 04 AC 
       02 00       
0428FB 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       6E 37 04 B1 
       02 00       
04290D 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       83 37 04 B2 
       02 00       
04291F 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       98 37 04 B3 
       02 00       
042931 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       AD 37 04 B4 
       02 00       
042943 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       C2 37 04 B5 
       02 00       
042955 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       D7 37 04 B6 
       02 00       
042967 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       EC 37 04 B7 
       02 00       
042979 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       01 38 04 B8 
       02 00       
04298B 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       16 38 04 B9 
       02 00       
04299D 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       2B 38 04 BA 
       02 00       
0429AF 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       40 38 04 BB 
       02 00       
0429C1 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       55 38 04 BC 
       02 00       
0429D3 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       6A 38 04 C1 
       02 00       
0429E5 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       7F 38 04 C2 
       02 00       
0429F7 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       94 38 04 C3 
       02 00       
042A09 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       A9 38 04 C4 
       02 00       
042A1B 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       BE 38 04 C5 
       02 00       
042A2D 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       D3 38 04 C6 
       02 00       
042A3F 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       E8 38 04 C7 
       02 00       
042A51 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       FD 38 04 C8 
       02 00       
042A63 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       12 39 04 C9 
       02 00       
042A75 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       27 39 04 CA 
       02 00       
042A87 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       3C 39 04 CB 
       02 00       
042A99 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       51 39 04 CC 
       02 00       
042AAB 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       66 39 04 D1 
       02 00       
042ABD 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       7B 39 04 D2 
       02 00       
042ACF 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       90 39 04 D3 
       02 00       
042AE1 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       A5 39 04 D4 
       02 00       
042AF3 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       BA 39 04 D5 
       02 00       
042B05 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       CF 39 04 D6 
       02 00       
042B17 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       E4 39 04 D7 
       02 00       
042B29 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       F9 39 04 D8 
       02 00       
042B3B 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       0E 3A 04 D9 
       02 00       
042B4D 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       23 3A 04 DA 
       02 00       
042B5F 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       38 3A 04 DB 
       02 00       
042B71 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       4D 3A 04 DC 
       02 00       
042B83 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       62 3A 04 E1 
       02 00       
042B95 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       77 3A 04 E2 
       02 00       
042BA7 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       8C 3A 04 E3 
       02 00       
042BB9 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       A1 3A 04 E4 
       02 00       
042BCB 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       B6 3A 04 E5 
       02 00       
042BDD 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       CB 3A 04 E6 
       02 00       
042BEF 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       E0 3A 04 E7 
       02 00       
042C01 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       F5 3A 04 E8 
       02 00       
042C13 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       0A 3B 04 E9 
       02 00       
042C25 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       1F 3B 04 EA 
       02 00       
042C37 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       34 3B 04 EB 
       02 00       
042C49 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       49 3B 04 EC 
       02 00       
042C5B 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       5E 3B 04 F1 
       02 00       
042C6D 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       73 3B 04 F2 
       02 00       
042C7F 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       88 3B 04 F3 
       02 00       
042C91 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       9D 3B 04 F5 
       02 00       
042CA3 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       B2 3B 04 F6 
       02 00       
042CB5 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       C7 3B 04 F7 
       02 00       
042CC7 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       DC 3B 04 F8 
       02 00       
042CD9             0193*  
042CD9             0194*  tiles_dg_files_list: ; filename:
042CD9 74 69 6C 65 0195*  fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042CEE 74 69 6C 65 0196*  fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
042D03 74 69 6C 65 0197*  fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
042D18 74 69 6C 65 0198*  fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
042D2D 74 69 6C 65 0199*  fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
042D42 74 69 6C 65 0200*  fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
042D57 74 69 6C 65 0201*  fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
042D6C 74 69 6C 65 0202*  fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
042D81 74 69 6C 65 0203*  fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
042D96 74 69 6C 65 0204*  fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
042DAB 74 69 6C 65 0205*  fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
042DC0 74 69 6C 65 0206*  fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
042DD5 74 69 6C 65 0207*  fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
042DEA 74 69 6C 65 0208*  fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
042DFF 74 69 6C 65 0209*  fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
042E14 74 69 6C 65 0210*  fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
042E29 74 69 6C 65 0211*  fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042E3E 74 69 6C 65 0212*  fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
042E53 74 69 6C 65 0213*  fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
042E68 74 69 6C 65 0214*  fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
042E7D 74 69 6C 65 0215*  fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
042E92 74 69 6C 65 0216*  fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
042EA7 74 69 6C 65 0217*  fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
042EBC 74 69 6C 65 0218*  fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
042ED1 74 69 6C 65 0219*  fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
042EE6 74 69 6C 65 0220*  fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
042EFB 74 69 6C 65 0221*  fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
042F10 74 69 6C 65 0222*  fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
042F25 74 69 6C 65 0223*  fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
042F3A 74 69 6C 65 0224*  fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
042F4F 74 69 6C 65 0225*  fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
042F64 74 69 6C 65 0226*  fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
042F79 74 69 6C 65 0227*  fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042F8E 74 69 6C 65 0228*  fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
042FA3 74 69 6C 65 0229*  fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
042FB8 74 69 6C 65 0230*  fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
042FCD 74 69 6C 65 0231*  fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
042FE2 74 69 6C 65 0232*  fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
042FF7 74 69 6C 65 0233*  fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
04300C 74 69 6C 65 0234*  fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043021 74 69 6C 65 0235*  fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043036 74 69 6C 65 0236*  fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
04304B 74 69 6C 65 0237*  fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043060 74 69 6C 65 0238*  fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043075 74 69 6C 65 0239*  fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
04308A 74 69 6C 65 0240*  fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
04309F 74 69 6C 65 0241*  fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0430B4 74 69 6C 65 0242*  fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0430C9 74 69 6C 65 0243*  fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0430DE 74 69 6C 65 0244*  fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0430F3 74 69 6C 65 0245*  fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043108 74 69 6C 65 0246*  fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04311D 74 69 6C 65 0247*  fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043132 74 69 6C 65 0248*  fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043147 74 69 6C 65 0249*  fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
04315C 74 69 6C 65 0250*  fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043171 74 69 6C 65 0251*  fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043186 74 69 6C 65 0252*  fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
04319B 74 69 6C 65 0253*  fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0431B0 74 69 6C 65 0254*  fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0431C5 74 69 6C 65 0255*  fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0431DA 74 69 6C 65 0256*  fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0431EF 74 69 6C 65 0257*  fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043204 74 69 6C 65 0258*  fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043219 74 69 6C 65 0259*  fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
04322E 74 69 6C 65 0260*  fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043243 74 69 6C 65 0261*  fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043258 74 69 6C 65 0262*  fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
04326D 74 69 6C 65 0263*  fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043282 74 69 6C 65 0264*  fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043297 74 69 6C 65 0265*  fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0432AC 74 69 6C 65 0266*  fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0432C1 74 69 6C 65 0267*  fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0432D6 74 69 6C 65 0268*  fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0432EB 74 69 6C 65 0269*  fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043300 74 69 6C 65 0270*  fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043315 74 69 6C 65 0271*  fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
04332A 74 69 6C 65 0272*  fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
04333F 74 69 6C 65 0273*  fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043354 74 69 6C 65 0274*  fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043369 74 69 6C 65 0275*  fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
04337E 74 69 6C 65 0276*  fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043393 74 69 6C 65 0277*  fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0433A8 74 69 6C 65 0278*  fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0433BD 74 69 6C 65 0279*  fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0433D2 74 69 6C 65 0280*  fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0433E7 74 69 6C 65 0281*  fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
0433FC 74 69 6C 65 0282*  fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043411 74 69 6C 65 0283*  fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043426 74 69 6C 65 0284*  fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
04343B 74 69 6C 65 0285*  fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043450 74 69 6C 65 0286*  fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043465 74 69 6C 65 0287*  fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
04347A 74 69 6C 65 0288*  fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
04348F 74 69 6C 65 0289*  fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0434A4 74 69 6C 65 0290*  fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0434B9 74 69 6C 65 0291*  fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0434CE 74 69 6C 65 0292*  fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0434E3 74 69 6C 65 0293*  fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
0434F8 74 69 6C 65 0294*  fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
04350D 74 69 6C 65 0295*  fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043522 74 69 6C 65 0296*  fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
043537 74 69 6C 65 0297*  fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
04354C 74 69 6C 65 0298*  fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043561 74 69 6C 65 0299*  fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043576 74 69 6C 65 0300*  fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
04358B 74 69 6C 65 0301*  fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0435A0 74 69 6C 65 0302*  fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
0435B5 74 69 6C 65 0303*  fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
0435CA 74 69 6C 65 0304*  fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0435DF 74 69 6C 65 0305*  fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0435F4 74 69 6C 65 0306*  fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043609 74 69 6C 65 0307*  fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
04361E 74 69 6C 65 0308*  fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043633 74 69 6C 65 0309*  fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043648 74 69 6C 65 0310*  fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
04365D 74 69 6C 65 0311*  fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043672 74 69 6C 65 0312*  fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043687 74 69 6C 65 0313*  fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
04369C 74 69 6C 65 0314*  fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0436B1 74 69 6C 65 0315*  fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0436C6 74 69 6C 65 0316*  fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0436DB 74 69 6C 65 0317*  fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
0436F0 74 69 6C 65 0318*  fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043705 74 69 6C 65 0319*  fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04371A 74 69 6C 65 0320*  fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
04372F 74 69 6C 65 0321*  fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043744 74 69 6C 65 0322*  fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043759 74 69 6C 65 0323*  fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
04376E 74 69 6C 65 0324*  fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043783 74 69 6C 65 0325*  fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043798 74 69 6C 65 0326*  fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0437AD 74 69 6C 65 0327*  fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0437C2 74 69 6C 65 0328*  fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0437D7 74 69 6C 65 0329*  fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
0437EC 74 69 6C 65 0330*  fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043801 74 69 6C 65 0331*  fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043816 74 69 6C 65 0332*  fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
04382B 74 69 6C 65 0333*  fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043840 74 69 6C 65 0334*  fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043855 74 69 6C 65 0335*  fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
04386A 74 69 6C 65 0336*  fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
04387F 74 69 6C 65 0337*  fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043894 74 69 6C 65 0338*  fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0438A9 74 69 6C 65 0339*  fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0438BE 74 69 6C 65 0340*  fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0438D3 74 69 6C 65 0341*  fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0438E8 74 69 6C 65 0342*  fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
0438FD 74 69 6C 65 0343*  fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043912 74 69 6C 65 0344*  fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043927 74 69 6C 65 0345*  fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
04393C 74 69 6C 65 0346*  fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043951 74 69 6C 65 0347*  fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043966 74 69 6C 65 0348*  fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
04397B 74 69 6C 65 0349*  fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043990 74 69 6C 65 0350*  fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0439A5 74 69 6C 65 0351*  fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0439BA 74 69 6C 65 0352*  fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0439CF 74 69 6C 65 0353*  fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0439E4 74 69 6C 65 0354*  fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0439F9 74 69 6C 65 0355*  fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
043A0E 74 69 6C 65 0356*  fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
043A23 74 69 6C 65 0357*  fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
043A38 74 69 6C 65 0358*  fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043A4D 74 69 6C 65 0359*  fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043A62 74 69 6C 65 0360*  fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043A77 74 69 6C 65 0361*  fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
043A8C 74 69 6C 65 0362*  fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
043AA1 74 69 6C 65 0363*  fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
043AB6 74 69 6C 65 0364*  fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
043ACB 74 69 6C 65 0365*  fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
043AE0 74 69 6C 65 0366*  fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
043AF5 74 69 6C 65 0367*  fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
043B0A 74 69 6C 65 0368*  fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
043B1F 74 69 6C 65 0369*  fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
043B34 74 69 6C 65 0370*  fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
043B49 74 69 6C 65 0371*  fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
043B5E 74 69 6C 65 0372*  fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
043B73 74 69 6C 65 0373*  fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
043B88 74 69 6C 65 0374*  fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
043B9D 74 69 6C 65 0375*  fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
043BB2 74 69 6C 65 0376*  fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
043BC7 74 69 6C 65 0377*  fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
043BDC 74 69 6C 65 0378*  fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
043BF1             0048       ; include "images_tiles_xevious.inc"
043BF1             0049       include "images_sprites.inc"
043BF1             0001*  ; Generated by make_images.py
043BF1             0002*  
043BF1             0003*  sprites_num_images: equ 79
043BF1             0004*  
043BF1             0005*  ; buffer_ids:
043BF1             0006*  BUF_CRATER: equ 256
043BF1             0007*  BUF_EXPLOSION_A: equ 257
043BF1             0008*  BUF_EXPLOSION_B: equ 258
043BF1             0009*  BUF_EXPLOSION_C: equ 259
043BF1             0010*  BUF_EXPLOSION_D: equ 260
043BF1             0011*  BUF_EXPLOSION_E: equ 261
043BF1             0012*  BUF_FIREBALL_A: equ 262
043BF1             0013*  BUF_FIREBALL_B: equ 263
043BF1             0014*  BUF_LASER_A: equ 264
043BF1             0015*  BUF_LASER_B: equ 265
043BF1             0016*  BUF_PAD: equ 266
043BF1             0017*  BUF_SEEKER_000: equ 267
043BF1             0018*  BUF_SEEKER_008: equ 268
043BF1             0019*  BUF_SEEKER_016: equ 269
043BF1             0020*  BUF_SEEKER_024: equ 270
043BF1             0021*  BUF_SEEKER_032: equ 271
043BF1             0022*  BUF_SEEKER_040: equ 272
043BF1             0023*  BUF_SEEKER_048: equ 273
043BF1             0024*  BUF_SEEKER_056: equ 274
043BF1             0025*  BUF_SEEKER_064: equ 275
043BF1             0026*  BUF_SEEKER_072: equ 276
043BF1             0027*  BUF_SEEKER_080: equ 277
043BF1             0028*  BUF_SEEKER_088: equ 278
043BF1             0029*  BUF_SEEKER_096: equ 279
043BF1             0030*  BUF_SEEKER_104: equ 280
043BF1             0031*  BUF_SEEKER_112: equ 281
043BF1             0032*  BUF_SEEKER_120: equ 282
043BF1             0033*  BUF_SEEKER_128: equ 283
043BF1             0034*  BUF_SEEKER_136: equ 284
043BF1             0035*  BUF_SEEKER_144: equ 285
043BF1             0036*  BUF_SEEKER_152: equ 286
043BF1             0037*  BUF_SEEKER_160: equ 287
043BF1             0038*  BUF_SEEKER_168: equ 288
043BF1             0039*  BUF_SEEKER_176: equ 289
043BF1             0040*  BUF_SEEKER_184: equ 290
043BF1             0041*  BUF_SEEKER_192: equ 291
043BF1             0042*  BUF_SEEKER_200: equ 292
043BF1             0043*  BUF_SEEKER_208: equ 293
043BF1             0044*  BUF_SEEKER_216: equ 294
043BF1             0045*  BUF_SEEKER_224: equ 295
043BF1             0046*  BUF_SEEKER_232: equ 296
043BF1             0047*  BUF_SEEKER_240: equ 297
043BF1             0048*  BUF_SEEKER_248: equ 298
043BF1             0049*  BUF_SHIP_0L: equ 299
043BF1             0050*  BUF_SHIP_1C: equ 300
043BF1             0051*  BUF_SHIP_2R: equ 301
043BF1             0052*  BUF_SHIP_SMALL: equ 302
043BF1             0053*  BUF_TURRET_000: equ 303
043BF1             0054*  BUF_TURRET_008: equ 304
043BF1             0055*  BUF_TURRET_016: equ 305
043BF1             0056*  BUF_TURRET_024: equ 306
043BF1             0057*  BUF_TURRET_032: equ 307
043BF1             0058*  BUF_TURRET_040: equ 308
043BF1             0059*  BUF_TURRET_048: equ 309
043BF1             0060*  BUF_TURRET_056: equ 310
043BF1             0061*  BUF_TURRET_064: equ 311
043BF1             0062*  BUF_TURRET_072: equ 312
043BF1             0063*  BUF_TURRET_080: equ 313
043BF1             0064*  BUF_TURRET_088: equ 314
043BF1             0065*  BUF_TURRET_096: equ 315
043BF1             0066*  BUF_TURRET_104: equ 316
043BF1             0067*  BUF_TURRET_112: equ 317
043BF1             0068*  BUF_TURRET_120: equ 318
043BF1             0069*  BUF_TURRET_128: equ 319
043BF1             0070*  BUF_TURRET_136: equ 320
043BF1             0071*  BUF_TURRET_144: equ 321
043BF1             0072*  BUF_TURRET_152: equ 322
043BF1             0073*  BUF_TURRET_160: equ 323
043BF1             0074*  BUF_TURRET_168: equ 324
043BF1             0075*  BUF_TURRET_176: equ 325
043BF1             0076*  BUF_TURRET_184: equ 326
043BF1             0077*  BUF_TURRET_192: equ 327
043BF1             0078*  BUF_TURRET_200: equ 328
043BF1             0079*  BUF_TURRET_208: equ 329
043BF1             0080*  BUF_TURRET_216: equ 330
043BF1             0081*  BUF_TURRET_224: equ 331
043BF1             0082*  BUF_TURRET_232: equ 332
043BF1             0083*  BUF_TURRET_240: equ 333
043BF1             0084*  BUF_TURRET_248: equ 334
043BF1             0085*  
043BF1             0086*  sprites_image_list: ; type; width; height; size; filename; bufferId:
043BF1 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       7F 41 04 00 
       01 00       
043C03 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       94 41 04 01 
       01 00       
043C15 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       AE 41 04 02 
       01 00       
043C27 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       C8 41 04 03 
       01 00       
043C39 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       E2 41 04 04 
       01 00       
043C4B 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       FC 41 04 05 
       01 00       
043C5D 01 00 00 07 0093*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       16 42 04 06 
       01 00       
043C6F 01 00 00 07 0094*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       2F 42 04 07 
       01 00       
043C81 01 00 00 05 0095*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       48 42 04 08 
       01 00       
043C93 01 00 00 05 0096*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       5E 42 04 09 
       01 00       
043CA5 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       74 42 04 0A 
       01 00       
043CB7 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       86 42 04 0B 
       01 00       
043CC9 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       9F 42 04 0C 
       01 00       
043CDB 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       B8 42 04 0D 
       01 00       
043CED 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       D1 42 04 0E 
       01 00       
043CFF 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       EA 42 04 0F 
       01 00       
043D11 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       03 43 04 10 
       01 00       
043D23 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       1C 43 04 11 
       01 00       
043D35 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       35 43 04 12 
       01 00       
043D47 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       4E 43 04 13 
       01 00       
043D59 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       67 43 04 14 
       01 00       
043D6B 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       80 43 04 15 
       01 00       
043D7D 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       99 43 04 16 
       01 00       
043D8F 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       B2 43 04 17 
       01 00       
043DA1 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       CB 43 04 18 
       01 00       
043DB3 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       E4 43 04 19 
       01 00       
043DC5 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       FD 43 04 1A 
       01 00       
043DD7 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       16 44 04 1B 
       01 00       
043DE9 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       2F 44 04 1C 
       01 00       
043DFB 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       48 44 04 1D 
       01 00       
043E0D 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       61 44 04 1E 
       01 00       
043E1F 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       7A 44 04 1F 
       01 00       
043E31 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       93 44 04 20 
       01 00       
043E43 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       AC 44 04 21 
       01 00       
043E55 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       C5 44 04 22 
       01 00       
043E67 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       DE 44 04 23 
       01 00       
043E79 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       F7 44 04 24 
       01 00       
043E8B 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       10 45 04 25 
       01 00       
043E9D 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       29 45 04 26 
       01 00       
043EAF 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       42 45 04 27 
       01 00       
043EC1 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       5B 45 04 28 
       01 00       
043ED3 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       74 45 04 29 
       01 00       
043EE5 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       8D 45 04 2A 
       01 00       
043EF7 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       A6 45 04 2B 
       01 00       
043F09 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       BC 45 04 2C 
       01 00       
043F1B 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       D2 45 04 2D 
       01 00       
043F2D 01 00 00 08 0133*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       E8 45 04 2E 
       01 00       
043F3F 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       01 46 04 2F 
       01 00       
043F51 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       1A 46 04 30 
       01 00       
043F63 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       33 46 04 31 
       01 00       
043F75 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       4C 46 04 32 
       01 00       
043F87 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       65 46 04 33 
       01 00       
043F99 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       7E 46 04 34 
       01 00       
043FAB 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       97 46 04 35 
       01 00       
043FBD 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       B0 46 04 36 
       01 00       
043FCF 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       C9 46 04 37 
       01 00       
043FE1 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       E2 46 04 38 
       01 00       
043FF3 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       FB 46 04 39 
       01 00       
044005 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       14 47 04 3A 
       01 00       
044017 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       2D 47 04 3B 
       01 00       
044029 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       46 47 04 3C 
       01 00       
04403B 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       5F 47 04 3D 
       01 00       
04404D 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       78 47 04 3E 
       01 00       
04405F 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       91 47 04 3F 
       01 00       
044071 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       AA 47 04 40 
       01 00       
044083 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       C3 47 04 41 
       01 00       
044095 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       DC 47 04 42 
       01 00       
0440A7 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       F5 47 04 43 
       01 00       
0440B9 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       0E 48 04 44 
       01 00       
0440CB 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       27 48 04 45 
       01 00       
0440DD 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       40 48 04 46 
       01 00       
0440EF 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       59 48 04 47 
       01 00       
044101 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       72 48 04 48 
       01 00       
044113 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       8B 48 04 49 
       01 00       
044125 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       A4 48 04 4A 
       01 00       
044137 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       BD 48 04 4B 
       01 00       
044149 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       D6 48 04 4C 
       01 00       
04415B 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       EF 48 04 4D 
       01 00       
04416D 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       08 49 04 4E 
       01 00       
04417F             0166*  
04417F             0167*  ; files_list: ; filename:
04417F 73 70 72 69 0168*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044194 73 70 72 69 0169*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
0441AE 73 70 72 69 0170*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
0441C8 73 70 72 69 0171*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
0441E2 73 70 72 69 0172*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0441FC 73 70 72 69 0173*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044216 73 70 72 69 0174*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
04422F 73 70 72 69 0175*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044248 73 70 72 69 0176*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
04425E 73 70 72 69 0177*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044274 73 70 72 69 0178*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044286 73 70 72 69 0179*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04429F 73 70 72 69 0180*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0442B8 73 70 72 69 0181*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0442D1 73 70 72 69 0182*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0442EA 73 70 72 69 0183*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044303 73 70 72 69 0184*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04431C 73 70 72 69 0185*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044335 73 70 72 69 0186*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04434E 73 70 72 69 0187*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044367 73 70 72 69 0188*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044380 73 70 72 69 0189*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044399 73 70 72 69 0190*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0443B2 73 70 72 69 0191*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0443CB 73 70 72 69 0192*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0443E4 73 70 72 69 0193*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0443FD 73 70 72 69 0194*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044416 73 70 72 69 0195*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04442F 73 70 72 69 0196*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044448 73 70 72 69 0197*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044461 73 70 72 69 0198*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04447A 73 70 72 69 0199*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044493 73 70 72 69 0200*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0444AC 73 70 72 69 0201*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0444C5 73 70 72 69 0202*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0444DE 73 70 72 69 0203*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0444F7 73 70 72 69 0204*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044510 73 70 72 69 0205*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044529 73 70 72 69 0206*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044542 73 70 72 69 0207*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04455B 73 70 72 69 0208*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044574 73 70 72 69 0209*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04458D 73 70 72 69 0210*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0445A6 73 70 72 69 0211*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0445BC 73 70 72 69 0212*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0445D2 73 70 72 69 0213*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0445E8 73 70 72 69 0214*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
044601 73 70 72 69 0215*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04461A 73 70 72 69 0216*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044633 73 70 72 69 0217*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04464C 73 70 72 69 0218*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044665 73 70 72 69 0219*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04467E 73 70 72 69 0220*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044697 73 70 72 69 0221*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0446B0 73 70 72 69 0222*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0446C9 73 70 72 69 0223*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0446E2 73 70 72 69 0224*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0446FB 73 70 72 69 0225*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044714 73 70 72 69 0226*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04472D 73 70 72 69 0227*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044746 73 70 72 69 0228*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04475F 73 70 72 69 0229*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044778 73 70 72 69 0230*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044791 73 70 72 69 0231*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0447AA 73 70 72 69 0232*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0447C3 73 70 72 69 0233*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0447DC 73 70 72 69 0234*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0447F5 73 70 72 69 0235*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04480E 73 70 72 69 0236*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044827 73 70 72 69 0237*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044840 73 70 72 69 0238*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044859 73 70 72 69 0239*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044872 73 70 72 69 0240*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04488B 73 70 72 69 0241*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0448A4 73 70 72 69 0242*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0448BD 73 70 72 69 0243*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0448D6 73 70 72 69 0244*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0448EF 73 70 72 69 0245*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044908 73 70 72 69 0246*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044921             0050       include "images_ui.inc"
044921             0001*  ; Generated by make_images.py
044921             0002*  
044921             0003*  ui_num_images: equ 4
044921             0004*  
044921             0005*  ; buffer_ids:
044921             0006*  BUF_BEZEL_L: equ 0
044921             0007*  BUF_BEZEL_R: equ 1
044921             0008*  BUF_SPLASH_BG: equ 2
044921             0009*  BUF_SPLASH_LOGO: equ 3
044921             0010*  
044921             0011*  ui_image_list: ; type; width; height; size; filename; bufferId:
044921 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       69 49 04 00 
       00 00       
044933 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       7A 49 04 01 
       00 00       
044945 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       8B 49 04 02 
       00 00       
044957 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       9E 49 04 03 
       00 00       
044969             0016*  
044969             0017*  ; files_list: ; filename:
044969 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
04497A 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04498B 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04499E 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0449B3             0051       include "laser.inc"
0449B3             0001*  ; ##### LASER SPRITE PARAMETERS #####
0449B3             0002*  ; uses the same offsets from its table base as the main sprite table:
0449B3             0003*  laser_start_variables: ; label marking beginning of table
0449B3 11          0004*  laser_id:                db table_max_records+1 ; 1 bytes unique spriteId, zero-based
0449B4             0005*  ; sprite state variables
0449B4 00 00 00    0006*  laser_x:                 dl                   0 ; 3 bytes 16.8 fractional x position in pixels
0449B7 00 00 00    0007*  laser_y:                 dl                   0 ; 3 bytes 16.8 fractional y position in pixels
0449BA 00 00 00    0008*  laser_xvel:              dl                   0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
0449BD 00 FA FF    0009*  laser_yvel:              dl              -6*256 ; 3 bytes y-component velocity, 16.8 fixed, pixels
0449C0 00 FA FF    0010*  laser_vel:               dl              -6*256 ; 3 bytes velocity px/frame (16.8 fixed)
0449C3 00 00 00    0011*  laser_heading:           dl                   0 ; 3 bytes sprite movement direction deg256 16.8 fixed
0449C6 00 00 00    0012*  laser_orientation:       dl                   0 ; 3 bytes orientation bits
0449C9             0013*  ; sprite definition variables
0449C9 00          0014*  laser_type:              db                   0 ; 1 bytes not currently used
0449CA 08 01 00    0015*  laser_base_bufferId:     dl         BUF_LASER_A ; 3 bytes bitmap bufferId
0449CD 00 00 00    0016*  laser_move_program:      dl                   0 ; 3 bytes not currently used
0449D0 00          0017*  laser_collisions:        db                   0 ; 1 bytes see collisions.inc constants for bit definitions
0449D1 10          0018*  laser_dim_x:             db                  16 ; 1 bytes sprite width in pixels
0449D2 10          0019*  laser_dim_y:             db                  16 ; 1 bytes sprite height in pixels
0449D3 01          0020*  laser_num_orientations:  db                   1 ; 1 bytes number of orientations for this sprite
0449D4 02          0021*  laser_num_animations:    db                   2 ; 1 bytes number of animations for this sprite
0449D5 01          0022*  laser_animation:         db                   1 ; 1 bytes current animation index, zero-based
0449D6 00          0023*  laser_animation_timer:   db                   0 ; 1 bytes when hits zero, draw next animation
0449D7 00          0024*  laser_move_timer:        db                   0 ; 1 bytes when zero, go to next move program, or step
0449D8 00          0025*  laser_move_step:         db                   0 ; 1 bytes stage in a move program sequence, varies
0449D9 00          0026*  laser_points:            db                   0 ; 1 bytes points awarded for killing this sprite type
0449DA 00          0027*  laser_shield_damage:     db                   0 ; 1 bytes shield points deducted for collision
0449DB             0028*  laser_end_variables: ; for when we want to traverse this table in reverse
0449DB             0029*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
0449DB             0030*  laser_animation_timer_reset: equ 2 ; animate every two frames
0449DB             0031*  
0449DB             0032*  laser_control:
0449DB             0033*  ; point to laser sprite variables
0449DB FD 21 B3 49 0034*      ld iy,laser_start_variables
       04          
0449E0 FD 22 13 51 0035*      ld (table_pointer),iy
       04          
0449E5             0036*  ; did laser just die?
0449E5 FD CB 1D 7E 0037*      bit sprite_just_died,(iy+sprite_collisions)
0449E9 C2 72 4A 04 0038*      jp nz,kill_laser
0449ED             0039*  ; select laser sprite
0449ED 3A B3 49 04 0040*      ld a,(laser_id)
0449F1 CD 82 19 04 0041*      call vdu_sprite_select
0449F5             0042*  ; update laser position
0449F5 CD C1 51 04 0043*      call move_sprite
0449F9             0044*  ; are we at top of screen?
0449F9 3A 17 51 04 0045*      ld a,(sprite_screen_edge)
0449FD E6 08       0046*      and collide_top
0449FF C2 72 4A 04 0047*      jp nz,kill_laser
044A03             0048*  ; check animation timer
044A03 FD 35 23    0049*      dec (iy+sprite_animation_timer)
044A06 C2 13 4A 04 0050*      jp nz,@F
044A0A 3E 02       0051*      ld a,laser_animation_timer_reset
044A0C FD 77 23    0052*      ld (iy+sprite_animation_timer),a
044A0F CD C9 19 04 0053*      call vdu_sprite_next_frame
044A13             0054*  @@: ; draw the sprite
044A13 FD 07 01    0055*      ld bc,(iy+sprite_x)
044A16 FD 17 04    0056*      ld de,(iy+sprite_y)
044A19 CD 4E 1A 04 0057*      call vdu_sprite_move_abs168
044A1D             0058*  ; return to caller
044A1D C9          0059*      ret
044A1E             0060*  ; end laser_control
044A1E             0061*  
044A1E             0062*  fire_laser:
044A1E             0063*  ; point to laser sprite variables
044A1E FD 21 B3 49 0064*      ld iy,laser_start_variables
       04          
044A23 FD 22 13 51 0065*      ld (table_pointer),iy
       04          
044A28             0066*  ; is laser already active?
044A28 FD CB 1D 76 0067*      bit sprite_alive,(iy+sprite_collisions)
044A2C C0          0068*      ret nz ; laser already active
044A2D             0069*  ; otherwise,FIRE ZEE LASER!!1111
044A2D             0070*  ; set laser status to active
044A2D FD CB 1D F6 0071*      set sprite_alive,(iy+sprite_collisions)
044A31             0072*  ; initialize laser sprite parameters
044A31             0073*  ; x-coordinate
044A31 DD 21 66 4D 0074*      ld ix,player_start_variables
       04          
044A36 DD 27 01    0075*      ld hl,(ix+sprite_x)
044A39 11 00 05 00 0076*      ld de,5*256 ; horizontal center with player sprite
044A3D 19          0077*      add hl,de
044A3E FD 2F 01    0078*      ld (iy+sprite_x),hl
044A41             0079*  ; y-coordinate
044A41 DD 27 04    0080*      ld hl,(ix+sprite_y)
044A44 11 00 FA FF 0081*      ld de,-6*256 ; set laser y a few pixels above player
044A48 FD 2F 04    0082*      ld (iy+sprite_y),hl
044A4B             0083*  ; set laser velocity
044A4B 21 00 FA FF 0084*      ld hl,laser_speed
044A4F FD 2F 0A    0085*      ld (iy+sprite_yvel),hl
044A52             0086*  ; set laser animation frame and timer
044A52 AF          0087*      xor a ; first frame
044A53 FD 77 22    0088*      ld (iy+sprite_animation),a
044A56 3E 02       0089*      ld a,laser_animation_timer_reset
044A58 FD 77 23    0090*      ld (iy+sprite_animation_timer),a
044A5B             0091*  ; plot the sprite and make it visible
044A5B 3A B3 49 04 0092*      ld a,(laser_id)
044A5F CD 82 19 04 0093*      call vdu_sprite_select
044A63 FD 07 01    0094*      ld bc,(iy+sprite_x)
044A66 FD 17 04    0095*      ld de,(iy+sprite_y)
044A69 CD 4E 1A 04 0096*      call vdu_sprite_move_abs168
044A6D CD F8 19 04 0097*      call vdu_sprite_show
044A71             0098*  ; return to caller
044A71 C9          0099*      ret
044A72             0100*  ; end fire_laser
044A72             0101*  
044A72             0102*  kill_laser:
044A72             0103*  ; update status to inactive
044A72 AF          0104*      xor a ; zero out a
044A73 32 D0 49 04 0105*      ld (laser_collisions),a
044A77             0106*  ; hide the sprite
044A77 3A B3 49 04 0107*      ld a,(laser_id)
044A7B CD 82 19 04 0108*      call vdu_sprite_select
044A7F CD 06 1A 04 0109*      call vdu_sprite_hide
044A83 C9          0110*      ret
044A84             0111*  ; end kill_laser
044A84             0052       include "levels.inc"
044A84             0001*  ; tileset indices
044A84             0002*  tiles_dg: equ 0
044A84             0003*  ; tiles_xevious: equ 1
044A84 00 00 00    0004*  tileset_ptr_idx: dl 0
044A87             0005*  tileset_ptrs:
044A87             0006*      ; dl tiles_xevious_levels
044A87 4F 4B 04    0007*      dl tileset_00_levels
044A8A 00 00 00    0008*  tileset_ptrs_end: dl 0 ; list terminator
044A8D             0009*  
044A8D             0010*  ; get a pointer to the current tileset
044A8D             0011*  ; inputs: tileset_ptr_idx
044A8D             0012*  ; returns: ix = pointer to tileset levels lut
044A8D             0013*  get_tileset_ptr:
044A8D 3A 84 4A 04 0014*      ld a,(tileset_ptr_idx)
044A91 57          0015*      ld d,a ; d = tileset index
044A92 1E 03       0016*      ld e,3 ; three bytes per index record
044A94 ED 5C       0017*      mlt de ; offset into tileset_ptrs lut
044A96 DD 21 87 4A 0018*      ld ix,tileset_ptrs
       04          
044A9B DD 19       0019*      add ix,de ; ix = pointer to tileset_ptrs record
044A9D C9          0020*      ret
044A9E             0021*  ; end get_tileset_ptr
044A9E             0022*  
044A9E             0023*  ; intialize a tileset
044A9E             0024*  ; inputs: a = index into tileset_ptrs
044A9E             0025*  init_tileset:
044A9E 32 84 4A 04 0026*      ld (tileset_ptr_idx),a ; store new tileset index
044AA2 CD 8D 4A 04 0027*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044AA6 DD 37 00    0028*      ld ix,(ix) ; ix = pointer to tileset levels lut
044AA9 DD 7E FF    0029*      ld a,(ix-1) ; number of levels in the tileset
044AAC 32 DC 4A 04 0030*      ld (num_levels),a
044AB0 AF          0031*      xor a ; reset current level to zero
044AB1 32 DB 4A 04 0032*      ld (cur_level),a
044AB5 C3 0D 4B 04 0033*      jp init_level
044AB9             0034*  ; end init_tileset
044AB9             0035*  
044AB9             0036*  next_tileset:
044AB9 21 84 4A 04 0037*      ld hl,tileset_ptr_idx
044ABD 34          0038*      inc (hl) ; bump to next index
044ABE CD 8D 4A 04 0039*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044AC2 DD 27 00    0040*      ld hl,(ix) ; ix = pointer to tileset levels lut
044AC5             0041*      sign_hlu ; check for list terminator (0)
044AC5 19          0001*M     add hl,de
044AC6 B7          0002*M     or a
044AC7 ED 52       0003*M     sbc hl,de
044AC9 C2 D7 4A 04 0042*      jp nz,@F ; not end of list
044ACD 3E FF       0043*      ld a,-1 ; will wrap around to zero on the next iteration
044ACF 32 84 4A 04 0044*      ld (tileset_ptr_idx),a
044AD3 C3 B9 4A 04 0045*      jp next_tileset ; try again
044AD7             0046*  @@:
044AD7 C3 9E 4A 04 0047*      jp init_tileset
044ADB             0048*  ; end next_tileset
044ADB             0049*  
044ADB 00          0050*  cur_level: db 0
044ADC 00          0051*  num_levels: db 0
044ADD             0052*  
044ADD             0053*  ; get a pointer to the current level lookup record
044ADD             0054*  ; inputs: tileset_ptr_idx, cur_level
044ADD             0055*  ; returns: ix = pointer to level definition
044ADD             0056*  get_level_ptr:
044ADD CD 8D 4A 04 0057*      call get_tileset_ptr
044AE1 DD 37 00    0058*      ld ix,(ix) ; ix = pointer to tileset levels lut
044AE4 3A DB 4A 04 0059*      ld a,(cur_level)
044AE8 57          0060*      ld d,a ; d = level index
044AE9 1E 03       0061*      ld e,3 ; three bytes per level record
044AEB ED 5C       0062*      mlt de ; offset into tileset levels lut
044AED DD 19       0063*      add ix,de ; ix = pointer to level record
044AEF C9          0064*      ret
044AF0             0065*  ; end get_level_ptr
044AF0             0066*  
044AF0             0067*  ; advance to the next level in the current tileset
044AF0             0068*  ; inputs: tileset_ptr_idx, cur_level
044AF0             0069*  next_level:
044AF0 21 DB 4A 04 0070*      ld hl,cur_level
044AF4 34          0071*      inc (hl) ; bump to next level
044AF5 CD DD 4A 04 0072*      call get_level_ptr ; ix points to current level lookup record
044AF9 DD 27 00    0073*      ld hl,(ix) ; hl = pointer to next level lookup record
044AFC             0074*      sign_hlu ; check for list terminator (0)
044AFC 19          0001*M     add hl,de
044AFD B7          0002*M     or a
044AFE ED 52       0003*M     sbc hl,de
044B00 C2 0D 4B 04 0075*      jp nz,@F ; not end of list
044B04 AF          0076*      xor a ; reset level to zero
044B05 32 DB 4A 04 0077*      ld (cur_level),a
044B09 C3 B9 4A 04 0078*      jp next_tileset ; try next tileset
044B0D             0079*  @@: ; fall through to init_level
044B0D             0080*  ; end next_level
044B0D             0081*  
044B0D             0082*  ; inputs: ix pointed to tileset level definition
044B0D             0083*  init_level:
044B0D CD DD 4A 04 0084*      call get_level_ptr ; ix points to level lookup record
044B11 DD 37 00    0085*      ld ix,(ix) ; ix points to level definition
044B14             0086*  ; set tiles_cols
044B14 DD 7E 00    0087*      ld a,(ix+0)
044B17 32 96 55 04 0088*      ld (tiles_cols),a
044B1B             0089*  ; set tiles_row counter
044B1B DD 7E 01    0090*      ld a,(ix+1)
044B1E 32 93 55 04 0091*      ld (tiles_row),a
044B22             0092*  ; set cur_baseBufferId
044B22 DD 27 04    0093*      ld hl,(ix+4)
044B25 22 97 55 04 0094*      ld (cur_baseBufferId),hl
044B29             0095*  ; set tiles_row_defs
044B29 ED 32 07    0096*      lea ix,ix+7 ; ix points to definition of first tile of first row
044B2C DD 22 90 55 0097*      ld (tiles_row_defs),ix
       04          
044B31             0098*  
044B31             0099*  ; print level
044B31             0100*  level_x: equ 0
044B31             0101*  level_y: equ 0
044B31 0E 00       0102*      ld c,level_x
044B33 06 00       0103*      ld b,level_y
044B35 CD 84 14 04 0104*      call vdu_move_cursor
044B39 CD 70 00 04 0105*      call printInline
044B3D 4C 65 76 65 0106*      asciz "Level: "
       6C 3A 20 00 
044B45 3A DB 4A 04 0107*      ld a,(cur_level)
044B49 CD BA 00 04 0108*      call printHexA
044B4D             0109*      ; call printNewLine
044B4D             0110*      ; ld hl,(cur_baseBufferId)
044B4D             0111*      ; call printDec
044B4D             0112*  
044B4D             0113*  ; ; draw initial background tiles
044B4D             0114*  ; ; TODO: make this a stars background
044B4D             0115*  ;     ld hl,BUF_STATION_BG_00
044B4D             0116*  ;     call vdu_buff_select
044B4D             0117*  ;     ld bc,0
044B4D             0118*  ;     ld de,field_top
044B4D             0119*  ;     call vdu_plot_bmp
044B4D             0120*  
044B4D             0121*  ;     ld hl,BUF_STATION_BG_01
044B4D             0122*  ;     call vdu_buff_select
044B4D             0123*  ;     ld bc,0
044B4D             0124*  ;     ld de,field_top+256
044B4D             0125*  ;     call vdu_plot_bmp
044B4D             0126*  
044B4D C9          0127*      ret
044B4E             0128*  ; end init_level
044B4E             0053       include "levels_tileset_0.inc"
044B4E             0001*  ; Generated from tiles/dg/dg0_00.tmx
044B4E             0002*  
044B4E 01          0003*  tileset_00_num_levels: db 1
044B4F             0004*  
044B4F             0005*  tileset_00_levels:
044B4F 55 4B 04    0006*  	dl tileset_00_level_00
044B52 00 00 00    0007*  	dl 0 ; list terminator
044B55             0008*  
044B55             0009*  tileset_00_level_00: ; Level 0
044B55 10          0010*  	db 16          ; num cols
044B56 20 00 00    0011*  	dl 32          ; num rows
044B59 00 02 00    0012*  	dl 512 ; base bufferId
044B5C 75 76 75 76 0013*  	db 117,118,117,118,117,118,117,118,119,120,119,120,119,120,119,120
       75 76 75 76 
       77 78 77 78 
       77 78 77 78 
044B6C 00 00 00 00 0014*  	db 000,000,000,000,000,000,000,001,000,000,000,000,000,000,000,000
       00 00 00 01 
       00 00 00 00 
       00 00 00 00 
044B7C 00 F1 F2 F3 0015*  	db 000,241,242,243,244,245,246,247,248,249,250,251,252,253,254,000
       F4 F5 F6 F7 
       F8 F9 FA FB 
       FC FD FE 00 
044B8C 00 E1 E2 E3 0016*  	db 000,225,226,227,228,229,230,231,232,233,234,235,236,237,238,000
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE 00 
044B9C 00 D1 D2 D3 0017*  	db 000,209,210,211,212,213,214,215,216,217,218,219,220,221,222,000
       D4 D5 D6 D7 
       D8 D9 DA DB 
       DC DD DE 00 
044BAC 00 C1 C2 C3 0018*  	db 000,193,194,195,196,197,198,199,200,201,202,203,204,205,206,000
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE 00 
044BBC 00 B1 B2 B3 0019*  	db 000,177,178,179,180,181,182,183,184,185,186,187,188,189,190,000
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE 00 
044BCC 00 A1 A2 A3 0020*  	db 000,161,162,163,164,165,166,167,168,169,170,171,172,173,174,000
       A4 A5 A6 A7 
       A8 A9 AA AB 
       AC AD AE 00 
044BDC 00 91 92 93 0021*  	db 000,145,146,147,148,149,150,151,152,153,154,155,156,157,158,000
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 00 
044BEC 00 81 82 83 0022*  	db 000,129,130,131,132,133,134,135,136,137,138,139,140,141,142,000
       84 85 86 87 
       88 89 8A 8B 
       8C 8D 8E 00 
044BFC 00 71 72 73 0023*  	db 000,113,114,115,116,117,118,119,120,121,122,123,124,125,126,000
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 00 
044C0C 00 61 62 63 0024*  	db 000,097,098,099,100,101,102,103,104,105,106,107,108,109,110,000
       64 65 66 67 
       68 69 6A 6B 
       6C 6D 6E 00 
044C1C 00 51 52 53 0025*  	db 000,081,082,083,084,085,086,087,088,089,090,091,092,093,094,000
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 00 
044C2C 00 41 42 43 0026*  	db 000,065,066,067,068,069,070,071,072,073,074,075,076,077,078,000
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 00 
044C3C 00 31 32 33 0027*  	db 000,049,050,051,052,053,054,055,056,057,058,059,060,061,062,000
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 00 
044C4C 00 21 22 23 0028*  	db 000,033,034,035,036,037,038,039,040,041,042,043,044,045,046,000
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 00 
044C5C 00 00 00 00 0029*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C6C 00 00 E1 E2 0030*  	db 000,000,225,226,227,228,229,230,231,232,233,234,235,236,000,000
       E3 E4 E5 E6 
       E7 E8 E9 EA 
       EB EC 00 00 
044C7C 00 00 D1 D2 0031*  	db 000,000,209,210,211,212,213,214,215,216,217,218,219,220,000,000
       D3 D4 D5 D6 
       D7 D8 D9 DA 
       DB DC 00 00 
044C8C 00 00 C1 C2 0032*  	db 000,000,193,194,195,196,197,198,199,200,201,202,203,204,000,000
       C3 C4 C5 C6 
       C7 C8 C9 CA 
       CB CC 00 00 
044C9C 00 00 B1 B2 0033*  	db 000,000,177,178,179,180,181,182,183,184,185,186,187,188,000,000
       B3 B4 B5 B6 
       B7 B8 B9 BA 
       BB BC 00 00 
044CAC 00 00 A1 A2 0034*  	db 000,000,161,162,163,164,165,166,167,168,169,170,171,172,000,000
       A3 A4 A5 A6 
       A7 A8 A9 AA 
       AB AC 00 00 
044CBC 00 00 00 00 0035*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CCC 00 00 00 00 0036*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CDC 00 00 51 52 0037*  	db 000,000,081,082,083,084,085,086,087,088,089,090,091,000,000,000
       53 54 55 56 
       57 58 59 5A 
       5B 00 00 00 
044CEC 00 00 41 42 0038*  	db 000,000,065,066,067,068,069,070,071,072,073,074,075,000,000,000
       43 44 45 46 
       47 48 49 4A 
       4B 00 00 00 
044CFC 00 00 31 32 0039*  	db 000,000,049,050,051,052,053,054,055,056,057,058,059,000,000,000
       33 34 35 36 
       37 38 39 3A 
       3B 00 00 00 
044D0C 00 00 21 22 0040*  	db 000,000,033,034,035,036,037,038,039,040,041,042,043,000,000,000
       23 24 25 26 
       27 28 29 2A 
       2B 00 00 00 
044D1C 00 00 00 00 0041*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D2C 00 00 00 00 0042*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D3C 00 00 00 00 0043*  	db 000,000,000,000,025,026,027,028,029,030,031,032,000,000,000,000
       19 1A 1B 1C 
       1D 1E 1F 20 
       00 00 00 00 
044D4C 00 00 00 00 0044*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D5C             0054       ; include "levels_xevious.inc"
044D5C             0055       include "player.inc"
044D5C             0001*  ; ######## GAME STATE VARIABLES #######
044D5C             0002*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
044D5C 00 00 00    0003*  player_score: dl 0 ; integer
044D5F             0004*  ; player current shields,binary
044D5F             0005*  ; when < 0 player splodes
044D5F             0006*  ; restores to player_max_shields when new ship spawns
044D5F 10 00 00    0007*  player_shields: dl 16 ; integer
044D62             0008*  ; max player shields,binary
044D62             0009*  ; can increase with power-ups (todo)
044D62 10 00 00    0010*  player_max_shields: dl 16 ; integer
044D65             0011*  ; when reaches zero,game ends
044D65             0012*  ; can increase based on TODO
044D65 03          0013*  player_ships: db 3 ; integer
044D66             0014*  
044D66             0015*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
044D66             0016*  
044D66             0017*  ; ######### PLAYER SPRITE PARAMETERS ##########
044D66             0018*  ; uses the same offsets from its table base as the main sprite table:
044D66             0019*  player_start_variables: ; label marking beginning of table
044D66 10          0020*  player_id:                db table_max_records ; 1 bytes unique spriteId, zero-based
044D67             0021*  ; sprite state variables
044D67 00 00 00    0022*  player_x:                 dl                 0 ; 3 bytes 16.8 fractional x position in pixels
044D6A 00 00 00    0023*  player_y:                 dl                 0 ; 3 bytes 16.8 fractional y position in pixels
044D6D 00 00 00    0024*  player_xvel:              dl                 0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044D70 00 00 00    0025*  player_yvel:              dl                 0 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044D73 00 03 00    0026*  player_vel:               dl             3*256 ; 3 bytes velocity px/frame (16.8 fixed)
044D76 00 00 00    0027*  player_heading:           dl                 0 ; 3 bytes sprite movement direction deg256 16.8 fixed
044D79 00 00 00    0028*  player_orientation:       dl                 0 ; 3 bytes orientation bits
044D7C             0029*  ; sprite definition variables
044D7C 00          0030*  player_type:              db                 0 ; 1 bytes not currently used
044D7D 2B 01 00    0031*  player_base_bufferId:     dl       BUF_SHIP_0L ; 3 bytes bitmap bufferId
044D80 00 00 00    0032*  player_move_program:      dl                 0 ; 3 bytes not currently used
044D83 00          0033*  player_collisions:        db                 0 ; 1 bytes see collisions.inc constants for bit definitions
044D84 10          0034*  player_dim_x:             db                16 ; 1 bytes sprite width in pixels
044D85 10          0035*  player_dim_y:             db                16 ; 1 bytes sprite height in pixels
044D86 01          0036*  player_num_orientations:  db                 1 ; 1 bytes number of orientations for this sprite
044D87 03          0037*  player_num_animations:    db                 3 ; 1 bytes number of animations for this sprite
044D88 01          0038*  player_animation:         db                 1 ; 1 bytes current animation index, zero-based
044D89 00          0039*  player_animation_timer:   db                 0 ; 1 bytes when hits zero, draw next animation
044D8A 00          0040*  player_move_timer:        db                 0 ; 1 bytes when zero, go to next move program, or step
044D8B 00          0041*  player_move_step:         db                 0 ; 1 bytes stage in a move program sequence, varies
044D8C 00          0042*  player_points:            db                 0 ; 1 bytes points awarded for killing this sprite type
044D8D 00          0043*  player_shield_damage:     db                 0 ; 1 bytes shield points deducted for collision
044D8E             0044*  player_end_variables: ; for when we want to traverse this table in reverse
044D8E             0045*  
044D8E             0046*  ; set initial player position
044D8E             0047*  ; inputs: none,everything is hardcoded
044D8E             0048*  ; outputs: player_x/y set to bottom-left corner of screen
044D8E             0049*  ; destroys: a
044D8E             0050*  player_init:
044D8E 3A 66 4D 04 0051*  	ld a,(player_id)
044D92 CD 82 19 04 0052*  	call vdu_sprite_select
044D96 CD 95 19 04 0053*      call vdu_sprite_clear_frames
044D9A 21 2B 01 00 0054*      ld hl,BUF_SHIP_0L
044D9E CD D7 1A 04 0055*      call vdu_sprite_add_buff
044DA2 21 2C 01 00 0056*      ld hl,BUF_SHIP_1C
044DA6 CD D7 1A 04 0057*      call vdu_sprite_add_buff
044DAA 21 2D 01 00 0058*      ld hl,BUF_SHIP_2R
044DAE CD D7 1A 04 0059*      call vdu_sprite_add_buff
044DB2 01 00 00 00 0060*      ld bc,0
044DB6 ED 43 67 4D 0061*      ld (player_x),bc
       04          
044DBB 11 00 6F 01 0062*      ld de,sprite_bottom*256 ; max sprite y-coordinate
044DBF ED 53 6A 4D 0063*      ld (player_y),de
       04          
044DC4 CD 4E 1A 04 0064*      call vdu_sprite_move_abs168
044DC8 CD F8 19 04 0065*      call vdu_sprite_show
044DCC 21 5F 55 04 0066*      ld hl,player_alive
044DD0 22 51 55 04 0067*      ld (player_state),hl
044DD4 21 83 4D 04 0068*      ld hl,player_collisions
044DD8 CB F6       0069*      set sprite_alive,(hl)
044DDA C9          0070*      ret
044DDB             0071*  
044DDB             0072*  ; process player keyboard input, set player bitmap
044DDB             0073*  ; velocities and draw player bitmap at updated coordinates
044DDB             0074*  ; Inputs: player_x/y set at desired position
044DDB             0075*  ; Returns: player bitmap drawn at updated position
044DDB             0076*  ; Destroys: probably everything except maybe iy
044DDB             0077*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
044DDB             0078*  ; TODO: requires sprite implementation
044DDB             0079*  player_input:
044DDB             0080*  ; ; did we die last frame?
044DDB             0081*  ;     ld a,(player_collisions)
044DDB             0082*  ;     and %00000010 ; zero flag will be set if not dead
044DDB             0083*  ;     jr z,player_not_dead
044DDB             0084*  ; ; yes we died
044DDB             0085*  ;     call kill_player
044DDB             0086*  ;     ret ; done
044DDB             0087*  player_not_dead: ; yay we didn't die
044DDB             0088*  ; reset player component velocities to zero as the default
044DDB 21 00 00 00 0089*  	ld hl,0
044DDF 22 6D 4D 04 0090*  	ld (player_xvel),hl
044DE3 22 70 4D 04 0091*  	ld (player_yvel),hl
044DE7             0092*  ; make ship the active sprite
044DE7 3A 66 4D 04 0093*      ld a,(player_id)
044DEB CD 82 19 04 0094*      call vdu_sprite_select
044DEF             0095*  ; check for keypresses and branch accordingly
044DEF             0096*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
044DEF             0097*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
044DEF 3E 1E       0001*M 			LD	A, function
044DF1 5B CF       0002*M 			RST.LIL	08h
044DF3             0098*  ; we test all four arrow keys and add/subract velocities accordingly
044DF3             0099*  ; this handles the case where two opposing movement keys
044DF3             0100*  ; are down simultaneously (velocities will net to zero)
044DF3             0101*  ; and allows diagonal movement when a vertical and horizontal key are down
044DF3             0102*  ; it also allows movement and action keys to be detected simultaneously
044DF3             0103*  ; so we can walk and chew gum at the same time
044DF3 3E 01       0104*      ld a,1 ; set ship's default animation to center
044DF5             0105*          ; if left and right are both down a will net to
044DF5             0106*  
044DF5             0107*  ; 99 Space: fire main weapon
044DF5 DD CB 0C 56 0108*      bit 2,(ix+12)
044DF9 F5          0109*      push af ; save flags for after player movement processed
044DFA             0110*  ; 26 Left: move player left
044DFA DD CB 03 4E 0111*      bit 1,(ix+3)
044DFE CA 10 4E 04 0112*      jp z,@F
044E02 2A 6D 4D 04 0113*      ld hl,(player_xvel)
044E06 01 00 FD FF 0114*      ld bc,-speed_player
044E0A 09          0115*      add hl,bc
044E0B 22 6D 4D 04 0116*      ld (player_xvel),hl
044E0F 3D          0117*      dec a ; set ship's animation to left
044E10             0118*  @@:
044E10             0119*  ; 122 Right: move player right
044E10 DD CB 0F 4E 0120*      bit 1,(ix+15)
044E14 CA 26 4E 04 0121*  	jp z,@F
044E18 2A 6D 4D 04 0122*      ld hl,(player_xvel)
044E1C 01 00 03 00 0123*      ld bc,speed_player
044E20 09          0124*      add hl,bc
044E21 22 6D 4D 04 0125*      ld (player_xvel),hl
044E25 3C          0126*      inc a ; set ship's animation to right
044E26             0127*  @@:
044E26             0128*  ; 58 Up: move player up
044E26 DD CB 07 4E 0129*      bit 1,(ix+7)
044E2A CA 3B 4E 04 0130*  	jp z,@F
044E2E 2A 70 4D 04 0131*      ld hl,(player_yvel)
044E32 01 00 FD FF 0132*      ld bc,-speed_player
044E36 09          0133*      add hl,bc
044E37 22 70 4D 04 0134*      ld (player_yvel),hl
044E3B             0135*  @@:
044E3B             0136*  ; 42 Down: move player down
044E3B DD CB 05 4E 0137*      bit 1,(ix+5)
044E3F CA 50 4E 04 0138*  	jp z,@F
044E43 2A 70 4D 04 0139*      ld hl,(player_yvel)
044E47 01 00 03 00 0140*      ld bc,speed_player
044E4B 09          0141*      add hl,bc
044E4C 22 70 4D 04 0142*      ld (player_yvel),hl
044E50             0143*  @@:
044E50             0144*  ; a should land here loaded with the correct frame
044E50 CD E5 19 04 0145*      call vdu_sprite_select_frame
044E54             0146*  ; draw player at updated position
044E54 FD 21 66 4D 0147*      ld iy,player_start_variables
       04          
044E59 FD 22 13 51 0148*      ld (table_pointer),iy
       04          
044E5E CD C1 51 04 0149*      call move_sprite
044E62 ED 4B 67 4D 0150*      ld bc,(player_x)
       04          
044E67 ED 5B 6A 4D 0151*      ld de,(player_y)
       04          
044E6C CD 4E 1A 04 0152*  	call vdu_sprite_move_abs168
044E70             0153*  ; process player laser fire
044E70 F1          0154*      pop af ; restore flags from spacebar check
044E71 C2 1E 4A 04 0155*      jp nz,fire_laser ; will return to caller from there
044E75 C9          0156*      ret
044E76             0157*  ; end player_input
044E76             0158*  
044E76             0159*  score_x: equ 0
044E76             0160*  score_y: equ 1
044E76             0161*  ; prints the player's score
044E76             0162*  print_score:
044E76 0E 00       0163*      ld c,score_x
044E78 06 01       0164*      ld b,score_y
044E7A CD 84 14 04 0165*      call vdu_move_cursor
044E7E             0166*  ; TODO: make this part of the UI setup and only print as needed
044E7E CD 70 00 04 0167*      call printInline
044E82 53 63 6F 72 0168*      asciz "Score:"
       65 3A 00    
044E89             0169*  ; END TODO
044E89 2A 5C 4D 04 0170*      ld hl,(player_score)
044E8D CD 76 01 04 0171*      call printDec
044E91 C9          0172*      ret
044E92             0173*  
044E92             0174*  ; ###################################################################
044E92             0175*  ; TODO: the below is all stuff from the original code we need to port
044E92             0176*  ; ###################################################################
044E92             0177*  
044E92             0178*  kill_player:
044E92             0179*  ; ; set player status to dead
044E92             0180*  ;     xor a; sets all player flags to zero
044E92             0181*  ;     ld (player_collisions),a
044E92             0182*  ; ; deduct a ship from the inventory
044E92             0183*  ;     ld a,(player_ships)
044E92             0184*  ;     dec a
044E92             0185*  ;     ld (player_ships),a
044E92             0186*  ; ; are we out of ships?
044E92             0187*  ;     jp z,game_over
044E92             0188*  ; ; wait a few ticks
044E92             0189*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
044E92             0190*  ;     ld (player_move_timer),a
044E92             0191*  ; kill_player_loop:
044E92             0192*  ;     call vdu_vblank
044E92             0193*  ;     ld a,(player_move_timer)
044E92             0194*  ;     dec a
044E92             0195*  ;     ld (player_move_timer),a
044E92             0196*  ;     jr nz,kill_player_loop
044E92             0197*  ;     call player_init ; player respawn if timer zero
044E92 C9          0198*      ret ; and out
044E93             0199*  
044E93             0200*  ; draws the player's shields level
044E93             0201*  ; draw_shields:
044E93             0202*  ; TODO: Agonize this routine
044E93             0203*  ; ; prep the loop to draw the bars
044E93             0204*  ;     ld a,(player_shields) ; snag shields
044E93             0205*  ;     and a
044E93             0206*  ;     ret z ; don't draw if zero shields
044E93             0207*  ; ; set loop counter and drawing position
044E93             0208*  ;     ld b,a ; loop counter
044E93             0209*  ;     ld hl,#5300+48+12
044E93             0210*  ; ; set color based on bars remaining
044E93             0211*  ;     ld c,103 ; bright green 28fe0a
044E93             0212*  ;     cp 9
044E93             0213*  ;     jp p,draw_shields_loop
044E93             0214*  ;     ld c,74 ; bright yellow eafe5b
044E93             0215*  ;     cp 3
044E93             0216*  ;     jp p,draw_shields_loop
044E93             0217*  ;     ld c,28 ; bright red fe0a0a
044E93             0218*  ; draw_shields_loop:
044E93             0219*  ;     push bc ; yup,outta
044E93             0220*  ;     push hl ; registers again
044E93             0221*  ;     ; ld a,#A8 ; ▀,168
044E93             0222*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
044E93             0223*  ;     ; call draw_char
044E93             0224*  ;     call draw_num ; we nuked draw_char for the time being
044E93             0225*  ;     pop hl
044E93             0226*  ;     ld a,8
044E93             0227*  ;     add a,l
044E93             0228*  ;     ld l,a
044E93             0229*  ;     pop bc
044E93             0230*  ;     djnz draw_shields_loop
044E93             0231*      ; ret
044E93             0232*  
044E93             0233*  
044E93             0234*  ; draw_lives:
044E93             0235*  ;     ld hl,player_small ; make small yellow ship the active sprite
044E93             0236*  ;     ld (sprite_base_bufferId),hl
044E93             0237*  ;     ; ld a,#80 ; northern orientation
044E93             0238*  ;     ; ld (sprite_orientation),a
044E93             0239*  ;     ld hl,0 ; north
044E93             0240*  ;     ld (sprite_heading),hl
044E93             0241*  ;     xor a
044E93             0242*  ;     ld (sprite_animation),a
044E93             0243*  ;     ld a,#56 ; top of visible screen
044E93             0244*  ;     ld (sprite_y+1),a
044E93             0245*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
044E93             0246*  ;     ld a,(player_ships)
044E93             0247*  ;     dec a ; we draw one fewer ships than lives
044E93             0248*  ;     ret z ; nothing to draw here, move along
044E93             0249*  ;     ld b,a ; loop counter
044E93             0250*  ;     ld a,256-16 ; initial x position
044E93             0251*  ; draw_lives_loop:
044E93             0252*  ;     ld (sprite_x+1),a
044E93             0253*  ;     push af
044E93             0254*  ;     push bc
044E93             0255*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
044E93             0256*  ;     pop bc
044E93             0257*  ;     pop af
044E93             0258*  ;     sub 10
044E93             0259*  ;     djnz draw_lives_loop
044E93             0260*  ;     ret
044E93             0056       include "sprites.inc"
044E93             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
044E93             0002*  table_bytes_per_record:    equ  40; 40 bytes ;40 bytes per sprite record
044E93             0003*  sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
044E93             0004*  ; sprite state variables
044E93             0005*  sprite_state_variables:    equ   1; beginning of sprite state variables
044E93             0006*  sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
044E93             0007*  sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
044E93             0008*  sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
044E93             0009*  sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
044E93             0010*  sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
044E93             0011*  sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
044E93             0012*  sprite_orientation:        equ  19; 3 bytes ;orientation bits
044E93             0013*  ; sprite definition variables
044E93             0014*  sprite_definitions:        equ  22; beginnning of sprite definition variables
044E93             0015*  sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
044E93             0016*  sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
044E93             0017*  sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
044E93             0018*  sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
044E93             0019*  sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
044E93             0020*  sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
044E93             0021*  sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
044E93             0022*  sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
044E93             0023*  sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
044E93             0024*  sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
044E93             0025*  sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
044E93             0026*  sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
044E93             0027*  sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
044E93             0028*  sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
044E93             0029*  
044E93             0030*  ; ###### SPRITE TABLE VARIABLES ######
044E93             0031*  ; maximum number of sprites
044E93             0032*  table_max_records: equ 16 ; it can handle more but this is pushing it
044E93             0033*  table_total_bytes: equ table_max_records*table_bytes_per_record
044E93             0034*  
044E93             0035*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
044E93             0036*  table_base:
044E93 00 00 00 00 0037*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
045113             0038*  sprite_end_variables: ; in case we want to traverse the table in reverse
045113             0039*  
045113             0040*  ; pointer to top address of current record, initialized to table_base
045113 93 4E 04    0041*  table_pointer: dl table_base
045116             0042*  ; how many active sprites
045116 00          0043*  table_active_sprites: db 0x00
045117             0044*  ; flag indicating collision with screen edge
045117             0045*  ; uses orientation codes to specify which edge(s)
045117 00          0046*  sprite_screen_edge: db #00
045118             0047*  
045118             0048*  ; origin_top: equ 48
045118             0049*  origin_top: equ 0
045118             0050*  origin_left: equ 128
045118             0051*  field_top: equ 0
045118             0052*  field_bottom: equ 383-origin_top
045118             0053*  field_left: equ 0
045118             0054*  field_right: equ 255
045118             0055*  sprite_top: equ field_top + 0
045118             0056*  sprite_bottom: equ field_bottom-16
045118             0057*  sprite_left: equ field_left
045118             0058*  sprite_right: equ field_right-16
045118             0059*  
045118             0060*  ; ######### COLLISION SPRITE PARAMETERS ##########
045118             0061*  ; integer coordinates are all that are needed for collision calculations
045118 00          0062*  collision_x: db 0x00
045119 00          0063*  collision_y: db 0x00
04511A 00          0064*  collision_dim_x: db 0x00
04511B 00          0065*  collision_dim_y: db 0x00
04511C             0066*  
04511C             0067*  ; scratch variables
04511C 00          0068*  x: db 0x00 ; 8-bit signed integer
04511D 00          0069*  y: db 0x00 ; 8-bit signed integer
04511E 00 00 00    0070*  x0: dl 0x000000 ; 16.8 signed fixed place
045121 00 00 00    0071*  y0: dl 0x000000 ; 16.8 signed fixed place
045124 00 00 00    0072*  incx1: dl 0x000000 ; 16.8 signed fixed place
045127 00 00 00    0073*  incy1: dl 0x000000 ; 16.8 signed fixed place
04512A 00 00 00    0074*  incx2: dl 0x000000 ; 16.8 signed fixed place
04512D 00 00 00    0075*  incy2: dl 0x000000 ; 16.8 signed fixed place
045130             0076*  
045130             0077*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
045130 00 00 00    0078*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
045133 00 00 00    0079*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
045136 00 00 00    0080*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
045139             0081*  
045139             0082*  table_init:
045139             0083*  ;     ld ix,table_base
045139             0084*  ;     xor a ; sprite id
045139             0085*  ;     ld b,table_max_records ; loop counter
045139             0086*  ; @loop:
045139             0087*  ;     ld (ix+sprite_id),a
045139             0088*  ;     lea ix,ix+table_bytes_per_record
045139             0089*  ;     inc a
045139             0090*  ;     djnz @loop
045139 C9          0091*      ret
04513A             0092*  
04513A             0093*  ; gets the next available sprite id
04513A             0094*  ; inputs; none
04513A             0095*  ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
04513A             0096*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04513A             0097*  ; destroys: a,b,c,hl,ix
04513A             0098*  ; affects: bumps table_active_sprites by one
04513A             0099*  table_get_next_id:
04513A DD 21 93 4E 0100*      ld ix,table_base
       04          
04513F 06 10       0101*      ld b,table_max_records
045141 0E 00       0102*      ld c,0 ; sprite id counter
045143             0103*  @loop:
045143 DD 7E 16    0104*      ld a,(ix+sprite_type)
045146 A7          0105*      and a
045147 28 08       0106*      jr z,@found
045149 ED 32 28    0107*      lea ix,ix+table_bytes_per_record
04514C 0C          0108*      inc c
04514D 10 F4       0109*      djnz @loop
04514F             0110*  @notfound:
04514F AF          0111*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045150 C9          0112*      ret
045151             0113*  @found:
045151             0114*  ; bump number of active sprites
045151 21 16 51 04 0115*      ld hl,table_active_sprites
045155 34          0116*      inc (hl)
045156             0117*  ; return sprite id
045156 79          0118*      ld a,c
045157 37          0119*      scf ; sets carry flag indicating we found a free sprite
045158 C9          0120*      ret ; done
045159             0121*  ; end table_get_next_id
045159             0122*  
045159             0123*  ; deactivate the sprite with the given id
045159             0124*  ; inputs: iy set to sprite record, vdu_sprite_select called
045159             0125*  ; outputs: nothing
045159             0126*  ; destroys: a,hl
045159             0127*  ; affects: decrements table_active_sprites by one
045159             0128*  table_deactivate_sprite:
045159 CD 06 1A 04 0129*      call vdu_sprite_hide
04515D AF          0130*      xor a
04515E FD 77 16    0131*      ld (iy+sprite_type),a
045161 21 16 51 04 0132*      ld hl,table_active_sprites
045165 35          0133*      dec (hl)
045166 C9          0134*      ret
045167             0135*  ; end table_deactivate_sprite
045167             0136*  
045167             0137*  sprites_init:
045167             0138*  ; initialize sprites
045167 CD B6 1A 04 0139*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
04516B AF          0140*  	xor a
04516C             0141*  @sprite_loop:
04516C F5          0142*  	push af
04516D CD 82 19 04 0143*  	call vdu_sprite_select
045171 21 00 01 00 0144*  	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
045175 CD D7 1A 04 0145*  	call vdu_sprite_add_buff
045179 F1          0146*  	pop af
04517A 3C          0147*  	inc a
04517B FE 12       0148*  	cp table_max_records+2 ; tack on sprites for player and laser
04517D 20 ED       0149*  	jr nz,@sprite_loop
04517F 3C          0150*  	inc a
045180 CD B6 19 04 0151*  	call vdu_sprite_activate
045184             0152*  
045184             0153*  ; define player sprite
045184 3A 66 4D 04 0154*  	ld a,(player_id)
045188 CD 82 19 04 0155*  	call vdu_sprite_select
04518C CD 95 19 04 0156*  	call vdu_sprite_clear_frames
045190 21 2B 01 00 0157*  	ld hl,BUF_SHIP_0L
045194 01 03 00 00 0158*  	ld bc,3 ; three bitmaps for player ship
045198             0159*  @sprite_player_loop:
045198 C5          0160*  	push bc
045199 E5          0161*  	push hl
04519A CD D7 1A 04 0162*  	call vdu_sprite_add_buff
04519E E1          0163*  	pop hl
04519F 23          0164*  	inc hl
0451A0 C1          0165*  	pop bc
0451A1 10 F5       0166*  	djnz @sprite_player_loop
0451A3             0167*  
0451A3             0168*  ; define laser sprite
0451A3 3A B3 49 04 0169*  	ld a,(laser_id)
0451A7 CD 82 19 04 0170*  	call vdu_sprite_select
0451AB CD 95 19 04 0171*  	call vdu_sprite_clear_frames
0451AF 21 08 01 00 0172*  	ld hl,BUF_LASER_A
0451B3 06 02       0173*  	ld b,2 ; two bitmaps for laser
0451B5             0174*  @sprite_laser_loop:
0451B5 C5          0175*  	push bc
0451B6 E5          0176*  	push hl
0451B7 CD D7 1A 04 0177*  	call vdu_sprite_add_buff
0451BB E1          0178*  	pop hl
0451BC 23          0179*  	inc hl
0451BD C1          0180*  	pop bc
0451BE 10 F5       0181*  	djnz @sprite_laser_loop
0451C0             0182*  ; all done
0451C0 C9          0183*      ret
0451C1             0184*  ; end sprites_init
0451C1             0185*  
0451C1             0186*  ; compute a sprite's new position based on its component x,y velocities
0451C1             0187*  ; with screen boundary checking and update its sprite table record accordingly
0451C1             0188*  ; inputs: table_pointer set to sprite record
0451C1             0189*  ; returns: updated x, y positions and edge collision flags in sprite table record
0451C1             0190*  ; destroys: everything
0451C1             0191*  ; note: actual rendering of sprite must be handled by caller
0451C1             0192*  move_sprite:
0451C1 FD 2A 13 51 0193*      ld iy,(table_pointer)
       04          
0451C6             0194*  ; x-axis movement
0451C6 FD 27 01    0195*      ld hl,(iy+sprite_x)
0451C9 FD 17 07    0196*      ld de,(iy+sprite_xvel)
0451CC 19          0197*      add hl,de
0451CD FD 2F 01    0198*      ld (iy+sprite_x),hl
0451D0             0199*  ; y-axis movement
0451D0 FD 27 04    0200*      ld hl,(iy+sprite_y)
0451D3 FD 17 0A    0201*      ld de,(iy+sprite_yvel)
0451D6 19          0202*      add hl,de
0451D7 FD 2F 04    0203*      ld (iy+sprite_y),hl
0451DA             0204*  
0451DA             0205*  ; detect screen edge collisions
0451DA AF          0206*      xor a ; reset screen edge collision flag and clear carry
0451DB 32 17 51 04 0207*      ld (sprite_screen_edge),a
0451DF             0208*  ; y-axis first since we already have it in hl
0451DF 11 00 00 00 0209*      ld de,-sprite_top*256
0451E3 ED 5A       0210*      adc hl,de
0451E5 FA 0F 52 04 0211*      jp m,@top
0451E9 ED 52       0212*      sbc hl,de ; hl back to original value
0451EB 11 00 91 FE 0213*      ld de,-sprite_bottom*256
0451EF ED 5A       0214*      adc hl,de
0451F1 F2 19 52 04 0215*      jp p,@bottom
0451F5             0216*  @xaxis:
0451F5 FD 27 01    0217*      ld hl,(iy+sprite_x)
0451F8 11 00 00 00 0218*      ld de,-sprite_left*256
0451FC ED 5A       0219*      adc hl,de
0451FE FA 34 52 04 0220*      jp m,@left
045202 ED 52       0221*      sbc hl,de ; hl back to original value
045204 11 00 11 FF 0222*      ld de,-sprite_right*256
045208 ED 5A       0223*      adc hl,de
04520A F2 42 52 04 0224*      jp p,@right
04520E             0225*  ; no edge collisions so go home
04520E C9          0226*      ret
04520F             0227*  @top:
04520F 3E 08       0228*      ld a,collide_top
045211 21 00 00 00 0229*      ld hl,sprite_top*256
045215 C3 1F 52 04 0230*      jp @collide_y
045219             0231*  @bottom:
045219 3E 04       0232*      ld a,collide_bottom
04521B 21 00 6F 01 0233*      ld hl,sprite_bottom*256
04521F             0234*  @collide_y:
04521F 32 17 51 04 0235*      ld (sprite_screen_edge),a
045223 FD 2F 04    0236*      ld (iy+sprite_y),hl
045226             0237*  ; reverse y-axis velocity
045226 FD 27 0A    0238*      ld hl,(iy+sprite_yvel)
045229 CD B4 06 04 0239*      call neg_hlu
04522D FD 2F 0A    0240*      ld (iy+sprite_yvel),hl
045230             0241*  ; go check for x-axis collisions
045230 C3 F5 51 04 0242*      jp @xaxis
045234             0243*  @left:
045234 3A 17 51 04 0244*      ld a,(sprite_screen_edge)
045238 F6 02       0245*      or a,collide_left
04523A 21 00 00 00 0246*      ld hl,sprite_left*256
04523E C3 4C 52 04 0247*      jp @collide_x
045242             0248*  @right:
045242 3A 17 51 04 0249*      ld a,(sprite_screen_edge)
045246 F6 01       0250*      or a,collide_right
045248 21 00 EF 00 0251*      ld hl,sprite_right*256
04524C             0252*  @collide_x:
04524C 32 17 51 04 0253*      ld (sprite_screen_edge),a
045250 FD 2F 01    0254*      ld (iy+sprite_x),hl
045253             0255*  ; reverse x-axis velocity
045253 FD 27 07    0256*      ld hl,(iy+sprite_xvel)
045256 CD B4 06 04 0257*      call neg_hlu
04525A FD 2F 07    0258*      ld (iy+sprite_xvel),hl
04525D             0259*  ; final collision flag to a and return
04525D 3A 17 51 04 0260*      ld a,(sprite_screen_edge)
045261 C9          0261*      ret
045262             0262*  ; end move_sprite
045262             0263*  
045262             0264*  sprite_compute_velocities:
045262 FD 2A 13 51 0265*      ld iy,(table_pointer)
       04          
045267 FD 17 0D    0266*      ld de,(iy+sprite_vel)
04526A CD 62 09 04 0267*      call polar_to_cartesian
04526E FD 2A 13 51 0268*      ld iy,(table_pointer)
       04          
045273 FD 0F 07    0269*      ld (iy+sprite_xvel),bc ; save x-velocity component
045276 FD 1F 0A    0270*      ld (iy+sprite_yvel),de ; save y-velocity component
045279 C9          0271*      ret
04527A             0272*  ; end sprite_compute_velocities
04527A             0273*  
04527A             0274*  ; create a new sprite at the same location as an existing sprite
04527A             0275*  ; inputs: iy = pointer to new sprite default settings, table_pointer = existing sprite
04527A             0276*  spawn_sprite_from_sprite:
04527A CD 3A 51 04 0277*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
04527E D0          0278*      ret nc ; no carry means no free sprite slots, so we go home
04527F             0279*  ; copy default settings to new sprite
04527F FD E5       0280*      push iy ; pointer to new sprite defaults
045281 E1          0281*      pop hl ; address to copy from
045282 DD E5       0282*      push ix ; back up pointer to new sprite table record
045284 ED 32 16    0283*      lea ix,ix+sprite_definitions ; bump pointer to copy to
045287 DD E5       0284*      push ix ; pointer to default sprite settings
045289 D1          0285*      pop de ; address to copy to
04528A 01 28 00 00 0286*      ld bc,table_bytes_per_record ; number of bytes to copy
04528E ED B0       0287*      ldir ; copies defaults to new sprite record
045290 DD E1       0288*      pop ix ; restore pointer to top of new sprite table record
045292             0289*  ; copy sprite position, velocity and orientation from existing sprite
045292 FD 2A 13 51 0290*      ld iy,(table_pointer) ; pointer to current sprite record
       04          
045297 ED 33 01    0291*      lea iy,iy+sprite_state_variables ; bump pointer to copy from position
04529A FD E5       0292*      push iy
04529C E1          0293*      pop hl ; address to copy from
04529D DD E5       0294*      push ix
04529F D1          0295*      pop de ; address to copy to
0452A0 01 16 00 00 0296*      ld bc, sprite_definitions-sprite_state_variables+1 ; number of bytes to copy
0452A4 ED B0       0297*      ldir ; copies position, velocity and orientation
0452A6             0298*  ; initialize the new sprite
0452A6 DD 7E 00    0299*      ld a,(ix+sprite_id)
0452A9 CD 82 19 04 0300*      call vdu_sprite_select ; select sprite
0452AD DD 27 17    0301*      ld hl,(ix+sprite_base_bufferId)
0452B0 DD 46 21    0302*      ld b,(ix+sprite_num_animations)
0452B3 CD C6 52 04 0303*      call sprite_load_frames
0452B7             0304*  ; update the new sprite's position and make it visible
0452B7 DD 07 01    0305*      ld bc,(ix+sprite_x)
0452BA DD 17 04    0306*      ld de,(ix+sprite_y)
0452BD CD 4E 1A 04 0307*      call vdu_sprite_move_abs168
0452C1 CD F8 19 04 0308*      call vdu_sprite_show
0452C5 C9          0309*      ret
0452C6             0310*  
0452C6             0311*  ; load a sprite with animation bitmaps
0452C6             0312*  ; inputs: a = sprite id, hl = base bufferId, b = number of frames
0452C6             0313*  sprite_load_frames:
0452C6             0314*  ; back up input parameters
0452C6 E5          0315*      push hl ; base bufferId
0452C7 C5          0316*      push bc ; b = number of frames
0452C8 CD 82 19 04 0317*      call vdu_sprite_select
0452CC CD 95 19 04 0318*      call vdu_sprite_clear_frames
0452D0 C1          0319*      pop bc ; b = number of frames
0452D1 E1          0320*      pop hl ; = base bufferId
0452D2             0321*  @load_frames:
0452D2 C5          0322*      push bc ; back up loop counter
0452D3 E5          0323*      push hl ; back up base bufferId
0452D4 CD D7 1A 04 0324*      call vdu_sprite_add_buff
0452D8 E1          0325*      pop hl ; restore base bufferId
0452D9 23          0326*      inc hl ; bump it to the next frame
0452DA C1          0327*      pop bc ; restore loop counter
0452DB 10 F5       0328*      djnz @load_frames ; loop until all frames loaded
0452DD C9          0329*      ret
0452DE             0330*  ; end sprite_load_frames
0452DE             0331*  
0452DE             0332*  dump_sprite_record:
0452DE CD 4D 14 04 0333*      call vdu_home_cursor
0452E2             0334*  
0452E2 FD 2A 13 51 0335*      ld iy,(table_pointer)
       04          
0452E7             0336*  
0452E7 CD 70 00 04 0337*      call printInline
0452EB 69 64 3A 20 0338*      asciz "id:   "
       20 20 00    
0452F2 FD 7E 00    0339*      ld a,(iy+sprite_id)
0452F5 CD BA 00 04 0340*      call printHexA
0452F9             0341*  
0452F9 CD 70 00 04 0342*      call printInline
0452FD 0D 0A 78 3A 0343*      asciz "\r\nx:   "
       20 20 20 00 
045305 FD 27 01    0344*      ld hl,(iy+sprite_x)
045308 CD 98 02 04 0345*      call print_s168_hl
04530C             0346*  
04530C CD 70 00 04 0347*      call printInline
045310 0D 0A 79 3A 0348*      asciz "\r\ny:   "
       20 20 20 00 
045318 FD 27 04    0349*      ld hl,(iy+sprite_y)
04531B CD 98 02 04 0350*      call print_s168_hl
04531F             0351*  
04531F CD 70 00 04 0352*      call printInline
045323 0D 0A 78 76 0353*      asciz "\r\nxv:  "
       3A 20 20 00 
04532B FD 27 07    0354*      ld hl,(iy+sprite_xvel)
04532E CD 98 02 04 0355*      call print_s168_hl
045332             0356*  
045332 CD 70 00 04 0357*      call printInline
045336 0D 0A 79 76 0358*      asciz "\r\nyv:  "
       3A 20 20 00 
04533E FD 27 0A    0359*      ld hl,(iy+sprite_yvel)
045341 CD 98 02 04 0360*      call print_s168_hl
045345             0361*  
045345 CD 70 00 04 0362*      call printInline
045349 0D 0A 76 3A 0363*      asciz "\r\nv:   "
       20 20 20 00 
045351 FD 27 0D    0364*      ld hl,(iy+sprite_vel)
045354 CD 98 02 04 0365*      call print_s168_hl
045358             0366*  
045358 CD 70 00 04 0367*      call printInline
04535C 0D 0A 68 64 0368*      asciz "\r\nhdg  "
       67 20 20 00 
045364 FD 27 10    0369*      ld hl,(iy+sprite_heading)
045367 CD 98 02 04 0370*      call print_s168_hl
04536B             0371*  
04536B CD 70 00 04 0372*      call printInline
04536F 0D 0A 6F 72 0373*      asciz "\r\nori: "
       69 3A 20 00 
045377 FD 27 13    0374*      ld hl,(iy+sprite_orientation)
04537A CD 98 02 04 0375*      call print_s168_hl
04537E             0376*  
04537E CD 70 00 04 0377*      call printInline
045382 0D 0A 74 79 0378*      asciz "\r\ntyp: "
       70 3A 20 00 
04538A FD 7E 16    0379*      ld a,(iy+sprite_type)
04538D CD BA 00 04 0380*      call printHexA
045391             0381*  
045391 CD 70 00 04 0382*      call printInline
045395 0D 0A 42 49 0383*      asciz "\r\nBId: "
       64 3A 20 00 
04539D FD 27 17    0384*      ld hl,(iy+sprite_base_bufferId)
0453A0 CD 97 00 04 0385*      call printHex24
0453A4             0386*  
0453A4 CD 70 00 04 0387*      call printInline
0453A8 0D 0A 6D 50 0388*      asciz "\r\nmPg: "
       67 3A 20 00 
0453B0 FD 27 1A    0389*      ld hl,(iy+sprite_move_program)
0453B3 CD 97 00 04 0390*      call printHex24
0453B7             0391*  
0453B7 CD 70 00 04 0392*      call printInline
0453BB 0D 0A 63 6F 0393*      asciz "\r\ncol: "
       6C 3A 20 00 
0453C3 FD 7E 1D    0394*      ld a,(iy+sprite_collisions)
0453C6 CD 15 03 04 0395*      call printBin8
0453CA             0396*  
0453CA CD 70 00 04 0397*      call printInline
0453CE 0D 0A 73 7A 0398*      asciz "\r\nszx: "
       78 3A 20 00 
0453D6 FD 7E 1E    0399*      ld a,(iy+sprite_dim_x)
0453D9 CD BA 00 04 0400*      call printHexA
0453DD             0401*  
0453DD CD 70 00 04 0402*      call printInline
0453E1 0D 0A 73 7A 0403*      asciz "\r\nszy: "
       79 3A 20 00 
0453E9 FD 7E 1F    0404*      ld a,(iy+sprite_dim_y)
0453EC CD BA 00 04 0405*      call printHexA
0453F0             0406*  
0453F0 CD 70 00 04 0407*      call printInline
0453F4 0D 0A 23 6F 0408*      asciz "\r\n#ori:"
       72 69 3A 00 
0453FC FD 7E 20    0409*      ld a,(iy+sprite_num_orientations)
0453FF CD BA 00 04 0410*      call printHexA
045403             0411*  
045403 CD 70 00 04 0412*      call printInline
045407 0D 0A 23 61 0413*      asciz "\r\n#ani:"
       6E 69 3A 00 
04540F FD 7E 21    0414*      ld a,(iy+sprite_num_animations)
045412 CD BA 00 04 0415*      call printHexA
045416             0416*  
045416 CD 70 00 04 0417*      call printInline
04541A 0D 0A 61 6E 0418*      asciz "\r\nani: "
       69 3A 20 00 
045422 FD 7E 22    0419*      ld a,(iy+sprite_animation)
045425 CD BA 00 04 0420*      call printHexA
045429             0421*  
045429 CD 70 00 04 0422*      call printInline
04542D 0D 0A 61 6E 0423*      asciz "\r\nanit:"
       69 74 3A 00 
045435 FD 7E 23    0424*      ld a,(iy+sprite_animation_timer)
045438 CD BA 00 04 0425*      call printHexA
04543C             0426*  
04543C CD 70 00 04 0427*      call printInline
045440 0D 0A 6D 76 0428*      asciz "\r\nmvt: "
       74 3A 20 00 
045448 FD 7E 24    0429*      ld a,(iy+sprite_move_timer)
04544B CD BA 00 04 0430*      call printHexA
04544F             0431*  
04544F CD 70 00 04 0432*      call printInline
045453 0D 0A 6D 76 0433*      asciz "\r\nmvs: "
       73 3A 20 00 
04545B FD 7E 25    0434*      ld a,(iy+sprite_move_step)
04545E CD BA 00 04 0435*      call printHexA
045462             0436*  
045462 CD 70 00 04 0437*      call printInline
045466 0D 0A 70 74 0438*      asciz "\r\npts: "
       73 3A 20 00 
04546E FD 7E 26    0439*      ld a,(iy+sprite_points)
045471 CD BA 00 04 0440*      call printHexA
045475             0441*  
045475 CD 70 00 04 0442*      call printInline
045479 0D 0A 64 6D 0443*      asciz "\r\ndmg: "
       67 3A 20 00 
045481 FD 7E 27    0444*      ld a,(iy+sprite_shield_damage)
045484 CD BA 00 04 0445*      call printHexA
045488             0446*  
045488 CD 25 06 04 0447*      call waitKeypress
04548C C9          0448*      ret
04548D             0057       include "state.inc"
04548D             0001*  ; Game state variables
04548D 9B 54 04    0002*  game_state:  dl game_main_menu
045490             0003*  
045490             0004*  do_game:
045490 2A 8D 54 04 0005*      ld hl,(game_state)   ; Load the current game state
045494             0006*      callHL                ; Call the corresponding state handler
045494 01 9A 54 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045498 C5          0002*M     push bc ; which constitutes the return address
045499 E9          0003*M     jp (hl) ; Jump to the address in HL
04549A             0004*M @@:
04549A C9          0007*      ret
04549B             0008*  
04549B             0009*  ; ========================
04549B             0010*  ; Main Game States
04549B             0011*  ; ========================
04549B             0012*  
04549B             0013*  game_main_menu:
04549B             0014*      ; Handle main menu options
04549B             0015*      ; Example: Check input for "Start Game"
04549B CD 83 55 04 0016*      call check_input_menu
04549F C2 A4 54 04 0017*      jp nz, game_initialize ; Start game on selection
0454A3 C9          0018*      ret
0454A4             0019*  
0454A4             0020*  game_initialize:
0454A4             0021*  ; reset the sprite table
0454A4 CD 39 51 04 0022*      call table_init
0454A8 AF          0023*      xor a
0454A9 32 16 51 04 0024*      ld (table_active_sprites),a
0454AD 21 93 4E 04 0025*      ld hl,table_base
0454B1 22 13 51 04 0026*      ld (table_pointer),hl
0454B5             0027*  ; initialize sprites
0454B5 CD 67 51 04 0028*      call sprites_init
0454B9             0029*  ; initialize the first level
0454B9 3E 00       0030*      ld a,tiles_dg
0454BB CD 9E 4A 04 0031*      call init_tileset
0454BF             0032*  ; initialize player
0454BF 21 00 00 00 0033*      ld hl,0
0454C3 22 5C 4D 04 0034*      ld (player_score),hl
0454C7 2A 62 4D 04 0035*      ld hl,(player_max_shields)
0454CB 22 5F 4D 04 0036*      ld (player_shields),hl
0454CF 3E 03       0037*      ld a,3
0454D1 32 65 4D 04 0038*      ld (player_ships),a
0454D5 CD 8E 4D 04 0039*      call player_init
0454D9             0040*  ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
0454D9             0041*  ;     ld hl,enemies_dead
0454D9             0042*  ;     ld (enemies_state),hl
0454D9             0043*  ; ; END TODO
0454D9             0044*  ; set the game state to playing
0454D9 21 E3 54 04 0045*      ld hl,game_playing
0454DD 22 8D 54 04 0046*      ld (game_state), hl
0454E1 C9          0047*      ret
0454E2             0048*  ; done initializing
0454E2 C9          0049*      ret
0454E3             0050*  
0454E3             0051*  game_playing:
0454E3             0052*  ; Main gameplay loop
0454E3 CD A0 55 04 0053*      call tiles_plot
0454E7 CD 54 55 04 0054*      call do_player
0454EB CD 6D 55 04 0055*      call do_enemies
0454EF             0056*  ; update UI: TODO make this a standalone function
0454EF CD 76 4E 04 0057*      call print_score
0454F3 C9          0058*      ret
0454F4             0059*  
0454F4             0060*  game_paused:
0454F4             0061*      ; Pause menu logic
0454F4 CD 86 55 04 0062*      call check_input_pause
0454F8 C2 E3 54 04 0063*      jp nz, game_playing ; Resume game
0454FC CA 9B 54 04 0064*      jp z, game_main_menu ; Exit to main menu
045500 C9          0065*      ret
045501             0066*  
045501             0067*  game_level_transition:
045501             0068*      ; Handle level transitions
045501 CD 87 55 04 0069*      call load_next_level
045505 21 E3 54 04 0070*      ld hl, game_playing
045509 22 8D 54 04 0071*      ld (game_state), hl
04550D C9          0072*      ret
04550E             0073*  
04550E             0074*  game_over:
04550E             0075*      ; Display game over screen
04550E CD 88 55 04 0076*      call display_game_over
045512 C2 9B 54 04 0077*      jp nz, game_main_menu ; Return to main menu on input
045516 C9          0078*      ret
045517             0079*  
045517             0080*  game_victory:
045517             0081*      ; Display victory screen
045517 CD 89 55 04 0082*      call display_victory
04551B C2 9B 54 04 0083*      jp nz, game_main_menu ; Return to main menu on input
04551F C9          0084*      ret
045520             0085*  
045520             0086*  ; ========================
045520             0087*  ; Supporting States
045520             0088*  ; ========================
045520             0089*  
045520             0090*  game_loading:
045520             0091*      ; Show loading screen while preparing assets
045520 CD 8A 55 04 0092*      call load_resources
045524 21 A4 54 04 0093*      ld hl, game_initialize
045528 22 8D 54 04 0094*      ld (game_state), hl
04552C C9          0095*      ret
04552D             0096*  
04552D             0097*  game_cutscene:
04552D             0098*      ; Play a non-interactive cutscene
04552D CD 8B 55 04 0099*      call play_cutscene
045531 C2 E3 54 04 0100*      jp nz, game_playing ; Return to gameplay after cutscene
045535 C9          0101*      ret
045536             0102*  
045536             0103*  game_inventory:
045536             0104*      ; Open inventory or shop
045536 CD 8C 55 04 0105*      call display_inventory
04553A C2 E3 54 04 0106*      jp nz, game_playing ; Return to gameplay after inventory close
04553E C9          0107*      ret
04553F             0108*  
04553F             0109*  game_map:
04553F             0110*      ; Display map or quest
04553F CD 8D 55 04 0111*      call display_map
045543 C2 E3 54 04 0112*      jp nz, game_playing ; Return to gameplay after map close
045547 C9          0113*      ret
045548             0114*  
045548             0115*  game_exit:
045548             0116*      ; Handle exit logic
045548 CD 8E 55 04 0117*      call save_game
04554C C3 8F 55 04 0118*      jp exit_game         ; Safely shut down
045550 C9          0119*      ret
045551             0120*  
045551             0121*  ; ========================
045551             0122*  ; Sub-state branching (Example for player state)
045551             0123*  ; ========================
045551             0124*  
045551 5F 55 04    0125*  player_state:  dl player_alive ; Player state variable
045554             0126*  
045554             0127*  do_player:
045554 2A 51 55 04 0128*      ld hl,(player_state)
045558             0129*      callHL                ; Call the corresponding player state
045558 01 5E 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04555C C5          0002*M     push bc ; which constitutes the return address
04555D E9          0003*M     jp (hl) ; Jump to the address in HL
04555E             0004*M @@:
04555E C9          0130*      ret
04555F             0131*  
04555F             0132*  player_alive:
04555F CD DB 4D 04 0133*      call player_input     ; Handle player input
045563 CD DB 49 04 0134*      call laser_control    ; Handle laser movement and collision detection
045567 C9          0135*      ret
045568             0136*  
045568             0137*  player_dead:
045568 CD DB 49 04 0138*      call laser_control    ; Handle laser movement and collision detection
04556C C9          0139*      ret
04556D             0140*  
04556D             0141*  do_enemies:
04556D 2A 78 55 04 0142*      ld hl,(enemies_state)
045571             0143*      callHL
045571 01 77 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045575 C5          0002*M     push bc ; which constitutes the return address
045576 E9          0003*M     jp (hl) ; Jump to the address in HL
045577             0004*M @@:
045577 C9          0144*      ret
045578 7E 55 04    0145*  enemies_state: dl enemies_alive
04557B             0146*  
04557B             0147*  enemies_dead:
04557B C9          0148*      ret
04557C             0149*  
04557C             0150*  enemies_respawning:
04557C C9          0151*      ret
04557D             0152*  
04557D             0153*  enemies_respawn:
04557D C9          0154*      ret
04557E             0155*  
04557E             0156*  enemies_alive:
04557E CD 1F 1B 04 0157*      call move_enemies
045582 C9          0158*      ret
045583             0159*  
045583             0160*  check_input_menu:
045583 C9          0161*      ret
045584             0162*  
045584             0163*  update_game_world:
045584 C9          0164*      ret
045585             0165*  
045585             0166*  check_game_events:
045585 C9          0167*      ret
045586             0168*  
045586             0169*  check_input_pause:
045586 C9          0170*      ret
045587             0171*  
045587             0172*  load_next_level:
045587 C9          0173*      ret
045588             0174*  
045588             0175*  display_game_over:
045588 C9          0176*      ret
045589             0177*  
045589             0178*  display_victory:
045589 C9          0179*      ret
04558A             0180*  
04558A             0181*  load_resources:
04558A C9          0182*      ret
04558B             0183*  
04558B             0184*  play_cutscene:
04558B C9          0185*      ret
04558C             0186*  
04558C             0187*  display_inventory:
04558C C9          0188*      ret
04558D             0189*  
04558D             0190*  display_map:
04558D C9          0191*      ret
04558E             0192*  
04558E             0193*  save_game:
04558E C9          0194*      ret
04558F             0195*  
04558F             0196*  exit_game:
04558F C9          0197*      ret
045590             0198*  
045590             0058       include "tiles.inc"
045590             0001*  ; ######### TILES #########
045590             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
045590             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
045590 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
045593 00 00 00    0005*  tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
045596             0006*      ; initialize to zero for a maximum of 256 rows in a level
045596 00          0007*  tiles_cols: db 0 ; number of tile columns in the current level
045597             0008*  
045597 00 00 00    0009*  cur_baseBufferId: dl 0
04559A 00 00 00    0010*  tiles_x_plot: dl 0
04559D F1 FF FF    0011*  tiles_y_plot: dl -15
0455A0             0012*  
0455A0             0013*  tiles_plot:
0455A0             0014*  ; set gfx viewport to playing field window
0455A0 01 00 00 00 0015*      ld bc,field_left
0455A4 11 00 00 00 0016*      ld de,field_top
0455A8 DD 21 FF 00 0017*      ld ix,field_right
       00          
0455AD FD 21 7F 01 0018*      ld iy,field_bottom
       00          
0455B2 CD 38 15 04 0019*      call vdu_set_gfx_viewport
0455B6             0020*  ; move the background down one pixel
0455B6 3E 02       0021*      ld a,2 ; current gfx viewport
0455B8 2E 02       0022*      ld l,2 ; direction=down
0455BA 26 01       0023*      ld h,1 ; speed=1 px
0455BC CD B0 14 04 0024*      call vdu_scroll_down
0455C0             0025*  ; set gfx viewport to one scanline to optimise plotting tiles
0455C0 01 00 00 00 0026*      ld bc,0 ; leftmost x-coord
0455C4 11 00 00 00 0027*      ld de,0 ; topmost y-coord
0455C8 DD 21 FF 00 0028*      ld ix,255 ; rightmost x-coord
       00          
0455CD FD 21 00 00 0029*      ld iy,0 ; bottommost y-coord
       00          
0455D2 CD 38 15 04 0030*      call vdu_set_gfx_viewport
0455D6             0031*  ; plot the background
0455D6 CD 09 57 04 0032*      call bg_plot
0455DA             0033*  ; initialize tiles loop
0455DA 21 00 00 00 0034*      ld hl,0 ; init plotting x-coordinate
0455DE 22 9A 55 04 0035*      ld (tiles_x_plot),hl
0455E2 2A 90 55 04 0036*      ld hl,(tiles_row_defs)
0455E6 3A 96 55 04 0037*      ld a,(tiles_cols)
0455EA 47          0038*      ld b,a ; column loop counter
0455EB             0039*  @loop:
0455EB C5          0040*      push bc ; save the loop counter
0455EC             0041*  ; read the tile defintion for the current column
0455EC 7E          0042*      ld a,(hl) ; a has tile definition
0455ED E5          0043*      push hl ; save pointer to tile definition
0455EE 2A 97 55 04 0044*      ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
0455F2 6F          0045*      ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
0455F3 CD 85 15 04 0046*      call vdu_buff_select ; tile bitmap buffer is now active
0455F7             0047*  ; plot the active bitmap
0455F7 ED 4B 9A 55 0048*      ld bc,(tiles_x_plot)
       04          
0455FC ED 5B 9D 55 0049*      ld de,(tiles_y_plot)
       04          
045601 CD E1 18 04 0050*      call vdu_plot_bmp
045605             0051*  ; bump x-coords the width of one tile and save it
045605 2A 9A 55 04 0052*      ld hl,(tiles_x_plot)
045609 01 10 00 00 0053*      ld bc,16
04560D 09          0054*      add hl,bc
04560E 22 9A 55 04 0055*      ld (tiles_x_plot),hl
045612             0056*  ; prepare to loop to next column
045612 E1          0057*      pop hl ; get back pointer to tile def
045613 23          0058*      inc hl ; bump it to the next column
045614 C1          0059*      pop bc ; snag our loop counter
045615 10 D4       0060*      djnz @loop
045617             0061*  ; increment tiles plotting y-coordinate
045617             0062*  ; when it hits zero, we go to next row of tiles in the map
045617             0063*  ; (we use ix b/c we want to preserve hl for the next step)
045617 DD 21 9D 55 0064*      ld ix,tiles_y_plot
       04          
04561C DD 34 00    0065*      inc (ix)
04561F C0          0066*      ret nz
045620             0067*  ; do active tiles
045620 E5          0068*      push hl ; save pointer to next row tile def
045621 CD 53 56 04 0069*      call do_active_tiles
045625 E1          0070*      pop hl ; get back pointer to next row tile def
045626             0071*  ; time to bump tiles_row_defs to next row
045626             0072*  ; (hl was already there at the end of the loop)
045626 22 90 55 04 0073*      ld (tiles_row_defs),hl
04562A             0074*  ; reset coords to plot next row of tiles
04562A 21 00 00 00 0075*      ld hl,0
04562E 22 9A 55 04 0076*      ld (tiles_x_plot),hl
045632 21 F1 FF FF 0077*      ld hl,-15
045636 22 9D 55 04 0078*      ld (tiles_y_plot),hl
04563A             0079*  ; decrement tiles row counter
04563A 21 93 55 04 0080*      ld hl,tiles_row
04563E 35          0081*      dec (hl)
04563F C0          0082*      ret nz
045640             0083*  @inc_level:
045640             0084*  ; increase the number of enemy sprites
045640 3A 1E 1B 04 0085*      ld a,(max_enemy_sprites)
045644 3C          0086*      inc a
045645 FE 10       0087*      cp table_max_records ; if we're at the global limit,skip ahead at max level
045647 CA F0 4A 04 0088*      jp z,next_level
04564B 32 1E 1B 04 0089*      ld (max_enemy_sprites),a ; otherwise save the updated number
04564F C3 F0 4A 04 0090*      jp next_level
045653             0091*  ; end tiles_plot
045653             0092*  
045653             0093*  do_active_tiles:
045653             0094*  ; initialize tiles loop
045653 21 00 00 00 0095*      ld hl,0 ; init plotting x-coordinate
045657 22 9A 55 04 0096*      ld (tiles_x_plot),hl
04565B 2A 90 55 04 0097*      ld hl,(tiles_row_defs)
04565F 3A 96 55 04 0098*      ld a,(tiles_cols)
045663 47          0099*      ld b,a ; column loop counter
045664             0100*  @loop:
045664 C5          0101*      push bc ; save the loop counter
045665             0102*  ; read the tile defintion for the current column
045665 7E          0103*      ld a,(hl) ; a has tile definition
045666 E5          0104*      push hl ; save pointer to tile definition
045667 B7          0105*      or a ; check for null tile
045668 CA 84 56 04 0106*      jp z,@next_tile ; skip to next tile if null
04566C FE 11       0107*      cp 17 ; carry reset if active tile
04566E D2 84 56 04 0108*      jp nc,@next_tile ; skip to next tile if not active
045672             0109*  ; call the tile activation routine
045672 21 0A 57 04 0110*      ld hl,tile_activation_routines
045676 16 03       0111*      ld d,3 ; three bytes per table entry
045678 5F          0112*      ld e,a ; a is the tile type
045679 ED 5C       0113*      mlt de ; de is now the offset to the table entry
04567B 19          0114*      add hl,de ; hl is now the address of the table entry
04567C ED 27       0115*      ld hl,(hl) ; hl is now the activation routine address
04567E             0116*      callHL ; call the activation routine
04567E 01 84 56 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045682 C5          0002*M     push bc ; which constitutes the return address
045683 E9          0003*M     jp (hl) ; Jump to the address in HL
045684             0004*M @@:
045684             0117*  @next_tile:
045684             0118*  ; bump x-coords the width of one tile and save it
045684 2A 9A 55 04 0119*      ld hl,(tiles_x_plot)
045688 01 10 00 00 0120*      ld bc,16
04568C 09          0121*      add hl,bc
04568D 22 9A 55 04 0122*      ld (tiles_x_plot),hl
045691             0123*  ; prepare to loop to next column
045691 E1          0124*      pop hl ; get back pointer to tile def
045692 23          0125*      inc hl ; bump it to the next column
045693 C1          0126*      pop bc ; snag our loop counter
045694 10 CE       0127*      djnz @loop
045696 C9          0128*      ret ; done
045697             0129*  ; end do_active_tiles
045697             0130*  
045697             0131*  ; create a new sprite at the same location as an active tile
045697             0132*  ; inputs: iy = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
045697             0133*  spawn_sprite_from_tile:
045697 CD 3A 51 04 0134*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
04569B D0          0135*      ret nc ; no carry means no free sprite slots, so we go home
04569C             0136*  ; copy default settings to new sprite
04569C FD E5       0137*      push iy ; pointer to new sprite defaults
04569E E1          0138*      pop hl ; address to copy from
04569F DD E5       0139*      push ix ; back up pointer to new sprite table record
0456A1 ED 32 16    0140*      lea ix,ix+sprite_definitions ; bump pointer to copy to
0456A4 DD E5       0141*      push ix ; pointer to default sprite settings
0456A6 D1          0142*      pop de ; address to copy to
0456A7 01 28 00 00 0143*      ld bc,table_bytes_per_record ; number of bytes to copy
0456AB ED B0       0144*      ldir ; copies defaults to new sprite record
0456AD DD E1       0145*      pop ix ; restore pointer to top of new sprite table record
0456AF             0146*  ; initialize the new sprite
0456AF DD 7E 00    0147*      ld a,(ix+sprite_id)
0456B2 CD 82 19 04 0148*      call vdu_sprite_select ; select sprite
0456B6 DD 27 17    0149*      ld hl,(ix+sprite_base_bufferId)
0456B9 DD 46 21    0150*      ld b,(ix+sprite_num_animations)
0456BC CD C6 52 04 0151*      call sprite_load_frames
0456C0 21 00 01 00 0152*      ld hl,1*256 ; set y velocity to 1 pixel per frame
0456C4 DD 2F 0A    0153*      ld (ix+sprite_yvel),hl
0456C7             0154*  ; update the new sprite's position and make it visible
0456C7 2A 9A 55 04 0155*      ld hl,(tiles_x_plot)
0456CB             0156*      hlu_mul256
0456CB 29          0001*M     add hl,hl ; * 2
0456CC 29          0002*M     add hl,hl ; * 4
0456CD 29          0003*M     add hl,hl ; * 8
0456CE 29          0004*M     add hl,hl ; * 16
0456CF 29          0005*M     add hl,hl ; * 32
0456D0 29          0006*M     add hl,hl ; * 64
0456D1 29          0007*M     add hl,hl ; * 128
0456D2 29          0008*M     add hl,hl ; * 256
0456D3 E5          0157*      push hl
0456D4 C1          0158*      pop bc
0456D5 DD 0F 01    0159*      ld (ix+sprite_x),bc
0456D8 11 00 FF FF 0160*      ld de,-1*256 ; TODO: implement y-coord for reals
0456DC DD 1F 04    0161*      ld (ix+sprite_y),de
0456DF             0162*      ; call vdu_sprite_move_abs168
0456DF             0163*      ; call vdu_sprite_show
0456DF             0164*  ; return to caller
0456DF 37          0165*      scf ; set carry flag to indicate success
0456E0 C9          0166*      ret
0456E1             0167*  ; end spawn_sprite_from_tile
0456E1             0168*  
0456E1             0169*  move_active_tile:
0456E1 FD 7E 00    0170*      ld a,(iy+sprite_id)
0456E4 CD 82 19 04 0171*      call vdu_sprite_select
0456E8             0172*  ; y-axis movement
0456E8 FD 27 04    0173*      ld hl,(iy+sprite_y)
0456EB FD 17 0A    0174*      ld de,(iy+sprite_yvel)
0456EE 19          0175*      add hl,de
0456EF FD 2F 04    0176*      ld (iy+sprite_y),hl
0456F2             0177*  ; detect screen edge collisions
0456F2 AF          0178*      xor a ; reset screen edge collision flag and clear carry
0456F3 32 17 51 04 0179*      ld (sprite_screen_edge),a
0456F7             0180*  ; y-axis bottom is all we need to test
0456F7 11 00 91 FE 0181*      ld de,-sprite_bottom*256
0456FB ED 5A       0182*      adc hl,de
0456FD F2 02 57 04 0183*      jp p,@bottom ; scrolled off screen so deactivate
045701 C9          0184*      ret ; still on screen so do nothing further
045702             0185*  @bottom:
045702 3E 04       0186*      ld a,collide_bottom
045704 32 17 51 04 0187*      ld (sprite_screen_edge),a
045708 C9          0188*      ret
045709             0189*  
045709             0190*  
045709             0191*  ; bg_y_plot: dl -1
045709             0192*  ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
045709             0193*  
045709             0194*  bg_plot: ; TODO: implement this
045709             0195*  ; ; load current bg tile bufferId as default
045709             0196*  ;     ld hl,(bg_bufferId)
045709             0197*  ; ; check whether it is time for a new background tile
045709             0198*  ;     ld a,(bg_y_plot)
045709             0199*  ;     inc a
045709             0200*  ;     ld (bg_y_plot),a
045709             0201*  ;     jp nz,@F ; not time for a new tile so draw current one
045709             0202*  ; ; load the next background tile
045709             0203*  ;     ld hl,BUF_STATION_BG_00
045709             0204*  ;     call rand_8
045709             0205*  ;     and %0000011
045709             0206*  ;     add a,l
045709             0207*  ;     ld l,a
045709             0208*  ;     ld a,0
045709             0209*  ;     adc a,h
045709             0210*  ;     ld h,a
045709             0211*  ;     ld (bg_bufferId),hl
045709             0212*  ; @@:
045709             0213*  ;     call vdu_buff_select
045709             0214*  ;     ld bc,0
045709             0215*  ;     ld de,(bg_y_plot)
045709             0216*  ;     inc de
045709             0217*  ;     call vdu_plot_bmp
045709             0218*  ; all done
045709 C9          0219*      ret
04570A             0220*  
04570A             0221*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
04570A             0222*  tile_pad_small: equ 1
04570A             0223*  tile_pad_med: equ 2
04570A             0224*  tile_pad_large: equ 3
04570A             0225*  tile_pad_huge: equ 4
04570A             0226*  tile_fireball_turret: equ 5
04570A             0227*  tile_laser_turret: equ 6
04570A             0228*  tile_twin_laser_turret: equ 7
04570A             0229*  tile_gatling_turret: equ 8
04570A             0230*  tile_electrode_r: equ 9
04570A             0231*  tile_electrode_u: equ 10
04570A             0232*  tile_piston_r: equ 11
04570A             0233*  tile_piston_u: equ 12
04570A             0234*  tile_spark_r: equ 13
04570A             0235*  tile_spark_u: equ 14
04570A             0236*  tile_flame_r: equ 15
04570A             0237*  tile_flame_u: equ 16
04570A             0238*  
04570A             0239*  active_tile_timer: equ 24 ; 2/10ths of a second
04570A             0240*  tile_activation_routines:
04570A 3D 57 04    0241*      dl activate_null_tile ; dummy spacer since tiled is 1-based
04570D 50 57 04    0242*      dl activate_pad_small
045710 3D 57 04    0243*      dl activate_null_tile  ;  activate_pad_med
045713 3D 57 04    0244*      dl activate_null_tile  ;  activate_pad_large
045716 3D 57 04    0245*      dl activate_null_tile  ;  activate_pad_huge
045719 3D 57 04    0246*      dl activate_null_tile  ;  activate_fireball_turret
04571C 3D 57 04    0247*      dl activate_null_tile  ;  activate_laser_turret
04571F 3D 57 04    0248*      dl activate_null_tile  ;  activate_twin_laser_turret
045722 3D 57 04    0249*      dl activate_null_tile  ;  activate_gatling_turret
045725 3D 57 04    0250*      dl activate_null_tile  ;  activate_electrode_r
045728 3D 57 04    0251*      dl activate_null_tile  ;  activate_electrode_u
04572B 3D 57 04    0252*      dl activate_null_tile  ;  activate_piston_r
04572E 3D 57 04    0253*      dl activate_null_tile  ;  activate_piston_u
045731 3D 57 04    0254*      dl activate_null_tile  ;  activate_spark_r
045734 3D 57 04    0255*      dl activate_null_tile  ;  activate_spark_u
045737 3D 57 04    0256*      dl activate_null_tile  ;  activate_flame_r
04573A 3D 57 04    0257*      dl activate_null_tile  ;  activate_flame_u
04573D             0258*  ; end tile_activation_routines
04573D             0259*  
04573D             0260*  activate_null_tile:
04573D C9          0261*      ret ; dummy routine, do nothing
04573E             0262*  
04573E             0263*  ; ld_act_laser_turret:
04573E             0264*  ;     ; call sprite_variables_to_stack
04573E             0265*  
04573E             0266*  ;     ld hl,move_laser_turret
04573E             0267*  ;     ld (sprite_move_program),hl
04573E             0268*  
04573E             0269*  ;     xor a
04573E             0270*  ;     ld (sprite_animation),a
04573E             0271*  ;     ld (sprite_move_step),a
04573E             0272*  
04573E             0273*  ;     call rand_8     ; snag a random number
04573E             0274*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04573E             0275*  ;     add a,64 ; range is now 64-127
04573E             0276*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
04573E             0277*  
04573E             0278*  ;     ld a,%10 ; collides with laser but not player
04573E             0279*  ;     ld (iy+sprite_collisions),a
04573E             0280*  
04573E             0281*  ;     ld a,#10 ; BCD
04573E             0282*  ;     ld (sprite_points),a
04573E             0283*  ;     ld a,0 ; binary
04573E             0284*  ;     ld (sprite_shield_damage),a
04573E             0285*  
04573E             0286*  ;     ld hl,tile_fireball_turret ; dt_ld_act loads this to sprite_base_bufferId
04573E             0287*  ;     jp dt_ld_act
04573E             0288*  
04573E             0289*  
04573E             0290*  ; ; moves active tile sprites down one pixel in sync with tiles movement
04573E             0291*  ; ; deletes sprites from table when they wrap around to top of screen
04573E             0292*  ; move_active_tiles:
04573E             0293*  ; ; get current position
04573E             0294*  ;     ld a,(sprite_y+1) ; we only need the integer part
04573E             0295*  ;     inc a
04573E             0296*  ; ; are we at the bottom of the screen?
04573E             0297*  ;     jr nz,move_active_tiles_draw_sprite ; nope
04573E             0298*  ; ; otherwise kill sprite
04573E             0299*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
04573E             0300*  ;     ld (iy+sprite_collisions),a
04573E             0301*  ;     ret ; debug
04573E             0302*  ; move_active_tiles_draw_sprite:
04573E             0303*  ;     ld (sprite_y+1),a ; update tile y position integer part
04573E             0304*  ;     ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04573E             0305*  ;     ; call vdu_bmp_draw ; convert to vdu_bmp_plot ; draw it
04573E             0306*  ;     ret ; and done
04573E             0307*  
04573E             0308*  
04573E             0309*  ; move_landing_pad:
04573E             0310*  ;     call move_active_tiles
04573E             0311*  ;     call check_collisions
04573E             0312*  ; ; is it time to launch an enemy?
04573E             0313*  ;     ld hl,sprite_move_timer
04573E             0314*  ;     dec (hl)
04573E             0315*  ;     jp nz,move_enemies_loop_return
04573E             0316*  ;     call enemy_spawn_seeker
04573E             0317*  ;     ; reset move timer so can spawn again if player doesn't take us out
04573E             0318*  ;     call rand_8     ; snag a random number
04573E             0319*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04573E             0320*  ;     add a,64 ; range is now 64-127
04573E             0321*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
04573E             0322*  ;     ret
04573E             0323*  
04573E             0324*  
04573E             0325*  ; move_laser_turret:
04573E             0326*  ; ; compute orientation to player
04573E             0327*  ;     call orientation_to_player
04573E             0328*  ; ; h.l 8.8 fixed angle256 to player
04573E             0329*  ; ; bc and de as signed 16-bit integers
04573E             0330*  ; ; representing delta-x/y *to* target respectively
04573E             0331*  ;     ld (Bearing_t),hl
04573E             0332*  ;     ld hl,0x0400
04573E             0333*  ;     ld (Vp),hl
04573E             0334*  ;     call targeting_computer
04573E             0335*  ;     ld (sprite_heading),hl ; store bearing to player
04573E             0336*  ; ; is it time to launch a fireball?
04573E             0337*  ;     ld hl,sprite_move_timer
04573E             0338*  ;     dec (hl)
04573E             0339*  ;     jp nz,move_laser_turret_boilerplate
04573E             0340*  ;     call fireballs_init
04573E             0341*  ;     ; reset move timer so can fire again if player doesn't take us out
04573E             0342*  ;     call rand_8     ; snag a random number
04573E             0343*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04573E             0344*  ;     add a,64 ; range is now 64-127
04573E             0345*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
04573E             0346*  ; move_laser_turret_boilerplate:
04573E             0347*  ;     call move_active_tiles
04573E             0348*  ;     call check_collisions
04573E             0349*  ;     ret
04573E             0350*  
04573E             0351*  
04573E             0352*  ; fireballs_init:
04573E             0353*  ;     ; call sprite_variables_to_stack
04573E             0354*  
04573E             0355*  ;     ld hl,fireballs
04573E             0356*  ;     ld (sprite_base_bufferId),hl
04573E             0357*  
04573E             0358*  ;     ld hl,move_fireballs
04573E             0359*  ;     ld (sprite_move_program),hl
04573E             0360*  
04573E             0361*  ;     ld a,%11 ; collides with laser and player
04573E             0362*  ;     ld (iy+sprite_collisions),a
04573E             0363*  
04573E             0364*  ;     ld hl,(Vp)
04573E             0365*  ;     ld (sprite_vel),hl
04573E             0366*  ;     ld hl,(Vp_x)
04573E             0367*  ;     ld (sprite_xvel),hl
04573E             0368*  ;     ld hl,(Vp_y)
04573E             0369*  ;     inc h ; account for ground movement
04573E             0370*  ;     ld (sprite_yvel),hl
04573E             0371*  
04573E             0372*  ;     xor a ; zero a
04573E             0373*  ;     ld (sprite_animation),a
04573E             0374*  ;     ld (sprite_move_step),a
04573E             0375*  ;     ld (sprite_move_timer),a
04573E             0376*  
04573E             0377*  ;     ld a,6 ; 1/10th of a second timer
04573E             0378*  ;     ld (sprite_animation_timer),a
04573E             0379*  
04573E             0380*  ;     ld a,0x00 ; BCD
04573E             0381*  ;     ld (sprite_points),a
04573E             0382*  ;     ld a,1 ; binary
04573E             0383*  ;     ld (sprite_shield_damage),a
04573E             0384*  
04573E             0385*  ;     call table_add_record ; plops that on the sprite stack for later
04573E             0386*  ;     ; call sprite_variables_from_stack ; come back to where we started
04573E             0387*  ;     ret
04573E             0059       include "tile_pad_small.inc"
04573E             0001*  pad_small_defaults:
04573E 81          0002*      db tile_pad_small | 128       ; type
04573F 0A 01 00    0003*      dl BUF_PAD              ; base_bufferId
045742 5B 57 04    0004*      dl move_pad_small       ; move_program
045745 02          0005*      db collides_with_laser  ; collisions
045746 10          0006*      db 16                   ; dim_x
045747 10          0007*      db 16                   ; dim_y
045748 01          0008*      db 1                    ; num_orientations
045749 01          0009*      db 1                    ; num_animations
04574A 00          0010*      db 0                    ; animation
04574B 00          0011*      db 0                    ; animation_timer
04574C 18          0012*      db 24                   ; move_timer
04574D 00          0013*      db 0                    ; move_step
04574E 05          0014*      db 5                    ; points
04574F 00          0015*      db 0                    ; shield_damage
045750             0016*  
045750             0017*  activate_pad_small:
045750 FD 21 3E 57 0018*      ld iy,pad_small_defaults
       04          
045755             0019*  ; get next available sprite id
045755 CD 97 56 04 0020*      call spawn_sprite_from_tile
045759 D0          0021*      ret nc ; no carry means no free sprite slots, so we go home
04575A             0022*  ; TODO: other specific initialization
04575A C9          0023*      ret
04575B             0024*  ; end activate_pad_small
04575B             0025*  
04575B             0026*  move_pad_small:
04575B CD E1 56 04 0027*      call move_active_tile
04575F B7          0028*      or a ; a will be non-zero if have scrolled off screen
045760 C2 59 51 04 0029*      jp nz,table_deactivate_sprite
045764             0030*  ; check collisions
045764 CD AE 1B 04 0031*      call check_enemy_collisions
045768 B7          0032*      or a ; a will be non-zero if have collided with player or laser
045769 C0          0033*      ret nz ; we're dead so nothing more to do
04576A             0034*  ; still on screen so draw the sprite
04576A FD 07 01    0035*      ld bc,(iy+sprite_x)
04576D FD 17 04    0036*      ld de,(iy+sprite_y)
045770 CD 4E 1A 04 0037*      call vdu_sprite_move_abs168
045774             0038*  ; check whether it is time to spawn a seeker
045774 FD 35 24    0039*      dec (iy+sprite_move_timer)
045777 C0          0040*      ret nz
045778 3E 18       0041*      ld a,24
04577A FD 77 24    0042*      ld (iy+sprite_move_timer),a
04577D CD 4A 1C 04 0043*      call enemy_spawn_seeker
045781 C9          0044*      ret
045782             0060   
045782             0061   ; --- MAIN PROGRAM FILE ---
045782 57 65 6C 63 0062   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04579D 4C 6F 61 64 0063   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
0457A8 4C 6F 61 64 0064   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0457B6 50 72 65 73 0065   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0457D1             0066   
0457D1             0067   init:
0457D1             0068   ; clear all buffers
0457D1 CD 77 16 04 0069       call vdu_clear_all_buffers
0457D5             0070   
0457D5             0071   ; set up the display
0457D5 3E 08       0072       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
0457D7 CD 61 15 04 0073       call vdu_set_screen_mode
0457DB AF          0074       xor a
0457DC CD 72 15 04 0075       call vdu_set_scaling
0457E0             0076   
0457E0             0077   ; ; enable additional audio channels
0457E0             0078   ; 	call vdu_enable_channels
0457E0             0079   
0457E0             0080   ; set text background color
0457E0 3E 9A       0081       ld a,26+128 ; violet
0457E2 CD C9 14 04 0082       call vdu_colour_text
0457E6             0083   
0457E6             0084   ; set text foreground color
0457E6 3E 2F       0085       ld a,47 ; aaaaff lavenderish
0457E8 CD C9 14 04 0086       call vdu_colour_text
0457EC             0087   
0457EC             0088   ; set gfx bg color
0457EC AF          0089       xor a ; plotting mode 0
0457ED 3E 9A       0090       ld a,26+128 ; violet
0457EF CD DA 14 04 0091       call vdu_gcol
0457F3 CD 98 14 04 0092       call vdu_cls
0457F7             0093   
0457F7             0094   ; set the cursor off
0457F7 CD 60 14 04 0095       call vdu_cursor_off
0457FB             0096   
0457FB             0097   ; VDU 28, left, bottom, right, top: Set text viewport **
0457FB             0098   ; MIND THE LITTLE-ENDIANESS
0457FB             0099   ; inputs: c=left,b=bottom,e=right,d=top
0457FB 0E 00       0100       ld c,0 ; left
0457FD 16 1D       0101       ld d,29 ; top
0457FF 1E 27       0102       ld e,39 ; right
045801 06 1D       0103       ld b,29; bottom
045803 CD F1 14 04 0104       call vdu_set_txt_viewport
045807             0105   
045807             0106   ; print loading ui message
045807 21 9D 57 04 0107       ld hl,loading_ui
04580B CD 77 00 04 0108       call printString
04580F CD 9D 14 04 0109       call vdu_flip
045813             0110   
045813             0111   ; load UI images
045813 CD A6 12 04 0112       call load_ui_images
045817             0113   
045817             0114   ; load sprites
045817 CD E4 11 04 0115       call img_load_init ; sets up the animated load screen
04581B CD B9 12 04 0116       call load_sprite_images
04581F             0117   
04581F             0118   ; load tileset_ptrs
04581F CD CA 12 04 0119       call load_tilesets
045823             0120   
045823             0121   ; ; load sound effects ; TODO
045823             0122   ; 	ld bc,SFX_num_buffers
045823             0123   ; 	ld hl,SFX_buffer_id_lut
045823             0124   ; 	ld (cur_buffer_id_lut),hl
045823             0125   ; 	ld hl,SFX_load_routines_table
045823             0126   ; 	ld (cur_load_jump_table),hl
045823             0127   ; 	call sfx_load_main
045823             0128   
045823             0129   ; print loading complete message and wait for user keypress
045823             0130       ; call vdu_cls
045823             0131       ; ld hl,loading_complete
045823             0132       ; call printString
045823 CD 9D 14 04 0133       call vdu_flip
045827 CD 25 06 04 0134       call waitKeypress
04582B             0135   
04582B             0136   ; set up display for gameplay
04582B             0137       ; ld a,8
04582B 3E 14       0138       ld a,20
04582D CD 61 15 04 0139       call vdu_set_screen_mode
045831 AF          0140       xor a
045832 CD 72 15 04 0141       call vdu_set_scaling
045836 CD 60 14 04 0142       call vdu_cursor_off
04583A             0143   ; load fonts
04583A CD AA 11 04 0144   	call fonts_load
04583E             0145   ; select font
04583E 21 05 FA 00 0146       ld hl,computer_pixel_7_8x16
045842 3E 01       0147       ld a,1 ; flags
045844 CD 2E 18 04 0148       call vdu_font_select
045848             0149   ; plot bezel art
045848 21 00 00 00 0150       ld hl,BUF_BEZEL_L
04584C CD 85 15 04 0151       call vdu_buff_select
045850 01 00 00 00 0152       ld bc,0
045854 11 00 00 00 0153       ld de,0
045858 CD E1 18 04 0154       call vdu_plot_bmp
04585C 21 01 00 00 0155       ld hl,BUF_BEZEL_R
045860 CD 85 15 04 0156       call vdu_buff_select
045864 01 80 01 00 0157       ld bc,384
045868 11 00 00 00 0158       ld de,0
04586C CD E1 18 04 0159       call vdu_plot_bmp
045870             0160   ; set gfx origin and viewport to playing field window
045870 01 80 00 00 0161       ld bc,origin_left
045874 11 00 00 00 0162       ld de,origin_top
045878 CD 1D 15 04 0163       call vdu_set_gfx_origin
04587C 01 00 00 00 0164       ld bc,field_left
045880 11 00 00 00 0165       ld de,field_top
045884 DD 21 FF 00 0166       ld ix,field_right
       00          
045889 FD 21 7F 01 0167       ld iy,field_bottom
       00          
04588E CD 38 15 04 0168       call vdu_set_gfx_viewport
045892             0169   ; set background color
045892 3E 9A       0170       ld a,26+128 ; violet
045894 CD DA 14 04 0171       call vdu_gcol
045898 CD AB 14 04 0172       call vdu_clg
04589C             0173   ; VDU 28, left, bottom, right, top: Set text viewport **
04589C 0E 00       0174       ld c,0 ; left
04589E 16 00       0175       ld d,0 ; top
0458A0 1E 3E       0176       ld e,62 ; right
0458A2 06 28       0177       ld b,40; bottom
0458A4 CD F1 14 04 0178       call vdu_set_txt_viewport
0458A8             0179   
0458A8             0180   ; initialize the global timestamp
0458A8 CD D4 13 04 0181       call timestamp_tick
0458AC             0182   
0458AC             0183   ; done with init
0458AC C9          0184       ret
0458AD             0185   
0458AD             0186   main:
0458AD             0187   ; start a new game
0458AD CD A4 54 04 0188       call game_initialize
0458B1             0189   
0458B1             0190   main_loop:
0458B1             0191   ; update the global timestamp
0458B1 CD D4 13 04 0192       call timestamp_tick
0458B5             0193   
0458B5             0194   ; do gamestate logic
0458B5 CD 90 54 04 0195       call do_game
0458B9             0196   
0458B9             0197   ; wait for the next vblank mitigate flicker and for loop timing
0458B9 CD 0C 15 04 0198       call vdu_vblank
0458BD             0199   
0458BD             0200   ; poll keyboard for escape keypress
0458BD 3E 08       0201       ld a, $08 ; code to send to MOS
0458BF 5B CF       0202       rst.lil $08 ; get IX pointer to System Variables
0458C1             0203   
0458C1 DD 7E 05    0204       ld a, (ix + $05) ; get ASCII code of key pressed
0458C4 FE 1B       0205       cp 27 ; check if 27 (ascii code for ESC)
0458C6 CA CE 58 04 0206       jp z, main_end ; if pressed, jump to exit
0458CA             0207   
0458CA C3 B1 58 04 0208       jp main_loop
0458CE             0209   
0458CE             0210   main_end:
0458CE CD 52 14 04 0211       call vdu_cursor_on
0458D2 C9          0212       ret
0458D3             0213   
0458D3             0214   DEBUG_PRINT:
0458D3             0215       PUSH_ALL
0458D3 08          0001M      ex af,af'
0458D4 D9          0002M      exx
0458D5 F5          0003M      push af
0458D6 E5          0004M      push hl
0458D7 C5          0005M      push bc
0458D8 D5          0006M      push de
0458D9             0007M  
0458D9 08          0008M      ex af,af'
0458DA D9          0009M      exx
0458DB F5          0010M      push af
0458DC E5          0011M      push hl
0458DD C5          0012M      push bc
0458DE D5          0013M      push de
0458DF DD E5       0014M      push ix
0458E1 FD E5       0015M      push iy
0458E3 0E 00       0216       ld c,score_x
0458E5 06 08       0217       ld b,score_y+7
0458E7 CD 84 14 04 0218       call vdu_move_cursor
0458EB             0219       POP_ALL
0458EB FD E1       0001M      pop iy
0458ED DD E1       0002M      pop ix
0458EF D1          0003M      pop de
0458F0 C1          0004M      pop bc
0458F1 E1          0005M      pop hl
0458F2 F1          0006M      pop af
0458F3 08          0007M      ex af,af'
0458F4 D9          0008M      exx
0458F5             0009M  
0458F5 D1          0010M      pop de
0458F6 C1          0011M      pop bc
0458F7 E1          0012M      pop hl
0458F8 F1          0013M      pop af
0458F9 08          0014M      ex af,af'
0458FA D9          0015M      exx
0458FB             0220       PUSH_ALL
0458FB 08          0001M      ex af,af'
0458FC D9          0002M      exx
0458FD F5          0003M      push af
0458FE E5          0004M      push hl
0458FF C5          0005M      push bc
045900 D5          0006M      push de
045901             0007M  
045901 08          0008M      ex af,af'
045902 D9          0009M      exx
045903 F5          0010M      push af
045904 E5          0011M      push hl
045905 C5          0012M      push bc
045906 D5          0013M      push de
045907 DD E5       0014M      push ix
045909 FD E5       0015M      push iy
04590B CD C4 05 04 0221       call dumpFlags
04590F             0222       POP_ALL
04590F FD E1       0001M      pop iy
045911 DD E1       0002M      pop ix
045913 D1          0003M      pop de
045914 C1          0004M      pop bc
045915 E1          0005M      pop hl
045916 F1          0006M      pop af
045917 08          0007M      ex af,af'
045918 D9          0008M      exx
045919             0009M  
045919 D1          0010M      pop de
04591A C1          0011M      pop bc
04591B E1          0012M      pop hl
04591C F1          0013M      pop af
04591D 08          0014M      ex af,af'
04591E D9          0015M      exx
04591F             0223       PUSH_ALL
04591F 08          0001M      ex af,af'
045920 D9          0002M      exx
045921 F5          0003M      push af
045922 E5          0004M      push hl
045923 C5          0005M      push bc
045924 D5          0006M      push de
045925             0007M  
045925 08          0008M      ex af,af'
045926 D9          0009M      exx
045927 F5          0010M      push af
045928 E5          0011M      push hl
045929 C5          0012M      push bc
04592A D5          0013M      push de
04592B DD E5       0014M      push ix
04592D FD E5       0015M      push iy
04592F CD 26 04 04 0224       call dumpRegistersHex
045933 CD 25 06 04 0225       call waitKeypress
045937             0226       POP_ALL
045937 FD E1       0001M      pop iy
045939 DD E1       0002M      pop ix
04593B D1          0003M      pop de
04593C C1          0004M      pop bc
04593D E1          0005M      pop hl
04593E F1          0006M      pop af
04593F 08          0007M      ex af,af'
045940 D9          0008M      exx
045941             0009M  
045941 D1          0010M      pop de
045942 C1          0011M      pop bc
045943 E1          0012M      pop hl
045944 F1          0013M      pop af
045945 08          0014M      ex af,af'
045946 D9          0015M      exx
045947 C9          0227       ret

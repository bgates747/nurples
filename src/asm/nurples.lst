PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 44 8D 04 0015        call init
040050 CD 38 8E 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,$+6 ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*       ENDMACRO
040060             0072*   
040060             0073*   ; Simulated call to subroutine at IX
040060             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*   ; outputs: whatever the subroutine does, including IX and BC
040060             0076*   ; destroys: only what the subroutine does, but always BC
040060             0077*       MACRO CALL_IX
040060             0078*       ld bc,$+6 ; Address of first instruction after the jump
040060             0079*       push bc ; which constitutes the return address
040060             0080*       jp (ix) ; Jump to the address in IX
040060             0081*       ENDMACRO
040060             0082*   
040060             0083*   ; Simulated call to soubroutinte at IY
040060             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*   ; outputs: whatever the subroutine does, including IY and BC
040060             0086*   ; destroys: only what the subroutine does, but always BC
040060             0087*       MACRO CALL_IY
040060             0088*       ld bc,$+6 ; Address of first instruction after the jump
040060             0089*       push bc ; which constitutes the return address
040060             0090*       jp (iy) ; Jump to the address in IY
040060             0091*       ENDMACRO
040060             0092*   
040060             0093*   ; put the value in HLU into A
040060             0094*   ; destroys: af
040060             0095*       MACRO HLU_TO_A
040060             0096*       dec sp ; 1 cycle
040060             0097*       push hl ; 4 cycles
040060             0098*       inc sp ; 1 cycle
040060             0099*       pop af ; 4 cycles
040060             0100*       ; 10 cycles total
040060             0101*       ENDMACRO
040060             0102*   
040060             0103*       MACRO PUSH_ALL
040060             0104*       ex af,af'
040060             0105*       exx
040060             0106*       push af
040060             0107*       push hl
040060             0108*       push bc
040060             0109*       push de
040060             0110*   
040060             0111*       ex af,af'
040060             0112*       exx
040060             0113*       push af
040060             0114*       push hl
040060             0115*       push bc
040060             0116*       push de
040060             0117*       push ix
040060             0118*       push iy
040060             0119*       ENDMACRO
040060             0120*   
040060             0121*       MACRO POP_ALL
040060             0122*       pop iy
040060             0123*       pop ix
040060             0124*       pop de
040060             0125*       pop bc
040060             0126*       pop hl
040060             0127*       pop af
040060             0128*       ex af,af'
040060             0129*       exx
040060             0130*   
040060             0131*       pop de
040060             0132*       pop bc
040060             0133*       pop hl
040060             0134*       pop af
040060             0135*       ex af,af'
040060             0136*       exx
040060             0137*       ENDMACRO
040060             0031        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   printHexA:
04014A F5          0076*       push af
04014B C5          0077*       push bc
04014C CD 35 01 04 0078*       call printHex8
040150 3E 20       0079*       ld a,' '
040152 5B D7       0080*       rst.lil 10h
040154 C1          0081*       pop bc
040155 F1          0082*       pop af
040156 C9          0083*       ret
040157             0084*   
040157             0085*   printHexHL:
040157 F5          0086*       push af
040158 C5          0087*       push bc
040159 CD 2F 01 04 0088*       call printHex16
04015D 3E 20       0089*       ld a,' '
04015F 5B D7       0090*       rst.lil 10h
040161 C1          0091*       pop bc
040162 F1          0092*       pop af
040163 C9          0093*       ret
040164             0094*   
040164             0095*   printHexUHL:
040164 F5          0096*       push af
040165 C5          0097*       push bc
040166 CD 27 01 04 0098*       call printHex24
04016A 3E 20       0099*       ld a,' '
04016C 5B D7       0100*       rst.lil 10h
04016E C1          0101*       pop bc
04016F F1          0102*       pop af
040170 C9          0103*       ret
040171             0104*   
040171             0105*   printHexAUHL:
040171 F5          0106*       push af
040172 C5          0107*       push bc
040173 CD 35 01 04 0108*       call printHex8
040177 3E 2E       0109*       ld a,'.'
040179 5B D7       0110*       rst.lil 10h
04017B CD 27 01 04 0111*       call printHex24
04017F 3E 20       0112*       ld a,' '
040181 5B D7       0113*       rst.lil 10h
040183 C1          0114*       pop bc
040184 F1          0115*       pop af
040185 C9          0116*       ret
040186             0117*   
040186             0118*   printHexABHL:
040186             0119*   ; preserve registers
040186 C5          0120*       push bc ; b will be ok c will not
040187 F5          0121*       push af ; will get totally destroyed
040188             0122*   ; print a
040188 CD 35 01 04 0123*       call printHex8
04018C             0124*   ; print b
04018C 78          0125*       ld a,b
04018D CD 35 01 04 0126*       call printHex8
040191             0127*   ; print hl
040191 CD 2F 01 04 0128*       call printHex16
040195             0129*   ; restore registers
040195 F1          0130*       pop af
040196 C1          0131*       pop bc
040197 C9          0132*       ret
040198             0133*   
040198             0134*   printHexBHL:
040198             0135*   ; preserve registers
040198 C5          0136*       push bc ; b will be ok c will not
040199 F5          0137*       push af ; will get totally destroyed
04019A             0138*   ; print b
04019A 78          0139*       ld a,b
04019B CD 35 01 04 0140*       call printHex8
04019F             0141*   ; print hl
04019F CD 2F 01 04 0142*       call printHex16
0401A3             0143*   ; restore registers
0401A3 F1          0144*       pop af
0401A4 C1          0145*       pop bc
0401A5 C9          0146*       ret
0401A6             0147*   
0401A6             0148*   printHexCDE:
0401A6             0149*   ; preserve registers
0401A6 C5          0150*       push bc ; b will be ok c will not
0401A7 F5          0151*       push af ; will get totally destroyed
0401A8             0152*   ; print c
0401A8 79          0153*       ld a,c
0401A9 CD 35 01 04 0154*       call printHex8
0401AD             0155*   ; print de
0401AD EB          0156*       ex de,hl
0401AE CD 2F 01 04 0157*       call printHex16
0401B2 EB          0158*       ex de,hl
0401B3             0159*   ; restore registers
0401B3 F1          0160*       pop af
0401B4 C1          0161*       pop bc
0401B5 C9          0162*       ret
0401B6             0163*   
0401B6             0164*   printHexUIX:
0401B6             0165*   ; store everything in scratch
0401B6 22 42 06 04 0166*       ld (uhl),hl
0401BA ED 43 45 06 0167*       ld (ubc),bc
       04          
0401BF ED 53 48 06 0168*       ld (ude),de
       04          
0401C4 DD 22 4B 06 0169*       ld (uix),ix
       04          
0401C9 FD 22 4E 06 0170*       ld (uiy),iy
       04          
0401CE F5          0171*       push af ; fml
0401CF             0172*   
0401CF 21 D9 05 04 0173*       ld hl,str_ixu
0401D3 CD 07 01 04 0174*       call printString
0401D7 2A 4B 06 04 0175*       ld hl,(uix)
0401DB CD 27 01 04 0176*       call printHex24
0401DF CD 1C 01 04 0177*       call printNewLine
0401E3             0178*   
0401E3             0179*   ; restore everything
0401E3 2A 42 06 04 0180*       ld hl, (uhl)
0401E7 ED 4B 45 06 0181*       ld bc, (ubc)
       04          
0401EC ED 5B 48 06 0182*       ld de, (ude)
       04          
0401F1 DD 2A 4B 06 0183*       ld ix, (uix)
       04          
0401F6 FD 2A 4E 06 0184*       ld iy, (uiy)
       04          
0401FB F1          0185*       pop af
0401FC             0186*   ; all done
0401FC C9          0187*       ret
0401FD             0188*   
0401FD             0189*   ; Print a 0x HEX prefix
0401FD             0190*   DisplayHexPrefix:
0401FD 3E 30       0191*       LD A, '0'
0401FF 5B D7       0192*       RST.LIL 10h
040201 3E 78       0193*       LD A, 'x'
040203 5B D7       0194*       RST.LIL 10h
040205 C9          0195*       RET
040206             0196*   
040206             0197*       MACRO printDecBC
040206             0198*       push hl
040206             0199*       push bc
040206             0200*       pop hl
040206             0201*       call printDec
040206             0202*       pop hl
040206             0203*       ENDMACRO
040206             0204*   
040206             0205*       MACRO printDecDE
040206             0206*       push hl
040206             0207*       push de
040206             0208*       pop hl
040206             0209*       call printDec
040206             0210*       pop hl
040206             0211*       ENDMACRO
040206             0212*   
040206             0213*       MACRO printDecHL
040206             0214*       call printDec
040206             0215*       ENDMACRO
040206             0216*   
040206             0217*       MACRO printDecIX
040206             0218*       push hl
040206             0219*       push ix
040206             0220*       pop hl
040206             0221*       call printDec
040206             0222*       pop hl
040206             0223*       ENDMACRO
040206             0224*   
040206             0225*       MACRO printDecIY
040206             0226*       push hl
040206             0227*       push iy
040206             0228*       pop hl
040206             0229*       call printDec
040206             0230*       pop hl
040206             0231*       ENDMACRO
040206             0232*   
040206             0233*   
040206             0234*   ; Prints the right justified decimal value in HL without leading zeroes
040206             0235*   ; HL : Value to print
040206             0236*   ; preserves all registers and flags
040206             0237*   printDec:
040206             0238*   ; BEGIN MY CODE
040206             0239*   ; back up all the things
040206 F5          0240*       push af
040207 C5          0241*       push bc
040208 D5          0242*       push de
040209 E5          0243*       push hl
04020A             0244*   ; END MY CODE
04020A 11 32 02 04 0245*       LD DE, _printDecBuffer
04020E CD 42 02 04 0246*       CALL u24_to_ascii
040212             0247*   ; BEGIN MY CODE
040212             0248*   ; replace leading zeroes with spaces
040212 21 32 02 04 0249*       LD HL, _printDecBuffer
040216 06 07       0250*       ld B, 7 ; if HL was 0, we want to keep the final zero
040218             0251*   @loop:
040218 7E          0252*       LD A, (HL)
040219 FE 30       0253*       CP '0'
04021B C2 25 02 04 0254*       JP NZ, @done
04021F 3E 20       0255*       LD A, ' '
040221 77          0256*       LD (HL), A
040222 23          0257*       INC HL
040223             0258*       ; CALL vdu_cursor_forward
040223 10 F3       0259*       DJNZ @loop
040225             0260*   @done:
040225             0261*   ; END MY CODE
040225 21 32 02 04 0262*       LD HL, _printDecBuffer
040229 CD 07 01 04 0263*       CALL printString
04022D             0264*   ; BEGIN MY CODE
04022D             0265*   ; restore all the things
04022D E1          0266*       pop hl
04022E D1          0267*       pop de
04022F C1          0268*       pop bc
040230 F1          0269*       pop af
040231             0270*   ; END MY CODE
040231 C9          0271*       RET
040232 00 00 00 00 0272*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040242             0273*   
040242             0274*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040242             0275*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040242             0276*   ; so it will allways be 8 characters length
040242             0277*   ; HL : Value to convert to string
040242             0278*   ; DE : pointer to buffer, at least 8 byte + 0
040242             0279*   u24_to_ascii:
040242 01 80 69 67 0280*       LD BC,-10000000
040246 CD 79 02 04 0281*       CALL @one_digit
04024A 01 C0 BD F0 0282*       LD BC,-1000000
04024E CD 79 02 04 0283*       CALL @one_digit
040252 01 60 79 FE 0284*       LD BC,-100000
040256 CD 79 02 04 0285*       CALL @one_digit
04025A 01 F0 D8 FF 0286*       LD BC,-10000
04025E CD 79 02 04 0287*       CALL @one_digit
040262 01 18 FC FF 0288*       LD BC,-1000
040266 CD 79 02 04 0289*       CALL @one_digit
04026A 01 9C FF FF 0290*       LD BC,-100
04026E CD 79 02 04 0291*       CALL @one_digit
040272 0E F6       0292*       LD C,-10
040274 CD 79 02 04 0293*       CALL @one_digit
040278 48          0294*       LD C,B
040279             0295*   @one_digit:
040279 3E 2F       0296*       LD A,'0'-1
04027B             0297*   @divide_me:
04027B 3C          0298*       INC A
04027C 09          0299*       ADD HL,BC
04027D 38 FC       0300*       JR C,@divide_me
04027F ED 42       0301*       SBC HL,BC
040281 12          0302*       LD (DE),A
040282 13          0303*       INC DE
040283 C9          0304*       RET
040284             0305*   
040284             0306*   print_u24:
040284 D5          0307*       push de
040285 E5          0308*       push hl
040286 11 32 02 04 0309*       ld de,_printDecBuffer
04028A CD 42 02 04 0310*       call u24_to_ascii
04028E 21 32 02 04 0311*       ld hl,_printDecBuffer
040292 CD 07 01 04 0312*       call printString
040296 3E 20       0313*       ld a,' '
040298 5B D7       0314*       rst.lil 10h
04029A E1          0315*       pop hl
04029B D1          0316*       pop de
04029C C9          0317*       ret
04029D             0318*   
04029D             0319*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04029D             0320*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04029D             0321*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04029D             0322*   u168_to_ascii:
04029D             0323*   ; add a leading space to make room for sign flag if needed
04029D 3E 20       0324*       ld a,' '
04029F 12          0325*       ld (de),a
0402A0 13          0326*       inc de
0402A1             0327*   ; Convert integer part
0402A1 E5          0328*       push hl ; Save HL (we’ll need the fractional part later)
0402A2             0329*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0402A2             0330*       SRL_UHL ; Shift to get integer portion in HL
0402A2 3B          0001*M1     dec sp ; 1 cycle
0402A3 E5          0002*M1     push hl ; 4 cycles
0402A4 33          0003*M1     inc sp ; 1 cycle
0402A5 E1          0004*M1     pop hl ; 4 cycles
0402A6 23          0005*M1     inc hl ; 1 cycle
0402A7 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0402A9             0007*M1     ; 13 cycles total
0402A9 01 F0 D8 FF 0331*       ld bc, -10000
0402AD CD D0 02 04 0332*       call @one_int
0402B1 01 18 FC FF 0333*       ld bc, -1000
0402B5 CD D0 02 04 0334*       call @one_int
0402B9 01 9C FF FF 0335*       ld bc, -100
0402BD CD D0 02 04 0336*       call @one_int
0402C1 0E F6       0337*       ld c, -10
0402C3 CD D0 02 04 0338*       call @one_int
0402C7 48          0339*       ld c, b
0402C8 CD D0 02 04 0340*       call @one_int
0402CC C3 DB 02 04 0341*       jp @frac ; Jump to fractional part conversion
0402D0             0342*   @one_int:
0402D0 3E 2F       0343*       ld a, '0' - 1 ; Start ASCII character at '0'
0402D2             0344*   @divide_me:
0402D2 3C          0345*       inc a
0402D3 09          0346*       add hl, bc ; Accumulate until overflow
0402D4 38 FC       0347*       jr c, @divide_me
0402D6 ED 42       0348*       sbc hl, bc ; Remove excess after overflow
0402D8 12          0349*       ld (de), a ; Store ASCII digit
0402D9 13          0350*       inc de
0402DA C9          0351*       ret
0402DB             0352*   ; Convert fractional part
0402DB             0353*   @frac:
0402DB 3E 2E       0354*       ld a, '.' ; Decimal point
0402DD 12          0355*       ld (de), a
0402DE 13          0356*       inc de
0402DF E1          0357*       pop hl ; Restore HL with original fraction
0402E0 06 03       0358*       ld b, 3 ; Loop counter for 3 fractional digits
0402E2             0359*   @frac_loop:
0402E2 26 0A       0360*       ld h, 10 ; Load multiplier for fractional part
0402E4 ED 6C       0361*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402E6 3E 30       0362*       ld a, '0'
0402E8 84          0363*       add a, h ; Convert integer part to ASCII
0402E9 12          0364*       ld (de), a
0402EA 13          0365*       inc de
0402EB 10 F5       0366*       djnz @frac_loop ; Repeat for each fractional digit
0402ED             0367*   ; Add null terminator
0402ED AF          0368*       xor a ; Null terminator
0402EE 12          0369*       ld (de), a
0402EF C9          0370*       ret
0402F0             0371*   
0402F0             0372*   print_u168:
0402F0 D5          0373*       push de
0402F1 E5          0374*       push hl
0402F2 11 32 02 04 0375*       ld de,_printDecBuffer
0402F6 CD 9D 02 04 0376*       call u168_to_ascii
0402FA 21 32 02 04 0377*       ld hl,_printDecBuffer
0402FE CD 07 01 04 0378*       call printString
040302 E1          0379*       pop hl
040303 D1          0380*       pop de
040304 C9          0381*       ret
040305             0382*   
040305             0383*   ; signed version of u168_to_ascii
040305             0384*   s168_to_ascii:
040305 D5          0385*       push de ; save starting address of buffer
040306 CD 06 09 04 0386*       call hlu_abs
04030A F5          0387*       push af ; save sign flag
04030B CD 9D 02 04 0388*       call u168_to_ascii
04030F F1          0389*       pop af ; restore sign flag
040310 D1          0390*       pop de ; restore starting address of buffer
040311 F0          0391*       ret p ; hlu was positive so nothing to do
040312 3E 2D       0392*       ld a,'-'
040314 12          0393*       ld (de),a
040315 C9          0394*       ret
040316             0395*   
040316             0396*   print_s168:
040316 D5          0397*       push de
040317 E5          0398*       push hl
040318 11 32 02 04 0399*       ld de,_printDecBuffer
04031C CD 05 03 04 0400*       call s168_to_ascii
040320 21 32 02 04 0401*       ld hl,_printDecBuffer
040324 CD 07 01 04 0402*       call printString
040328 E1          0403*       pop hl
040329 D1          0404*       pop de
04032A C9          0405*       ret
04032B             0406*   
04032B             0407*   print_s168_hl:
04032B F5          0408*       push af
04032C E5          0409*       push hl
04032D CD 16 03 04 0410*       call print_s168
040331 3E 20       0411*       ld a,' '
040333 5B D7       0412*       rst.lil 10h
040335 E1          0413*       pop hl
040336 F1          0414*       pop af
040337 C9          0415*       ret
040338             0416*   
040338             0417*   print_s168_bc:
040338 F5          0418*       push af
040339 C5          0419*       push bc
04033A E5          0420*       push hl
04033B C5          0421*       push bc
04033C E1          0422*       pop hl
04033D CD 16 03 04 0423*       call print_s168
040341 3E 20       0424*       ld a,' '
040343 5B D7       0425*       rst.lil 10h
040345 E1          0426*       pop hl
040346 C1          0427*       pop bc
040347 F1          0428*       pop af
040348 C9          0429*       ret
040349             0430*   
040349             0431*   print_s168_de:
040349 F5          0432*       push af
04034A D5          0433*       push de
04034B E5          0434*       push hl
04034C EB          0435*       ex de,hl
04034D CD 16 03 04 0436*       call print_s168
040351 3E 20       0437*       ld a,' '
040353 5B D7       0438*       rst.lil 10h
040355 E1          0439*       pop hl
040356 D1          0440*       pop de
040357 F1          0441*       pop af
040358 C9          0442*       ret
040359             0443*   
040359             0444*   print_s168_hl_bc_de:
040359 F5          0445*       push af
04035A C5          0446*       push bc
04035B D5          0447*       push de
04035C E5          0448*       push hl
04035D CD 16 03 04 0449*       call print_s168
040361 3E 20       0450*       ld a,' '
040363 5B D7       0451*       rst.lil 10h
040365 C5          0452*       push bc
040366 E1          0453*       pop hl
040367 CD 16 03 04 0454*       call print_s168
04036B 3E 20       0455*       ld a,' '
04036D 5B D7       0456*       rst.lil 10h
04036F EB          0457*       ex de,hl
040370 CD 16 03 04 0458*       call print_s168
040374 3E 20       0459*       ld a,' '
040376 5B D7       0460*       rst.lil 10h
040378 E1          0461*       pop hl
040379 D1          0462*       pop de
04037A C1          0463*       pop bc
04037B F1          0464*       pop af
04037C C9          0465*       ret
04037D             0466*   
04037D             0467*   print_s168_bc_de:
04037D F5          0468*       push af
04037E C5          0469*       push bc
04037F D5          0470*       push de
040380 C5          0471*       push bc
040381 E1          0472*       pop hl
040382 CD 16 03 04 0473*       call print_s168
040386 3E 20       0474*       ld a,' '
040388 5B D7       0475*       rst.lil 10h
04038A EB          0476*       ex de,hl
04038B CD 16 03 04 0477*       call print_s168
04038F 3E 20       0478*       ld a,' '
040391 5B D7       0479*       rst.lil 10h
040393 E1          0480*       pop hl
040394 D1          0481*       pop de
040395 C1          0482*       pop bc
040396 F1          0483*       pop af
040397 C9          0484*       ret
040398             0485*   
040398             0486*   print_s168_a:
040398 F5          0487*       push af
040399 C5          0488*       push bc
04039A E5          0489*       push hl
04039B 21 00 00 00 0490*       ld hl,0
04039F 6F          0491*       ld l,a
0403A0 CD 2B 03 04 0492*       call print_s168_hl
0403A4 E1          0493*       pop hl
0403A5 C1          0494*       pop bc
0403A6 F1          0495*       pop af
0403A7 C9          0496*       ret
0403A8             0497*   
0403A8             0498*   ; #### new functions added by Brandon R. Gates ####
0403A8             0499*   
0403A8             0500*   ; print the binary representation of the 8-bit value in a
0403A8             0501*   ; destroys a, hl, bc
0403A8             0502*   printBin8:
0403A8 06 08       0503*       ld b,8 ; loop counter for 8 bits
0403AA 21 C5 03 04 0504*       ld hl,@cmd ; set hl to the low byte of the output string
0403AE             0505*       ; (which will be the high bit of the value in a)
0403AE             0506*   @loop:
0403AE 07          0507*       rlca ; put the next highest bit into carry
0403AF 38 04       0508*       jr c,@one
0403B1 36 30       0509*       ld (hl),'0'
0403B3 18 02       0510*       jr @next_bit
0403B5             0511*   @one:
0403B5 36 31       0512*       ld (hl),'1'
0403B7             0513*   @next_bit:
0403B7 23          0514*       inc hl
0403B8 10 F4       0515*       djnz @loop
0403BA             0516*   ; print it
0403BA 21 C5 03 04 0517*       ld hl,@cmd
0403BE 01 08 00 00 0518*       ld bc,@end-@cmd
0403C2 5B DF       0519*       rst.lil $18
0403C4 C9          0520*       ret
0403C5             0521*   @cmd: ds 8 ; eight bytes for eight bits
0403CD             0522*   @end:
0403CD             0523*   
0403CD             0524*   ; print the binary representation of the 8-bit value in a
0403CD             0525*   ; in reverse order (lsb first)
0403CD             0526*   ; destroys a, hl, bc
0403CD             0527*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403CD 06 08       0528*       ld b,8 ; loop counter for 8 bits
0403CF 21 EA 03 04 0529*       ld hl,@cmd ; set hl to the low byte of the output string
0403D3             0530*       ; (which will be the high bit of the value in a)
0403D3             0531*   @loop:
0403D3 0F          0532*       rrca ; put the next lowest bit into carry
0403D4 38 04       0533*       jr c,@one
0403D6 36 30       0534*       ld (hl),'0'
0403D8 18 02       0535*       jr @next_bit
0403DA             0536*   @one:
0403DA 36 31       0537*       ld (hl),'1'
0403DC             0538*   @next_bit:
0403DC 23          0539*       inc hl
0403DD 10 F4       0540*       djnz @loop
0403DF             0541*   ; print it
0403DF 21 EA 03 04 0542*       ld hl,@cmd
0403E3 01 08 00 00 0543*       ld bc,@end-@cmd
0403E7 5B DF       0544*       rst.lil $18
0403E9 C9          0545*       ret
0403EA             0546*   @cmd: ds 8 ; eight bytes for eight bits
0403F2             0547*   @end:
0403F2             0548*   
0403F2             0549*   ; print registers to screen in hexidecimal format
0403F2             0550*   ; inputs: none
0403F2             0551*   ; outputs: values of every register printed to screen
0403F2             0552*   ;    values of each register in global scratch memory
0403F2             0553*   ; destroys: nothing
0403F2             0554*   stepRegistersHex:
0403F2             0555*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403F2 22 42 06 04 0556*       ld (uhl),hl
0403F6 ED 43 45 06 0557*       ld (ubc),bc
       04          
0403FB ED 53 48 06 0558*       ld (ude),de
       04          
040400 DD 22 4B 06 0559*       ld (uix),ix
       04          
040405 FD 22 4E 06 0560*       ld (uiy),iy
       04          
04040A F5          0561*       push af ; fml
04040B E1          0562*       pop hl ; thanks, zilog
04040C 22 3F 06 04 0563*       ld (uaf),hl
040410 F5          0564*       push af ; dammit
040411             0565*   
040411             0566*   ; home the cursor
040411             0567*       ; call vdu_home_cursor
040411             0568*   
040411             0569*   ; print each register
040411 21 C5 05 04 0570*       ld hl,str_afu
040415 CD 07 01 04 0571*       call printString
040419 2A 3F 06 04 0572*       ld hl,(uaf)
04041D CD 27 01 04 0573*       call printHex24
040421 CD 1C 01 04 0574*       call printNewLine
040425             0575*   
040425 21 CA 05 04 0576*       ld hl,str_hlu
040429 CD 07 01 04 0577*       call printString
04042D 2A 42 06 04 0578*       ld hl,(uhl)
040431 CD 27 01 04 0579*       call printHex24
040435 CD 1C 01 04 0580*       call printNewLine
040439             0581*   
040439 21 CF 05 04 0582*       ld hl,str_bcu
04043D CD 07 01 04 0583*       call printString
040441 2A 45 06 04 0584*       ld hl,(ubc)
040445 CD 27 01 04 0585*       call printHex24
040449 CD 1C 01 04 0586*       call printNewLine
04044D             0587*   
04044D 21 D4 05 04 0588*       ld hl,str_deu
040451 CD 07 01 04 0589*       call printString
040455 2A 48 06 04 0590*       ld hl,(ude)
040459 CD 27 01 04 0591*       call printHex24
04045D CD 1C 01 04 0592*       call printNewLine
040461             0593*   
040461 21 D9 05 04 0594*       ld hl,str_ixu
040465 CD 07 01 04 0595*       call printString
040469 2A 4B 06 04 0596*       ld hl,(uix)
04046D CD 27 01 04 0597*       call printHex24
040471 CD 1C 01 04 0598*       call printNewLine
040475             0599*   
040475 21 DE 05 04 0600*       ld hl,str_iyu
040479 CD 07 01 04 0601*       call printString
04047D 2A 4E 06 04 0602*       ld hl,(uiy)
040481 CD 27 01 04 0603*       call printHex24
040485 CD 1C 01 04 0604*       call printNewLine
040489             0605*   
040489             0606*       ; call vsync
040489             0607*   
040489 CD 1C 01 04 0608*       call printNewLine
04048D             0609*   
04048D             0610*   ; check for right shift key and quit if pressed
04048D             0611*       MOSCALL mos_getkbmap
04048D 3E 1E       0001*M1 			LD	A, function
04048F 5B CF       0002*M1 			RST.LIL	08h
040491             0612*   @stayhere:
040491             0613*   ; 7 RightShift
040491 DD CB 00 76 0614*       bit 6,(ix+0)
040495 20 02       0615*       jr nz,@RightShift
040497 18 F8       0616*       jr @stayhere
040499             0617*   @RightShift:
040499 DD CB 0E 86 0618*       res 0,(ix+14) ; debounce the key (hopefully)
04049D 3E 80       0619*       ld a,%10000000
04049F             0620*       ; call multiPurposeDelay
04049F             0621*   
04049F             0622*   ; restore everything
04049F 2A 42 06 04 0623*       ld hl, (uhl)
0404A3 ED 4B 45 06 0624*       ld bc, (ubc)
       04          
0404A8 ED 5B 48 06 0625*       ld de, (ude)
       04          
0404AD DD 2A 4B 06 0626*       ld ix, (uix)
       04          
0404B2 FD 2A 4E 06 0627*       ld iy, (uiy)
       04          
0404B7 F1          0628*       pop af
0404B8             0629*   ; all done
0404B8 C9          0630*       ret
0404B9             0631*   
0404B9             0632*   ; print registers to screen in hexidecimal format
0404B9             0633*   ; inputs: none
0404B9             0634*   ; outputs: values of every register printed to screen
0404B9             0635*   ;    values of each register in global scratch memory
0404B9             0636*   ; destroys: nothing
0404B9             0637*   dumpRegistersHex:
0404B9             0638*   ; store everything in scratch
0404B9 22 42 06 04 0639*       ld (uhl),hl
0404BD ED 43 45 06 0640*       ld (ubc),bc
       04          
0404C2 ED 53 48 06 0641*       ld (ude),de
       04          
0404C7 DD 22 4B 06 0642*       ld (uix),ix
       04          
0404CC FD 22 4E 06 0643*       ld (uiy),iy
       04          
0404D1 F5          0644*       push af ; fml
0404D2 E1          0645*       pop hl ; thanks, zilog
0404D3 22 3F 06 04 0646*       ld (uaf),hl
0404D7 F5          0647*       push af ; dammit
0404D8             0648*   
0404D8             0649*   ; home the cursor
0404D8             0650*       ; call vdu_home_cursor
0404D8             0651*       ; call printNewLine
0404D8             0652*   
0404D8             0653*   ; print each register
0404D8 21 C5 05 04 0654*       ld hl,str_afu
0404DC CD 07 01 04 0655*       call printString
0404E0 2A 3F 06 04 0656*       ld hl,(uaf)
0404E4 CD 27 01 04 0657*       call printHex24
0404E8 CD 1C 01 04 0658*       call printNewLine
0404EC             0659*   
0404EC 21 CA 05 04 0660*       ld hl,str_hlu
0404F0 CD 07 01 04 0661*       call printString
0404F4 2A 42 06 04 0662*       ld hl,(uhl)
0404F8 CD 27 01 04 0663*       call printHex24
0404FC CD 1C 01 04 0664*       call printNewLine
040500             0665*   
040500 21 CF 05 04 0666*       ld hl,str_bcu
040504 CD 07 01 04 0667*       call printString
040508 2A 45 06 04 0668*       ld hl,(ubc)
04050C CD 27 01 04 0669*       call printHex24
040510 CD 1C 01 04 0670*       call printNewLine
040514             0671*   
040514 21 D4 05 04 0672*       ld hl,str_deu
040518 CD 07 01 04 0673*       call printString
04051C 2A 48 06 04 0674*       ld hl,(ude)
040520 CD 27 01 04 0675*       call printHex24
040524 CD 1C 01 04 0676*       call printNewLine
040528             0677*   
040528 21 D9 05 04 0678*       ld hl,str_ixu
04052C CD 07 01 04 0679*       call printString
040530 2A 4B 06 04 0680*       ld hl,(uix)
040534 CD 27 01 04 0681*       call printHex24
040538 CD 1C 01 04 0682*       call printNewLine
04053C             0683*   
04053C 21 DE 05 04 0684*       ld hl,str_iyu
040540 CD 07 01 04 0685*       call printString
040544 2A 4E 06 04 0686*       ld hl,(uiy)
040548 CD 27 01 04 0687*       call printHex24
04054C             0688*       ; call printNewLine
04054C             0689*   
04054C             0690*       ; call vdu_vblank
04054C             0691*   
04054C             0692*       ; call printNewLine
04054C             0693*   ; restore everything
04054C 2A 42 06 04 0694*       ld hl, (uhl)
040550 ED 4B 45 06 0695*       ld bc, (ubc)
       04          
040555 ED 5B 48 06 0696*       ld de, (ude)
       04          
04055A DD 2A 4B 06 0697*       ld ix, (uix)
       04          
04055F FD 2A 4E 06 0698*       ld iy, (uiy)
       04          
040564 F1          0699*       pop af
040565             0700*   ; all done
040565 C9          0701*       ret
040566             0702*   
040566             0703*   dumpRegistersHexPrime:
040566 D9          0704*       exx
040567 08          0705*       ex af,af'
040568 CD B9 04 04 0706*       call dumpRegistersHex
04056C 08          0707*       ex af,af'
04056D D9          0708*       exx
04056E C9          0709*       ret
04056F             0710*   
04056F             0711*   ; additionally dump prime registers
04056F             0712*   ; inputs: none
04056F             0713*   ; outputs: values of every register printed to screen
04056F             0714*   ; destroys: nothing
04056F             0715*   dumpRegistersHexAll:
04056F CD B9 04 04 0716*       call dumpRegistersHex
040573 08          0717*       ex af,af'
040574 D9          0718*       exx
040575 CD B9 04 04 0719*       call dumpRegistersHex
040579 08          0720*       ex af,af'
04057A D9          0721*       exx
04057B C9          0722*       ret
04057C             0723*   
04057C             0724*   ; print hlu to screen in hexidecimal format
04057C             0725*   ; inputs: none
04057C             0726*   ; destroys: nothing
04057C             0727*   print_hex_hl:
04057C F5          0728*       push af
04057D E5          0729*       push hl
04057E 21 CA 05 04 0730*       ld hl,str_hlu
040582 CD 07 01 04 0731*       call printString
040586 E1          0732*       pop hl
040587 E5          0733*       push hl
040588 CD 27 01 04 0734*       call printHex24
04058C 3E 20       0735*       ld a,' '
04058E 5B D7       0736*       rst.lil 10h
040590 E1          0737*       pop hl
040591 F1          0738*       pop af
040592 C9          0739*       ret
040593             0740*   
040593             0741*   ; print bcu to screen in hexidecimal format
040593             0742*   ; inputs: none
040593             0743*   ; destroys: nothing
040593             0744*   print_hex_bc:
040593 F5          0745*       push af
040594 E5          0746*       push hl
040595 C5          0747*       push bc
040596 21 CF 05 04 0748*       ld hl,str_bcu
04059A CD 07 01 04 0749*       call printString
04059E E1          0750*       pop hl
04059F E5          0751*       push hl
0405A0 CD 27 01 04 0752*       call printHex24
0405A4 3E 20       0753*       ld a,' '
0405A6 5B D7       0754*       rst.lil 10h
0405A8 C1          0755*       pop bc
0405A9 E1          0756*       pop hl
0405AA F1          0757*       pop af
0405AB C9          0758*       ret
0405AC             0759*   
0405AC             0760*   ; print deu to screen in hexidecimal format
0405AC             0761*   ; inputs: none
0405AC             0762*   ; destroys: nothing
0405AC             0763*   print_hex_de:
0405AC F5          0764*       push af
0405AD E5          0765*       push hl
0405AE D5          0766*       push de
0405AF 21 D4 05 04 0767*       ld hl,str_deu
0405B3 CD 07 01 04 0768*       call printString
0405B7 E1          0769*       pop hl
0405B8 E5          0770*       push hl
0405B9 CD 27 01 04 0771*       call printHex24
0405BD 3E 20       0772*       ld a,' '
0405BF 5B D7       0773*       rst.lil 10h
0405C1 D1          0774*       pop de
0405C2 E1          0775*       pop hl
0405C3 F1          0776*       pop af
0405C4 C9          0777*       ret
0405C5             0778*   
0405C5 20 61 66 3D 0779*   str_afu: db " af=",0
       00          
0405CA 20 68 6C 3D 0780*   str_hlu: db " hl=",0
       00          
0405CF 20 62 63 3D 0781*   str_bcu: db " bc=",0
       00          
0405D4 20 64 65 3D 0782*   str_deu: db " de=",0
       00          
0405D9 20 69 78 3D 0783*   str_ixu: db " ix=",0
       00          
0405DE 20 69 79 3D 0784*   str_iyu: db " iy=",0
       00          
0405E3             0785*   
0405E3             0786*   ; print udeuhl to screen in hexidecimal format
0405E3             0787*   ; inputs: none
0405E3             0788*   ; outputs: concatenated hexidecimal udeuhl
0405E3             0789*   ; destroys: nothing
0405E3             0790*   dumpUDEUHLHex:
0405E3             0791*   ; store everything in scratch
0405E3 22 42 06 04 0792*       ld (uhl),hl
0405E7 ED 43 45 06 0793*       ld (ubc),bc
       04          
0405EC ED 53 48 06 0794*       ld (ude),de
       04          
0405F1 DD 22 4B 06 0795*       ld (uix),ix
       04          
0405F6 FD 22 4E 06 0796*       ld (uiy),iy
       04          
0405FB F5          0797*       push af
0405FC             0798*   
0405FC             0799*   ; print each register
0405FC             0800*   
0405FC 21 36 06 04 0801*       ld hl,str_udeuhl
040600 CD 07 01 04 0802*       call printString
040604 2A 48 06 04 0803*       ld hl,(ude)
040608 CD 27 01 04 0804*       call printHex24
04060C 3E 2E       0805*       ld a,'.' ; print a dot to separate the values
04060E 5B D7       0806*       rst.lil 10h
040610 2A 42 06 04 0807*       ld hl,(uhl)
040614 CD 27 01 04 0808*       call printHex24
040618 CD 1C 01 04 0809*       call printNewLine
04061C             0810*   
04061C             0811*   ; restore everything
04061C 2A 42 06 04 0812*       ld hl, (uhl)
040620 ED 4B 45 06 0813*       ld bc, (ubc)
       04          
040625 ED 5B 48 06 0814*       ld de, (ude)
       04          
04062A DD 2A 4B 06 0815*       ld ix, (uix)
       04          
04062F FD 2A 4E 06 0816*       ld iy, (uiy)
       04          
040634 F1          0817*       pop af
040635             0818*   ; all done
040635 C9          0819*       ret
040636             0820*   
040636 75 64 65 2E 0821*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04063F             0822*   
04063F             0823*   ; global scratch memory for registers
04063F 00 00 00    0824*   uaf: dl 0
040642 00 00 00    0825*   uhl: dl 0
040645 00 00 00    0826*   ubc: dl 0
040648 00 00 00    0827*   ude: dl 0
04064B 00 00 00    0828*   uix: dl 0
04064E 00 00 00    0829*   uiy: dl 0
040651 00 00 00    0830*   usp: dl 0
040654 00 00 00    0831*   upc: dl 0
040657             0832*   
040657             0833*   ; inputs: whatever is in the flags register
040657             0834*   ; outputs: binary representation of flags
040657             0835*   ;          with a header so we know which is what
040657             0836*   ; destroys: nothing
040657             0837*   ; preserves: everything
040657             0838*   dumpFlags:
040657             0839*   ; first we curse zilog for not giving direct access to flags
040657 F5          0840*       push af ; this is so we can send it back unharmed
040658 F5          0841*       push af ; this is so we can pop it to hl
040659             0842*   ; store everything in scratch
040659 22 42 06 04 0843*       ld (uhl),hl
04065D ED 43 45 06 0844*       ld (ubc),bc
       04          
040662 ED 53 48 06 0845*       ld (ude),de
       04          
040667 DD 22 4B 06 0846*       ld (uix),ix
       04          
04066C FD 22 4E 06 0847*       ld (uiy),iy
       04          
040671             0848*   ; next we print the header
040671 21 9D 06 04 0849*       ld hl,@header
040675 CD 07 01 04 0850*       call printString
040679 E1          0851*       pop hl ; flags are now in l
04067A 7D          0852*       ld a,l ; flags are now in a
04067B CD A8 03 04 0853*       call printBin8
04067F CD 1C 01 04 0854*       call printNewLine
040683             0855*   ; restore everything
040683 2A 42 06 04 0856*       ld hl, (uhl)
040687 ED 4B 45 06 0857*       ld bc, (ubc)
       04          
04068C ED 5B 48 06 0858*       ld de, (ude)
       04          
040691 DD 2A 4B 06 0859*       ld ix, (uix)
       04          
040696 FD 2A 4E 06 0860*       ld iy, (uiy)
       04          
04069B F1          0861*       pop af ; send her home the way she came
04069C C9          0862*       ret
04069D             0863*   ; Bit 7 (S): Sign flag
04069D             0864*   ; Bit 6 (Z): Zero flag
04069D             0865*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04069D             0866*   ; Bit 4 (H): Half Carry flag
04069D             0867*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04069D             0868*   ; Bit 2 (PV): Parity/Overflow flag
04069D             0869*   ; Bit 1 (N): Subtract flag
04069D             0870*   ; Bit 0 (C): Carry flag
04069D 53 5A 78 48 0871*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406A8             0872*   
0406A8             0873*   ; set all the bits in the flag register
0406A8             0874*   ; more of an academic exercise than anything useful
0406A8             0875*   ; inputs; none
0406A8             0876*   ; outputs; a=0,f=255
0406A8             0877*   ; destroys: flags, hl
0406A8             0878*   ; preserves: a, because why not
0406A8             0879*   setAllFlags:
0406A8 21 FF 00 00 0880*       ld hl,255
0406AC 67          0881*       ld h,a ; four cycles to preserve a is cheap
0406AD E5          0882*       push hl
0406AE F1          0883*       pop af
0406AF C9          0884*       ret
0406B0             0885*   
0406B0             0886*   ; reset all the bits in the flag register
0406B0             0887*   ; unlike its inverse counterpart, this may actually be useful
0406B0             0888*   ; inputs; none
0406B0             0889*   ; outputs; a=0,f=0
0406B0             0890*   ; destroys: flags, hl
0406B0             0891*   ; preserves: a, because why not
0406B0             0892*   resetAllFlags:
0406B0 21 00 00 00 0893*       ld hl,0
0406B4 67          0894*       ld h,a ; four cycles to preserve a is cheap
0406B5 E5          0895*       push hl
0406B6 F1          0896*       pop af
0406B7 C9          0897*       ret
0406B8             0898*   
0406B8             0899*   ; wait until user presses a key
0406B8             0900*   ; inputs: none
0406B8             0901*   ; outputs: ascii code of key pressed in a
0406B8             0902*   ; destroys: af,ix
0406B8             0903*   waitKeypress:
0406B8             0904*       MOSCALL mos_getkey
0406B8 3E 00       0001*M1 			LD	A, function
0406BA 5B CF       0002*M1 			RST.LIL	08h
0406BC C9          0905*       ret
0406BD             0906*   
0406BD             0907*   ; print bytes from an address to the screen in hexidecimal format
0406BD             0908*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406BD             0909*   ; outputs: values of each byte printed to screen separated by spaces
0406BD             0910*   ; destroys: nothing
0406BD             0911*   dumpMemoryHex:
0406BD             0912*   ; save registers to the stack
0406BD C5          0913*       push bc
0406BE E5          0914*       push hl
0406BF F5          0915*       push af
0406C0             0916*   
0406C0             0917*   ; print the address and separator
0406C0 CD 27 01 04 0918*       call printHex24
0406C4 3E 3A       0919*       ld a,':'
0406C6 5B D7       0920*       rst.lil 10h
0406C8 3E 20       0921*       ld a,' '
0406CA 5B D7       0922*       rst.lil 10h
0406CC             0923*   
0406CC             0924*   ; set b to be our loop counter
0406CC F1          0925*       pop af
0406CD 47          0926*       ld b,a
0406CE E1          0927*       pop hl
0406CF E5          0928*       push hl
0406D0 F5          0929*       push af
0406D1             0930*   @loop:
0406D1             0931*   ; print the byte
0406D1 7E          0932*       ld a,(hl)
0406D2 CD 35 01 04 0933*       call printHex8
0406D6             0934*   ; print a space
0406D6 3E 20       0935*       ld a,' '
0406D8 5B D7       0936*       rst.lil 10h
0406DA 23          0937*       inc hl
0406DB 10 F4       0938*       djnz @loop
0406DD CD 1C 01 04 0939*       call printNewLine
0406E1             0940*   
0406E1             0941*   ; restore everything
0406E1 F1          0942*       pop af
0406E2 E1          0943*       pop hl
0406E3 C1          0944*       pop bc
0406E4             0945*   
0406E4             0946*   ; all done
0406E4 C9          0947*       ret
0406E5             0948*   
0406E5             0949*   
0406E5             0950*   ; print bytes from an address to the screen in binary format
0406E5             0951*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406E5             0952*   ; outputs: values of each byte printed to screen separated by spaces
0406E5             0953*   ; destroys: nothing
0406E5             0954*   dumpMemoryBin:
0406E5             0955*   ; save all registers to the stack
0406E5 F5          0956*       push af
0406E6 C5          0957*       push bc
0406E7 D5          0958*       push de
0406E8 E5          0959*       push hl
0406E9 DD E5       0960*       push ix
0406EB FD E5       0961*       push iy
0406ED             0962*   
0406ED             0963*   ; set b to be our loop counter
0406ED 47          0964*       ld b,a
0406EE             0965*   @loop:
0406EE             0966*   ; print the byte
0406EE 7E          0967*       ld a,(hl)
0406EF E5          0968*       push hl
0406F0 C5          0969*       push bc
0406F1 CD A8 03 04 0970*       call printBin8
0406F5 C1          0971*       pop bc
0406F6             0972*   ; print a space
0406F6 3E 20       0973*       ld a,' '
0406F8 5B D7       0974*       rst.lil 10h
0406FA E1          0975*       pop hl
0406FB 23          0976*       inc hl
0406FC 10 F0       0977*       djnz @loop
0406FE CD 1C 01 04 0978*       call printNewLine
040702             0979*   
040702             0980*   ; restore everything
040702 FD E1       0981*       pop iy
040704 DD E1       0982*       pop ix
040706 E1          0983*       pop hl
040707 D1          0984*       pop de
040708 C1          0985*       pop bc
040709 F1          0986*       pop af
04070A             0987*   ; all done
04070A C9          0988*       ret
04070B             0989*   
04070B             0990*   ; print bytes from an address to the screen in binary format
04070B             0991*   ; with the bits of each byte in reverse order (lsb first)
04070B             0992*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04070B             0993*   ; outputs: values of each byte printed to screen separated by spaces
04070B             0994*   ; destroys: nothing
04070B             0995*   dumpMemoryBinRev:
04070B             0996*   ; save all registers to the stack
04070B F5          0997*       push af
04070C C5          0998*       push bc
04070D D5          0999*       push de
04070E E5          1000*       push hl
04070F DD E5       1001*       push ix
040711 FD E5       1002*       push iy
040713             1003*   
040713             1004*   ; set b to be our loop counter
040713 47          1005*       ld b,a
040714             1006*   @loop:
040714             1007*   ; print the byte
040714 7E          1008*       ld a,(hl)
040715 E5          1009*       push hl
040716 C5          1010*       push bc
040717 CD CD 03 04 1011*       call printBin8Rev
04071B C1          1012*       pop bc
04071C             1013*   ; print a space
04071C 3E 20       1014*       ld a,' '
04071E 5B D7       1015*       rst.lil 10h
040720 E1          1016*       pop hl
040721 23          1017*       inc hl
040722 10 F0       1018*       djnz @loop
040724 CD 1C 01 04 1019*       call printNewLine
040728             1020*   
040728             1021*   ; restore everything
040728 FD E1       1022*       pop iy
04072A DD E1       1023*       pop ix
04072C E1          1024*       pop hl
04072D D1          1025*       pop de
04072E C1          1026*       pop bc
04072F F1          1027*       pop af
040730             1028*   ; all done
040730 C9          1029*       ret
040731             1030*   
040731             1031*   ; clear a block of memory by writing a prescribed value to each byte in the range
040731             1032*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040731             1033*   ; outputs: memory block is cleared
040731             1034*   ; destroys: hl, de
040731             1035*   clear_mem:
040731 0B          1036*       dec bc ; we do this because we will increment de before writing the first byte
040732 77          1037*       ld (hl),a
040733 E5          1038*       push hl
040734 D1          1039*       pop de
040735 13          1040*       inc de ; target address
040736 ED B0       1041*       ldir
040738 C9          1042*       ret
040739             0032        include "arith24.inc"
040739             0001*   ;------------------------------------------------------------------------
040739             0002*   ;  arith24.asm
040739             0003*   ;  24-bit ez80 arithmetic routines
040739             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040739             0005*   ;  MIT license
040739             0006*   ;
040739             0007*   ;  This library was created as a tool to help make ez80
040739             0008*   ;  24-bit native assembly routines for simple mathematical problems
040739             0009*   ;  more widely available.
040739             0010*   ;
040739             0011*   ;------------------------------------------------------------------------
040739             0012*   
040739             0013*   ;------------------------------------------------------------------------
040739             0014*   ; umul24:	HL = HL*DE (unsigned)
040739             0015*   ; Preserves AF, BC, DE
040739             0016*   ; Uses a fast multiply routine.
040739             0017*   ;------------------------------------------------------------------------
040739             0018*   umul24:
040739 D5          0019*   	push	DE
04073A C5          0020*   	push	BC
04073B F5          0021*   	push	AF
04073C E5          0022*   	push	HL
04073D C1          0023*   	pop		BC
04073E 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040740 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040744             0026*   umul24_lp:
040744 29          0027*   	add	hl,hl
040745 EB          0028*   	ex	de,hl
040746 29          0029*   	add	hl,hl
040747 EB          0030*   	ex	de,hl
040748 30 01       0031*   	jr	nc,umul24_nc
04074A 09          0032*   	add	hl,bc
04074B             0033*   umul24_nc:
04074B 3D          0034*   	dec	a
04074C 20 F6       0035*   	jr	nz,umul24_lp
04074E F1          0036*   	pop	af
04074F C1          0037*   	pop	bc
040750 D1          0038*   	pop	de
040751 C9          0039*   	ret
040752             0040*   
040752             0041*   
040752             0042*   ;------------------------------------------------------------------------
040752             0043*   ; udiv24
040752             0044*   ; Unsigned 24-bit division
040752             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040752             0046*   ;
040752             0047*   ; Uses AF BC DE HL
040752             0048*   ; Uses Restoring Division algorithm
040752             0049*   ;------------------------------------------------------------------------
040752             0050*   
040752             0051*   udiv24:
040752 E5          0052*   	push	hl
040753 C1          0053*   	pop		bc	;move dividend to BCU
040754 21 00 00 00 0054*   	ld		hl,0	;result
040758 A7          0055*   	and		a
040759 ED 52       0056*   	sbc		hl,de	;test for div by 0
04075B C8          0057*   	ret		z		;it's zero, carry flag is clear
04075C 19          0058*   	add		hl,de	;HL is 0 again
04075D 3E 18       0059*   	ld		a,24	;number of loops through.
04075F             0060*   udiv1:
04075F C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040760 E3          0062*   	ex		(sp),hl
040761 37          0063*   	scf
040762 ED 6A       0064*   	adc	hl,hl
040764 E3          0065*   	ex	(sp),hl
040765 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040766             0067*   
040766 ED 6A       0068*   	adc	hl,hl
040768 A7          0069*   	and	a		;is this the bug
040769 ED 52       0070*   	sbc	hl,de
04076B 30 02       0071*   	jr	nc,udiv2
04076D 19          0072*   	add	hl,de
04076E             0073*   ;	dec	c
04076E 0B          0074*   	dec	bc
04076F             0075*   udiv2:
04076F 3D          0076*   	dec	a
040770 20 ED       0077*   	jr	nz,udiv1
040772 37          0078*   	scf		;flag used for div0 error
040773 C5          0079*   	push	bc
040774 D1          0080*   	pop		de	;remainder
040775 C9          0081*   	ret
040776             0082*   
040776             0083*   
040776             0084*   
040776             0085*   ;------------------------------------------------------------------------
040776             0086*   ; neg24
040776             0087*   ; Returns: HLU = 0-HLU
040776             0088*   ; preserves all other registers
040776             0089*   ;------------------------------------------------------------------------
040776             0090*   neg24:
040776 D5          0091*   	push	de
040777 EB          0092*   	ex		de,hl
040778 21 00 00 00 0093*   	ld		hl,0
04077C B7          0094*   	or		a
04077D ED 52       0095*   	sbc		hl,de
04077F D1          0096*   	pop		de
040780 C9          0097*   	ret
040781             0098*   
040781             0099*   ;------------------------------------------------------------------------
040781             0100*   ; or_hlu_deu: 24 bit bitwise OR
040781             0101*   ; Returns: hlu = hlu OR deu
040781             0102*   ; preserves all other registers
040781             0103*   ;------------------------------------------------------------------------
040781             0104*   or_hlu_deu:
040781 22 0A 08 04 0105*   	ld	(bitbuf1),hl
040785 ED 53 0D 08 0106*   	ld	(bitbuf2),de
       04          
04078A D5          0107*   	push	de	;preserve DEU
04078B C5          0108*   	push	bc	;preserve BCU
04078C 06 03       0109*   	ld		b,3
04078E 21 0A 08 04 0110*   	ld	hl,bitbuf1
040792 11 0A 08 04 0111*   	ld	de,bitbuf1
040796             0112*   orloop_24:
040796 1A          0113*   	ld	a,(de)
040797 B6          0114*   	or	(hl)
040798 12          0115*   	ld	(de),a
040799 13          0116*   	inc	de
04079A 23          0117*   	inc	hl
04079B 10 F9       0118*   	djnz	orloop_24
04079D 2A 0D 08 04 0119*   	ld	hl,(bitbuf2)
0407A1 C1          0120*   	pop		bc	;restore BC
0407A2 D1          0121*   	pop		de	;restore DE
0407A3             0122*   
0407A3             0123*   ;------------------------------------------------------------------------
0407A3             0124*   ; and_hlu_deu: 24 bit bitwise AND
0407A3             0125*   ; Returns: hlu = hlu AND deu
0407A3             0126*   ; preserves all other registers
0407A3             0127*   ;------------------------------------------------------------------------
0407A3             0128*   and_hlu_deu:
0407A3 22 0A 08 04 0129*   	ld	(bitbuf1),hl
0407A7 ED 53 0D 08 0130*   	ld	(bitbuf2),de
       04          
0407AC D5          0131*   	push	de	;preserve DEU
0407AD C5          0132*   	push	bc	;preserve BCU
0407AE 06 03       0133*   	ld		b,3
0407B0 21 0A 08 04 0134*   	ld	hl,bitbuf1
0407B4 11 0A 08 04 0135*   	ld	de,bitbuf1
0407B8             0136*   andloop_24:
0407B8 1A          0137*   	ld	a,(de)
0407B9 A6          0138*   	and	(hl)
0407BA 12          0139*   	ld	(de),a
0407BB 13          0140*   	inc	de
0407BC 23          0141*   	inc	hl
0407BD 10 F9       0142*   	djnz	andloop_24
0407BF 2A 0D 08 04 0143*   	ld	hl,(bitbuf2)
0407C3 C1          0144*   	pop		bc	;restore BC
0407C4 D1          0145*   	pop		de	;restore DE
0407C5             0146*   
0407C5             0147*   ;------------------------------------------------------------------------
0407C5             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0407C5             0149*   ; Returns: hlu = hlu XOR deu
0407C5             0150*   ; preserves all other registers
0407C5             0151*   ;------------------------------------------------------------------------
0407C5             0152*   xor_hlu_deu:
0407C5 22 0A 08 04 0153*   	ld	(bitbuf1),hl
0407C9 ED 53 0D 08 0154*   	ld	(bitbuf2),de
       04          
0407CE D5          0155*   	push	de	;preserve DEU
0407CF C5          0156*   	push	bc	;preserve BCU
0407D0 06 03       0157*   	ld		b,3
0407D2 21 0A 08 04 0158*   	ld	hl,bitbuf1
0407D6 11 0A 08 04 0159*   	ld	de,bitbuf1
0407DA             0160*   xorloop_24:
0407DA 1A          0161*   	ld	a,(de)
0407DB AE          0162*   	xor	(hl)
0407DC 12          0163*   	ld	(de),a
0407DD 13          0164*   	inc	de
0407DE 23          0165*   	inc	hl
0407DF 10 F9       0166*   	djnz	xorloop_24
0407E1 2A 0D 08 04 0167*   	ld	hl,(bitbuf2)
0407E5 C1          0168*   	pop		bc	;restore BC
0407E6 D1          0169*   	pop		de	;restore DE
0407E7             0170*   
0407E7             0171*   ;------------------------------------------------------------------------
0407E7             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0407E7             0173*   ; Returns: hlu = hlu << a
0407E7             0174*   ;		   a = 0
0407E7             0175*   ; NOTE: only considers a up to 16 bits.
0407E7             0176*   ; preserves all other registers
0407E7             0177*   ; modified by Brandon R. Gates to use a instead of de
0407E7             0178*   ;------------------------------------------------------------------------
0407E7             0179*   shl_hlu:
0407E7 B7          0180*   	or a
0407E8 C8          0181*   	ret		z		;we're done
0407E9 29          0182*   	add		hl,hl	;shift HLU left
0407EA 3D          0183*   	dec a
0407EB 18 FA       0184*   	jr		shl_hlu
0407ED             0185*   
0407ED             0186*   ;------------------------------------------------------------------------
0407ED             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0407ED             0188*   ; Returns: hlu = hlu >> a
0407ED             0189*   ;		   a = 0
0407ED             0190*   ; NOTE: only considers a up to 16 bits.
0407ED             0191*   ; preserves all other registers
0407ED             0192*   ; modified by Brandon R. Gates to use a instead of de
0407ED             0193*   ;------------------------------------------------------------------------
0407ED             0194*   shr_hlu:
0407ED 22 0A 08 04 0195*   	ld		(bitbuf1),hl
0407F1 21 0C 08 04 0196*   	ld		hl,bitbuf1+2
0407F5             0197*   @shr_loop:
0407F5 B7          0198*   	or a
0407F6 28 0D       0199*   	jr		z,@shr_done		;we're done
0407F8             0200*   ;carry is clear from or instruction
0407F8 CB 1E       0201*   	rr		(hl)
0407FA 2B          0202*   	dec		hl
0407FB CB 1E       0203*   	rr		(hl)
0407FD 2B          0204*   	dec		hl
0407FE CB 1E       0205*   	rr		(hl)
040800 23          0206*   	inc		hl
040801 23          0207*   	inc		hl
040802 3D          0208*   	dec a
040803 18 F0       0209*   	jr		@shr_loop
040805             0210*   @shr_done:
040805 2A 0A 08 04 0211*   	ld		hl,(bitbuf1)	;collect result
040809 C9          0212*   	ret
04080A             0213*   
04080A             0214*   ;------------------------------------------------------------------------
04080A             0215*   ; Scratch area for calculations
04080A             0216*   ;------------------------------------------------------------------------
04080A 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04080D 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040810             0219*   
040810             0220*   ; -----------------------------------------------------------------------
040810             0221*   ; Functions added by Brandon R. Gates
040810             0222*   ; -----------------------------------------------------------------------
040810             0223*   
040810             0224*   ;------------------------------------------------------------------------
040810             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040810             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040810             0227*   ;              HLU = HLU >> LSB(A)
040810             0228*   ; Returns: HLU = HLU >> LSB(A)
040810             0229*   ; Destroys: af
040810             0230*   ;------------------------------------------------------------------------
040810             0231*   shr_hlu_log2a:
040810 B7          0232*   	or a    ; check for zero
040811 C8          0233*   	ret z   ; nothing to shift so we're done
040812 C5          0234*   	push 	bc ; preserve
040813 06 00       0235*   	ld		b,0 ; clear b
040815             0236*   @find_bit:
040815 0F          0237*   	rrca ; bit 0 to carry
040816 DA 1F 08 04 0238*   	jp c,@found_bit
04081A 04          0239*   	inc b ; next bit
04081B C3 15 08 04 0240*   	jp @find_bit
04081F             0241*   @found_bit:
04081F 78          0242*   	ld a,b
040820 CD ED 07 04 0243*   	call shr_hlu
040824 C1          0244*   	pop 	bc ; restore
040825 C9          0245*   	ret
040826             0246*   ; end shr_hlu_log2a
040826             0247*   
040826             0248*   ;------------------------------------------------------------------------
040826             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040826             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040826             0251*   ;                HLU = HLU << LSB(A)
040826             0252*   ; Returns: HLU = HLU << LSB(A)
040826             0253*   ; Destroys: af
040826             0254*   ;------------------------------------------------------------------------
040826             0255*   shl_hlu_log2a:
040826 B7          0256*   	or a    ; check for zero
040827 C8          0257*   	ret z   ; nothing to shift so we're done
040828 C5          0258*   	push 	bc ; preserve
040829 06 00       0259*   	ld		b,0 ; clear b
04082B             0260*   @find_bit:
04082B 0F          0261*   	rrca ; bit 0 to carry
04082C DA 35 08 04 0262*   	jp c,@found_bit
040830 04          0263*   	inc b ; next bit
040831 C3 2B 08 04 0264*   	jp @find_bit
040835             0265*   @found_bit:
040835 78          0266*   	ld a,b
040836 CD E7 07 04 0267*   	call shl_hlu
04083A C1          0268*   	pop 	bc ; restore
04083B C9          0269*   	ret
04083C             0270*   ; end shl_hlu_log2a
04083C             0033        include "maths.inc"
04083C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   
040900             0003*   ;------------------------------------------------------------------------
040900             0004*   ; Scratch area for calculations
040900             0005*   ;------------------------------------------------------------------------
040900 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0008*   
040906             0009*   ; absolute value of hlu
040906             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0014*   ; destroys: a
040906             0015*   hlu_abs:
040906 19          0016*       add hl,de
040907 B7          0017*       or a
040908 ED 52       0018*       sbc hl,de
04090A FA 0F 09 04 0019*       jp m,@is_neg
04090E C9          0020*       ret ; hlu is positive or zero so we're done
04090F             0021*   @is_neg:
04090F F5          0022*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0023*       call neg_hlu ; negate hlu
040914 F1          0024*       pop af ; get back flags
040915 C9          0025*       ret
040916             0026*   
040916             0027*   ; flip the sign of hlu
040916             0028*   ; inputs: hlu
040916             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0033*   ; destroys a
040916             0034*   neg_hlu:
040916 D5          0035*       push de ; save de
040917 EB          0036*       ex de,hl ; put hl into de
040918 21 00 00 00 0037*       ld hl,0 ; clear hl
04091C AF          0038*       xor a ; clear carry
04091D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0040*       pop de ; get de back
040920 C9          0041*       ret ; easy peasy
040921             0042*   
040921             0043*   ;------------------------------------------------------------------------
040921             0044*   ; divide hlu by 2, inspired by above
040921             0045*   ;------------------------------------------------------------------------
040921             0046*   hlu_div2:
040921 22 00 09 04 0047*       ld (scratch1),hl
040925 21 02 09 04 0048*       ld hl,scratch1+2
040929 CB 1E       0049*       rr (hl)
04092B 2B          0050*       dec hl
04092C CB 1E       0051*       rr (hl)
04092E 2B          0052*       dec hl
04092F CB 1E       0053*       rr (hl)
040931 23          0054*       inc hl
040932 23          0055*       inc hl
040933 2A 00 09 04 0056*       ld hl,(scratch1)
040937 C9          0057*       ret
040938             0058*   
040938             0059*   ; this is my little hack to divide by 16
040938             0060*   hlu_div16:
040938 AF          0061*       xor a
040939 29          0062*       add hl,hl
04093A 17          0063*       rla
04093B 29          0064*       add hl,hl
04093C 17          0065*       rla
04093D 29          0066*       add hl,hl
04093E 17          0067*       rla
04093F 29          0068*       add hl,hl
040940 17          0069*       rla
040941 22 4E 09 04 0070*       ld (@scratch),hl
040945 32 51 09 04 0071*       ld (@scratch+3),a
040949 2A 4F 09 04 0072*       ld hl,(@scratch+1)
04094D C9          0073*       ret
04094E             0074*   @scratch: ds 4
040952             0075*   
040952             0076*   ; hlu signed division by 256
040952             0077*   ; returns: hlu / 256
040952             0078*   ; destroys: af
040952             0079*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0080*       xor a ; assume hl is positive
040953 22 69 09 04 0081*       ld (@buffer),hl
040957             0082*       SIGN_HLU
040957 19          0001*M1     add hl,de ; 1 cycle
040958 B7          0002*M1     or a ; clear flags ; 1 cycle
040959 ED 52       0003*M1     sbc hl,de ; 2 cycles
04095B             0004*M1     ; 4 cycles total
04095B F2 60 09 04 0083*       jp p,@hl_pos
04095F 3D          0084*       dec a
040960             0085*   @hl_pos:
040960 32 6C 09 04 0086*       ld (@buffer+3),a
040964 2A 6A 09 04 0087*       ld hl,(@buffer+1)
040968 C9          0088*       ret
040969             0089*   @buffer: ds 4
04096D             0090*   
04096D             0091*   ; hlu 1 byte right shift, unsigned
04096D             0092*   ; returns: hlu / 256, fractional portion in a
04096D             0093*   ; destroys: af
04096D             0094*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0095*       xor a
04096E 32 7F 09 04 0096*       ld (@buffer+3),a
040972 7D          0097*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0098*       ld (@buffer),hl
040977 2A 7D 09 04 0099*       ld hl,(@buffer+1)
04097B C9          0100*       ret
04097C             0101*   @buffer: ds 4
040980             0102*   
       FF FF FF FF 
040980 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040988             0105*   
040988             0106*   ; set bcd values in a scratch memory address from registers bcde
040988             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0108*   ; destroys ; hl
040988             0109*   set_bcd:
040988 73          0110*       ld (hl),e
040989 23          0111*       inc hl
04098A 72          0112*       ld (hl),d
04098B 23          0113*       inc hl
04098C 71          0114*       ld (hl),c
04098D 23          0115*       inc hl
04098E 70          0116*       ld (hl),b
04098F C9          0117*       ret
040990             0118*   
040990             0119*   ; load bcd values from a scratch memory address to bcde
040990             0120*   ; input: hl; scratch address
040990             0121*   ; output: bcde; 8-place bcd number
040990             0122*   ; destroys: hl
040990             0123*   get_bcd:
040990 5E          0124*       ld e,(hl)
040991 23          0125*       inc hl
040992 56          0126*       ld d,(hl)
040993 23          0127*       inc hl
040994 4E          0128*       ld c,(hl)
040995 23          0129*       inc hl
040996 46          0130*       ld b,(hl)
040997 C9          0131*       ret
040998             0132*   
040998             0133*   ; BCD addition
040998             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0135*   ;       a is the number of bytes holding each number (number of places/2)
040998             0136*   ; outputs: (hl) + (de) --> (hl)
040998             0137*   ; destroys: a,b,de,hl
040998             0138*   add_bcd:
040998 47          0139*       ld b,a ; loop counter
040999 AF          0140*       xor a ; reset a, clear carry flag
04099A             0141*   adcec:
04099A 1A          0142*       ld a,(de) ; addend to acc
04099B 8E          0143*       adc a,(hl) ; add (hl) to acc
04099C 27          0144*       daa ; adjust result to bcd
04099D 77          0145*       ld (hl),a ; store result
04099E 23          0146*       inc hl ; advance memory pointers
04099F 13          0147*       inc de
0409A0 10 F8       0148*       djnz adcec ; loop until b == 0
0409A2 C9          0149*       ret
0409A3             0150*   
0409A3             0151*   ; BCD subtraction
0409A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0154*   ; outputs: (hl) - (de) --> (hl)
0409A3             0155*   ; destroys: a,b,de,hl
0409A3             0156*   sub_bcd:
0409A3 47          0157*       ld b,a ; loop counter
0409A4 AF          0158*       xor a ; reset a,clear carry flag
0409A5             0159*   subdec:
0409A5 1A          0160*       ld a,(de) ; subtrahend to acc
0409A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0162*       daa ; adjust result to bcd
0409A8 77          0163*       ld (hl),a ; store result
0409A9 23          0164*       inc hl ; advance memory pointers
0409AA 13          0165*       inc de
0409AB 10 F8       0166*       djnz subdec ; loop until b == 0
0409AD C9          0167*       ret
0409AE             0168*   
0409AE             0169*   ; http://www.z80.info/pseudo-random.txt
0409AE             0170*   rand_8:
0409AE C5          0171*       push bc
0409AF 3A C2 09 04 0172*       ld a,(r_seed)
0409B3 4F          0173*       ld c,a
0409B4             0174*   
0409B4 0F          0175*       rrca ; multiply by 32
0409B5 0F          0176*       rrca
0409B6 0F          0177*       rrca
0409B7 EE 1F       0178*       xor 0x1f
0409B9             0179*   
0409B9 81          0180*       add a,c
0409BA DE FF       0181*       sbc a,255 ; carry
0409BC             0182*   
0409BC 32 C2 09 04 0183*       ld (r_seed),a
0409C0 C1          0184*       pop bc
0409C1 C9          0185*       ret
0409C2 50          0186*   r_seed: defb $50
0409C3             0187*   
0409C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0189*   prng24:
0409C3             0190*   ;;Expects ADL mode.
0409C3             0191*   ;;Output: HL
0409C3             0192*   ;;50cc
0409C3             0193*   ;;33 bytes
0409C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0195*       ld de,(seed1)
       04          
0409C8 B7          0196*       or a
0409C9 ED 62       0197*       sbc hl,hl
0409CB 19          0198*       add hl,de
0409CC 29          0199*       add hl,hl
0409CD 29          0200*       add hl,hl
0409CE 2C          0201*       inc l
0409CF 19          0202*       add hl,de
0409D0 22 E4 09 04 0203*       ld (seed1),hl
0409D4 2A E7 09 04 0204*       ld hl,(seed2)
0409D8 29          0205*       add hl,hl
0409D9 9F          0206*       sbc a,a
0409DA E6 1B       0207*       and %00011011
0409DC AD          0208*       xor l
0409DD 6F          0209*       ld l,a
0409DE 22 E7 09 04 0210*       ld (seed2),hl
0409E2 19          0211*       add hl,de
0409E3 C9          0212*       ret
0409E4 00 00 00    0213*   seed1: dl 0
0409E7 00 00 00    0214*   seed2: dl 0
0409EA             0034        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0035        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   ; umul24:
040AB8             0121*   ;     call mul24
040AB8             0122*   ;     ld hl,(mul24out)
040AB8             0123*   ;     ret
040AB8             0124*   
040AB8             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AB8             0126*   umul168:
040AB8 CD 46 0A 04 0127*       call mul24
040ABC 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC0 C9          0129*       ret
040AC1             0130*   
040AC1             0131*   ; UH.L * UD.E --> UH.L (signed)
040AC1             0132*   smul168:
040AC1             0133*   ; make everything positive and store sign flags
040AC1 CD 06 09 04 0134*       call hlu_abs
040AC5 F5          0135*       push af
040AC6 EB          0136*       ex de,hl
040AC7 CD 06 09 04 0137*       call hlu_abs
040ACB EB          0138*       ex de,hl
040ACC F5          0139*       push af
040ACD             0140*   ; do the division
040ACD CD B8 0A 04 0141*       call umul168 ; hl = product
040AD1             0142*   ; adjust sign of result
040AD1 F1          0143*       pop af ; sign de
040AD2 FA DD 0A 04 0144*       jp m,@de_neg
040AD6 F1          0145*       pop af ; sign hl
040AD7 F0          0146*       ret p ; both positive, nothing to do
040AD8             0147*   @hl_neg:
040AD8 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040ADC C9          0149*       ret
040ADD             0150*   @de_neg:
040ADD F1          0151*       pop af
040ADE F8          0152*       ret m ; both negative, nothing to do
040ADF CD 16 09 04 0153*       call neg_hlu ; result is negative
040AE3 C9          0154*       ret
040AE4             0155*   
040AE4             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AE4             0157*   ; perform unsigned division of 16.8 fixed place values
040AE4             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AE4             0159*   udiv168:
040AE4             0160*   ; back up divisor
040AE4 ED 53 1B 0B 0161*       ld (@ude),de
       04          
040AE9             0162*   ; get the 16-bit integer part of the quotient
040AE9 CD 52 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AED             0164*   ; load quotient to upper three bytes of output
040AED ED 53 22 0B 0165*       ld (div168_out+1),de
       04          
040AF2             0166*   @div256:
040AF2             0167*   ; multiply remainder by 256
040AF2             0168*       hlu_mul256
040AF2 29          0001*M1     add hl,hl ; * 2
040AF3 29          0002*M1     add hl,hl ; * 4
040AF4 29          0003*M1     add hl,hl ; * 8
040AF5 29          0004*M1     add hl,hl ; * 16
040AF6 29          0005*M1     add hl,hl ; * 32
040AF7 29          0006*M1     add hl,hl ; * 64
040AF8 29          0007*M1     add hl,hl ; * 128
040AF9 29          0008*M1     add hl,hl ; * 256
040AFA             0169*   ; skip fractional computation if remainder is zero
040AFA             0170*       SIGN_HLU
040AFA 19          0001*M1     add hl,de ; 1 cycle
040AFB B7          0002*M1     or a ; clear flags ; 1 cycle
040AFC ED 52       0003*M1     sbc hl,de ; 2 cycles
040AFE             0004*M1     ; 4 cycles total
040AFE 20 03       0171*       jr nz,@div_frac
040B00 AF          0172*       xor a
040B01 18 0A       0173*       jr @write_frac
040B03             0174*   ; now divide the shifted remainder by the divisor
040B03             0175*   @div_frac:
040B03 ED 5B 1B 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B08 CD 52 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B0C             0178*   ; load low byte of quotient to low byte of output
040B0C 7B          0179*       ld a,e
040B0D             0180*   @write_frac:
040B0D 32 21 0B 04 0181*       ld (div168_out),a
040B11             0182*   ; load de with return value
040B11 ED 5B 21 0B 0183*       ld de,(div168_out)
       04          
040B16             0184*   ; load a with any overflow
040B16 3A 24 0B 04 0185*       ld a,(div168_out+3)
040B1A C9          0186*       ret ; ud.e is the 16.8 result
040B1B             0187*   @ude: ds 6
040B21             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B25             0189*   
040B25             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B25             0191*   ; perform signed division of 16.8 fixed place values
040B25             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B25             0193*   sdiv168:
040B25             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B25 CD 06 09 04 0195*       call hlu_abs
040B29 F5          0196*       push af
040B2A EB          0197*       ex de,hl
040B2B CD 06 09 04 0198*       call hlu_abs
040B2F EB          0199*       ex de,hl
040B30 F5          0200*       push af
040B31             0201*   ; do the division
040B31 CD E4 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B35             0203*   ; adjust sign of result
040B35 F1          0204*       pop af ; sign de
040B36 FA 43 0B 04 0205*       jp m,@de_neg
040B3A F1          0206*       pop af ; sign hl
040B3B F0          0207*       ret p ; both positive, nothing to do
040B3C             0208*   @hl_neg:
040B3C EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B3D CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B41 EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B42 C9          0212*       ret
040B43             0213*   @de_neg:
040B43 F1          0214*       pop af
040B44 F8          0215*       ret m ; both negative, nothing to do
040B45 EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0217*       call neg_hlu ; result is negative
040B4A EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0219*       ret
040B4C             0220*   
040B4C             0221*   ; convert signed angles from a 360 to 256 degree circle
040B4C             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B4C             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B4C             0224*   ; destroys: TODO
040B4C             0225*   deg_360_to_256:
040B4C D5          0226*       push de ; preserve de
040B4D             0227*   ; make angle positive and store sign flag
040B4D CD 06 09 04 0228*       call hlu_abs
040B51 F5          0229*       push af
040B52             0230*   ; multiply by coversion factor of 256/360
040B52 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B56 CD B8 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B5A             0233*   ; restore sign flag and adjust output accordingly
040B5A F1          0234*       pop af
040B5B F2 63 0B 04 0235*       jp p,@pos ; positive number
040B5F CD 16 09 04 0236*       call neg_hlu
040B63             0237*   @pos:
040B63             0238*   ; restore de and return uh.l as the result
040B63 D1          0239*       pop de
040B64 C9          0240*       ret
040B65             0241*   
040B65             0242*   ; convert signed angles from a 256 to 360 degree circle
040B65             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B65             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B65             0245*   ; destroys: TODO
040B65             0246*   deg_256_to_360:
040B65 D5          0247*       push de ; preserve de
040B66             0248*   ; make angle positive and store sign flag
040B66 CD 06 09 04 0249*       call hlu_abs
040B6A F5          0250*       push af
040B6B             0251*   ; multiply by coversion factor of 360/256
040B6B 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B6F CD B8 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B73             0254*   ; restore sign flag and adjust output accordingly
040B73 F1          0255*       pop af
040B74 F2 7C 0B 04 0256*       jp p,@pos ; positive number
040B78 CD 16 09 04 0257*       call neg_hlu
040B7C             0258*   @pos:
040B7C             0259*   ; restore de and return uh.l as the result
040B7C D1          0260*       pop de
040B7D C9          0261*       ret
040B7E             0262*   
040B7E             0263*   ; fixed 16.8 routine
040B7E             0264*   ; cos(uh.l) --> uh.l
040B7E             0265*   ; destroys: f, hl
040B7E             0266*   cos168:
040B7E D5          0267*       push de ; preserve de
040B7F             0268*   ; for cos we simply increment the angle by 90 degrees
040B7F             0269*   ; or 0x004000 in 16.8 degrees256
040B7F             0270*   ; which makes it a sin problem
040B7F 11 00 40 00 0271*       ld de,0x004000
040B83 19          0272*       add hl,de ; modulo 256 happens below
040B84 D1          0273*       pop de ; restore de
040B85             0274*   ; fall through to sin168
040B85             0275*   
040B85             0276*   ; ---------------------
040B85             0277*   ; fixed 16.8 routine
040B85             0278*   ; sin(uh.l) --> uh.l
040B85             0279*   ; destroys: f, hl
040B85             0280*   sin168:
040B85 D5          0281*       push de
040B86             0282*   ; handle negative angles appropriately
040B86 CD 06 09 04 0283*       call hlu_abs
040B8A F2 93 0B 04 0284*       jp p,@F
040B8E 11 00 00 FF 0285*       ld de,-256*256
040B92 19          0286*       add hl,de
040B93             0287*   @@:
040B93 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B95 ED 6C       0289*       mlt hl
040B97 11 4B 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040B9B 19          0291*       add hl,de ; bump hl by the index
040B9C ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040B9E D1          0293*       pop de
040B9F C9          0294*       ret
040BA0             0295*   
040BA0             0296*   ; 16.8 fixed inputs / outputs
040BA0             0297*   ; takes: uh.l as angle in degrees 256
040BA0             0298*   ;        ud.e as radius
040BA0             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA0             0300*   ;        displacements from origin (0,0)
040BA0             0301*   ; destroys: everything except indexes
040BA0             0302*   polar_to_cartesian:
040BA0             0303*   ; back up input parameters
040BA0 22 CF 0B 04 0304*       ld (@angle), hl
040BA4 ED 53 D2 0B 0305*       ld (@radius), de
       04          
040BA9             0306*   ; compute dx = sin(uh.l) * ud.e
040BA9 CD 85 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BAD ED 5B D2 0B 0308*       ld de,(@radius)
       04          
040BB2 CD C1 0A 04 0309*       call smul168 ; uh.l = dx
040BB6 E5          0310*       push hl
040BB7             0311*   ; compute dy = -cos(uh.l) * ud.e
040BB7 2A CF 0B 04 0312*       ld hl,(@angle)
040BBB CD 7E 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BBF ED 5B D2 0B 0314*       ld de,(@radius)
       04          
040BC4 CD C1 0A 04 0315*       call smul168 ; uh.l = dy
040BC8 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BCC EB          0317*       ex de,hl ; de = dy for output
040BCD C1          0318*       pop bc ; bc = dx for output
040BCE             0319*   ; and out
040BCE C9          0320*       ret
040BCF             0321*   @angle: ds 3
040BD2             0322*   @radius: ds 3
040BD5             0323*   
040BD5             0324*   ; 16.8 fixed inputs / outputs
040BD5             0325*   ; inputs: ub.c as dx, ud.e as dy
040BD5             0326*   ;        displacements from origin (0,0)
040BD5             0327*   ; returns: uh.l as angle in degrees 256
040BD5             0328*   ;        ud.e as radius
040BD5             0329*   ; destroys: everything except indexes
040BD5             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BD5 ED 43 2E 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BDA ED 53 34 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BDF             0333*   ; compute radius
040BDF CD 3A 0C 04 0334*       call distance168 ; uh.l = radius
040BE3 E5          0335*       push hl ; save radius
040BE4             0336*   ; compute angle
040BE4 ED 4B 2E 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BE9 ED 5B 34 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BEE CD 9A 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BF2             0340*   ; return result
040BF2 D1          0341*       pop de ; de = radius (was hl)
040BF3 C9          0342*       ret
040BF4             0343*   ; end cartesian_to_polar
040BF4             0344*   
040BF4             0345*   ; 16.8 fixed inputs / outputs
040BF4             0346*   ; inputs: ub.c as dx, ud.e as dy
040BF4             0347*   ;        displacements from origin (0,0)
040BF4             0348*   ; returns: uh.l as angle in degrees 256
040BF4             0349*   ;        ud.e as radius
040BF4             0350*   ; destroys: everything except indexes
040BF4             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BF4             0352*   cartesian_to_polar_sm:
040BF4 ED 43 2E 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040BF9 ED 53 34 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040BFE             0355*   ; compute radius
040BFE CD 75 0C 04 0356*       call distance168sm ; uh.l = radius
040C02 E5          0357*       push hl ; save radius
040C03             0358*   ; compute angle
040C03 ED 4B 2E 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C08 ED 5B 34 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C0D CD 9A 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C11             0362*   ; return result
040C11 D1          0363*       pop de ; de = radius (was hl)
040C12 C9          0364*       ret
040C13             0365*   ; end cartesian_to_polar
040C13             0366*   
040C13             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C13             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C13             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C13             0370*   ;         also populates scratch locations dx168 and dy168
040C13             0371*   ; destroys: a,hl,bc,de
040C13             0372*   dxy168:
040C13             0373*   ; compute dx = x1-x0
040C13 AF          0374*       xor a ; clear carry
040C14 DD E5       0375*       push ix ; move ix to hl via the stack
040C16 E1          0376*       pop hl ; hl = x1
040C17 ED 42       0377*       sbc hl,bc ; hl = dx
040C19 22 2E 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C1D             0379*   ; compute dy = y1-y0
040C1D AF          0380*       xor a ; clear carry
040C1E FD E5       0381*       push iy ; move iy to hl via the stack
040C20 E1          0382*       pop hl ; hl = y1
040C21 ED 52       0383*       sbc hl,de ; hl = dy
040C23 22 34 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C27             0385*   ; populate output registers and return
040C27 EB          0386*       ex de,hl ; ud.e = dy
040C28 ED 4B 2E 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C2D C9          0388*       ret
040C2E 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C34 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C3A             0391*   
040C3A             0392*   ; compute the euclidian distance between two cartesian coordinates
040C3A             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C3A             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C3A             0395*   ; output; uh.l is the 16.8 fixed format distance
040C3A             0396*   ;         also populates scratch locations dx168 and dy168
040C3A             0397*   ; destroys: a,hl,bc,de
040C3A             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C3A             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C3A             0400*   distance168:
040C3A             0401*   ; compute dy^2
040C3A 2A 34 0C 04 0402*       ld hl,(dy168)
040C3E CD 06 09 04 0403*       call hlu_abs
040C42             0404*       ; call hlu_udiv256 ; make integer to avoid overflow
040C42             0405*       SRL_UHL ; make integer to avoid overflow
040C42 3B          0001*M1     dec sp ; 1 cycle
040C43 E5          0002*M1     push hl ; 4 cycles
040C44 33          0003*M1     inc sp ; 1 cycle
040C45 E1          0004*M1     pop hl ; 4 cycles
040C46 23          0005*M1     inc hl ; 1 cycle
040C47 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C49             0007*M1     ; 13 cycles total
040C49 E5          0406*       push hl
040C4A D1          0407*       pop de
040C4B CD 39 07 04 0408*       call umul24 ; hl = dy^2
040C4F E5          0409*       push hl ; save dy^2
040C50             0410*   ; compute dx^2
040C50 2A 2E 0C 04 0411*       ld hl,(dx168)
040C54 CD 06 09 04 0412*       call hlu_abs
040C58             0413*       ; call hlu_udiv256 ; make integer to avoid overflow
040C58             0414*       SRL_UHL ; make integer to avoid overflow
040C58 3B          0001*M1     dec sp ; 1 cycle
040C59 E5          0002*M1     push hl ; 4 cycles
040C5A 33          0003*M1     inc sp ; 1 cycle
040C5B E1          0004*M1     pop hl ; 4 cycles
040C5C 23          0005*M1     inc hl ; 1 cycle
040C5D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C5F             0007*M1     ; 13 cycles total
040C5F E5          0415*       push hl
040C60 D1          0416*       pop de
040C61 CD 39 07 04 0417*       call umul24 ; hl = dx^2
040C65             0418*   ; add dx^2 and dy^2
040C65 D1          0419*       pop de ; de = dy^2 (was hl)
040C66 19          0420*       add hl,de ; hl = dx^2 + dy^2
040C67             0421*   ; compute the square root
040C67 CD 65 0D 04 0422*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6B EB          0423*       ex de,hl ; hl = distance
040C6C             0424*       hlu_mul256 ; convert back to 16.8 fixed
040C6C 29          0001*M1     add hl,hl ; * 2
040C6D 29          0002*M1     add hl,hl ; * 4
040C6E 29          0003*M1     add hl,hl ; * 8
040C6F 29          0004*M1     add hl,hl ; * 16
040C70 29          0005*M1     add hl,hl ; * 32
040C71 29          0006*M1     add hl,hl ; * 64
040C72 29          0007*M1     add hl,hl ; * 128
040C73 29          0008*M1     add hl,hl ; * 256
040C74 C9          0425*       ret
040C75             0426*   
040C75             0427*   ; compute the euclidian distance between two cartesian coordinates
040C75             0428*   ; using the formula d = sqrt(dx^2+dy^2)
040C75             0429*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C75             0430*   ; output; uh.l is the 16.8 fixed format distance
040C75             0431*   ;         also populates scratch locations dx168 and dy168
040C75             0432*   ; destroys: a,hl,bc,de
040C75             0433*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C75             0434*   ;       making it more accurate for small deltas,
040C75             0435*   ;       but will overflow if used for screen-sized deltas
040C75             0436*   distance168sm:
040C75             0437*   ; compute dy^2
040C75 2A 34 0C 04 0438*       ld hl,(dy168)
040C79 CD 06 09 04 0439*       call hlu_abs
040C7D E5          0440*       push hl
040C7E D1          0441*       pop de
040C7F CD 39 07 04 0442*       call umul24 ; hl = dy^2
040C83 E5          0443*       push hl ; save dy^2
040C84             0444*   ; compute dx^2
040C84 2A 2E 0C 04 0445*       ld hl,(dx168)
040C88 CD 06 09 04 0446*       call hlu_abs
040C8C E5          0447*       push hl
040C8D D1          0448*       pop de
040C8E CD 39 07 04 0449*       call umul24 ; hl = dx^2
040C92             0450*   ; add dx^2 and dy^2
040C92 D1          0451*       pop de ; de = dy^2 (was hl)
040C93 19          0452*       add hl,de ; hl = dx^2 + dy^2
040C94             0453*   ; compute the square root
040C94 CD 65 0D 04 0454*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C98 EB          0455*       ex de,hl ; hl = distance
040C99 C9          0456*       ret
040C9A             0457*   
040C9A             0458*   ; atan2_(ub.c,ud.e) --> uh.l
040C9A             0459*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9A             0460*   ;   whether inputs are integers or fractional doesn't matter
040C9A             0461*   ;   so long as the sign bit of the upper byte is correct
040C9A             0462*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9A             0463*   ; angles are COMPASS HEADINGS based on
040C9A             0464*   ; screen coordinate conventions,where the y axis is flipped
040C9A             0465*   ; #E0 224      0       32 #20
040C9A             0466*   ;        -x,-y | +x,-y
040C9A             0467*   ; #C0 192------+------ 64 #40
040C9A             0468*   ;        -x,+y | +x,+y
040C9A             0469*   ; #A0 160   128 #80   96 #60
040C9A             0470*   atan2_168fast:
040C9A             0471*   ; get signs and make everything positive
040C9A             0472*   ; get abs(x) and store its original sign
040C9A C5          0473*       push bc
040C9B E1          0474*       pop hl
040C9C CD 06 09 04 0475*       call hlu_abs ; if x was negative this also sets the sign flag
040CA0 E5          0476*       push hl ; store abs(x)
040CA1 C1          0477*       pop bc ; bc = abs(x)
040CA2 F5          0478*       push af ; store sign of x
040CA3             0479*   ; get abs(y) and store its original sign
040CA3 EB          0480*       ex de,hl ; hl = y
040CA4 CD 06 09 04 0481*       call hlu_abs ; if y was negative this also sets the sign flag
040CA8 EB          0482*       ex de,hl ; de = abs(y)
040CA9 F5          0483*       push af ; store sign of y
040CAA             0484*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAA             0485*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAA AF          0486*       xor a ; clear the carry flag
040CAB D5          0487*       push de
040CAC E1          0488*       pop hl
040CAD ED 42       0489*       sbc hl,bc
040CAF F5          0490*       push af ; save sign of de - bc
040CB0 F2 B9 0C 04 0491*       jp p,@1 ; bc <= de, so we skip ahead
040CB4             0492*   ; otherwise we swap bc and de
040CB4 C5          0493*       push bc
040CB5 E1          0494*       pop hl
040CB6 EB          0495*       ex de,hl
040CB7 E5          0496*       push hl
040CB8 C1          0497*       pop bc
040CB9             0498*   @1:
040CB9             0499*   ; now we're ready to snag our preliminary result
040CB9 C5          0500*       push bc
040CBA E1          0501*       pop hl
040CBB CD 29 0D 04 0502*       call atan_168fast ; uh.l comes back with prelim result
040CBF             0503*   ; now we adjust uh.l based on sign of de - bc
040CBF F1          0504*       pop af
040CC0 F2 CC 0C 04 0505*       jp p,@2 ; bc <= de,so we skip ahead
040CC4 EB          0506*       ex de,hl
040CC5 21 00 40 00 0507*       ld hl,64*256 ; subtract from 64 (90) degrees
040CC9 AF          0508*       xor a ; clear the carry flag
040CCA ED 52       0509*       sbc hl,de
040CCC             0510*   @2:
040CCC             0511*   ; adjust the result based on quadrant
040CCC             0512*   ; #E0 224      0       32 #20
040CCC             0513*   ;        -x,-y | +x,-y
040CCC             0514*   ; #C0 192------+------ 64 #40
040CCC             0515*   ;        -x,+y | +x,+y
040CCC             0516*   ; #A0 160   128 #80   96 #60
040CCC F1          0517*       pop af ; sign of y
040CCD CA 0A 0D 04 0518*       jp z,@y_zero
040CD1 F2 EA 0C 04 0519*       jp p,@y_pos
040CD5             0520*   ; y neg,check x
040CD5 F1          0521*       pop af ; sign of x
040CD6 CA E4 0C 04 0522*       jp z,@y_neg_x_zero
040CDA F2 E9 0C 04 0523*       jp p,@y_neg_x_pos
040CDE             0524*   ; y neg,x neg
040CDE             0525*   ; angle is 128 to 256 (270 to 360)
040CDE             0526*   ; negating the intermediate does the trick
040CDE CD 16 09 04 0527*       call neg_hlu
040CE2 18 31       0528*       jr @zero_hlu
040CE4             0529*   
040CE4             0530*   @y_neg_x_zero:
040CE4             0531*   ; y neg,x zero
040CE4             0532*   ; angle is 0
040CE4 21 00 00 00 0533*       ld hl,0
040CE8 C9          0534*       ret
040CE9             0535*   @y_neg_x_pos:
040CE9             0536*   ; y neg,x pos
040CE9             0537*   ; angle is 0 to 64 (0 to 90)
040CE9             0538*   ; so we're good
040CE9 C9          0539*       ret
040CEA             0540*   
040CEA             0541*   @y_pos:
040CEA F1          0542*       pop af ; sign of x
040CEB CA FA 0C 04 0543*       jp z,@y_pos_x_zero
040CEF F2 FF 0C 04 0544*       jp p,@y_pos_x_pos
040CF3             0545*   ; y pos,x neg
040CF3             0546*   ; angle is 128 to 192 (180-270)
040CF3             0547*   ; so we add 128 to intermediate
040CF3 11 00 80 00 0548*       ld de,128*256
040CF7 19          0549*       add hl,de
040CF8 18 1B       0550*       jr @zero_hlu
040CFA             0551*   @y_pos_x_zero:
040CFA             0552*   ; y pos,x zero
040CFA             0553*   ; angle is 128 (180)
040CFA 21 00 80 00 0554*       ld hl,128*256
040CFE C9          0555*       ret
040CFF             0556*   @y_pos_x_pos:
040CFF             0557*   ; y pos,x pos
040CFF             0558*   ; angle is 64 to 128 (90 to 180)
040CFF             0559*   ; neg the intermediate and add 180 degrees
040CFF CD 16 09 04 0560*       call neg_hlu
040D03 11 00 80 00 0561*       ld de,128*256
040D07 19          0562*       add hl,de
040D08 18 0B       0563*       jr @zero_hlu
040D0A             0564*   
040D0A             0565*   @y_zero:
040D0A F1          0566*       pop af ; sign of x
040D0B FA 10 0D 04 0567*       jp m,@y_zero_x_neg
040D0F             0568*   ; y zero,x pos
040D0F             0569*   ; angle is 64 (90),nothing to do
040D0F C9          0570*       ret
040D10             0571*   @y_zero_x_neg:
040D10             0572*   ; y zero ,x neg
040D10             0573*   ; angle is 192 (270)
040D10 21 00 C0 00 0574*       ld hl,192*256
040D14 C9          0575*       ret
040D15             0576*   @zero_hlu:
040D15 AF          0577*       xor a
040D16 22 23 0D 04 0578*       ld (@scratch),hl
040D1A 32 25 0D 04 0579*       ld (@scratch+2),a
040D1E 2A 23 0D 04 0580*       ld hl,(@scratch)
040D22 C9          0581*       ret
040D23             0582*   @scratch: ds 6
040D29             0583*   
040D29             0584*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D29             0585*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D29             0586*   ; destroys: a,hl,bc,de
040D29             0587*   ; note: only works for angles from 0 to 32 (45) degrees
040D29             0588*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D29             0589*   atan_168fast:
040D29             0590*   ; because we use compass headings instead of geometric angles
040D29             0591*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D29             0592*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D29 CD E4 0A 04 0593*       call udiv168 ; ud.e = dx/dy
040D2D EB          0594*       ex de,hl ; uh.l = dx/dy
040D2E             0595*   ; test uh.l for 0
040D2E 19          0596*       add hl,de
040D2F B7          0597*       or a
040D30 ED 52       0598*       sbc hl,de
040D32 28 22       0599*       jr z,@is_zero
040D34             0600*   ; test uh.l for 1
040D34 AF          0601*       xor a ; clear carry
040D35 EB          0602*       ex de,hl
040D36 21 00 01 00 0603*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3A ED 52       0604*       sbc hl,de
040D3C 28 13       0605*       jr z,@is_45
040D3E EB          0606*       ex de,hl
040D3F             0607*   ; no special cases so we move on
040D3F             0608*   ; l contains the fractional portion of tan(uh.l)
040D3F             0609*   ; we multiply it by three to get our lookup table index
040D3F 26 03       0610*       ld h,3
040D41 ED 6C       0611*       mlt hl ; index into lut
040D43 11 00 00 00 0612*       ld de,0 ; clear deu
040D47 54          0613*       ld d,h ; copy hl to de
040D48 5D          0614*       ld e,l ; de contains our index
040D49 21 4E 11 04 0615*       ld hl,atan_lut_168 ; grab the lut address
040D4D 19          0616*       add hl,de ; bump hl by the index
040D4E ED 27       0617*       ld hl,(hl) ; don't try this on a z80!
040D50 C9          0618*       ret ; and out
040D51             0619*   @is_45:
040D51 21 00 20 00 0620*       ld hl,32*256
040D55 C9          0621*       ret
040D56             0622*   ; for the case tan(0)
040D56             0623*   @is_zero:
040D56 21 00 00 00 0624*       ld hl,0*256
040D5A C9          0625*       ret
040D5B             0626*   
040D5B             0627*   ; Expects  ADL mode
040D5B             0628*   ; Inputs:  UH.L
040D5B             0629*   ; Outputs: UH.L is the 16.8 square root
040D5B             0630*   ;          UDE is the integer difference inputHL-DE^2
040D5B             0631*   sqrt168:
040D5B CD 65 0D 04 0632*       call sqrt24
040D5F EB          0633*       ex de,hl
040D60 29          0634*       add hl,hl
040D61 29          0635*       add hl,hl
040D62 29          0636*       add hl,hl
040D63 29          0637*       add hl,hl
040D64 C9          0638*       ret
040D65             0639*   
040D65             0640*   ; credit: xeda112358
040D65             0641*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D65             0642*   sqrt24:
040D65             0643*   ; Expects ADL mode
040D65             0644*   ; Inputs: HL
040D65             0645*   ; Outputs: DE is the integer square root
040D65             0646*   ;  HL is the difference inputHL-DE^2
040D65             0647*   ;  c flag reset
040D65 01 00 00 00 0648*       ld bc,0 ; clear bcu
040D69 11 00 00 00 0649*       ld de,0 ; clear deu
040D6D AF          0650*       xor a
040D6E 45          0651*       ld b,l
040D6F C5          0652*       push bc
040D70 47          0653*       ld b,a
040D71 6F          0654*       ld l,a
040D72             0655*   ; Iteration 1
040D72 29          0656*       add hl,hl
040D73 CB 11       0657*       rl c
040D75 29          0658*       add hl,hl
040D76 CB 11       0659*       rl c
040D78 91          0660*       sub c
040D79 30 04       0661*       jr nc,$+6
040D7B 1C          0662*       inc e
040D7C 1C          0663*       inc e
040D7D 2F          0664*       cpl
040D7E 4F          0665*       ld c,a
040D7F             0666*   ; Iteration 2
040D7F 29          0667*       add hl,hl
040D80 CB 11       0668*       rl c
040D82 29          0669*       add hl,hl
040D83 CB 11       0670*       rl c
040D85 CB 13       0671*       rl e
040D87 7B          0672*       ld a,e
040D88 91          0673*       sub c
040D89 30 04       0674*       jr nc,$+6
040D8B 1C          0675*       inc e
040D8C 1C          0676*       inc e
040D8D 2F          0677*       cpl
040D8E 4F          0678*       ld c,a
040D8F             0679*   ; Iteration 3
040D8F 29          0680*       add hl,hl
040D90 CB 11       0681*       rl c
040D92 29          0682*       add hl,hl
040D93 CB 11       0683*       rl c
040D95 CB 13       0684*       rl e
040D97 7B          0685*       ld a,e
040D98 91          0686*       sub c
040D99 30 04       0687*       jr nc,$+6
040D9B 1C          0688*       inc e
040D9C 1C          0689*       inc e
040D9D 2F          0690*       cpl
040D9E 4F          0691*       ld c,a
040D9F             0692*   ; Iteration 4
040D9F 29          0693*       add hl,hl
040DA0 CB 11       0694*       rl c
040DA2 29          0695*       add hl,hl
040DA3 CB 11       0696*       rl c
040DA5 CB 13       0697*       rl e
040DA7 7B          0698*       ld a,e
040DA8 91          0699*       sub c
040DA9 30 04       0700*       jr nc,$+6
040DAB 1C          0701*       inc e
040DAC 1C          0702*       inc e
040DAD 2F          0703*       cpl
040DAE 4F          0704*       ld c,a
040DAF             0705*   ; Iteration 5
040DAF 29          0706*       add hl,hl
040DB0 CB 11       0707*       rl c
040DB2 29          0708*       add hl,hl
040DB3 CB 11       0709*       rl c
040DB5 CB 13       0710*       rl e
040DB7 7B          0711*       ld a,e
040DB8 91          0712*       sub c
040DB9 30 04       0713*       jr nc,$+6
040DBB 1C          0714*       inc e
040DBC 1C          0715*       inc e
040DBD 2F          0716*       cpl
040DBE 4F          0717*       ld c,a
040DBF             0718*   ; Iteration 6
040DBF 29          0719*       add hl,hl
040DC0 CB 11       0720*       rl c
040DC2 29          0721*       add hl,hl
040DC3 CB 11       0722*       rl c
040DC5 CB 13       0723*       rl e
040DC7 7B          0724*       ld a,e
040DC8 91          0725*       sub c
040DC9 30 04       0726*       jr nc,$+6
040DCB 1C          0727*       inc e
040DCC 1C          0728*       inc e
040DCD 2F          0729*       cpl
040DCE 4F          0730*       ld c,a
040DCF             0731*   ; Iteration 7
040DCF 29          0732*       add hl,hl
040DD0 CB 11       0733*       rl c
040DD2 29          0734*       add hl,hl
040DD3 CB 11       0735*       rl c
040DD5 CB 10       0736*       rl b
040DD7 EB          0737*       ex de,hl
040DD8 29          0738*       add hl,hl
040DD9 E5          0739*       push hl
040DDA ED 42       0740*       sbc hl,bc
040DDC 30 06       0741*       jr nc,$+8
040DDE 7C          0742*       ld a,h
040DDF 2F          0743*       cpl
040DE0 47          0744*       ld b,a
040DE1 7D          0745*       ld a,l
040DE2 2F          0746*       cpl
040DE3 4F          0747*       ld c,a
040DE4 E1          0748*       pop hl
040DE5 30 02       0749*       jr nc,$+4
040DE7 23          0750*       inc hl
040DE8 23          0751*       inc hl
040DE9 EB          0752*       ex de,hl
040DEA             0753*   ; Iteration 8
040DEA 29          0754*       add hl,hl
040DEB 69          0755*       ld l,c
040DEC 60          0756*       ld h,b
040DED ED 6A       0757*       adc hl,hl
040DEF ED 6A       0758*       adc hl,hl
040DF1 EB          0759*       ex de,hl
040DF2 29          0760*       add hl,hl
040DF3 ED 52       0761*       sbc hl,de
040DF5 19          0762*       add hl,de
040DF6 EB          0763*       ex de,hl
040DF7 30 04       0764*       jr nc,$+6
040DF9 ED 52       0765*       sbc hl,de
040DFB 13          0766*       inc de
040DFC 13          0767*       inc de
040DFD             0768*   ; Iteration 9
040DFD F1          0769*       pop af
040DFE 17          0770*       rla
040DFF ED 6A       0771*       adc hl,hl
040E01 17          0772*       rla
040E02 ED 6A       0773*       adc hl,hl
040E04 EB          0774*       ex de,hl
040E05 29          0775*       add hl,hl
040E06 ED 52       0776*       sbc hl,de
040E08 19          0777*       add hl,de
040E09 EB          0778*       ex de,hl
040E0A 30 04       0779*       jr nc,$+6
040E0C ED 52       0780*       sbc hl,de
040E0E 13          0781*       inc de
040E0F 13          0782*       inc de
040E10             0783*   ; Iteration 10
040E10 17          0784*       rla
040E11 ED 6A       0785*       adc hl,hl
040E13 17          0786*       rla
040E14 ED 6A       0787*       adc hl,hl
040E16 EB          0788*       ex de,hl
040E17 29          0789*       add hl,hl
040E18 ED 52       0790*       sbc hl,de
040E1A 19          0791*       add hl,de
040E1B EB          0792*       ex de,hl
040E1C 30 04       0793*       jr nc,$+6
040E1E ED 52       0794*       sbc hl,de
040E20 13          0795*       inc de
040E21 13          0796*       inc de
040E22             0797*   ; Iteration 11
040E22 17          0798*       rla
040E23 ED 6A       0799*       adc hl,hl
040E25 17          0800*       rla
040E26 ED 6A       0801*       adc hl,hl
040E28 EB          0802*       ex de,hl
040E29 29          0803*       add hl,hl
040E2A ED 52       0804*       sbc hl,de
040E2C 19          0805*       add hl,de
040E2D EB          0806*       ex de,hl
040E2E 30 04       0807*       jr nc,$+6
040E30 ED 52       0808*       sbc hl,de
040E32 13          0809*       inc de
040E33 13          0810*       inc de
040E34             0811*   ; Iteration 12
040E34 17          0812*       rla
040E35 ED 6A       0813*       adc hl,hl
040E37 17          0814*       rla
040E38 ED 6A       0815*       adc hl,hl
040E3A EB          0816*       ex de,hl
040E3B 29          0817*       add hl,hl
040E3C ED 52       0818*       sbc hl,de
040E3E 19          0819*       add hl,de
040E3F EB          0820*       ex de,hl
040E40 30 04       0821*       jr nc,$+6
040E42 ED 52       0822*       sbc hl,de
040E44 13          0823*       inc de
040E45 13          0824*       inc de
040E46 CB 1A       0825*       rr d
040E48 CB 1B       0826*       rr e
040E4A C9          0827*       ret
040E4B             0828*   
040E4B             0829*   sin_lut_168:
040E4B 00 00 00    0830*       dl 0x000000 ; 0.000 00, 0.000
040E4E 06 00 00    0831*       dl 0x000006 ; 1.406 01, 0.025
040E51 0C 00 00    0832*       dl 0x00000C ; 2.813 02, 0.049
040E54 12 00 00    0833*       dl 0x000012 ; 4.219 03, 0.074
040E57 19 00 00    0834*       dl 0x000019 ; 5.625 04, 0.098
040E5A 1F 00 00    0835*       dl 0x00001F ; 7.031 05, 0.122
040E5D 25 00 00    0836*       dl 0x000025 ; 8.438 06, 0.147
040E60 2B 00 00    0837*       dl 0x00002B ; 9.844 07, 0.171
040E63 31 00 00    0838*       dl 0x000031 ; 11.250 08, 0.195
040E66 38 00 00    0839*       dl 0x000038 ; 12.656 09, 0.219
040E69 3E 00 00    0840*       dl 0x00003E ; 14.063 0A, 0.243
040E6C 44 00 00    0841*       dl 0x000044 ; 15.469 0B, 0.267
040E6F 4A 00 00    0842*       dl 0x00004A ; 16.875 0C, 0.290
040E72 50 00 00    0843*       dl 0x000050 ; 18.281 0D, 0.314
040E75 56 00 00    0844*       dl 0x000056 ; 19.688 0E, 0.337
040E78 5C 00 00    0845*       dl 0x00005C ; 21.094 0F, 0.360
040E7B 61 00 00    0846*       dl 0x000061 ; 22.500 10, 0.383
040E7E 67 00 00    0847*       dl 0x000067 ; 23.906 11, 0.405
040E81 6D 00 00    0848*       dl 0x00006D ; 25.313 12, 0.428
040E84 73 00 00    0849*       dl 0x000073 ; 26.719 13, 0.450
040E87 78 00 00    0850*       dl 0x000078 ; 28.125 14, 0.471
040E8A 7E 00 00    0851*       dl 0x00007E ; 29.531 15, 0.493
040E8D 83 00 00    0852*       dl 0x000083 ; 30.938 16, 0.514
040E90 88 00 00    0853*       dl 0x000088 ; 32.344 17, 0.535
040E93 8E 00 00    0854*       dl 0x00008E ; 33.750 18, 0.556
040E96 93 00 00    0855*       dl 0x000093 ; 35.156 19, 0.576
040E99 98 00 00    0856*       dl 0x000098 ; 36.563 1A, 0.596
040E9C 9D 00 00    0857*       dl 0x00009D ; 37.969 1B, 0.615
040E9F A2 00 00    0858*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA2 A7 00 00    0859*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA5 AB 00 00    0860*       dl 0x0000AB ; 42.188 1E, 0.672
040EA8 B0 00 00    0861*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAB B5 00 00    0862*       dl 0x0000B5 ; 45.000 20, 0.707
040EAE B9 00 00    0863*       dl 0x0000B9 ; 46.406 21, 0.724
040EB1 BD 00 00    0864*       dl 0x0000BD ; 47.813 22, 0.741
040EB4 C1 00 00    0865*       dl 0x0000C1 ; 49.219 23, 0.757
040EB7 C5 00 00    0866*       dl 0x0000C5 ; 50.625 24, 0.773
040EBA C9 00 00    0867*       dl 0x0000C9 ; 52.031 25, 0.788
040EBD CD 00 00    0868*       dl 0x0000CD ; 53.438 26, 0.803
040EC0 D1 00 00    0869*       dl 0x0000D1 ; 54.844 27, 0.818
040EC3 D4 00 00    0870*       dl 0x0000D4 ; 56.250 28, 0.831
040EC6 D8 00 00    0871*       dl 0x0000D8 ; 57.656 29, 0.845
040EC9 DB 00 00    0872*       dl 0x0000DB ; 59.063 2A, 0.858
040ECC DE 00 00    0873*       dl 0x0000DE ; 60.469 2B, 0.870
040ECF E1 00 00    0874*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED2 E4 00 00    0875*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED5 E7 00 00    0876*       dl 0x0000E7 ; 64.688 2E, 0.904
040ED8 EA 00 00    0877*       dl 0x0000EA ; 66.094 2F, 0.914
040EDB EC 00 00    0878*       dl 0x0000EC ; 67.500 30, 0.924
040EDE EE 00 00    0879*       dl 0x0000EE ; 68.906 31, 0.933
040EE1 F1 00 00    0880*       dl 0x0000F1 ; 70.313 32, 0.942
040EE4 F3 00 00    0881*       dl 0x0000F3 ; 71.719 33, 0.950
040EE7 F4 00 00    0882*       dl 0x0000F4 ; 73.125 34, 0.957
040EEA F6 00 00    0883*       dl 0x0000F6 ; 74.531 35, 0.964
040EED F8 00 00    0884*       dl 0x0000F8 ; 75.938 36, 0.970
040EF0 F9 00 00    0885*       dl 0x0000F9 ; 77.344 37, 0.976
040EF3 FB 00 00    0886*       dl 0x0000FB ; 78.750 38, 0.981
040EF6 FC 00 00    0887*       dl 0x0000FC ; 80.156 39, 0.985
040EF9 FD 00 00    0888*       dl 0x0000FD ; 81.563 3A, 0.989
040EFC FE 00 00    0889*       dl 0x0000FE ; 82.969 3B, 0.992
040EFF FE 00 00    0890*       dl 0x0000FE ; 84.375 3C, 0.995
040F02 FF 00 00    0891*       dl 0x0000FF ; 85.781 3D, 0.997
040F05 FF 00 00    0892*       dl 0x0000FF ; 87.188 3E, 0.999
040F08 FF 00 00    0893*       dl 0x0000FF ; 88.594 3F, 1.000
040F0B 00 01 00    0894*       dl 0x000100 ; 90.000 40, 1.000
040F0E FF 00 00    0895*       dl 0x0000FF ; 91.406 41, 1.000
040F11 FF 00 00    0896*       dl 0x0000FF ; 92.813 42, 0.999
040F14 FF 00 00    0897*       dl 0x0000FF ; 94.219 43, 0.997
040F17 FE 00 00    0898*       dl 0x0000FE ; 95.625 44, 0.995
040F1A FE 00 00    0899*       dl 0x0000FE ; 97.031 45, 0.992
040F1D FD 00 00    0900*       dl 0x0000FD ; 98.438 46, 0.989
040F20 FC 00 00    0901*       dl 0x0000FC ; 99.844 47, 0.985
040F23 FB 00 00    0902*       dl 0x0000FB ; 101.250 48, 0.981
040F26 F9 00 00    0903*       dl 0x0000F9 ; 102.656 49, 0.976
040F29 F8 00 00    0904*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2C F6 00 00    0905*       dl 0x0000F6 ; 105.469 4B, 0.964
040F2F F4 00 00    0906*       dl 0x0000F4 ; 106.875 4C, 0.957
040F32 F3 00 00    0907*       dl 0x0000F3 ; 108.281 4D, 0.950
040F35 F1 00 00    0908*       dl 0x0000F1 ; 109.688 4E, 0.942
040F38 EE 00 00    0909*       dl 0x0000EE ; 111.094 4F, 0.933
040F3B EC 00 00    0910*       dl 0x0000EC ; 112.500 50, 0.924
040F3E EA 00 00    0911*       dl 0x0000EA ; 113.906 51, 0.914
040F41 E7 00 00    0912*       dl 0x0000E7 ; 115.313 52, 0.904
040F44 E4 00 00    0913*       dl 0x0000E4 ; 116.719 53, 0.893
040F47 E1 00 00    0914*       dl 0x0000E1 ; 118.125 54, 0.882
040F4A DE 00 00    0915*       dl 0x0000DE ; 119.531 55, 0.870
040F4D DB 00 00    0916*       dl 0x0000DB ; 120.938 56, 0.858
040F50 D8 00 00    0917*       dl 0x0000D8 ; 122.344 57, 0.845
040F53 D4 00 00    0918*       dl 0x0000D4 ; 123.750 58, 0.831
040F56 D1 00 00    0919*       dl 0x0000D1 ; 125.156 59, 0.818
040F59 CD 00 00    0920*       dl 0x0000CD ; 126.563 5A, 0.803
040F5C C9 00 00    0921*       dl 0x0000C9 ; 127.969 5B, 0.788
040F5F C5 00 00    0922*       dl 0x0000C5 ; 129.375 5C, 0.773
040F62 C1 00 00    0923*       dl 0x0000C1 ; 130.781 5D, 0.757
040F65 BD 00 00    0924*       dl 0x0000BD ; 132.188 5E, 0.741
040F68 B9 00 00    0925*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6B B5 00 00    0926*       dl 0x0000B5 ; 135.000 60, 0.707
040F6E B0 00 00    0927*       dl 0x0000B0 ; 136.406 61, 0.690
040F71 AB 00 00    0928*       dl 0x0000AB ; 137.813 62, 0.672
040F74 A7 00 00    0929*       dl 0x0000A7 ; 139.219 63, 0.653
040F77 A2 00 00    0930*       dl 0x0000A2 ; 140.625 64, 0.634
040F7A 9D 00 00    0931*       dl 0x00009D ; 142.031 65, 0.615
040F7D 98 00 00    0932*       dl 0x000098 ; 143.438 66, 0.596
040F80 93 00 00    0933*       dl 0x000093 ; 144.844 67, 0.576
040F83 8E 00 00    0934*       dl 0x00008E ; 146.250 68, 0.556
040F86 88 00 00    0935*       dl 0x000088 ; 147.656 69, 0.535
040F89 83 00 00    0936*       dl 0x000083 ; 149.063 6A, 0.514
040F8C 7E 00 00    0937*       dl 0x00007E ; 150.469 6B, 0.493
040F8F 78 00 00    0938*       dl 0x000078 ; 151.875 6C, 0.471
040F92 73 00 00    0939*       dl 0x000073 ; 153.281 6D, 0.450
040F95 6D 00 00    0940*       dl 0x00006D ; 154.688 6E, 0.428
040F98 67 00 00    0941*       dl 0x000067 ; 156.094 6F, 0.405
040F9B 61 00 00    0942*       dl 0x000061 ; 157.500 70, 0.383
040F9E 5C 00 00    0943*       dl 0x00005C ; 158.906 71, 0.360
040FA1 56 00 00    0944*       dl 0x000056 ; 160.313 72, 0.337
040FA4 50 00 00    0945*       dl 0x000050 ; 161.719 73, 0.314
040FA7 4A 00 00    0946*       dl 0x00004A ; 163.125 74, 0.290
040FAA 44 00 00    0947*       dl 0x000044 ; 164.531 75, 0.267
040FAD 3E 00 00    0948*       dl 0x00003E ; 165.938 76, 0.243
040FB0 38 00 00    0949*       dl 0x000038 ; 167.344 77, 0.219
040FB3 31 00 00    0950*       dl 0x000031 ; 168.750 78, 0.195
040FB6 2B 00 00    0951*       dl 0x00002B ; 170.156 79, 0.171
040FB9 25 00 00    0952*       dl 0x000025 ; 171.563 7A, 0.147
040FBC 1F 00 00    0953*       dl 0x00001F ; 172.969 7B, 0.122
040FBF 19 00 00    0954*       dl 0x000019 ; 174.375 7C, 0.098
040FC2 12 00 00    0955*       dl 0x000012 ; 175.781 7D, 0.074
040FC5 0C 00 00    0956*       dl 0x00000C ; 177.188 7E, 0.049
040FC8 06 00 00    0957*       dl 0x000006 ; 178.594 7F, 0.025
040FCB 00 00 00    0958*       dl 0x000000 ; 180.000 80, 0.000
040FCE FA FF FF    0959*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD1 F4 FF FF    0960*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD4 EE FF FF    0961*       dl 0xFFFFEE ; 184.219 83, -0.074
040FD7 E7 FF FF    0962*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDA E1 FF FF    0963*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FDD DB FF FF    0964*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE0 D5 FF FF    0965*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE3 CF FF FF    0966*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE6 C8 FF FF    0967*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FE9 C2 FF FF    0968*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEC BC FF FF    0969*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FEF B6 FF FF    0970*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF2 B0 FF FF    0971*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF5 AA FF FF    0972*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FF8 A4 FF FF    0973*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFB 9F FF FF    0974*       dl 0xFFFF9F ; 202.500 90, -0.383
040FFE 99 FF FF    0975*       dl 0xFFFF99 ; 203.906 91, -0.405
041001 93 FF FF    0976*       dl 0xFFFF93 ; 205.313 92, -0.428
041004 8D FF FF    0977*       dl 0xFFFF8D ; 206.719 93, -0.450
041007 88 FF FF    0978*       dl 0xFFFF88 ; 208.125 94, -0.471
04100A 82 FF FF    0979*       dl 0xFFFF82 ; 209.531 95, -0.493
04100D 7D FF FF    0980*       dl 0xFFFF7D ; 210.938 96, -0.514
041010 78 FF FF    0981*       dl 0xFFFF78 ; 212.344 97, -0.535
041013 72 FF FF    0982*       dl 0xFFFF72 ; 213.750 98, -0.556
041016 6D FF FF    0983*       dl 0xFFFF6D ; 215.156 99, -0.576
041019 68 FF FF    0984*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101C 63 FF FF    0985*       dl 0xFFFF63 ; 217.969 9B, -0.615
04101F 5E FF FF    0986*       dl 0xFFFF5E ; 219.375 9C, -0.634
041022 59 FF FF    0987*       dl 0xFFFF59 ; 220.781 9D, -0.653
041025 55 FF FF    0988*       dl 0xFFFF55 ; 222.188 9E, -0.672
041028 50 FF FF    0989*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102B 4B FF FF    0990*       dl 0xFFFF4B ; 225.000 A0, -0.707
04102E 47 FF FF    0991*       dl 0xFFFF47 ; 226.406 A1, -0.724
041031 43 FF FF    0992*       dl 0xFFFF43 ; 227.813 A2, -0.741
041034 3F FF FF    0993*       dl 0xFFFF3F ; 229.219 A3, -0.757
041037 3B FF FF    0994*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103A 37 FF FF    0995*       dl 0xFFFF37 ; 232.031 A5, -0.788
04103D 33 FF FF    0996*       dl 0xFFFF33 ; 233.438 A6, -0.803
041040 2F FF FF    0997*       dl 0xFFFF2F ; 234.844 A7, -0.818
041043 2C FF FF    0998*       dl 0xFFFF2C ; 236.250 A8, -0.831
041046 28 FF FF    0999*       dl 0xFFFF28 ; 237.656 A9, -0.845
041049 25 FF FF    1000*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104C 22 FF FF    1001*       dl 0xFFFF22 ; 240.469 AB, -0.870
04104F 1F FF FF    1002*       dl 0xFFFF1F ; 241.875 AC, -0.882
041052 1C FF FF    1003*       dl 0xFFFF1C ; 243.281 AD, -0.893
041055 19 FF FF    1004*       dl 0xFFFF19 ; 244.688 AE, -0.904
041058 16 FF FF    1005*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105B 14 FF FF    1006*       dl 0xFFFF14 ; 247.500 B0, -0.924
04105E 12 FF FF    1007*       dl 0xFFFF12 ; 248.906 B1, -0.933
041061 0F FF FF    1008*       dl 0xFFFF0F ; 250.313 B2, -0.942
041064 0D FF FF    1009*       dl 0xFFFF0D ; 251.719 B3, -0.950
041067 0C FF FF    1010*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106A 0A FF FF    1011*       dl 0xFFFF0A ; 254.531 B5, -0.964
04106D 08 FF FF    1012*       dl 0xFFFF08 ; 255.938 B6, -0.970
041070 07 FF FF    1013*       dl 0xFFFF07 ; 257.344 B7, -0.976
041073 05 FF FF    1014*       dl 0xFFFF05 ; 258.750 B8, -0.981
041076 04 FF FF    1015*       dl 0xFFFF04 ; 260.156 B9, -0.985
041079 03 FF FF    1016*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107C 02 FF FF    1017*       dl 0xFFFF02 ; 262.969 BB, -0.992
04107F 02 FF FF    1018*       dl 0xFFFF02 ; 264.375 BC, -0.995
041082 01 FF FF    1019*       dl 0xFFFF01 ; 265.781 BD, -0.997
041085 01 FF FF    1020*       dl 0xFFFF01 ; 267.188 BE, -0.999
041088 01 FF FF    1021*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108B 00 FF FF    1022*       dl 0xFFFF00 ; 270.000 C0, -1.000
04108E 01 FF FF    1023*       dl 0xFFFF01 ; 271.406 C1, -1.000
041091 01 FF FF    1024*       dl 0xFFFF01 ; 272.813 C2, -0.999
041094 01 FF FF    1025*       dl 0xFFFF01 ; 274.219 C3, -0.997
041097 02 FF FF    1026*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109A 02 FF FF    1027*       dl 0xFFFF02 ; 277.031 C5, -0.992
04109D 03 FF FF    1028*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A0 04 FF FF    1029*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A3 05 FF FF    1030*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A6 07 FF FF    1031*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410A9 08 FF FF    1032*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AC 0A FF FF    1033*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410AF 0C FF FF    1034*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B2 0D FF FF    1035*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B5 0F FF FF    1036*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410B8 12 FF FF    1037*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BB 14 FF FF    1038*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410BE 16 FF FF    1039*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C1 19 FF FF    1040*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C4 1C FF FF    1041*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410C7 1F FF FF    1042*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CA 22 FF FF    1043*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410CD 25 FF FF    1044*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D0 28 FF FF    1045*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D3 2C FF FF    1046*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D6 2F FF FF    1047*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410D9 33 FF FF    1048*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DC 37 FF FF    1049*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410DF 3B FF FF    1050*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E2 3F FF FF    1051*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E5 43 FF FF    1052*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410E8 47 FF FF    1053*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EB 4B FF FF    1054*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410EE 50 FF FF    1055*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F1 55 FF FF    1056*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F4 59 FF FF    1057*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410F7 5E FF FF    1058*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FA 63 FF FF    1059*       dl 0xFFFF63 ; 322.031 E5, -0.615
0410FD 68 FF FF    1060*       dl 0xFFFF68 ; 323.438 E6, -0.596
041100 6D FF FF    1061*       dl 0xFFFF6D ; 324.844 E7, -0.576
041103 72 FF FF    1062*       dl 0xFFFF72 ; 326.250 E8, -0.556
041106 78 FF FF    1063*       dl 0xFFFF78 ; 327.656 E9, -0.535
041109 7D FF FF    1064*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110C 82 FF FF    1065*       dl 0xFFFF82 ; 330.469 EB, -0.493
04110F 88 FF FF    1066*       dl 0xFFFF88 ; 331.875 EC, -0.471
041112 8D FF FF    1067*       dl 0xFFFF8D ; 333.281 ED, -0.450
041115 93 FF FF    1068*       dl 0xFFFF93 ; 334.688 EE, -0.428
041118 99 FF FF    1069*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111B 9F FF FF    1070*       dl 0xFFFF9F ; 337.500 F0, -0.383
04111E A4 FF FF    1071*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041121 AA FF FF    1072*       dl 0xFFFFAA ; 340.313 F2, -0.337
041124 B0 FF FF    1073*       dl 0xFFFFB0 ; 341.719 F3, -0.314
041127 B6 FF FF    1074*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112A BC FF FF    1075*       dl 0xFFFFBC ; 344.531 F5, -0.267
04112D C2 FF FF    1076*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041130 C8 FF FF    1077*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041133 CF FF FF    1078*       dl 0xFFFFCF ; 348.750 F8, -0.195
041136 D5 FF FF    1079*       dl 0xFFFFD5 ; 350.156 F9, -0.171
041139 DB FF FF    1080*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113C E1 FF FF    1081*       dl 0xFFFFE1 ; 352.969 FB, -0.122
04113F E7 FF FF    1082*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041142 EE FF FF    1083*       dl 0xFFFFEE ; 355.781 FD, -0.074
041145 F4 FF FF    1084*       dl 0xFFFFF4 ; 357.188 FE, -0.049
041148 FA FF FF    1085*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114B 00 00 00    1086*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
04114E             1087*   
04114E             1088*   atan_lut_168:
04114E 00 00 00    1089*       dl 0x000000 ; 000000, 0.000
041151 28 00 00    1090*       dl 0x000028 ; 000001, 0.224
041154 51 00 00    1091*       dl 0x000051 ; 000002, 0.448
041157 7A 00 00    1092*       dl 0x00007A ; 000003, 0.671
04115A A2 00 00    1093*       dl 0x0000A2 ; 000004, 0.895
04115D CB 00 00    1094*       dl 0x0000CB ; 000005, 1.119
041160 F4 00 00    1095*       dl 0x0000F4 ; 000006, 1.343
041163 1D 01 00    1096*       dl 0x00011D ; 000007, 1.566
041166 45 01 00    1097*       dl 0x000145 ; 000008, 1.790
041169 6E 01 00    1098*       dl 0x00016E ; 000009, 2.013
04116C 97 01 00    1099*       dl 0x000197 ; 00000A, 2.237
04116F BF 01 00    1100*       dl 0x0001BF ; 00000B, 2.460
041172 E8 01 00    1101*       dl 0x0001E8 ; 00000C, 2.684
041175 11 02 00    1102*       dl 0x000211 ; 00000D, 2.907
041178 39 02 00    1103*       dl 0x000239 ; 00000E, 3.130
04117B 62 02 00    1104*       dl 0x000262 ; 00000F, 3.353
04117E 8B 02 00    1105*       dl 0x00028B ; 000010, 3.576
041181 B3 02 00    1106*       dl 0x0002B3 ; 000011, 3.799
041184 DC 02 00    1107*       dl 0x0002DC ; 000012, 4.022
041187 04 03 00    1108*       dl 0x000304 ; 000013, 4.245
04118A 2D 03 00    1109*       dl 0x00032D ; 000014, 4.467
04118D 55 03 00    1110*       dl 0x000355 ; 000015, 4.690
041190 7E 03 00    1111*       dl 0x00037E ; 000016, 4.912
041193 A6 03 00    1112*       dl 0x0003A6 ; 000017, 5.134
041196 CE 03 00    1113*       dl 0x0003CE ; 000018, 5.356
041199 F7 03 00    1114*       dl 0x0003F7 ; 000019, 5.578
04119C 1F 04 00    1115*       dl 0x00041F ; 00001A, 5.799
04119F 48 04 00    1116*       dl 0x000448 ; 00001B, 6.021
0411A2 70 04 00    1117*       dl 0x000470 ; 00001C, 6.242
0411A5 98 04 00    1118*       dl 0x000498 ; 00001D, 6.463
0411A8 C0 04 00    1119*       dl 0x0004C0 ; 00001E, 6.684
0411AB E8 04 00    1120*       dl 0x0004E8 ; 00001F, 6.905
0411AE 11 05 00    1121*       dl 0x000511 ; 000020, 7.125
0411B1 39 05 00    1122*       dl 0x000539 ; 000021, 7.345
0411B4 61 05 00    1123*       dl 0x000561 ; 000022, 7.565
0411B7 89 05 00    1124*       dl 0x000589 ; 000023, 7.785
0411BA B1 05 00    1125*       dl 0x0005B1 ; 000024, 8.005
0411BD D9 05 00    1126*       dl 0x0005D9 ; 000025, 8.224
0411C0 01 06 00    1127*       dl 0x000601 ; 000026, 8.443
0411C3 28 06 00    1128*       dl 0x000628 ; 000027, 8.662
0411C6 50 06 00    1129*       dl 0x000650 ; 000028, 8.881
0411C9 78 06 00    1130*       dl 0x000678 ; 000029, 9.099
0411CC A0 06 00    1131*       dl 0x0006A0 ; 00002A, 9.317
0411CF C7 06 00    1132*       dl 0x0006C7 ; 00002B, 9.535
0411D2 EF 06 00    1133*       dl 0x0006EF ; 00002C, 9.752
0411D5 16 07 00    1134*       dl 0x000716 ; 00002D, 9.970
0411D8 3E 07 00    1135*       dl 0x00073E ; 00002E, 10.187
0411DB 65 07 00    1136*       dl 0x000765 ; 00002F, 10.403
0411DE 8D 07 00    1137*       dl 0x00078D ; 000030, 10.620
0411E1 B4 07 00    1138*       dl 0x0007B4 ; 000031, 10.836
0411E4 DB 07 00    1139*       dl 0x0007DB ; 000032, 11.051
0411E7 03 08 00    1140*       dl 0x000803 ; 000033, 11.267
0411EA 2A 08 00    1141*       dl 0x00082A ; 000034, 11.482
0411ED 51 08 00    1142*       dl 0x000851 ; 000035, 11.697
0411F0 78 08 00    1143*       dl 0x000878 ; 000036, 11.911
0411F3 9F 08 00    1144*       dl 0x00089F ; 000037, 12.125
0411F6 C6 08 00    1145*       dl 0x0008C6 ; 000038, 12.339
0411F9 ED 08 00    1146*       dl 0x0008ED ; 000039, 12.553
0411FC 13 09 00    1147*       dl 0x000913 ; 00003A, 12.766
0411FF 3A 09 00    1148*       dl 0x00093A ; 00003B, 12.978
041202 61 09 00    1149*       dl 0x000961 ; 00003C, 13.191
041205 87 09 00    1150*       dl 0x000987 ; 00003D, 13.403
041208 AE 09 00    1151*       dl 0x0009AE ; 00003E, 13.614
04120B D4 09 00    1152*       dl 0x0009D4 ; 00003F, 13.825
04120E FB 09 00    1153*       dl 0x0009FB ; 000040, 14.036
041211 21 0A 00    1154*       dl 0x000A21 ; 000041, 14.247
041214 47 0A 00    1155*       dl 0x000A47 ; 000042, 14.457
041217 6D 0A 00    1156*       dl 0x000A6D ; 000043, 14.666
04121A 94 0A 00    1157*       dl 0x000A94 ; 000044, 14.876
04121D BA 0A 00    1158*       dl 0x000ABA ; 000045, 15.085
041220 E0 0A 00    1159*       dl 0x000AE0 ; 000046, 15.293
041223 05 0B 00    1160*       dl 0x000B05 ; 000047, 15.501
041226 2B 0B 00    1161*       dl 0x000B2B ; 000048, 15.709
041229 51 0B 00    1162*       dl 0x000B51 ; 000049, 15.916
04122C 77 0B 00    1163*       dl 0x000B77 ; 00004A, 16.123
04122F 9C 0B 00    1164*       dl 0x000B9C ; 00004B, 16.329
041232 C2 0B 00    1165*       dl 0x000BC2 ; 00004C, 16.535
041235 E7 0B 00    1166*       dl 0x000BE7 ; 00004D, 16.740
041238 0C 0C 00    1167*       dl 0x000C0C ; 00004E, 16.945
04123B 32 0C 00    1168*       dl 0x000C32 ; 00004F, 17.150
04123E 57 0C 00    1169*       dl 0x000C57 ; 000050, 17.354
041241 7C 0C 00    1170*       dl 0x000C7C ; 000051, 17.558
041244 A1 0C 00    1171*       dl 0x000CA1 ; 000052, 17.761
041247 C6 0C 00    1172*       dl 0x000CC6 ; 000053, 17.964
04124A EB 0C 00    1173*       dl 0x000CEB ; 000054, 18.166
04124D 0F 0D 00    1174*       dl 0x000D0F ; 000055, 18.368
041250 34 0D 00    1175*       dl 0x000D34 ; 000056, 18.569
041253 58 0D 00    1176*       dl 0x000D58 ; 000057, 18.770
041256 7D 0D 00    1177*       dl 0x000D7D ; 000058, 18.970
041259 A1 0D 00    1178*       dl 0x000DA1 ; 000059, 19.170
04125C C6 0D 00    1179*       dl 0x000DC6 ; 00005A, 19.370
04125F EA 0D 00    1180*       dl 0x000DEA ; 00005B, 19.569
041262 0E 0E 00    1181*       dl 0x000E0E ; 00005C, 19.767
041265 32 0E 00    1182*       dl 0x000E32 ; 00005D, 19.965
041268 56 0E 00    1183*       dl 0x000E56 ; 00005E, 20.163
04126B 7A 0E 00    1184*       dl 0x000E7A ; 00005F, 20.360
04126E 9E 0E 00    1185*       dl 0x000E9E ; 000060, 20.556
041271 C1 0E 00    1186*       dl 0x000EC1 ; 000061, 20.752
041274 E5 0E 00    1187*       dl 0x000EE5 ; 000062, 20.947
041277 08 0F 00    1188*       dl 0x000F08 ; 000063, 21.142
04127A 2C 0F 00    1189*       dl 0x000F2C ; 000064, 21.337
04127D 4F 0F 00    1190*       dl 0x000F4F ; 000065, 21.531
041280 72 0F 00    1191*       dl 0x000F72 ; 000066, 21.724
041283 95 0F 00    1192*       dl 0x000F95 ; 000067, 21.917
041286 B8 0F 00    1193*       dl 0x000FB8 ; 000068, 22.109
041289 DB 0F 00    1194*       dl 0x000FDB ; 000069, 22.301
04128C FE 0F 00    1195*       dl 0x000FFE ; 00006A, 22.493
04128F 21 10 00    1196*       dl 0x001021 ; 00006B, 22.683
041292 44 10 00    1197*       dl 0x001044 ; 00006C, 22.874
041295 66 10 00    1198*       dl 0x001066 ; 00006D, 23.063
041298 89 10 00    1199*       dl 0x001089 ; 00006E, 23.253
04129B AB 10 00    1200*       dl 0x0010AB ; 00006F, 23.441
04129E CD 10 00    1201*       dl 0x0010CD ; 000070, 23.629
0412A1 EF 10 00    1202*       dl 0x0010EF ; 000071, 23.817
0412A4 11 11 00    1203*       dl 0x001111 ; 000072, 24.004
0412A7 33 11 00    1204*       dl 0x001133 ; 000073, 24.191
0412AA 55 11 00    1205*       dl 0x001155 ; 000074, 24.376
0412AD 77 11 00    1206*       dl 0x001177 ; 000075, 24.562
0412B0 99 11 00    1207*       dl 0x001199 ; 000076, 24.747
0412B3 BA 11 00    1208*       dl 0x0011BA ; 000077, 24.931
0412B6 DC 11 00    1209*       dl 0x0011DC ; 000078, 25.115
0412B9 FD 11 00    1210*       dl 0x0011FD ; 000079, 25.298
0412BC 1E 12 00    1211*       dl 0x00121E ; 00007A, 25.481
0412BF 3F 12 00    1212*       dl 0x00123F ; 00007B, 25.663
0412C2 60 12 00    1213*       dl 0x001260 ; 00007C, 25.844
0412C5 81 12 00    1214*       dl 0x001281 ; 00007D, 26.025
0412C8 A2 12 00    1215*       dl 0x0012A2 ; 00007E, 26.206
0412CB C3 12 00    1216*       dl 0x0012C3 ; 00007F, 26.386
0412CE E4 12 00    1217*       dl 0x0012E4 ; 000080, 26.565
0412D1 04 13 00    1218*       dl 0x001304 ; 000081, 26.744
0412D4 25 13 00    1219*       dl 0x001325 ; 000082, 26.922
0412D7 45 13 00    1220*       dl 0x001345 ; 000083, 27.100
0412DA 65 13 00    1221*       dl 0x001365 ; 000084, 27.277
0412DD 85 13 00    1222*       dl 0x001385 ; 000085, 27.453
0412E0 A5 13 00    1223*       dl 0x0013A5 ; 000086, 27.629
0412E3 C5 13 00    1224*       dl 0x0013C5 ; 000087, 27.805
0412E6 E5 13 00    1225*       dl 0x0013E5 ; 000088, 27.979
0412E9 05 14 00    1226*       dl 0x001405 ; 000089, 28.154
0412EC 24 14 00    1227*       dl 0x001424 ; 00008A, 28.327
0412EF 44 14 00    1228*       dl 0x001444 ; 00008B, 28.501
0412F2 63 14 00    1229*       dl 0x001463 ; 00008C, 28.673
0412F5 83 14 00    1230*       dl 0x001483 ; 00008D, 28.845
0412F8 A2 14 00    1231*       dl 0x0014A2 ; 00008E, 29.017
0412FB C1 14 00    1232*       dl 0x0014C1 ; 00008F, 29.187
0412FE E0 14 00    1233*       dl 0x0014E0 ; 000090, 29.358
041301 FF 14 00    1234*       dl 0x0014FF ; 000091, 29.527
041304 1E 15 00    1235*       dl 0x00151E ; 000092, 29.697
041307 3C 15 00    1236*       dl 0x00153C ; 000093, 29.865
04130A 5B 15 00    1237*       dl 0x00155B ; 000094, 30.033
04130D 79 15 00    1238*       dl 0x001579 ; 000095, 30.201
041310 98 15 00    1239*       dl 0x001598 ; 000096, 30.368
041313 B6 15 00    1240*       dl 0x0015B6 ; 000097, 30.534
041316 D4 15 00    1241*       dl 0x0015D4 ; 000098, 30.700
041319 F2 15 00    1242*       dl 0x0015F2 ; 000099, 30.865
04131C 10 16 00    1243*       dl 0x001610 ; 00009A, 31.030
04131F 2E 16 00    1244*       dl 0x00162E ; 00009B, 31.194
041322 4C 16 00    1245*       dl 0x00164C ; 00009C, 31.357
041325 6A 16 00    1246*       dl 0x00166A ; 00009D, 31.520
041328 87 16 00    1247*       dl 0x001687 ; 00009E, 31.682
04132B A5 16 00    1248*       dl 0x0016A5 ; 00009F, 31.844
04132E C2 16 00    1249*       dl 0x0016C2 ; 0000A0, 32.005
041331 DF 16 00    1250*       dl 0x0016DF ; 0000A1, 32.166
041334 FC 16 00    1251*       dl 0x0016FC ; 0000A2, 32.326
041337 19 17 00    1252*       dl 0x001719 ; 0000A3, 32.486
04133A 36 17 00    1253*       dl 0x001736 ; 0000A4, 32.645
04133D 53 17 00    1254*       dl 0x001753 ; 0000A5, 32.803
041340 70 17 00    1255*       dl 0x001770 ; 0000A6, 32.961
041343 8C 17 00    1256*       dl 0x00178C ; 0000A7, 33.118
041346 A9 17 00    1257*       dl 0x0017A9 ; 0000A8, 33.275
041349 C5 17 00    1258*       dl 0x0017C5 ; 0000A9, 33.431
04134C E2 17 00    1259*       dl 0x0017E2 ; 0000AA, 33.587
04134F FE 17 00    1260*       dl 0x0017FE ; 0000AB, 33.742
041352 1A 18 00    1261*       dl 0x00181A ; 0000AC, 33.896
041355 36 18 00    1262*       dl 0x001836 ; 0000AD, 34.050
041358 52 18 00    1263*       dl 0x001852 ; 0000AE, 34.203
04135B 6E 18 00    1264*       dl 0x00186E ; 0000AF, 34.356
04135E 8A 18 00    1265*       dl 0x00188A ; 0000B0, 34.509
041361 A5 18 00    1266*       dl 0x0018A5 ; 0000B1, 34.660
041364 C1 18 00    1267*       dl 0x0018C1 ; 0000B2, 34.811
041367 DC 18 00    1268*       dl 0x0018DC ; 0000B3, 34.962
04136A F7 18 00    1269*       dl 0x0018F7 ; 0000B4, 35.112
04136D 13 19 00    1270*       dl 0x001913 ; 0000B5, 35.262
041370 2E 19 00    1271*       dl 0x00192E ; 0000B6, 35.410
041373 49 19 00    1272*       dl 0x001949 ; 0000B7, 35.559
041376 64 19 00    1273*       dl 0x001964 ; 0000B8, 35.707
041379 7F 19 00    1274*       dl 0x00197F ; 0000B9, 35.854
04137C 99 19 00    1275*       dl 0x001999 ; 0000BA, 36.001
04137F B4 19 00    1276*       dl 0x0019B4 ; 0000BB, 36.147
041382 CE 19 00    1277*       dl 0x0019CE ; 0000BC, 36.293
041385 E9 19 00    1278*       dl 0x0019E9 ; 0000BD, 36.438
041388 03 1A 00    1279*       dl 0x001A03 ; 0000BE, 36.582
04138B 1D 1A 00    1280*       dl 0x001A1D ; 0000BF, 36.726
04138E 37 1A 00    1281*       dl 0x001A37 ; 0000C0, 36.870
041391 51 1A 00    1282*       dl 0x001A51 ; 0000C1, 37.013
041394 6B 1A 00    1283*       dl 0x001A6B ; 0000C2, 37.155
041397 85 1A 00    1284*       dl 0x001A85 ; 0000C3, 37.297
04139A 9F 1A 00    1285*       dl 0x001A9F ; 0000C4, 37.439
04139D B9 1A 00    1286*       dl 0x001AB9 ; 0000C5, 37.579
0413A0 D2 1A 00    1287*       dl 0x001AD2 ; 0000C6, 37.720
0413A3 EC 1A 00    1288*       dl 0x001AEC ; 0000C7, 37.859
0413A6 05 1B 00    1289*       dl 0x001B05 ; 0000C8, 37.999
0413A9 1E 1B 00    1290*       dl 0x001B1E ; 0000C9, 38.137
0413AC 37 1B 00    1291*       dl 0x001B37 ; 0000CA, 38.276
0413AF 50 1B 00    1292*       dl 0x001B50 ; 0000CB, 38.413
0413B2 69 1B 00    1293*       dl 0x001B69 ; 0000CC, 38.550
0413B5 82 1B 00    1294*       dl 0x001B82 ; 0000CD, 38.687
0413B8 9B 1B 00    1295*       dl 0x001B9B ; 0000CE, 38.823
0413BB B4 1B 00    1296*       dl 0x001BB4 ; 0000CF, 38.959
0413BE CC 1B 00    1297*       dl 0x001BCC ; 0000D0, 39.094
0413C1 E5 1B 00    1298*       dl 0x001BE5 ; 0000D1, 39.228
0413C4 FD 1B 00    1299*       dl 0x001BFD ; 0000D2, 39.362
0413C7 16 1C 00    1300*       dl 0x001C16 ; 0000D3, 39.496
0413CA 2E 1C 00    1301*       dl 0x001C2E ; 0000D4, 39.629
0413CD 46 1C 00    1302*       dl 0x001C46 ; 0000D5, 39.762
0413D0 5E 1C 00    1303*       dl 0x001C5E ; 0000D6, 39.894
0413D3 76 1C 00    1304*       dl 0x001C76 ; 0000D7, 40.025
0413D6 8E 1C 00    1305*       dl 0x001C8E ; 0000D8, 40.156
0413D9 A5 1C 00    1306*       dl 0x001CA5 ; 0000D9, 40.286
0413DC BD 1C 00    1307*       dl 0x001CBD ; 0000DA, 40.416
0413DF D5 1C 00    1308*       dl 0x001CD5 ; 0000DB, 40.546
0413E2 EC 1C 00    1309*       dl 0x001CEC ; 0000DC, 40.675
0413E5 04 1D 00    1310*       dl 0x001D04 ; 0000DD, 40.803
0413E8 1B 1D 00    1311*       dl 0x001D1B ; 0000DE, 40.931
0413EB 32 1D 00    1312*       dl 0x001D32 ; 0000DF, 41.059
0413EE 49 1D 00    1313*       dl 0x001D49 ; 0000E0, 41.186
0413F1 60 1D 00    1314*       dl 0x001D60 ; 0000E1, 41.312
0413F4 77 1D 00    1315*       dl 0x001D77 ; 0000E2, 41.438
0413F7 8E 1D 00    1316*       dl 0x001D8E ; 0000E3, 41.564
0413FA A5 1D 00    1317*       dl 0x001DA5 ; 0000E4, 41.689
0413FD BB 1D 00    1318*       dl 0x001DBB ; 0000E5, 41.814
041400 D2 1D 00    1319*       dl 0x001DD2 ; 0000E6, 41.938
041403 E9 1D 00    1320*       dl 0x001DE9 ; 0000E7, 42.061
041406 FF 1D 00    1321*       dl 0x001DFF ; 0000E8, 42.184
041409 15 1E 00    1322*       dl 0x001E15 ; 0000E9, 42.307
04140C 2C 1E 00    1323*       dl 0x001E2C ; 0000EA, 42.429
04140F 42 1E 00    1324*       dl 0x001E42 ; 0000EB, 42.551
041412 58 1E 00    1325*       dl 0x001E58 ; 0000EC, 42.672
041415 6E 1E 00    1326*       dl 0x001E6E ; 0000ED, 42.793
041418 84 1E 00    1327*       dl 0x001E84 ; 0000EE, 42.913
04141B 99 1E 00    1328*       dl 0x001E99 ; 0000EF, 43.033
04141E AF 1E 00    1329*       dl 0x001EAF ; 0000F0, 43.152
041421 C5 1E 00    1330*       dl 0x001EC5 ; 0000F1, 43.271
041424 DA 1E 00    1331*       dl 0x001EDA ; 0000F2, 43.390
041427 F0 1E 00    1332*       dl 0x001EF0 ; 0000F3, 43.508
04142A 05 1F 00    1333*       dl 0x001F05 ; 0000F4, 43.625
04142D 1B 1F 00    1334*       dl 0x001F1B ; 0000F5, 43.742
041430 30 1F 00    1335*       dl 0x001F30 ; 0000F6, 43.859
041433 45 1F 00    1336*       dl 0x001F45 ; 0000F7, 43.975
041436 5A 1F 00    1337*       dl 0x001F5A ; 0000F8, 44.091
041439 6F 1F 00    1338*       dl 0x001F6F ; 0000F9, 44.206
04143C 84 1F 00    1339*       dl 0x001F84 ; 0000FA, 44.321
04143F 99 1F 00    1340*       dl 0x001F99 ; 0000FB, 44.435
041442 AD 1F 00    1341*       dl 0x001FAD ; 0000FC, 44.549
041445 C2 1F 00    1342*       dl 0x001FC2 ; 0000FD, 44.662
041448 D7 1F 00    1343*       dl 0x001FD7 ; 0000FE, 44.775
04144B EB 1F 00    1344*       dl 0x001FEB ; 0000FF, 44.888
04144E 00 20 00    1345*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041451             0036        include "fonts.inc"
041451 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 2B 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1C 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1E 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1E 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0037        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 BE 16 04 0018*       ld (logo_xvel),hl
041611 22 C1 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 C7 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 28 FF 0024*       ld hl,-240+24*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 3C 01 0026*       ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 25 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C4 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 68 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 1A 04 0041*       call vdu_cls
041639 21 29 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1B 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1F 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 99 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 07 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659             0063*       ; call vdu_flip
041659             0064*   
041659             0065*   ; decrement loop counter
041659 C1          0066*       pop bc
04165A 0B          0067*       dec bc
04165B 79          0068*       ld a,c
04165C B7          0069*       or a
04165D C2 30 16 04 0070*       jp nz,img_load_main
041661 78          0071*       ld a,b
041662 B7          0072*       or a
041663 C2 30 16 04 0073*       jp nz,img_load_main
041667 C9          0074*       ret
041668             0075*   
041668             0076*   load_next_image:
041668 FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
04166D FD E5       0078*       push iy
04166F FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041672 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041675 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041678 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167B FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04167E 22 06 16 04 0084*       ld (cur_buffer_id),hl
041682 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041685 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168A CD 56 1C 04 0087*       call vdu_load_img
04168E FD E1       0088*       pop iy
041690 ED 33 12    0089*       lea iy,iy+image_record_size
041693 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
041698 C9          0091*       ret
041699             0092*   
041699             0093*   move_logo:
041699             0094*   ; activate logo bitmap
041699 21 2A 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04169D CD 38 1B 04 0096*       call vdu_buff_select
0416A1             0097*   ; update position based on velocity parameters
0416A1 2A C7 16 04 0098*       ld hl,(logo_ypos)
0416A5 ED 5B C4 16 0099*       ld de,(logo_yvel)
       04          
0416AA 19          0100*       add hl,de
0416AB 22 C7 16 04 0101*       ld (logo_ypos),hl
0416AF             0102*   ; draw logo
0416AF ED 4B C1 16 0103*       ld bc,(logo_xpos)
       04          
0416B4 ED 5B C7 16 0104*       ld de,(logo_ypos)
       04          
0416B9 CD 3C 1F 04 0105*       call vdu_plot_bmp168
0416BD C9          0106*       ret
0416BE             0107*   
0416BE 00 00 00    0108*   logo_xvel: dl 0
0416C1 00 00 00    0109*   logo_xpos: dl 0
0416C4             0110*   
0416C4 00 00 00    0111*   logo_yvel: dl 0
0416C7 00 00 00    0112*   logo_ypos: dl 0
0416CA             0113*   
0416CA             0114*   load_ui_images:
0416CA             0115*   ; initialize image loading variables
0416CA 21 F4 59 04 0116*       ld hl,ui_image_list
0416CE 22 00 16 04 0117*       ld (cur_image_list),hl
0416D2             0118*   ; load images
0416D2 06 2B       0119*       ld b,ui_num_images
0416D4             0120*   @loop:
0416D4 C5          0121*       push bc
0416D5 CD 68 16 04 0122*       call load_next_image
0416D9 C1          0123*       pop bc
0416DA 10 F8       0124*       djnz @loop
0416DC C9          0125*       ret
0416DD             0126*   ; end load_ui_images
0416DD             0127*   
0416DD             0128*   load_sprite_images:
0416DD             0129*   ; initialize image loading variables
0416DD 21 97 4C 04 0130*       ld hl,sprites_image_list
0416E1 22 00 16 04 0131*       ld (cur_image_list),hl
0416E5 01 50 00 00 0132*       ld bc,sprites_num_images
0416E9             0133*   ; load images
0416E9 CD 30 16 04 0134*       call img_load_main
0416ED C9          0135*       ret
0416EE             0136*   ; end load_sprite_images
0416EE             0137*   
0416EE             0138*   load_tilesets:
0416EE             0139*   ; initialize image loading variables
0416EE 21 30 2F 04 0140*       ld hl,tiles_dg_image_list
0416F2 22 00 16 04 0141*       ld (cur_image_list),hl
0416F6 01 C1 00 00 0142*       ld bc,tiles_dg_num_images
0416FA             0143*   ; load images
0416FA CD 30 16 04 0144*       call img_load_main
0416FE C9          0145*       ret
0416FF             0146*   ; end load_tilesets
0416FF             0147*   
0416FF             0148*   load_backgrounds:
0416FF             0149*   ; initialize image loading variables
0416FF 21 00 2E 04 0150*       ld hl,bg_image_list
041703 22 00 16 04 0151*       ld (cur_image_list),hl
041707 01 08 00 00 0152*       ld bc,bg_num_images
04170B             0153*   ; load images
04170B CD 30 16 04 0154*       call img_load_main
04170F C9          0155*       ret
041710             0156*   ; end load_backgrounds
041710             0157*   
041710             0158*   ; ; initialize image loading variables
041710             0159*   ;     ld hl,tiles_xevious_image_list
041710             0160*   ;     ld (cur_image_list),hl
041710             0161*   ;     ld bc,tiles_xevious_num_images
041710             0162*   ; ; load images
041710             0163*   ;     call img_load_main
041710 C9          0164*       ret
041711             0038        include "timer.inc"
041711 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041800             0002*   
041800             0003*   ; Table 32. Timer Control Registers
041800             0004*   ; this constant is the base address of the timer control registers
041800             0005*   ; each timer takes three bytes:
041800             0006*   ;   0: control register
041800             0007*   ;   1: low byte of timer reset value
041800             0008*   ;   2: high byte of timer reset value
041800             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041800             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041800             0011*   TMR_CTL:     equ 80h
041800             0012*   
041800             0013*   ; Timer Control Register Bit Definitions
041800             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041800             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041800             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041800             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041800             0018*                               ; the TMRx_CTL register is read.
041800             0019*   
041800             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041800             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041800             0022*   
041800             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041800             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041800             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041800             0026*                               ; written to the counter when the end-of-count value is reached.
041800             0027*   
041800             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041800             0029*   CLK_DIV_256:  equ %00001100 ;
041800             0030*   CLK_DIV_64:   equ %00001000 ;
041800             0031*   CLK_DIV_16:   equ %00000100 ;
041800             0032*   CLK_DIV_4:    equ %00000000 ;
041800             0033*   
041800             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041800             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041800             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041800             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041800             0038*                               ; programmer must ensure that this bit is set to 1 each time
041800             0039*                               ; SINGLE-PASS mode is used.
041800             0040*   
041800             0041*   ; disable/enable the programmable reload timer
041800             0042*   PRT_EN_0:     equ %00000000 ;
041800             0043*   PRT_EN_1:     equ %00000001 ;
041800             0044*   
041800             0045*   ; Table 37. Timer Input Source Select Register
041800             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041800             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041800             0048*   ;   00: System clock / CLK_DIV
041800             0049*   ;   01: RTC / CLK_DIV
041800             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041800             0051*   ;   10: GPIO port B pin 1.
041800             0052*   ;   11: GPIO port B pin 1.
041800             0053*   TMR_ISS:   equ 92h ; register address
041800             0054*   
041800             0055*   ; Table 51. Real-Time Clock Control Register
041800             0056*   RTC_CTRL: equ EDh ; register address
041800             0057*   
041800             0058*   ; alarm interrupt disable/enable
041800             0059*   RTC_ALARM_0:    equ %00000000
041800             0060*   RTC_ALARM_1:    equ %10000000
041800             0061*   
041800             0062*   ; interrupt on alarm disable/enable
041800             0063*   RTC_INT_ENT_0:  equ %00000000
041800             0064*   RTC_INT_ENT_1:  equ %01000000
041800             0065*   
041800             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041800             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041800             0068*   
041800             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041800             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041800             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041800             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041800             0073*   
041800             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041800             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041800             0076*   
041800             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041800             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041800             0079*   
041800             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041800             0081*                                   ; RTC counter is enabled.
041800             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041800             0083*                                   ; RTC counter is disabled.
041800             0084*   
041800             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041800             0086*   
041800             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041800             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041800 00 00 00    0089*   prt_reload: dl 0x000000
041803             0090*   
041803             0091*   ; set PRT timer
041803             0092*   prt_set:
041803 21 00 00 00 0093*       ld hl,0
041807 22 51 18 04 0094*       ld (prt_irq_counter),hl
04180B 2A 00 18 04 0095*       ld hl,(prt_reload)
04180F ED 29 84    0096*       out0 ($84),l
041812 ED 21 85    0097*   	out0 ($85),h
041815             0098*   ; disable timer
041815 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041817 ED 39 83    0100*   	out0 ($83),a
04181A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04181A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04181C ED 39 83    0103*   	out0 ($83),a
04181F C9          0104*       ret
041820             0105*   
041820             0106*   ; ===============================================
041820             0107*   ; PRT Timer Interrupt Handling
041820             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041820             0109*   ; -----------------------------------------------
041820             0110*   prt_irq_init:
041820             0111*       ; set up interrupt vector table 2
041820 21 00 00 00 0112*   	ld hl,0
041824 3A 0C 01 00 0113*   	ld a,($10c)
041828 6F          0114*   	ld l,a
041829 3A 0D 01 00 0115*   	ld a,($10d)
04182D 67          0116*   	ld h,a
04182E             0117*   
04182E             0118*   	; skip over CALL ($c3)
04182E 23          0119*   	inc hl
04182F             0120*   	; load address of jump into vector table 2 (in ram)
04182F ED 27       0121*   	ld hl,(hl)
041831             0122*   
041831             0123*   	; write CALL prt_irq_handler to vector table 2
041831 3E C3       0124*   	ld a,$c3
041833 77          0125*   	ld (hl),a
041834 23          0126*   	inc hl
041835 11 3C 18 04 0127*   	ld de,prt_irq_handler
041839 ED 1F       0128*   	ld (hl),de
04183B             0129*   
04183B C9          0130*       ret
04183C             0131*   
04183C             0132*   prt_irq_handler:
04183C F3          0133*   	di
04183D F5          0134*   	push af
04183E E5          0135*       push hl
04183F ED 38 83    0136*   	in0 a,($83)
041842 2A 51 18 04 0137*   	ld hl,(prt_irq_counter)
041846 23          0138*   	inc hl
041847 22 51 18 04 0139*   	ld (prt_irq_counter),hl
04184B E1          0140*       pop hl
04184C F1          0141*   	pop af
04184D FB          0142*   	ei
04184E 5B ED 4D    0143*   	reti.l
041851             0144*   
041851             0145*   prt_irq_counter:
041851 00 00 00    0146*   	.dl 0
041854             0147*   prt_irq_counter_saved:
041854 00 00 00    0148*       .dl 0
041857             0149*   
041857             0150*   prt_loop_reset:
041857 E5          0151*       push hl
041858 21 00 00 00 0152*   	ld hl,0
04185C 22 51 18 04 0153*   	ld (prt_irq_counter),hl
041860 22 C2 18 04 0154*       ld (prt_loop_counter),hl
041864 22 C5 18 04 0155*       ld (prt_loops),hl
041868 CD 03 18 04 0156*       call prt_set
04186C E1          0157*       pop hl
04186D C9          0158*       ret
04186E             0159*   
04186E             0160*   prt_loop_start:
04186E E5          0161*       push hl
04186F 21 00 00 00 0162*   	ld hl,0
041873 22 51 18 04 0163*   	ld (prt_irq_counter),hl
041877 E1          0164*       pop hl
041878 C9          0165*       ret
041879             0166*   
041879             0167*   prt_loop_stop:
041879 E5          0168*       push hl
04187A D5          0169*       push de
04187B 2A 51 18 04 0170*       ld hl,(prt_irq_counter)
04187F ED 5B C2 18 0171*       ld de,(prt_loop_counter)
       04          
041884 19          0172*       add hl,de
041885 22 C2 18 04 0173*       ld (prt_loop_counter),hl
041889 21 00 00 00 0174*       ld hl,0
04188D 22 51 18 04 0175*       ld (prt_irq_counter),hl
041891 2A C5 18 04 0176*       ld hl,(prt_loops)
041895 23          0177*       inc hl
041896 22 C5 18 04 0178*       ld (prt_loops),hl
04189A D1          0179*       pop de
04189B E1          0180*       pop hl
04189C C9          0181*       ret
04189D             0182*   
04189D             0183*   ; inputs: bc = y,x text coordinates to print
04189D             0184*   prt_loop_print:
04189D F5          0185*       push af
04189E E5          0186*       push hl
04189F C5          0187*       push bc
0418A0 D5          0188*       push de
0418A1 DD E5       0189*       push ix
0418A3 FD E5       0190*       push iy
0418A5 CD 37 1A 04 0191*       call vdu_move_cursor
0418A9             0192*   
0418A9 2A C2 18 04 0193*       ld hl,(prt_loop_counter)
0418AD CD 06 02 04 0194*       call printDec
0418B1             0195*   
0418B1 2A C5 18 04 0196*       ld hl,(prt_loops)
0418B5 CD 06 02 04 0197*       call printDec
0418B9             0198*   
0418B9 FD E1       0199*       pop iy
0418BB DD E1       0200*       pop ix
0418BD D1          0201*       pop de
0418BE C1          0202*       pop bc
0418BF E1          0203*       pop hl
0418C0 F1          0204*       pop af
0418C1 C9          0205*       ret
0418C2             0206*   
0418C2             0207*   prt_loop_counter:
0418C2 00 00 00    0208*       .dl 0
0418C5             0209*   prt_loops:
0418C5 00 00 00    0210*       .dl 0
0418C8             0211*   
0418C8             0212*   ; ===============================================
0418C8             0213*   ; Timer functions
0418C8             0214*   ; -----------------------------------------------
0418C8             0215*   ; set a countdown timer
0418C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C8             0217*   ; returns: hl = current time
0418C8             0218*   tmr_set:
0418C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0418CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0418CB 3E 08       0001*M1 			LD	A, function
0418CD 5B CF       0002*M1 			RST.LIL	08h
0418CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0418D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0418D5 C9          0223*       ret
0418D6             0224*   
0418D6             0225*   ; gets time remaining on a countdown timer
0418D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0418D6             0229*   tmr_get:
0418D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0418D6 3E 08       0001*M1 			LD	A, function
0418D8 5B CF       0002*M1 			RST.LIL	08h
0418DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0418DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0418E0 AF          0233*       xor a                   ; clear carry
0418E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0418E6 AF          0236*       xor a                   ; clear carry
0418E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0418E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418E9 C9          0239*       ret
0418EA             0240*   
0418EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0418F0             0242*   
       FF FF FF FF 
       FF FF 
0418F0 00 00 00    0243*   timestamp_now: dl 0
0418F3 00 00 00    0244*   timestamp_old: dl 0
0418F6 00 00 00    0245*   timestamp_chg: dl 0
0418F9             0246*   
0418F9             0247*   ; update the global timestamp from the system clock
0418F9             0248*   ; inputs: none
0418F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0418F9             0250*   ;          ix = pointer to syvars table
0418F9             0251*   ; destroys: af,hl,de,ix
0418F9             0252*   timestamp_tick:
0418F9 ED 5B F0 18 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0418FE ED 53 F3 18 0254*       ld (timestamp_old),de   ; save previous time
       04          
041903             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041903 3E 08       0001*M1 			LD	A, function
041905 5B CF       0002*M1 			RST.LIL	08h
041907 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04190A 22 F0 18 04 0257*       ld (timestamp_now),hl   ; save current time
04190E AF          0258*       xor a                   ; clear carry
04190F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041911 22 F6 18 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041915 C9          0261*       ret
041916             0262*   
041916             0263*   ; set a countdown timer
041916             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041916             0265*   ; requires: timestamp_tick to be called at least once before this function
041916             0266*   ; returns: hl = current time
041916             0267*   ; destroys: hl
041916             0268*   timestamp_tmr_set:
041916 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041919 2A F0 18 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04191D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041920 C9          0272*       ret
041921             0273*   
041921             0274*   ; gets time remaining on a countdown timer following the global timestamp
041921             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041921             0276*   ; requires: timestamp_tick to be called at least once before this function
041921             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041921             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041921             0279*   ; destroys: af,hl,de
041921             0280*   timestamp_tmr_get:
041921 ED 5B F0 18 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041926 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041929 AF          0283*       xor a                   ; clear carry
04192A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04192C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04192F AF          0286*       xor a                   ; clear carry
041930 ED 5A       0287*       adc hl,de               ; hl = time remaining
041932             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041932 C9          0289*       ret
041933             0290*   
041933             0291*   ; set a stopwatch
041933             0292*   ; returns: hl = start time
041933             0293*   ; destroys: hl,ix
041933             0294*   stopwatch_set:
041933             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041933 3E 08       0001*M1 			LD	A, function
041935 5B CF       0002*M1 			RST.LIL	08h
041937 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04193A 22 4F 19 04 0297*       ld (stopwatch_started),hl            ; set start time
04193E C9          0298*       ret
04193F             0299*   
04193F             0300*   ; gets time elapsed on a stopwatch
04193F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04193F             0302*   ; destroys: af,hl,de,ix
04193F             0303*   stopwatch_get:
04193F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04193F 3E 08       0001*M1 			LD	A, function
041941 5B CF       0002*M1 			RST.LIL	08h
041943 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041946 ED 5B 4F 19 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04194B AF          0307*       xor a                   ; clear carry
04194C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04194E C9          0309*       ret
04194F             0310*   
04194F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041952             0312*   
041952             0313*   ; ------------------
041952             0314*   ; delay routine
041952             0315*   ; Author: Richard Turrnidge
041952             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041952             0317*   ; routine waits a fixed time,then returns
041952             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041952             0319*   ; eg. ld A,00000100b
041952             0320*   
041952             0321*   multiPurposeDelay:
       FF FF FF 
041952 F5          0322*       push af
041953 C5          0323*       push bc
041954 DD E5       0324*       push ix
041956 47          0325*       ld b,a
041957 3E 08       0326*       ld a,$08
041959 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04195B             0328*   
04195B             0329*   waitLoop:
04195B             0330*   
04195B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04195E             0332*   
04195E             0333*                                   ;   we check if bit set is same as last time we checked.
04195E             0334*                                   ;   bit 0 - don't use
04195E             0335*                                   ;   bit 1 - changes 64 times per second
04195E             0336*                                   ;   bit 2 - changes 32 times per second
04195E             0337*                                   ;   bit 3 - changes 16 times per second
04195E             0338*   
04195E             0339*                                   ;   bit 4 - changes 8 times per second
04195E             0340*                                   ;   bit 5 - changes 4 times per second
04195E             0341*                                   ;   bit 6 - changes 2 times per second
04195E             0342*                                   ;   bit 7 - changes 1 times per second
04195E A0          0343*       and b
04195F 4F          0344*       ld c,a
041960 3A 71 19 04 0345*       ld a,(oldTimeStamp)
041964 B9          0346*       cp c                        ; is A same as last value?
041965 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041967 79          0348*       ld a,c
041968 32 71 19 04 0349*       ld (oldTimeStamp),a        ; set new value
04196C             0350*   
04196C DD E1       0351*       pop ix
04196E C1          0352*       pop bc
04196F F1          0353*       pop af
041970 C9          0354*       ret
041971             0355*   
041971 00          0356*   oldTimeStamp:   .db 00h
041972             0039        include "vdu.inc"
041972 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041A00             0002*   
041A00             0003*   ; VDU 30: Home cursor
041A00             0004*   vdu_home_cursor:
041A00 3E 1E       0005*       ld a,30
041A02 5B D7       0006*   	rst.lil $10
041A04 C9          0007*   	ret
041A05             0008*   
041A05             0009*   vdu_cursor_on:
041A05 21 10 1A 04 0010*   	ld hl,@cmd
041A09 01 03 00 00 0011*   	ld bc,@end-@cmd
041A0D 5B DF       0012*   	rst.lil $18
041A0F C9          0013*   	ret
041A10             0014*   @cmd:
041A10 17 01 01    0015*   	db 23,1,1
041A13             0016*   @end:
041A13             0017*   
041A13             0018*   vdu_cursor_off:
041A13 21 1E 1A 04 0019*   	ld hl,@cmd
041A17 01 03 00 00 0020*   	ld bc,@end-@cmd
041A1B 5B DF       0021*   	rst.lil $18
041A1D C9          0022*   	ret
041A1E             0023*   @cmd:
041A1E 17 01 00    0024*   	db 23,1,0
041A21             0025*   @end:
041A21             0026*   
041A21             0027*   ; VDU 5: Write text at graphics cursor
041A21             0028*   ; inputs: a is the character to write to the screen
041A21             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041A21             0030*   ; outputs: see the name of the function
041A21             0031*   ; destroys: a, hl, bc
041A21             0032*   vdu_char_to_gfx_cursor:
041A21 32 31 1A 04 0033*   	ld (@arg),a
041A25 21 30 1A 04 0034*   	ld hl,@cmd
041A29 01 02 00 00 0035*   	ld bc,@end-@cmd
041A2D 5B DF       0036*   	rst.lil $18
041A2F C9          0037*   	ret
041A30 05          0038*   @cmd: db 5
041A31 00          0039*   @arg: db 0
041A32             0040*   @end:
041A32             0041*   ; VDU 9: Move cursor forward one character
041A32             0042*   vdu_cursor_forward:
041A32 3E 09       0043*       ld a,9
041A34 5B D7       0044*   	rst.lil $10
041A36 C9          0045*   	ret
041A37             0046*   
041A37             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041A37             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041A37             0049*   vdu_move_cursor:
041A37 ED 43 48 1A 0050*       ld (@x0),bc
       04          
041A3C 21 47 1A 04 0051*   	ld hl,@cmd
041A40 01 03 00 00 0052*   	ld bc,@end-@cmd
041A44 5B DF       0053*   	rst.lil $18
041A46 C9          0054*   	ret
041A47 1F          0055*   @cmd: 	db 31
041A48 00          0056*   @x0:	db 0
041A49 00          0057*   @y0: 	db 0
041A4A 00          0058*   @end: 	db 0 ; padding
041A4B             0059*   
041A4B             0060*   ; VDU 12: Clear text area (CLS)
041A4B             0061*   vdu_cls:
041A4B 3E 0C       0062*       ld a,12
041A4D 5B D7       0063*   	rst.lil $10
041A4F C9          0064*   	ret
041A50             0065*   
041A50             0066*   vdu_flip:
041A50 21 5B 1A 04 0067*   	ld hl,@cmd
041A54 01 03 00 00 0068*   	ld bc,@end-@cmd
041A58 5B DF       0069*   	rst.lil $18
041A5A C9          0070*   	ret
041A5B 17 00 C3    0071*   @cmd: db 23,0,0xC3
041A5E             0072*   @end:
041A5E             0073*   
041A5E             0074*   ; VDU 16: Clear graphics area (CLG)
041A5E             0075*   vdu_clg:
041A5E 3E 10       0076*       ld a,16
041A60 5B D7       0077*   	rst.lil $10
041A62 C9          0078*   	ret
041A63             0079*   
041A63             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041A63             0081*   ; VDU 23, 7: Scrolling
041A63             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041A63             0083*   ; inputs: a, extent; l, direction; h; speed
041A63             0084*   vdu_scroll_down:
041A63 32 78 1A 04 0085*   	ld (@extent),a
041A67 22 79 1A 04 0086*   	ld (@dir),hl ; implicitly populates @speed
041A6B 21 76 1A 04 0087*   	ld hl,@cmd
041A6F 01 05 00 00 0088*   	ld bc,@end-@cmd
041A73 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041A75 C9          0090*   	ret
041A76 17 07       0091*   @cmd:       db 23,7
041A78 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041A79 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041A7A 00          0094*   @speed:     db 0x00 ; pixels
041A7B 00          0095*   @end:		db 0x00 ; padding
041A7C             0096*   
041A7C             0097*   ; COLOUR MODES
041A7C             0098*   ; Mode	Effect
041A7C             0099*   ; 0	Set on-screen pixel to target colour value
041A7C             0100*   ; 1	OR value with the on-screen pixel
041A7C             0101*   ; 2	AND value with the on-screen pixel
041A7C             0102*   ; 3	XOR value with the on-screen pixel
041A7C             0103*   ; 4	Invert the on-screen pixel
041A7C             0104*   ; 5	No operation
041A7C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041A7C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041A7C             0107*   
041A7C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
041A7C             0109*   vdu_colour_text:
041A7C 32 8C 1A 04 0110*   	ld (@arg),a
041A80 21 8B 1A 04 0111*   	ld hl,@cmd
041A84 01 02 00 00 0112*   	ld bc,@end-@cmd
041A88 5B DF       0113*   	rst.lil $18
041A8A C9          0114*   	ret
041A8B 11          0115*   @cmd: db 17
041A8C 00          0116*   @arg: db 0
041A8D             0117*   @end:
041A8D             0118*   
041A8D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041A8D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041A8D             0121*   vdu_gcol:
041A8D 32 A2 1A 04 0122*   	ld (@mode),a
041A91 79          0123*       ld a,c
041A92 32 A3 1A 04 0124*       ld (@col),a
041A96 21 A1 1A 04 0125*   	ld hl,@cmd
041A9A 01 03 00 00 0126*   	ld bc,@end-@cmd
041A9E 5B DF       0127*   	rst.lil $18
041AA0 C9          0128*   	ret
041AA1 12          0129*   @cmd:  db 18
041AA2 00          0130*   @mode: db 0
041AA3 00          0131*   @col:  db 0
041AA4             0132*   @end:
041AA4             0133*   
041AA4             0134*   
041AA4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
041AA4             0136*   ; MIND THE LITTLE-ENDIANESS
041AA4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
041AA4             0138*   ; outputs; nothing
041AA4             0139*   ; destroys: a might make it out alive
041AA4             0140*   vdu_set_txt_viewport:
041AA4 ED 43 BA 1A 0141*       ld (@lb),bc
       04          
041AA9 ED 53 BC 1A 0142*   	ld (@rt),de
       04          
041AAE 21 B9 1A 04 0143*   	ld hl,@cmd
041AB2 01 05 00 00 0144*   	ld bc,@end-@cmd
041AB6 5B DF       0145*   	rst.lil $18
041AB8 C9          0146*   	ret
041AB9 1C          0147*   @cmd:   db 28 ; set text viewport command
041ABA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
041ABC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
041ABE 00          0150*   @end:   db 0x00	  ; padding
041ABF             0151*   
041ABF             0152*   ; Wait for VBLANK interrupt
041ABF             0153*   vdu_vblank:
041ABF DD E5       0154*       PUSH 	IX
041AC1             0155*   	MOSCALL	mos_sysvars
041AC1 3E 08       0001*M1 			LD	A, function
041AC3 5B CF       0002*M1 			RST.LIL	08h
041AC5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
041AC8             0157*   @wait:
041AC8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
041ACB 28 FB       0159*       JR	Z, @wait
041ACD DD E1       0160*       POP	IX
041ACF C9          0161*       RET
041AD0             0162*   
041AD0             0163*   ; VDU 29, x; y;: Set graphics origin
041AD0             0164*   ; This command sets the graphics origin.
041AD0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041AD0             0166*   ; inputs: bc=x0,de=y0
041AD0             0167*   ; outputs; nothing
041AD0             0168*   ; destroys: a might make it out alive
041AD0             0169*   vdu_set_gfx_origin:
041AD0 ED 43 E6 1A 0170*       ld (@x0),bc
       04          
041AD5 ED 53 E8 1A 0171*       ld (@y0),de
       04          
041ADA 21 E5 1A 04 0172*       ld hl,@cmd
041ADE 01 05 00 00 0173*       ld bc,@end-@cmd
041AE2 5B DF       0174*       rst.lil $18
041AE4 C9          0175*       ret
041AE5 1D          0176*   @cmd:   db 29 ; set graphics origin command
041AE6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
041AE8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
041AEA 00          0179*   @end:   db 0x00	  ; padding
041AEB             0180*   
041AEB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041AEB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
041AEB             0183*   ; 	because we have turned off logical screen scaling
041AEB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041AEB             0185*   ; outputs; nothing
041AEB             0186*   ; destroys: a might make it out alive
041AEB             0187*   vdu_set_gfx_viewport:
041AEB ED 43 0B 1B 0188*       ld (@x0),bc
       04          
041AF0 FD 22 0D 1B 0189*       ld (@y1),iy
       04          
041AF5 DD 22 0F 1B 0190*   	ld (@x1),ix
       04          
041AFA ED 53 11 1B 0191*   	ld (@y0),de
       04          
041AFF 21 0A 1B 04 0192*   	ld hl,@cmd
041B03 01 09 00 00 0193*   	ld bc,@end-@cmd
041B07 5B DF       0194*   	rst.lil $18
041B09 C9          0195*   	ret
041B0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041B0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041B0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041B0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041B11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041B13 00          0201*   @end:   db 0x00	  ; padding
041B14             0202*   
041B14             0203*   ; SCREEN MODES
041B14             0204*   ; ===============================
041B14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041B14             0206*   ; ---   ----  ----  ----  -------
041B14             0207*   ; 11    320   240   2     60hz
041B14             0208*   ; 139   320   240   2     60hz
041B14             0209*   ; 23    512   384   2     60hz
041B14             0210*   ; 151   512   384   2     60hz
041B14             0211*   ; 6     640   240   2     60hz
041B14             0212*   ; 134   640   240   2     60hz
041B14             0213*   ; 2     640   480   2     60hz
041B14             0214*   ; 130   640   480   2     60hz
041B14             0215*   ; 17    800   600   2     60hz
041B14             0216*   ; 145   800   600   2     60hz
041B14             0217*   ; 18    1024  768   2     60hz
041B14             0218*   ; 146   1024  768   2     60hz
041B14             0219*   ; ---   ----  ----  ----  -------
041B14             0220*   ; 10    320   240   4     60hz
041B14             0221*   ; 138   320   240   4     60hz
041B14             0222*   ; 22    512   384   4     60hz
041B14             0223*   ; 150   512   384   4     60hz
041B14             0224*   ; 5     640   240   4     60hz
041B14             0225*   ; 133   640   240   4     60hz
041B14             0226*   ; 1     640   480   4     60hz
041B14             0227*   ; 129   640   480   4     60hz
041B14             0228*   ; 16    800   600   4     60hz
041B14             0229*   ; 19    1024  768   4     60hz
041B14             0230*   ; ---   ----  ----  ----  -------
041B14             0231*   ; 9     320   240   16    60hz
041B14             0232*   ; 137   320   240   16    60hz
041B14             0233*   ; 21    512   384   16    60hz
041B14             0234*   ; 149   512   384   16    60hz
041B14             0235*   ; 4     640   240   16    60hz
041B14             0236*   ; 132   640   240   16    60hz
041B14             0237*   ; 0     640   480   16    60hz
041B14             0238*   ; 7     n/a   n/a   16    60hz
041B14             0239*   ; ---   ----  ----  ----  -------
041B14             0240*   ; 8     320   240   64    60hz
041B14             0241*   ; 136   320   240   64    60hz
041B14             0242*   ; 20    512   384   64    60hz
041B14             0243*   ; 3     640   240   64    60hz
041B14             0244*   ; ---   ----  ----  ----  -------
041B14             0245*   vdu_set_screen_mode:
041B14 32 24 1B 04 0246*   	ld (@arg),a
041B18 21 23 1B 04 0247*   	ld hl,@cmd
041B1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041B20 5B DF       0249*   	rst.lil $18
041B22 C9          0250*   	ret
041B23 16          0251*   @cmd: db 22 ; set screen mode
041B24 00          0252*   @arg: db 0  ; screen mode parameter
041B25             0253*   @end:
041B25             0254*   
041B25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041B25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041B25             0257*   ; note: default setting on boot is scaling ON
041B25             0258*   vdu_set_scaling:
041B25 32 37 1B 04 0259*   	ld (@arg),a
041B29 21 34 1B 04 0260*   	ld hl,@cmd
041B2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041B31 5B DF       0262*   	rst.lil $18
041B33 C9          0263*   	ret
041B34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041B37 00          0265*   @arg: db 0  ; scaling on/off
041B38             0266*   @end:
041B38             0267*   
041B38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041B38             0269*   ; inputs: hl=bufferId
041B38             0270*   vdu_buff_select:
041B38 22 4A 1B 04 0271*   	ld (@bufferId),hl
041B3C 21 47 1B 04 0272*   	ld hl,@cmd
041B40 01 05 00 00 0273*   	ld bc,@end-@cmd
041B44 5B DF       0274*   	rst.lil $18
041B46 C9          0275*   	ret
041B47 17 1B 20    0276*   @cmd: db 23,27,0x20
041B4A 00 00       0277*   @bufferId: dw 0x0000
041B4C 00          0278*   @end: db 0x00 ; padding
041B4D             0279*   
041B4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041B4D             0281*   ; inputs: a=format; bc=width; de=height
041B4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041B4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041B4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041B4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041B4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041B4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041B4D             0288*   vdu_bmp_create:
041B4D ED 43 69 1B 0289*       ld (@width),bc
       04          
041B52 ED 53 6B 1B 0290*       ld (@height),de
       04          
041B57 32 6D 1B 04 0291*       ld (@fmt),a
041B5B 21 66 1B 04 0292*   	ld hl,@cmd
041B5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041B63 5B DF       0294*   	rst.lil $18
041B65 C9          0295*   	ret
041B66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041B69 00 00       0297*   @width:     dw 0x0000
041B6B 00 00       0298*   @height:    dw 0x0000
041B6D 00          0299*   @fmt:       db 0x00
041B6E             0300*   @end:
041B6E             0301*   
041B6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041B6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041B6E             0304*   vdu_load_img_rgba2_to_8:
041B6E             0305*   ; backup the target buffer id and image dimensions
041B6E E5          0306*       push hl
041B6F D5          0307*       push de
041B70 C5          0308*       push bc
041B71             0309*   ; load the rgba2 image to working buffer 65534
041B71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041B75 CD 78 1C 04 0311*   	call vdu_load_buffer_from_file
041B79             0312*   ; restore the image dimensions and target buffer id
041B79 C1          0313*       pop bc
041B7A D1          0314*       pop de
041B7B E1          0315*       pop hl
041B7C             0316*   ; fall through to vdu_rgba2_to_8
041B7C             0317*   
041B7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041B7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041B7C             0320*   ; the "expand bitmap" command is:
041B7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041B7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041B7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041B7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041B7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041B7C             0326*   ; VDU 23,27,&21,width%;height%;0
041B7C             0327*   ; -------------------------------------------------------------------
041B7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041B7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041B7C             0330*   vdu_rgba2_to_8:
041B7C             0331*   ; load the image dimensions and buffer id parameters
041B7C ED 43 D8 1B 0332*       ld (@width),bc
       04          
041B81 ED 53 DA 1B 0333*       ld (@height),de
       04          
041B86 22 BD 1B 04 0334*       ld (@bufferId0),hl
041B8A 22 CA 1B 04 0335*       ld (@bufferId2),hl
041B8E 22 D3 1B 04 0336*       ld (@bufferId1),hl
041B92             0337*   ; clean up bytes that got stomped on by the ID loads
041B92 3E 48       0338*       ld a,0x48
041B94 32 BF 1B 04 0339*       ld (@bufferId0+2),a
041B98 3E 17       0340*       ld a,23
041B9A 32 D5 1B 04 0341*       ld (@bufferId1+2),a
041B9E 3E 18       0342*       ld a,24
041BA0 32 CC 1B 04 0343*       ld (@bufferId2+2),a
041BA4 AF          0344*       xor a
041BA5 32 DC 1B 04 0345*       ld (@height+2),a
041BA9             0346*   ; send the vdu command strings
041BA9 21 B4 1B 04 0347*       ld hl,@beg
041BAD 01 29 00 00 0348*       ld bc,@end-@beg
041BB1 5B DF       0349*       rst.lil $18
041BB3 C9          0350*       ret
041BB4             0351*   @beg:
041BB4             0352*   ; Command 14: Consolidate blocks in a buffer
041BB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041BB4 17 00 A0    0354*       db 23,0,0xA0
041BB7 FE FF       0355*       dw 65534 ; workingBufferId
041BB9 0E          0356*       db 14 ; consolidate blocks
041BBA             0357*   ; the "expand bitmap" command is:
041BBA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041BBA 17 00 A0    0359*       db 23,0,0xA0
041BBD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041BBF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041BC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041BC1 FE FF       0363*       dw 65534 ; sourceBufferId
041BC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041BC7             0365*   ; reverse the byte order to fix endian-ness:
041BC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041BC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041BC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041BC7 17 00 A0    0369*       db 23,0,0xA0
041BCA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041BCC 18          0371*       db 24 ; reverse byte order
041BCD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041BCE 04 00       0373*       dw 4 ; size (4 bytes)
041BD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041BD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041BD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041BD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041BD5             0378*   ; VDU 23,27,&21,width%;height%;0
041BD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041BD8 00 00       0380*   @width: dw 0x0000
041BDA 00 00       0381*   @height: dw 0x0000
041BDC 00          0382*       db 0x00 ; rgba8888 format
041BDD             0383*   @end:
041BDD             0384*   
041BDD             0385*   ; scratch variables
041BDD 00 00 00    0386*   bufferId0: dl 0x000000
041BE0 00 00 00    0387*   bufferId1: dl 0x000000
041BE3             0388*   
041BE3             0389*   ; load a vdu buffer from local memory
041BE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BE3             0391*   vdu_load_buffer:
041BE3 ED 43 0C 1C 0392*       ld (@length),bc
       04          
041BE8 D5          0393*       push de ; save data pointer
041BE9             0394*   ; send the vdu command string
041BE9 7D          0395*       ld a,l
041BEA 32 09 1C 04 0396*       ld (@bufferId),a
041BEE 7C          0397*       ld a,h
041BEF 32 0A 1C 04 0398*       ld (@bufferId+1),a
041BF3 21 06 1C 04 0399*       ld hl,@cmd
041BF7 01 08 00 00 0400*       ld bc,@end-@cmd
041BFB 5B DF       0401*       rst.lil $18
041BFD             0402*   ; send the buffer data
041BFD E1          0403*       pop hl ; pointer to data
041BFE ED 4B 0C 1C 0404*       ld bc,(@length)
       04          
041C03 5B DF       0405*       rst.lil $18 ; send it
041C05 C9          0406*       ret
041C06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041C06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041C09 00 00       0409*   @bufferId:	dw 0x0000
041C0B 00          0410*   		    db 0 ; load buffer
041C0C 00 00       0411*   @length:	dw 0x0000
041C0E 00          0412*   @end: db 0 ; padding
041C0F             0413*   
041C0F             0414*   ; clear a buffer
041C0F             0415*   ; inputs: hl = bufferId
041C0F             0416*   vdu_clear_buffer:
041C0F 7D          0417*       ld a,l
041C10 32 27 1C 04 0418*       ld (@bufferId),a
041C14 7C          0419*       ld a,h
041C15 32 28 1C 04 0420*       ld (@bufferId+1),a
041C19 21 24 1C 04 0421*       ld hl,@cmd
041C1D 01 06 00 00 0422*       ld bc,@end-@cmd
041C21 5B DF       0423*       rst.lil $18
041C23 C9          0424*       ret
041C24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041C27 00 00       0426*   @bufferId:	dw 0x0000
041C29 02          0427*   		    db 2 ; clear buffer
041C2A             0428*   @end:
041C2A             0429*   
041C2A             0430*   vdu_clear_all_buffers:
041C2A             0431*   ; clear all buffers
041C2A 21 35 1C 04 0432*       ld hl,@beg
041C2E 01 06 00 00 0433*       ld bc,@end-@beg
041C32 5B DF       0434*       rst.lil $18
041C34 C9          0435*       ret
041C35 17 00 A0    0436*   @beg: db 23,0,$A0
041C38 FF FF       0437*         dw -1 ; clear all buffers
041C3A 02          0438*         db 2  ; command 2: clear a buffer
041C3B             0439*   @end:
041C3B             0440*   
041C3B             0441*   ; Command 14: Consolidate blocks in a buffer
041C3B             0442*   vdu_consolidate_buffer:
041C3B             0443*   ; set parameters for vdu call
041C3B 7D          0444*       ld a,l
041C3C 32 53 1C 04 0445*       ld (@bufferId),a
041C40 7C          0446*       ld a,h
041C41 32 54 1C 04 0447*       ld (@bufferId+1),a
041C45 21 50 1C 04 0448*       ld hl,@beg
041C49 01 06 00 00 0449*       ld bc,@end-@beg
041C4D 5B DF       0450*       rst.lil $18
041C4F C9          0451*       ret
041C50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041C50 17 00 A0    0453*   @beg: db 23,0,0xA0
041C53 00 00       0454*   @bufferId: dw 0x0000
041C55 0E          0455*              db 14
041C56             0456*   @end:
041C56             0457*   
041C56             0458*   ; load an image file to a buffer and make it a bitmap
041C56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041C56             0460*   vdu_load_img:
041C56             0461*   ; back up image type and dimension parameters
041C56 22 DD 1B 04 0462*       ld (bufferId0),hl
041C5A F5          0463*       push af
041C5B C5          0464*   	push bc
041C5C D5          0465*   	push de
041C5D             0466*   ; load the image
041C5D CD 78 1C 04 0467*   	call vdu_load_buffer_from_file
041C61             0468*   ; now make it a bitmap
041C61 2A DD 1B 04 0469*       ld hl,(bufferId0)
041C65 CD 3B 1C 04 0470*       call vdu_consolidate_buffer
041C69 2A DD 1B 04 0471*       ld hl,(bufferId0)
041C6D CD 38 1B 04 0472*       call vdu_buff_select
041C71 D1          0473*   	pop de ; image height
041C72 C1          0474*   	pop bc ; image width
041C73 F1          0475*   	pop af ; image type
041C74 C3 4D 1B 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041C78             0477*   
041C78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041C78             0479*   vdu_load_buffer_from_file:
041C78 22 DD 1B 04 0480*       ld (bufferId0),hl
041C7C             0481*   
041C7C             0482*   ; clear target buffer
041C7C CD 0F 1C 04 0483*       call vdu_clear_buffer
041C80             0484*   
041C80             0485*   ; open the file in read mode
041C80             0486*   ; Open a file
041C80             0487*   ; HLU: Filename
041C80             0488*   ;   C: Mode
041C80             0489*   ; Returns:
041C80             0490*   ;   A: Filehandle, or 0 if couldn't open
041C80 FD E5       0491*   	push iy ; pointer to filename
041C82 E1          0492*   	pop hl
041C83 0E 01       0493*   	ld c,fa_read
041C85             0494*       MOSCALL mos_fopen
041C85 3E 0A       0001*M1 			LD	A, function
041C87 5B CF       0002*M1 			RST.LIL	08h
041C89 32 C4 1C 04 0495*       ld (@filehandle),a
041C8D             0496*   
041C8D             0497*   @read_file:
041C8D             0498*   ; Read a block of data from a file
041C8D             0499*   ;   C: Filehandle
041C8D             0500*   ; HLU: Pointer to where to write the data to
041C8D             0501*   ; DEU: Number of bytes to read
041C8D             0502*   ; Returns:
041C8D             0503*   ; DEU: Number of bytes read
041C8D 3A C4 1C 04 0504*       ld a,(@filehandle)
041C91 4F          0505*       ld c,a
041C92 21 00 E0 B7 0506*       ld hl,filedata
041C96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041C9A             0508*       MOSCALL mos_fread
041C9A 3E 1A       0001*M1 			LD	A, function
041C9C 5B CF       0002*M1 			RST.LIL	08h
041C9E             0509*   
041C9E             0510*   ; test de for zero bytes read
041C9E 21 00 00 00 0511*       ld hl,0
041CA2 AF          0512*       xor a ; clear carry
041CA3 ED 52       0513*       sbc hl,de
041CA5 CA BB 1C 04 0514*       jp z,@close_file
041CA9             0515*   
041CA9             0516*   ; load a vdu buffer from local memory
041CA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CA9 2A DD 1B 04 0518*       ld hl,(bufferId0)
041CAD D5          0519*       push de ; chunksize
041CAE C1          0520*       pop bc
041CAF 11 00 E0 B7 0521*       ld de,filedata
041CB3 CD E3 1B 04 0522*       call vdu_load_buffer
041CB7             0523*   
041CB7             0524*   ; read the next block
041CB7 C3 8D 1C 04 0525*       jp @read_file
041CBB             0526*   
041CBB             0527*   ; close the file
041CBB             0528*   @close_file:
041CBB 3A C4 1C 04 0529*       ld a,(@filehandle)
041CBF             0530*       MOSCALL mos_fclose
041CBF 3E 0B       0001*M1 			LD	A, function
041CC1 5B CF       0002*M1 			RST.LIL	08h
041CC3 C9          0531*       ret ; vdu_load_buffer_from_file
041CC4             0532*   
041CC4 00          0533*   @filehandle: db 0 ; file handle
041CC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041CC8             0535*   
041CC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041CCB             0537*   
041CCB             0538*   ; File information structure (FILINFO)
041CCB             0539*   @filinfo:
041CCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041CCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041CD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041CD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041CD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041CE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041DE1             0040        include "vdu_fonts.inc"
041DE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*   ; select font
041E00             0003*   ; inputs: hl = bufferId, a = font flags
041E00             0004*   ; Flags:
041E00             0005*   ; Bit	Description
041E00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041E00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041E00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041E00             0009*   ; 1-7	Reserved for future use
041E00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041E00             0011*   vdu_font_select:
041E00 22 17 1E 04 0012*       ld (@bufferId),hl
041E04 32 19 1E 04 0013*       ld (@flags),a
041E08 21 13 1E 04 0014*       ld hl,@cmd
041E0C 01 07 00 00 0015*       ld bc,@end-@cmd
041E10 5B DF       0016*       rst.lil $18
041E12 C9          0017*       ret
041E13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041E17 00 00       0019*   @bufferId: dw 0x0000
041E19 00          0020*   @flags: db 0x00
041E1A             0021*   @end:
041E1A             0022*   
041E1A             0023*   ; create font from buffer
041E1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041E1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041E1A             0026*   vdu_font_create:
041E1A 22 3F 1E 04 0027*       ld (@bufferId),hl
041E1E ED 53 41 1E 0028*       ld (@width),de ; also loads height
       04          
041E23 32 44 1E 04 0029*       ld (@flags),a
041E27 7A          0030*       ld a,d ; height
041E28 32 43 1E 04 0031*       ld (@ascent),a ; ascent = height
041E2C             0032*   ; consolidate buffer
041E2C CD 3B 1C 04 0033*       call vdu_consolidate_buffer
041E30             0034*   ; create font
041E30 21 3B 1E 04 0035*       ld hl,@cmd
041E34 01 0A 00 00 0036*       ld bc,@end-@cmd
041E38 5B DF       0037*       rst.lil $18
041E3A C9          0038*       ret
041E3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041E3F 00 00       0040*   @bufferId: dw 0x0000
041E41 00          0041*   @width: db 0x00
041E42 00          0042*   @height: db 0x00
041E43 00          0043*   @ascent: db 0x00
041E44 00          0044*   @flags: db 0x00
041E45             0045*   @end:
041E45             0046*   
041E45             0047*   ; set or adjust font property
041E45             0048*   ; inputs: hl = bufferId, a = field, de = value
041E45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041E45             0050*   vdu_font_property:
041E45 22 61 1E 04 0051*       ld (@bufferId),hl
041E49 32 63 1E 04 0052*       ld (@field),a
041E4D ED 53 64 1E 0053*       ld (@value),de
       04          
041E52 21 5D 1E 04 0054*       ld hl,@cmd
041E56 01 09 00 00 0055*       ld bc,@end-@cmd
041E5A 5B DF       0056*       rst.lil $18
041E5C C9          0057*       ret
041E5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041E61 00 00       0059*   @bufferId: dw 0x0000
041E63 00          0060*   @field: db 0x00
041E64 00 00       0061*   @value: dw 0x0000
041E66 00          0062*   @end: db 0x00 ; padding
041E67             0063*   
041E67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041E67             0065*   
041E67             0066*   ; Clear/Delete font
041E67             0067*   ; inputs: hl = bufferId
041E67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041E67             0069*   vdu_font_clear:
041E67 22 7A 1E 04 0070*       ld (@bufferId),hl
041E6B 21 76 1E 04 0071*       ld hl,@cmd
041E6F 01 06 00 00 0072*       ld bc,@end-@cmd
041E73 5B DF       0073*       rst.lil $18
041E75 C9          0074*       ret
041E76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041E7A 00 00       0076*   @bufferId: dw 0x0000
041E7C 00          0077*   @end: db 0x00 ; padding
041E7D             0078*   
041E7D             0079*   ; Copy system font to buffer
041E7D             0080*   ; inputs: hl = bufferId
041E7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041E7D             0082*   vdu_font_copy_system:
041E7D 22 90 1E 04 0083*       ld (@bufferId),hl
041E81 21 8C 1E 04 0084*       ld hl,@cmd
041E85 01 06 00 00 0085*       ld bc,@end-@cmd
041E89 5B DF       0086*       rst.lil $18
041E8B C9          0087*       ret
041E8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041E90 00 00       0089*   @bufferId: dw 0x0000
041E92 00          0090*   @end: db 0x00 ; padding
041E93             0041        include "vdu_plot.inc"
041E93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041F00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F00             0003*   ; PLOT code 	(Decimal) 	Effect
041F00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041F00             0005*   plot_sl_both: equ 0x00
041F00             0006*   
041F00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041F00             0008*   plot_sl_first: equ 0x08
041F00             0009*   
041F00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041F00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041F00             0012*   
041F00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041F00             0014*   plot_sl_last: equ 0x20
041F00             0015*   
041F00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041F00             0017*   plot_sl_none: equ 0x28
041F00             0018*   
041F00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041F00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041F00             0021*   
041F00             0022*   ; &40-&47 	64-71 	Point plot
041F00             0023*   plot_pt: equ 0x40
041F00             0024*   
041F00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041F00             0026*   plot_lf_lr_non_bg: equ 0x48
041F00             0027*   
041F00             0028*   ; &50-&57 	80-87 	Triangle fill
041F00             0029*   plot_tf: equ 0x50
041F00             0030*   
041F00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041F00             0032*   plot_lf_r_bg: equ 0x58
041F00             0033*   
041F00             0034*   ; &60-&67 	96-103 	Rectangle fill
041F00             0035*   plot_rf: equ 0x60
041F00             0036*   
041F00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041F00             0038*   plot_lf_lr_fg: equ 0x60
041F00             0039*   
041F00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041F00             0041*   plot_pf: equ 0x70
041F00             0042*   
041F00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041F00             0044*   plot_lf_r_non_fg: equ 0x78
041F00             0045*   
041F00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041F00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041F00             0048*   
041F00             0049*   ; &90-&97 	144-151 	Circle outline
041F00             0050*   plot_co: equ 0x90
041F00             0051*   
041F00             0052*   ; &98-&9F 	152-159 	Circle fill
041F00             0053*   plot_cf: equ 0x98
041F00             0054*   
041F00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041F00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041F00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041F00             0058*   
041F00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041F00             0060*   plot_rcm: equ 0xB8
041F00             0061*   
041F00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041F00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041F00             0064*   ; &D0-&D7 	208-215 	Not defined
041F00             0065*   ; &D8-&DF 	216-223 	Not defined
041F00             0066*   ; &E0-&E7 	224-231 	Not defined
041F00             0067*   
041F00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041F00             0069*   plot_bmp: equ 0xE8
041F00             0070*   
041F00             0071*   ; &F0-&F7 	240-247 	Not defined
041F00             0072*   ; &F8-&FF 	248-255 	Not defined
041F00             0073*   
041F00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041F00             0075*   ; Agon Console8 VDP 2.2.0
041F00             0076*   
041F00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041F00             0078*   ; Plot code 	Effect
041F00             0079*   ; 0 	Move relative
041F00             0080*   mv_rel: equ 0
041F00             0081*   
041F00             0082*   ; 1 	Plot relative in current foreground colour
041F00             0083*   dr_rel_fg: equ 1
041F00             0084*   
041F00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041F00             0086*   ; 3 	Plot relative in current background colour
041F00             0087*   dr_rel_bg: equ 3
041F00             0088*   
041F00             0089*   ; 4 	Move absolute
041F00             0090*   mv_abs: equ 4
041F00             0091*   
041F00             0092*   ; 5 	Plot absolute in current foreground colour
041F00             0093*   dr_abs_fg: equ 5
041F00             0094*   
041F00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041F00             0096*   ; 7 	Plot absolute in current background colour
041F00             0097*   dr_abs_bg: equ 7
041F00             0098*   
041F00             0099*   ; Codes 0-3 use the position data provided as part of the command
041F00             0100*   ; as a relative position, adding the position given to the current
041F00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041F00             0102*   ; as part of the command as an absolute position, setting the current
041F00             0103*   ; graphical cursor position to the position given.
041F00             0104*   
041F00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041F00             0106*   ; current pixel colour. These operations cannot currently be supported
041F00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041F00             0108*   ; supported. Support for these codes may be added in a future version
041F00             0109*   ; of the VDP firmware.
041F00             0110*   
041F00             0111*   ; 16 colour palette constants
041F00             0112*   c_black: equ 0
041F00             0113*   c_red_dk: equ 1
041F00             0114*   c_green_dk: equ 2
041F00             0115*   c_yellow_dk: equ 3
041F00             0116*   c_blue_dk: equ 4
041F00             0117*   c_magenta_dk: equ 5
041F00             0118*   c_cyan_dk: equ 6
041F00             0119*   c_grey: equ 7
041F00             0120*   c_grey_dk: equ 8
041F00             0121*   c_red: equ 9
041F00             0122*   c_green: equ 10
041F00             0123*   c_yellow: equ 11
041F00             0124*   c_blue: equ 12
041F00             0125*   c_magenta: equ 13
041F00             0126*   c_cyan: equ 14
041F00             0127*   c_white: equ 15
041F00             0128*   
041F00             0129*   ; VDU 25, mode, x; y;: PLOT command
041F00             0130*   ; inputs: a=mode, bc=x0, de=y0
041F00             0131*   vdu_plot:
041F00 32 1A 1F 04 0132*       ld (@mode),a
041F04 ED 43 1B 1F 0133*       ld (@x0),bc
       04          
041F09 ED 53 1D 1F 0134*       ld (@y0),de
       04          
041F0E 21 19 1F 04 0135*   	ld hl,@cmd
041F12 01 06 00 00 0136*   	ld bc,@end-@cmd
041F16 5B DF       0137*   	rst.lil $18
041F18 C9          0138*   	ret
041F19 19          0139*   @cmd:   db 25
041F1A 00          0140*   @mode:  db 0
041F1B 00 00       0141*   @x0: 	dw 0
041F1D 00 00       0142*   @y0: 	dw 0
041F1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041F20             0144*   
041F20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041F20             0147*   ; VDU 25, mode, x; y;: PLOT command
041F20             0148*   ; inputs: bc=x0, de=y0
041F20             0149*   ; prerequisites: vdu_buff_select
041F20             0150*   vdu_plot_bmp:
041F20 ED 43 37 1F 0151*       ld (@x0),bc
       04          
041F25 ED 53 39 1F 0152*       ld (@y0),de
       04          
041F2A 21 35 1F 04 0153*   	ld hl,@cmd
041F2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041F32 5B DF       0155*   	rst.lil $18
041F34 C9          0156*   	ret
041F35 19          0157*   @cmd:   db 25
041F36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F37 00 00       0159*   @x0: 	dw 0x0000
041F39 00 00       0160*   @y0: 	dw 0x0000
041F3B 00          0161*   @end:   db 0x00 ; padding
041F3C             0162*   
041F3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041F3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041F3C             0166*   ; inputs: bc=x0, de=y0
041F3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041F3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041F3C             0169*   ;   the fractional portiion of the inputs are truncated
041F3C             0170*   ;   leaving only the 16-bit integer portion
041F3C             0171*   ; prerequisites: vdu_buff_select
041F3C             0172*   vdu_plot_bmp168:
041F3C             0173*   ; populate in the reverse of normal to keep the
041F3C             0174*   ; inputs from stomping on each other
041F3C ED 53 5A 1F 0175*       ld (@y0-1),de
       04          
041F41 ED 43 58 1F 0176*       ld (@x0-1),bc
       04          
041F46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041F48 32 58 1F 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041F4C 21 57 1F 04 0179*   	ld hl,@cmd
041F50 01 06 00 00 0180*   	ld bc,@end-@cmd
041F54 5B DF       0181*   	rst.lil $18
041F56 C9          0182*   	ret
041F57 19          0183*   @cmd:   db 25
041F58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F59 00 00       0185*   @x0: 	dw 0x0000
041F5B 00 00       0186*   @y0: 	dw 0x0000
041F5D             0187*   @end:  ; no padding required b/c we shifted de right
041F5D             0188*   
041F5D             0189*   ; draw a filled rectangle
041F5D             0190*   vdu_plot_rf:
041F5D ED 43 84 1F 0191*       ld (@x0),bc
       04          
041F62 ED 53 86 1F 0192*       ld (@y0),de
       04          
041F67 DD 22 8A 1F 0193*       ld (@x1),ix
       04          
041F6C FD 22 8C 1F 0194*       ld (@y1),iy
       04          
041F71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041F73 32 88 1F 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F77 21 82 1F 04 0197*   	ld hl,@cmd0
041F7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041F7F 5B DF       0199*   	rst.lil $18
041F81 C9          0200*       ret
041F82 19          0201*   @cmd0:  db 25 ; plot
041F83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041F84 00 00       0203*   @x0:    dw 0x0000
041F86 00 00       0204*   @y0:    dw 0x0000
041F88 19          0205*   @cmd1:  db 25 ; plot
041F89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041F8A 00 00       0207*   @x1:    dw 0x0000
041F8C 00 00       0208*   @y1:    dw 0x0000
041F8E 00          0209*   @end:   db 0x00 ; padding
041F8F             0210*   
041F8F             0211*   ; draw a filled circle
041F8F             0212*   vdu_plot_cf:
041F8F ED 43 B6 1F 0213*       ld (@x0),bc
       04          
041F94 ED 53 B8 1F 0214*       ld (@y0),de
       04          
041F99 DD 22 BC 1F 0215*       ld (@x1),ix
       04          
041F9E FD 22 BE 1F 0216*       ld (@y1),iy
       04          
041FA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041FA5 32 BA 1F 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041FA9 21 B4 1F 04 0219*   	ld hl,@cmd0
041FAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041FB1 5B DF       0221*   	rst.lil $18
041FB3 C9          0222*       ret
041FB4 19          0223*   @cmd0:  db 25 ; plot
041FB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041FB6 00 00       0225*   @x0:    dw 0x0000
041FB8 00 00       0226*   @y0:    dw 0x0000
041FBA 19          0227*   @cmd1:  db 25 ; plot
041FBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041FBC 00 00       0229*   @x1:    dw 0x0000
041FBE 00 00       0230*   @y1:    dw 0x0000
041FC0 00          0231*   @end:   db 0x00 ; padding
041FC1             0042        include "vdu_sprites.inc"
041FC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042000             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042000             0003*   ; the VDP can support up to 256 sprites. They must be defined
042000             0004*   ; contiguously, and so the first sprite is sprite 0.
042000             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042000             0006*   ; Once a selection of sprites have been defined, you can activate
042000             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
042000             0008*   ; of sprites to activate. This will activate the first n sprites,
042000             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042000             0010*   
042000             0011*   ; A single sprite can have multiple "frames", referring to
042000             0012*   ; different bitmaps.
042000             0013*   ; (These bitmaps do not need to be the same size.)
042000             0014*   ; This allows a sprite to include an animation sequence,
042000             0015*   ; which can be stepped through one frame at a time, or picked
042000             0016*   ; in any order.
042000             0017*   
042000             0018*   ; Any format of bitmap can be used as a sprite frame. It should
042000             0019*   ; be noted however that "native" format bitmaps are not
042000             0020*   ; recommended for use as sprite frames, as they cannot get
042000             0021*   ; erased from the screen. (As noted above, the "native" bitmap
042000             0022*   ; format is not really intended for general use.) This is part
042000             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042000             0024*   ; screen are now stored in RGBA2222 format.
042000             0025*   
042000             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
042000             0027*   ; and then later shown again.
042000             0028*   
042000             0029*   ; Moving sprites around the screen is done by changing the
042000             0030*   ; position of the sprite. This can be done either by setting
042000             0031*   ; the absolute position of the sprite, or by moving the sprite
042000             0032*   ; by a given number of pixels. (Sprites are positioned using
042000             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
042000             0034*   ; In the current sprite system, sprites will not update their
042000             0035*   ; position on-screen until either another drawing operation is
042000             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
042000             0037*   
042000             0038*   ; VDU 23, 27, 4, n: Select sprite n
042000             0039*   ; inputs: a is the 8-bit sprite id
042000             0040*   vdu_sprite_select:
042000 32 12 20 04 0041*       ld (@sprite),a
042004 21 0F 20 04 0042*       ld hl,@cmd
042008 01 04 00 00 0043*       ld bc,@end-@cmd
04200C 5B DF       0044*       rst.lil $18
04200E C9          0045*       ret
04200F 17 1B 04    0046*   @cmd:    db 23,27,4
042012 00          0047*   @sprite: db 0x00
042013             0048*   @end:
042013             0049*   
042013             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
042013             0051*   ; inputs: none
042013             0052*   ; prerequisites: vdu_sprite_select
042013             0053*   vdu_sprite_clear_frames:
042013 21 1E 20 04 0054*       ld hl,@cmd
042017 01 03 00 00 0055*       ld bc,@end-@cmd
04201B 5B DF       0056*       rst.lil $18
04201D C9          0057*       ret
04201E 17 1B 05    0058*   @cmd: db 23,27,5
042021             0059*   @end:
042021             0060*   
042021             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042021             0062*   ; inputs: a is the 8-bit bitmap number
042021             0063*   ; prerequisites: vdu_sprite_select
042021             0064*   vdu_sprite_add_bmp:
042021 32 33 20 04 0065*       ld (@bmp),a
042025 21 30 20 04 0066*       ld hl,@cmd
042029 01 04 00 00 0067*       ld bc,@end-@cmd
04202D 5B DF       0068*       rst.lil $18
04202F C9          0069*       ret
042030 17 1B 06    0070*   @cmd: db 23,27,6
042033 00          0071*   @bmp: db 0x00
042034             0072*   @end:
042034             0073*   
042034             0074*   ; VDU 23, 27, 7, n: Activate n sprites
042034             0075*   ; inputs: a is the number of sprites to activate
042034             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
042034             0077*   vdu_sprite_activate:
042034 32 46 20 04 0078*       ld (@num),a
042038 21 43 20 04 0079*       ld hl,@cmd
04203C 01 04 00 00 0080*       ld bc,@end-@cmd
042040 5B DF       0081*       rst.lil $18
042042 C9          0082*       ret
042043 17 1B 07    0083*   @cmd: db 23,27,7
042046 00          0084*   @num: db 0x00
042047             0085*   @end:
042047             0086*   
042047             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
042047             0088*   ; inputs: none
042047             0089*   ; prerequisites: vdu_sprite_select
042047             0090*   vdu_sprite_next_frame:
042047 21 52 20 04 0091*       ld hl,@cmd
04204B 01 03 00 00 0092*       ld bc,@end-@cmd
04204F 5B DF       0093*       rst.lil $18
042051 C9          0094*       ret
042052 17 1B 08    0095*   @cmd: db 23,27,8
042055             0096*   @end:
042055             0097*   
042055             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
042055             0099*   ; inputs: none
042055             0100*   ; prerequisites: vdu_sprite_select
042055             0101*   vdu_sprite_prev_frame:
042055 21 60 20 04 0102*       ld hl,@cmd
042059 01 03 00 00 0103*       ld bc,@end-@cmd
04205D 5B DF       0104*       rst.lil $18
04205F C9          0105*       ret
042060 17 1B 09    0106*   @cmd: db 23,27,9
042063             0107*   @end:
042063             0108*   
042063             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042063             0110*   ; inputs: a is frame number to select
042063             0111*   ; prerequisites: vdu_sprite_select
042063             0112*   vdu_sprite_select_frame:
042063 32 75 20 04 0113*       ld (@frame),a
042067 21 72 20 04 0114*       ld hl,@cmd
04206B 01 04 00 00 0115*       ld bc,@end-@cmd
04206F 5B DF       0116*       rst.lil $18
042071 C9          0117*       ret
042072 17 1B 0A    0118*   @cmd:    db 23,27,10
042075 00          0119*   @frame:  db 0x00
042076             0120*   @end:
042076             0121*   
042076             0122*   ; VDU 23, 27, 11: Show current sprite
042076             0123*   ; inputs: none
042076             0124*   ; prerequisites: vdu_sprite_select
042076             0125*   vdu_sprite_show:
042076 21 81 20 04 0126*       ld hl,@cmd
04207A 01 03 00 00 0127*       ld bc,@end-@cmd
04207E 5B DF       0128*       rst.lil $18
042080 C9          0129*       ret
042081 17 1B 0B    0130*   @cmd: db 23,27,11
042084             0131*   @end:
042084             0132*   
042084             0133*   ; VDU 23, 27, 12: Hide current sprite
042084             0134*   ; inputs: none
042084             0135*   ; prerequisites: vdu_sprite_select
042084             0136*   vdu_sprite_hide:
042084 21 8F 20 04 0137*       ld hl,@cmd
042088 01 03 00 00 0138*       ld bc,@end-@cmd
04208C 5B DF       0139*       rst.lil $18
04208E C9          0140*       ret
04208F 17 1B 0C    0141*   @cmd: db 23,27,12
042092             0142*   @end:
042092             0143*   
042092             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042092             0145*   ; inputs: bc is x coordinate, de is y coordinate
042092             0146*   ; prerequisites: vdu_sprite_select
042092             0147*   vdu_sprite_move_abs:
042092 ED 43 AA 20 0148*       ld (@xpos),bc
       04          
042097 ED 53 AC 20 0149*       ld (@ypos),de
       04          
04209C 21 A7 20 04 0150*       ld hl,@cmd
0420A0 01 07 00 00 0151*       ld bc,@end-@cmd
0420A4 5B DF       0152*       rst.lil $18
0420A6 C9          0153*       ret
0420A7 17 1B 0D    0154*   @cmd:  db 23,27,13
0420AA 00 00       0155*   @xpos: dw 0x0000
0420AC 00 00       0156*   @ypos: dw 0x0000
0420AE 00          0157*   @end:  db 0x00 ; padding
0420AF             0158*   
0420AF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420AF             0160*   ; inputs: bc is x coordinate, de is y coordinate
0420AF             0161*   ; prerequisites: vdu_sprite_select
0420AF             0162*   vdu_sprite_move_rel:
0420AF ED 43 C7 20 0163*       ld (@dx),bc
       04          
0420B4 ED 53 C9 20 0164*       ld (@dy),de
       04          
0420B9 21 C4 20 04 0165*       ld hl,@cmd
0420BD 01 07 00 00 0166*       ld bc,@end-@cmd
0420C1 5B DF       0167*       rst.lil $18
0420C3 C9          0168*       ret
0420C4 17 1B 0E    0169*   @cmd: db 23,27,14
0420C7 00 00       0170*   @dx:  dw 0x0000
0420C9 00 00       0171*   @dy:  dw 0x0000
0420CB 00          0172*   @end: db 0x00 ; padding
0420CC             0173*   
0420CC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0420CC             0175*   ; USING 16.8 FIXED POINT COORDINATES
0420CC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0420CC             0177*   ;   the fractional portiion of the inputs are truncated
0420CC             0178*   ;   leaving only the 16-bit integer portion
0420CC             0179*   ; prerequisites: vdu_sprite_select
0420CC             0180*   vdu_sprite_move_abs168:
0420CC             0181*   ; offset inputs by the gfx origin
0420CC             0182*   ; y coordinate
0420CC 21 00 00 00 0183*       ld hl,origin_top*256
0420D0 19          0184*       add hl,de
0420D1 22 F3 20 04 0185*       ld (@ypos-1),hl
0420D5             0186*   ; x coordinate
0420D5 21 00 80 00 0187*       ld hl,origin_left*256
0420D9 09          0188*       add hl,bc
0420DA 22 F1 20 04 0189*       ld (@xpos-1),hl
0420DE             0190*   ; prepare vdu command
0420DE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
0420E0 32 F1 20 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
0420E4 21 EF 20 04 0193*       ld hl,@cmd
0420E8 01 07 00 00 0194*       ld bc,@end-@cmd
0420EC 5B DF       0195*       rst.lil $18
0420EE C9          0196*       ret
0420EF 17 1B 0D    0197*   @cmd:  db 23,27,13
0420F2 00 00       0198*   @xpos: dw 0x0000
0420F4 00 00       0199*   @ypos: dw 0x0000
0420F6             0200*   @end:  ; no padding required b/c we shifted de right
0420F6             0201*   
0420F6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420F6             0203*   ; USING 16.8 FIXED POINT COORDINATES
0420F6             0204*   ; inputs: ub.c is dx, ud.e is dy
0420F6             0205*   ;   the fractional portiion of the inputs are truncated
0420F6             0206*   ;   leaving only the 16-bit integer portion
0420F6             0207*   ; prerequisites: vdu_sprite_select
0420F6             0208*   vdu_sprite_move_rel168:
0420F6             0209*   ; populate in the reverse of normal to keep the
0420F6             0210*   ; inputs from stomping on each other
0420F6 ED 53 15 21 0211*       ld (@dy-1),de
       04          
0420FB ED 43 13 21 0212*       ld (@dx-1),bc
       04          
042100 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042102 32 13 21 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042106 21 11 21 04 0215*       ld hl,@cmd
04210A 01 07 00 00 0216*       ld bc,@end-@cmd
04210E 5B DF       0217*       rst.lil $18
042110 C9          0218*       ret
042111 17 1B 0E    0219*   @cmd:  db 23,27,14
042114 00 00       0220*   @dx: dw 0x0000
042116 00 00       0221*   @dy: dw 0x0000
042118             0222*   @end:  ; no padding required b/c we shifted de right
042118             0223*   
042118             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042118             0225*   ; inputs: none
042118             0226*   vdu_sprite_update:
042118 21 23 21 04 0227*       ld hl,@cmd
04211C 01 03 00 00 0228*       ld bc,@end-@cmd
042120 5B DF       0229*       rst.lil $18
042122 C9          0230*       ret
042123 17 1B 0F    0231*   @cmd: db 23,27,15
042126             0232*   @end:
042126             0233*   
042126             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042126             0235*   ; inputs: none
042126             0236*   vdu_sprite_bmp_reset:
042126 21 31 21 04 0237*       ld hl,@cmd
04212A 01 03 00 00 0238*       ld bc,@end-@cmd
04212E 5B DF       0239*       rst.lil $18
042130 C9          0240*       ret
042131 17 1B 10    0241*   @cmd: db 23,27,16
042134             0242*   @end:
042134             0243*   
042134             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042134             0245*   ; inputs: none
042134             0246*   vdu_sprite_reset:
042134 21 3F 21 04 0247*       ld hl,@cmd
042138 01 03 00 00 0248*       ld bc,@end-@cmd
04213C 5B DF       0249*       rst.lil $18
04213E C9          0250*       ret
04213F 17 1B 11    0251*   @cmd: db 23,27,17
042142             0252*   @end:
042142             0253*   
042142             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042142             0255*   ; inputs: a is the GCOL paint mode
042142             0256*   ; prerequisites: vdu_sprite_select
042142             0257*   vdu_sprite_set_gcol:
042142 32 54 21 04 0258*       ld (@mode),a
042146 21 51 21 04 0259*       ld hl,@cmd
04214A 01 04 00 00 0260*       ld bc,@end-@cmd
04214E 5B DF       0261*       rst.lil $18
042150 C9          0262*       ret
042151 17 1B 12    0263*   @cmd:  db 23,27,18
042154 00          0264*   @mode: db 0x00
042155             0265*   @end:
042155             0266*   
042155             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042155             0268*   ; inputs: hl=bufferId
042155             0269*   ; prerequisites: vdu_sprite_select
042155             0270*   vdu_sprite_add_buff:
042155 22 67 21 04 0271*       ld (@bufferId),hl
042159 21 64 21 04 0272*       ld hl,@cmd
04215D 01 05 00 00 0273*       ld bc,@end-@cmd
042161 5B DF       0274*       rst.lil $18
042163 C9          0275*       ret
042164 17 1B 26    0276*   @cmd:      db 23,27,0x26
042167 00 00       0277*   @bufferId: dw 0x0000
042169 00          0278*   @end:      db 0x00 ; padding
04216A             0043    
04216A             0044    ; APPLICATION INCLUDES
04216A             0045        include "ascii.inc"
04216A             0001*   loading_ui:
04216A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
04217A 0D 0A       0003*       db 13,10
04217C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
0421A1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
0421CA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
0421F2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
042219 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
042242 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
04226B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
04228F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
0422B4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
0422D9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
0422FF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
04233D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
04237B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
0423B8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
0423F6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042434 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04247C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0424C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04250B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042553 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04259B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0425E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0425F1             0046        include "collisions.inc"
0425F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042600             0002*   ; ====== COLLISION DETECTION ======
042600             0003*   ; --- constants ---
042600             0004*   ; sprite_collisions flags
042600             0005*   ; collides_with_player: equ %00000001
042600             0006*   ; collides_with_laser: equ %00000010
042600             0007*   sprite_alive: equ 6; set when sprite is alive
042600             0008*   sprite_just_died: equ 7; set when sprite just died
042600             0009*   collide_top: equ %00001000
042600             0010*   collide_bottom: equ %00000100
042600             0011*   collide_left: equ %00000010
042600             0012*   collide_right: equ %00000001
042600             0013*   
042600 00 00 00    0014*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
042603             0015*   
042603             0016*   ; check_collision:
042603             0017*   ; Detects collision using bounding box method.
042603             0018*   ; Inputs:
042603             0019*   ;   IX -> Sprite/Tile table for Collider A
042603             0020*   ;   IY -> Sprite/Tile table for Collider B
042603             0021*   ; Outputs:
042603             0022*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
042603             0023*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
042603             0024*   ; Destroys: HL, DE, AF
042603             0025*   ; check_collision:
042603             0026*   check_collision_box:
042603             0027*   ; Test 1: (ay + ah) - by < 0
042603 21 00 00 00 0028*       ld hl,0                     ; Clear hlu
042607 DD 6E 05    0029*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
04260A DD 66 06    0030*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
04260D 11 00 00 00 0031*       ld de,0                     ; Clear deu and d
042611 DD 5E 1F    0032*       ld e,(ix+sprite_dim_y)      ; Load ah
042614 19          0033*       add hl,de                   ; (ay + ah)
042615 FD 5E 05    0034*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
042618 FD 56 06    0035*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
04261B AF          0036*       xor a                       ; Clear carry
04261C ED 52       0037*       sbc hl,de                   ; (ay + ah) - by
04261E FA 81 26 04 0038*       jp m,@not_collision         ; No collision if negative
042622             0039*   
042622             0040*   ; Test 2: ay - (by + bh) < 0
042622 21 00 00 00 0041*       ld hl,0                     ; Clear hlu
042626 FD 6E 05    0042*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
042629 FD 66 06    0043*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
04262C 11 00 00 00 0044*       ld de,0                     ; Clear deu and d
042630 FD 5E 1F    0045*       ld e,(iy+sprite_dim_y)      ; Load bh
042633 19          0046*       add hl,de                   ; (by + bh)
042634 DD 5E 05    0047*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
042637 DD 56 06    0048*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
04263A AF          0049*       xor a                       ; Clear carry
04263B ED 52       0050*       sbc hl,de                   ; (by + bh) - ay
04263D FA 81 26 04 0051*       jp m,@not_collision         ; No collision if negative
042641             0052*   
042641             0053*   ; Test 3: (ax + aw) - bx < 0
042641 21 00 00 00 0054*       ld hl,0                     ; Clear hlu
042645 DD 6E 02    0055*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
042648 DD 66 03    0056*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
04264B 11 00 00 00 0057*       ld de,0                     ; Clear deu and d
04264F DD 5E 1E    0058*       ld e,(ix+sprite_dim_x)      ; Load aw
042652 19          0059*       add hl,de                   ; (ax + aw)
042653 FD 5E 02    0060*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
042656 FD 56 03    0061*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
042659 AF          0062*       xor a                       ; Clear carry
04265A ED 52       0063*       sbc hl,de                   ; (ax + aw) - bx
04265C FA 81 26 04 0064*       jp m,@not_collision         ; No collision if negative
042660             0065*   
042660             0066*   ; Test 4: ax - (bx + bw) < 0
042660 21 00 00 00 0067*       ld hl,0                     ; Clear hlu
042664 FD 6E 02    0068*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
042667 FD 66 03    0069*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
04266A 11 00 00 00 0070*       ld de,0                     ; Clear deu and d
04266E FD 5E 1E    0071*       ld e,(iy+sprite_dim_x)      ; Load bw
042671 19          0072*       add hl,de                   ; (bx + bw)
042672 DD 5E 02    0073*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
042675 DD 56 03    0074*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
042678 AF          0075*       xor a                       ; Clear carry
042679 ED 52       0076*       sbc hl,de                   ; (bx + bw) - ax
04267B FA 81 26 04 0077*       jp m,@not_collision         ; No collision if negative
04267F             0078*   
04267F             0079*   ; If all tests pass, collision is detected
04267F             0080*   @is_collision:
04267F AF          0081*       xor a                       ; Clear accumulator and flags (a = 0)
042680 C9          0082*       ret                         ; Return with zero flag set
042681             0083*   
042681             0084*   ; No collision detected
042681             0085*   @not_collision:
042681 3D          0086*       dec a                       ; Set a to -1
042682 C9          0087*       ret                         ; Return with carry set
042683             0088*   ; End check_collision_box
042683             0089*   
042683             0090*   
042683             0091*   ; this routine detects collisions between two collidable objects,
042683             0092*   ; which can include sprites, active tiles, or any screen coordinate
042683             0093*   ; which has been set up with a sprite table structure that includes dim_x
042683             0094*   ; representing the radius of the collidable object
042683             0095*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
042683             0096*   ; outputs: uh.l = distance - sum of radii
042683             0097*   ;          zero flag set if collision detected
042683             0098*   ;          dx168 and dy168 are also populated with the signed displacements
042683             0099*   ; destroys: everything except indexes
042683             0100*   check_collision:
042683             0101*   check_collision_cartesian:
042683             0102*   ; compute dx = x1-x0
042683 DD 27 01    0103*       ld hl,(ix+sprite_x)
042686 FD 17 01    0104*       ld de,(iy+sprite_x)
042689 AF          0105*       xor a ; clear carry
04268A ED 52       0106*       sbc hl,de
04268C 22 2E 0C 04 0107*       ld (dx168),hl ; dx to scratch
042690             0108*   ; compute dy = y1-y0
042690 DD 27 04    0109*       ld hl,(ix+sprite_y)
042693 FD 17 04    0110*       ld de,(iy+sprite_y)
042696 AF          0111*       xor a ; clear carry
042697 ED 52       0112*       sbc hl,de ; hl = dy
042699 22 34 0C 04 0113*       ld (dy168),hl ; dy to scratch
04269D             0114*   ; compute euclidean distance between centers
04269D CD 3A 0C 04 0115*       call distance168 ; uh.l = distance
0426A1             0116*   ; check for overlap by summing half the radii
0426A1 DD 7E 1E    0117*       ld a,(ix+sprite_dim_x)
0426A4 CB 3F       0118*       srl a ; divide by 2
0426A6 FD 5E 1E    0119*       ld e,(iy+sprite_dim_x)
0426A9 CB 3B       0120*       srl e ; divide by 2
0426AB 83          0121*       add a,e
0426AC 11 00 00 00 0122*       ld de,0 ; clear deu and e
0426B0 57          0123*       ld d,a ; ud.e = sum of radii
0426B1 B7          0124*       or a ; clear carry
0426B2 ED 52       0125*       sbc hl,de ; uh.l = distance - sum of radii
0426B4 C8          0126*       ret z ; return collision
0426B5 F0          0127*       ret p ; return no collision
0426B6 AF          0128*       xor a ; return collision
0426B7 C9          0129*       ret
0426B8             0130*   ; end check_collision_cartesian
0426B8             0131*   
0426B8             0132*   ; check collisions of a sprite or tile against a sprite group
0426B8             0133*   ; inputs: iy = pointer to sprite or tile record being checked
0426B8             0134*   ;         ix = pointer to sprite group, b = number of records in sprite group
0426B8             0135*   check_sprite_group_collisions:
0426B8             0136*   @collision_loop:
0426B8 DD 22 00 26 0137*       ld (collision_table_pointer),ix ; update table pointer
       04          
0426BD C5          0138*       push bc ; backup loop counter
0426BE             0139*   ; check sprite_collisions sprite_alive flag to see if sprite is active
0426BE DD CB 1D 76 0140*       bit sprite_alive,(ix+sprite_collisions)
0426C2 CA D8 26 04 0141*       jp z,@next_record ; not alive so skip to next record
0426C6             0142*   ; sprite alive so check for collision
0426C6 CD 83 26 04 0143*       call check_collision
0426CA C2 D8 26 04 0144*       jp nz,@next_record ; no collision
0426CE             0145*   ; set sprite_just_died flag for each entity and return to caller
0426CE C1          0146*       pop bc ; dummy pop to balance stack
0426CF DD CB 1D FE 0147*       set sprite_just_died,(ix+sprite_collisions)
0426D3 FD CB 1D FE 0148*       set sprite_just_died,(iy+sprite_collisions)
0426D7 C9          0149*       ret
0426D8             0150*   @next_record:
0426D8 C1          0151*       pop bc ; get back our loop counter
0426D9 ED 32 40    0152*       lea ix,ix+table_record_size
0426DC 10 DA       0153*       djnz @collision_loop ; loop until we've checked all the records
0426DE             0154*   ; return to caller
0426DE AF          0155*       xor a
0426DF 3C          0156*       inc a ; resets sign flag and a to non-zero indicating no collision
0426E0 C9          0157*       ret
0426E1             0158*   ; end check_sprite_group_collisions
0426E1             0159*   
0426E1             0160*   check_enemy_collision_laser: ; check for collisions with laser
0426E1 DD 21 5E 8E 0161*       ld ix,player_lasers_begin
       04          
0426E6 06 04       0162*       ld b,player_lasers_max
0426E8 CD B8 26 04 0163*       call check_sprite_group_collisions
0426EC C9          0164*       ret
0426ED             0165*   ; end check_enemy_collision_laser
0426ED             0166*   
0426ED             0167*   check_enemy_collision_player: ; check for collisions with player
0426ED DD 21 5E 8F 0168*       ld ix,player_begin
       04          
0426F2 CD 83 26 04 0169*       call check_collision
0426F6 C0          0170*       ret nz ; no collision so nothing to do
0426F7 DD CB 1D FE 0171*       set sprite_just_died,(ix+sprite_collisions)
0426FB FD CB 1D FE 0172*       set sprite_just_died,(iy+sprite_collisions)
0426FF AF          0173*       xor a ; signal collision detected
042700 C9          0174*       ret
042701             0175*   ; end check_enemy_collision_player
042701             0047        include "enemies.inc"
042701             0001*   move_enemies:
042701             0002*   ; initialize pointers and loop counter
042701 FD 21 9E 8F 0003*       ld iy,enemy_sprites_begin ; set iy to first record in table
       04          
042706 06 07       0004*       ld b,table_num_enemy_records ; loop counter
042708 CD 54 87 04 0005*       call move_sprite_group
04270C C9          0006*       ret
04270D             0007*   ; end move_enemies
04270D             0048        include "enemy_fireball.inc"
04270D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042800             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042800             0003*   fireballs_max: equ 4
042800             0004*   
042800             0005*   fireball_defaults:
042800 03          0006*       db enemy_projectile     ; type
042801 06 01 00    0007*       dl BUF_FIREBALL_A       ; base_bufferId
042804 58 28 04    0008*       dl move_enemy_fireball  ; move_program
042807 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042808 07          0010*       db 7                    ; dim_x
042809 07          0011*       db 7                    ; dim_y
04280A 01          0012*       db 1                    ; num_orientations
04280B 01          0013*       db 1                    ; num_animations
04280C 00          0014*       db 0                    ; animation
04280D 00          0015*       db 0                    ; animation_timer
04280E 00          0016*       db 0                    ; move_timer
04280F 00          0017*       db 0                    ; move_step
042810 00          0018*       db 0                    ; points
042811 FE          0019*       db -2                   ; shield_damage
042812 00          0020*       db 0                    ; frame
042813             0021*   
042813             0022*   enemy_spawn_fireball:
042813 21 00 28 04 0023*       ld hl,fireball_defaults
042817 DD 21 5E 90 0024*       ld ix,fireballs_base
       04          
04281C 06 04       0025*       ld b,fireballs_max
04281E CD 0C 84 04 0026*       call spawn_sprite_from_tile
042822 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
042823             0028*   ; other specific initialization
042823             0029*   ; ------------------------------------------------
042823             0030*   ; center the fireball on the turret
042823 11 80 03 00 0031*       ld de,3*256+128 ; half the fireball size
042827 FD 27 01    0032*       ld hl,(iy+sprite_x)
04282A 19          0033*       add hl,de
04282B DD 2F 01    0034*       ld (ix+sprite_x),hl
04282E FD 27 04    0035*       ld hl,(iy+sprite_y)
042831 19          0036*       add hl,de
042832 DD 2F 04    0037*       ld (ix+sprite_y),hl
042835             0038*   ; copy component velocities from targeting_computer
042835 2A 5B 7B 04 0039*       ld hl,(Vp_x)
042839 DD 2F 07    0040*       ld (ix+sprite_xvel),hl
04283C 2A 5E 7B 04 0041*       ld hl,(Vp_y)
042840 DD 2F 0A    0042*       ld (ix+sprite_yvel),hl
042843             0043*   ; move projectile one frame's distance so it isn't drawn right over turret
042843 DD 27 01    0044*       ld hl,(ix+sprite_x)
042846 DD 17 07    0045*       ld de,(ix+sprite_xvel)
042849 19          0046*       add hl,de
04284A DD 2F 01    0047*       ld (ix+sprite_x),hl
04284D DD 27 04    0048*       ld hl,(ix+sprite_y)
042850 DD 17 0A    0049*       ld de,(ix+sprite_yvel)
042853 19          0050*       add hl,de
042854 DD 2F 04    0051*       ld (ix+sprite_y),hl
042857 C9          0052*       ret
042858             0053*   ; end enemy_spawn_fireball
042858             0054*   
042858             0055*   move_enemy_fireball:
042858             0056*   ; run the movement program for the fireball enemy
042858 CD D5 87 04 0057*       call move_sprite
04285C 3A 68 86 04 0058*       ld a,(sprite_screen_edge)
042860 B7          0059*       or a ; a will be non-zero if have scrolled off screen
042861 C2 AE 86 04 0060*       jp nz,table_deactivate_sprite
042865 CD ED 26 04 0061*       call check_enemy_collision_player
042869 C0          0062*       ret nz ; no collision so nothing to do
04286A FD 7E 27    0063*       ld a,(iy+sprite_shield_damage)
04286D CD 1D 76 04 0064*       call update_shields
042871 C3 13 2A 04 0065*       jp spawn_explosion
042875             0066*   ; end move_enemy_fireball
042875             0067*   
042875             0068*   init_enemy_fireballs:
042875             0069*   ; set pointer to seeker sprite table
042875 FD 21 5E 90 0070*       ld iy,fireballs_base
       04          
04287A FD 7E 00    0071*       ld a,(iy+sprite_id) ; sprite id
04287D 1E 04       0072*       ld e,fireballs_max ; sprite loop counter
04287F             0073*   ; define seeker sprites
04287F             0074*   @sprites_loop:
04287F F5          0075*       push af
042880 D5          0076*       push de
042881 CD 00 20 04 0077*       call vdu_sprite_select
042885 CD 13 20 04 0078*       call vdu_sprite_clear_frames
042889 21 06 01 00 0079*       ld hl,BUF_FIREBALL_A
04288D 06 02       0080*       ld b,2
04288F             0081*   @frames_loop:
04288F C5          0082*       push bc
042890 E5          0083*       push hl
042891 CD 55 21 04 0084*       call vdu_sprite_add_buff
042895 E1          0085*       pop hl
042896 23          0086*       inc hl
042897 C1          0087*       pop bc
042898 10 F5       0088*       djnz @frames_loop
04289A D1          0089*       pop de ; sprite loop counter
04289B F1          0090*       pop af ; sprite id
04289C 3C          0091*       inc a
04289D 1D          0092*       dec e
04289E C2 7F 28 04 0093*       jp nz,@sprites_loop
0428A2 C9          0094*       ret
0428A3             0095*   ; end init_enemy_fireballs
0428A3             0049        include "enemy_seeker.inc"
0428A3 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042900             0002*   
042900 00          0003*   seekers_count: db 0
042901             0004*   seekers_max: equ 3
042901             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042901             0006*   
042901             0007*   seeker_defaults:
042901 01          0008*       db enemy_air            ; type
042902 0B 01 00    0009*       dl BUF_SEEKER_000       ; base_bufferId
042905 2C 29 04    0010*       dl move_enemy_seeker    ; move_program
042908 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
042909 10          0012*       db 16                   ; dim_x
04290A 10          0013*       db 16                   ; dim_y
04290B 20          0014*       db 32                   ; num_orientations
04290C 01          0015*       db 1                    ; num_animations
04290D 00          0016*       db 0                    ; animation
04290E 00          0017*       db 0                    ; animation_timer
04290F 01          0018*       db 1                    ; move_timer
042910 00          0019*       db 0                    ; move_step
042911 0A          0020*       db 10                   ; points
042912 FC          0021*       db -4                   ; shield_damage
042913 00          0022*       db 0                    ; frame
042914             0023*   
042914             0024*   enemy_spawn_seeker:
042914 21 01 29 04 0025*       ld hl,seeker_defaults
042918 DD 21 9E 8F 0026*       ld ix,seekers_base
       04          
04291D 06 03       0027*       ld b,seekers_max
04291F CD 0C 84 04 0028*       call spawn_sprite_from_tile
042923 D0          0029*       ret nc ; no carry means no free sprite slots, so we go home
042924             0030*   ; other specific initialization
042924 21 80 02 00 0031*       ld hl,speed_seeker
042928 DD 2F 0D    0032*       ld (ix+sprite_vel),hl
04292B C9          0033*       ret
04292C             0034*   ; end enemy_spawn_seeker
04292C             0035*   
04292C             0036*   move_enemy_seeker:
04292C             0037*   ; run the movement program for the seeker enemy
04292C CD 66 29 04 0038*       call en_nav_seek_zag
042930 CD ED 26 04 0039*       call check_enemy_collision_player
042934 CA 5B 29 04 0040*       jp z,@player
042938 CD E1 26 04 0041*       call check_enemy_collision_laser
04293C CA 50 29 04 0042*       jp z,@laser
042940             0043*   ; change the animation frame to match heading
042940 FD 7E 00    0044*       ld a,(iy+sprite_id)
042943 CD 00 20 04 0045*       call vdu_sprite_select
042947 CD A1 88 04 0046*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04294B CD 63 20 04 0047*       call vdu_sprite_select_frame
04294F C9          0048*       ret
042950             0049*   @laser:
042950 FD 7E 26    0050*       ld a,(iy+sprite_points)
042953 CD 2D 74 04 0051*       call update_score
042957 C3 13 2A 04 0052*       jp spawn_explosion
04295B             0053*   @player:
04295B FD 7E 27    0054*       ld a,(iy+sprite_shield_damage)
04295E CD 1D 76 04 0055*       call update_shields
042962 C3 13 2A 04 0056*       jp spawn_explosion
042966             0057*   ; end move_enemy_seeker
042966             0058*   
042966             0059*   ; contains the logic for how to move the enemy
042966             0060*   ; and then does the moving
042966             0061*   ; inputs: a fully-populated active sprite table
042966             0062*   ;         player position variables
042966             0063*   ; destroys: everything except index registers
042966             0064*   ; outputs: moving enemies
042966             0065*   en_nav_seek_zag:
042966             0066*   ; set velocity and orientation by player's relative location
042966             0067*   ; move enemies y-axis
042966             0068*   ; where is player relative to us?
042966 CD 00 7B 04 0069*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
04296A             0070*   ; is player above or below us?
04296A ED 53 48 06 0071*       ld (ude),de ; dy
       04          
04296F 3A 4A 06 04 0072*       ld a,(ude+2) ; deu
042973 17          0073*       rla ; shift sign bit into carry
042974 D2 99 29 04 0074*       jp nc,@zig_zag ; player is below,evade
042978             0075*   ; player is even or above,so home in on current heading
042978 FD 2F 10    0076*       ld (iy+sprite_heading),hl ; save sprite heading
04297B             0077*   ; fall through to @compute_velocities
04297B             0078*   @compute_velocities:
04297B CD 76 88 04 0079*       call sprite_compute_velocities
04297F CD D5 87 04 0080*       call move_sprite ; move the sprite
042983 B7          0081*       or a ; a will be non-zero if have collided with screen edge
042984 C2 A4 29 04 0082*       jp nz,@zag_switch ; switch direction
042988 C9          0083*       ret ; didn't hit edge, nothing else to do
042989             0084*   @zig_zag_start:
042989 FD 2A 65 86 0085*       ld iy,(table_pointer)
       04          
04298E CD AE 09 04 0086*       call rand_8
042992 E6 3F       0087*       and %00111111 ; limit it to 64
042994 CB DF       0088*       set 3,a ; make sure it's at least 8
042996 FD 77 24    0089*       ld (iy+sprite_move_timer),a ; store it
042999             0090*       ; fall through to @zig_zag
042999             0091*   @zig_zag:
042999 FD 7E 24    0092*       ld a,(iy+sprite_move_timer)
04299C 3D          0093*       dec a
04299D FD 77 24    0094*       ld (iy+sprite_move_timer),a
0429A0 C2 C6 29 04 0095*       jp nz,@zig_zag_no_switch
0429A4             0096*   @zag_switch:
0429A4             0097*       ; otherwise flip direction and restart timer
0429A4 FD 7E 25    0098*       ld a,(iy+sprite_move_step)
0429A7 EE 01       0099*       xor %1 ; flips bit zero
0429A9 FD 77 25    0100*       ld (iy+sprite_move_step),a ; store it
0429AC C2 BB 29 04 0101*       jp nz,@F ; zag right
0429B0             0102*   ;otherwise zag left
0429B0 21 00 A0 00 0103*       ld hl,160*256; southwest heading
0429B4 FD 2F 10    0104*       ld (iy+sprite_heading),hl ; save sprite heading
0429B7 C3 89 29 04 0105*       jp @zig_zag_start
0429BB             0106*   @@: ; zag right
0429BB 21 00 60 00 0107*       ld hl,96*256; southeast heading
0429BF FD 2F 10    0108*       ld (iy+sprite_heading),hl ; save sprite heading
0429C2 C3 89 29 04 0109*       jp @zig_zag_start
0429C6             0110*   @zig_zag_no_switch:
0429C6             0111*       ; ld a,(sprite_orientation)
0429C6 FD 27 10    0112*       ld hl,(iy+sprite_heading)
0429C9 C3 7B 29 04 0113*       jp @compute_velocities
0429CD             0114*   ; end en_nav_seek_zag
0429CD             0115*   
0429CD             0116*   
0429CD             0117*   init_enemy_seekers:
0429CD             0118*   ; set pointer to seeker sprite table
0429CD FD 21 9E 8F 0119*       ld iy,seekers_base
       04          
0429D2 FD 7E 00    0120*       ld a,(iy+sprite_id) ; sprite id
0429D5 1E 03       0121*       ld e,seekers_max ; sprite loop counter
0429D7             0122*   ; define seeker sprites
0429D7             0123*   @sprites_loop:
0429D7 F5          0124*       push af
0429D8 D5          0125*       push de
0429D9 CD 00 20 04 0126*   	call vdu_sprite_select
0429DD CD 13 20 04 0127*   	call vdu_sprite_clear_frames
0429E1 21 0B 01 00 0128*   	ld hl,BUF_SEEKER_000
0429E5 06 20       0129*   	ld b,32 ; 32 bitmaps for seeker
0429E7             0130*   @frames_loop:
0429E7 C5          0131*   	push bc
0429E8 E5          0132*   	push hl
0429E9 CD 55 21 04 0133*   	call vdu_sprite_add_buff
0429ED E1          0134*   	pop hl
0429EE 23          0135*   	inc hl
0429EF C1          0136*   	pop bc
0429F0 10 F5       0137*   	djnz @frames_loop
0429F2 D1          0138*       pop de ; sprite loop counter
0429F3 F1          0139*       pop af ; sprite id
0429F4 3C          0140*       inc a
0429F5 1D          0141*       dec e
0429F6 C2 D7 29 04 0142*       jp nz,@sprites_loop
0429FA C9          0143*       ret
0429FB             0144*   ; end init_enemy_seekers
0429FB             0050        include "explosion.inc"
0429FB FF FF FF FF 0001*       align 256
       FF          
042A00             0002*   
042A00             0003*   explosions_max: equ 8
042A00             0004*   explosion_defaults:
042A00 04          0005*       db explosion            ; type
042A01 01 01 00    0006*       dl BUF_EXPLOSION_A	    ; base_bufferId
042A04 5D 2A 04    0007*       dl move_explosion	    ; move_program
042A07 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
042A08 07          0009*       db 7	                ; dim_x
042A09 07          0010*       db 7                    ; dim_y
042A0A 01          0011*       db 1                    ; num_orientations
042A0B 05          0012*       db 5                    ; num_animations
042A0C 05          0013*       db 5	                ; animation
042A0D 08          0014*       db 8	                ; animation_timer
042A0E 00          0015*       db 0	                ; move_timer
042A0F 00          0016*       db 0	                ; move_step
042A10 00          0017*       db 0	                ; points
042A11 00          0018*       db 0	                ; shield_damage
042A12 00          0019*       db 0                    ; frame
042A13             0020*   
042A13             0021*   spawn_explosion:
042A13 21 00 2A 04 0022*       ld hl,explosion_defaults
042A17 DD 21 5E 91 0023*       ld ix,explosions_base
       04          
042A1C 06 08       0024*       ld b,explosions_max
042A1E CD 22 87 04 0025*       call spawn_sprite_from_sprite
042A22 D2 AE 86 04 0026*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042A26             0027*   ; other specific initialization
042A26 21 00 00 00 0028*       ld hl,0
042A2A DD 2F 07    0029*       ld (ix+sprite_xvel),hl
042A2D 21 00 01 00 0030*       ld hl,1*256
042A31 DD 2F 0A    0031*       ld (ix+sprite_yvel),hl
042A34             0032*   ; deactivate parent sprite
042A34 C3 AE 86 04 0033*       jp table_deactivate_sprite
042A38             0034*   ; end spawn_explosion
042A38             0035*   
042A38             0036*   tile_spawn_explosion:
042A38 21 00 2A 04 0037*       ld hl,explosion_defaults
042A3C DD 21 5E 91 0038*       ld ix,explosions_base
       04          
042A41 06 08       0039*       ld b,explosions_max
042A43 CD 0C 84 04 0040*       call spawn_sprite_from_tile
042A47 D2 83 7F 04 0041*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
042A4B             0042*   ; other specific initialization
042A4B 21 00 00 00 0043*       ld hl,0
042A4F DD 2F 07    0044*       ld (ix+sprite_xvel),hl
042A52 21 00 01 00 0045*       ld hl,1*256
042A56 DD 2F 0A    0046*       ld (ix+sprite_yvel),hl
042A59             0047*   ; deactivate parent sprite
042A59 C3 83 7F 04 0048*       jp table_deactivate_tile
042A5D             0049*   ; end tile_spawn_explosion
042A5D             0050*   
042A5D             0051*   move_explosion:
042A5D             0052*   ; run the movement program for the explosion
042A5D CD D5 87 04 0053*       call move_sprite
042A61 B7          0054*       or a ; a will be non-zero if have scrolled off screen
042A62 C2 7A 2A 04 0055*       jp nz,@make_crater
042A66             0056*   ; do the animations
042A66 FD 35 23    0057*       dec (iy+sprite_animation_timer)
042A69 C0          0058*       ret nz ; not time to bump animation frame
042A6A FD 34 28    0059*       inc (iy+sprite_frame)
042A6D FD 35 22    0060*       dec (iy+sprite_animation)
042A70 CA 7A 2A 04 0061*       jp z,@make_crater ; reached the end of the animations
042A74 3E 08       0062*       ld a,8 ; reset animation timer
042A76 FD 77 23    0063*       ld (iy+sprite_animation_timer),a
042A79 C9          0064*       ret
042A7A             0065*   @make_crater: ; deactivate sprite and draw a crater in its place
042A7A 21 00 01 00 0066*       ld hl,BUF_CRATER
042A7E CD 38 1B 04 0067*       call vdu_buff_select
042A82 FD 07 01    0068*       ld bc,(iy+sprite_x)
042A85 FD 17 04    0069*       ld de,(iy+sprite_y)
042A88 CD 3C 1F 04 0070*       call vdu_plot_bmp168
042A8C C3 AE 86 04 0071*       jp table_deactivate_sprite
042A90             0072*   ; end move_explosion
042A90             0073*   
042A90             0074*   move_explosions:
042A90             0075*   ; initialize pointers and loop counter
042A90 FD 21 5E 91 0076*       ld iy,explosions_base ; set iy to first record in table
       04          
042A95 06 08       0077*       ld b,explosions_max ; loop counter
042A97 CD 54 87 04 0078*       call move_sprite_group
042A9B C9          0079*       ret
042A9C             0080*   ; end move_explosions
042A9C             0081*   
042A9C             0082*   init_explosions:
042A9C             0083*   ; set pointer to explosion sprite table
042A9C FD 21 5E 91 0084*       ld iy,explosions_base
       04          
042AA1 FD 7E 00    0085*       ld a,(iy+sprite_id) ; sprite id
042AA4 1E 08       0086*       ld e,explosions_max ; sprite loop counter
042AA6             0087*   ; define explosion sprites
042AA6             0088*   @sprites_loop:
042AA6 F5          0089*       push af
042AA7 D5          0090*       push de
042AA8 CD 00 20 04 0091*   	call vdu_sprite_select
042AAC CD 13 20 04 0092*   	call vdu_sprite_clear_frames
042AB0 21 01 01 00 0093*   	ld hl,BUF_EXPLOSION_A
042AB4 06 05       0094*   	ld b,5 ; 5 bitmaps for explosion
042AB6             0095*   @frames_loop:
042AB6 C5          0096*   	push bc
042AB7 E5          0097*   	push hl
042AB8 CD 55 21 04 0098*   	call vdu_sprite_add_buff
042ABC E1          0099*   	pop hl
042ABD 23          0100*   	inc hl
042ABE C1          0101*   	pop bc
042ABF 10 F5       0102*   	djnz @frames_loop
042AC1 D1          0103*       pop de ; sprite loop counter
042AC2 F1          0104*       pop af ; sprite id
042AC3 3C          0105*       inc a
042AC4 1D          0106*       dec e
042AC5 C2 A6 2A 04 0107*       jp nz,@sprites_loop
042AC9 C9          0108*       ret
042ACA             0109*   ; end init_explosions
042ACA             0051        include "fonts_list.inc"
042ACA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042B00             0002*   
042B00             0003*   ; Generated by asm_config_editor.py
042B00             0004*   font_list_record_size: equ 12
042B00             0005*   font_list_width: equ 0
042B00             0006*   font_list_height: equ 3
042B00             0007*   font_list_bufferId: equ 6
042B00             0008*   font_list_filename: equ 9
042B00             0009*   
042B00             0010*   num_fonts: equ 18
042B00             0011*   
042B00             0012*   ; Index list:
042B00             0013*   amiga_forever_16x24: equ 64000
042B00             0014*   amiga_forever_8x16: equ 64001
042B00             0015*   amiga_forever_8x8: equ 64002
042B00             0016*   computer_pixel_7_10x15: equ 64003
042B00             0017*   computer_pixel_7_10x24: equ 64004
042B00             0018*   computer_pixel_7_8x16: equ 64005
042B00             0019*   Lat2_Terminus12x6_6x12: equ 64006
042B00             0020*   Lat2_TerminusBold14_8x14: equ 64007
042B00             0021*   Lat2_VGA14_8x14: equ 64008
042B00             0022*   Lat2_VGA16_8x16: equ 64009
042B00             0023*   Lat2_VGA8_8x8: equ 64010
042B00             0024*   Lat7_Fixed13_8x13: equ 64011
042B00             0025*   Lat7_Terminus12x6_6x12: equ 64012
042B00             0026*   Lat7_TerminusBold16_8x16: equ 64013
042B00             0027*   Lat7_VGA14_8x14: equ 64014
042B00             0028*   Lat7_VGA8x8: equ 64015
042B00             0029*   scriptorium_12x14: equ 64016
042B00             0030*   Squarewave_Bold_8x12: equ 64017
042B00             0031*   
042B00             0032*   font_list: ; width; height; bufferId; filename;:
042B00 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 2B 04 
042B0C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 2B 04 
042B18 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 2C 04 
042B24 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 2C 04 
042B30 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 2C 04 
042B3C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 2C 04 
042B48 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 2C 04 
042B54 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 2C 04 
042B60 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 2C 04 
042B6C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 2C 04 
042B78 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 2D 04 
042B84 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 2D 04 
042B90 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 2D 04 
042B9C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 2D 04 
042BA8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 2D 04 
042BB4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 2D 04 
042BC0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 2D 04 
042BCC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 2D 04 
042BD8             0051*   
042BD8             0052*   ; files_list: ; filename:
042BD8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
042BF7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042C15 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042C32 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042C54 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042C76 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042C97 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042CB9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
042CDD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042CF8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042D13 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042D2C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042D49 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042D6B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
042D8F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042DAA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042DC3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
042DE0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042E00             0052        include "images_bg.inc"
042E00             0001*   ; Generated by make_images.py
042E00             0002*   
042E00             0003*   bg_num_images: equ 8
042E00             0004*   
042E00             0005*   ; buffer_ids:
042E00             0006*   BUF_BG_STARS_0: equ 1024
042E00             0007*   BUF_BG_STARS_1: equ 1025
042E00             0008*   BUF_BG_STARS_2: equ 1026
042E00             0009*   BUF_BG_STARS_3: equ 1027
042E00             0010*   BUF_BG_STARS_4: equ 1028
042E00             0011*   BUF_BG_STARS_5: equ 1029
042E00             0012*   BUF_BG_STARS_6: equ 1030
042E00             0013*   BUF_BG_STARS_7: equ 1031
042E00             0014*   
042E00             0015*   bg_image_list: ; type; width; height; size; filename; bufferId:
042E00 01 00 00 00 0016*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       90 2E 04 00 
       04 00       
042E12 01 00 00 00 0017*   	dl 1, 256, 256, 65536, fn_bg_stars_1, 1025
       01 00 00 01 
       00 00 00 01 
       A4 2E 04 01 
       04 00       
042E24 01 00 00 00 0018*   	dl 1, 256, 256, 65536, fn_bg_stars_2, 1026
       01 00 00 01 
       00 00 00 01 
       B8 2E 04 02 
       04 00       
042E36 01 00 00 00 0019*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1027
       01 00 00 01 
       00 00 00 01 
       CC 2E 04 03 
       04 00       
042E48 01 00 00 00 0020*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1028
       01 00 00 01 
       00 00 00 01 
       E0 2E 04 04 
       04 00       
042E5A 01 00 00 00 0021*   	dl 1, 256, 256, 65536, fn_bg_stars_5, 1029
       01 00 00 01 
       00 00 00 01 
       F4 2E 04 05 
       04 00       
042E6C 01 00 00 00 0022*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1030
       01 00 00 01 
       00 00 00 01 
       08 2F 04 06 
       04 00       
042E7E 01 00 00 00 0023*   	dl 1, 256, 256, 65536, fn_bg_stars_7, 1031
       01 00 00 01 
       00 00 00 01 
       1C 2F 04 07 
       04 00       
042E90             0024*   
042E90             0025*   ; files_list: ; filename:
042E90 62 67 2F 62 0026*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
042EA4 62 67 2F 62 0027*   fn_bg_stars_1: db "bg/bg_stars_1.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       31 2E 72 67 
       62 61 32 00 
042EB8 62 67 2F 62 0028*   fn_bg_stars_2: db "bg/bg_stars_2.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       32 2E 72 67 
       62 61 32 00 
042ECC 62 67 2F 62 0029*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
042EE0 62 67 2F 62 0030*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
042EF4 62 67 2F 62 0031*   fn_bg_stars_5: db "bg/bg_stars_5.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       35 2E 72 67 
       62 61 32 00 
042F08 62 67 2F 62 0032*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
042F1C 62 67 2F 62 0033*   fn_bg_stars_7: db "bg/bg_stars_7.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       37 2E 72 67 
       62 61 32 00 
042F30             0053        include "images_tiles_dg.inc"
042F30             0001*   ; Generated by tiles_dg.py
042F30             0002*   
042F30             0003*   tiles_dg_num_images: equ 193
042F30             0004*   
042F30             0005*   ; bufferIds:
042F30             0006*   
042F30             0007*   
042F30             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042F30 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       C2 3C 04 00 
       02 00       
042F42 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       D7 3C 04 01 
       02 00       
042F54 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       EC 3C 04 02 
       02 00       
042F66 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       01 3D 04 03 
       02 00       
042F78 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       16 3D 04 04 
       02 00       
042F8A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       2B 3D 04 05 
       02 00       
042F9C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       40 3D 04 06 
       02 00       
042FAE 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       55 3D 04 07 
       02 00       
042FC0 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       6A 3D 04 08 
       02 00       
042FD2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       7F 3D 04 09 
       02 00       
042FE4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       94 3D 04 0A 
       02 00       
042FF6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       A9 3D 04 0B 
       02 00       
043008 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       BE 3D 04 0C 
       02 00       
04301A 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       D3 3D 04 0D 
       02 00       
04302C 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       E8 3D 04 0E 
       02 00       
04303E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       FD 3D 04 0F 
       02 00       
043050 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       12 3E 04 10 
       02 00       
043062 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       27 3E 04 19 
       02 00       
043074 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       3C 3E 04 1A 
       02 00       
043086 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       51 3E 04 1B 
       02 00       
043098 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       66 3E 04 1C 
       02 00       
0430AA 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       7B 3E 04 1D 
       02 00       
0430BC 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       90 3E 04 1E 
       02 00       
0430CE 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       A5 3E 04 1F 
       02 00       
0430E0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       BA 3E 04 20 
       02 00       
0430F2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       CF 3E 04 21 
       02 00       
043104 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       E4 3E 04 22 
       02 00       
043116 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       F9 3E 04 23 
       02 00       
043128 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       0E 3F 04 24 
       02 00       
04313A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       23 3F 04 25 
       02 00       
04314C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       38 3F 04 26 
       02 00       
04315E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       4D 3F 04 27 
       02 00       
043170 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       62 3F 04 28 
       02 00       
043182 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       77 3F 04 31 
       02 00       
043194 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       8C 3F 04 32 
       02 00       
0431A6 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       A1 3F 04 33 
       02 00       
0431B8 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       B6 3F 04 34 
       02 00       
0431CA 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       CB 3F 04 35 
       02 00       
0431DC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       E0 3F 04 36 
       02 00       
0431EE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       F5 3F 04 37 
       02 00       
043200 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       0A 40 04 38 
       02 00       
043212 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       1F 40 04 39 
       02 00       
043224 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       34 40 04 3A 
       02 00       
043236 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       49 40 04 3B 
       02 00       
043248 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       5E 40 04 41 
       02 00       
04325A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       73 40 04 42 
       02 00       
04326C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       88 40 04 43 
       02 00       
04327E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       9D 40 04 44 
       02 00       
043290 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       B2 40 04 45 
       02 00       
0432A2 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       C7 40 04 46 
       02 00       
0432B4 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       DC 40 04 47 
       02 00       
0432C6 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       F1 40 04 48 
       02 00       
0432D8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       06 41 04 49 
       02 00       
0432EA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       1B 41 04 4A 
       02 00       
0432FC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       30 41 04 4B 
       02 00       
04330E 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       45 41 04 4C 
       02 00       
043320 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       5A 41 04 4D 
       02 00       
043332 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       6F 41 04 51 
       02 00       
043344 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       84 41 04 52 
       02 00       
043356 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       99 41 04 53 
       02 00       
043368 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       AE 41 04 54 
       02 00       
04337A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C3 41 04 55 
       02 00       
04338C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       D8 41 04 56 
       02 00       
04339E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       ED 41 04 57 
       02 00       
0433B0 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       02 42 04 58 
       02 00       
0433C2 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       17 42 04 59 
       02 00       
0433D4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       2C 42 04 5A 
       02 00       
0433E6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       41 42 04 5B 
       02 00       
0433F8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       56 42 04 5C 
       02 00       
04340A 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       6B 42 04 5D 
       02 00       
04341C 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       80 42 04 61 
       02 00       
04342E 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       95 42 04 62 
       02 00       
043440 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       AA 42 04 63 
       02 00       
043452 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       BF 42 04 64 
       02 00       
043464 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       D4 42 04 65 
       02 00       
043476 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       E9 42 04 66 
       02 00       
043488 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       FE 42 04 67 
       02 00       
04349A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       13 43 04 68 
       02 00       
0434AC 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       28 43 04 69 
       02 00       
0434BE 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       3D 43 04 6A 
       02 00       
0434D0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       52 43 04 6B 
       02 00       
0434E2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       67 43 04 6C 
       02 00       
0434F4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       7C 43 04 71 
       02 00       
043506 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       91 43 04 72 
       02 00       
043518 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       A6 43 04 73 
       02 00       
04352A 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       BB 43 04 74 
       02 00       
04353C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       D0 43 04 75 
       02 00       
04354E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       E5 43 04 76 
       02 00       
043560 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       FA 43 04 77 
       02 00       
043572 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       0F 44 04 78 
       02 00       
043584 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       24 44 04 79 
       02 00       
043596 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       39 44 04 7A 
       02 00       
0435A8 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       4E 44 04 7B 
       02 00       
0435BA 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       63 44 04 81 
       02 00       
0435CC 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       78 44 04 82 
       02 00       
0435DE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       8D 44 04 83 
       02 00       
0435F0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       A2 44 04 84 
       02 00       
043602 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       B7 44 04 85 
       02 00       
043614 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       CC 44 04 86 
       02 00       
043626 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       E1 44 04 87 
       02 00       
043638 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       F6 44 04 88 
       02 00       
04364A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       0B 45 04 89 
       02 00       
04365C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       20 45 04 8A 
       02 00       
04366E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       35 45 04 8B 
       02 00       
043680 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       4A 45 04 8C 
       02 00       
043692 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       5F 45 04 91 
       02 00       
0436A4 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       74 45 04 92 
       02 00       
0436B6 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       89 45 04 93 
       02 00       
0436C8 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       9E 45 04 94 
       02 00       
0436DA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B3 45 04 95 
       02 00       
0436EC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       C8 45 04 96 
       02 00       
0436FE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       DD 45 04 97 
       02 00       
043710 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F2 45 04 98 
       02 00       
043722 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       07 46 04 99 
       02 00       
043734 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       1C 46 04 9A 
       02 00       
043746 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       31 46 04 9B 
       02 00       
043758 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       46 46 04 9C 
       02 00       
04376A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       5B 46 04 A1 
       02 00       
04377C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       70 46 04 A2 
       02 00       
04378E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       85 46 04 A3 
       02 00       
0437A0 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       9A 46 04 A4 
       02 00       
0437B2 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       AF 46 04 A5 
       02 00       
0437C4 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       C4 46 04 A6 
       02 00       
0437D6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       D9 46 04 A7 
       02 00       
0437E8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       EE 46 04 A8 
       02 00       
0437FA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       03 47 04 A9 
       02 00       
04380C 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       18 47 04 AA 
       02 00       
04381E 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       2D 47 04 AB 
       02 00       
043830 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       42 47 04 AC 
       02 00       
043842 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       57 47 04 AE 
       02 00       
043854 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       6C 47 04 AF 
       02 00       
043866 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       81 47 04 B0 
       02 00       
043878 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       96 47 04 B1 
       02 00       
04388A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       AB 47 04 B2 
       02 00       
04389C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       C0 47 04 B3 
       02 00       
0438AE 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       D5 47 04 B4 
       02 00       
0438C0 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       EA 47 04 B5 
       02 00       
0438D2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       FF 47 04 B6 
       02 00       
0438E4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       14 48 04 B7 
       02 00       
0438F6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       29 48 04 B8 
       02 00       
043908 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       3E 48 04 B9 
       02 00       
04391A 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       53 48 04 BA 
       02 00       
04392C 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       68 48 04 BB 
       02 00       
04393E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       7D 48 04 BC 
       02 00       
043950 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       92 48 04 BE 
       02 00       
043962 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       A7 48 04 BF 
       02 00       
043974 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       BC 48 04 C0 
       02 00       
043986 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       D1 48 04 C1 
       02 00       
043998 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       E6 48 04 C2 
       02 00       
0439AA 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       FB 48 04 C3 
       02 00       
0439BC 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       10 49 04 C4 
       02 00       
0439CE 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       25 49 04 C5 
       02 00       
0439E0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       3A 49 04 C6 
       02 00       
0439F2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       4F 49 04 C7 
       02 00       
043A04 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       64 49 04 C8 
       02 00       
043A16 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       79 49 04 C9 
       02 00       
043A28 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       8E 49 04 CA 
       02 00       
043A3A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       A3 49 04 CB 
       02 00       
043A4C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       B8 49 04 CC 
       02 00       
043A5E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       CD 49 04 CE 
       02 00       
043A70 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       E2 49 04 CF 
       02 00       
043A82 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       F7 49 04 D0 
       02 00       
043A94 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       0C 4A 04 D1 
       02 00       
043AA6 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       21 4A 04 D2 
       02 00       
043AB8 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       36 4A 04 D3 
       02 00       
043ACA 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       4B 4A 04 D4 
       02 00       
043ADC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       60 4A 04 D5 
       02 00       
043AEE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       75 4A 04 D6 
       02 00       
043B00 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       8A 4A 04 D7 
       02 00       
043B12 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       9F 4A 04 D8 
       02 00       
043B24 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       B4 4A 04 D9 
       02 00       
043B36 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       C9 4A 04 DA 
       02 00       
043B48 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       DE 4A 04 DB 
       02 00       
043B5A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       F3 4A 04 DC 
       02 00       
043B6C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       08 4B 04 E1 
       02 00       
043B7E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       1D 4B 04 E2 
       02 00       
043B90 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       32 4B 04 E3 
       02 00       
043BA2 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       47 4B 04 E4 
       02 00       
043BB4 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       5C 4B 04 E5 
       02 00       
043BC6 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       71 4B 04 E6 
       02 00       
043BD8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       86 4B 04 E7 
       02 00       
043BEA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       9B 4B 04 E8 
       02 00       
043BFC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       B0 4B 04 E9 
       02 00       
043C0E 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       C5 4B 04 EA 
       02 00       
043C20 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       DA 4B 04 EB 
       02 00       
043C32 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       EF 4B 04 EC 
       02 00       
043C44 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       04 4C 04 F1 
       02 00       
043C56 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       19 4C 04 F2 
       02 00       
043C68 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       2E 4C 04 F3 
       02 00       
043C7A 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       43 4C 04 F5 
       02 00       
043C8C 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       58 4C 04 F6 
       02 00       
043C9E 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       6D 4C 04 F7 
       02 00       
043CB0 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       82 4C 04 F8 
       02 00       
043CC2             0202*   
043CC2             0203*   tiles_dg_files_list: ; filename:
043CC2 74 69 6C 65 0204*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043CD7 74 69 6C 65 0205*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043CEC 74 69 6C 65 0206*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043D01 74 69 6C 65 0207*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043D16 74 69 6C 65 0208*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043D2B 74 69 6C 65 0209*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
043D40 74 69 6C 65 0210*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043D55 74 69 6C 65 0211*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043D6A 74 69 6C 65 0212*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043D7F 74 69 6C 65 0213*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043D94 74 69 6C 65 0214*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
043DA9 74 69 6C 65 0215*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043DBE 74 69 6C 65 0216*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043DD3 74 69 6C 65 0217*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043DE8 74 69 6C 65 0218*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
043DFD 74 69 6C 65 0219*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043E12 74 69 6C 65 0220*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043E27 74 69 6C 65 0221*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
043E3C 74 69 6C 65 0222*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
043E51 74 69 6C 65 0223*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043E66 74 69 6C 65 0224*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
043E7B 74 69 6C 65 0225*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
043E90 74 69 6C 65 0226*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
043EA5 74 69 6C 65 0227*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
043EBA 74 69 6C 65 0228*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
043ECF 74 69 6C 65 0229*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043EE4 74 69 6C 65 0230*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043EF9 74 69 6C 65 0231*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043F0E 74 69 6C 65 0232*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043F23 74 69 6C 65 0233*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043F38 74 69 6C 65 0234*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043F4D 74 69 6C 65 0235*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043F62 74 69 6C 65 0236*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043F77 74 69 6C 65 0237*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043F8C 74 69 6C 65 0238*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043FA1 74 69 6C 65 0239*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043FB6 74 69 6C 65 0240*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043FCB 74 69 6C 65 0241*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043FE0 74 69 6C 65 0242*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043FF5 74 69 6C 65 0243*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
04400A 74 69 6C 65 0244*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04401F 74 69 6C 65 0245*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
044034 74 69 6C 65 0246*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
044049 74 69 6C 65 0247*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04405E 74 69 6C 65 0248*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
044073 74 69 6C 65 0249*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
044088 74 69 6C 65 0250*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
04409D 74 69 6C 65 0251*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0440B2 74 69 6C 65 0252*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0440C7 74 69 6C 65 0253*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0440DC 74 69 6C 65 0254*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0440F1 74 69 6C 65 0255*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044106 74 69 6C 65 0256*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
04411B 74 69 6C 65 0257*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
044130 74 69 6C 65 0258*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
044145 74 69 6C 65 0259*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
04415A 74 69 6C 65 0260*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
04416F 74 69 6C 65 0261*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
044184 74 69 6C 65 0262*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
044199 74 69 6C 65 0263*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0441AE 74 69 6C 65 0264*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0441C3 74 69 6C 65 0265*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0441D8 74 69 6C 65 0266*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0441ED 74 69 6C 65 0267*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
044202 74 69 6C 65 0268*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044217 74 69 6C 65 0269*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
04422C 74 69 6C 65 0270*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
044241 74 69 6C 65 0271*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
044256 74 69 6C 65 0272*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
04426B 74 69 6C 65 0273*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
044280 74 69 6C 65 0274*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
044295 74 69 6C 65 0275*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
0442AA 74 69 6C 65 0276*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
0442BF 74 69 6C 65 0277*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0442D4 74 69 6C 65 0278*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0442E9 74 69 6C 65 0279*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0442FE 74 69 6C 65 0280*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
044313 74 69 6C 65 0281*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044328 74 69 6C 65 0282*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
04433D 74 69 6C 65 0283*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
044352 74 69 6C 65 0284*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
044367 74 69 6C 65 0285*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
04437C 74 69 6C 65 0286*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
044391 74 69 6C 65 0287*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
0443A6 74 69 6C 65 0288*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
0443BB 74 69 6C 65 0289*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0443D0 74 69 6C 65 0290*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0443E5 74 69 6C 65 0291*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0443FA 74 69 6C 65 0292*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
04440F 74 69 6C 65 0293*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044424 74 69 6C 65 0294*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
044439 74 69 6C 65 0295*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
04444E 74 69 6C 65 0296*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
044463 74 69 6C 65 0297*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
044478 74 69 6C 65 0298*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
04448D 74 69 6C 65 0299*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
0444A2 74 69 6C 65 0300*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
0444B7 74 69 6C 65 0301*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0444CC 74 69 6C 65 0302*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0444E1 74 69 6C 65 0303*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0444F6 74 69 6C 65 0304*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04450B 74 69 6C 65 0305*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
044520 74 69 6C 65 0306*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
044535 74 69 6C 65 0307*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
04454A 74 69 6C 65 0308*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
04455F 74 69 6C 65 0309*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
044574 74 69 6C 65 0310*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
044589 74 69 6C 65 0311*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
04459E 74 69 6C 65 0312*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0445B3 74 69 6C 65 0313*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
0445C8 74 69 6C 65 0314*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
0445DD 74 69 6C 65 0315*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0445F2 74 69 6C 65 0316*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044607 74 69 6C 65 0317*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
04461C 74 69 6C 65 0318*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044631 74 69 6C 65 0319*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
044646 74 69 6C 65 0320*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04465B 74 69 6C 65 0321*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
044670 74 69 6C 65 0322*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
044685 74 69 6C 65 0323*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
04469A 74 69 6C 65 0324*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0446AF 74 69 6C 65 0325*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0446C4 74 69 6C 65 0326*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
0446D9 74 69 6C 65 0327*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
0446EE 74 69 6C 65 0328*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044703 74 69 6C 65 0329*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044718 74 69 6C 65 0330*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04472D 74 69 6C 65 0331*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044742 74 69 6C 65 0332*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044757 74 69 6C 65 0333*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
04476C 74 69 6C 65 0334*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
044781 74 69 6C 65 0335*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044796 74 69 6C 65 0336*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
0447AB 74 69 6C 65 0337*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
0447C0 74 69 6C 65 0338*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0447D5 74 69 6C 65 0339*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0447EA 74 69 6C 65 0340*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0447FF 74 69 6C 65 0341*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044814 74 69 6C 65 0342*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044829 74 69 6C 65 0343*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04483E 74 69 6C 65 0344*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044853 74 69 6C 65 0345*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044868 74 69 6C 65 0346*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04487D 74 69 6C 65 0347*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044892 74 69 6C 65 0348*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
0448A7 74 69 6C 65 0349*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
0448BC 74 69 6C 65 0350*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0448D1 74 69 6C 65 0351*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
0448E6 74 69 6C 65 0352*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0448FB 74 69 6C 65 0353*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
044910 74 69 6C 65 0354*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
044925 74 69 6C 65 0355*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
04493A 74 69 6C 65 0356*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
04494F 74 69 6C 65 0357*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044964 74 69 6C 65 0358*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044979 74 69 6C 65 0359*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04498E 74 69 6C 65 0360*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
0449A3 74 69 6C 65 0361*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
0449B8 74 69 6C 65 0362*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
0449CD 74 69 6C 65 0363*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
0449E2 74 69 6C 65 0364*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
0449F7 74 69 6C 65 0365*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044A0C 74 69 6C 65 0366*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044A21 74 69 6C 65 0367*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
044A36 74 69 6C 65 0368*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
044A4B 74 69 6C 65 0369*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
044A60 74 69 6C 65 0370*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
044A75 74 69 6C 65 0371*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
044A8A 74 69 6C 65 0372*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044A9F 74 69 6C 65 0373*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044AB4 74 69 6C 65 0374*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
044AC9 74 69 6C 65 0375*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
044ADE 74 69 6C 65 0376*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044AF3 74 69 6C 65 0377*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044B08 74 69 6C 65 0378*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
044B1D 74 69 6C 65 0379*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
044B32 74 69 6C 65 0380*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
044B47 74 69 6C 65 0381*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
044B5C 74 69 6C 65 0382*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
044B71 74 69 6C 65 0383*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
044B86 74 69 6C 65 0384*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
044B9B 74 69 6C 65 0385*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044BB0 74 69 6C 65 0386*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044BC5 74 69 6C 65 0387*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
044BDA 74 69 6C 65 0388*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044BEF 74 69 6C 65 0389*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044C04 74 69 6C 65 0390*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
044C19 74 69 6C 65 0391*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
044C2E 74 69 6C 65 0392*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
044C43 74 69 6C 65 0393*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
044C58 74 69 6C 65 0394*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
044C6D 74 69 6C 65 0395*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
044C82 74 69 6C 65 0396*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044C97             0054        ; include "images_tiles_xevious.inc"
044C97             0055        include "images_sprites.inc"
044C97             0001*   ; Generated by make_images.py
044C97             0002*   
044C97             0003*   sprites_num_images: equ 80
044C97             0004*   
044C97             0005*   ; buffer_ids:
044C97             0006*   BUF_CRATER: equ 256
044C97             0007*   BUF_EXPLOSION_A: equ 257
044C97             0008*   BUF_EXPLOSION_B: equ 258
044C97             0009*   BUF_EXPLOSION_C: equ 259
044C97             0010*   BUF_EXPLOSION_D: equ 260
044C97             0011*   BUF_EXPLOSION_E: equ 261
044C97             0012*   BUF_FIREBALL_A: equ 262
044C97             0013*   BUF_FIREBALL_B: equ 263
044C97             0014*   BUF_LASER_A: equ 264
044C97             0015*   BUF_LASER_B: equ 265
044C97             0016*   BUF_PAD: equ 266
044C97             0017*   BUF_SEEKER_000: equ 267
044C97             0018*   BUF_SEEKER_008: equ 268
044C97             0019*   BUF_SEEKER_016: equ 269
044C97             0020*   BUF_SEEKER_024: equ 270
044C97             0021*   BUF_SEEKER_032: equ 271
044C97             0022*   BUF_SEEKER_040: equ 272
044C97             0023*   BUF_SEEKER_048: equ 273
044C97             0024*   BUF_SEEKER_056: equ 274
044C97             0025*   BUF_SEEKER_064: equ 275
044C97             0026*   BUF_SEEKER_072: equ 276
044C97             0027*   BUF_SEEKER_080: equ 277
044C97             0028*   BUF_SEEKER_088: equ 278
044C97             0029*   BUF_SEEKER_096: equ 279
044C97             0030*   BUF_SEEKER_104: equ 280
044C97             0031*   BUF_SEEKER_112: equ 281
044C97             0032*   BUF_SEEKER_120: equ 282
044C97             0033*   BUF_SEEKER_128: equ 283
044C97             0034*   BUF_SEEKER_136: equ 284
044C97             0035*   BUF_SEEKER_144: equ 285
044C97             0036*   BUF_SEEKER_152: equ 286
044C97             0037*   BUF_SEEKER_160: equ 287
044C97             0038*   BUF_SEEKER_168: equ 288
044C97             0039*   BUF_SEEKER_176: equ 289
044C97             0040*   BUF_SEEKER_184: equ 290
044C97             0041*   BUF_SEEKER_192: equ 291
044C97             0042*   BUF_SEEKER_200: equ 292
044C97             0043*   BUF_SEEKER_208: equ 293
044C97             0044*   BUF_SEEKER_216: equ 294
044C97             0045*   BUF_SEEKER_224: equ 295
044C97             0046*   BUF_SEEKER_232: equ 296
044C97             0047*   BUF_SEEKER_240: equ 297
044C97             0048*   BUF_SEEKER_248: equ 298
044C97             0049*   BUF_SHIP_0L: equ 299
044C97             0050*   BUF_SHIP_1C: equ 300
044C97             0051*   BUF_SHIP_2R: equ 301
044C97             0052*   BUF_SHIP_SMALL: equ 302
044C97             0053*   BUF_TEST_STRIPES: equ 303
044C97             0054*   BUF_TURRET_000: equ 304
044C97             0055*   BUF_TURRET_008: equ 305
044C97             0056*   BUF_TURRET_016: equ 306
044C97             0057*   BUF_TURRET_024: equ 307
044C97             0058*   BUF_TURRET_032: equ 308
044C97             0059*   BUF_TURRET_040: equ 309
044C97             0060*   BUF_TURRET_048: equ 310
044C97             0061*   BUF_TURRET_056: equ 311
044C97             0062*   BUF_TURRET_064: equ 312
044C97             0063*   BUF_TURRET_072: equ 313
044C97             0064*   BUF_TURRET_080: equ 314
044C97             0065*   BUF_TURRET_088: equ 315
044C97             0066*   BUF_TURRET_096: equ 316
044C97             0067*   BUF_TURRET_104: equ 317
044C97             0068*   BUF_TURRET_112: equ 318
044C97             0069*   BUF_TURRET_120: equ 319
044C97             0070*   BUF_TURRET_128: equ 320
044C97             0071*   BUF_TURRET_136: equ 321
044C97             0072*   BUF_TURRET_144: equ 322
044C97             0073*   BUF_TURRET_152: equ 323
044C97             0074*   BUF_TURRET_160: equ 324
044C97             0075*   BUF_TURRET_168: equ 325
044C97             0076*   BUF_TURRET_176: equ 326
044C97             0077*   BUF_TURRET_184: equ 327
044C97             0078*   BUF_TURRET_192: equ 328
044C97             0079*   BUF_TURRET_200: equ 329
044C97             0080*   BUF_TURRET_208: equ 330
044C97             0081*   BUF_TURRET_216: equ 331
044C97             0082*   BUF_TURRET_224: equ 332
044C97             0083*   BUF_TURRET_232: equ 333
044C97             0084*   BUF_TURRET_240: equ 334
044C97             0085*   BUF_TURRET_248: equ 335
044C97             0086*   
044C97             0087*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044C97 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       37 52 04 00 
       01 00       
044CA9 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       4C 52 04 01 
       01 00       
044CBB 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       66 52 04 02 
       01 00       
044CCD 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       80 52 04 03 
       01 00       
044CDF 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       9A 52 04 04 
       01 00       
044CF1 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       B4 52 04 05 
       01 00       
044D03 01 00 00 07 0094*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       CE 52 04 06 
       01 00       
044D15 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       E7 52 04 07 
       01 00       
044D27 01 00 00 05 0096*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       00 53 04 08 
       01 00       
044D39 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       16 53 04 09 
       01 00       
044D4B 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       2C 53 04 0A 
       01 00       
044D5D 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       3E 53 04 0B 
       01 00       
044D6F 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       57 53 04 0C 
       01 00       
044D81 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       70 53 04 0D 
       01 00       
044D93 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       89 53 04 0E 
       01 00       
044DA5 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       A2 53 04 0F 
       01 00       
044DB7 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       BB 53 04 10 
       01 00       
044DC9 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       D4 53 04 11 
       01 00       
044DDB 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       ED 53 04 12 
       01 00       
044DED 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       06 54 04 13 
       01 00       
044DFF 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       1F 54 04 14 
       01 00       
044E11 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       38 54 04 15 
       01 00       
044E23 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       51 54 04 16 
       01 00       
044E35 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       6A 54 04 17 
       01 00       
044E47 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       83 54 04 18 
       01 00       
044E59 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       9C 54 04 19 
       01 00       
044E6B 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       B5 54 04 1A 
       01 00       
044E7D 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       CE 54 04 1B 
       01 00       
044E8F 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       E7 54 04 1C 
       01 00       
044EA1 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       00 55 04 1D 
       01 00       
044EB3 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       19 55 04 1E 
       01 00       
044EC5 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       32 55 04 1F 
       01 00       
044ED7 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       4B 55 04 20 
       01 00       
044EE9 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       64 55 04 21 
       01 00       
044EFB 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       7D 55 04 22 
       01 00       
044F0D 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       96 55 04 23 
       01 00       
044F1F 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       AF 55 04 24 
       01 00       
044F31 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       C8 55 04 25 
       01 00       
044F43 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       E1 55 04 26 
       01 00       
044F55 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       FA 55 04 27 
       01 00       
044F67 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       13 56 04 28 
       01 00       
044F79 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       2C 56 04 29 
       01 00       
044F8B 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       45 56 04 2A 
       01 00       
044F9D 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       5E 56 04 2B 
       01 00       
044FAF 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       74 56 04 2C 
       01 00       
044FC1 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       8A 56 04 2D 
       01 00       
044FD3 01 00 00 08 0134*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       A0 56 04 2E 
       01 00       
044FE5 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_test_stripes, 303
       00 00 10 00 
       00 00 01 00 
       B9 56 04 2F 
       01 00       
044FF7 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 304
       00 00 10 00 
       00 00 01 00 
       D4 56 04 30 
       01 00       
045009 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 305
       00 00 10 00 
       00 00 01 00 
       ED 56 04 31 
       01 00       
04501B 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 306
       00 00 10 00 
       00 00 01 00 
       06 57 04 32 
       01 00       
04502D 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 307
       00 00 10 00 
       00 00 01 00 
       1F 57 04 33 
       01 00       
04503F 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 308
       00 00 10 00 
       00 00 01 00 
       38 57 04 34 
       01 00       
045051 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 309
       00 00 10 00 
       00 00 01 00 
       51 57 04 35 
       01 00       
045063 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 310
       00 00 10 00 
       00 00 01 00 
       6A 57 04 36 
       01 00       
045075 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 311
       00 00 10 00 
       00 00 01 00 
       83 57 04 37 
       01 00       
045087 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 312
       00 00 10 00 
       00 00 01 00 
       9C 57 04 38 
       01 00       
045099 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 313
       00 00 10 00 
       00 00 01 00 
       B5 57 04 39 
       01 00       
0450AB 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 314
       00 00 10 00 
       00 00 01 00 
       CE 57 04 3A 
       01 00       
0450BD 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 315
       00 00 10 00 
       00 00 01 00 
       E7 57 04 3B 
       01 00       
0450CF 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 316
       00 00 10 00 
       00 00 01 00 
       00 58 04 3C 
       01 00       
0450E1 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 317
       00 00 10 00 
       00 00 01 00 
       19 58 04 3D 
       01 00       
0450F3 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 318
       00 00 10 00 
       00 00 01 00 
       32 58 04 3E 
       01 00       
045105 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 319
       00 00 10 00 
       00 00 01 00 
       4B 58 04 3F 
       01 00       
045117 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 320
       00 00 10 00 
       00 00 01 00 
       64 58 04 40 
       01 00       
045129 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 321
       00 00 10 00 
       00 00 01 00 
       7D 58 04 41 
       01 00       
04513B 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 322
       00 00 10 00 
       00 00 01 00 
       96 58 04 42 
       01 00       
04514D 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 323
       00 00 10 00 
       00 00 01 00 
       AF 58 04 43 
       01 00       
04515F 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 324
       00 00 10 00 
       00 00 01 00 
       C8 58 04 44 
       01 00       
045171 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 325
       00 00 10 00 
       00 00 01 00 
       E1 58 04 45 
       01 00       
045183 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 326
       00 00 10 00 
       00 00 01 00 
       FA 58 04 46 
       01 00       
045195 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 327
       00 00 10 00 
       00 00 01 00 
       13 59 04 47 
       01 00       
0451A7 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 328
       00 00 10 00 
       00 00 01 00 
       2C 59 04 48 
       01 00       
0451B9 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 329
       00 00 10 00 
       00 00 01 00 
       45 59 04 49 
       01 00       
0451CB 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 330
       00 00 10 00 
       00 00 01 00 
       5E 59 04 4A 
       01 00       
0451DD 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 331
       00 00 10 00 
       00 00 01 00 
       77 59 04 4B 
       01 00       
0451EF 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 332
       00 00 10 00 
       00 00 01 00 
       90 59 04 4C 
       01 00       
045201 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 333
       00 00 10 00 
       00 00 01 00 
       A9 59 04 4D 
       01 00       
045213 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 334
       00 00 10 00 
       00 00 01 00 
       C2 59 04 4E 
       01 00       
045225 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 335
       00 00 10 00 
       00 00 01 00 
       DB 59 04 4F 
       01 00       
045237             0168*   
045237             0169*   ; files_list: ; filename:
045237 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
04524C 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
045266 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
045280 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
04529A 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0452B4 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
0452CE 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
0452E7 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
045300 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
045316 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04532C 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04533E 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045357 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045370 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045389 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0453A2 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0453BB 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0453D4 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0453ED 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045406 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04541F 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045438 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045451 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04546A 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045483 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04549C 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0454B5 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0454CE 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0454E7 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045500 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045519 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045532 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04554B 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045564 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04557D 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045596 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0455AF 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0455C8 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0455E1 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0455FA 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045613 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04562C 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045645 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04565E 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
045674 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
04568A 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0456A0 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0456B9 73 70 72 69 0217*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
0456D4 73 70 72 69 0218*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0456ED 73 70 72 69 0219*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045706 73 70 72 69 0220*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04571F 73 70 72 69 0221*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045738 73 70 72 69 0222*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045751 73 70 72 69 0223*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04576A 73 70 72 69 0224*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045783 73 70 72 69 0225*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04579C 73 70 72 69 0226*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0457B5 73 70 72 69 0227*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0457CE 73 70 72 69 0228*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0457E7 73 70 72 69 0229*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045800 73 70 72 69 0230*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045819 73 70 72 69 0231*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045832 73 70 72 69 0232*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04584B 73 70 72 69 0233*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045864 73 70 72 69 0234*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04587D 73 70 72 69 0235*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045896 73 70 72 69 0236*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0458AF 73 70 72 69 0237*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0458C8 73 70 72 69 0238*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0458E1 73 70 72 69 0239*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0458FA 73 70 72 69 0240*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045913 73 70 72 69 0241*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04592C 73 70 72 69 0242*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045945 73 70 72 69 0243*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04595E 73 70 72 69 0244*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045977 73 70 72 69 0245*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045990 73 70 72 69 0246*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0459A9 73 70 72 69 0247*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0459C2 73 70 72 69 0248*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0459DB 73 70 72 69 0249*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0459F4             0056        include "images_ui.inc"
0459F4             0001*   ; Generated by make_images.py
0459F4             0002*   
0459F4             0003*   ui_num_images: equ 43
0459F4             0004*   
0459F4             0005*   ; buffer_ids:
0459F4             0006*   BUF_BAR_H_0: equ 0
0459F4             0007*   BUF_BAR_H_1: equ 1
0459F4             0008*   BUF_BAR_H_2: equ 2
0459F4             0009*   BUF_BAR_V_0: equ 3
0459F4             0010*   BUF_BAR_V_1: equ 4
0459F4             0011*   BUF_BAR_V_2: equ 5
0459F4             0012*   BUF_BEZEL_L: equ 6
0459F4             0013*   BUF_BEZEL_R: equ 7
0459F4             0014*   BUF_CREDITS: equ 8
0459F4             0015*   BUF_CTL_PANEL_L: equ 9
0459F4             0016*   BUF_CTL_PANEL_R: equ 10
0459F4             0017*   BUF_JERRY_CAN: equ 11
0459F4             0018*   BUF_MFD_ARMS: equ 12
0459F4             0019*   BUF_MFD_BEZEL: equ 13
0459F4             0020*   BUF_MFD_BG: equ 14
0459F4             0021*   BUF_MFD_GUN_0: equ 15
0459F4             0022*   BUF_MFD_GUN_1: equ 16
0459F4             0023*   BUF_MFD_GUN_2: equ 17
0459F4             0024*   BUF_MFD_GUN_3: equ 18
0459F4             0025*   BUF_MFD_GUN_4: equ 19
0459F4             0026*   BUF_MFD_GUN_5: equ 20
0459F4             0027*   BUF_MFD_MAVERICK_0: equ 21
0459F4             0028*   BUF_MFD_MAVERICK_1: equ 22
0459F4             0029*   BUF_MFD_MAVERICK_2: equ 23
0459F4             0030*   BUF_MFD_MAVERICK_3: equ 24
0459F4             0031*   BUF_MFD_MAVERICK_4: equ 25
0459F4             0032*   BUF_MFD_MAVERICK_5: equ 26
0459F4             0033*   BUF_MFD_SIDEWINDER_0: equ 27
0459F4             0034*   BUF_MFD_SIDEWINDER_1: equ 28
0459F4             0035*   BUF_MFD_SIDEWINDER_2: equ 29
0459F4             0036*   BUF_MFD_SIDEWINDER_3: equ 30
0459F4             0037*   BUF_MFD_SIDEWINDER_4: equ 31
0459F4             0038*   BUF_MFD_SIDEWINDER_5: equ 32
0459F4             0039*   BUF_MFD_SPARROW_0: equ 33
0459F4             0040*   BUF_MFD_SPARROW_1: equ 34
0459F4             0041*   BUF_MFD_SPARROW_2: equ 35
0459F4             0042*   BUF_MFD_SPARROW_3: equ 36
0459F4             0043*   BUF_MFD_SPARROW_4: equ 37
0459F4             0044*   BUF_MFD_SPARROW_5: equ 38
0459F4             0045*   BUF_POWER: equ 39
0459F4             0046*   BUF_SHIELD: equ 40
0459F4             0047*   BUF_SPLASH_BG: equ 41
0459F4             0048*   BUF_SPLASH_LOGO: equ 42
0459F4             0049*   
0459F4             0050*   ui_image_list: ; type; width; height; size; filename; bufferId:
0459F4 01 00 00 80 0051*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       FA 5C 04 00 
       00 00       
045A06 01 00 00 80 0052*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       0B 5D 04 01 
       00 00       
045A18 01 00 00 80 0053*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       1C 5D 04 02 
       00 00       
045A2A 01 00 00 08 0054*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       2D 5D 04 03 
       00 00       
045A3C 01 00 00 08 0055*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       3E 5D 04 04 
       00 00       
045A4E 01 00 00 08 0056*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       4F 5D 04 05 
       00 00       
045A60 01 00 00 80 0057*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       60 5D 04 06 
       00 00       
045A72 01 00 00 80 0058*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       71 5D 04 07 
       00 00       
045A84 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       82 5D 04 08 
       00 00       
045A96 01 00 00 80 0060*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       93 5D 04 09 
       00 00       
045AA8 01 00 00 80 0061*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 10
       00 00 80 00 
       00 00 40 00 
       A8 5D 04 0A 
       00 00       
045ABA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_jerry_can, 11
       00 00 10 00 
       00 00 01 00 
       BD 5D 04 0B 
       00 00       
045ACC 01 00 00 24 0063*   	dl 1, 36, 18, 648, fn_mfd_arms, 12
       00 00 12 00 
       00 88 02 00 
       D0 5D 04 0C 
       00 00       
045ADE 01 00 00 60 0064*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 13
       00 00 60 00 
       00 00 24 00 
       E2 5D 04 0D 
       00 00       
045AF0 01 00 00 40 0065*   	dl 1, 64, 64, 4096, fn_mfd_bg, 14
       00 00 40 00 
       00 00 10 00 
       F5 5D 04 0E 
       00 00       
045B02 01 00 00 01 0066*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 15
       00 00 06 00 
       00 06 00 00 
       05 5E 04 0F 
       00 00       
045B14 01 00 00 01 0067*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 16
       00 00 06 00 
       00 06 00 00 
       18 5E 04 10 
       00 00       
045B26 01 00 00 01 0068*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 17
       00 00 06 00 
       00 06 00 00 
       2B 5E 04 11 
       00 00       
045B38 01 00 00 01 0069*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 18
       00 00 06 00 
       00 06 00 00 
       3E 5E 04 12 
       00 00       
045B4A 01 00 00 01 0070*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 19
       00 00 06 00 
       00 06 00 00 
       51 5E 04 13 
       00 00       
045B5C 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 20
       00 00 06 00 
       00 06 00 00 
       64 5E 04 14 
       00 00       
045B6E 01 00 00 04 0072*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 21
       00 00 06 00 
       00 18 00 00 
       77 5E 04 15 
       00 00       
045B80 01 00 00 04 0073*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 22
       00 00 06 00 
       00 18 00 00 
       8F 5E 04 16 
       00 00       
045B92 01 00 00 04 0074*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 23
       00 00 06 00 
       00 18 00 00 
       A7 5E 04 17 
       00 00       
045BA4 01 00 00 04 0075*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 24
       00 00 06 00 
       00 18 00 00 
       BF 5E 04 18 
       00 00       
045BB6 01 00 00 04 0076*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 25
       00 00 06 00 
       00 18 00 00 
       D7 5E 04 19 
       00 00       
045BC8 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 26
       00 00 06 00 
       00 18 00 00 
       EF 5E 04 1A 
       00 00       
045BDA 01 00 00 03 0078*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 27
       00 00 06 00 
       00 12 00 00 
       07 5F 04 1B 
       00 00       
045BEC 01 00 00 03 0079*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 28
       00 00 06 00 
       00 12 00 00 
       21 5F 04 1C 
       00 00       
045BFE 01 00 00 03 0080*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 29
       00 00 06 00 
       00 12 00 00 
       3B 5F 04 1D 
       00 00       
045C10 01 00 00 03 0081*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 30
       00 00 06 00 
       00 12 00 00 
       55 5F 04 1E 
       00 00       
045C22 01 00 00 03 0082*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 31
       00 00 06 00 
       00 12 00 00 
       6F 5F 04 1F 
       00 00       
045C34 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 32
       00 00 06 00 
       00 12 00 00 
       89 5F 04 20 
       00 00       
045C46 01 00 00 03 0084*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 33
       00 00 07 00 
       00 15 00 00 
       A3 5F 04 21 
       00 00       
045C58 01 00 00 03 0085*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 34
       00 00 07 00 
       00 15 00 00 
       BA 5F 04 22 
       00 00       
045C6A 01 00 00 03 0086*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 35
       00 00 07 00 
       00 15 00 00 
       D1 5F 04 23 
       00 00       
045C7C 01 00 00 03 0087*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 36
       00 00 07 00 
       00 15 00 00 
       E8 5F 04 24 
       00 00       
045C8E 01 00 00 03 0088*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 37
       00 00 07 00 
       00 15 00 00 
       FF 5F 04 25 
       00 00       
045CA0 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 38
       00 00 07 00 
       00 15 00 00 
       16 60 04 26 
       00 00       
045CB2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_power, 39
       00 00 10 00 
       00 00 01 00 
       2D 60 04 27 
       00 00       
045CC4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_shield, 40
       00 00 10 00 
       00 00 01 00 
       3C 60 04 28 
       00 00       
045CD6 01 00 00 40 0092*   	dl 1, 320, 240, 76800, fn_splash_bg, 41
       01 00 F0 00 
       00 00 2C 01 
       4C 60 04 29 
       00 00       
045CE8 01 00 00 A0 0093*   	dl 1, 160, 106, 16960, fn_splash_logo, 42
       00 00 6A 00 
       00 40 42 00 
       5F 60 04 2A 
       00 00       
045CFA             0094*   
045CFA             0095*   ; files_list: ; filename:
045CFA 75 69 2F 62 0096*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
045D0B 75 69 2F 62 0097*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
045D1C 75 69 2F 62 0098*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
045D2D 75 69 2F 62 0099*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
045D3E 75 69 2F 62 0100*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
045D4F 75 69 2F 62 0101*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
045D60 75 69 2F 62 0102*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045D71 75 69 2F 62 0103*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045D82 75 69 2F 63 0104*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
045D93 75 69 2F 63 0105*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045DA8 75 69 2F 63 0106*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045DBD 75 69 2F 6A 0107*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
045DD0 75 69 2F 6D 0108*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
045DE2 75 69 2F 6D 0109*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
045DF5 75 69 2F 6D 0110*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
045E05 75 69 2F 6D 0111*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
045E18 75 69 2F 6D 0112*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
045E2B 75 69 2F 6D 0113*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
045E3E 75 69 2F 6D 0114*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
045E51 75 69 2F 6D 0115*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
045E64 75 69 2F 6D 0116*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
045E77 75 69 2F 6D 0117*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
045E8F 75 69 2F 6D 0118*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
045EA7 75 69 2F 6D 0119*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
045EBF 75 69 2F 6D 0120*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
045ED7 75 69 2F 6D 0121*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
045EEF 75 69 2F 6D 0122*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
045F07 75 69 2F 6D 0123*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
045F21 75 69 2F 6D 0124*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
045F3B 75 69 2F 6D 0125*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
045F55 75 69 2F 6D 0126*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
045F6F 75 69 2F 6D 0127*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
045F89 75 69 2F 6D 0128*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
045FA3 75 69 2F 6D 0129*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
045FBA 75 69 2F 6D 0130*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
045FD1 75 69 2F 6D 0131*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
045FE8 75 69 2F 6D 0132*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
045FFF 75 69 2F 6D 0133*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
046016 75 69 2F 6D 0134*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
04602D 75 69 2F 70 0135*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
04603C 75 69 2F 73 0136*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
04604C 75 69 2F 73 0137*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04605F 75 69 2F 73 0138*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046074             0057        include "levels.inc"
046074 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046100             0002*   
046100             0003*   ; tileset indices
046100             0004*   tiles_dg: equ 0
046100             0005*   ; tiles_xevious: equ 1
046100 00 00 00    0006*   tileset_ptr_idx: dl 0
046103             0007*   tileset_ptrs:
046103             0008*       ; dl tiles_xevious_levels
046103 F3 61 04    0009*       dl tileset_00_levels
046106 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
046109             0011*   
046109             0012*   ; get a pointer to the current tileset
046109             0013*   ; inputs: tileset_ptr_idx
046109             0014*   ; returns: ix = pointer to tileset levels lut
046109             0015*   get_tileset_ptr:
046109 3A 00 61 04 0016*       ld a,(tileset_ptr_idx)
04610D 57          0017*       ld d,a ; d = tileset index
04610E 1E 03       0018*       ld e,3 ; three bytes per index record
046110 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
046112 DD 21 03 61 0020*       ld ix,tileset_ptrs
       04          
046117 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
046119 C9          0022*       ret
04611A             0023*   ; end get_tileset_ptr
04611A             0024*   
04611A             0025*   ; intialize a tileset
04611A             0026*   ; inputs: a = index into tileset_ptrs
04611A             0027*   init_tileset:
04611A 32 00 61 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04611E CD 09 61 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046122 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
046125 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
046128 32 58 61 04 0032*       ld (num_levels),a
04612C AF          0033*       xor a ; reset current level to zero
04612D 32 57 61 04 0034*       ld (cur_level),a
046131 C3 89 61 04 0035*       jp init_level
046135             0036*   ; end init_tileset
046135             0037*   
046135             0038*   next_tileset:
046135 21 00 61 04 0039*       ld hl,tileset_ptr_idx
046139 34          0040*       inc (hl) ; bump to next index
04613A CD 09 61 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04613E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
046141             0043*       sign_hlu ; check for list terminator (0)
046141 19          0001*M1     add hl,de ; 1 cycle
046142 B7          0002*M1     or a ; clear flags ; 1 cycle
046143 ED 52       0003*M1     sbc hl,de ; 2 cycles
046145             0004*M1     ; 4 cycles total
046145 C2 53 61 04 0044*       jp nz,@F ; not end of list
046149 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04614B 32 00 61 04 0046*       ld (tileset_ptr_idx),a
04614F C3 35 61 04 0047*       jp next_tileset ; try again
046153             0048*   @@:
046153 C3 1A 61 04 0049*       jp init_tileset
046157             0050*   ; end next_tileset
046157             0051*   
046157 00          0052*   cur_level: db 0
046158 00          0053*   num_levels: db 0
046159             0054*   
046159             0055*   ; get a pointer to the current level lookup record
046159             0056*   ; inputs: tileset_ptr_idx, cur_level
046159             0057*   ; returns: ix = pointer to level definition
046159             0058*   get_level_ptr:
046159 CD 09 61 04 0059*       call get_tileset_ptr
04615D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
046160 3A 57 61 04 0061*       ld a,(cur_level)
046164 57          0062*       ld d,a ; d = level index
046165 1E 03       0063*       ld e,3 ; three bytes per level record
046167 ED 5C       0064*       mlt de ; offset into tileset levels lut
046169 DD 19       0065*       add ix,de ; ix = pointer to level record
04616B C9          0066*       ret
04616C             0067*   ; end get_level_ptr
04616C             0068*   
04616C             0069*   ; advance to the next level in the current tileset
04616C             0070*   ; inputs: tileset_ptr_idx, cur_level
04616C             0071*   next_level:
04616C 21 57 61 04 0072*       ld hl,cur_level
046170 34          0073*       inc (hl) ; bump to next level
046171 CD 59 61 04 0074*       call get_level_ptr ; ix points to current level lookup record
046175 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
046178             0076*       sign_hlu ; check for list terminator (0)
046178 19          0001*M1     add hl,de ; 1 cycle
046179 B7          0002*M1     or a ; clear flags ; 1 cycle
04617A ED 52       0003*M1     sbc hl,de ; 2 cycles
04617C             0004*M1     ; 4 cycles total
04617C C2 89 61 04 0077*       jp nz,@F ; not end of list
046180 AF          0078*       xor a ; reset level to zero
046181 32 57 61 04 0079*       ld (cur_level),a
046185 C3 35 61 04 0080*       jp next_tileset ; try next tileset
046189             0081*   @@: ; fall through to init_level
046189             0082*   ; end next_level
046189             0083*   
046189             0084*   ; inputs: ix pointed to tileset level definition
046189             0085*   init_level:
046189 CD 59 61 04 0086*       call get_level_ptr ; ix points to level lookup record
04618D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
046190             0088*   ; set tiles_cols
046190 DD 7E 00    0089*       ld a,(ix+0)
046193 32 06 82 04 0090*       ld (tiles_cols),a
046197             0091*   ; set tiles_row counter
046197 DD 7E 01    0092*       ld a,(ix+1)
04619A 32 03 82 04 0093*       ld (tiles_row),a
04619E             0094*   ; set cur_baseBufferId
04619E DD 27 04    0095*       ld hl,(ix+4)
0461A1 22 07 82 04 0096*       ld (cur_baseBufferId),hl
0461A5             0097*   ; set tiles_row_defs
0461A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0461A8 DD 22 00 82 0099*       ld (tiles_row_defs),ix
       04          
0461AD             0100*   ; print_level:
0461AD             0101*   level_x: equ 48
0461AD             0102*   level_y: equ 0
0461AD 0E 30       0103*       ld c,level_x
0461AF 06 00       0104*       ld b,level_y
0461B1 CD 37 1A 04 0105*       call vdu_move_cursor
0461B5 CD 00 01 04 0106*       call printInline
0461B9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
0461C1 3A 57 61 04 0108*       ld a,(cur_level)
0461C5 CD 4A 01 04 0109*       call printHexA
0461C9             0110*       ; call printNewLine
0461C9             0111*       ; ld hl,(cur_baseBufferId)
0461C9             0112*       ; call printDec
0461C9             0113*   
0461C9             0114*   ; draw initial background tiles
0461C9 21 00 04 00 0115*       ld hl,BUF_BG_STARS_0
0461CD CD 38 1B 04 0116*       call vdu_buff_select
0461D1 01 00 00 00 0117*       ld bc,0
0461D5 11 00 00 00 0118*       ld de,field_top
0461D9 CD 20 1F 04 0119*       call vdu_plot_bmp
0461DD             0120*   
0461DD 21 04 04 00 0121*       ld hl,BUF_BG_STARS_4
0461E1 CD 38 1B 04 0122*       call vdu_buff_select
0461E5 01 00 00 00 0123*       ld bc,0
0461E9 11 00 01 00 0124*       ld de,field_top+256
0461ED CD 20 1F 04 0125*       call vdu_plot_bmp
0461F1             0126*   
0461F1 C9          0127*       ret
0461F2             0128*   ; end init_level
0461F2             0058        include "levels_tileset_0.inc"
0461F2             0001*   ; Generated from tiles/dg/dg0_03.tmx
0461F2             0002*   
0461F2 01          0003*   tileset_00_num_levels: db 1
0461F3             0004*   
0461F3             0005*   tileset_00_levels:
0461F3 F9 61 04    0006*   	dl tileset_00_level_00
0461F6 00 00 00    0007*   	dl 0 ; list terminator
0461F9             0008*   
0461F9             0009*   tileset_00_level_00: ; Level 0
0461F9 10          0010*   	db 16          ; num cols
0461FA 00 01 00    0011*   	dl 256          ; num rows
0461FD 00 02 00    0012*   	dl 512 ; base bufferId
046200 F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
046210 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
046220 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
046230 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
046240 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
046250 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
046260 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
046270 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
046280 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
046290 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0462A0 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0462B0 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0462C0 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0462D0 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
0462E0 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
0462F0 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
046300 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
046310 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,207,207,207,207,208,000
       00 00 D7 00 
       00 CE CF CF 
       CF CF D0 00 
046320 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,190,081,082,083,084,192,129
       D8 D8 A6 00 
       00 BE 51 52 
       53 54 C0 81 
046330 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,190,065,066,067,068,192,000
       00 00 83 00 
       00 BE 41 42 
       43 44 C0 00 
046340 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,190,049,050,051,052,192,000
       00 00 83 81 
       81 BE 31 32 
       33 34 C0 00 
046350 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,190,033,034,035,036,192,129
       00 00 83 00 
       00 BE 21 22 
       23 24 C0 81 
046360 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,175,175,175,175,176,000
       00 00 83 00 
       00 AE AF AF 
       AF AF B0 00 
046370 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,131,000,000,131,000,000
       D8 D8 B6 00 
       00 00 83 00 
       00 83 00 00 
046380 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,131,000,000,131,000,000
       00 CE B7 D0 
       00 00 83 00 
       00 83 00 00 
046390 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,129,129,129,129,129,129,129,129
       00 BE 9C C0 
       81 81 81 81 
       81 81 81 81 
0463A0 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,147,000,000,147,000,000
       00 AE B8 B0 
       00 00 93 00 
       00 93 00 00 
0463B0 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
0463C0 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
0463D0 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
0463E0 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
0463F0 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
046400 BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046410 BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046420 BF 93 96 F3 0047*   	db 191,147,150,243,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046430 BF 93 96 F3 0048*   	db 191,147,150,243,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046440 BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046450 BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046460 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
046470 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
046480 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
046490 DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
0464A0 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
0464B0 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
0464C0 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
0464D0 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
0464E0 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
0464F0 BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,191,191,191,191
       00 CE BF D7 
       BF BF 86 87 
       BF BF BF BF 
046500 BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
046510 59 5A 5B BF 0062*   	db 089,090,091,191,191,243,191,215,191,191,150,151,191,191,248,191
       BF F3 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
046520 49 05 4B BF 0063*   	db 073,005,075,191,191,243,167,200,191,191,150,151,191,248,001,248
       BF F3 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
046530 39 3A 3B BF 0064*   	db 057,058,059,191,191,243,191,215,191,191,154,155,191,191,248,191
       BF F3 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
046540 BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
046550 BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
046560 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046570 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
046580 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046590 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
0465A0 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0465B0 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0465C0 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
0465D0 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
0465E0 BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
0465F0 BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
046600 BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
046610 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
046620 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
046630 00 00 00 00 0080*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046640 00 00 00 00 0081*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046650 00 00 00 00 0082*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046660 00 00 00 00 0083*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,191,248,191
       00 00 00 00 
       00 00 00 00 
       00 BF F8 BF 
046670 00 00 00 00 0084*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,248,001,248
       00 00 00 00 
       00 00 00 00 
       00 F8 01 F8 
046680 00 00 00 00 0085*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,191,248,191
       00 00 00 00 
       00 00 00 00 
       00 BF F8 BF 
046690 00 00 00 00 0086*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0466A0 00 00 00 00 0087*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0466B0 00 00 00 00 0088*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0466C0 00 CE BF BF 0089*   	db 000,206,191,191,191,208,000,000,000,000,000,000,000,000,000,000
       BF D0 00 00 
       00 00 00 00 
       00 00 00 00 
0466D0 BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,091,000,000,000
       5B BF BF BF 
       BF BF BF BF 
       5B 00 00 00 
0466E0 BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,075,000,000,000
       4B BF BF BF 
       BF BF BF BF 
       4B 00 00 00 
0466F0 BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,059,000,000,000
       3B BF BF BF 
       BF BF BF BF 
       3B 00 00 00 
046700 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,000,000,000,000
       BF BF BF BF 
       BF BF B0 00 
       00 00 00 00 
046710 00 00 00 00 0094*   	db 000,000,000,000,000,000,174,191,191,191,000,000,000,000,000,000
       00 00 AE BF 
       BF BF 00 00 
       00 00 00 00 
046720 00 00 00 00 0095*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046730 00 00 00 00 0096*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046740 00 00 00 00 0097*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046750 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046760 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046770 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046780 00 00 00 00 0101*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046790 00 00 00 00 0102*   	db 000,000,000,000,000,000,000,191,248,191,000,000,000,000,000,000
       00 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0467A0 00 00 00 00 0103*   	db 000,000,000,000,000,000,000,248,001,248,000,000,000,000,000,000
       00 00 00 F8 
       01 F8 00 00 
       00 00 00 00 
0467B0 00 00 00 00 0104*   	db 000,000,000,000,000,000,000,191,248,191,000,000,000,000,000,000
       00 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0467C0 00 00 00 00 0105*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0467D0 00 00 00 00 0106*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0467E0 00 00 00 00 0107*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0467F0 00 00 00 00 0108*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046800 BF BF BF D0 0109*   	db 191,191,191,208,000,000,206,191,191,191,000,000,000,000,000,000
       00 00 CE BF 
       BF BF 00 00 
       00 00 00 00 
046810 59 5A 5B BF 0110*   	db 089,090,091,191,191,191,191,191,191,191,000,000,000,000,000,000
       BF BF BF BF 
       BF BF 00 00 
       00 00 00 00 
046820 49 05 4B BF 0111*   	db 073,005,075,191,191,191,191,191,191,191,000,000,000,000,000,000
       BF BF BF BF 
       BF BF 00 00 
       00 00 00 00 
046830 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,000,000,000,000,000,000
       BF BF BF BF 
       BF BF 00 00 
       00 00 00 00 
046840 BF BF BF B0 0113*   	db 191,191,191,176,000,000,174,191,191,191,000,000,000,000,000,000
       00 00 AE BF 
       BF BF 00 00 
       00 00 00 00 
046850 00 00 00 00 0114*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046860 00 00 00 00 0115*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046870 00 00 00 00 0116*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046880 00 00 00 00 0117*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046890 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0468A0 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
0468B0 00 BE F8 01 0120*   	db 000,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0468C0 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0468D0 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
0468E0 00 00 00 00 0123*   	db 000,000,000,000,000,000,000,000,000,000,000,000,174,191,191,191
       00 00 00 00 
       00 00 00 00 
       AE BF BF BF 
0468F0 00 00 00 00 0124*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046900 00 00 00 00 0125*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046910 00 00 00 00 0126*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046920 00 00 00 00 0127*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046930 00 00 00 00 0128*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046940 00 00 00 00 0129*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046950 00 00 00 00 0130*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046960 00 00 00 00 0131*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046970 CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
046980 BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
046990 BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
0469A0 BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
0469B0 AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
0469C0 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469D0 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469E0 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469F0 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,191,248,191,000,000,000,000
       00 00 00 00 
       00 BF F8 BF 
       00 00 00 00 
046A00 00 00 00 00 0141*   	db 000,000,000,000,000,000,000,000,000,248,001,248,000,000,000,000
       00 00 00 00 
       00 F8 01 F8 
       00 00 00 00 
046A10 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,191,248,191,000,000,000,000
       00 00 00 00 
       00 BF F8 BF 
       00 00 00 00 
046A20 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A30 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A40 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A50 00 00 00 00 0146*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A60 00 00 00 59 0147*   	db 000,000,000,089,090,091,000,000,000,000,000,000,000,000,000,000
       5A 5B 00 00 
       00 00 00 00 
       00 00 00 00 
046A70 00 00 00 49 0148*   	db 000,000,000,073,005,075,000,000,000,000,000,000,000,000,000,000
       05 4B 00 00 
       00 00 00 00 
       00 00 00 00 
046A80 00 00 00 39 0149*   	db 000,000,000,057,058,059,000,000,000,000,000,000,000,000,000,000
       3A 3B 00 00 
       00 00 00 00 
       00 00 00 00 
046A90 00 00 00 00 0150*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AA0 00 00 00 00 0151*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AB0 00 00 00 00 0152*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AC0 00 00 00 00 0153*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AD0 00 00 00 00 0154*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AE0 00 00 00 00 0155*   	db 000,000,000,000,000,000,000,000,000,000,089,090,091,000,000,000
       00 00 00 00 
       00 00 59 5A 
       5B 00 00 00 
046AF0 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,000,073,005,075,000,000,000
       00 00 00 00 
       00 00 49 05 
       4B 00 00 00 
046B00 00 00 00 00 0157*   	db 000,000,000,000,000,000,000,000,000,000,057,058,059,000,000,000
       00 00 00 00 
       00 00 39 3A 
       3B 00 00 00 
046B10 00 00 00 00 0158*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B20 00 00 00 00 0159*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B30 00 00 00 00 0160*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B40 00 00 00 00 0161*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B50 00 00 00 00 0162*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B60 00 00 00 59 0163*   	db 000,000,000,089,090,091,000,000,000,000,000,000,000,000,000,000
       5A 5B 00 00 
       00 00 00 00 
       00 00 00 00 
046B70 00 00 00 49 0164*   	db 000,000,000,073,005,075,000,000,000,000,191,248,191,000,000,000
       05 4B 00 00 
       00 00 BF F8 
       BF 00 00 00 
046B80 00 00 00 39 0165*   	db 000,000,000,057,058,059,000,000,000,000,248,001,248,000,000,000
       3A 3B 00 00 
       00 00 F8 01 
       F8 00 00 00 
046B90 00 00 00 00 0166*   	db 000,000,000,000,000,000,000,000,000,000,191,248,191,000,000,000
       00 00 00 00 
       00 00 BF F8 
       BF 00 00 00 
046BA0 00 00 00 00 0167*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046BB0 00 00 00 00 0168*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046BC0 00 00 00 00 0169*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046BD0 00 00 00 00 0170*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046BE0 00 00 00 00 0171*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046BF0 00 00 00 00 0172*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C00 00 00 00 00 0173*   	db 000,000,000,000,000,000,000,000,089,090,091,000,000,000,000,000
       00 00 00 00 
       59 5A 5B 00 
       00 00 00 00 
046C10 00 00 00 00 0174*   	db 000,000,000,000,000,000,000,000,073,005,075,000,000,000,000,000
       00 00 00 00 
       49 05 4B 00 
       00 00 00 00 
046C20 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,000,057,058,059,000,000,000,000,000
       00 00 00 00 
       39 3A 3B 00 
       00 00 00 00 
046C30 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C40 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C50 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C60 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C70 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C80 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046C90 00 00 00 00 0182*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CA0 59 5A 5B 00 0183*   	db 089,090,091,000,000,000,000,000,000,000,000,000,000,089,090,091
       00 00 00 00 
       00 00 00 00 
       00 59 5A 5B 
046CB0 49 05 4B 00 0184*   	db 073,005,075,000,000,000,000,000,000,000,000,000,000,073,005,075
       00 00 00 00 
       00 00 00 00 
       00 49 05 4B 
046CC0 39 3A 3B 00 0185*   	db 057,058,059,000,000,000,000,000,000,000,000,000,000,057,058,059
       00 00 00 00 
       00 00 00 00 
       00 39 3A 3B 
046CD0 00 00 00 00 0186*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CE0 00 00 00 00 0187*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CF0 00 00 00 00 0188*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D00 00 00 00 00 0189*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D10 00 00 00 00 0190*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D20 00 00 00 00 0191*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D30 00 00 00 00 0192*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D40 00 00 00 00 0193*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D50 00 00 00 00 0194*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D60 00 00 00 00 0195*   	db 000,000,000,000,089,090,091,000,000,000,000,000,000,000,000,000
       59 5A 5B 00 
       00 00 00 00 
       00 00 00 00 
046D70 00 00 00 00 0196*   	db 000,000,000,000,073,005,075,000,000,000,000,000,000,000,000,000
       49 05 4B 00 
       00 00 00 00 
       00 00 00 00 
046D80 00 00 00 00 0197*   	db 000,000,000,000,057,058,059,000,000,000,000,000,000,000,000,000
       39 3A 3B 00 
       00 00 00 00 
       00 00 00 00 
046D90 00 00 00 00 0198*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DA0 00 00 00 00 0199*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DB0 00 00 00 00 0200*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DC0 00 00 00 00 0201*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DD0 00 00 00 00 0202*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DE0 00 00 00 00 0203*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046DF0 00 00 BF F8 0204*   	db 000,000,191,248,191,000,000,000,000,000,000,000,000,000,000,000
       BF 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E00 00 00 F8 01 0205*   	db 000,000,248,001,248,000,000,000,000,000,000,000,000,000,000,000
       F8 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E10 00 00 BF F8 0206*   	db 000,000,191,248,191,000,000,000,000,000,000,089,090,091,000,000
       BF 00 00 00 
       00 00 00 59 
       5A 5B 00 00 
046E20 00 00 00 00 0207*   	db 000,000,000,000,000,000,000,000,000,000,000,073,005,075,000,000
       00 00 00 00 
       00 00 00 49 
       05 4B 00 00 
046E30 00 00 00 00 0208*   	db 000,000,000,000,000,000,000,000,000,000,000,057,058,059,000,000
       00 00 00 00 
       00 00 00 39 
       3A 3B 00 00 
046E40 00 00 00 00 0209*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E50 00 00 00 00 0210*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E60 00 00 00 00 0211*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E70 00 00 00 00 0212*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E80 00 00 00 00 0213*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E90 00 00 00 00 0214*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046EA0 00 00 00 00 0215*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046EB0 00 00 00 00 0216*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046EC0 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046ED0 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046EE0 00 00 00 00 0219*   	db 000,000,000,000,000,000,000,000,089,090,091,000,000,000,000,000
       00 00 00 00 
       59 5A 5B 00 
       00 00 00 00 
046EF0 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,000,073,005,075,000,000,000,000,000
       00 00 00 00 
       49 05 4B 00 
       00 00 00 00 
046F00 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,000,057,058,059,000,000,000,000,000
       00 00 00 00 
       39 3A 3B 00 
       00 00 00 00 
046F10 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F20 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F30 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F40 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F50 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F60 00 00 00 00 0227*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F70 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F80 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F90 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FA0 00 00 00 00 0231*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FB0 59 5A 5B 00 0232*   	db 089,090,091,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FC0 49 05 4B 00 0233*   	db 073,005,075,000,000,000,000,000,000,000,000,152,153,000,000,000
       00 00 00 00 
       00 00 00 98 
       99 00 00 00 
046FD0 39 3A 3B 00 0234*   	db 057,058,059,000,000,000,000,000,000,000,000,150,151,000,000,000
       00 00 00 00 
       00 00 00 96 
       97 00 00 00 
046FE0 00 00 00 00 0235*   	db 000,000,000,000,000,000,206,207,000,207,208,150,151,000,000,000
       00 00 CE CF 
       00 CF D0 96 
       97 00 00 00 
046FF0 00 00 00 00 0236*   	db 000,000,000,000,000,000,190,191,248,191,192,150,151,000,000,000
       00 00 BE BF 
       F8 BF C0 96 
       97 00 00 00 
047000 00 00 00 00 0237*   	db 000,000,000,000,000,000,000,248,001,248,000,134,135,000,000,000
       00 00 00 F8 
       01 F8 00 86 
       87 00 00 00 
047010 00 00 00 00 0238*   	db 000,000,000,000,000,000,190,191,248,191,192,134,135,000,000,000
       00 00 BE BF 
       F8 BF C0 86 
       87 00 00 00 
047020 00 00 00 00 0239*   	db 000,000,000,000,000,000,174,175,000,175,176,134,135,000,000,000
       00 00 AE AF 
       00 AF B0 86 
       87 00 00 00 
047030 00 00 00 00 0240*   	db 000,000,000,000,000,000,000,000,000,000,000,134,135,000,000,000
       00 00 00 00 
       00 00 00 86 
       87 00 00 00 
047040 00 00 00 00 0241*   	db 000,000,000,000,000,000,000,000,000,000,000,138,139,000,000,000
       00 00 00 00 
       00 00 00 8A 
       8B 00 00 00 
047050 00 00 00 00 0242*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047060 00 00 00 00 0243*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047070 00 00 00 00 0244*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047080 00 00 00 00 0245*   	db 000,000,000,000,000,000,000,000,000,000,089,090,091,000,000,000
       00 00 00 00 
       00 00 59 5A 
       5B 00 00 00 
047090 00 00 00 00 0246*   	db 000,000,000,000,000,000,000,000,000,000,073,005,075,000,000,000
       00 00 00 00 
       00 00 49 05 
       4B 00 00 00 
0470A0 00 00 00 00 0247*   	db 000,000,000,000,000,000,000,000,000,000,057,058,059,000,000,000
       00 00 00 00 
       00 00 39 3A 
       3B 00 00 00 
0470B0 00 00 00 00 0248*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0470C0 00 00 00 00 0249*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0470D0 00 00 00 00 0250*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0470E0 00 00 00 00 0251*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0470F0 00 00 00 00 0252*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047100 00 00 00 00 0253*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047110 00 00 00 00 0254*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047120 00 00 00 00 0255*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047130 00 00 00 00 0256*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047140 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
047150 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047160 49 05 4B BF 0259*   	db 073,005,075,191,191,191,191,191,248,191,191,191,191,073,005,075
       BF BF BF BF 
       F8 BF BF BF 
       BF 49 05 4B 
047170 39 3A 3B BF 0260*   	db 057,058,059,191,191,191,191,248,001,248,191,191,191,057,058,059
       BF BF BF F8 
       01 F8 BF BF 
       BF 39 3A 3B 
047180 BF BF BF BF 0261*   	db 191,191,191,191,191,191,191,191,248,191,191,191,191,191,191,191
       BF BF BF BF 
       F8 BF BF BF 
       BF BF BF BF 
047190 BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0471A0 BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
0471B0 BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0471C0 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,089,090,091,191,191,191,089,090,091
       BF BF BF 59 
       5A 5B BF BF 
       BF 59 5A 5B 
0471D0 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,073,005,075,191,191,191,073,005,075
       BF BF BF 49 
       05 4B BF BF 
       BF 49 05 4B 
0471E0 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,057,058,059,191,191,191,057,058,059
       BF BF BF 39 
       3A 3B BF BF 
       BF 39 3A 3B 
0471F0 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047200             0059        ; include "levels_xevious.inc"
047200             0060        include "player.inc"
047200             0001*       align 256
047200             0002*   
047200             0003*   ; ######## GAME STATE VARIABLES #######
047200             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
047200 00 00 00    0005*   player_score: dl 0 ; integer
047203             0006*   ; player current shields,binary
047203             0007*   ; when < 0 player splodes
047203             0008*   ; restores to player_shields_max when new ship spawns
047203             0009*   
047203             0010*   ; when reaches zero,game ends
047203             0011*   ; can increase based on TODO
047203 03          0012*   player_ships: db 3 ; integer
047204             0013*   
047204             0014*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
047204             0015*   player_lasers_max: equ 4
047204             0016*   
047204             0017*   player_defaults:
047204 05          0018*       db player               ; type
047205 2B 01 00    0019*       dl BUF_SHIP_0L          ; base_bufferId
047208 20 7A 04    0020*       dl do_player            ; move_program
04720B 40          0021*       db %01000000            ; collisions bit 6 signals sprite alive
04720C 10          0022*       db 16                   ; dim_x
04720D 10          0023*       db 16                   ; dim_y
04720E 01          0024*       db 1                    ; num_orientations
04720F 01          0025*       db 1                    ; num_animations
047210 00          0026*       db 0                    ; animation
047211 00          0027*       db 0                    ; animation_timer
047212 00          0028*       db 0                    ; move_timer
047213 00          0029*       db 0                    ; move_step
047214 00          0030*       db 0                    ; points
047215 00          0031*       db 0                    ; shield_damage
047216 00          0032*       db 0                    ; frame
047217             0033*   
047217             0034*   
047217             0035*   ; set initial player position
047217             0036*   ; inputs: none,everything is hardcoded
047217             0037*   ; outputs: player_x/y set to bottom-left corner of screen
047217             0038*   ; destroys: a
047217             0039*   player_init:
047217 FD 21 5E 8F 0040*       ld iy,player_begin
       04          
04721C FD 22 65 86 0041*       ld (table_pointer),iy
       04          
047221 FD 7E 00    0042*       ld a,(iy+sprite_id)
047224 CD 00 20 04 0043*       call vdu_sprite_select
047228 CD 13 20 04 0044*       call vdu_sprite_clear_frames
04722C 21 2B 01 00 0045*       ld hl,BUF_SHIP_0L
047230 CD 55 21 04 0046*       call vdu_sprite_add_buff
047234 21 2C 01 00 0047*       ld hl,BUF_SHIP_1C
047238 CD 55 21 04 0048*       call vdu_sprite_add_buff
04723C 21 2D 01 00 0049*       ld hl,BUF_SHIP_2R
047240 CD 55 21 04 0050*       call vdu_sprite_add_buff
047244 01 00 00 00 0051*       ld bc,0
047248 FD 0F 01    0052*       ld (iy+sprite_x),bc
04724B 11 00 6F 01 0053*       ld de,sprite_bottom*256 ; max sprite y-coordinate
04724F FD 1F 04    0054*       ld (iy+sprite_y),de
047252 CD CC 20 04 0055*       call vdu_sprite_move_abs168
047256 CD 76 20 04 0056*       call vdu_sprite_show
04725A 21 2B 7A 04 0057*       ld hl,player_alive
04725E 22 1D 7A 04 0058*       ld (player_state),hl
047262 FD CB 1D F6 0059*       set sprite_alive,(iy+sprite_collisions)
047266 C9          0060*       ret
047267             0061*   
047267             0062*   ; UART ports for reading joystick input
047267             0063*   ; bit tests: 0 means actuated, 1 means not actuated
047267             0064*   portC: 	EQU 	$9E ; reads dpad input
047267             0065*   joy1_u: equ 1
047267             0066*   joy1_d: equ 3
047267             0067*   joy1_l: equ 5
047267             0068*   joy1_r: equ 7
047267             0069*   portD: 	EQU 	$A2 ; reads buttons
047267             0070*   btn1_a: equ 5
047267             0071*   
047267             0072*   ; process player keyboard input, set player bitmap
047267             0073*   ; velocities and draw player bitmap at updated coordinates
047267             0074*   ; Inputs: player_x/y set at desired position
047267             0075*   ; Returns: player bitmap drawn at updated position
047267             0076*   ; Destroys: probably everything except maybe iy
047267             0077*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
047267             0078*   ; TODO: requires sprite implementation
047267             0079*   player_input:
047267             0080*   ; point to player sprite record
047267 FD 21 5E 8F 0081*       ld iy,player_begin
       04          
04726C FD 22 65 86 0082*       ld (table_pointer),iy
       04          
047271             0083*   ; reset player component velocities to zero as the default
047271 21 00 00 00 0084*       ld hl,0
047275 FD 2F 07    0085*       ld (iy+sprite_xvel),hl
047278 FD 2F 0A    0086*       ld (iy+sprite_yvel),hl
04727B             0087*   ; make ship the active sprite
04727B FD 7E 00    0088*       ld a,(iy+sprite_id)
04727E CD 00 20 04 0089*       call vdu_sprite_select
047282             0090*   ; check for keypresses and branch accordingly
047282             0091*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
047282 3E 1E       0001*M1 			LD	A, function
047284 5B CF       0002*M1 			RST.LIL	08h
047286             0092*   ; do player directional input
047286 AF          0093*       xor a ; clear flags
047287 DB 9E       0094*       in a,(portC) ; read dpad input
047289 57          0095*       ld d,a ; save dpad input
04728A 3E 01       0096*       ld a,1 ; set ship's default animation to center
04728C             0097*   ; 26 Left: move player left
04728C DD CB 03 4E 0098*       bit 1,(ix+3)
047290 C2 9E 72 04 0099*       jp nz,@F
047294             0100*   ; test dpad left
047294 CB 6A       0101*       bit joy1_l,d
047296 CA 9E 72 04 0102*       jp z,@F
04729A C3 AA 72 04 0103*       jp @right
04729E             0104*   @@:
04729E FD 27 07    0105*       ld hl,(iy+sprite_xvel)
0472A1 01 00 FD FF 0106*       ld bc,-speed_player
0472A5 09          0107*       add hl,bc
0472A6 FD 2F 07    0108*       ld (iy+sprite_xvel),hl
0472A9 3D          0109*       dec a ; set ship's animation to left
0472AA             0110*   @right:
0472AA             0111*   ; 122 Right: move player right
0472AA DD CB 0F 4E 0112*       bit 1,(ix+15)
0472AE C2 BC 72 04 0113*       jp nz,@F
0472B2             0114*   ; test dpad right
0472B2 CB 7A       0115*       bit joy1_r,d
0472B4 CA BC 72 04 0116*       jp z,@F
0472B8 C3 C8 72 04 0117*       jp @up
0472BC             0118*   @@:
0472BC FD 27 07    0119*       ld hl,(iy+sprite_xvel)
0472BF 01 00 03 00 0120*       ld bc,speed_player
0472C3 09          0121*       add hl,bc
0472C4 FD 2F 07    0122*       ld (iy+sprite_xvel),hl
0472C7 3C          0123*       inc a ; set ship's animation to right
0472C8             0124*   @up:
0472C8             0125*   ; 58 Up: move player up
0472C8 DD CB 07 4E 0126*       bit 1,(ix+7)
0472CC C2 DA 72 04 0127*       jp nz,@F
0472D0             0128*   ; test dpad up
0472D0 CB 4A       0129*       bit joy1_u,d
0472D2 CA DA 72 04 0130*       jp z,@F
0472D6 C3 E5 72 04 0131*       jp @dn
0472DA             0132*   @@:
0472DA FD 27 0A    0133*       ld hl,(iy+sprite_yvel)
0472DD 01 00 FD FF 0134*       ld bc,-speed_player
0472E1 09          0135*       add hl,bc
0472E2 FD 2F 0A    0136*       ld (iy+sprite_yvel),hl
0472E5             0137*   @dn:
0472E5             0138*   ; 42 Down: move player down
0472E5 DD CB 05 4E 0139*       bit 1,(ix+5)
0472E9 C2 F7 72 04 0140*       jp nz,@F
0472ED             0141*   ; test dpad down
0472ED CB 5A       0142*       bit joy1_d,d
0472EF CA F7 72 04 0143*       jp z,@F
0472F3 C3 02 73 04 0144*       jp @frame
0472F7             0145*   @@:
0472F7 FD 27 0A    0146*       ld hl,(iy+sprite_yvel)
0472FA 01 00 03 00 0147*       ld bc,speed_player
0472FE 09          0148*       add hl,bc
0472FF FD 2F 0A    0149*       ld (iy+sprite_yvel),hl
047302             0150*   @frame:
047302             0151*   ; a should land here loaded with the correct frame
047302 CD 63 20 04 0152*       call vdu_sprite_select_frame
047306             0153*   ; draw player at updated position
047306 FD 21 5E 8F 0154*       ld iy,player_begin
       04          
04730B FD 22 65 86 0155*       ld (table_pointer),iy
       04          
047310 CD D5 87 04 0156*       call move_sprite
047314 FD 07 01    0157*       ld bc,(iy+sprite_x)
047317 FD 17 04    0158*       ld de,(iy+sprite_y)
04731A CD CC 20 04 0159*       call vdu_sprite_move_abs168
04731E             0160*   
04731E             0161*   ; process player laser fire
04731E             0162*   ; do player fire button input
04731E             0163*   ; read joystick fire button
04731E AF          0164*       xor a ; clear flags
04731F DB A2       0165*       in a,(portD) ; read joypad fire button input
047321 CB 6F       0166*       bit btn1_a,a
047323 CA 1C 78 04 0167*       jp z,player_spawn_laser
047327             0168*   ; 99 Space: fire main weapon
047327 DD CB 0C 56 0169*       bit 2,(ix+12)
04732B C2 1C 78 04 0170*       jp nz,player_spawn_laser
04732F             0171*   ; no fire button pressed so go home
04732F C9          0172*       ret
047330             0173*   ; end player_input
047330             0174*   
047330             0175*   
047330             0176*   
047330             0177*   player_move_weapons:
047330             0178*   ; initialize pointers and loop counter
047330 FD 21 5E 8E 0179*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
047335 06 04       0180*       ld b,player_lasers_max ; loop counter
047337 CD 54 87 04 0181*       call move_sprite_group
04733B C9          0182*       ret
04733C             0183*   ; end player_move_weapons
04733C             0184*   
04733C             0185*   ; ###################################################################
04733C             0186*   ; TODO: the below is all stuff from the original code we need to port
04733C             0187*   ; ###################################################################
04733C             0188*   
04733C             0189*   kill_player:
04733C             0190*   ; ; set player status to dead
04733C             0191*   ;     xor a; sets all player flags to zero
04733C             0192*   ;     ld (player_collisions),a
04733C             0193*   ; ; deduct a ship from the inventory
04733C             0194*   ;     ld a,(player_ships)
04733C             0195*   ;     dec a
04733C             0196*   ;     ld (player_ships),a
04733C             0197*   ; ; are we out of ships?
04733C             0198*   ;     jp z,game_over
04733C             0199*   ; ; wait a few ticks
04733C             0200*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
04733C             0201*   ;     ld (player_move_timer),a
04733C             0202*   ; kill_player_loop:
04733C             0203*   ;     call vdu_vblank
04733C             0204*   ;     ld a,(player_move_timer)
04733C             0205*   ;     dec a
04733C             0206*   ;     ld (player_move_timer),a
04733C             0207*   ;     jr nz,kill_player_loop
04733C             0208*   ;     call player_init ; player respawn if timer zero
04733C C9          0209*       ret ; and out
04733D             0210*   
04733D             0211*   ; draws the player's shields level
04733D             0212*   ; draw_shields:
04733D             0213*   ; TODO: Agonize this routine
04733D             0214*   ; ; prep the loop to draw the bars
04733D             0215*   ;     ld a,(player_shields) ; snag shields
04733D             0216*   ;     and a
04733D             0217*   ;     ret z ; don't draw if zero shields
04733D             0218*   ; ; set loop counter and drawing position
04733D             0219*   ;     ld b,a ; loop counter
04733D             0220*   ;     ld hl,#5300+48+12
04733D             0221*   ; ; set color based on bars remaining
04733D             0222*   ;     ld c,103 ; bright green 28fe0a
04733D             0223*   ;     cp 9
04733D             0224*   ;     jp p,draw_shields_loop
04733D             0225*   ;     ld c,74 ; bright yellow eafe5b
04733D             0226*   ;     cp 3
04733D             0227*   ;     jp p,draw_shields_loop
04733D             0228*   ;     ld c,28 ; bright red fe0a0a
04733D             0229*   ; draw_shields_loop:
04733D             0230*   ;     push bc ; yup,outta
04733D             0231*   ;     push hl ; registers again
04733D             0232*   ;     ; ld a,#A8 ; ▀,168
04733D             0233*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
04733D             0234*   ;     ; call draw_char
04733D             0235*   ;     call draw_num ; we nuked draw_char for the time being
04733D             0236*   ;     pop hl
04733D             0237*   ;     ld a,8
04733D             0238*   ;     add a,l
04733D             0239*   ;     ld l,a
04733D             0240*   ;     pop bc
04733D             0241*   ;     djnz draw_shields_loop
04733D             0242*       ; ret
04733D             0243*   
04733D             0244*   
04733D             0245*   ; draw_lives:
04733D             0246*   ;     ld hl,player_small ; make small yellow ship the active sprite
04733D             0247*   ;     ld (sprite_base_bufferId),hl
04733D             0248*   ;     ; ld a,#80 ; northern orientation
04733D             0249*   ;     ; ld (sprite_orientation),a
04733D             0250*   ;     ld hl,0 ; north
04733D             0251*   ;     ld (sprite_heading),hl
04733D             0252*   ;     xor a
04733D             0253*   ;     ld (sprite_frame),a
04733D             0254*   ;     ld a,#56 ; top of visible screen
04733D             0255*   ;     ld (sprite_y+1),a
04733D             0256*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04733D             0257*   ;     ld a,(player_ships)
04733D             0258*   ;     dec a ; we draw one fewer ships than lives
04733D             0259*   ;     ret z ; nothing to draw here, move along
04733D             0260*   ;     ld b,a ; loop counter
04733D             0261*   ;     ld a,256-16 ; initial x position
04733D             0262*   ; draw_lives_loop:
04733D             0263*   ;     ld (sprite_x+1),a
04733D             0264*   ;     push af
04733D             0265*   ;     push bc
04733D             0266*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
04733D             0267*   ;     pop bc
04733D             0268*   ;     pop af
04733D             0269*   ;     sub 10
04733D             0270*   ;     djnz draw_lives_loop
04733D             0271*   ;     ret
04733D             0272*   
04733D             0273*   
04733D             0274*   dump_player_record:
04733D DD 21 5E 8F 0275*       ld ix,player_begin
       04          
047342             0276*   
047342 CD 00 01 04 0277*       call printInline
047346 69 64 20 20 0278*       asciz "id  : "
       3A 20 00    
04734D DD 7E 00    0279*       ld a,(ix+sprite_id)
047350 CD 4A 01 04 0280*       call printHexA
047354             0281*   
047354 CD 00 01 04 0282*       call printInline
047358 0D 0A 78 20 0283*       asciz "\r\nx   :"
       20 20 3A 00 
047360 DD 27 01    0284*       ld hl,(ix+sprite_x)
047363 CD 2B 03 04 0285*       call print_s168_hl
047367             0286*   
047367 CD 00 01 04 0287*       call printInline
04736B 0D 0A 79 20 0288*       asciz "\r\ny   :"
       20 20 3A 00 
047373 DD 27 04    0289*       ld hl,(ix+sprite_y)
047376 CD 2B 03 04 0290*       call print_s168_hl
04737A             0291*   
04737A CD 00 01 04 0292*       call printInline
04737E 0D 0A 78 76 0293*       asciz "\r\nxv  :"
       20 20 3A 00 
047386 DD 27 07    0294*       ld hl,(ix+sprite_xvel)
047389 CD 2B 03 04 0295*       call print_s168_hl
04738D             0296*   
04738D CD 00 01 04 0297*       call printInline
047391 0D 0A 79 76 0298*       asciz "\r\nyv  :"
       20 20 3A 00 
047399 DD 27 0A    0299*       ld hl,(ix+sprite_yvel)
04739C CD 2B 03 04 0300*       call print_s168_hl
0473A0             0301*   
0473A0 CD 00 01 04 0302*       call printInline
0473A4 0D 0A 76 20 0303*       asciz "\r\nv   :"
       20 20 3A 00 
0473AC DD 27 0D    0304*       ld hl,(ix+sprite_vel)
0473AF CD 2B 03 04 0305*       call print_s168_hl
0473B3             0306*   
0473B3 CD 00 01 04 0307*       call printInline
0473B7 0D 0A 68 64 0308*       asciz "\r\nhdg :"
       67 20 3A 00 
0473BF DD 27 10    0309*       ld hl,(ix+sprite_heading)
0473C2 CD 2B 03 04 0310*       call print_s168_hl
0473C6             0311*   
0473C6 CD 00 01 04 0312*       call printInline
0473CA 0D 0A 6F 72 0313*       asciz "\r\nori :"
       69 20 3A 00 
0473D2 DD 27 13    0314*       ld hl,(ix+sprite_orientation)
0473D5 CD 2B 03 04 0315*       call print_s168_hl
0473D9             0316*   
0473D9 CD 00 01 04 0317*       call printInline
0473DD 0D 0A 74 79 0318*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0473E6 DD 7E 16    0319*       ld a,(ix+sprite_type)
0473E9 CD 4A 01 04 0320*       call printHexA
0473ED             0321*   
0473ED CD 00 01 04 0322*       call printInline
0473F1 0D 0A 42 49 0323*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0473FA DD 27 17    0324*       ld hl,(ix+sprite_base_bufferId)
0473FD CD 27 01 04 0325*       call printHex24
047401             0326*   
047401 CD 00 01 04 0327*       call printInline
047405 0D 0A 6D 50 0328*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
04740E DD 27 1A    0329*       ld hl,(ix+sprite_move_program)
047411 CD 27 01 04 0330*       call printHex24
047415             0331*   
047415 CD 00 01 04 0332*       call printInline
047419 0D 0A 63 6F 0333*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
047422 DD 7E 1D    0334*       ld a,(ix+sprite_collisions)
047425 CD A8 03 04 0335*       call printBin8
047429             0336*   
047429             0337*       ; call printInline
047429             0338*       ; asciz "\r\nszx : "
047429             0339*       ; ld a,(ix+sprite_dim_x)
047429             0340*       ; call printHexA
047429             0341*   
047429             0342*       ; call printInline
047429             0343*       ; asciz "\r\nszy : "
047429             0344*       ; ld a,(ix+sprite_dim_y)
047429             0345*       ; call printHexA
047429             0346*   
047429             0347*       ; call printInline
047429             0348*       ; asciz "\r\n#ori: "
047429             0349*       ; ld a,(ix+sprite_num_orientations)
047429             0350*       ; call printHexA
047429             0351*   
047429             0352*       ; call printInline
047429             0353*       ; asciz "\r\n#ani: "
047429             0354*       ; ld a,(ix+sprite_num_animations)
047429             0355*       ; call printHexA
047429             0356*   
047429             0357*       ; call printInline
047429             0358*       ; asciz "\r\nani : "
047429             0359*       ; ld a,(ix+sprite_animation)
047429             0360*       ; call printHexA
047429             0361*   
047429             0362*       ; call printInline
047429             0363*       ; asciz "\r\nanit: "
047429             0364*       ; ld a,(ix+sprite_animation_timer)
047429             0365*       ; call printHexA
047429             0366*   
047429             0367*       ; call printInline
047429             0368*       ; asciz "\r\nmvt : "
047429             0369*       ; ld a,(ix+sprite_move_timer)
047429             0370*       ; call printHexA
047429             0371*   
047429             0372*       ; call printInline
047429             0373*       ; asciz "\r\nmvs : "
047429             0374*       ; ld a,(ix+sprite_move_step)
047429             0375*       ; call printHexA
047429             0376*   
047429             0377*       ; call printInline
047429             0378*       ; asciz "\r\npts : "
047429             0379*       ; ld a,(ix+sprite_points)
047429             0380*       ; call printHexA
047429             0381*   
047429             0382*       ; call printInline
047429             0383*       ; asciz "\r\ndmg : "
047429             0384*       ; ld a,(ix+sprite_shield_damage)
047429             0385*       ; call printHexA
047429             0386*   
047429             0387*       ; call printInline
047429             0388*       ; asciz "\r\nfrm : "
047429             0389*       ; ld a,(ix+sprite_frame)
047429             0390*       ; call printHexA
047429             0391*   
047429             0392*       ; call printNewLine
047429             0393*       ; call printNewLine
047429             0394*   
047429             0395*       ; call waitKeypress
047429 C9          0396*       ret
04742A             0061        include "player_cockpit.inc"
04742A             0001*   score_x: equ 50
04742A             0002*   score_y: equ 33
04742A             0003*   ; prints the player's score
04742A 00 00 00    0004*   player_score_last: dl 0 ; integer
04742D             0005*   
04742D             0006*   ; inputs: a = value to add to player_score
04742D             0007*   update_score:
04742D 11 00 00 00 0008*       ld de,0 ; clear deu and d
047431 5F          0009*       ld e,a
047432 2A 00 72 04 0010*       ld hl,(player_score)
047436 19          0011*       add hl,de
047437 22 00 72 04 0012*       ld (player_score),hl
04743B C9          0013*       ret
04743C             0014*   ; end update_score
04743C             0015*   
04743C             0016*   ; inputs: none
04743C             0017*   print_score:
04743C 2A 2A 74 04 0018*       ld hl,(player_score_last)
047440 ED 5B 00 72 0019*       ld de,(player_score)
       04          
047445 ED 53 2A 74 0020*       ld (player_score_last),de
       04          
04744A AF          0021*       xor a ; clear carry
04744B ED 52       0022*       sbc hl,de
04744D C8          0023*       ret z ; no change to update
04744E 0E 32       0024*       ld c,score_x
047450 06 21       0025*       ld b,score_y
047452 CD 37 1A 04 0026*       call vdu_move_cursor
047456 2A 00 72 04 0027*       ld hl,(player_score)
04745A CD 06 02 04 0028*       call printDec
04745E C9          0029*       ret
04745F             0030*   ; end print_score
04745F             0031*   
04745F             0032*   ; offsets into control panel element definitions
04745F             0033*   panel_bufferId: equ 0
04745F             0034*   panel_x0: equ 3
04745F             0035*   panel_y0: equ 6
04745F             0036*   panel_x1: equ 9
04745F             0037*   panel_y1: equ 12
04745F             0038*   
04745F             0039*   ctl_panel_l:
04745F 09 00 00    0040*       dl BUF_CTL_PANEL_L ; bufferId
047462 00 00 00    0041*       dl 0 ; x0
047465 00 01 00    0042*       dl 256 ; y0
047468 80 00 00    0043*       dl 0+128 ; x1
04746B 80 01 00    0044*       dl 256+128 ; y1
04746E             0045*   
04746E             0046*   ctl_panel_r:
04746E 0A 00 00    0047*       dl BUF_CTL_PANEL_R ; bufferId
047471 80 01 00    0048*       dl 384 ; x0
047474 00 01 00    0049*       dl 256 ; y0
047477 00 02 00    0050*       dl 384+128 ; x1
04747A 80 01 00    0051*       dl 256+128 ; y1
04747D             0052*   
04747D             0053*   mfd_bezel_l:
04747D 0D 00 00    0054*       dl BUF_MFD_BEZEL ; bufferId
047480 18 00 00    0055*       dl 24 ; x0
047483 18 01 00    0056*       dl 280 ; y0
047486 78 00 00    0057*       dl 24+96 ; x1
047489 78 01 00    0058*       dl 280+96 ; y1
04748C             0059*   
04748C             0060*   mfd_bezel_r:
04748C 0D 00 00    0061*       dl BUF_MFD_BEZEL ; bufferId
04748F 88 01 00    0062*       dl 392 ; x0
047492 18 01 00    0063*       dl 280 ; y0
047495 E8 01 00    0064*       dl 392+96 ; x1
047498 78 01 00    0065*       dl 280+96 ; y1
04749B             0066*   
04749B             0067*   draw_player_cockpit:
04749B DD 21 5F 74 0068*       ld ix,ctl_panel_l
       04          
0474A0 CD 37 75 04 0069*       call draw_player_ctl_panel
0474A4 DD 21 6E 74 0070*       ld ix,ctl_panel_r
       04          
0474A9 CD 37 75 04 0071*       call draw_player_ctl_panel
0474AD DD 21 7D 74 0072*       ld ix,mfd_bezel_l
       04          
0474B2 CD 37 75 04 0073*       call draw_player_ctl_panel
0474B6 DD 21 49 75 0074*       ld ix,mfd_bg_l
       04          
0474BB CD 37 75 04 0075*       call draw_player_ctl_panel
0474BF DD 21 58 75 0076*       ld ix,mfd_arms_l
       04          
0474C4 CD 37 75 04 0077*       call draw_player_ctl_panel
0474C8 DD 21 8C 74 0078*       ld ix,mfd_bezel_r
       04          
0474CD CD 37 75 04 0079*       call draw_player_ctl_panel
0474D1 DD 21 67 75 0080*       ld ix,mfd_bg_r
       04          
0474D6 CD 37 75 04 0081*       call draw_player_ctl_panel
0474DA             0082*   
0474DA 21 28 00 00 0083*       ld hl,BUF_SHIELD
0474DE CD 38 1B 04 0084*       call vdu_buff_select
0474E2 01 EC 01 00 0085*       ld bc,492
0474E6 11 70 01 00 0086*       ld de,368
0474EA CD 20 1F 04 0087*       call vdu_plot_bmp
0474EE 21 27 00 00 0088*       ld hl,BUF_POWER
0474F2 CD 38 1B 04 0089*       call vdu_buff_select
0474F6 01 04 00 00 0090*       ld bc,4
0474FA 11 70 01 00 0091*       ld de,368
0474FE CD 20 1F 04 0092*       call vdu_plot_bmp
047502 21 08 00 00 0093*       ld hl,BUF_CREDITS
047506 CD 38 1B 04 0094*       call vdu_buff_select
04750A 01 83 01 00 0095*       ld bc,387
04750E 11 04 01 00 0096*       ld de,260
047512 CD 20 1F 04 0097*       call vdu_plot_bmp
047516 21 0B 00 00 0098*       ld hl,BUF_JERRY_CAN
04751A CD 38 1B 04 0099*       call vdu_buff_select
04751E 01 71 00 00 0100*       ld bc,113
047522 11 02 01 00 0101*       ld de,258
047526 CD 20 1F 04 0102*       call vdu_plot_bmp
04752A             0103*   
04752A CD 0C 76 04 0104*       call init_bar_shields
04752E CD 4E 76 04 0105*       call init_bar_laser
047532 CD 0C 77 04 0106*       call init_bar_fuel
047536 C9          0107*       ret
047537             0108*   ; end draw_player_cockpit
047537             0109*   
047537             0110*   draw_player_ctl_panel:
047537 DD 27 00    0111*       ld hl,(ix+panel_bufferId)
04753A CD 38 1B 04 0112*       call vdu_buff_select
04753E DD 07 03    0113*       ld bc,(ix+panel_x0)
047541 DD 17 06    0114*       ld de,(ix+panel_y0)
047544 CD 20 1F 04 0115*       call vdu_plot_bmp
047548 C9          0116*       ret
047549             0117*   ; end draw_player_ctl_panel
047549             0118*   
047549             0119*   mfd_bg_l:
047549 0E 00 00    0120*       dl BUF_MFD_BG ; bufferId
04754C 28 00 00    0121*       dl 40 ; x0
04754F 28 01 00    0122*       dl 296 ; y0
047552 67 00 00    0123*       dl 40+63 ; x1
047555 67 01 00    0124*       dl 296+63 ; y1
047558             0125*   
047558             0126*   mfd_arms_l:
047558 0C 00 00    0127*       dl BUF_MFD_ARMS ; bufferId
04755B 36 00 00    0128*       dl 54 ; x0
04755E 40 01 00    0129*       dl 320 ; y0
047561 59 00 00    0130*       dl 54+35 ; x1
047564 51 01 00    0131*       dl 320+17 ; y1
047567             0132*   
047567             0133*   mfd_bg_r:
047567 0E 00 00    0134*       dl BUF_MFD_BG ; bufferId
04756A 98 01 00    0135*       dl 408 ; x0
04756D 28 01 00    0136*       dl 296 ; y0
047570 D7 01 00    0137*       dl 408+63 ; x1
047573 67 01 00    0138*       dl 296+63 ; y1
047576             0139*   
047576             0140*   mfd_activate:
047576 DD 07 03    0141*       ld bc,(ix+panel_x0)
047579 DD 17 06    0142*       ld de,(ix+panel_y0)
04757C CD D0 1A 04 0143*       call vdu_set_gfx_origin
047580 C9          0144*       ret
047581             0145*   ; end mfd_activate
047581             0146*   
047581             0147*   mfd_init:
047581 DD 27 00    0148*       ld hl,(ix+panel_bufferId)
047584 CD 38 1B 04 0149*       call vdu_buff_select
047588 01 00 00 00 0150*       ld bc,0
04758C 11 00 00 00 0151*       ld de,0
047590 CD 20 1F 04 0152*       call vdu_plot_bmp
047594 C9          0153*       ret
047595             0154*   ; end mfd_init
047595             0155*   
047595             0156*   bar_val: equ 0 ; current value
047595             0157*   bar_x0: equ panel_x0
047595             0158*   bar_y0: equ panel_y0
047595             0159*   bar_x1: equ panel_x1
047595             0160*   bar_y1: equ panel_y1
047595             0161*   bar_y: equ 15 ; y-plot coordinate
047595             0162*   bar_x: equ 15 ; x-plot coordinate
047595             0163*   
047595             0164*   bar_yellow: equ 33
047595             0165*   bar_red: equ 17
047595             0166*   
047595             0167*   ; update a vertical bar display
047595             0168*   ; inputs: ix points to bar structure
047595             0169*   ;         bar_val set by caller
047595             0170*   ; prerequisite: bar_init called before first use
047595             0171*   bar_update_v:
047595             0172*   ; set gfx viewport
047595 DD E5       0173*       push ix ; preserve pointer
047597 DD 07 03    0174*       ld bc,(ix+bar_x0)
04759A DD 17 06    0175*       ld de,(ix+bar_y0)
04759D DD 31 0C    0176*       ld iy,(ix+bar_y1)
0475A0 DD 37 09    0177*       ld ix,(ix+bar_x1)
0475A3 CD EB 1A 04 0178*       call vdu_set_gfx_viewport
0475A7 DD E1       0179*       pop ix ; restore pointer
0475A9             0180*   ; select the color based on the value thresholds
0475A9 DD 17 00    0181*       ld de,(ix+bar_val)
0475AC 21 EF FF FF 0182*       ld hl,-bar_red
0475B0 19          0183*       add hl,de
0475B1 D2 CE 75 04 0184*       jp nc,@red
0475B5 21 DF FF FF 0185*       ld hl,-bar_yellow
0475B9 19          0186*       add hl,de
0475BA D2 C6 75 04 0187*       jp nc,@yellow
0475BE 21 05 00 00 0188*       ld hl,BUF_BAR_V_2 ; green
0475C2 C3 D2 75 04 0189*       jp @select
0475C6             0190*   @yellow:
0475C6 21 04 00 00 0191*       ld hl,BUF_BAR_V_1 ; yellow
0475CA C3 D2 75 04 0192*       jp @select
0475CE             0193*   @red:
0475CE 21 03 00 00 0194*       ld hl,BUF_BAR_V_0 ; red
0475D2             0195*   @select:
0475D2 CD 38 1B 04 0196*       call vdu_buff_select
0475D6             0197*   ; get x-plot position
0475D6 DD 07 03    0198*       ld bc,(ix+bar_x0)
0475D9             0199*   ; compute y-plot position
0475D9 DD 17 00    0200*       ld de,(ix+bar_val)
0475DC 21 40 00 00 0201*       ld hl,64
0475E0 AF          0202*       xor a ; clear carry
0475E1 ED 52       0203*       sbc hl,de
0475E3 DD 17 0F    0204*       ld de,(ix+bar_y)
0475E6 19          0205*       add hl,de
0475E7 7D          0206*       ld a,l
0475E8 E6 FC       0207*       and %11111100 ; round to nearest 4 pixels
0475EA 6F          0208*       ld l,a
0475EB EB          0209*       ex de,hl
0475EC CD 20 1F 04 0210*       call vdu_plot_bmp
0475F0 C9          0211*       ret
0475F1             0212*   ; end bar_update_v
0475F1             0213*   
0475F1 40 00 00    0214*   player_shields: dl 64 ; integer
0475F4             0215*   ; max player shields,binary
0475F4             0216*   ; can increase with power-ups (todo)
0475F4 40 00 00    0217*   player_shields_max: dl 64 ; integer
0475F7 00 00 00    0218*   player_shields_last: dl 0 ; integer
0475FA             0219*   bar_shields:
0475FA 00 00 00    0220*       dl 0 ; value
0475FD F0 01 00    0221*       dl 496 ; x0
047600 30 01 00    0222*       dl 304 ; y0
047603 F7 01 00    0223*       dl 496+7 ; x1
047606 6F 01 00    0224*       dl 304+63 ; y1
047609 F0 00 00    0225*       dl 304-64 ; y-plot coordinate
04760C             0226*   
04760C             0227*   init_bar_shields:
04760C DD 21 FA 75 0228*       ld ix,bar_shields
       04          
047611 2A F4 75 04 0229*       ld hl,(player_shields_max)
047615 DD 2F 00    0230*       ld (ix+bar_val),hl
047618 CD 95 75 04 0231*       call bar_update_v
04761C C9          0232*       ret
04761D             0233*   ; end init_bar_shields
04761D             0234*   
04761D             0235*   ; inputs: a = value to add to player_shields
04761D             0236*   update_shields:
04761D 21 F1 75 04 0237*       ld hl,player_shields
047621 86          0238*       add a,(hl)
047622 77          0239*       ld (hl),a
047623 C9          0240*       ret
047624             0241*   
047624             0242*   draw_shields:
047624 21 F7 75 04 0243*       ld hl,player_shields_last
047628 3A F1 75 04 0244*       ld a,(player_shields)
04762C BE          0245*       cp (hl)
04762D C8          0246*       ret z ; no change to update
04762E 77          0247*       ld (hl),a
04762F DD 21 FA 75 0248*       ld ix,bar_shields
       04          
047634 DD 77 00    0249*       ld (ix+bar_val),a ; TODO: this is redundant
047637 CD 95 75 04 0250*       call bar_update_v
04763B C9          0251*       ret
04763C             0252*   
04763C             0253*   bar_laser:
04763C 00 00 00    0254*       dl 0 ; value
04763F 08 00 00    0255*       dl 8 ; x0
047642 30 01 00    0256*       dl 304 ; y0
047645 0F 00 00    0257*       dl 8+7 ; x1
047648 6F 01 00    0258*       dl 304+63 ; y1
04764B F0 00 00    0259*       dl 304-64 ; y-plot coordinate
04764E             0260*   
04764E             0261*   init_bar_laser:
04764E 3A 6E 76 04 0262*       ld a,(charge_laser_timer_max)
047652 32 6D 76 04 0263*       ld (charge_laser_timer),a
047656 DD 21 3C 76 0264*       ld ix,bar_laser
       04          
04765B 2A 6A 76 04 0265*       ld hl,(laser_power_max)
04765F DD 2F 00    0266*       ld (ix+bar_val),hl
047662 CD 95 75 04 0267*       call bar_update_v
047666 C9          0268*       ret
047667             0269*   ; end init_bar_laser
047667             0270*   
047667 40 00 00    0271*   laser_power: dl 64 ; integer
04766A 40 00 00    0272*   laser_power_max: dl 64 ; integer
04766D 00          0273*   charge_laser_timer: db 0
04766E 06          0274*   charge_laser_timer_max: db 6
04766F 00 00 00    0275*   laser_power_last: dl 0 ; integer
047672             0276*   charge_laser:
047672             0277*   ; check laser timer
047672 21 6D 76 04 0278*       ld hl,charge_laser_timer
047676 35          0279*       dec (hl)
047677 C0          0280*       ret nz
047678 3A 6E 76 04 0281*       ld a,(charge_laser_timer_max)
04767C 77          0282*       ld (hl),a
04767D 21 67 76 04 0283*       ld hl,laser_power
047681 34          0284*       inc (hl)
047682 3E 40       0285*       ld a,64
047684 BE          0286*       cp (hl)
047685 D0          0287*       ret nc
047686 77          0288*       ld (hl),a
047687 C9          0289*       ret
047688             0290*   ; end charge_laser
047688             0291*   draw_laser:
047688 CD 72 76 04 0292*       call charge_laser
04768C 21 6F 76 04 0293*       ld hl,laser_power_last
047690 3A 67 76 04 0294*       ld a,(laser_power)
047694 BE          0295*       cp (hl)
047695 C8          0296*       ret z ; no change to update
047696 77          0297*       ld (hl),a
047697 DD 21 3C 76 0298*       ld ix,bar_laser
       04          
04769C DD 77 00    0299*       ld (ix+bar_val),a ; TODO: this is redundant
04769F CD 95 75 04 0300*       call bar_update_v
0476A3 C9          0301*       ret
0476A4             0302*   
0476A4             0303*   
0476A4             0304*   ; update a horizontal bar display
0476A4             0305*   ; inputs: ix points to bar structure
0476A4             0306*   ;         bar_val set by caller
0476A4             0307*   ; prerequisite: bar_init called before first use
0476A4             0308*   bar_update_h:
0476A4             0309*   ; set gfx viewport
0476A4 DD E5       0310*       push ix ; preserve pointer
0476A6 DD 07 03    0311*       ld bc,(ix+bar_x0)
0476A9 DD 17 06    0312*       ld de,(ix+bar_y0)
0476AC DD 31 0C    0313*       ld iy,(ix+bar_y1)
0476AF DD 37 09    0314*       ld ix,(ix+bar_x1)
0476B2 CD EB 1A 04 0315*       call vdu_set_gfx_viewport
0476B6 DD E1       0316*       pop ix ; restore pointer
0476B8             0317*   ; select the color based on the value thresholds
0476B8 DD 17 00    0318*       ld de,(ix+bar_val)
0476BB 21 EF FF FF 0319*       ld hl,-bar_red
0476BF 19          0320*       add hl,de
0476C0 D2 DD 76 04 0321*       jp nc,@red
0476C4 21 DF FF FF 0322*       ld hl,-bar_yellow
0476C8 19          0323*       add hl,de
0476C9 D2 D5 76 04 0324*       jp nc,@yellow
0476CD 21 02 00 00 0325*       ld hl,BUF_BAR_H_2 ; green
0476D1 C3 E1 76 04 0326*       jp @select
0476D5             0327*   @yellow:
0476D5 21 01 00 00 0328*       ld hl,BUF_BAR_H_1 ; yellow
0476D9 C3 E1 76 04 0329*       jp @select
0476DD             0330*   @red:
0476DD 21 00 00 00 0331*       ld hl,BUF_BAR_H_0 ; red
0476E1             0332*   @select:
0476E1 CD 38 1B 04 0333*       call vdu_buff_select
0476E5             0334*   ; compute x-plot position
0476E5 DD 27 00    0335*       ld hl,(ix+bar_val)
0476E8 DD 07 0F    0336*       ld bc,(ix+bar_x)
0476EB 09          0337*       add hl,bc
0476EC 7D          0338*       ld a,l
0476ED E6 FC       0339*       and %11111100 ; round to nearest 4 pixels
0476EF 6F          0340*       ld l,a
0476F0 E5          0341*       push hl
0476F1 C1          0342*       pop bc
0476F2             0343*   ; get y-plot position
0476F2 DD 17 06    0344*       ld de,(ix+bar_y0)
0476F5             0345*   
0476F5             0346*   ; ; DEBUG
0476F5             0347*   ;     PUSH_ALL
0476F5             0348*   ;     call vdu_home_cursor
0476F5             0349*   ;     ld hl,(ix+bar_val)
0476F5             0350*   ;     call printDec
0476F5             0351*   ;     call printNewLine
0476F5             0352*   ;     POP_ALL
0476F5             0353*   ;     PUSH_ALL
0476F5             0354*   ;     push bc
0476F5             0355*   ;     pop hl
0476F5             0356*   ;     call printDec
0476F5             0357*   ;     call printNewLine
0476F5             0358*   ;     POP_ALL
0476F5             0359*   ;     PUSH_ALL
0476F5             0360*   ;     ex de,hl
0476F5             0361*   ;     call printDec
0476F5             0362*   ;     call printNewLine
0476F5             0363*   ;     POP_ALL
0476F5             0364*   ; ; END DEBUG
0476F5             0365*   
0476F5 CD 20 1F 04 0366*       call vdu_plot_bmp
0476F9 C9          0367*       ret
0476FA             0368*   ; end bar_update_h
0476FA             0369*   
0476FA             0370*   bar_fuel:
0476FA 00 00 00    0371*       dl 0 ; value
0476FD 30 00 00    0372*       dl 48 ; x0
047700 08 01 00    0373*       dl 264 ; y0
047703 6F 00 00    0374*       dl 48+63 ; x1
047706 0F 01 00    0375*       dl 264+7 ; y1
047709 F0 FF FF    0376*       dl 48-64 ; x-plot coordinate
04770C             0377*   
04770C             0378*   init_bar_fuel:
04770C 3A 29 77 04 0379*       ld a,(discharge_fuel_timer_max)
047710 32 28 77 04 0380*       ld (discharge_fuel_timer),a
047714 DD 21 FA 76 0381*       ld ix,bar_fuel
       04          
047719 3A 27 77 04 0382*       ld a,(player_fuel_max)
04771D DD 77 00    0383*       ld (ix+bar_val),a
047720 CD A4 76 04 0384*       call bar_update_h
047724 C9          0385*       ret
047725             0386*   ; end init_bar_fuel
047725             0387*   
047725 40          0388*   player_fuel: db 64 ; integer
047726 00          0389*   player_fuel_last: db 0 ; integer
047727 40          0390*   player_fuel_max: db 64 ; integer
047728 00          0391*   discharge_fuel_timer: db 0
047729 40          0392*   discharge_fuel_timer_max: db 64 ;
04772A             0393*   discharge_fuel:
04772A             0394*   ; check fuel timer
04772A 21 28 77 04 0395*       ld hl,discharge_fuel_timer
04772E 35          0396*       dec (hl)
04772F C0          0397*       ret nz ; not time to discharge fuel so return
047730             0398*   ; reset fuel discharge timer
047730 3A 29 77 04 0399*       ld a,(discharge_fuel_timer_max)
047734 77          0400*       ld (hl),a
047735             0401*   ; discharge fuel
047735 21 25 77 04 0402*       ld hl,player_fuel
047739 35          0403*       dec (hl)
04773A CA 43 77 04 0404*       jp z,@no_fuel
04773E FA 43 77 04 0405*       jp m,@no_fuel
047742 C9          0406*       ret ; fuel not zero so return
047743             0407*   @no_fuel:
047743 36 00       0408*       ld (hl),0 ; TODO: implement out-of-fuel handler
047745 C9          0409*       ret
047746             0410*   ; end discharge_fuel
047746             0411*   
047746             0412*   draw_fuel:
047746 CD 2A 77 04 0413*       call discharge_fuel
04774A 21 26 77 04 0414*       ld hl,player_fuel_last
04774E 3A 25 77 04 0415*       ld a,(player_fuel)
047752 BE          0416*       cp (hl)
047753 C8          0417*       ret z ; no change to update
047754 77          0418*       ld (hl),a
047755 DD 21 FA 76 0419*       ld ix,bar_fuel
       04          
04775A DD 77 00    0420*       ld (ix+bar_val),a ; TODO: this is redundant
04775D CD A4 76 04 0421*       call bar_update_h
047761 C9          0422*       ret
047762             0423*   ; end draw_fuel
047762             0062        include "player_laser.inc"
047762 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
047800             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
047800             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
047806 28 00 00    0004*   tmr_laser_reset: dl 120/3
047809             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
047809             0006*   
047809             0007*   laser_defaults:
047809 06          0008*       db player_air        ; type
04780A 08 01 00    0009*       dl BUF_LASER_A	    ; base_bufferId
04780D 85 78 04    0010*       dl move_player_laser	; move_program
047810 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
047811 05          0012*       db 5	                ; dim_x
047812 0D          0013*       db 13                   ; dim_y
047813 01          0014*       db 1                    ; num_orientations
047814 02          0015*       db 2                    ; num_animations
047815 00          0016*       db 0	                ; animation
047816 02          0017*       db laser_animation_timer_reset ; animation_timer
047817 00          0018*       db 0	                ; move_timer
047818 00          0019*       db 0	                ; move_step
047819 00          0020*       db 0	                ; points
04781A 00          0021*       db 0	                ; shield_damage
04781B 00          0022*       db 0                    ; frame
04781C             0023*   
04781C             0024*   player_spawn_laser:
04781C             0025*   ; check laser power
04781C 3A 67 76 04 0026*       ld a,(laser_power)
047820 D6 08       0027*       sub a,8 ; 8 units of power per laser shot
047822 D2 2C 78 04 0028*       jp nc,@F ; enough power to fire so check timer
047826 AF          0029*       xor a ; set power to zero
047827 32 67 76 04 0030*       ld (laser_power),a
04782B C9          0031*       ret
04782C             0032*   @@: ; check laser spawn timer
04782C FD 21 00 78 0033*       ld iy,tmr_laser
       04          
047831 CD 21 19 04 0034*       call timestamp_tmr_get
047835 F0          0035*       ret p ; not time to fire
047836             0036*   ; update power to reflect firing
047836 3A 67 76 04 0037*       ld a,(laser_power)
04783A D6 08       0038*       sub a,8 ; 8 units of power per laser shot
04783C 32 67 76 04 0039*       ld (laser_power),a
047840             0040*   ; reset timer
047840 2A 06 78 04 0041*       ld hl,(tmr_laser_reset)
047844 CD 16 19 04 0042*       call timestamp_tmr_set
047848             0043*   ; fire the laser
047848 DD 21 5E 8E 0044*       ld ix,player_weapons_begin
       04          
04784D 06 04       0045*       ld b,player_lasers_max
04784F FD 21 5E 8F 0046*       ld iy,player_begin
       04          
047854 FD 22 65 86 0047*       ld (table_pointer),iy
       04          
047859 21 09 78 04 0048*       ld hl,laser_defaults
04785D CD 22 87 04 0049*       call spawn_sprite_from_sprite
047861 D0          0050*       ret nc ; no carry means no free sprite slots, so we go home
047862             0051*   ; other specific initialization
047862             0052*   ; ------------------------------------------------
047862 FD 21 5E 8F 0053*       ld iy,player_begin
       04          
047867             0054*   ; x-coordinate
047867 FD 27 01    0055*       ld hl,(iy+sprite_x)
04786A 11 00 05 00 0056*       ld de,5*256 ; horizontal center with player sprite
04786E 19          0057*       add hl,de
04786F DD 2F 01    0058*       ld (ix+sprite_x),hl
047872             0059*   ; y-coordinate
047872 FD 27 04    0060*       ld hl,(iy+sprite_y)
047875 11 00 FA FF 0061*       ld de,-6*256 ; set laser y a few pixels above player
047879 19          0062*       add hl,de
04787A DD 2F 04    0063*       ld (ix+sprite_y),hl
04787D             0064*   ; set laser velocity
04787D 21 00 FC FF 0065*       ld hl,-speed_laser
047881 DD 2F 0A    0066*       ld (ix+sprite_yvel),hl
047884 C9          0067*       ret
047885             0068*   ; end player_spawn_laser
047885             0069*   
047885             0070*   move_player_laser:
047885             0071*   ; run the movement program for the laser
047885 CD D5 87 04 0072*       call move_sprite
047889 3A 68 86 04 0073*       ld a,(sprite_screen_edge)
04788D B7          0074*       or a ; a will be non-zero if have scrolled off screen
04788E CA 96 78 04 0075*       jp z,@F ; still on screen
047892 C3 AE 86 04 0076*       jp table_deactivate_sprite
047896             0077*   @@: ; check animation timer
047896 FD 35 23    0078*       dec (iy+sprite_animation_timer)
047899 C2 AD 78 04 0079*       jp nz,@F
04789D 3E 02       0080*       ld a,laser_animation_timer_reset
04789F FD 77 23    0081*       ld (iy+sprite_animation_timer),a
0478A2 FD 7E 00    0082*       ld a,(iy+sprite_id)
0478A5 CD 00 20 04 0083*       call vdu_sprite_select
0478A9 CD 47 20 04 0084*       call vdu_sprite_next_frame
0478AD             0085*   @@: ; all done
0478AD C9          0086*       ret
0478AE             0087*   ; end move_player_laser
0478AE             0088*   
0478AE             0089*   init_player_laser:
0478AE             0090*   ; set pointer to laser sprite table
0478AE FD 21 5E 8E 0091*       ld iy,player_weapons_begin
       04          
0478B3 FD 7E 00    0092*       ld a,(iy+sprite_id) ; sprite id
0478B6 1E 04       0093*       ld e,player_lasers_max ; sprite loop counter
0478B8             0094*   ; define laser sprites
0478B8             0095*   @sprites_loop:
0478B8 F5          0096*       push af
0478B9 D5          0097*       push de
0478BA CD 00 20 04 0098*   	call vdu_sprite_select
0478BE CD 13 20 04 0099*   	call vdu_sprite_clear_frames
0478C2 21 08 01 00 0100*   	ld hl,BUF_LASER_A
0478C6 06 02       0101*   	ld b,2 ; two bitmaps for laser
0478C8             0102*   @frames_loop:
0478C8 C5          0103*   	push bc
0478C9 E5          0104*   	push hl
0478CA CD 55 21 04 0105*   	call vdu_sprite_add_buff
0478CE E1          0106*   	pop hl
0478CF 23          0107*   	inc hl
0478D0 C1          0108*   	pop bc
0478D1 10 F5       0109*   	djnz @frames_loop
0478D3 D1          0110*       pop de ; sprite loop counter
0478D4 F1          0111*       pop af ; sprite id
0478D5 3C          0112*       inc a
0478D6 1D          0113*       dec e
0478D7 C2 B8 78 04 0114*       jp nz,@sprites_loop
0478DB             0115*   ; set laser firing timer to zero
0478DB FD 21 00 78 0116*       ld iy,tmr_laser
       04          
0478E0 21 00 00 00 0117*       ld hl,0
0478E4 CD 16 19 04 0118*       call timestamp_tmr_set
0478E8 C9          0119*       ret
0478E9             0120*   ; end init_player_laser
0478E9             0063        include "state.inc"
0478E9 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
047900             0002*   
047900             0003*   ; Game state variables
047900 0E 79 04    0004*   game_state:  dl game_main_menu
047903             0005*   
047903             0006*   do_game:
047903 2A 00 79 04 0007*       ld hl,(game_state)   ; Load the current game state
047907             0008*       CALL_HL                ; Call the corresponding state handler
047907 01 0D 79 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04790B C5          0002*M1     push bc ; which constitutes the return address
04790C E9          0003*M1     jp (hl) ; Jump to the address in HL
04790D C9          0009*       ret
04790E             0010*   
04790E             0011*   ; ========================
04790E             0012*   ; Main Game States
04790E             0013*   ; ========================
04790E             0014*   
04790E             0015*   game_main_menu:
04790E             0016*       ; Handle main menu options
04790E             0017*       ; Example: Check input for "Start Game"
04790E CD 4F 7A 04 0018*       call check_input_menu
047912 C2 17 79 04 0019*       jp nz, game_initialize ; Start game on selection
047916 C9          0020*       ret
047917             0021*   
047917             0022*   game_initialize:
047917             0023*   ; reset the sprite table
047917 CD 8A 86 04 0024*       call table_init
04791B 21 5E 8E 04 0025*       ld hl,table_base
04791F 22 65 86 04 0026*       ld (table_pointer),hl
047923             0027*   ; initialize sprites and active tiles table
047923 CD C2 86 04 0028*       call sprites_init
047927 CD 8A 86 04 0029*       call table_init
04792B CD 10 7F 04 0030*       call tile_table_init
04792F             0031*   ; initialize the first level
04792F 3E 00       0032*       ld a,tiles_dg
047931 CD 1A 61 04 0033*       call init_tileset
047935             0034*   ; initialize player
047935 2A F4 75 04 0035*       ld hl,(player_shields_max)
047939 22 F1 75 04 0036*       ld (player_shields),hl
04793D 22 2A 74 04 0037*       ld (player_score_last),hl ; anything but zero so print_score will update
047941 2A 6A 76 04 0038*       ld hl,(laser_power_max)
047945 22 67 76 04 0039*       ld (laser_power),hl
047949 3A 27 77 04 0040*       ld a,(player_fuel_max)
04794D 32 25 77 04 0041*       ld (player_fuel),a
047951 21 00 00 00 0042*       ld hl,0
047955 22 00 72 04 0043*       ld (player_score),hl
047959 22 F7 75 04 0044*       ld (player_shields_last),hl ; set to zero so draw_shields will update
04795D 22 6F 76 04 0045*       ld (laser_power_last),hl ; set to zero so draw_laser will update
047961 AF          0046*       xor a
047962 32 26 77 04 0047*       ld (player_fuel_last),a ; set to zero so draw_fuel will update
047966 3E 03       0048*       ld a,3
047968 32 03 72 04 0049*       ld (player_ships),a
04796C CD 17 72 04 0050*       call player_init
047970             0051*   ; set the game state to playing
047970 21 79 79 04 0052*       ld hl,game_playing
047974 22 00 79 04 0053*       ld (game_state), hl
047978             0054*   ; done initializing
047978 C9          0055*       ret
047979             0056*   
047979             0057*   game_playing:
047979             0058*   ; Main gameplay loop
047979             0059*   
047979             0060*   ; plot tiles
047979 CD 12 82 04 0061*       call tiles_plot
04797D             0062*   
04797D             0063*   ; set gfx viewport to playing field window
04797D 01 00 00 00 0064*       ld bc,field_left
047981 11 00 00 00 0065*       ld de,field_top
047985 DD 21 FF 00 0066*       ld ix,field_right
       00          
04798A FD 21 7F 01 0067*       ld iy,field_bottom
       00          
04798F CD EB 1A 04 0068*       call vdu_set_gfx_viewport
047993             0069*   
047993             0070*   ; process movement and collisions
047993 CD 20 7A 04 0071*       call do_player
047997 CD 39 7A 04 0072*       call do_enemies
04799B CD 90 2A 04 0073*       call move_explosions
04799F CD 97 83 04 0074*       call move_tiles
0479A3             0075*   
0479A3             0076*   ; update UI
0479A3 01 00 00 00 0077*       ld bc,0
0479A7 11 00 00 00 0078*       ld de,0
0479AB CD D0 1A 04 0079*       call vdu_set_gfx_origin
0479AF CD 3C 74 04 0080*       call print_score
0479B3 CD 24 76 04 0081*       call draw_shields
0479B7 CD 88 76 04 0082*       call draw_laser
0479BB CD 46 77 04 0083*       call draw_fuel
0479BF C9          0084*       ret
0479C0             0085*   
0479C0             0086*   game_paused:
0479C0             0087*       ; Pause menu logic
0479C0 CD 52 7A 04 0088*       call check_input_pause
0479C4 C2 79 79 04 0089*       jp nz, game_playing ; Resume game
0479C8 CA 0E 79 04 0090*       jp z, game_main_menu ; Exit to main menu
0479CC C9          0091*       ret
0479CD             0092*   
0479CD             0093*   game_level_transition:
0479CD             0094*       ; Handle level transitions
0479CD CD 53 7A 04 0095*       call load_next_level
0479D1 21 79 79 04 0096*       ld hl, game_playing
0479D5 22 00 79 04 0097*       ld (game_state), hl
0479D9 C9          0098*       ret
0479DA             0099*   
0479DA             0100*   game_over:
0479DA             0101*       ; Display game over screen
0479DA CD 54 7A 04 0102*       call display_game_over
0479DE C2 0E 79 04 0103*       jp nz, game_main_menu ; Return to main menu on input
0479E2 C9          0104*       ret
0479E3             0105*   
0479E3             0106*   game_victory:
0479E3             0107*       ; Display victory screen
0479E3 CD 55 7A 04 0108*       call display_victory
0479E7 C2 0E 79 04 0109*       jp nz, game_main_menu ; Return to main menu on input
0479EB C9          0110*       ret
0479EC             0111*   
0479EC             0112*   ; ========================
0479EC             0113*   ; Supporting States
0479EC             0114*   ; ========================
0479EC             0115*   
0479EC             0116*   game_loading:
0479EC             0117*       ; Show loading screen while preparing assets
0479EC CD 56 7A 04 0118*       call load_resources
0479F0 21 17 79 04 0119*       ld hl, game_initialize
0479F4 22 00 79 04 0120*       ld (game_state), hl
0479F8 C9          0121*       ret
0479F9             0122*   
0479F9             0123*   game_cutscene:
0479F9             0124*       ; Play a non-interactive cutscene
0479F9 CD 57 7A 04 0125*       call play_cutscene
0479FD C2 79 79 04 0126*       jp nz, game_playing ; Return to gameplay after cutscene
047A01 C9          0127*       ret
047A02             0128*   
047A02             0129*   game_inventory:
047A02             0130*       ; Open inventory or shop
047A02 CD 58 7A 04 0131*       call display_inventory
047A06 C2 79 79 04 0132*       jp nz, game_playing ; Return to gameplay after inventory close
047A0A C9          0133*       ret
047A0B             0134*   
047A0B             0135*   game_map:
047A0B             0136*       ; Display map or quest
047A0B CD 59 7A 04 0137*       call display_map
047A0F C2 79 79 04 0138*       jp nz, game_playing ; Return to gameplay after map close
047A13 C9          0139*       ret
047A14             0140*   
047A14             0141*   game_exit:
047A14             0142*       ; Handle exit logic
047A14 CD 5A 7A 04 0143*       call save_game
047A18 C3 5B 7A 04 0144*       jp exit_game         ; Safely shut down
047A1C C9          0145*       ret
047A1D             0146*   
047A1D             0147*   ; ========================
047A1D             0148*   ; Sub-state branching (Example for player state)
047A1D             0149*   ; ========================
047A1D             0150*   
047A1D 2B 7A 04    0151*   player_state:  dl player_alive ; Player state variable
047A20             0152*   
047A20             0153*   do_player:
047A20 2A 1D 7A 04 0154*       ld hl,(player_state)
047A24             0155*       CALL_HL                ; Call the corresponding player state
047A24 01 2A 7A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047A28 C5          0002*M1     push bc ; which constitutes the return address
047A29 E9          0003*M1     jp (hl) ; Jump to the address in HL
047A2A C9          0156*       ret
047A2B             0157*   
047A2B             0158*   player_alive:
047A2B CD 67 72 04 0159*       call player_input     ; Handle player input
047A2F CD 30 73 04 0160*       call player_move_weapons    ; Handle laser movement and collision detection
047A33 C9          0161*       ret
047A34             0162*   
047A34             0163*   player_dead:
047A34 CD 30 73 04 0164*       call player_move_weapons    ; Handle laser movement and collision detection
047A38 C9          0165*       ret
047A39             0166*   
047A39             0167*   do_enemies:
047A39 2A 44 7A 04 0168*       ld hl,(enemies_state)
047A3D             0169*       CALL_HL
047A3D 01 43 7A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047A41 C5          0002*M1     push bc ; which constitutes the return address
047A42 E9          0003*M1     jp (hl) ; Jump to the address in HL
047A43 C9          0170*       ret
047A44 4A 7A 04    0171*   enemies_state: dl enemies_alive
047A47             0172*   
047A47             0173*   enemies_dead:
047A47 C9          0174*       ret
047A48             0175*   
047A48             0176*   enemies_respawning:
047A48 C9          0177*       ret
047A49             0178*   
047A49             0179*   enemies_respawn:
047A49 C9          0180*       ret
047A4A             0181*   
047A4A             0182*   enemies_alive:
047A4A CD 01 27 04 0183*       call move_enemies
047A4E C9          0184*       ret
047A4F             0185*   
047A4F             0186*   check_input_menu:
047A4F C9          0187*       ret
047A50             0188*   
047A50             0189*   update_game_world:
047A50 C9          0190*       ret
047A51             0191*   
047A51             0192*   check_game_events:
047A51 C9          0193*       ret
047A52             0194*   
047A52             0195*   check_input_pause:
047A52 C9          0196*       ret
047A53             0197*   
047A53             0198*   load_next_level:
047A53 C9          0199*       ret
047A54             0200*   
047A54             0201*   display_game_over:
047A54 C9          0202*       ret
047A55             0203*   
047A55             0204*   display_victory:
047A55 C9          0205*       ret
047A56             0206*   
047A56             0207*   load_resources:
047A56 C9          0208*       ret
047A57             0209*   
047A57             0210*   play_cutscene:
047A57 C9          0211*       ret
047A58             0212*   
047A58             0213*   display_inventory:
047A58 C9          0214*       ret
047A59             0215*   
047A59             0216*   display_map:
047A59 C9          0217*       ret
047A5A             0218*   
047A5A             0219*   save_game:
047A5A C9          0220*       ret
047A5B             0221*   
047A5B             0222*   exit_game:
047A5B C9          0223*       ret
047A5C             0224*   
047A5C             0064        include "targeting.inc"
047A5C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
047B00             0002*   
047B00             0003*   ; compute orientation to player
047B00             0004*   ; based on relative positions
047B00             0005*   ; returns: uh.l 16.8 fixed angle256 to player
047B00             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047B00             0007*   ;    representing delta-x/y *to* target respectively
047B00             0008*   ; inputs: iy pointed at sprite record
047B00             0009*   ; destroys: everything except iy (sprite record pointer)
047B00             0010*   orientation_to_player:
047B00 DD 21 5E 8F 0011*       ld ix,player_begin
       04          
047B05             0012*   ; compute dx
047B05 DD 27 01    0013*       ld hl,(ix+sprite_x)
047B08 FD 17 01    0014*       ld de,(iy+sprite_x)
047B0B B7          0015*       or a ; clear carry
047B0C ED 52       0016*       sbc hl,de ; dx
047B0E E5          0017*       push hl ; save dx
047B0F             0018*   ; compute dy
047B0F DD 27 04    0019*       ld hl,(ix+sprite_y)
047B12 FD 17 04    0020*       ld de,(iy+sprite_y)
047B15 B7          0021*       or a ; clear carry
047B16 ED 52       0022*       sbc hl,de ; dy
047B18 EB          0023*       ex de,hl ; de = dy
047B19             0024*   ; compute angle to player
047B19 C1          0025*       pop bc ; dx (was hl)
047B1A C5          0026*       push bc ; save dx
047B1B D5          0027*       push de ; save dy
047B1C CD 9A 0C 04 0028*       call atan2_168fast ; uh.l = angle to player
047B20 3E E0       0029*       ld a,%11100000
047B22 A5          0030*       and l ; round angle to nearest 32th of a circle
047B23 6F          0031*       ld l,a
047B24 22 52 7B 04 0032*       ld (Bearing_t),hl ; return angle to player
047B28 D1          0033*       pop de ; restore dy
047B29 C1          0034*       pop bc ; restore dx
047B2A C9          0035*       ret
047B2B             0036*   ; end orientation_to_player
047B2B             0037*   
047B2B             0038*   ; compute orientation to player
047B2B             0039*   ; based on relative positions
047B2B             0040*   ; returns: uh.l 16.8 fixed angle256 to player
047B2B             0041*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047B2B             0042*   ;    representing delta-x/y *to* target respectively
047B2B             0043*   ; inputs: iy pointed at tile record
047B2B             0044*   ; destroys: everything except iy (tile record pointer)
047B2B             0045*   tile_orientation_to_player:
047B2B DD 21 5E 8F 0046*       ld ix,player_begin
       04          
047B30             0047*   ; compute dx
047B30 DD 27 01    0048*       ld hl,(ix+sprite_x)
047B33 FD 17 01    0049*       ld de,(iy+tile_x)
047B36 B7          0050*       or a ; clear carry
047B37 ED 52       0051*       sbc hl,de ; dx
047B39 E5          0052*       push hl ; save dx
047B3A             0053*   ; compute dy
047B3A DD 27 04    0054*       ld hl,(ix+sprite_y)
047B3D FD 17 04    0055*       ld de,(iy+tile_y)
047B40 B7          0056*       or a ; clear carry
047B41 ED 52       0057*       sbc hl,de ; dy
047B43 EB          0058*       ex de,hl ; de = dy
047B44             0059*   ; compute angle to player
047B44 C1          0060*       pop bc ; dx (was hl)
047B45 CD 9A 0C 04 0061*       call atan2_168fast ; uh.l = angle to player
047B49 3E E0       0062*       ld a,%11100000
047B4B A5          0063*       and l ; round angle to nearest 32th of a circle
047B4C 6F          0064*       ld l,a
047B4D 22 52 7B 04 0065*       ld (Bearing_t),hl
047B51 C9          0066*       ret
047B52             0067*   ; end tile_orientation_to_player
047B52             0068*   
047B52             0069*   ; targeting_computer variables fixed 16.8 format
047B52 00 00 00    0070*   Bearing_t: dl 0x000000 ; angle to target
047B55 00 00 00    0071*   Heading_t: dl 0x000000 ; angle of target motion
047B58 00 00 00    0072*   Vp: dl 0x000000 ; velocity of projectile
047B5B 00 00 00    0073*   Vp_x: dl 0x000000 ; x component of projectile velocity
047B5E 00 00 00    0074*   Vp_y: dl 0x000000 ; y component of projectile velocity
047B61 00 00 00    0075*   Vt: dl 0x000000 ; velocity of target
047B64 00 00 00    0076*   Vt_x: dl 0x000000 ; x component of target velocity
047B67 00 00 00    0077*   Vt_y: dl 0x000000 ; y component of target velocity
047B6A 00 00 00    0078*   Heading_p: dl 0x000000 ; angle of projectile motion
047B6D 00 00 00    0079*   lead_angle: dl 0x000000 ; lead angle
047B70             0080*   
047B70             0081*   ; Inputs:   Vp velocity of projectile set,
047B70             0082*   ;           iy pointed to sprite record,
047B70             0083*   ;           player position and velocities correctly set
047B70             0084*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
047B70             0085*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
047B70             0086*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
047B70             0087*   targeting_computer:
047B70 DD 21 5E 8F 0088*       ld ix,player_begin
       04          
047B75             0089*   ; ; compute target velocity from x,y component velocities
047B75             0090*   ;     ld bc,(ix+sprite_xvel)
047B75             0091*   ;     ld de,(ix+sprite_yvel)
047B75             0092*   ;     ld hl,-1*256 ; account for vertical ground movement
047B75             0093*   ;     add hl,de
047B75             0094*   ;     ex de,hl ; ud.e = player_yvel-1
047B75             0095*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
047B75             0096*   ;     ld (Heading_t),hl ; PASSES
047B75             0097*   ;     ld (Vt),de ; PASSES
047B75             0098*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
047B75             0099*   ; ; compute Heading_t-Bearing_t PASSES
047B75             0100*   ;     ld de,(Bearing_t)
047B75             0101*   ;     and a ; clear carry
047B75             0102*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
047B75             0103*   ; ; compute sin(Heading_t-Bearing_t)
047B75             0104*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
047B75             0105*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
047B75             0106*   ;     ld de,(Vt)
047B75             0107*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
047B75             0108*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
047B75             0109*   ;     ld de,(Vp)
047B75             0110*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
047B75             0111*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
047B75             0112*   ; ; answer is in radians, convert to degrees256
047B75             0113*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
047B75             0114*   ;     call smul168 ; uh.l = angle in degrees256
047B75             0115*   ;     ld (lead_angle),hl ; DEBUG
047B75             0116*   ; ; add lead angle to target bearing
047B75             0117*   ;     ld de,(Bearing_t)
047B75             0118*   ;     add hl,de ; h.l = lead angle+target bearing
047B75             0119*   
047B75 2A 52 7B 04 0120*       ld hl,(Bearing_t) ; DEBUG
047B79             0121*   
047B79 E5          0122*       push hl
047B7A             0123*   
047B7A             0124*   ; compute component projectile velocities
047B7A ED 5B 58 7B 0125*       ld de,(Vp) ; Vp should have been set by caller
       04          
047B7F CD A0 0B 04 0126*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
047B83 ED 43 5B 7B 0127*       ld (Vp_x),bc
       04          
047B88             0128*       ; inc d ; account for vertical ground movement
047B88 ED 53 5E 7B 0129*       ld (Vp_y),de
       04          
047B8D E1          0130*       pop hl ; uh.l = lead angle+target bearing
047B8E 22 6A 7B 04 0131*       ld (Heading_p),hl
047B92             0132*   
047B92 C9          0133*       ret
047B93             0134*   
047B93             0135*   ; debug print the results
047B93             0136*       PUSH_ALL
047B93 08          0001*M1     ex af,af'
047B94 D9          0002*M1     exx
047B95 F5          0003*M1     push af
047B96 E5          0004*M1     push hl
047B97 C5          0005*M1     push bc
047B98 D5          0006*M1     push de
047B99             0007*M1 
047B99 08          0008*M1     ex af,af'
047B9A D9          0009*M1     exx
047B9B F5          0010*M1     push af
047B9C E5          0011*M1     push hl
047B9D C5          0012*M1     push bc
047B9E D5          0013*M1     push de
047B9F DD E5       0014*M1     push ix
047BA1 FD E5       0015*M1     push iy
047BA3 CD 00 1A 04 0137*       call vdu_home_cursor
047BA7 CD 1C 01 04 0138*       call printNewLine
047BAB CD 00 01 04 0139*       call printInline
047BAF 42 74 20 00 0140*       asciz "Bt "
047BB3 2A 52 7B 04 0141*       ld hl,(Bearing_t)
047BB7 CD 2B 03 04 0142*       call print_s168_hl
047BBB             0143*   
047BBB             0144*       ; call printInline
047BBB             0145*       ; asciz "\r\nHt "
047BBB             0146*       ; ld hl,(Heading_t)
047BBB             0147*       ; call print_s168_hl
047BBB             0148*   
047BBB             0149*       ; call printInline
047BBB             0150*       ; asciz "\r\nVt "
047BBB             0151*       ; ld hl,(Vt)
047BBB             0152*       ; call print_s168_hl
047BBB             0153*   
047BBB             0154*       ; call printInline
047BBB             0155*       ; asciz "\r\nVtx"
047BBB             0156*       ; ld hl,(ix+sprite_xvel)
047BBB             0157*       ; call print_s168_hl
047BBB             0158*   
047BBB             0159*       ; call printInline
047BBB             0160*       ; asciz "\r\nVty"
047BBB             0161*       ; ld hl,(ix+sprite_yvel)
047BBB             0162*       ; ld de,-1*256 ; account for vertical ground movement
047BBB             0163*       ; add hl,de
047BBB             0164*       ; call print_s168_hl
047BBB             0165*   
047BBB CD 00 01 04 0166*       call printInline
047BBF 0D 0A 4C 64 0167*       asciz "\r\nLda"
       61 00       
047BC5 2A 6D 7B 04 0168*       ld hl,(lead_angle)
047BC9 CD 2B 03 04 0169*       call print_s168_hl
047BCD             0170*   
047BCD CD 00 01 04 0171*       call printInline
047BD1 0D 0A 48 70 0172*       asciz "\r\nHp "
       20 00       
047BD7 2A 6A 7B 04 0173*       ld hl,(Heading_p)
047BDB CD 2B 03 04 0174*       call print_s168_hl
047BDF             0175*   
047BDF             0176*       ; call printInline
047BDF             0177*       ; asciz "\r\nVp "
047BDF             0178*       ; ld hl,(Vp)
047BDF             0179*       ; call print_s168_hl
047BDF             0180*   
047BDF             0181*       ; call printInline
047BDF             0182*       ; asciz "\r\nVpx"
047BDF             0183*       ; ld hl,(Vp_x)
047BDF             0184*       ; call print_s168_hl
047BDF             0185*   
047BDF             0186*       ; call printInline
047BDF             0187*       ; asciz "\r\nVpy"
047BDF             0188*       ; ld hl,(Vp_y)
047BDF             0189*       ; call print_s168_hl
047BDF             0190*   
047BDF             0191*       POP_ALL
047BDF FD E1       0001*M1     pop iy
047BE1 DD E1       0002*M1     pop ix
047BE3 D1          0003*M1     pop de
047BE4 C1          0004*M1     pop bc
047BE5 E1          0005*M1     pop hl
047BE6 F1          0006*M1     pop af
047BE7 08          0007*M1     ex af,af'
047BE8 D9          0008*M1     exx
047BE9             0009*M1 
047BE9 D1          0010*M1     pop de
047BEA C1          0011*M1     pop bc
047BEB E1          0012*M1     pop hl
047BEC F1          0013*M1     pop af
047BED 08          0014*M1     ex af,af'
047BEE D9          0015*M1     exx
047BEF C9          0192*       ret
047BF0             0065        include "tile_table.inc"
047BF0             0001*   ; ###### tile TABLE FIELD INDICES ######
047BF0             0002*   tile_table_record_size:         equ  64; 41 bytes ;41 bytes per tile record
047BF0             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
047BF0             0004*   ; tile state variables
047BF0             0005*   tile_state_variables:    equ   1; beginning of tile state variables
047BF0             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047BF0             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047BF0             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047BF0             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047BF0             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047BF0             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
047BF0             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
047BF0             0013*   ; tile definition variables
047BF0             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
047BF0             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
047BF0             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047BF0             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
047BF0             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047BF0             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
047BF0             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
047BF0             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
047BF0             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
047BF0             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
047BF0             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047BF0             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047BF0             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047BF0             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
047BF0             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047BF0             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
047BF0             0030*   
047BF0             0031*   ; ###### tile TABLE VARIABLES ######
047BF0 FF FF FF FF 0032*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
047C00 00 00 00 00 0033*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047F00 00 00 00    0034*       dl 0 ; list terminator
047F03             0035*   tile_stack_end:
047F03 00 7C 04    0036*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
047F06 5E 93 04    0037*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
047F09 00 00 00    0038*   num_active_tiles: dl 0 ; how many active tiles
047F0C 00          0039*   next_tile_id: db 0 ; next available tile id
047F0D 00 00 00    0040*   new_tile_table_pointer: dl 0 ; pointer to new tile record
047F10             0041*   
047F10             0042*   tile_table_init:
047F10             0043*   ; clear the tile stack
047F10 AF          0044*       xor a ; write zeroes to tile stack
047F11 21 00 7C 04 0045*       ld hl,tile_stack
047F15 01 03 03 00 0046*       ld bc,tile_stack_end-tile_stack
047F19 CD 31 07 04 0047*       call clear_mem
047F1D             0048*   ; clear the tile table
047F1D AF          0049*       xor a ; write zeroes to tile table
047F1E 21 5E 93 04 0050*       ld hl,tile_table_base ; address to copy from
047F22 01 00 40 00 0051*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
047F26 CD 31 07 04 0052*       call clear_mem
047F2A             0053*   ; write tile ids
047F2A DD 21 5E 93 0054*       ld ix,tile_table_base
       04          
047F2F AF          0055*       xor a ; tile id
047F30 06 00       0056*       ld b,0 ; loop counter
047F32             0057*   @loop:
047F32 DD 77 00    0058*       ld (ix+tile_id),a
047F35 ED 32 40    0059*       lea ix,ix+table_record_size
047F38 3C          0060*       inc a
047F39 10 F7       0061*       djnz @loop
047F3B             0062*   ; set pointers to top of tile stack and tile table
047F3B 21 0C 7F 04 0063*       ld hl,next_tile_id
047F3F 3E FF       0064*       ld a,255 ; will wrap around to 0 on first call to create active tile
047F41 77          0065*       ld (hl),a
047F42 21 5E 93 04 0066*       ld hl,tile_table_base
047F46 22 06 7F 04 0067*       ld (tile_table_pointer),hl
047F4A 21 00 7C 04 0068*       ld hl,tile_stack
047F4E 22 03 7F 04 0069*       ld (tile_stack_pointer),hl
047F52 C9          0070*       ret
047F53             0071*   ; end tile_table_init
047F53             0072*   
047F53             0073*   ; gets the next available tile id
047F53             0074*   ; inputs; none
047F53             0075*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047F53             0076*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047F53             0077*   ; destroys: a,hl,ix
047F53             0078*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047F53             0079*   tile_table_get_next_id:
047F53 21 09 7F 04 0080*       ld hl,num_active_tiles
047F57 34          0081*       inc (hl)
047F58 C2 5F 7F 04 0082*       jp nz,@F ; check rollover to > 256 active tiles
047F5C 35          0083*       dec (hl) ; undo increment
047F5D AF          0084*       xor a ; reset carry flag indicating that we didn't find a free tile
047F5E C9          0085*       ret
047F5F             0086*   @@:
047F5F 7E          0087*       ld a,(hl) ; number of active tiles
047F60             0088*   ; point ix to next tile record
047F60 21 0C 7F 04 0089*       ld hl,next_tile_id
047F64 34          0090*       inc (hl)
047F65 56          0091*       ld d,(hl) ; index into tile table
047F66 1E 40       0092*       ld e,tile_table_record_size
047F68 ED 5C       0093*       mlt de ; de is now the offset to the table entry
047F6A DD 21 5E 93 0094*       ld ix,tile_table_base ; point to base address of tile table
       04          
047F6F DD 19       0095*       add ix,de ; ix is now the address of the table entry
047F71             0096*   ; add tile pointer to tile stack
047F71 21 00 7C 04 0097*       ld hl,tile_stack
047F75 57          0098*       ld d,a ; number of active tiles
047F76 15          0099*       dec d ; zero-based index
047F77 1E 03       0100*       ld e,3 ; three bytes per tile record
047F79 ED 5C       0101*       mlt de ; offset into tile stack
047F7B 19          0102*       add hl,de ; hl points to top of the active tiles
047F7C ED 3F       0103*       ld (hl),ix
047F7E             0104*   ; return tile id
047F7E DD 7E 00    0105*       ld a,(ix+tile_id)
047F81 37          0106*       scf ; sets carry flag indicating we found a free tile
047F82 C9          0107*       ret ; done
047F83             0108*   ; end tile_table_get_next_id
047F83             0109*   
047F83             0110*   ; deactivate the tile with the given id
047F83             0111*   ; inputs: tile_stack_pointer set to record to remove
047F83             0112*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
047F83             0113*   ; destroys: a,hl,bc,de
047F83             0114*   table_deactivate_tile:
047F83             0115*   ; compute address to copy from
047F83 2A 03 7F 04 0116*       ld hl,(tile_stack_pointer)
047F87 23          0117*       inc hl
047F88 23          0118*       inc hl
047F89 23          0119*       inc hl
047F8A E5          0120*       push hl ; save copy from address
047F8B             0121*   ; compute bytes to copy
047F8B 3A 09 7F 04 0122*       ld a,(num_active_tiles)
047F8F 6F          0123*       ld l,a
047F90 26 03       0124*       ld h,3
047F92 ED 6C       0125*       mlt hl
047F94 11 00 7C 04 0126*       ld de,tile_stack
047F98 19          0127*       add hl,de ; hl = bottom of stack address
047F99 ED 5B 03 7F 0128*       ld de,(tile_stack_pointer)
       04          
047F9E B7          0129*       or a ; clear carry
047F9F ED 52       0130*       sbc hl,de ; hl = bytes to copy
047FA1 E5          0131*       push hl
047FA2 C1          0132*       pop bc ; bytes to copy
047FA3             0133*   ; compute target address
047FA3 ED 5B 03 7F 0134*       ld de,(tile_stack_pointer)
       04          
047FA8             0135*   ; copy bytes
047FA8 E1          0136*       pop hl ; copy from address
047FA9 ED B0       0137*       ldir
047FAB             0138*   ; update stack pointer and active tile count
047FAB 21 09 7F 04 0139*       ld hl,num_active_tiles
047FAF 35          0140*       dec (hl)
047FB0 2A 03 7F 04 0141*       ld hl,(tile_stack_pointer)
047FB4 2B          0142*       dec hl
047FB5 2B          0143*       dec hl
047FB6 2B          0144*       dec hl
047FB7 22 03 7F 04 0145*       ld (tile_stack_pointer),hl
047FBB C9          0146*       ret
047FBC             0147*   ; end table_deactivate_tile
047FBC             0148*   
047FBC             0149*   ; spawn a new active tile at the prescribed location
047FBC             0150*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
047FBC             0151*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047FBC             0152*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047FBC             0153*   ; destroys: a,hl,ix
047FBC             0154*   ; preserves: bc,de (x,y position)
047FBC             0155*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047FBC             0156*   spawn_active_tile:
047FBC E5          0157*       push hl ; back up pointer to new tile defaults
047FBD CD 53 7F 04 0158*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
047FC1 E1          0159*       pop hl ; restore pointer to new tile defaults
047FC2 D0          0160*       ret nc ; no carry means no free tile slots, so we go home
047FC3             0161*   ; copy default settings to new tile
047FC3 DD 22 0D 7F 0162*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
047FC8 ED 32 16    0163*       lea ix,ix+tile_definitions ; bump pointer to copy to
047FCB DD E5       0164*       push ix ; pointer to default tile settings
047FCD D1          0165*       pop de ; address to copy to
047FCE 01 2A 00 00 0166*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
047FD2 ED B0       0167*       ldir ; copies defaults to new tile record
047FD4             0168*   ; copy tile position from inputs
047FD4 DD 2A 0D 7F 0169*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
047FD9 2A 0A 82 04 0170*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
047FDD DD 2F 01    0171*       ld (ix+tile_x),hl
047FE0 2A 0E 82 04 0172*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
047FE4 DD 2F 04    0173*       ld (ix+tile_y),hl
047FE7             0174*   ; set default tile velocities
047FE7 21 00 00 00 0175*       ld hl,0
047FEB DD 2F 07    0176*       ld (ix+tile_xvel),hl
047FEE 21 00 01 00 0177*       ld hl,1*256 ; 1 pixel per frame
047FF2 DD 2F 0A    0178*       ld (ix+tile_yvel),hl
047FF5             0179*   ; return to caller
047FF5 DD CB 16 FE 0180*       set 7,(ix+sprite_type) ; set just spawned flag
047FF9 DD CB 1D F6 0181*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047FFD 37          0182*       scf ; set carry flag to indicate success
047FFE C9          0183*       ret
047FFF             0184*   ; end spawn_active_tile
047FFF             0185*   
047FFF             0186*   ; compute animation frame based on tile_animation and tile_heading
047FFF             0187*   ; inputs: iy set to tile record
047FFF             0188*   ; outputs: a, tile_frame set to animation frame
047FFF             0189*   ; destroys: a,hl
047FFF             0190*   tile_frame_heading_animation:
047FFF FD 7E 11    0191*       ld a,(iy+tile_heading+1) ; we want the integer portion
048002 CB 3F       0192*       srl a ; divide integer portion by 8
048004 CB 3F       0193*       srl a
048006 CB 3F       0194*       srl a
048008 FD 66 22    0195*       ld h,(iy+tile_animation)
04800B 2E 20       0196*       ld l,32 ; 32 orientation frames per animation
04800D ED 6C       0197*       mlt hl ; hl = offset from base animation
04800F 85          0198*       add a,l ; modulo256 since tile_frame is only 1 byte
048010 FD 77 28    0199*       ld (iy+tile_frame),a
048013 C9          0200*       ret
048014             0201*   ; end tile_frame_heading_animation
048014             0202*   
048014             0203*   ; compute animation frame based on tile_heading
048014             0204*   ; inputs: iy set to tile record
048014             0205*   ; outputs: a, tile_frame set to animation frame
048014             0206*   ; destroys: a,hl
048014             0207*   tile_frame_heading:
048014 FD 7E 11    0208*       ld a,(iy+tile_heading+1) ; we want the integer portion
048017 CB 3F       0209*       srl a ; divide integer portion by 8
048019 CB 3F       0210*       srl a
04801B CB 3F       0211*       srl a
04801D FD 77 28    0212*       ld (iy+tile_frame),a
048020 C9          0213*       ret
048021             0214*   ; end tile_frame_heading
048021             0215*   
048021             0216*   dump_tile_record:
048021 CD 00 01 04 0217*       call printInline
048025 69 64 20 20 0218*       asciz "id  : "
       3A 20 00    
04802C DD 7E 00    0219*       ld a,(ix+tile_id)
04802F CD 4A 01 04 0220*       call printHexA
048033             0221*   
048033 CD 00 01 04 0222*       call printInline
048037 0D 0A 78 20 0223*       asciz "\r\nx   :"
       20 20 3A 00 
04803F DD 27 01    0224*       ld hl,(ix+tile_x)
048042 CD 2B 03 04 0225*       call print_s168_hl
048046             0226*   
048046 CD 00 01 04 0227*       call printInline
04804A 0D 0A 79 20 0228*       asciz "\r\ny   :"
       20 20 3A 00 
048052 DD 27 04    0229*       ld hl,(ix+tile_y)
048055 CD 2B 03 04 0230*       call print_s168_hl
048059             0231*   
048059 CD 00 01 04 0232*       call printInline
04805D 0D 0A 78 76 0233*       asciz "\r\nxv  :"
       20 20 3A 00 
048065 DD 27 07    0234*       ld hl,(ix+tile_xvel)
048068 CD 2B 03 04 0235*       call print_s168_hl
04806C             0236*   
04806C CD 00 01 04 0237*       call printInline
048070 0D 0A 79 76 0238*       asciz "\r\nyv  :"
       20 20 3A 00 
048078 DD 27 0A    0239*       ld hl,(ix+tile_yvel)
04807B CD 2B 03 04 0240*       call print_s168_hl
04807F             0241*   
04807F CD 00 01 04 0242*       call printInline
048083 0D 0A 76 20 0243*       asciz "\r\nv   :"
       20 20 3A 00 
04808B DD 27 0D    0244*       ld hl,(ix+tile_vel)
04808E CD 2B 03 04 0245*       call print_s168_hl
048092             0246*   
048092 CD 00 01 04 0247*       call printInline
048096 0D 0A 68 64 0248*       asciz "\r\nhdg :"
       67 20 3A 00 
04809E DD 27 10    0249*       ld hl,(ix+tile_heading)
0480A1 CD 2B 03 04 0250*       call print_s168_hl
0480A5             0251*   
0480A5 CD 00 01 04 0252*       call printInline
0480A9 0D 0A 6F 72 0253*       asciz "\r\nori :"
       69 20 3A 00 
0480B1 DD 27 13    0254*       ld hl,(ix+tile_orientation)
0480B4 CD 2B 03 04 0255*       call print_s168_hl
0480B8             0256*   
0480B8 CD 00 01 04 0257*       call printInline
0480BC 0D 0A 74 79 0258*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0480C5 DD 7E 16    0259*       ld a,(ix+tile_type)
0480C8 CD 4A 01 04 0260*       call printHexA
0480CC             0261*   
0480CC CD 00 01 04 0262*       call printInline
0480D0 0D 0A 42 49 0263*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0480D9 DD 27 17    0264*       ld hl,(ix+tile_base_bufferId)
0480DC CD 27 01 04 0265*       call printHex24
0480E0             0266*   
0480E0 CD 00 01 04 0267*       call printInline
0480E4 0D 0A 6D 50 0268*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0480ED DD 27 1A    0269*       ld hl,(ix+tile_move_program)
0480F0 CD 27 01 04 0270*       call printHex24
0480F4             0271*   
0480F4 CD 00 01 04 0272*       call printInline
0480F8 0D 0A 63 6F 0273*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
048101 DD 7E 1D    0274*       ld a,(ix+tile_collisions)
048104 CD A8 03 04 0275*       call printBin8
048108             0276*   
048108             0277*       ; call printInline
048108             0278*       ; asciz "\r\nszx : "
048108             0279*       ; ld a,(ix+tile_dim_x)
048108             0280*       ; call printHexA
048108             0281*   
048108             0282*       ; call printInline
048108             0283*       ; asciz "\r\nszy : "
048108             0284*       ; ld a,(ix+tile_dim_y)
048108             0285*       ; call printHexA
048108             0286*   
048108             0287*       ; call printInline
048108             0288*       ; asciz "\r\n#ori: "
048108             0289*       ; ld a,(ix+tile_num_orientations)
048108             0290*       ; call printHexA
048108             0291*   
048108             0292*       ; call printInline
048108             0293*       ; asciz "\r\n#ani: "
048108             0294*       ; ld a,(ix+tile_num_animations)
048108             0295*       ; call printHexA
048108             0296*   
048108             0297*       ; call printInline
048108             0298*       ; asciz "\r\nani : "
048108             0299*       ; ld a,(ix+tile_animation)
048108             0300*       ; call printHexA
048108             0301*   
048108             0302*       ; call printInline
048108             0303*       ; asciz "\r\nanit: "
048108             0304*       ; ld a,(ix+tile_animation_timer)
048108             0305*       ; call printHexA
048108             0306*   
048108             0307*       ; call printInline
048108             0308*       ; asciz "\r\nmvt : "
048108             0309*       ; ld a,(ix+tile_move_timer)
048108             0310*       ; call printHexA
048108             0311*   
048108             0312*       ; call printInline
048108             0313*       ; asciz "\r\nmvs : "
048108             0314*       ; ld a,(ix+tile_move_step)
048108             0315*       ; call printHexA
048108             0316*   
048108             0317*       ; call printInline
048108             0318*       ; asciz "\r\npts : "
048108             0319*       ; ld a,(ix+tile_points)
048108             0320*       ; call printHexA
048108             0321*   
048108             0322*       ; call printInline
048108             0323*       ; asciz "\r\ndmg : "
048108             0324*       ; ld a,(ix+tile_shield_damage)
048108             0325*       ; call printHexA
048108             0326*   
048108             0327*       ; call printInline
048108             0328*       ; asciz "\r\nfrm : "
048108             0329*       ; ld a,(ix+tile_frame)
048108             0330*       ; call printHexA
048108             0331*   
048108             0332*       ; call printNewLine
048108             0333*       ; call printNewLine
048108             0334*   
048108             0335*       ; call waitKeypress
048108 C9          0336*       ret
048109             0066        include "tiles.inc"
048109 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
048200 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
048203 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
048206             0004*       ; initialize to zero for a maximum of 256 rows in a level
048206 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
048207             0006*   
048207 00 00 00    0007*   cur_baseBufferId: dl 0
04820A 00          0008*       db 0 ; padding for byte-shifting
04820B 00 00 00    0009*   tiles_x_plot: dl 0
04820E 00          0010*       db 0 ; padding for byte-shifting
04820F F1 FF FF    0011*   tiles_y_plot: dl -15
048212             0012*   
048212             0013*   tiles_plot:
048212             0014*   ; set gfx origin to playing field window
048212 01 80 00 00 0015*       ld bc,origin_left
048216 11 00 00 00 0016*       ld de,origin_top
04821A CD D0 1A 04 0017*       call vdu_set_gfx_origin
04821E             0018*   ; set gfx viewport to playing field window
04821E 01 00 00 00 0019*       ld bc,field_left
048222 11 00 00 00 0020*       ld de,field_top
048226 DD 21 FF 00 0021*       ld ix,field_right
       00          
04822B FD 21 7F 01 0022*       ld iy,field_bottom
       00          
048230 CD EB 1A 04 0023*       call vdu_set_gfx_viewport
048234             0024*   ; move the background down one pixel
048234 3E 02       0025*       ld a,2 ; current gfx viewport
048236 2E 02       0026*       ld l,2 ; direction=down
048238 26 01       0027*       ld h,1 ; speed=1 px
04823A CD 63 1A 04 0028*       call vdu_scroll_down
04823E             0029*   ; set gfx viewport to one scanline to optimise plotting tiles
04823E 01 00 00 00 0030*       ld bc,0 ; leftmost x-coord
048242 11 00 00 00 0031*       ld de,0 ; topmost y-coord
048246 DD 21 FF 00 0032*       ld ix,255 ; rightmost x-coord
       00          
04824B FD 21 00 00 0033*       ld iy,0 ; bottommost y-coord
       00          
048250 CD EB 1A 04 0034*       call vdu_set_gfx_viewport
048254             0035*   ; plot the background
048254 CD 18 83 04 0036*       call bg_plot
048258             0037*   ; initialize tiles loop
048258 21 00 00 00 0038*       ld hl,0 ; init plotting x-coordinate
04825C 22 0B 82 04 0039*       ld (tiles_x_plot),hl
048260 2A 00 82 04 0040*       ld hl,(tiles_row_defs)
048264 3A 06 82 04 0041*       ld a,(tiles_cols)
048268 47          0042*       ld b,a ; column loop counter
048269             0043*   @loop:
048269 C5          0044*       push bc ; save the loop counter
04826A             0045*   ; read the tile defintion for the current column
04826A 7E          0046*       ld a,(hl) ; a has tile definition
04826B E5          0047*       push hl ; save pointer to tile definition
04826C 2A 07 82 04 0048*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
048270 6F          0049*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
048271 CD 38 1B 04 0050*       call vdu_buff_select ; tile bitmap buffer is now active
048275             0051*   ; plot the active bitmap
048275 ED 4B 0B 82 0052*       ld bc,(tiles_x_plot)
       04          
04827A ED 5B 0F 82 0053*       ld de,(tiles_y_plot)
       04          
04827F CD 20 1F 04 0054*       call vdu_plot_bmp
048283             0055*   ; bump x-coords the width of one tile and save it
048283 2A 0B 82 04 0056*       ld hl,(tiles_x_plot)
048287 01 10 00 00 0057*       ld bc,16
04828B 09          0058*       add hl,bc
04828C 22 0B 82 04 0059*       ld (tiles_x_plot),hl
048290             0060*   ; prepare to loop to next column
048290 E1          0061*       pop hl ; get back pointer to tile def
048291 23          0062*       inc hl ; bump it to the next column
048292 C1          0063*       pop bc ; snag our loop counter
048293 10 D4       0064*       djnz @loop
048295             0065*   ; increment tiles plotting y-coordinate
048295             0066*   ; (we use ix b/c we want to preserve hl for the next step)
048295 DD 2A 0F 82 0067*       ld ix,(tiles_y_plot)
       04          
04829A 11 01 00 00 0068*       ld de,1
04829E DD 19       0069*       add ix,de
0482A0 DD 22 0F 82 0070*       ld (tiles_y_plot),ix
       04          
0482A5 DD 7D       0071*       ld a,ixl
0482A7 FE 01       0072*       cp 1
0482A9 C0          0073*       ret nz
0482AA             0074*   ; do active tiles
0482AA E5          0075*       push hl ; save pointer to next row tile def
0482AB CD CE 82 04 0076*       call do_active_tiles
0482AF E1          0077*       pop hl ; get back pointer to next row tile def
0482B0             0078*   ; time to bump tiles_row_defs to next row
0482B0             0079*   ; (hl was already there at the end of the loop)
0482B0 22 00 82 04 0080*       ld (tiles_row_defs),hl
0482B4             0081*   ; reset coords to plot next row of tiles
0482B4 21 00 00 00 0082*       ld hl,0
0482B8 22 0B 82 04 0083*       ld (tiles_x_plot),hl
0482BC 21 F1 FF FF 0084*       ld hl,-15
0482C0 22 0F 82 04 0085*       ld (tiles_y_plot),hl
0482C4             0086*   ; decrement tiles row counter
0482C4 21 03 82 04 0087*       ld hl,tiles_row
0482C8 35          0088*       dec (hl)
0482C9 C0          0089*       ret nz
0482CA             0090*   @inc_level:
0482CA C3 6C 61 04 0091*       jp next_level
0482CE             0092*   ; end tiles_plot
0482CE             0093*   
0482CE             0094*   do_active_tiles:
0482CE             0095*   ; initialize tiles loop
0482CE 21 00 00 00 0096*       ld hl,0 ; init plotting x-coordinate
0482D2 22 0B 82 04 0097*       ld (tiles_x_plot),hl
0482D6 2A 00 82 04 0098*       ld hl,(tiles_row_defs)
0482DA 3A 06 82 04 0099*       ld a,(tiles_cols)
0482DE 47          0100*       ld b,a ; column loop counter
0482DF             0101*   @loop:
0482DF C5          0102*       push bc ; save the loop counter
0482E0             0103*   ; read the tile defintion for the current column
0482E0 7E          0104*       ld a,(hl) ; a has tile definition
0482E1 E5          0105*       push hl ; save pointer to tile definition
0482E2 B7          0106*       or a ; check for null tile
0482E3 CA FF 82 04 0107*       jp z,@next_tile ; skip to next tile if null
0482E7 FE 11       0108*       cp 17 ; carry reset if active tile
0482E9 D2 FF 82 04 0109*       jp nc,@next_tile ; skip to next tile if not active
0482ED             0110*   ; call the tile activation routine
0482ED 21 50 83 04 0111*       ld hl,tile_activation_routines
0482F1 16 03       0112*       ld d,3 ; three bytes per table entry
0482F3 5F          0113*       ld e,a ; a is the tile type
0482F4 ED 5C       0114*       mlt de ; de is now the offset to the table entry
0482F6 19          0115*       add hl,de ; hl is now the address of the table entry
0482F7 ED 27       0116*       ld hl,(hl) ; hl is now the activation routine address
0482F9             0117*       CALL_HL ; call the activation routine
0482F9 01 FF 82 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0482FD C5          0002*M1     push bc ; which constitutes the return address
0482FE E9          0003*M1     jp (hl) ; Jump to the address in HL
0482FF             0118*   @next_tile:
0482FF             0119*   ; bump x-coords the width of one tile and save it
0482FF 2A 0B 82 04 0120*       ld hl,(tiles_x_plot)
048303 01 10 00 00 0121*       ld bc,16
048307 09          0122*       add hl,bc
048308 22 0B 82 04 0123*       ld (tiles_x_plot),hl
04830C             0124*   ; prepare to loop to next column
04830C E1          0125*       pop hl ; get back pointer to tile def
04830D 23          0126*       inc hl ; bump it to the next column
04830E C1          0127*       pop bc ; snag our loop counter
04830F 10 CE       0128*       djnz @loop
048311 C9          0129*       ret ; done
048312             0130*   ; end do_active_tiles
048312             0131*   
048312 FF FF FF    0132*   bg_y_plot: dl -1
048315 00 04 00    0133*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
048318             0134*   
048318             0135*   bg_plot: ; TODO: implement this
048318             0136*   ; load current bg tile bufferId as default
048318 2A 15 83 04 0137*       ld hl,(bg_bufferId)
04831C             0138*   ; check whether it is time for a new background tile
04831C 3A 12 83 04 0139*       ld a,(bg_y_plot)
048320 3C          0140*       inc a
048321 32 12 83 04 0141*       ld (bg_y_plot),a
048325 C2 3D 83 04 0142*       jp nz,@F ; not time for a new tile so draw current one
048329             0143*   ; load the next background tile
048329 21 00 04 00 0144*       ld hl,BUF_BG_STARS_0
04832D CD AE 09 04 0145*       call rand_8
048331 E6 07       0146*       and %0000111
048333 85          0147*       add a,l
048334 6F          0148*       ld l,a
048335 3E 00       0149*       ld a,0
048337 8C          0150*       adc a,h
048338 67          0151*       ld h,a
048339 22 15 83 04 0152*       ld (bg_bufferId),hl
04833D             0153*   @@:
04833D CD 38 1B 04 0154*       call vdu_buff_select
048341 01 00 00 00 0155*       ld bc,0
048345 ED 5B 12 83 0156*       ld de,(bg_y_plot)
       04          
04834A 13          0157*       inc de
04834B CD 20 1F 04 0158*       call vdu_plot_bmp
04834F C9          0159*       ret
048350             0160*   ; end bg_plot
048350             0067        include "tiles_active.inc"
048350             0001*   
048350             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
048350             0003*   tile_pad_small: equ 1
048350             0004*   tile_pad_med: equ 2
048350             0005*   tile_pad_large: equ 3
048350             0006*   tile_pad_huge: equ 4
048350             0007*   tile_turret_fireball: equ 5
048350             0008*   tile_laser_turret: equ 6
048350             0009*   tile_twin_laser_turret: equ 7
048350             0010*   tile_gatling_turret: equ 8
048350             0011*   tile_electrode_r: equ 9
048350             0012*   tile_electrode_u: equ 10
048350             0013*   tile_piston_r: equ 11
048350             0014*   tile_piston_u: equ 12
048350             0015*   tile_spark_r: equ 13
048350             0016*   tile_spark_u: equ 14
048350             0017*   tile_flame_r: equ 15
048350             0018*   tile_flame_u: equ 16
048350             0019*   
048350             0020*   active_tile_timer: equ 24 ; 2/10ths of a second
048350             0021*   tile_activation_routines:
048350 83 83 04    0022*       dl activate_null_tile ; dummy spacer since tiled is 1-based
048353 13 85 04    0023*       dl activate_pad_small
048356 83 83 04    0024*       dl activate_null_tile  ;  activate_pad_med
048359 83 83 04    0025*       dl activate_null_tile  ;  activate_pad_large
04835C 83 83 04    0026*       dl activate_null_tile  ;  activate_pad_huge
04835F 13 86 04    0027*       dl activate_turret_fireball
048362 83 83 04    0028*       dl activate_null_tile  ;  activate_laser_turret
048365 83 83 04    0029*       dl activate_null_tile  ;  activate_twin_laser_turret
048368 83 83 04    0030*       dl activate_null_tile  ;  activate_gatling_turret
04836B 83 83 04    0031*       dl activate_null_tile  ;  activate_electrode_r
04836E 83 83 04    0032*       dl activate_null_tile  ;  activate_electrode_u
048371 83 83 04    0033*       dl activate_null_tile  ;  activate_piston_r
048374 83 83 04    0034*       dl activate_null_tile  ;  activate_piston_u
048377 83 83 04    0035*       dl activate_null_tile  ;  activate_spark_r
04837A 83 83 04    0036*       dl activate_null_tile  ;  activate_spark_u
04837D 83 83 04    0037*       dl activate_null_tile  ;  activate_flame_r
048380 83 83 04    0038*       dl activate_null_tile  ;  activate_flame_u
048383             0039*   ; end tile_activation_routines
048383             0040*   
048383             0041*   activate_null_tile:
048383 C9          0042*       ret ; dummy routine, do nothing
048384             0043*   move_active_tile:
048384             0044*   ; y-axis movement
048384 FD 27 04    0045*       ld hl,(iy+tile_y)
048387 FD 17 0A    0046*       ld de,(iy+tile_yvel)
04838A 19          0047*       add hl,de
04838B FD 2F 04    0048*       ld (iy+tile_y),hl
04838E             0049*   ; detect screen edge collisions
04838E             0050*   ; y-axis bottom is all we need to test
04838E 11 00 80 FE 0051*       ld de,-tile_bottom*256
048392 ED 5A       0052*       adc hl,de
048394 F8          0053*       ret m ; still on screen so do nothing further
048395 AF          0054*       xor a ; signal caller that tile has scrolled off screen
048396 C9          0055*       ret
048397             0056*   ; end move_active_tile
048397             0057*   
048397             0058*   move_tiles:
048397             0059*   ; initialize pointers and loop counter
048397 FD 21 00 7C 0060*       ld iy,tile_stack ; set iy to first record in table
       04          
04839C             0061*   @move_loop:
04839C FD 22 03 7F 0062*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
0483A1 FD 7E 02    0063*       ld a,(iy+2)
0483A4 B7          0064*       or a ; will be zero if at end of stack
0483A5 C8          0065*       ret z ; end of stack so we're done
0483A6             0066*   ; point iy to tile record
0483A6 FD 37 00    0067*       ld iy,(iy) ; iy points to the current tile record
0483A9 FD 22 06 7F 0068*       ld (tile_table_pointer),iy ; update table pointer
       04          
0483AE             0069*   ; check top bit of tile_type to see if tile is just spawned
0483AE FD CB 16 7E 0070*       bit 7,(iy+tile_type)
0483B2 C2 D0 83 04 0071*       jp nz,@just_spawned ; if just spawned, skip to next record
0483B6             0072*   ; check sprite_alive bit to see if tile is active
0483B6 FD CB 1D 76 0073*       bit sprite_alive,(iy+sprite_collisions)
0483BA C8          0074*       ret z ; end of stack so we're done
0483BB             0075*   ; otherwise we prepare to move the tile
0483BB FD 27 1A    0076*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
0483BE             0077*       CALL_HL
0483BE 01 C4 83 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0483C2 C5          0002*M1     push bc ; which constitutes the return address
0483C3 E9          0003*M1     jp (hl) ; Jump to the address in HL
0483C4             0078*    ; get back stack pointer and loop
0483C4             0079*   @next_record:
0483C4 FD 2A 03 7F 0080*       ld iy,(tile_stack_pointer)
       04          
0483C9 ED 33 03    0081*       lea iy,iy+3 ; next tile stack record
0483CC C3 9C 83 04 0082*       jp @move_loop ; loop until we've checked all the records
0483D0             0083*   @just_spawned:
0483D0 FD CB 16 BE 0084*       res 7,(iy+tile_type) ; clear just spawned flag
0483D4 C3 C4 83 04 0085*       jp @next_record
0483D8             0086*   ; end move_tiles
0483D8             0087*   
0483D8             0088*   ; this routine vanquishes the tile tile
0483D8             0089*   ; and replaces it with an animated explosion
0483D8             0090*   ; destroys: everything except index registers
0483D8             0091*   ; returns: a=-1 to indicate tile died, and an incandescent ball of debris and gas
0483D8             0092*   tile_kill:
0483D8 FD 2A 03 7F 0093*       ld iy,(tile_stack_pointer)
       04          
0483DD 2A 00 72 04 0094*       ld hl,(player_score)
0483E1 01 00 00 00 0095*       ld bc,0 ; clear bcu
0483E5 FD 4E 26    0096*       ld c,(iy+tile_points)
0483E8 09          0097*       add hl,bc
0483E9 22 00 72 04 0098*       ld (player_score),hl
0483ED C3 38 2A 04 0099*       jp tile_spawn_explosion
0483F1             0100*   ; end tile_kill
0483F1             0101*   
0483F1             0102*   draw_active_tile:
0483F1 FD 27 17    0103*       ld hl,(iy+tile_base_bufferId)
0483F4 FD 7E 28    0104*       ld a,(iy+tile_frame)
0483F7 85          0105*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
0483F8 6F          0106*       ld l,a
0483F9 3E 00       0107*       ld a,0 ; preserve carry
0483FB 8C          0108*       adc a,h
0483FC 67          0109*       ld h,a
0483FD CD 38 1B 04 0110*       call vdu_buff_select ; buffer id of animation frame
048401 FD 07 01    0111*       ld bc,(iy+tile_x)
048404 FD 17 04    0112*       ld de,(iy+tile_y)
048407 CD 3C 1F 04 0113*       call vdu_plot_bmp168
04840B C9          0114*       ret
04840C             0115*   ; end draw_active_tile
04840C             0116*   
04840C             0117*   ; create a new sprite at the same location as the current tile
04840C             0118*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
04840C             0119*   ;         ix = pointer to sprite group, b = number of records in sprite group
04840C             0120*   spawn_sprite_from_tile:
04840C E5          0121*       push hl ; back up pointer to new sprite defaults
04840D CD 10 87 04 0122*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048411 E1          0123*       pop hl ; restore pointer to new sprite defaults
048412 D0          0124*       ret nc ; no carry means no free sprite slots, so we go home
048413             0125*   ; copy default settings to new sprite
048413 DD E5       0126*       push ix ; back up pointer to new sprite record
048415 ED 32 16    0127*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048418 DD E5       0128*       push ix ; pointer to default sprite settings
04841A D1          0129*       pop de ; address to copy to
04841B 01 2A 00 00 0130*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
04841F ED B0       0131*       ldir ; copies defaults to new sprite record
048421 DD E1       0132*       pop ix ; restore pointer to new sprite record
048423             0133*   ; copy sprite position, velocity and orientation from existing tile
048423 FD 2A 06 7F 0134*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
048428 FD 27 01    0135*       ld hl,(iy+tile_x)
04842B DD 2F 01    0136*       ld (ix+sprite_x),hl
04842E FD 27 04    0137*       ld hl,(iy+tile_y)
048431 DD 2F 04    0138*       ld (ix+sprite_y),hl
048434             0139*   ; return to caller
048434 DD CB 16 FE 0140*       set 7,(ix+sprite_type) ; set just spawned flag
048438 DD CB 1D F6 0141*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
04843C 37          0142*       scf ; set carry flag to indicate success
04843D C9          0143*       ret
04843E             0144*   ; end spawn_sprite_from_tile
04843E             0068        include "tile_pad_small.inc"
04843E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
048500             0002*   pad_small_defaults:
048500 01          0003*       db tile_pad_small       ; type
048501 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
048504 22 85 04    0005*       dl move_pad_small       ; move_program
048507 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
048508 10          0007*       db 16                   ; dim_x
048509 10          0008*       db 16                   ; dim_y
04850A 01          0009*       db 1                    ; num_orientations
04850B 01          0010*       db 1                    ; num_animations
04850C 00          0011*       db 0                    ; animation
04850D 00          0012*       db 0                    ; animation_timer
04850E 18          0013*       db 24                   ; move_timer
04850F 00          0014*       db 0                    ; move_step
048510 05          0015*       db 5                    ; points
048511 00          0016*       db 0                    ; shield_damage
048512 00          0017*       db 0                    ; frame
048513             0018*   
048513             0019*   activate_pad_small:
048513 21 00 85 04 0020*       ld hl,pad_small_defaults
048517             0021*   ; get next available active tile id
048517 CD BC 7F 04 0022*       call spawn_active_tile
04851B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04851C             0024*   ; other specific initialization
04851C 3E 40       0025*       ld a,64
04851E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048521 C9          0027*       ret
048522             0028*   ; end activate_pad_small
048522             0029*   
048522             0030*   move_pad_small:
048522 CD 84 83 04 0031*       call move_active_tile
048526 CA 83 7F 04 0032*       jp z,table_deactivate_tile
04852A CD E1 26 04 0033*       call check_enemy_collision_laser
04852E CA 46 85 04 0034*       jp z,kill_pad_small
048532             0035*   ; check whether it is time to spawn a seeker
048532 FD 35 24    0036*       dec (iy+tile_move_timer)
048535 C0          0037*       ret nz
048536             0038*   ; spwan a seeker
048536 CD 14 29 04 0039*       call enemy_spawn_seeker
04853A             0040*       ; fall through to reset move timer
04853A             0041*   pad_small_reset_move_timer:
04853A CD AE 09 04 0042*       call rand_8     ; snag a random number
04853E E6 1F       0043*       and %00011111   ; keep only 5 lowest bits (max 31)
048540 C6 40       0044*       add a,64 ; range is now 64-127
048542 FD 77 24    0045*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048545 C9          0046*       ret
048546             0047*   
048546             0048*   kill_pad_small:
048546 C3 D8 83 04 0049*       jp tile_kill
04854A             0050*   ; end move_pad_small
04854A             0069        include "tile_turret_fireball.inc"
04854A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
048600             0002*   turret_fireball_defaults:
048600 02          0003*       db enemy_ground         ; type
048601 30 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
048604 22 86 04    0005*       dl move_turret_fireball ; move_program
048607 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
048608 10          0007*       db 16                   ; dim_x
048609 10          0008*       db 16                   ; dim_y
04860A 20          0009*       db 32                   ; num_orientations
04860B 01          0010*       db 1                    ; num_animations
04860C 00          0011*       db 0                    ; animation
04860D 00          0012*       db 0                    ; animation_timer
04860E 18          0013*       db 24                   ; move_timer
04860F 00          0014*       db 0                    ; move_step
048610 05          0015*       db 5                    ; points
048611 00          0016*       db 0                    ; shield_damage
048612 00          0017*       db 0                    ; frame
048613             0018*   
048613             0019*   activate_turret_fireball:
048613 21 00 86 04 0020*       ld hl,turret_fireball_defaults
048617             0021*   ; get next available active tile id
048617 CD BC 7F 04 0022*       call spawn_active_tile
04861B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04861C             0024*   ; other specific initialization
04861C 3E 40       0025*       ld a,64
04861E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048621 C9          0027*       ret
048622             0028*   ; end activate_turret_fireball
048622             0029*   
048622             0030*   move_turret_fireball:
048622 CD 84 83 04 0031*       call move_active_tile
048626 CA 83 7F 04 0032*       jp z,table_deactivate_tile
04862A CD E1 26 04 0033*       call check_enemy_collision_laser
04862E CA 61 86 04 0034*       jp z,kill_turret_fireball
048632             0035*   ; target player
048632 CD 2B 7B 04 0036*       call tile_orientation_to_player
048636 21 00 04 00 0037*       ld hl,speed_fireball
04863A 22 58 7B 04 0038*       ld (Vp),hl ; param for targeting_computer
04863E CD 70 7B 04 0039*       call targeting_computer
048642 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
048645 CD 14 80 04 0041*       call tile_frame_heading
048649 CD F1 83 04 0042*       call draw_active_tile
04864D             0043*   ; check whether it is time to spawn a fireball
04864D FD 35 24    0044*       dec (iy+tile_move_timer)
048650 C0          0045*       ret nz
048651             0046*   ; spwan a fireball
048651 CD 13 28 04 0047*       call enemy_spawn_fireball
048655             0048*       ; fall through to reset move timer
048655             0049*   turret_fireball_reset_move_timer:
048655 CD AE 09 04 0050*       call rand_8     ; snag a random number
048659 E6 1F       0051*       and %00011111   ; keep only 5 lowest bits (max 31)
04865B C6 18       0052*       add a,24 ; range is now 24-55
04865D FD 77 24    0053*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048660 C9          0054*       ret
048661             0055*   
048661             0056*   kill_turret_fireball:
048661 C3 D8 83 04 0057*       jp tile_kill
048665             0058*   ; end move_turret_fireball
048665             0070        include "sprites.inc"
048665             0001*   ; sprite_type
048665             0002*   enemy_dead: equ 0
048665             0003*   enemy_air: equ 1
048665             0004*   enemy_ground: equ 2
048665             0005*   enemy_projectile: equ 3
048665             0006*   explosion: equ 4
048665             0007*   player: equ 5
048665             0008*   player_air: equ 6
048665             0009*   player_ground: equ 7
048665             0010*   
048665             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
048665             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
048665             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
048665             0014*   ; sprite state variables
048665             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
048665             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
048665             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
048665             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
048665             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
048665             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
048665             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
048665             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
048665             0023*   ; sprite definition variables
048665             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
048665             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
048665             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
048665             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
048665             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
048665             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
048665             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
048665             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
048665             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
048665             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
048665             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
048665             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
048665             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
048665             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
048665             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
048665             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
048665             0040*   
048665             0041*   ; ###### SPRITE TABLE VARIABLES ######
048665             0042*   ; maximum number of sprites
048665             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
048665             0044*   ; table_total_bytes: equ table_end-table_start_variables
048665             0045*   
048665             0046*   ; pointer to top address of current record, initialized to table_base
048665 5E 8E 04    0047*   table_pointer: dl table_base
048668             0048*   
048668             0049*   ; flag indicating collision with screen edge
048668             0050*   ; uses orientation codes to specify which edge(s)
048668 00          0051*   sprite_screen_edge: db #00
048669             0052*   
048669             0053*   ; origin_top: equ 48
048669             0054*   origin_top: equ 0
048669             0055*   origin_left: equ 128
048669             0056*   field_top: equ 0
048669             0057*   field_bottom: equ 383-origin_top
048669             0058*   field_left: equ 0
048669             0059*   field_right: equ 255
048669             0060*   sprite_top: equ field_top + 0
048669             0061*   sprite_bottom: equ field_bottom-16
048669             0062*   sprite_left: equ field_left
048669             0063*   sprite_right: equ field_right-16
048669             0064*   
048669             0065*   tile_bottom: equ 384
048669             0066*   
048669             0067*   ; ######### COLLISION SPRITE PARAMETERS ##########
048669             0068*   ; integer coordinates are all that are needed for collision calculations
048669 00          0069*   collision_x: db 0x00
04866A 00          0070*   collision_y: db 0x00
04866B 00          0071*   collision_dim_x: db 0x00
04866C 00          0072*   collision_dim_y: db 0x00
04866D             0073*   
04866D             0074*   ; scratch variables
04866D 00          0075*   x: db 0x00 ; 8-bit signed integer
04866E 00          0076*   y: db 0x00 ; 8-bit signed integer
04866F 00 00 00    0077*   x0: dl 0x000000 ; 16.8 signed fixed place
048672 00 00 00    0078*   y0: dl 0x000000 ; 16.8 signed fixed place
048675 00 00 00    0079*   incx1: dl 0x000000 ; 16.8 signed fixed place
048678 00 00 00    0080*   incy1: dl 0x000000 ; 16.8 signed fixed place
04867B 00 00 00    0081*   incx2: dl 0x000000 ; 16.8 signed fixed place
04867E 00 00 00    0082*   incy2: dl 0x000000 ; 16.8 signed fixed place
048681             0083*   
048681             0084*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
048681 00 00 00    0085*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
048684 00 00 00    0086*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
048687 00 00 00    0087*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04868A             0088*   
04868A             0089*   table_init:
04868A             0090*   ; clear the sprite table
04868A AF          0091*       xor a ; write zeroes to sprite table
04868B 21 5E 8E 04 0092*       ld hl,table_base ; address to copy from
04868F 01 00 05 00 0093*       ld bc,table_end-table_base ; number of bytes to clear
048693 CD 31 07 04 0094*       call clear_mem
048697             0095*   ; write sprite ids
048697 DD 21 5E 8E 0096*       ld ix,table_base
       04          
04869C AF          0097*       xor a ; sprite id
04869D 0E 00       0098*       ld c,0 ; sprite type
04869F 06 14       0099*       ld b,table_num_records ; loop counter
0486A1             0100*   @loop:
0486A1 DD 77 00    0101*       ld (ix+sprite_id),a
0486A4 DD 71 16    0102*       ld (ix+sprite_type),c
0486A7 ED 32 40    0103*       lea ix,ix+table_record_size
0486AA 3C          0104*       inc a
0486AB 10 F4       0105*       djnz @loop
0486AD C9          0106*       ret
0486AE             0107*   ; end table_init
0486AE             0108*   
0486AE             0109*   ; deactivate the sprite with the given id
0486AE             0110*   ; inputs: iy set to sprite record
0486AE             0111*   ; outputs: nothing
0486AE             0112*   ; destroys: a,hl
0486AE             0113*   table_deactivate_sprite:
0486AE FD 7E 00    0114*       ld a,(iy+sprite_id) ; get spriteId
0486B1 CD 00 20 04 0115*       call vdu_sprite_select ; select sprite
0486B5 CD 84 20 04 0116*       call vdu_sprite_hide
0486B9 FD CB 1D B6 0117*       res sprite_alive,(iy+sprite_collisions)
0486BD FD CB 1D BE 0118*       res sprite_just_died,(iy+sprite_collisions)
0486C1 C9          0119*       ret
0486C2             0120*   ; end table_deactivate_sprite
0486C2             0121*   
0486C2             0122*   sprites_init:
0486C2             0123*   ; initialize sprites
0486C2 CD 34 21 04 0124*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0486C6 AF          0125*   	xor a ; loop counter / sprite id
0486C7             0126*   @sprite_loop:
0486C7 F5          0127*   	push af ; save loop counter / sprite id
0486C8 CD 00 20 04 0128*   	call vdu_sprite_select
0486CC 21 00 01 00 0129*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0486D0 CD 55 21 04 0130*   	call vdu_sprite_add_buff
0486D4 F1          0131*   	pop af ; restore loop counter / sprite id
0486D5 3C          0132*       inc a
0486D6 FE 14       0133*       cp table_num_records
0486D8 C2 C7 86 04 0134*       jp nz,@sprite_loop
0486DC CD 34 20 04 0135*   	call vdu_sprite_activate
0486E0             0136*   
0486E0             0137*   ; define player sprite
0486E0 3A 5E 8F 04 0138*   	ld a,(player_begin+sprite_id)
0486E4 CD 00 20 04 0139*   	call vdu_sprite_select
0486E8 CD 13 20 04 0140*   	call vdu_sprite_clear_frames
0486EC 21 2B 01 00 0141*   	ld hl,BUF_SHIP_0L
0486F0 01 03 00 00 0142*   	ld bc,3 ; three bitmaps for player ship
0486F4             0143*   @sprite_player_loop:
0486F4 C5          0144*   	push bc
0486F5 E5          0145*   	push hl
0486F6 CD 55 21 04 0146*   	call vdu_sprite_add_buff
0486FA E1          0147*   	pop hl
0486FB 23          0148*   	inc hl
0486FC C1          0149*   	pop bc
0486FD 10 F5       0150*   	djnz @sprite_player_loop
0486FF             0151*   
0486FF             0152*   ; define player weapon sprites
0486FF CD AE 78 04 0153*       call init_player_laser
048703             0154*   
048703             0155*   ; define enemy sprites
048703 CD CD 29 04 0156*       call init_enemy_seekers
048707 CD 75 28 04 0157*       call init_enemy_fireballs
04870B             0158*   
04870B             0159*   ; define explosion sprites
04870B CD 9C 2A 04 0160*       call init_explosions
04870F C9          0161*       ret
048710             0162*   ; end sprites_init
048710             0163*   
048710             0164*   ; gets the next available sprite id for a particular sprite group
048710             0165*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
048710             0166*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
048710             0167*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
048710             0168*   ; destroys: a,b,c,hl,ix
048710             0169*   table_get_next_id:
048710             0170*   @loop:
048710 DD CB 1D 76 0171*       bit sprite_alive,(ix+sprite_collisions)
048714 28 07       0172*       jr z,@found
048716 ED 32 40    0173*       lea ix,ix+table_record_size
048719 10 F5       0174*       djnz @loop
04871B             0175*   @notfound:
04871B AF          0176*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04871C C9          0177*       ret
04871D             0178*   @found:
04871D             0179*   ; return sprite id
04871D DD 7E 00    0180*       ld a,(ix+sprite_id)
048720 37          0181*       scf ; sets carry flag indicating we found a free sprite
048721 C9          0182*       ret ; done
048722             0183*   ; end table_get_next_id
048722             0184*   
048722             0185*   ; create a new sprite at the same location as an existing sprite
048722             0186*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
048722             0187*   ;         ix = pointer to sprite group, b = number of records in sprite group
048722             0188*   spawn_sprite_from_sprite:
048722 E5          0189*       push hl ; back up pointer to new sprite defaults
048723 CD 10 87 04 0190*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048727 E1          0191*       pop hl ; restore pointer to new sprite defaults
048728 D0          0192*       ret nc ; no carry means no free sprite slots, so we go home
048729             0193*   ; copy default settings to new sprite
048729 DD E5       0194*       push ix ; back up pointer to new sprite record
04872B ED 32 16    0195*       lea ix,ix+sprite_definitions ; bump pointer to copy to
04872E DD E5       0196*       push ix ; pointer to default sprite settings
048730 D1          0197*       pop de ; address to copy to
048731 01 2A 00 00 0198*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
048735 ED B0       0199*       ldir ; copies defaults to new sprite record
048737 DD E1       0200*       pop ix ; restore pointer to new sprite record
048739             0201*   ; copy sprite position from existing sprite
048739 FD 2A 65 86 0202*       ld iy,(table_pointer) ; get existing sprite record
       04          
04873E FD 27 01    0203*       ld hl,(iy+sprite_x)
048741 DD 2F 01    0204*       ld (ix+sprite_x),hl
048744 FD 27 04    0205*       ld hl,(iy+sprite_y)
048747 DD 2F 04    0206*       ld (ix+sprite_y),hl
04874A             0207*   ; return to caller
04874A DD CB 16 FE 0208*       set 7,(ix+sprite_type) ; set just spawned flag
04874E DD CB 1D F6 0209*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048752 37          0210*       scf ; set carry flag to indicate success
048753 C9          0211*       ret
048754             0212*   ; end spawn_sprite_from_sprite
048754             0213*   
048754             0214*   ; call the behavior subroutines for a specified sprite group
048754             0215*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
048754             0216*   move_sprite_group:
048754 C5          0217*       push bc ; backup loop counter
048755 FD E5       0218*       push iy ; backup table pointer
048757             0219*   @move_loop:
048757 FD 22 65 86 0220*       ld (table_pointer),iy ; update table pointer
       04          
04875C C5          0221*       push bc ; backup loop counter
04875D             0222*   ; check top bit of sprite_type to see if sprite is just spawned
04875D FD CB 16 7E 0223*       bit 7,(iy+sprite_type)
048761 C2 96 87 04 0224*       jp nz,@next_record ; if just spawned, skip to next record
048765             0225*   ; check sprite_just_died bit
048765 FD CB 1D 7E 0226*       bit sprite_just_died,(iy+sprite_collisions)
048769 C2 CD 87 04 0227*       jp nz,@sprite_died ; if just died, deactivate sprite
04876D             0228*   ; check sprite_alive bit to see if sprite is active
04876D FD CB 1D 76 0229*       bit sprite_alive,(iy+sprite_collisions)
048771 CA 96 87 04 0230*       jp z,@next_record ; ... skip to next record
048775             0231*   ; otherwise move the sprite
048775 FD 27 1A    0232*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
048778             0233*       CALL_HL ; run the behavior subroutine
048778 01 7E 87 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04877C C5          0002*M1     push bc ; which constitutes the return address
04877D E9          0003*M1     jp (hl) ; Jump to the address in HL
04877E FD 7E 00    0234*       ld a,(iy+sprite_id) ; get spriteId
048781 CD 00 20 04 0235*       call vdu_sprite_select ; select sprite
048785 FD 7E 28    0236*       ld a,(iy+sprite_frame)
048788 CD 63 20 04 0237*       call vdu_sprite_select_frame
04878C FD 07 01    0238*       ld bc,(iy+sprite_x)
04878F FD 17 04    0239*       ld de,(iy+sprite_y)
048792 CD CC 20 04 0240*       call vdu_sprite_move_abs168
048796             0241*   ; fall through to @next_record
048796             0242*   @next_record:
048796 ED 33 40    0243*       lea iy,iy+table_record_size
048799 AF          0244*       xor a ; clears carry flag
04879A 32 68 86 04 0245*       ld (sprite_screen_edge),a ; clear screen edge collision flag
04879E C1          0246*       pop bc ; get back our loop counter
04879F 10 B6       0247*       djnz @move_loop ; loop until we've checked all the records
0487A1             0248*   ; reset all just spawned flags
0487A1 FD E1       0249*       pop iy ; get back table pointer
0487A3 C1          0250*       pop bc ; get back loop counter
0487A4             0251*   @reset_just_spawned:
0487A4 C5          0252*       push bc ; back up loop counter
0487A5 FD CB 16 7E 0253*       bit 7,(iy+sprite_type) ; check if just spawned
0487A9 CA C6 87 04 0254*       jp z,@F
0487AD FD CB 16 BE 0255*       res 7,(iy+sprite_type) ; clear just spawned flag
0487B1 FD 7E 00    0256*       ld a,(iy+sprite_id)
0487B4 CD 00 20 04 0257*       call vdu_sprite_select
0487B8 FD 07 01    0258*       ld bc,(iy+sprite_x)
0487BB FD 17 04    0259*       ld de,(iy+sprite_y)
0487BE CD CC 20 04 0260*       call vdu_sprite_move_abs168
0487C2 CD 76 20 04 0261*       call vdu_sprite_show
0487C6             0262*   @@:
0487C6 ED 33 40    0263*       lea iy,iy+table_record_size
0487C9 C1          0264*       pop bc ; get back loop counter
0487CA 10 D8       0265*       djnz @reset_just_spawned
0487CC C9          0266*       ret
0487CD             0267*   @sprite_died:
0487CD CD AE 86 04 0268*       call table_deactivate_sprite
0487D1 C3 96 87 04 0269*       jp @next_record
0487D5             0270*   ; end move_sprite_group
0487D5             0271*   
0487D5             0272*   ; compute a sprite's new position based on its component x,y velocities
0487D5             0273*   ; with screen boundary checking and update its sprite table record accordingly
0487D5             0274*   ; inputs: table_pointer set to sprite record
0487D5             0275*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
0487D5             0276*   ; destroys: everything
0487D5             0277*   ; note: actual rendering of sprite must be handled by caller
0487D5             0278*   move_sprite:
0487D5 FD 2A 65 86 0279*       ld iy,(table_pointer)
       04          
0487DA             0280*   ; x-axis movement
0487DA FD 27 01    0281*       ld hl,(iy+sprite_x)
0487DD FD 17 07    0282*       ld de,(iy+sprite_xvel)
0487E0 19          0283*       add hl,de
0487E1 FD 2F 01    0284*       ld (iy+sprite_x),hl
0487E4             0285*   ; y-axis movement
0487E4 FD 27 04    0286*       ld hl,(iy+sprite_y)
0487E7 FD 17 0A    0287*       ld de,(iy+sprite_yvel)
0487EA 19          0288*       add hl,de
0487EB FD 2F 04    0289*       ld (iy+sprite_y),hl
0487EE             0290*   ; detect screen edge collisions
0487EE AF          0291*       xor a ; reset screen edge collision flag and clear carry
0487EF 32 68 86 04 0292*       ld (sprite_screen_edge),a
0487F3             0293*   ; y-axis first since we already have it in hl
0487F3 11 00 00 00 0294*       ld de,-sprite_top*256
0487F7 ED 5A       0295*       adc hl,de
0487F9 FA 23 88 04 0296*       jp m,@top
0487FD ED 52       0297*       sbc hl,de ; hl back to original value
0487FF 11 00 91 FE 0298*       ld de,-sprite_bottom*256
048803 ED 5A       0299*       adc hl,de
048805 F2 2D 88 04 0300*       jp p,@bottom
048809             0301*   @xaxis:
048809 FD 27 01    0302*       ld hl,(iy+sprite_x)
04880C 11 00 00 00 0303*       ld de,-sprite_left*256
048810 ED 5A       0304*       adc hl,de
048812 FA 48 88 04 0305*       jp m,@left
048816 ED 52       0306*       sbc hl,de ; hl back to original value
048818 11 00 11 FF 0307*       ld de,-sprite_right*256
04881C ED 5A       0308*       adc hl,de
04881E F2 56 88 04 0309*       jp p,@right
048822             0310*   ; no edge collisions so go home
048822 C9          0311*       ret
048823             0312*   @top:
048823 3E 08       0313*       ld a,collide_top
048825 21 00 00 00 0314*       ld hl,sprite_top*256
048829 C3 33 88 04 0315*       jp @collide_y
04882D             0316*   @bottom:
04882D 3E 04       0317*       ld a,collide_bottom
04882F 21 00 6F 01 0318*       ld hl,sprite_bottom*256
048833             0319*   @collide_y:
048833 32 68 86 04 0320*       ld (sprite_screen_edge),a
048837 FD 2F 04    0321*       ld (iy+sprite_y),hl
04883A             0322*   ; reverse y-axis velocity
04883A FD 27 0A    0323*       ld hl,(iy+sprite_yvel)
04883D CD 16 09 04 0324*       call neg_hlu
048841 FD 2F 0A    0325*       ld (iy+sprite_yvel),hl
048844             0326*   ; go check for x-axis collisions
048844 C3 09 88 04 0327*       jp @xaxis
048848             0328*   @left:
048848 3A 68 86 04 0329*       ld a,(sprite_screen_edge)
04884C F6 02       0330*       or a,collide_left
04884E 21 00 00 00 0331*       ld hl,sprite_left*256
048852 C3 60 88 04 0332*       jp @collide_x
048856             0333*   @right:
048856 3A 68 86 04 0334*       ld a,(sprite_screen_edge)
04885A F6 01       0335*       or a,collide_right
04885C 21 00 EF 00 0336*       ld hl,sprite_right*256
048860             0337*   @collide_x:
048860 32 68 86 04 0338*       ld (sprite_screen_edge),a
048864 FD 2F 01    0339*       ld (iy+sprite_x),hl
048867             0340*   ; reverse x-axis velocity
048867 FD 27 07    0341*       ld hl,(iy+sprite_xvel)
04886A CD 16 09 04 0342*       call neg_hlu
04886E FD 2F 07    0343*       ld (iy+sprite_xvel),hl
048871             0344*   ; final collision flag to a and return
048871 3A 68 86 04 0345*       ld a,(sprite_screen_edge)
048875 C9          0346*       ret
048876             0347*   ; end move_sprite
048876             0348*   
048876             0349*   sprite_compute_velocities:
048876 FD 27 10    0350*       ld hl,(iy+sprite_heading)
048879 FD 17 0D    0351*       ld de,(iy+sprite_vel)
04887C CD A0 0B 04 0352*       call polar_to_cartesian
048880 FD 2A 65 86 0353*       ld iy,(table_pointer)
       04          
048885 FD 0F 07    0354*       ld (iy+sprite_xvel),bc ; save x-velocity component
048888 FD 1F 0A    0355*       ld (iy+sprite_yvel),de ; save y-velocity component
04888B C9          0356*       ret
04888C             0357*   ; end sprite_compute_velocities
04888C             0358*   
04888C             0359*   ; compute animation frame based on sprite_animation and sprite_heading
04888C             0360*   ; inputs: table_pointer set to sprite record
04888C             0361*   ; outputs: a, sprite_frame set to animation frame
04888C             0362*   ; destroys: a,hl
04888C             0363*   sprite_frame_heading_animation:
04888C FD 7E 11    0364*       ld a,(iy+sprite_heading+1) ; we want the integer portion
04888F CB 3F       0365*       srl a ; divide integer portion by 8
048891 CB 3F       0366*       srl a
048893 CB 3F       0367*       srl a
048895 FD 66 22    0368*       ld h,(iy+sprite_animation)
048898 2E 20       0369*       ld l,32 ; 32 orientation frames per animation
04889A ED 6C       0370*       mlt hl ; hl = offset from base animation
04889C 85          0371*       add a,l ; modulo256 since sprite_frame is only 1 byte
04889D FD 77 28    0372*       ld (iy+sprite_frame),a
0488A0 C9          0373*       ret
0488A1             0374*   ; end sprite_frame_heading_animation
0488A1             0375*   
0488A1             0376*   ; compute animation frame based on sprite_heading
0488A1             0377*   ; inputs: table_pointer set to sprite record
0488A1             0378*   ; outputs: a, sprite_frame set to animation frame
0488A1             0379*   ; destroys: a,hl
0488A1             0380*   sprite_frame_heading:
0488A1 FD 7E 11    0381*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0488A4 CB 3F       0382*       srl a ; divide integer portion by 8
0488A6 CB 3F       0383*       srl a
0488A8 CB 3F       0384*       srl a
0488AA FD 77 28    0385*       ld (iy+sprite_frame),a
0488AD C9          0386*       ret
0488AE             0387*   ; end sprite_frame_heading
0488AE             0388*   
0488AE             0389*   ; load a sprite with animation bitmaps
0488AE             0390*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0488AE             0391*   sprite_load_frames:
0488AE             0392*   ; back up input parameters
0488AE E5          0393*       push hl ; base bufferId
0488AF C5          0394*       push bc ; bc = number of frames
0488B0 CD 13 20 04 0395*       call vdu_sprite_clear_frames
0488B4 C1          0396*       pop bc ; bc = number of frames
0488B5 E1          0397*       pop hl ; = base bufferId
0488B6             0398*   @load_frames:
0488B6 C5          0399*       push bc ; back up loop counter
0488B7 E5          0400*       push hl ; back up base bufferId
0488B8 CD 55 21 04 0401*       call vdu_sprite_add_buff
0488BC E1          0402*       pop hl ; restore base bufferId
0488BD 23          0403*       inc hl ; bump it to the next frame
0488BE             0404*   ; decrement loop counter
0488BE C1          0405*       pop bc
0488BF 0B          0406*       dec bc
0488C0 79          0407*       ld a,c
0488C1 B7          0408*       or a
0488C2 C2 B6 88 04 0409*       jp nz,@load_frames
0488C6 78          0410*       ld a,b
0488C7 B7          0411*       or a
0488C8 C2 B6 88 04 0412*       jp nz,@load_frames
0488CC C9          0413*       ret
0488CD             0414*   ; end sprite_load_frames
0488CD             0415*   
0488CD             0416*   
0488CD             0417*   
0488CD             0418*   
0488CD             0419*   dump_sprite_record:
0488CD             0420*       ; call vdu_home_cursor
0488CD CD 00 01 04 0421*       call printInline
0488D1 69 64 20 20 0422*       asciz "id  : "
       3A 20 00    
0488D8 DD 7E 00    0423*       ld a,(ix+sprite_id)
0488DB CD 4A 01 04 0424*       call printHexA
0488DF             0425*   
0488DF CD 00 01 04 0426*       call printInline
0488E3 0D 0A 78 20 0427*       asciz "\r\nx   :"
       20 20 3A 00 
0488EB DD 27 01    0428*       ld hl,(ix+sprite_x)
0488EE CD 2B 03 04 0429*       call print_s168_hl
0488F2             0430*   
0488F2 CD 00 01 04 0431*       call printInline
0488F6 0D 0A 79 20 0432*       asciz "\r\ny   :"
       20 20 3A 00 
0488FE DD 27 04    0433*       ld hl,(ix+sprite_y)
048901 CD 2B 03 04 0434*       call print_s168_hl
048905             0435*   
048905 CD 00 01 04 0436*       call printInline
048909 0D 0A 78 76 0437*       asciz "\r\nxv  :"
       20 20 3A 00 
048911 DD 27 07    0438*       ld hl,(ix+sprite_xvel)
048914 CD 2B 03 04 0439*       call print_s168_hl
048918             0440*   
048918 CD 00 01 04 0441*       call printInline
04891C 0D 0A 79 76 0442*       asciz "\r\nyv  :"
       20 20 3A 00 
048924 DD 27 0A    0443*       ld hl,(ix+sprite_yvel)
048927 CD 2B 03 04 0444*       call print_s168_hl
04892B             0445*   
04892B CD 00 01 04 0446*       call printInline
04892F 0D 0A 76 20 0447*       asciz "\r\nv   :"
       20 20 3A 00 
048937 DD 27 0D    0448*       ld hl,(ix+sprite_vel)
04893A CD 2B 03 04 0449*       call print_s168_hl
04893E             0450*   
04893E CD 00 01 04 0451*       call printInline
048942 0D 0A 68 64 0452*       asciz "\r\nhdg :"
       67 20 3A 00 
04894A DD 27 10    0453*       ld hl,(ix+sprite_heading)
04894D CD 2B 03 04 0454*       call print_s168_hl
048951             0455*   
048951 CD 00 01 04 0456*       call printInline
048955 0D 0A 6F 72 0457*       asciz "\r\nori :"
       69 20 3A 00 
04895D DD 27 13    0458*       ld hl,(ix+sprite_orientation)
048960 CD 2B 03 04 0459*       call print_s168_hl
048964             0460*   
048964 CD 00 01 04 0461*       call printInline
048968 0D 0A 74 79 0462*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
048971 DD 7E 16    0463*       ld a,(ix+sprite_type)
048974 CD 4A 01 04 0464*       call printHexA
048978             0465*   
048978 CD 00 01 04 0466*       call printInline
04897C 0D 0A 42 49 0467*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
048985 DD 27 17    0468*       ld hl,(ix+sprite_base_bufferId)
048988 CD 27 01 04 0469*       call printHex24
04898C             0470*   
04898C CD 00 01 04 0471*       call printInline
048990 0D 0A 6D 50 0472*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
048999 DD 27 1A    0473*       ld hl,(ix+sprite_move_program)
04899C CD 27 01 04 0474*       call printHex24
0489A0             0475*   
0489A0 CD 00 01 04 0476*       call printInline
0489A4 0D 0A 63 6F 0477*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0489AD DD 7E 1D    0478*       ld a,(ix+sprite_collisions)
0489B0 CD A8 03 04 0479*       call printBin8
0489B4             0480*   
0489B4 CD 00 01 04 0481*       call printInline
0489B8 0D 0A 73 7A 0482*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0489C1 DD 7E 1E    0483*       ld a,(ix+sprite_dim_x)
0489C4 CD 4A 01 04 0484*       call printHexA
0489C8             0485*   
0489C8 CD 00 01 04 0486*       call printInline
0489CC 0D 0A 73 7A 0487*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0489D5 DD 7E 1F    0488*       ld a,(ix+sprite_dim_y)
0489D8 CD 4A 01 04 0489*       call printHexA
0489DC             0490*   
0489DC             0491*       ; call printInline
0489DC             0492*       ; asciz "\r\n#ori: "
0489DC             0493*       ; ld a,(ix+sprite_num_orientations)
0489DC             0494*       ; call printHexA
0489DC             0495*   
0489DC             0496*       ; call printInline
0489DC             0497*       ; asciz "\r\n#ani: "
0489DC             0498*       ; ld a,(ix+sprite_num_animations)
0489DC             0499*       ; call printHexA
0489DC             0500*   
0489DC             0501*       ; call printInline
0489DC             0502*       ; asciz "\r\nani : "
0489DC             0503*       ; ld a,(ix+sprite_animation)
0489DC             0504*       ; call printHexA
0489DC             0505*   
0489DC             0506*       ; call printInline
0489DC             0507*       ; asciz "\r\nanit: "
0489DC             0508*       ; ld a,(ix+sprite_animation_timer)
0489DC             0509*       ; call printHexA
0489DC             0510*   
0489DC             0511*       ; call printInline
0489DC             0512*       ; asciz "\r\nmvt : "
0489DC             0513*       ; ld a,(ix+sprite_move_timer)
0489DC             0514*       ; call printHexA
0489DC             0515*   
0489DC             0516*       ; call printInline
0489DC             0517*       ; asciz "\r\nmvs : "
0489DC             0518*       ; ld a,(ix+sprite_move_step)
0489DC             0519*       ; call printHexA
0489DC             0520*   
0489DC             0521*       ; call printInline
0489DC             0522*       ; asciz "\r\npts : "
0489DC             0523*       ; ld a,(ix+sprite_points)
0489DC             0524*       ; call printHexA
0489DC             0525*   
0489DC             0526*       ; call printInline
0489DC             0527*       ; asciz "\r\ndmg : "
0489DC             0528*       ; ld a,(ix+sprite_shield_damage)
0489DC             0529*       ; call printHexA
0489DC             0530*   
0489DC             0531*       ; call printInline
0489DC             0532*       ; asciz "\r\nfrm : "
0489DC             0533*       ; ld a,(ix+sprite_frame)
0489DC             0534*       ; call printHexA
0489DC             0535*   
0489DC             0536*       ; call printNewLine
0489DC             0537*   
0489DC             0538*       ; call waitKeypress
0489DC C9          0539*       ret
0489DD             0540*   
0489DD             0071        include "debug.inc"
0489DD FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
048A00             0002*   
048A00             0003*   DEBUG_PRINT:
048A00             0004*       PUSH_ALL
048A00 08          0001*M1     ex af,af'
048A01 D9          0002*M1     exx
048A02 F5          0003*M1     push af
048A03 E5          0004*M1     push hl
048A04 C5          0005*M1     push bc
048A05 D5          0006*M1     push de
048A06             0007*M1 
048A06 08          0008*M1     ex af,af'
048A07 D9          0009*M1     exx
048A08 F5          0010*M1     push af
048A09 E5          0011*M1     push hl
048A0A C5          0012*M1     push bc
048A0B D5          0013*M1     push de
048A0C DD E5       0014*M1     push ix
048A0E FD E5       0015*M1     push iy
048A10 0E 00       0005*       ld c,0 ; X
048A12 06 00       0006*       ld b,0 ; Y
048A14 CD 37 1A 04 0007*       call vdu_move_cursor
048A18             0008*       POP_ALL
048A18 FD E1       0001*M1     pop iy
048A1A DD E1       0002*M1     pop ix
048A1C D1          0003*M1     pop de
048A1D C1          0004*M1     pop bc
048A1E E1          0005*M1     pop hl
048A1F F1          0006*M1     pop af
048A20 08          0007*M1     ex af,af'
048A21 D9          0008*M1     exx
048A22             0009*M1 
048A22 D1          0010*M1     pop de
048A23 C1          0011*M1     pop bc
048A24 E1          0012*M1     pop hl
048A25 F1          0013*M1     pop af
048A26 08          0014*M1     ex af,af'
048A27 D9          0015*M1     exx
048A28             0009*       PUSH_ALL
048A28 08          0001*M1     ex af,af'
048A29 D9          0002*M1     exx
048A2A F5          0003*M1     push af
048A2B E5          0004*M1     push hl
048A2C C5          0005*M1     push bc
048A2D D5          0006*M1     push de
048A2E             0007*M1 
048A2E 08          0008*M1     ex af,af'
048A2F D9          0009*M1     exx
048A30 F5          0010*M1     push af
048A31 E5          0011*M1     push hl
048A32 C5          0012*M1     push bc
048A33 D5          0013*M1     push de
048A34 DD E5       0014*M1     push ix
048A36 FD E5       0015*M1     push iy
048A38 CD 57 06 04 0010*       call dumpFlags
048A3C             0011*       POP_ALL
048A3C FD E1       0001*M1     pop iy
048A3E DD E1       0002*M1     pop ix
048A40 D1          0003*M1     pop de
048A41 C1          0004*M1     pop bc
048A42 E1          0005*M1     pop hl
048A43 F1          0006*M1     pop af
048A44 08          0007*M1     ex af,af'
048A45 D9          0008*M1     exx
048A46             0009*M1 
048A46 D1          0010*M1     pop de
048A47 C1          0011*M1     pop bc
048A48 E1          0012*M1     pop hl
048A49 F1          0013*M1     pop af
048A4A 08          0014*M1     ex af,af'
048A4B D9          0015*M1     exx
048A4C             0012*       PUSH_ALL
048A4C 08          0001*M1     ex af,af'
048A4D D9          0002*M1     exx
048A4E F5          0003*M1     push af
048A4F E5          0004*M1     push hl
048A50 C5          0005*M1     push bc
048A51 D5          0006*M1     push de
048A52             0007*M1 
048A52 08          0008*M1     ex af,af'
048A53 D9          0009*M1     exx
048A54 F5          0010*M1     push af
048A55 E5          0011*M1     push hl
048A56 C5          0012*M1     push bc
048A57 D5          0013*M1     push de
048A58 DD E5       0014*M1     push ix
048A5A FD E5       0015*M1     push iy
048A5C CD B9 04 04 0013*       call dumpRegistersHex
048A60             0014*       ; call waitKeypress
048A60             0015*       POP_ALL
048A60 FD E1       0001*M1     pop iy
048A62 DD E1       0002*M1     pop ix
048A64 D1          0003*M1     pop de
048A65 C1          0004*M1     pop bc
048A66 E1          0005*M1     pop hl
048A67 F1          0006*M1     pop af
048A68 08          0007*M1     ex af,af'
048A69 D9          0008*M1     exx
048A6A             0009*M1 
048A6A D1          0010*M1     pop de
048A6B C1          0011*M1     pop bc
048A6C E1          0012*M1     pop hl
048A6D F1          0013*M1     pop af
048A6E 08          0014*M1     ex af,af'
048A6F D9          0015*M1     exx
048A70 C9          0016*       ret
048A71             0017*   
048A71             0018*   DEBUG_PRINT_TILE_TABLE:
048A71             0019*       PUSH_ALL
048A71 08          0001*M1     ex af,af'
048A72 D9          0002*M1     exx
048A73 F5          0003*M1     push af
048A74 E5          0004*M1     push hl
048A75 C5          0005*M1     push bc
048A76 D5          0006*M1     push de
048A77             0007*M1 
048A77 08          0008*M1     ex af,af'
048A78 D9          0009*M1     exx
048A79 F5          0010*M1     push af
048A7A E5          0011*M1     push hl
048A7B C5          0012*M1     push bc
048A7C D5          0013*M1     push de
048A7D DD E5       0014*M1     push ix
048A7F FD E5       0015*M1     push iy
048A81 CD 1C 01 04 0020*       call printNewLine
048A85 DD 21 00 7C 0021*       ld ix,tile_stack
       04          
048A8A DD 37 00    0022*       ld ix,(ix)
048A8D CD 21 80 04 0023*       call dump_tile_record
048A91 CD 1C 01 04 0024*       call printNewLine
048A95             0025*       POP_ALL
048A95 FD E1       0001*M1     pop iy
048A97 DD E1       0002*M1     pop ix
048A99 D1          0003*M1     pop de
048A9A C1          0004*M1     pop bc
048A9B E1          0005*M1     pop hl
048A9C F1          0006*M1     pop af
048A9D 08          0007*M1     ex af,af'
048A9E D9          0008*M1     exx
048A9F             0009*M1 
048A9F D1          0010*M1     pop de
048AA0 C1          0011*M1     pop bc
048AA1 E1          0012*M1     pop hl
048AA2 F1          0013*M1     pop af
048AA3 08          0014*M1     ex af,af'
048AA4 D9          0015*M1     exx
048AA5 C9          0026*       ret
048AA6             0027*   ; end DEBUG_PRINT_TILE_TABLE
048AA6             0028*   
048AA6             0029*   DEBUG_PRINT_TABLE:
048AA6             0030*       PUSH_ALL
048AA6 08          0001*M1     ex af,af'
048AA7 D9          0002*M1     exx
048AA8 F5          0003*M1     push af
048AA9 E5          0004*M1     push hl
048AAA C5          0005*M1     push bc
048AAB D5          0006*M1     push de
048AAC             0007*M1 
048AAC 08          0008*M1     ex af,af'
048AAD D9          0009*M1     exx
048AAE F5          0010*M1     push af
048AAF E5          0011*M1     push hl
048AB0 C5          0012*M1     push bc
048AB1 D5          0013*M1     push de
048AB2 DD E5       0014*M1     push ix
048AB4 FD E5       0015*M1     push iy
048AB6 CD 1C 01 04 0031*       call printNewLine
048ABA CD CD 88 04 0032*       call dump_sprite_record
048ABE CD 1C 01 04 0033*       call printNewLine
048AC2 CD 1C 01 04 0034*       call printNewLine
048AC6             0035*   
048AC6 FD E5       0036*       push iy
048AC8 DD E1       0037*       pop ix
048ACA CD CD 88 04 0038*       call dump_sprite_record
048ACE CD 1C 01 04 0039*       call printNewLine
048AD2 CD 1C 01 04 0040*       call printNewLine
048AD6             0041*       POP_ALL
048AD6 FD E1       0001*M1     pop iy
048AD8 DD E1       0002*M1     pop ix
048ADA D1          0003*M1     pop de
048ADB C1          0004*M1     pop bc
048ADC E1          0005*M1     pop hl
048ADD F1          0006*M1     pop af
048ADE 08          0007*M1     ex af,af'
048ADF D9          0008*M1     exx
048AE0             0009*M1 
048AE0 D1          0010*M1     pop de
048AE1 C1          0011*M1     pop bc
048AE2 E1          0012*M1     pop hl
048AE3 F1          0013*M1     pop af
048AE4 08          0014*M1     ex af,af'
048AE5 D9          0015*M1     exx
048AE6 C9          0042*       RET
048AE7             0043*   
048AE7             0044*   DEBUG_WAITKEYPRESS:
048AE7             0045*       PUSH_ALL
048AE7 08          0001*M1     ex af,af'
048AE8 D9          0002*M1     exx
048AE9 F5          0003*M1     push af
048AEA E5          0004*M1     push hl
048AEB C5          0005*M1     push bc
048AEC D5          0006*M1     push de
048AED             0007*M1 
048AED 08          0008*M1     ex af,af'
048AEE D9          0009*M1     exx
048AEF F5          0010*M1     push af
048AF0 E5          0011*M1     push hl
048AF1 C5          0012*M1     push bc
048AF2 D5          0013*M1     push de
048AF3 DD E5       0014*M1     push ix
048AF5 FD E5       0015*M1     push iy
048AF7 CD B8 06 04 0046*       call waitKeypress
048AFB             0047*       POP_ALL
048AFB FD E1       0001*M1     pop iy
048AFD DD E1       0002*M1     pop ix
048AFF D1          0003*M1     pop de
048B00 C1          0004*M1     pop bc
048B01 E1          0005*M1     pop hl
048B02 F1          0006*M1     pop af
048B03 08          0007*M1     ex af,af'
048B04 D9          0008*M1     exx
048B05             0009*M1 
048B05 D1          0010*M1     pop de
048B06 C1          0011*M1     pop bc
048B07 E1          0012*M1     pop hl
048B08 F1          0013*M1     pop af
048B09 08          0014*M1     ex af,af'
048B0A D9          0015*M1     exx
048B0B C9          0048*       RET
048B0C             0049*   
048B0C             0050*   DEBUG_PRINT_FIELDS:
048B0C             0051*       ; PUSH_ALL
048B0C 01 00 00 00 0052*       ld bc,0
048B10 4F          0053*       ld c,a
048B11 DD 21 5E 8E 0054*       ld ix,table_base
       04          
048B16 DD 09       0055*       add ix,bc
048B18 06 14       0056*       ld b,table_num_records
048B1A             0057*   @@:
048B1A DD E5       0058*       push ix
048B1C E1          0059*       pop hl
048B1D C5          0060*       push bc ; save loop counter
048B1E 3E 01       0061*       ld a,1 ; print one byte
048B20 CD BD 06 04 0062*       call dumpMemoryHex
048B24 ED 32 40    0063*       lea ix,ix+table_record_size
048B27 C1          0064*       pop bc ; restore loop counter
048B28 10 F0       0065*       djnz @b
048B2A             0066*       ; POP_ALL
048B2A C9          0067*       ret
048B2B             0068*   
048B2B             0069*   DEBUG_PRINT_TILE_STACK:
048B2B             0070*       PUSH_ALL
048B2B 08          0001*M1     ex af,af'
048B2C D9          0002*M1     exx
048B2D F5          0003*M1     push af
048B2E E5          0004*M1     push hl
048B2F C5          0005*M1     push bc
048B30 D5          0006*M1     push de
048B31             0007*M1 
048B31 08          0008*M1     ex af,af'
048B32 D9          0009*M1     exx
048B33 F5          0010*M1     push af
048B34 E5          0011*M1     push hl
048B35 C5          0012*M1     push bc
048B36 D5          0013*M1     push de
048B37 DD E5       0014*M1     push ix
048B39 FD E5       0015*M1     push iy
048B3B CD 1C 01 04 0071*       call printNewLine
048B3F CD 1C 01 04 0072*       call printNewLine
048B43 2A 03 7F 04 0073*       ld hl,(tile_stack_pointer)
048B47 CD 64 01 04 0074*       call printHexUHL
048B4B CD 1C 01 04 0075*       call printNewLine
048B4F 3A 09 7F 04 0076*       ld a,(num_active_tiles)
048B53 CD 4A 01 04 0077*       call printHexA
048B57 CD 1C 01 04 0078*       call printNewLine
048B5B DD 21 00 7C 0079*       ld ix,tile_stack
       04          
048B60 06 08       0080*       ld b,8
048B62             0081*   @loop:
048B62 C5          0082*       push bc
048B63 DD 27 00    0083*       ld hl,(ix)
048B66 CD 64 01 04 0084*       call printHexUHL
048B6A CD 1C 01 04 0085*       call printNewLine
048B6E ED 32 03    0086*       lea ix,ix+3
048B71 C1          0087*       pop bc
048B72 10 EE       0088*       djnz @loop
048B74             0089*       POP_ALL
048B74 FD E1       0001*M1     pop iy
048B76 DD E1       0002*M1     pop ix
048B78 D1          0003*M1     pop de
048B79 C1          0004*M1     pop bc
048B7A E1          0005*M1     pop hl
048B7B F1          0006*M1     pop af
048B7C 08          0007*M1     ex af,af'
048B7D D9          0008*M1     exx
048B7E             0009*M1 
048B7E D1          0010*M1     pop de
048B7F C1          0011*M1     pop bc
048B80 E1          0012*M1     pop hl
048B81 F1          0013*M1     pop af
048B82 08          0014*M1     ex af,af'
048B83 D9          0015*M1     exx
048B84 C9          0090*       ret
048B85             0091*   
048B85             0092*   DEBUG_DUMP_PLAYER_RECORD:
048B85             0093*       PUSH_ALL
048B85 08          0001*M1     ex af,af'
048B86 D9          0002*M1     exx
048B87 F5          0003*M1     push af
048B88 E5          0004*M1     push hl
048B89 C5          0005*M1     push bc
048B8A D5          0006*M1     push de
048B8B             0007*M1 
048B8B 08          0008*M1     ex af,af'
048B8C D9          0009*M1     exx
048B8D F5          0010*M1     push af
048B8E E5          0011*M1     push hl
048B8F C5          0012*M1     push bc
048B90 D5          0013*M1     push de
048B91 DD E5       0014*M1     push ix
048B93 FD E5       0015*M1     push iy
048B95 CD 1C 01 04 0094*       call printNewLine
048B99 CD 3D 73 04 0095*       CALL dump_player_record
048B9D CD 1C 01 04 0096*       call printNewLine
048BA1             0097*       POP_ALL
048BA1 FD E1       0001*M1     pop iy
048BA3 DD E1       0002*M1     pop ix
048BA5 D1          0003*M1     pop de
048BA6 C1          0004*M1     pop bc
048BA7 E1          0005*M1     pop hl
048BA8 F1          0006*M1     pop af
048BA9 08          0007*M1     ex af,af'
048BAA D9          0008*M1     exx
048BAB             0009*M1 
048BAB D1          0010*M1     pop de
048BAC C1          0011*M1     pop bc
048BAD E1          0012*M1     pop hl
048BAE F1          0013*M1     pop af
048BAF 08          0014*M1     ex af,af'
048BB0 D9          0015*M1     exx
048BB1 C9          0098*       RET
048BB2             0099*   
048BB2             0100*   DEBUG_PRINT_SHIELDS:
048BB2 0E 00       0101*       ld c,0 ; X
048BB4 06 00       0102*       ld b,0 ; Y
048BB6 CD 37 1A 04 0103*       call vdu_move_cursor
048BBA             0104*   
048BBA DD 21 FA 75 0105*       ld ix,bar_shields
       04          
048BBF             0106*   
048BBF CD 00 01 04 0107*       call printInline
048BC3 76 61 6C 3A 0108*       asciz "val:"
       00          
048BC8 DD 27 00    0109*       ld hl,(ix+bar_val)
048BCB CD 06 02 04 0110*       call printDec
048BCF CD 1C 01 04 0111*       call printNewLine
048BD3             0112*   
048BD3 CD 00 01 04 0113*       call printInline
048BD7 78 30 20 3A 0114*       asciz "x0 :"
       00          
048BDC DD 27 03    0115*       ld hl,(ix+bar_x0)
048BDF CD 06 02 04 0116*       call printDec
048BE3 CD 1C 01 04 0117*       call printNewLine
048BE7             0118*   
048BE7 CD 00 01 04 0119*       call printInline
048BEB 79 30 20 3A 0120*       asciz "y0 :"
       00          
048BF0 DD 27 06    0121*       ld hl,(ix+bar_y0)
048BF3 CD 06 02 04 0122*       call printDec
048BF7 CD 1C 01 04 0123*       call printNewLine
048BFB             0124*   
048BFB CD 00 01 04 0125*       call printInline
048BFF 78 31 20 3A 0126*       asciz "x1 :"
       00          
048C04 DD 27 09    0127*       ld hl,(ix+bar_x1)
048C07 CD 06 02 04 0128*       call printDec
048C0B CD 1C 01 04 0129*       call printNewLine
048C0F             0130*   
048C0F CD 00 01 04 0131*       call printInline
048C13 79 31 20 3A 0132*       asciz "y1 :"
       00          
048C18 DD 27 0C    0133*       ld hl,(ix+bar_y1)
048C1B CD 06 02 04 0134*       call printDec
048C1F CD 1C 01 04 0135*       call printNewLine
048C23             0136*   
048C23 CD 00 01 04 0137*       call printInline
048C27 79 20 20 3A 0138*       asciz "y  :"
       00          
048C2C DD 27 0F    0139*       ld hl,(ix+bar_y)
048C2F CD 06 02 04 0140*       call printDec
048C33 CD 1C 01 04 0141*       call printNewLine
048C37             0142*   
048C37             0143*       ; call waitKeypress
048C37 C9          0144*       ret
048C38             0145*   ; end DEBUG_PRINT_SHIELDS
048C38             0146*   
048C38             0147*   DEBUG_PRINT_BAR_UPDATE:
048C38 0E 00       0148*       ld c,0 ; X
048C3A 06 00       0149*       ld b,0 ; Y
048C3C CD 37 1A 04 0150*       call vdu_move_cursor
048C40             0151*   
048C40 CD 00 01 04 0152*       call printInline
048C44 78 30 20 20 0153*       asciz "x0  :"
       3A 00       
048C4A 21 00 00 00 0154*       ld hl,0 ; clear hlu
048C4E DD 6E 01    0155*       ld l,(ix+@x0-@cmd0+0)
048C51 DD 66 02    0156*       ld h,(ix+@x0-@cmd0+1)
048C54 CD 06 02 04 0157*       call printDec
048C58 CD 1C 01 04 0158*       call printNewLine
048C5C             0159*   
048C5C CD 00 01 04 0160*       call printInline
048C60 79 30 20 20 0161*       asciz "y0  :"
       3A 00       
048C66 21 00 00 00 0162*       ld hl,0 ; clear hlu
048C6A DD 6E 07    0163*       ld l,(ix+@y0-@cmd0+0)
048C6D DD 66 08    0164*       ld h,(ix+@y0-@cmd0+1)
048C70 CD 06 02 04 0165*       call printDec
048C74 CD 1C 01 04 0166*       call printNewLine
048C78             0167*   
048C78 CD 00 01 04 0168*       call printInline
048C7C 78 31 20 20 0169*       asciz "x1  :"
       3A 00       
048C82 21 00 00 00 0170*       ld hl,0 ; clear hlu
048C86 DD 6E 05    0171*       ld l,(ix+@x1-@cmd0+0)
048C89 DD 66 06    0172*       ld h,(ix+@x1-@cmd0+1)
048C8C CD 06 02 04 0173*       call printDec
048C90 CD 1C 01 04 0174*       call printNewLine
048C94             0175*   
048C94 CD 00 01 04 0176*       call printInline
048C98 79 31 20 20 0177*       asciz "y1  :"
       3A 00       
048C9E 21 00 00 00 0178*       ld hl,0 ; clear hlu
048CA2 DD 6E 03    0179*       ld l,(ix+@y1-@cmd0+0)
048CA5 DD 66 04    0180*       ld h,(ix+@y1-@cmd0+1)
048CA8 CD 06 02 04 0181*       call printDec
048CAC CD 1C 01 04 0182*       call printNewLine
048CB0             0183*   
048CB0 CD 00 01 04 0184*       call printInline
048CB4 78 32 20 20 0185*       asciz "x2  :"
       3A 00       
048CBA 21 00 00 00 0186*       ld hl,0 ; clear hlu
048CBE DD 6E 0B    0187*       ld l,(ix+@x2-@cmd0+0)
048CC1 DD 66 0C    0188*       ld h,(ix+@x2-@cmd0+1)
048CC4 CD 06 02 04 0189*       call printDec
048CC8 CD 1C 01 04 0190*       call printNewLine
048CCC             0191*   
048CCC CD 00 01 04 0192*       call printInline
048CD0 58 32 20 79 0193*       asciz "X2 y2:"
       32 3A 00    
048CD7 21 00 00 00 0194*       ld hl,0 ; clear hlu
048CDB DD 6E 0D    0195*       ld l,(ix+@y2-@cmd0+0)
048CDE DD 66 0E    0196*       ld h,(ix+@y2-@cmd0+1)
048CE1 CD 06 02 04 0197*       call printDec
048CE5 C9          0198*       ret
048CE6 18          0199*   @cmd0:   db 24
048CE7 00 00       0200*   @x0: 	dw 0x0000
048CE9 00 00       0201*   @y1: 	dw 0x0000
048CEB 00 00       0202*   @x1: 	dw 0x0000
048CED 00 00       0203*   @y0: 	dw 0x0000
048CEF             0204*   ; plot bitmap command
048CEF 19          0205*   @cmd1:   db 25 ; stomped on by @y0 load
048CF0 ED          0206*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
048CF1 00 00       0207*   @x2: 	dw 0x0000
048CF3 00 00       0208*   @y2: 	dw 0x0000
048CF5 00          0209*   @end:  db 0x00 ; padding
048CF6             0210*   ; end DEBUG_PRINT_BAR_UPDATE
048CF6             0072    
048CF6 FF FF FF FF 0073        align 256
       FF FF FF FF 
       FF FF       
048D00             0074    
048D00             0075    ; --- MAIN PROGRAM FILE ---
048D00 57 65 6C 63 0076    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
048D1B 4C 6F 61 64 0077    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
048D29 50 72 65 73 0078    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
048D44             0079    
048D44             0080    init:
048D44             0081    ; clear all buffers
048D44 CD 2A 1C 04 0082        call vdu_clear_all_buffers
048D48             0083    
048D48             0084    ; print loading ui message
048D48 CD 4B 1A 04 0085        call vdu_cls
048D4C 21 6A 21 04 0086        ld hl,loading_ui
048D50 CD 07 01 04 0087        call printString
048D54 CD 50 1A 04 0088        call vdu_flip
048D58             0089    ; load UI images
048D58 CD CA 16 04 0090        call load_ui_images
048D5C             0091    
048D5C             0092    ; set up the display
048D5C 3E 08       0093        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
048D5E             0094        ; ld a,20 ;  512   384   64    60hz single-buffered
048D5E CD 14 1B 04 0095        call vdu_set_screen_mode
048D62 AF          0096        xor a
048D63 CD 25 1B 04 0097        call vdu_set_scaling
048D67             0098    
048D67             0099    ; ; enable additional audio channels
048D67             0100    ; 	call vdu_enable_channels
048D67             0101    
048D67             0102    ; set text background color
048D67 3E 9A       0103        ld a,26+128 ; violet
048D69 CD 7C 1A 04 0104        call vdu_colour_text
048D6D             0105    
048D6D             0106    ; set text foreground color
048D6D 3E 2F       0107        ld a,47 ; aaaaff lavenderish
048D6F CD 7C 1A 04 0108        call vdu_colour_text
048D73             0109    
048D73             0110    ; set gfx bg color
048D73 AF          0111        xor a ; plotting mode 0
048D74 3E 9A       0112        ld a,26+128 ; violet
048D76 CD 8D 1A 04 0113        call vdu_gcol
048D7A CD 4B 1A 04 0114        call vdu_cls
048D7E             0115    
048D7E             0116    ; set the cursor off
048D7E CD 13 1A 04 0117        call vdu_cursor_off
048D82             0118    
048D82             0119    ; VDU 28, left, bottom, right, top: Set text viewport **
048D82             0120    ; MIND THE LITTLE-ENDIANESS
048D82             0121    ; inputs: c=left,b=bottom,e=right,d=top
048D82 0E 00       0122        ld c,0 ; left
048D84 16 00       0123        ld d,0 ; top
048D86 1E 27       0124        ld e,39 ; right
048D88 06 00       0125        ld b,0; bottom
048D8A CD A4 1A 04 0126        call vdu_set_txt_viewport
048D8E             0127    
048D8E             0128    ; load sprites
048D8E CD 09 16 04 0129        call img_load_init ; sets up the animated load screen
048D92 CD DD 16 04 0130        call load_sprite_images
048D96             0131    
048D96             0132    ; load tileset_ptrs
048D96 CD EE 16 04 0133        call load_tilesets
048D9A             0134    
048D9A             0135    ; load backgorund images
048D9A CD FF 16 04 0136        call load_backgrounds
048D9E             0137    
048D9E             0138    ; ; load sound effects ; TODO
048D9E             0139    ; 	ld bc,SFX_num_buffers
048D9E             0140    ; 	ld hl,SFX_buffer_id_lut
048D9E             0141    ; 	ld (cur_buffer_id_lut),hl
048D9E             0142    ; 	ld hl,SFX_load_routines_table
048D9E             0143    ; 	ld (cur_load_jump_table),hl
048D9E             0144    ; 	call sfx_load_main
048D9E             0145    
048D9E             0146    ; print loading complete message and wait for user keypress
048D9E CD 4B 1A 04 0147        call vdu_cls
048DA2 21 29 8D 04 0148        ld hl,loading_complete
048DA6 CD 07 01 04 0149        call printString
048DAA CD 50 1A 04 0150        call vdu_flip
048DAE CD B8 06 04 0151        call waitKeypress
048DB2             0152    
048DB2             0153    ; set up display for gameplay
048DB2             0154        ; ld a,8
048DB2 3E 14       0155        ld a,20
048DB4 CD 14 1B 04 0156        call vdu_set_screen_mode
048DB8 AF          0157        xor a
048DB9 CD 25 1B 04 0158        call vdu_set_scaling
048DBD CD 13 1A 04 0159        call vdu_cursor_off
048DC1             0160    ; load fonts
048DC1 CD 00 15 04 0161    	call fonts_load
048DC5             0162    ; select font
048DC5 21 02 FA 00 0163        ld hl,amiga_forever_8x8
048DC9 3E 01       0164        ld a,1 ; flags
048DCB CD 00 1E 04 0165        call vdu_font_select
048DCF             0166    ; plot bezel art
048DCF 21 06 00 00 0167        ld hl,BUF_BEZEL_L
048DD3 CD 38 1B 04 0168        call vdu_buff_select
048DD7 01 00 00 00 0169        ld bc,0
048DDB 11 00 00 00 0170        ld de,0
048DDF CD 20 1F 04 0171        call vdu_plot_bmp
048DE3 21 07 00 00 0172        ld hl,BUF_BEZEL_R
048DE7 CD 38 1B 04 0173        call vdu_buff_select
048DEB 01 80 01 00 0174        ld bc,384
048DEF 11 00 00 00 0175        ld de,0
048DF3 CD 20 1F 04 0176        call vdu_plot_bmp
048DF7             0177    ; draw player cockpit
048DF7 CD 9B 74 04 0178        call draw_player_cockpit
048DFB             0179    ; set gfx origin and viewport to playing field window
048DFB 01 80 00 00 0180        ld bc,origin_left
048DFF 11 00 00 00 0181        ld de,origin_top
048E03 CD D0 1A 04 0182        call vdu_set_gfx_origin
048E07 01 00 00 00 0183        ld bc,field_left
048E0B 11 00 00 00 0184        ld de,field_top
048E0F DD 21 FF 00 0185        ld ix,field_right
       00          
048E14 FD 21 7F 01 0186        ld iy,field_bottom
       00          
048E19 CD EB 1A 04 0187        call vdu_set_gfx_viewport
048E1D             0188    ; set background color
048E1D 3E 9A       0189        ld a,26+128 ; violet
048E1F CD 8D 1A 04 0190        call vdu_gcol
048E23 CD 5E 1A 04 0191        call vdu_clg
048E27             0192    ; VDU 28, left, bottom, right, top: Set text viewport **
048E27 0E 00       0193        ld c,0 ; left
048E29 16 00       0194        ld d,0 ; top
048E2B 1E 3E       0195        ld e,62 ; right
048E2D 06 30       0196        ld b,48; bottom
048E2F CD A4 1A 04 0197        call vdu_set_txt_viewport
048E33             0198    
048E33             0199    ; initialize the global timestamp
048E33 CD F9 18 04 0200        call timestamp_tick
048E37             0201    
048E37             0202    ; done with init
048E37 C9          0203        ret
048E38             0204    
048E38             0205    main:
048E38             0206    ; start a new game
048E38 CD 17 79 04 0207        call game_initialize
048E3C             0208    main_loop:
048E3C             0209    ; update the global timestamp
048E3C CD F9 18 04 0210        call timestamp_tick
048E40             0211    ; do gamestate logic
048E40 CD 03 79 04 0212        call do_game
048E44             0213    ; wait for the next vblank mitigate flicker and for loop timing
048E44 CD BF 1A 04 0214        call vdu_vblank
048E48             0215    ; poll keyboard for escape keypress
048E48 3E 08       0216        ld a, $08 ; code to send to MOS
048E4A 5B CF       0217        rst.lil $08 ; get IX pointer to System Variables
048E4C DD 7E 05    0218        ld a, (ix + $05) ; get ASCII code of key pressed
048E4F FE 1B       0219        cp 27 ; check if 27 (ascii code for ESC)
048E51 CA 59 8E 04 0220        jp z, main_end ; if pressed, jump to exit
048E55             0221    ; escape not pressed so loop
048E55 C3 3C 8E 04 0222        jp main_loop
048E59             0223    
048E59             0224    main_end:
048E59 CD 05 1A 04 0225        call vdu_cursor_on
048E5D C9          0226        ret
048E5E             0227    
048E5E             0228        include "tables.inc"
048E5E             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
048E5E             0002*   table_base: equ $
048E5E             0003*   player_weapons_begin: equ table_base
048E5E             0004*   player_lasers_begin: equ player_weapons_begin
048E5E             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
048E5E             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
048E5E             0007*   player_begin: equ player_weapons_end
048E5E             0008*   player_end: equ table_record_size+player_begin
048E5E             0009*   enemy_sprites_begin: equ player_end
048E5E             0010*   seekers_base: equ enemy_sprites_begin
048E5E             0011*   seekers_end: equ table_record_size*seekers_max+seekers_base
048E5E             0012*   fireballs_base: equ seekers_end
048E5E             0013*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
048E5E             0014*   enemy_sprites_end: equ fireballs_end
048E5E             0015*   explosions_base: equ enemy_sprites_end
048E5E             0016*   explosions_end: equ table_record_size*explosions_max+explosions_base
048E5E             0017*   table_end: equ explosions_end
048E5E             0018*   
048E5E             0019*   table_num_records: equ table_end-table_base/table_record_size
048E5E             0020*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
048E5E             0021*   
048E5E             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
048E5E             0023*   tile_table_base: equ table_end
048E5E             0024*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

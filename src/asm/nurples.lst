PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD 5E 4A 04 0015       call init
040050 CD 42 4B 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9F 05 04 0267*      ld (uhl),hl
04012A ED 43 A2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0269*      ld (ude),de
       04          
040134 DD 22 A8 05 0270*      ld (uix),ix
       04          
040139 FD 22 AB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 36 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9F 05 04 0281*      ld hl, (uhl)
040157 ED 4B A2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0283*      ld de, (ude)
       04          
040161 DD 2A A8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD FB 06 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 94 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9F 05 04 0656*      ld (uhl),hl
040363 ED 43 A2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0658*      ld (ude),de
       04          
04036D DD 22 A8 05 0659*      ld (uix),ix
       04          
040372 FD 22 AB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 9C 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 22 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 9C 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 27 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9F 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 2C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A A2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 31 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 36 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 3B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A AB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9F 05 04 0723*      ld hl, (uhl)
040410 ED 4B A2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0725*      ld de, (ude)
       04          
04041A DD 2A A8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9F 05 04 0739*      ld (uhl),hl
04042A ED 43 A2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0741*      ld (ude),de
       04          
040434 DD 22 A8 05 0742*      ld (uix),ix
       04          
040439 FD 22 AB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 9C 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 22 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 9C 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 27 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9F 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 2C 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A A2 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 31 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A5 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 36 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A8 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 3B 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A AB 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5 CD 8C 00 04 0792*      call printNewLine
0404A9             0793*  ; restore everything
0404A9 2A 9F 05 04 0794*      ld hl, (uhl)
0404AD ED 4B A2 05 0795*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0796*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0797*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0798*      ld iy, (uiy)
       04          
0404C1 F1          0799*      pop af
0404C2             0800*  ; all done
0404C2 C9          0801*      ret
0404C3             0802*  
0404C3             0803*  dumpRegistersHexPrime:
0404C3 D9          0804*      exx
0404C4 08          0805*      ex af,af'
0404C5 CD 26 04 04 0806*      call dumpRegistersHex
0404C9 08          0807*      ex af,af'
0404CA D9          0808*      exx
0404CB C9          0809*      ret
0404CC             0810*  
0404CC             0811*  ; additionally dump prime registers
0404CC             0812*  ; inputs: none
0404CC             0813*  ; outputs: values of every register printed to screen
0404CC             0814*  ; destroys: nothing
0404CC             0815*  dumpRegistersHexAll:
0404CC CD 26 04 04 0816*      call dumpRegistersHex
0404D0 08          0817*      ex af,af'
0404D1 D9          0818*      exx
0404D2 CD 26 04 04 0819*      call dumpRegistersHex
0404D6 08          0820*      ex af,af'
0404D7 D9          0821*      exx
0404D8 C9          0822*      ret
0404D9             0823*  
0404D9             0824*  ; print hlu to screen in hexidecimal format
0404D9             0825*  ; inputs: none
0404D9             0826*  ; destroys: nothing
0404D9             0827*  print_hex_hl:
0404D9 F5          0828*      push af
0404DA E5          0829*      push hl
0404DB 21 27 05 04 0830*      ld hl,str_hlu
0404DF CD 77 00 04 0831*      call printString
0404E3 E1          0832*      pop hl
0404E4 E5          0833*      push hl
0404E5 CD 97 00 04 0834*      call printHex24
0404E9 3E 20       0835*      ld a,' '
0404EB 5B D7       0836*      rst.lil 10h
0404ED E1          0837*      pop hl
0404EE F1          0838*      pop af
0404EF C9          0839*      ret
0404F0             0840*  
0404F0             0841*  ; print bcu to screen in hexidecimal format
0404F0             0842*  ; inputs: none
0404F0             0843*  ; destroys: nothing
0404F0             0844*  print_hex_bc:
0404F0 F5          0845*      push af
0404F1 E5          0846*      push hl
0404F2 C5          0847*      push bc
0404F3 21 2C 05 04 0848*      ld hl,str_bcu
0404F7 CD 77 00 04 0849*      call printString
0404FB E1          0850*      pop hl
0404FC E5          0851*      push hl
0404FD CD 97 00 04 0852*      call printHex24
040501 3E 20       0853*      ld a,' '
040503 5B D7       0854*      rst.lil 10h
040505 C1          0855*      pop bc
040506 E1          0856*      pop hl
040507 F1          0857*      pop af
040508 C9          0858*      ret
040509             0859*  
040509             0860*  ; print deu to screen in hexidecimal format
040509             0861*  ; inputs: none
040509             0862*  ; destroys: nothing
040509             0863*  print_hex_de:
040509 F5          0864*      push af
04050A E5          0865*      push hl
04050B D5          0866*      push de
04050C 21 31 05 04 0867*      ld hl,str_deu
040510 CD 77 00 04 0868*      call printString
040514 E1          0869*      pop hl
040515 E5          0870*      push hl
040516 CD 97 00 04 0871*      call printHex24
04051A 3E 20       0872*      ld a,' '
04051C 5B D7       0873*      rst.lil 10h
04051E D1          0874*      pop de
04051F E1          0875*      pop hl
040520 F1          0876*      pop af
040521 C9          0877*      ret
040522             0878*  
040522 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040540             0885*  
040540             0886*  ; print udeuhl to screen in hexidecimal format
040540             0887*  ; inputs: none
040540             0888*  ; outputs: concatenated hexidecimal udeuhl
040540             0889*  ; destroys: nothing
040540             0890*  dumpUDEUHLHex:
040540             0891*  ; store everything in scratch
040540 22 9F 05 04 0892*      ld (uhl),hl
040544 ED 43 A2 05 0893*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0894*      ld (ude),de
       04          
04054E DD 22 A8 05 0895*      ld (uix),ix
       04          
040553 FD 22 AB 05 0896*      ld (uiy),iy
       04          
040558 F5          0897*      push af
040559             0898*  
040559             0899*  ; print each register
040559             0900*  
040559 21 93 05 04 0901*      ld hl,str_udeuhl
04055D CD 77 00 04 0902*      call printString
040561 2A A5 05 04 0903*      ld hl,(ude)
040565 CD 97 00 04 0904*      call printHex24
040569 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04056B 5B D7       0906*      rst.lil 10h
04056D 2A 9F 05 04 0907*      ld hl,(uhl)
040571 CD 97 00 04 0908*      call printHex24
040575 CD 8C 00 04 0909*      call printNewLine
040579             0910*  
040579             0911*  ; restore everything
040579 2A 9F 05 04 0912*      ld hl, (uhl)
04057D ED 4B A2 05 0913*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0914*      ld de, (ude)
       04          
040587 DD 2A A8 05 0915*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0916*      ld iy, (uiy)
       04          
040591 F1          0917*      pop af
040592             0918*  ; all done
040592 C9          0919*      ret
040593             0920*  
040593 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0922*  
04059C             0923*  ; global scratch memory for registers
04059C 00 00 00    0924*  uaf: dl 0
04059F 00 00 00    0925*  uhl: dl 0
0405A2 00 00 00    0926*  ubc: dl 0
0405A5 00 00 00    0927*  ude: dl 0
0405A8 00 00 00    0928*  uix: dl 0
0405AB 00 00 00    0929*  uiy: dl 0
0405AE 00 00 00    0930*  usp: dl 0
0405B1 00 00 00    0931*  upc: dl 0
0405B4             0932*  
0405B4             0933*  ; inputs: whatever is in the flags register
0405B4             0934*  ; outputs: binary representation of flags
0405B4             0935*  ;          with a header so we know which is what
0405B4             0936*  ; destroys: nothing
0405B4             0937*  ; preserves: everything
0405B4             0938*  dumpFlags:
0405B4             0939*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0940*      push af ; this is so we can send it back unharmed
0405B5 F5          0941*      push af ; this is so we can pop it to hl
0405B6             0942*  ; store everything in scratch
0405B6 22 9F 05 04 0943*      ld (uhl),hl
0405BA ED 43 A2 05 0944*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0945*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0946*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0947*      ld (uiy),iy
       04          
0405CE             0948*  ; next we print the header
0405CE 21 FA 05 04 0949*      ld hl,@header
0405D2 CD 77 00 04 0950*      call printString
0405D6 E1          0951*      pop hl ; flags are now in l
0405D7 7D          0952*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0953*      call printBin8
0405DC CD 8C 00 04 0954*      call printNewLine
0405E0             0955*  ; restore everything
0405E0 2A 9F 05 04 0956*      ld hl, (uhl)
0405E4 ED 4B A2 05 0957*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0958*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0959*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0960*      ld iy, (uiy)
       04          
0405F8 F1          0961*      pop af ; send her home the way she came
0405F9 C9          0962*      ret
0405FA             0963*  ; Bit 7 (S): Sign flag
0405FA             0964*  ; Bit 6 (Z): Zero flag
0405FA             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0966*  ; Bit 4 (H): Half Carry flag
0405FA             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0969*  ; Bit 1 (N): Subtract flag
0405FA             0970*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0972*  
040605             0973*  ; set all the bits in the flag register
040605             0974*  ; more of an academic exercise than anything useful
040605             0975*  ; inputs; none
040605             0976*  ; outputs; a=0,f=255
040605             0977*  ; destroys: flags, hl
040605             0978*  ; preserves: a, because why not
040605             0979*  setAllFlags:
040605 21 FF 00 00 0980*      ld hl,255
040609 67          0981*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0982*      push hl
04060B F1          0983*      pop af
04060C C9          0984*      ret
04060D             0985*  
04060D             0986*  ; reset all the bits in the flag register
04060D             0987*  ; unlike its inverse counterpart, this may actually be useful
04060D             0988*  ; inputs; none
04060D             0989*  ; outputs; a=0,f=0
04060D             0990*  ; destroys: flags, hl
04060D             0991*  ; preserves: a, because why not
04060D             0992*  resetAllFlags:
04060D 21 00 00 00 0993*      ld hl,0
040611 67          0994*      ld h,a ; four cycles to preserve a is cheap
040612 E5          0995*      push hl
040613 F1          0996*      pop af
040614 C9          0997*      ret
040615             0998*  
040615             0999*  ; wait until user presses a key
040615             1000*  ; inputs: none
040615             1001*  ; outputs: ascii code of key pressed in a
040615             1002*  ; destroys: af,ix
040615             1003*  waitKeypress:
040615             1004*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 5B CF       0002*M 			RST.LIL	08h
040619 C9          1005*      ret
04061A             1006*  
04061A             1007*  ; print bytes from an address to the screen in hexidecimal format
04061A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1010*  ; destroys: nothing
04061A             1011*  dumpMemoryHex:
04061A             1012*  ; save registers to the stack
04061A C5          1013*      push bc
04061B E5          1014*      push hl
04061C F5          1015*      push af
04061D             1016*  
04061D             1017*  ; print the address and separator
04061D CD 97 00 04 1018*      call printHex24
040621 3E 3A       1019*      ld a,':'
040623 5B D7       1020*      rst.lil 10h
040625 3E 20       1021*      ld a,' '
040627 5B D7       1022*      rst.lil 10h
040629             1023*  
040629             1024*  ; set b to be our loop counter
040629 F1          1025*      pop af
04062A 47          1026*      ld b,a
04062B E1          1027*      pop hl
04062C E5          1028*      push hl
04062D F5          1029*      push af
04062E             1030*  @loop:
04062E             1031*  ; print the byte
04062E 7E          1032*      ld a,(hl)
04062F CD A5 00 04 1033*      call printHex8
040633             1034*  ; print a space
040633 3E 20       1035*      ld a,' '
040635 5B D7       1036*      rst.lil 10h
040637 23          1037*      inc hl
040638 10 F4       1038*      djnz @loop
04063A CD 8C 00 04 1039*      call printNewLine
04063E             1040*  
04063E             1041*  ; restore everything
04063E F1          1042*      pop af
04063F E1          1043*      pop hl
040640 C1          1044*      pop bc
040641             1045*  
040641             1046*  ; all done
040641 C9          1047*      ret
040642             1048*  
040642             1049*  
040642             1050*  ; print bytes from an address to the screen in binary format
040642             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1052*  ; outputs: values of each byte printed to screen separated by spaces
040642             1053*  ; destroys: nothing
040642             1054*  dumpMemoryBin:
040642             1055*  ; save all registers to the stack
040642 F5          1056*      push af
040643 C5          1057*      push bc
040644 D5          1058*      push de
040645 E5          1059*      push hl
040646 DD E5       1060*      push ix
040648 FD E5       1061*      push iy
04064A             1062*  
04064A             1063*  ; set b to be our loop counter
04064A 47          1064*      ld b,a
04064B             1065*  @loop:
04064B             1066*  ; print the byte
04064B 7E          1067*      ld a,(hl)
04064C E5          1068*      push hl
04064D C5          1069*      push bc
04064E CD 15 03 04 1070*      call printBin8
040652 C1          1071*      pop bc
040653             1072*  ; print a space
040653 3E 20       1073*      ld a,' '
040655 5B D7       1074*      rst.lil 10h
040657 E1          1075*      pop hl
040658 23          1076*      inc hl
040659 10 F0       1077*      djnz @loop
04065B CD 8C 00 04 1078*      call printNewLine
04065F             1079*  
04065F             1080*  ; restore everything
04065F FD E1       1081*      pop iy
040661 DD E1       1082*      pop ix
040663 E1          1083*      pop hl
040664 D1          1084*      pop de
040665 C1          1085*      pop bc
040666 F1          1086*      pop af
040667             1087*  ; all done
040667 C9          1088*      ret
040668             1089*  
040668             1090*  ; print bytes from an address to the screen in binary format
040668             1091*  ; with the bits of each byte in reverse order (lsb first)
040668             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1093*  ; outputs: values of each byte printed to screen separated by spaces
040668             1094*  ; destroys: nothing
040668             1095*  dumpMemoryBinRev:
040668             1096*  ; save all registers to the stack
040668 F5          1097*      push af
040669 C5          1098*      push bc
04066A D5          1099*      push de
04066B E5          1100*      push hl
04066C DD E5       1101*      push ix
04066E FD E5       1102*      push iy
040670             1103*  
040670             1104*  ; set b to be our loop counter
040670 47          1105*      ld b,a
040671             1106*  @loop:
040671             1107*  ; print the byte
040671 7E          1108*      ld a,(hl)
040672 E5          1109*      push hl
040673 C5          1110*      push bc
040674 CD 3A 03 04 1111*      call printBin8Rev
040678 C1          1112*      pop bc
040679             1113*  ; print a space
040679 3E 20       1114*      ld a,' '
04067B 5B D7       1115*      rst.lil 10h
04067D E1          1116*      pop hl
04067E 23          1117*      inc hl
04067F 10 F0       1118*      djnz @loop
040681 CD 8C 00 04 1119*      call printNewLine
040685             1120*  
040685             1121*  ; restore everything
040685 FD E1       1122*      pop iy
040687 DD E1       1123*      pop ix
040689 E1          1124*      pop hl
04068A D1          1125*      pop de
04068B C1          1126*      pop bc
04068C F1          1127*      pop af
04068D             1128*  ; all done
04068D C9          1129*      ret
04068E             0031       include "maths.inc"
04068E             0001*  ; test the sign of HL
04068E             0002*  ; inputs: HL obviously
04068E             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04068E             0004*  ; destroys: flags
04068E             0005*      MACRO sign_hlu
04068E             0006*      add hl,de
04068E             0007*      or a
04068E             0008*      sbc hl,de
04068E             0009*      ENDMACRO
04068E             0010*  
04068E             0011*  
04068E             0012*  ;------------------------------------------------------------------------
04068E             0013*  ; Scratch area for calculations
04068E             0014*  ;------------------------------------------------------------------------
04068E 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
040691 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040694             0017*  
040694             0018*  ; absolute value of hlu
040694             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040694             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040694             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040694             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040694             0023*  ; destroys: a
040694             0024*  hlu_abs:
040694 19          0025*      add hl,de
040695 B7          0026*      or a
040696 ED 52       0027*      sbc hl,de
040698 FA 9D 06 04 0028*      jp m,@is_neg
04069C C9          0029*      ret ; hlu is positive or zero so we're done
04069D             0030*  @is_neg:
04069D F5          0031*      push af ; otherwise, save current flags for return
04069E CD A4 06 04 0032*      call neg_hlu ; negate hlu
0406A2 F1          0033*      pop af ; get back flags
0406A3 C9          0034*      ret
0406A4             0035*  
0406A4             0036*  ; flip the sign of hlu
0406A4             0037*  ; inputs: hlu
0406A4             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406A4             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406A4             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406A4             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406A4             0042*  ; destroys a
0406A4             0043*  neg_hlu:
0406A4 D5          0044*      push de ; save de
0406A5 EB          0045*      ex de,hl ; put hl into de
0406A6 21 00 00 00 0046*      ld hl,0 ; clear hl
0406AA AF          0047*      xor a ; clear carry
0406AB ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406AD D1          0049*      pop de ; get de back
0406AE C9          0050*      ret ; easy peasy
0406AF             0051*  
0406AF             0052*  ;------------------------------------------------------------------------
0406AF             0053*  ; divide hlu by 2, inspired by above
0406AF             0054*  ;------------------------------------------------------------------------
0406AF             0055*  hlu_div2:
0406AF 22 8E 06 04 0056*      ld (scratch1),hl
0406B3 21 90 06 04 0057*      ld hl,scratch1+2
0406B7 CB 1E       0058*      rr (hl)
0406B9 2B          0059*      dec hl
0406BA CB 1E       0060*      rr (hl)
0406BC 2B          0061*      dec hl
0406BD CB 1E       0062*      rr (hl)
0406BF 23          0063*      inc hl
0406C0 23          0064*      inc hl
0406C1 2A 8E 06 04 0065*      ld hl,(scratch1)
0406C5 C9          0066*      ret
0406C6             0067*  
0406C6             0068*  ; this is my little hack to divide by 16
0406C6             0069*  hlu_div16:
0406C6 AF          0070*      xor a
0406C7 29          0071*      add hl,hl
0406C8 17          0072*      rla
0406C9 29          0073*      add hl,hl
0406CA 17          0074*      rla
0406CB 29          0075*      add hl,hl
0406CC 17          0076*      rla
0406CD 29          0077*      add hl,hl
0406CE 17          0078*      rla
0406CF 22 DC 06 04 0079*      ld (@scratch),hl
0406D3 32 DF 06 04 0080*      ld (@scratch+3),a
0406D7 2A DD 06 04 0081*      ld hl,(@scratch+1)
0406DB C9          0082*      ret
0406DC             0083*  @scratch: ds 4
0406E0             0084*  
0406E0             0085*  ; hlu signed division by 256
0406E0             0086*  ; returns: hlu / 256
0406E0             0087*  ; destroys: af
0406E0             0088*  hlu_sdiv256:
0406E0 AF          0089*      xor a ; assume hl is positive
0406E1 22 F7 06 04 0090*      ld (@buffer),hl
0406E5             0091*      sign_hlu
0406E5 19          0001*M     add hl,de
0406E6 B7          0002*M     or a
0406E7 ED 52       0003*M     sbc hl,de
0406E9 F2 EE 06 04 0092*      jp p,@hl_pos
0406ED 3D          0093*      dec a
0406EE             0094*  @hl_pos:
0406EE 32 FA 06 04 0095*      ld (@buffer+3),a
0406F2 2A F8 06 04 0096*      ld hl,(@buffer+1)
0406F6 C9          0097*      ret
0406F7             0098*  @buffer: ds 4
0406FB             0099*  
0406FB             0100*  ; hlu 1 byte right shift, unsigned
0406FB             0101*  ; returns: hlu / 256, fractional portion in a
0406FB             0102*  ; destroys: af
0406FB             0103*  hlu_udiv256:
0406FB AF          0104*      xor a
0406FC 32 0D 07 04 0105*      ld (@buffer+3),a
040700 7D          0106*      ld a,l ; save the fractional portion
040701 22 0A 07 04 0107*      ld (@buffer),hl
040705 2A 0B 07 04 0108*      ld hl,(@buffer+1)
040709 C9          0109*      ret
04070A             0110*  @buffer: ds 4
04070E             0111*  
04070E             0112*      MACRO hlu_mul256
04070E             0113*      add hl,hl ; * 2
04070E             0114*      add hl,hl ; * 4
04070E             0115*      add hl,hl ; * 8
04070E             0116*      add hl,hl ; * 16
04070E             0117*      add hl,hl ; * 32
04070E             0118*      add hl,hl ; * 64
04070E             0119*      add hl,hl ; * 128
04070E             0120*      add hl,hl ; * 256
04070E             0121*      ENDMACRO
04070E             0122*  
04070E             0123*  ; compute the modulo of hlu by deu
04070E             0124*  ; outputs: hlu = hlu % deu
04070E             0125*  ; destroys: f, hl
04070E             0126*  hlu_mod:
04070E B7          0127*      or a ; clear carry
04070F             0128*  @loop:
04070F ED 52       0129*      sbc hl,de
040711 DA 19 07 04 0130*      jp c, @end
040715 C3 0F 07 04 0131*      jp @loop
040719             0132*  @end:
040719 19          0133*      add hl,de
04071A C9          0134*      ret
04071B             0135*  
04071B             0136*  
04071B 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04071F 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
040723             0139*  
040723             0140*  ; set bcd values in a scratch memory address from registers bcde
040723             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
040723             0142*  ; destroys ; hl
040723             0143*  set_bcd:
040723 73          0144*      ld (hl),e
040724 23          0145*      inc hl
040725 72          0146*      ld (hl),d
040726 23          0147*      inc hl
040727 71          0148*      ld (hl),c
040728 23          0149*      inc hl
040729 70          0150*      ld (hl),b
04072A C9          0151*      ret
04072B             0152*  
04072B             0153*  ; load bcd values from a scratch memory address to bcde
04072B             0154*  ; input: hl; scratch address
04072B             0155*  ; output: bcde; 8-place bcd number
04072B             0156*  ; destroys: hl
04072B             0157*  get_bcd:
04072B 5E          0158*      ld e,(hl)
04072C 23          0159*      inc hl
04072D 56          0160*      ld d,(hl)
04072E 23          0161*      inc hl
04072F 4E          0162*      ld c,(hl)
040730 23          0163*      inc hl
040731 46          0164*      ld b,(hl)
040732 C9          0165*      ret
040733             0166*  
040733             0167*  ; BCD addition
040733             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040733             0169*  ;       a is the number of bytes holding each number (number of places/2)
040733             0170*  ; outputs: (hl) + (de) --> (hl)
040733             0171*  ; destroys: a,b,de,hl
040733             0172*  add_bcd:
040733 47          0173*      ld b,a ; loop counter
040734 AF          0174*      xor a ; reset a, clear carry flag
040735             0175*  adcec:
040735 1A          0176*      ld a,(de) ; addend to acc
040736 8E          0177*      adc a,(hl) ; add (hl) to acc
040737 27          0178*      daa ; adjust result to bcd
040738 77          0179*      ld (hl),a ; store result
040739 23          0180*      inc hl ; advance memory pointers
04073A 13          0181*      inc de
04073B 10 F8       0182*      djnz adcec ; loop until b == 0
04073D C9          0183*      ret
04073E             0184*  
04073E             0185*  ; BCD subtraction
04073E             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04073E             0187*  ;       a is the number of bytes holding each number (number of places/2)
04073E             0188*  ; outputs: (hl) - (de) --> (hl)
04073E             0189*  ; destroys: a,b,de,hl
04073E             0190*  sub_bcd:
04073E 47          0191*      ld b,a ; loop counter
04073F AF          0192*      xor a ; reset a,clear carry flag
040740             0193*  subdec:
040740 1A          0194*      ld a,(de) ; subtrahend to acc
040741 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040742 27          0196*      daa ; adjust result to bcd
040743 77          0197*      ld (hl),a ; store result
040744 23          0198*      inc hl ; advance memory pointers
040745 13          0199*      inc de
040746 10 F8       0200*      djnz subdec ; loop until b == 0
040748 C9          0201*      ret
040749             0202*  
040749             0203*  ; http://www.z80.info/pseudo-random.txt
040749             0204*  rand_8:
040749 C5          0205*      push bc
04074A 3A 5D 07 04 0206*      ld a,(r_seed)
04074E 4F          0207*      ld c,a
04074F             0208*  
04074F 0F          0209*      rrca ; multiply by 32
040750 0F          0210*      rrca
040751 0F          0211*      rrca
040752 EE 1F       0212*      xor 0x1f
040754             0213*  
040754 81          0214*      add a,c
040755 DE FF       0215*      sbc a,255 ; carry
040757             0216*  
040757 32 5D 07 04 0217*      ld (r_seed),a
04075B C1          0218*      pop bc
04075C C9          0219*      ret
04075D 50          0220*  r_seed: defb $50
04075E             0221*  
04075E             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04075E             0223*  prng24:
04075E             0224*  ;;Expects ADL mode.
04075E             0225*  ;;Output: HL
04075E             0226*  ;;50cc
04075E             0227*  ;;33 bytes
04075E             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04075E ED 5B 7F 07 0229*      ld de,(seed1)
       04          
040763 B7          0230*      or a
040764 ED 62       0231*      sbc hl,hl
040766 19          0232*      add hl,de
040767 29          0233*      add hl,hl
040768 29          0234*      add hl,hl
040769 2C          0235*      inc l
04076A 19          0236*      add hl,de
04076B 22 7F 07 04 0237*      ld (seed1),hl
04076F 2A 82 07 04 0238*      ld hl,(seed2)
040773 29          0239*      add hl,hl
040774 9F          0240*      sbc a,a
040775 E6 1B       0241*      and %00011011
040777 AD          0242*      xor l
040778 6F          0243*      ld l,a
040779 22 82 07 04 0244*      ld (seed2),hl
04077D 19          0245*      add hl,de
04077E C9          0246*      ret
04077F 00 00 00    0247*  seed1: dl 0
040782 00 00 00    0248*  seed2: dl 0
040785             0032       include "files.inc"
040785             0001*  ; load to onboard 8k sram
040785             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040785             0033       include "fixed168.inc"
040785             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040785             0002*  ; uses EZ80 MLT instruction for speed
040785             0003*  ; operation: UHL * A --> UHL
040785             0004*  ; destroys: AF, HL
040785             0005*  smul24x8:
040785             0006*  ; make hl positive and store sign flag
040785 CD 94 06 04 0007*      call hlu_abs
040789 F5          0008*      push af
04078A             0009*  ; do the division
04078A CD 95 07 04 0010*      call mul24x8 ; hl = product
04078E             0011*  ; adjust sign of result
04078E F1          0012*      pop af ; sign de
04078F F0          0013*      ret p ; hl was positive, nothing to do
040790 CD A4 06 04 0014*      call neg_hlu ; result is negative
040794 C9          0015*      ret
040795             0016*  
040795             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040795             0018*  ; uses EZ80 MLT instruction for speed
040795             0019*  ; operation: UHL * A --> AUHL
040795             0020*  ; destroys: AF, HL
040795             0021*  mul24x8:
040795 D5          0022*      push de ; preserve de
040796             0023*  ; low byte
040796 5D          0024*      ld e,l
040797 57          0025*      ld d,a
040798 ED 5C       0026*      mlt de
04079A 6B          0027*      ld l,e ; product low byte
04079B 08          0028*      ex af,af' ; save multiplier
04079C 7A          0029*      ld a,d ; carry
04079D 08          0030*      ex af,af' ; save carry, restore multiplier
04079E             0031*  ; high byte
04079E 5C          0032*      ld e,h
04079F 57          0033*      ld d,a
0407A0 ED 5C       0034*      mlt de
0407A2 08          0035*      ex af,af' ; save multiplier, restore carry
0407A3 83          0036*      add a,e ; add carry
0407A4 67          0037*      ld h,a ; product middle byte
0407A5 7A          0038*      ld a,d ; carry
0407A6 08          0039*      ex af,af' ; save carry, restore multiplier
0407A7             0040*  ; upper byte
0407A7 22 C2 07 04 0041*      ld (@scratch),hl ; 7 cycles
0407AB 5F          0042*      ld e,a
0407AC 3A C4 07 04 0043*      ld a,(@scratch+2)
0407B0 57          0044*      ld d,a
0407B1 ED 5C       0045*      mlt de
0407B3 08          0046*      ex af,af' ; restore carry
0407B4 8B          0047*      adc a,e ; add carry
0407B5 32 C4 07 04 0048*      ld (@scratch+2),a ; 5 cycles
0407B9 2A C2 07 04 0049*      ld hl,(@scratch) ; 7 cycles
0407BD             0050*  ; highest byte
0407BD 3E 00       0051*      ld a,0 ; preserve carry flag
0407BF 8A          0052*      adc a,d ; product highest byte
0407C0 D1          0053*      pop de ; restore de
0407C1 C9          0054*      ret
0407C2             0055*  @scratch: ds 3
0407C5             0056*  
0407C5 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0407CB             0058*  
0407CB             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0407CB             0060*  ; operation: UHL * UDE --> mul24out
0407CB             0061*  mul24:
0407CB DD E5       0062*      push ix ; preserve
0407CD             0063*  ; point to output buffer and clear it
0407CD DD 21 C5 07 0064*      ld ix,mul24out
       04          
0407D2 C5          0065*      push bc
0407D3 01 00 00 00 0066*      ld bc,0
0407D7 DD 0F 00    0067*      ld (ix),bc
0407DA DD 0F 03    0068*      ld (ix+3),bc
0407DD C1          0069*      pop bc
0407DE             0070*  ; STEP 1: UHL * E
0407DE 7B          0071*      ld a,e
0407DF E5          0072*      push hl
0407E0 CD 95 07 04 0073*      call mul24x8
0407E4 DD 2F 00    0074*      ld (ix+0),hl
0407E7 DD 77 03    0075*      ld (ix+3),a
0407EA             0076*  ; STEP 2: UHL * D
0407EA E1          0077*      pop hl
0407EB E5          0078*      push hl
0407EC 7A          0079*      ld a,d
0407ED CD 95 07 04 0080*      call mul24x8
0407F1 CD 0A 08 04 0081*      call @accumulate
0407F5             0082*  ; STEP 3: UHL * DEU
0407F5 E1          0083*      pop hl
0407F6 ED 53 3A 08 0084*      ld (@de),de
       04          
0407FB 3A 3C 08 04 0085*      ld a,(@de+2)
0407FF CD 95 07 04 0086*      call mul24x8
040803 CD 0A 08 04 0087*      call @accumulate
040807             0088*  ; all done
040807 DD E1       0089*      pop ix ; restore
040809 C9          0090*      ret
04080A             0091*  @accumulate:
04080A DD 23       0092*      inc ix
04080C             0093*  ; highest byte of product to carry
04080C DD 77 03    0094*      ld (ix+3),a
04080F             0095*  ; low byte of product
04080F 7D          0096*      ld a,l
040810 DD 86 00    0097*      add a,(ix+0)
040813 DD 77 00    0098*      ld (ix+0),a
040816             0099*  ; high byte of product
040816 7C          0100*      ld a,h
040817 DD 8E 01    0101*      adc a,(ix+1)
04081A DD 77 01    0102*      ld (ix+1),a
04081D             0103*  ; uppper byte of product
04081D 22 37 08 04 0104*      ld (@hl),hl
040821 3A 39 08 04 0105*      ld a,(@hl+2)
040825 DD 8E 02    0106*      adc a,(ix+2)
040828 DD 77 02    0107*      ld (ix+2),a
04082B             0108*  ; carry
04082B 3E 00       0109*      ld a,0 ; preserve flags
04082D DD 8E 03    0110*      adc a,(ix+3)
040830 DD 77 03    0111*      ld (ix+3),a
040833 C9          0112*      ret
040834             0113*  
040834 00 00 00    0114*  @ix: dl 0
040837 00 00 00    0115*  @hl: dl 0
04083A 00 00 00    0116*  @de: dl 0
04083D             0117*  
04083D             0118*  ; UHL * UDE --> UHL (unsigned)
04083D             0119*  umul24:
04083D CD CB 07 04 0120*      call mul24
040841 2A C5 07 04 0121*      ld hl,(mul24out)
040845 C9          0122*      ret
040846             0123*  
040846             0124*  ; UH.L = UH.L*UD.E (unsigned)
040846             0125*  umul168:
040846 CD CB 07 04 0126*      call mul24
04084A 2A C6 07 04 0127*      ld hl,(mul24out+1)
04084E C9          0128*      ret
04084F             0129*  
04084F             0130*  ; UH.L * UD.E --> UH.L (signed)
04084F             0131*  smul168:
04084F             0132*  ; make everything positive and store sign flags
04084F CD 94 06 04 0133*      call hlu_abs
040853 F5          0134*      push af
040854 EB          0135*      ex de,hl
040855 CD 94 06 04 0136*      call hlu_abs
040859 EB          0137*      ex de,hl
04085A F5          0138*      push af
04085B             0139*  ; do the division
04085B CD 46 08 04 0140*      call umul168 ; hl = product
04085F             0141*  ; adjust sign of result
04085F F1          0142*      pop af ; sign de
040860 FA 6B 08 04 0143*      jp m,@de_neg
040864 F1          0144*      pop af ; sign hl
040865 F0          0145*      ret p ; both positive, nothing to do
040866             0146*  @hl_neg:
040866 CD A4 06 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04086A C9          0148*      ret
04086B             0149*  @de_neg:
04086B F1          0150*      pop af
04086C F8          0151*      ret m ; both negative, nothing to do
04086D CD A4 06 04 0152*      call neg_hlu ; result is negative
040871 C9          0153*      ret
040872             0154*  
040872             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040872             0156*  ; perform unsigned division of 16.8 fixed place values
040872             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040872             0158*  udiv168:
040872             0159*  ; back up divisor
040872 ED 53 A9 08 0160*      ld (@ude),de
       04          
040877             0161*  ; get the 16-bit integer part of the quotient
040877 CD DA 08 04 0162*      call udiv24 ; de = quotient, hl = remainder
04087B             0163*  ; load quotient to upper three bytes of output
04087B ED 53 B0 08 0164*      ld (div168_out+1),de
       04          
040880             0165*  @div256:
040880             0166*  ; multiply remainder by 256
040880             0167*      hlu_mul256
040880 29          0001*M     add hl,hl ; * 2
040881 29          0002*M     add hl,hl ; * 4
040882 29          0003*M     add hl,hl ; * 8
040883 29          0004*M     add hl,hl ; * 16
040884 29          0005*M     add hl,hl ; * 32
040885 29          0006*M     add hl,hl ; * 64
040886 29          0007*M     add hl,hl ; * 128
040887 29          0008*M     add hl,hl ; * 256
040888             0168*  ; skip fractional computation if remainder is zero
040888             0169*      sign_hlu
040888 19          0001*M     add hl,de
040889 B7          0002*M     or a
04088A ED 52       0003*M     sbc hl,de
04088C 20 03       0170*      jr nz,@div_frac
04088E AF          0171*      xor a
04088F 18 0A       0172*      jr @write_frac
040891             0173*  ; now divide the shifted remainder by the divisor
040891             0174*  @div_frac:
040891 ED 5B A9 08 0175*      ld de,(@ude) ; get back divisor
       04          
040896 CD DA 08 04 0176*      call udiv24 ; de = quotient, hl = remainder
04089A             0177*  ; load low byte of quotient to low byte of output
04089A 7B          0178*      ld a,e
04089B             0179*  @write_frac:
04089B 32 AF 08 04 0180*      ld (div168_out),a
04089F             0181*  ; load de with return value
04089F ED 5B AF 08 0182*      ld de,(div168_out)
       04          
0408A4             0183*  ; load a with any overflow
0408A4 3A B2 08 04 0184*      ld a,(div168_out+3)
0408A8 C9          0185*      ret ; ud.e is the 16.8 result
0408A9             0186*  @ude: ds 6
0408AF             0187*  div168_out: ds 4 ; the extra byte is for overflow
0408B3             0188*  
0408B3             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0408B3             0190*  ; perform signed division of 16.8 fixed place values
0408B3             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0408B3             0192*  sdiv168:
0408B3             0193*  ; make everything positive and store sign flags
0408B3 CD 94 06 04 0194*      call hlu_abs
0408B7 F5          0195*      push af
0408B8 EB          0196*      ex de,hl
0408B9 CD 94 06 04 0197*      call hlu_abs
0408BD EB          0198*      ex de,hl
0408BE F5          0199*      push af
0408BF             0200*  ; do the division
0408BF CD 72 08 04 0201*      call udiv168 ; de = quotient, hl = remainder
0408C3             0202*  ; adjust sign of result
0408C3 F1          0203*      pop af ; sign de
0408C4 FA D1 08 04 0204*      jp m,@de_neg
0408C8 F1          0205*      pop af ; sign hl
0408C9 F0          0206*      ret p ; both positive, nothing to do
0408CA             0207*  @hl_neg:
0408CA EB          0208*      ex de,hl ; hl = quotient, de = remainder
0408CB CD A4 06 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0408CF EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0408D0 C9          0211*      ret
0408D1             0212*  @de_neg:
0408D1 F1          0213*      pop af
0408D2 F8          0214*      ret m ; both negative, nothing to do
0408D3 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0408D4 CD A4 06 04 0216*      call neg_hlu ; result is negative
0408D8 EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0408D9 C9          0218*      ret
0408DA             0219*  
0408DA             0220*  ;------------------------------------------------------------------------
0408DA             0221*  ;  arith24.asm
0408DA             0222*  ;  24-bit ez80 arithmetic routines
0408DA             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0408DA             0224*  ;  MIT license
0408DA             0225*  ;
0408DA             0226*  ;  This library was created as a tool to help make ez80
0408DA             0227*  ;  24-bit native assembly routines for simple mathematical problems
0408DA             0228*  ;  more widely available.
0408DA             0229*  ;
0408DA             0230*  ;------------------------------------------------------------------------
0408DA             0231*  ;
0408DA             0232*  ;------------------------------------------------------------------------
0408DA             0233*  ; udiv24
0408DA             0234*  ; Unsigned 24-bit division
0408DA             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0408DA             0236*  ;
0408DA             0237*  ; Uses AF BC DE HL
0408DA             0238*  ; Uses Restoring Division algorithm
0408DA             0239*  ;------------------------------------------------------------------------
0408DA             0240*  
0408DA             0241*  udiv24:
0408DA E5          0242*      push hl
0408DB C1          0243*      pop bc ;move dividend to BCU
0408DC 21 00 00 00 0244*      ld hl,0 ;result
0408E0 A7          0245*      and a
0408E1 ED 52       0246*      sbc hl,de ;test for div by 0
0408E3 C8          0247*      ret z ;it's zero, carry flag is clear
0408E4 19          0248*      add hl,de ;HL is 0 again
0408E5 3E 18       0249*      ld a,24 ;number of loops through.
0408E7             0250*  udiv1:
0408E7 C5          0251*      push bc ;complicated way of doing this because of lack of access to top bits
0408E8 E3          0252*      ex (sp),hl
0408E9 37          0253*      scf
0408EA ED 6A       0254*      adc hl,hl
0408EC E3          0255*      ex (sp),hl
0408ED C1          0256*      pop bc ;we now have bc = (bc * 2) + 1
0408EE             0257*  
0408EE ED 6A       0258*      adc hl,hl
0408F0 A7          0259*      and a ;is this the bug
0408F1 ED 52       0260*      sbc hl,de
0408F3 30 02       0261*      jr nc,udiv2
0408F5 19          0262*      add hl,de
0408F6             0263*  ;	dec	c
0408F6 0B          0264*      dec bc
0408F7             0265*  udiv2:
0408F7 3D          0266*      dec a
0408F8 20 ED       0267*      jr nz,udiv1
0408FA 37          0268*      scf ;flag used for div0 error
0408FB C5          0269*      push bc
0408FC D1          0270*      pop de ;remainder
0408FD C9          0271*      ret
0408FE             0272*  
0408FE             0273*  ;------------------------------------------------------------------------
0408FE             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
0408FE             0275*  ;------------------------------------------------------------------------
0408FE             0276*  
0408FE             0277*  
0408FE             0278*      ; include "trig24fast.inc"
0408FE             0279*  
0408FE             0280*  
0408FE             0281*  ; convert signed angles from a 360 to 256 degree circle
0408FE             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0408FE             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0408FE             0284*  ; destroys: TODO
0408FE             0285*  deg_360_to_256:
0408FE D5          0286*      push de ; preserve de
0408FF             0287*  ; make angle positive and store sign flag
0408FF CD 94 06 04 0288*      call hlu_abs
040903 F5          0289*      push af
040904             0290*  ; multiply by coversion factor of 256/360
040904 11 B6 00 00 0291*      ld de,0x0000B6 ; 0.711
040908 CD 46 08 04 0292*      call umul168 ; uh.l = uh.l * 0.711
04090C             0293*  ; restore sign flag and adjust output accordingly
04090C F1          0294*      pop af
04090D F2 15 09 04 0295*      jp p,@pos ; positive number
040911 CD A4 06 04 0296*      call neg_hlu
040915             0297*  @pos:
040915             0298*  ; restore de and return uh.l as the result
040915 D1          0299*      pop de
040916 C9          0300*      ret
040917             0301*  
040917             0302*  ; convert signed angles from a 256 to 360 degree circle
040917             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040917             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040917             0305*  ; destroys: TODO
040917             0306*  deg_256_to_360:
040917 D5          0307*      push de ; preserve de
040918             0308*  ; make angle positive and store sign flag
040918 CD 94 06 04 0309*      call hlu_abs
04091C F5          0310*      push af
04091D             0311*  ; multiply by coversion factor of 360/256
04091D 11 68 01 00 0312*      ld de,0x000168 ; 1.406
040921 CD 46 08 04 0313*      call umul168 ; uh.l = uh.l * 1.406
040925             0314*  ; restore sign flag and adjust output accordingly
040925 F1          0315*      pop af
040926 F2 2E 09 04 0316*      jp p,@pos ; positive number
04092A CD A4 06 04 0317*      call neg_hlu
04092E             0318*  @pos:
04092E             0319*  ; restore de and return uh.l as the result
04092E D1          0320*      pop de
04092F C9          0321*      ret
040930             0322*  
040930             0323*  ; fixed 16.8 routine
040930             0324*  ; cos(uh.l) --> uh.l
040930             0325*  ; destroys: f, hl
040930             0326*  cos168:
040930 D5          0327*      push de ; preserve de
040931             0328*  ; for cos we simply increment the angle by 90 degrees
040931             0329*  ; or 0x004000 in 16.8 degrees256
040931             0330*  ; which makes it a sin problem
040931 11 00 40 00 0331*      ld de,0x004000
040935 19          0332*      add hl,de ; modulo 256 happens below
040936 D1          0333*      pop de ; restore de
040937             0334*  ; fall through to sin168
040937             0335*  
040937             0336*  ; ---------------------
040937             0337*  ; fixed 16.8 routine
040937             0338*  ; sin(uh.l) --> uh.l
040937             0339*  ; destroys: f, hl
040937             0340*  sin168:
040937 D5          0341*      push de
040938             0342*  ; handle negative angles appropriately
040938 CD 94 06 04 0343*      call hlu_abs
04093C F2 45 09 04 0344*      jp p,@F
040940 11 00 00 FF 0345*      ld de,-256*256
040944 19          0346*      add hl,de
040945             0347*  @@:
040945 2E 03       0348*      ld l,3 ; multiply by 3 to get our lookup index
040947 ED 6C       0349*      mlt hl
040949 11 94 0B 04 0350*      ld de,sin_lut_168 ; grab the lut address
04094D 19          0351*      add hl,de ; bump hl by the index
04094E ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
040950 D1          0353*      pop de
040951 C9          0354*      ret
040952             0355*  
040952             0356*  ; 16.8 fixed inputs / outputs
040952             0357*  ; takes: uh.l as angle in degrees 256
040952             0358*  ;        ud.e as radius
040952             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040952             0360*  ;        displacements from origin (0,0)
040952             0361*  ; destroys: everything except indexes
040952             0362*  polar_to_cartesian:
040952             0363*  ; back up input parameters
040952 22 81 09 04 0364*      ld (@angle), hl
040956 ED 53 84 09 0365*      ld (@radius), de
       04          
04095B             0366*  ; compute dx = sin(uh.l) * ud.e
04095B CD 37 09 04 0367*      call sin168 ; uh.l = sin(uh.l)
04095F ED 5B 84 09 0368*      ld de,(@radius)
       04          
040964 CD 4F 08 04 0369*      call smul168 ; uh.l = dx
040968 E5          0370*      push hl
040969             0371*  ; compute dy = -cos(uh.l) * ud.e
040969 2A 81 09 04 0372*      ld hl,(@angle)
04096D CD 30 09 04 0373*      call cos168 ; uh.l = cos(uh.l)
040971 ED 5B 84 09 0374*      ld de,(@radius)
       04          
040976 CD 4F 08 04 0375*      call smul168 ; uh.l = dy
04097A CD A4 06 04 0376*      call neg_hlu ; invert dy for screen coords convention
04097E EB          0377*      ex de,hl ; de = dy for output
04097F C1          0378*      pop bc ; bc = dx for output
040980             0379*  ; and out
040980 C9          0380*      ret
040981             0381*  @angle: ds 3
040984             0382*  @radius: ds 3
040987             0383*  
040987             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040987             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040987             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040987             0387*  ;         also populates scratch locations dx168 and dy168
040987             0388*  ; destroys: a,hl,bc,de
040987             0389*  dxy168:
040987             0390*  ; compute dx = x1-x0
040987 AF          0391*      xor a ; clear carry
040988 DD E5       0392*      push ix ; move ix to hl via the stack
04098A E1          0393*      pop hl ; hl = x1
04098B ED 42       0394*      sbc hl,bc ; hl = dx
04098D 22 A2 09 04 0395*      ld (dx168),hl ; dx to scratch
040991             0396*  ; compute dy = y1-y0
040991 AF          0397*      xor a ; clear carry
040992 FD E5       0398*      push iy ; move iy to hl via the stack
040994 E1          0399*      pop hl ; hl = y1
040995 ED 52       0400*      sbc hl,de ; hl = dy
040997 22 A8 09 04 0401*      ld (dy168),hl ; dy to scratch
04099B             0402*  ; populate output registers and return
04099B EB          0403*      ex de,hl ; ud.e = dy
04099C ED 4B A2 09 0404*      ld bc,(dx168) ; ub.c = dx
       04          
0409A1 C9          0405*      ret
0409A2 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0409A8 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0409AE             0408*  
0409AE             0409*  ; compute the euclidian distance between two cartesian coordinates
0409AE             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0409AE             0411*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0409AE             0412*  ; output; uh.l is the 16.8 fixed format distance
0409AE             0413*  ;         also populates scratch locations dx168 and dy168
0409AE             0414*  ; destroys: a,hl,bc,de
0409AE             0415*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0409AE             0416*  ;       thus the result will always be an integer, albeit in 16.8 format
0409AE             0417*  distance168:
0409AE             0418*  ; compute dy^2
0409AE 2A A8 09 04 0419*      ld hl,(dy168)
0409B2 CD 94 06 04 0420*      call hlu_abs
0409B6 CD FB 06 04 0421*      call hlu_udiv256 ; make integer to avoid overflow
0409BA E5          0422*      push hl
0409BB D1          0423*      pop de
0409BC CD 3D 08 04 0424*      call umul24 ; hl = dy^2
0409C0 E5          0425*      push hl ; save dy^2
0409C1             0426*  ; compute dx^2
0409C1 2A A2 09 04 0427*      ld hl,(dx168)
0409C5 CD 94 06 04 0428*      call hlu_abs
0409C9 CD FB 06 04 0429*      call hlu_udiv256 ; make integer to avoid overflow
0409CD E5          0430*      push hl
0409CE D1          0431*      pop de
0409CF CD 3D 08 04 0432*      call umul24 ; hl = dx^2
0409D3             0433*  ; add dx^2 and dy^2
0409D3 D1          0434*      pop de ; de = dy^2 (was hl)
0409D4 19          0435*      add hl,de ; hl = dx^2 + dy^2
0409D5             0436*  ; compute the square root
0409D5 CD AE 0A 04 0437*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
0409D9 EB          0438*      ex de,hl ; hl = distance
0409DA             0439*      hlu_mul256 ; convert back to 16.8 fixed
0409DA 29          0001*M     add hl,hl ; * 2
0409DB 29          0002*M     add hl,hl ; * 4
0409DC 29          0003*M     add hl,hl ; * 8
0409DD 29          0004*M     add hl,hl ; * 16
0409DE 29          0005*M     add hl,hl ; * 32
0409DF 29          0006*M     add hl,hl ; * 64
0409E0 29          0007*M     add hl,hl ; * 128
0409E1 29          0008*M     add hl,hl ; * 256
0409E2 C9          0440*      ret
0409E3             0441*  
0409E3             0442*  ; atan2_(ub.c,ud.e) --> uh.l
0409E3             0443*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0409E3             0444*  ;   whether inputs are integers or fractional doesn't matter
0409E3             0445*  ;   so long as the sign bit of the upper byte is correct
0409E3             0446*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0409E3             0447*  ; angles are COMPASS HEADINGS based on
0409E3             0448*  ; screen coordinate conventions,where the y axis is flipped
0409E3             0449*  ; #E0 224      0       32 #20
0409E3             0450*  ;        -x,-y | +x,-y
0409E3             0451*  ; #C0 192------+------ 64 #40
0409E3             0452*  ;        -x,+y | +x,+y
0409E3             0453*  ; #A0 160   128 #80   96 #60
0409E3             0454*  atan2_168fast:
0409E3             0455*  ; get signs and make everything positive
0409E3             0456*  ; get abs(x) and store its original sign
0409E3 C5          0457*      push bc
0409E4 E1          0458*      pop hl
0409E5 CD 94 06 04 0459*      call hlu_abs ; if x was negative this also sets the sign flag
0409E9 E5          0460*      push hl ; store abs(x)
0409EA C1          0461*      pop bc ; bc = abs(x)
0409EB F5          0462*      push af ; store sign of x
0409EC             0463*  ; get abs(y) and store its original sign
0409EC EB          0464*      ex de,hl ; hl = y
0409ED CD 94 06 04 0465*      call hlu_abs ; if y was negative this also sets the sign flag
0409F1 EB          0466*      ex de,hl ; de = abs(y)
0409F2 F5          0467*      push af ; store sign of y
0409F3             0468*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0409F3             0469*  ; this ensures that our lookup value is between 0 and 1 inclusive
0409F3 AF          0470*      xor a ; clear the carry flag
0409F4 D5          0471*      push de
0409F5 E1          0472*      pop hl
0409F6 ED 42       0473*      sbc hl,bc
0409F8 F5          0474*      push af ; save sign of de - bc
0409F9 F2 02 0A 04 0475*      jp p,@1 ; bc <= de, so we skip ahead
0409FD             0476*  ; otherwise we swap bc and de
0409FD C5          0477*      push bc
0409FE E1          0478*      pop hl
0409FF EB          0479*      ex de,hl
040A00 E5          0480*      push hl
040A01 C1          0481*      pop bc
040A02             0482*  @1:
040A02             0483*  ; now we're ready to snag our preliminary result
040A02 C5          0484*      push bc
040A03 E1          0485*      pop hl
040A04 CD 72 0A 04 0486*      call atan_168fast ; uh.l comes back with prelim result
040A08             0487*  ; now we adjust uh.l based on sign of de - bc
040A08 F1          0488*      pop af
040A09 F2 15 0A 04 0489*      jp p,@2 ; bc <= de,so we skip ahead
040A0D EB          0490*      ex de,hl
040A0E 21 00 40 00 0491*      ld hl,64*256 ; subtract from 64 (90) degrees
040A12 AF          0492*      xor a ; clear the carry flag
040A13 ED 52       0493*      sbc hl,de
040A15             0494*  @2:
040A15             0495*  ; adjust the result based on quadrant
040A15             0496*  ; #E0 224      0       32 #20
040A15             0497*  ;        -x,-y | +x,-y
040A15             0498*  ; #C0 192------+------ 64 #40
040A15             0499*  ;        -x,+y | +x,+y
040A15             0500*  ; #A0 160   128 #80   96 #60
040A15 F1          0501*      pop af ; sign of y
040A16 CA 53 0A 04 0502*      jp z,@y_zero
040A1A F2 33 0A 04 0503*      jp p,@y_pos
040A1E             0504*  ; y neg,check x
040A1E F1          0505*      pop af ; sign of x
040A1F CA 2D 0A 04 0506*      jp z,@y_neg_x_zero
040A23 F2 32 0A 04 0507*      jp p,@y_neg_x_pos
040A27             0508*  ; y neg,x neg
040A27             0509*  ; angle is 128 to 256 (270 to 360)
040A27             0510*  ; negating the intermediate does the trick
040A27 CD A4 06 04 0511*      call neg_hlu
040A2B 18 31       0512*      jr @zero_hlu
040A2D             0513*  
040A2D             0514*  @y_neg_x_zero:
040A2D             0515*  ; y neg,x zero
040A2D             0516*  ; angle is 0
040A2D 21 00 00 00 0517*      ld hl,0
040A31 C9          0518*      ret
040A32             0519*  @y_neg_x_pos:
040A32             0520*  ; y neg,x pos
040A32             0521*  ; angle is 0 to 64 (0 to 90)
040A32             0522*  ; so we're good
040A32 C9          0523*      ret
040A33             0524*  
040A33             0525*  @y_pos:
040A33 F1          0526*      pop af ; sign of x
040A34 CA 43 0A 04 0527*      jp z,@y_pos_x_zero
040A38 F2 48 0A 04 0528*      jp p,@y_pos_x_pos
040A3C             0529*  ; y pos,x neg
040A3C             0530*  ; angle is 128 to 192 (180-270)
040A3C             0531*  ; so we add 128 to intermediate
040A3C 11 00 80 00 0532*      ld de,128*256
040A40 19          0533*      add hl,de
040A41 18 1B       0534*      jr @zero_hlu
040A43             0535*  @y_pos_x_zero:
040A43             0536*  ; y pos,x zero
040A43             0537*  ; angle is 128 (180)
040A43 21 00 80 00 0538*      ld hl,128*256
040A47 C9          0539*      ret
040A48             0540*  @y_pos_x_pos:
040A48             0541*  ; y pos,x pos
040A48             0542*  ; angle is 64 to 128 (90 to 180)
040A48             0543*  ; neg the intermediate and add 180 degrees
040A48 CD A4 06 04 0544*      call neg_hlu
040A4C 11 00 80 00 0545*      ld de,128*256
040A50 19          0546*      add hl,de
040A51 18 0B       0547*      jr @zero_hlu
040A53             0548*  
040A53             0549*  @y_zero:
040A53 F1          0550*      pop af ; sign of x
040A54 FA 59 0A 04 0551*      jp m,@y_zero_x_neg
040A58             0552*  ; y zero,x pos
040A58             0553*  ; angle is 64 (90),nothing to do
040A58 C9          0554*      ret
040A59             0555*  @y_zero_x_neg:
040A59             0556*  ; y zero ,x neg
040A59             0557*  ; angle is 192 (270)
040A59 21 00 C0 00 0558*      ld hl,192*256
040A5D C9          0559*      ret
040A5E             0560*  @zero_hlu:
040A5E AF          0561*      xor a
040A5F 22 6C 0A 04 0562*      ld (@scratch),hl
040A63 32 6E 0A 04 0563*      ld (@scratch+2),a
040A67 2A 6C 0A 04 0564*      ld hl,(@scratch)
040A6B C9          0565*      ret
040A6C             0566*  @scratch: ds 6
040A72             0567*  
040A72             0568*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A72             0569*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040A72             0570*  ; destroys: a,hl,bc,de
040A72             0571*  ; note: only works for angles from 0 to 32 (45) degrees
040A72             0572*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040A72             0573*  atan_168fast:
040A72             0574*  ; because we use compass headings instead of geometric angles
040A72             0575*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040A72             0576*  ; we can do faster unsigned division here because we know dx and dy are positive
040A72 CD 72 08 04 0577*      call udiv168 ; ud.e = dx/dy
040A76 EB          0578*      ex de,hl ; uh.l = dx/dy
040A77             0579*  ; test uh.l for 0
040A77 19          0580*      add hl,de
040A78 B7          0581*      or a
040A79 ED 52       0582*      sbc hl,de
040A7B 28 22       0583*      jr z,@is_zero
040A7D             0584*  ; test uh.l for 1
040A7D AF          0585*      xor a ; clear carry
040A7E EB          0586*      ex de,hl
040A7F 21 00 01 00 0587*      ld hl,1*256 ; 1 in 16.8 fixed format
040A83 ED 52       0588*      sbc hl,de
040A85 28 13       0589*      jr z,@is_45
040A87 EB          0590*      ex de,hl
040A88             0591*  ; no special cases so we move on
040A88             0592*  ; l contains the fractional portion of tan(uh.l)
040A88             0593*  ; we multiply it by three to get our lookup table index
040A88 26 03       0594*      ld h,3
040A8A ED 6C       0595*      mlt hl ; index into lut
040A8C 11 00 00 00 0596*      ld de,0 ; clear deu
040A90 54          0597*      ld d,h ; copy hl to de
040A91 5D          0598*      ld e,l ; de contains our index
040A92 21 97 0E 04 0599*      ld hl,atan_lut_168 ; grab the lut address
040A96 19          0600*      add hl,de ; bump hl by the index
040A97 ED 27       0601*      ld hl,(hl) ; don't try this on a z80!
040A99 C9          0602*      ret ; and out
040A9A             0603*  @is_45:
040A9A 21 00 40 00 0604*      ld hl,64*256
040A9E C9          0605*      ret
040A9F             0606*  ; for the case tan(0)
040A9F             0607*  @is_zero:
040A9F 21 00 00 00 0608*      ld hl,0*256
040AA3 C9          0609*      ret
040AA4             0610*  
040AA4             0611*  ; Expects  ADL mode
040AA4             0612*  ; Inputs:  UH.L
040AA4             0613*  ; Outputs: UH.L is the 16.8 square root
040AA4             0614*  ;          UDE is the integer difference inputHL-DE^2
040AA4             0615*  sqrt168:
040AA4 CD AE 0A 04 0616*      call sqrt24
040AA8 EB          0617*      ex de,hl
040AA9 29          0618*      add hl,hl
040AAA 29          0619*      add hl,hl
040AAB 29          0620*      add hl,hl
040AAC 29          0621*      add hl,hl
040AAD C9          0622*      ret
040AAE             0623*  
040AAE             0624*  ; credit: xeda112358
040AAE             0625*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040AAE             0626*  sqrt24:
040AAE             0627*  ; Expects ADL mode
040AAE             0628*  ; Inputs: HL
040AAE             0629*  ; Outputs: DE is the integer square root
040AAE             0630*  ;  HL is the difference inputHL-DE^2
040AAE             0631*  ;  c flag reset
040AAE 01 00 00 00 0632*      ld bc,0 ; clear bcu
040AB2 11 00 00 00 0633*      ld de,0 ; clear deu
040AB6 AF          0634*      xor a
040AB7 45          0635*      ld b,l
040AB8 C5          0636*      push bc
040AB9 47          0637*      ld b,a
040ABA 6F          0638*      ld l,a
040ABB             0639*  ; Iteration 1
040ABB 29          0640*      add hl,hl
040ABC CB 11       0641*      rl c
040ABE 29          0642*      add hl,hl
040ABF CB 11       0643*      rl c
040AC1 91          0644*      sub c
040AC2 30 04       0645*      jr nc,$+6
040AC4 1C          0646*      inc e
040AC5 1C          0647*      inc e
040AC6 2F          0648*      cpl
040AC7 4F          0649*      ld c,a
040AC8             0650*  ; Iteration 2
040AC8 29          0651*      add hl,hl
040AC9 CB 11       0652*      rl c
040ACB 29          0653*      add hl,hl
040ACC CB 11       0654*      rl c
040ACE CB 13       0655*      rl e
040AD0 7B          0656*      ld a,e
040AD1 91          0657*      sub c
040AD2 30 04       0658*      jr nc,$+6
040AD4 1C          0659*      inc e
040AD5 1C          0660*      inc e
040AD6 2F          0661*      cpl
040AD7 4F          0662*      ld c,a
040AD8             0663*  ; Iteration 3
040AD8 29          0664*      add hl,hl
040AD9 CB 11       0665*      rl c
040ADB 29          0666*      add hl,hl
040ADC CB 11       0667*      rl c
040ADE CB 13       0668*      rl e
040AE0 7B          0669*      ld a,e
040AE1 91          0670*      sub c
040AE2 30 04       0671*      jr nc,$+6
040AE4 1C          0672*      inc e
040AE5 1C          0673*      inc e
040AE6 2F          0674*      cpl
040AE7 4F          0675*      ld c,a
040AE8             0676*  ; Iteration 4
040AE8 29          0677*      add hl,hl
040AE9 CB 11       0678*      rl c
040AEB 29          0679*      add hl,hl
040AEC CB 11       0680*      rl c
040AEE CB 13       0681*      rl e
040AF0 7B          0682*      ld a,e
040AF1 91          0683*      sub c
040AF2 30 04       0684*      jr nc,$+6
040AF4 1C          0685*      inc e
040AF5 1C          0686*      inc e
040AF6 2F          0687*      cpl
040AF7 4F          0688*      ld c,a
040AF8             0689*  ; Iteration 5
040AF8 29          0690*      add hl,hl
040AF9 CB 11       0691*      rl c
040AFB 29          0692*      add hl,hl
040AFC CB 11       0693*      rl c
040AFE CB 13       0694*      rl e
040B00 7B          0695*      ld a,e
040B01 91          0696*      sub c
040B02 30 04       0697*      jr nc,$+6
040B04 1C          0698*      inc e
040B05 1C          0699*      inc e
040B06 2F          0700*      cpl
040B07 4F          0701*      ld c,a
040B08             0702*  ; Iteration 6
040B08 29          0703*      add hl,hl
040B09 CB 11       0704*      rl c
040B0B 29          0705*      add hl,hl
040B0C CB 11       0706*      rl c
040B0E CB 13       0707*      rl e
040B10 7B          0708*      ld a,e
040B11 91          0709*      sub c
040B12 30 04       0710*      jr nc,$+6
040B14 1C          0711*      inc e
040B15 1C          0712*      inc e
040B16 2F          0713*      cpl
040B17 4F          0714*      ld c,a
040B18             0715*  ; Iteration 7
040B18 29          0716*      add hl,hl
040B19 CB 11       0717*      rl c
040B1B 29          0718*      add hl,hl
040B1C CB 11       0719*      rl c
040B1E CB 10       0720*      rl b
040B20 EB          0721*      ex de,hl
040B21 29          0722*      add hl,hl
040B22 E5          0723*      push hl
040B23 ED 42       0724*      sbc hl,bc
040B25 30 06       0725*      jr nc,$+8
040B27 7C          0726*      ld a,h
040B28 2F          0727*      cpl
040B29 47          0728*      ld b,a
040B2A 7D          0729*      ld a,l
040B2B 2F          0730*      cpl
040B2C 4F          0731*      ld c,a
040B2D E1          0732*      pop hl
040B2E 30 02       0733*      jr nc,$+4
040B30 23          0734*      inc hl
040B31 23          0735*      inc hl
040B32 EB          0736*      ex de,hl
040B33             0737*  ; Iteration 8
040B33 29          0738*      add hl,hl
040B34 69          0739*      ld l,c
040B35 60          0740*      ld h,b
040B36 ED 6A       0741*      adc hl,hl
040B38 ED 6A       0742*      adc hl,hl
040B3A EB          0743*      ex de,hl
040B3B 29          0744*      add hl,hl
040B3C ED 52       0745*      sbc hl,de
040B3E 19          0746*      add hl,de
040B3F EB          0747*      ex de,hl
040B40 30 04       0748*      jr nc,$+6
040B42 ED 52       0749*      sbc hl,de
040B44 13          0750*      inc de
040B45 13          0751*      inc de
040B46             0752*  ; Iteration 9
040B46 F1          0753*      pop af
040B47 17          0754*      rla
040B48 ED 6A       0755*      adc hl,hl
040B4A 17          0756*      rla
040B4B ED 6A       0757*      adc hl,hl
040B4D EB          0758*      ex de,hl
040B4E 29          0759*      add hl,hl
040B4F ED 52       0760*      sbc hl,de
040B51 19          0761*      add hl,de
040B52 EB          0762*      ex de,hl
040B53 30 04       0763*      jr nc,$+6
040B55 ED 52       0764*      sbc hl,de
040B57 13          0765*      inc de
040B58 13          0766*      inc de
040B59             0767*  ; Iteration 10
040B59 17          0768*      rla
040B5A ED 6A       0769*      adc hl,hl
040B5C 17          0770*      rla
040B5D ED 6A       0771*      adc hl,hl
040B5F EB          0772*      ex de,hl
040B60 29          0773*      add hl,hl
040B61 ED 52       0774*      sbc hl,de
040B63 19          0775*      add hl,de
040B64 EB          0776*      ex de,hl
040B65 30 04       0777*      jr nc,$+6
040B67 ED 52       0778*      sbc hl,de
040B69 13          0779*      inc de
040B6A 13          0780*      inc de
040B6B             0781*  ; Iteration 11
040B6B 17          0782*      rla
040B6C ED 6A       0783*      adc hl,hl
040B6E 17          0784*      rla
040B6F ED 6A       0785*      adc hl,hl
040B71 EB          0786*      ex de,hl
040B72 29          0787*      add hl,hl
040B73 ED 52       0788*      sbc hl,de
040B75 19          0789*      add hl,de
040B76 EB          0790*      ex de,hl
040B77 30 04       0791*      jr nc,$+6
040B79 ED 52       0792*      sbc hl,de
040B7B 13          0793*      inc de
040B7C 13          0794*      inc de
040B7D             0795*  ; Iteration 12
040B7D 17          0796*      rla
040B7E ED 6A       0797*      adc hl,hl
040B80 17          0798*      rla
040B81 ED 6A       0799*      adc hl,hl
040B83 EB          0800*      ex de,hl
040B84 29          0801*      add hl,hl
040B85 ED 52       0802*      sbc hl,de
040B87 19          0803*      add hl,de
040B88 EB          0804*      ex de,hl
040B89 30 04       0805*      jr nc,$+6
040B8B ED 52       0806*      sbc hl,de
040B8D 13          0807*      inc de
040B8E 13          0808*      inc de
040B8F CB 1A       0809*      rr d
040B91 CB 1B       0810*      rr e
040B93 C9          0811*      ret
040B94             0812*  
040B94             0813*  sin_lut_168:
040B94 00 00 00    0814*      dl 0x000000 ; 0.000 00, 0.000
040B97 06 00 00    0815*      dl 0x000006 ; 1.406 01, 0.025
040B9A 0C 00 00    0816*      dl 0x00000C ; 2.813 02, 0.049
040B9D 12 00 00    0817*      dl 0x000012 ; 4.219 03, 0.074
040BA0 19 00 00    0818*      dl 0x000019 ; 5.625 04, 0.098
040BA3 1F 00 00    0819*      dl 0x00001F ; 7.031 05, 0.122
040BA6 25 00 00    0820*      dl 0x000025 ; 8.438 06, 0.147
040BA9 2B 00 00    0821*      dl 0x00002B ; 9.844 07, 0.171
040BAC 31 00 00    0822*      dl 0x000031 ; 11.250 08, 0.195
040BAF 38 00 00    0823*      dl 0x000038 ; 12.656 09, 0.219
040BB2 3E 00 00    0824*      dl 0x00003E ; 14.063 0A, 0.243
040BB5 44 00 00    0825*      dl 0x000044 ; 15.469 0B, 0.267
040BB8 4A 00 00    0826*      dl 0x00004A ; 16.875 0C, 0.290
040BBB 50 00 00    0827*      dl 0x000050 ; 18.281 0D, 0.314
040BBE 56 00 00    0828*      dl 0x000056 ; 19.688 0E, 0.337
040BC1 5C 00 00    0829*      dl 0x00005C ; 21.094 0F, 0.360
040BC4 61 00 00    0830*      dl 0x000061 ; 22.500 10, 0.383
040BC7 67 00 00    0831*      dl 0x000067 ; 23.906 11, 0.405
040BCA 6D 00 00    0832*      dl 0x00006D ; 25.313 12, 0.428
040BCD 73 00 00    0833*      dl 0x000073 ; 26.719 13, 0.450
040BD0 78 00 00    0834*      dl 0x000078 ; 28.125 14, 0.471
040BD3 7E 00 00    0835*      dl 0x00007E ; 29.531 15, 0.493
040BD6 83 00 00    0836*      dl 0x000083 ; 30.938 16, 0.514
040BD9 88 00 00    0837*      dl 0x000088 ; 32.344 17, 0.535
040BDC 8E 00 00    0838*      dl 0x00008E ; 33.750 18, 0.556
040BDF 93 00 00    0839*      dl 0x000093 ; 35.156 19, 0.576
040BE2 98 00 00    0840*      dl 0x000098 ; 36.563 1A, 0.596
040BE5 9D 00 00    0841*      dl 0x00009D ; 37.969 1B, 0.615
040BE8 A2 00 00    0842*      dl 0x0000A2 ; 39.375 1C, 0.634
040BEB A7 00 00    0843*      dl 0x0000A7 ; 40.781 1D, 0.653
040BEE AB 00 00    0844*      dl 0x0000AB ; 42.188 1E, 0.672
040BF1 B0 00 00    0845*      dl 0x0000B0 ; 43.594 1F, 0.690
040BF4 B5 00 00    0846*      dl 0x0000B5 ; 45.000 20, 0.707
040BF7 B9 00 00    0847*      dl 0x0000B9 ; 46.406 21, 0.724
040BFA BD 00 00    0848*      dl 0x0000BD ; 47.813 22, 0.741
040BFD C1 00 00    0849*      dl 0x0000C1 ; 49.219 23, 0.757
040C00 C5 00 00    0850*      dl 0x0000C5 ; 50.625 24, 0.773
040C03 C9 00 00    0851*      dl 0x0000C9 ; 52.031 25, 0.788
040C06 CD 00 00    0852*      dl 0x0000CD ; 53.438 26, 0.803
040C09 D1 00 00    0853*      dl 0x0000D1 ; 54.844 27, 0.818
040C0C D4 00 00    0854*      dl 0x0000D4 ; 56.250 28, 0.831
040C0F D8 00 00    0855*      dl 0x0000D8 ; 57.656 29, 0.845
040C12 DB 00 00    0856*      dl 0x0000DB ; 59.063 2A, 0.858
040C15 DE 00 00    0857*      dl 0x0000DE ; 60.469 2B, 0.870
040C18 E1 00 00    0858*      dl 0x0000E1 ; 61.875 2C, 0.882
040C1B E4 00 00    0859*      dl 0x0000E4 ; 63.281 2D, 0.893
040C1E E7 00 00    0860*      dl 0x0000E7 ; 64.688 2E, 0.904
040C21 EA 00 00    0861*      dl 0x0000EA ; 66.094 2F, 0.914
040C24 EC 00 00    0862*      dl 0x0000EC ; 67.500 30, 0.924
040C27 EE 00 00    0863*      dl 0x0000EE ; 68.906 31, 0.933
040C2A F1 00 00    0864*      dl 0x0000F1 ; 70.313 32, 0.942
040C2D F3 00 00    0865*      dl 0x0000F3 ; 71.719 33, 0.950
040C30 F4 00 00    0866*      dl 0x0000F4 ; 73.125 34, 0.957
040C33 F6 00 00    0867*      dl 0x0000F6 ; 74.531 35, 0.964
040C36 F8 00 00    0868*      dl 0x0000F8 ; 75.938 36, 0.970
040C39 F9 00 00    0869*      dl 0x0000F9 ; 77.344 37, 0.976
040C3C FB 00 00    0870*      dl 0x0000FB ; 78.750 38, 0.981
040C3F FC 00 00    0871*      dl 0x0000FC ; 80.156 39, 0.985
040C42 FD 00 00    0872*      dl 0x0000FD ; 81.563 3A, 0.989
040C45 FE 00 00    0873*      dl 0x0000FE ; 82.969 3B, 0.992
040C48 FE 00 00    0874*      dl 0x0000FE ; 84.375 3C, 0.995
040C4B FF 00 00    0875*      dl 0x0000FF ; 85.781 3D, 0.997
040C4E FF 00 00    0876*      dl 0x0000FF ; 87.188 3E, 0.999
040C51 FF 00 00    0877*      dl 0x0000FF ; 88.594 3F, 1.000
040C54 00 01 00    0878*      dl 0x000100 ; 90.000 40, 1.000
040C57 FF 00 00    0879*      dl 0x0000FF ; 91.406 41, 1.000
040C5A FF 00 00    0880*      dl 0x0000FF ; 92.813 42, 0.999
040C5D FF 00 00    0881*      dl 0x0000FF ; 94.219 43, 0.997
040C60 FE 00 00    0882*      dl 0x0000FE ; 95.625 44, 0.995
040C63 FE 00 00    0883*      dl 0x0000FE ; 97.031 45, 0.992
040C66 FD 00 00    0884*      dl 0x0000FD ; 98.438 46, 0.989
040C69 FC 00 00    0885*      dl 0x0000FC ; 99.844 47, 0.985
040C6C FB 00 00    0886*      dl 0x0000FB ; 101.250 48, 0.981
040C6F F9 00 00    0887*      dl 0x0000F9 ; 102.656 49, 0.976
040C72 F8 00 00    0888*      dl 0x0000F8 ; 104.063 4A, 0.970
040C75 F6 00 00    0889*      dl 0x0000F6 ; 105.469 4B, 0.964
040C78 F4 00 00    0890*      dl 0x0000F4 ; 106.875 4C, 0.957
040C7B F3 00 00    0891*      dl 0x0000F3 ; 108.281 4D, 0.950
040C7E F1 00 00    0892*      dl 0x0000F1 ; 109.688 4E, 0.942
040C81 EE 00 00    0893*      dl 0x0000EE ; 111.094 4F, 0.933
040C84 EC 00 00    0894*      dl 0x0000EC ; 112.500 50, 0.924
040C87 EA 00 00    0895*      dl 0x0000EA ; 113.906 51, 0.914
040C8A E7 00 00    0896*      dl 0x0000E7 ; 115.313 52, 0.904
040C8D E4 00 00    0897*      dl 0x0000E4 ; 116.719 53, 0.893
040C90 E1 00 00    0898*      dl 0x0000E1 ; 118.125 54, 0.882
040C93 DE 00 00    0899*      dl 0x0000DE ; 119.531 55, 0.870
040C96 DB 00 00    0900*      dl 0x0000DB ; 120.938 56, 0.858
040C99 D8 00 00    0901*      dl 0x0000D8 ; 122.344 57, 0.845
040C9C D4 00 00    0902*      dl 0x0000D4 ; 123.750 58, 0.831
040C9F D1 00 00    0903*      dl 0x0000D1 ; 125.156 59, 0.818
040CA2 CD 00 00    0904*      dl 0x0000CD ; 126.563 5A, 0.803
040CA5 C9 00 00    0905*      dl 0x0000C9 ; 127.969 5B, 0.788
040CA8 C5 00 00    0906*      dl 0x0000C5 ; 129.375 5C, 0.773
040CAB C1 00 00    0907*      dl 0x0000C1 ; 130.781 5D, 0.757
040CAE BD 00 00    0908*      dl 0x0000BD ; 132.188 5E, 0.741
040CB1 B9 00 00    0909*      dl 0x0000B9 ; 133.594 5F, 0.724
040CB4 B5 00 00    0910*      dl 0x0000B5 ; 135.000 60, 0.707
040CB7 B0 00 00    0911*      dl 0x0000B0 ; 136.406 61, 0.690
040CBA AB 00 00    0912*      dl 0x0000AB ; 137.813 62, 0.672
040CBD A7 00 00    0913*      dl 0x0000A7 ; 139.219 63, 0.653
040CC0 A2 00 00    0914*      dl 0x0000A2 ; 140.625 64, 0.634
040CC3 9D 00 00    0915*      dl 0x00009D ; 142.031 65, 0.615
040CC6 98 00 00    0916*      dl 0x000098 ; 143.438 66, 0.596
040CC9 93 00 00    0917*      dl 0x000093 ; 144.844 67, 0.576
040CCC 8E 00 00    0918*      dl 0x00008E ; 146.250 68, 0.556
040CCF 88 00 00    0919*      dl 0x000088 ; 147.656 69, 0.535
040CD2 83 00 00    0920*      dl 0x000083 ; 149.063 6A, 0.514
040CD5 7E 00 00    0921*      dl 0x00007E ; 150.469 6B, 0.493
040CD8 78 00 00    0922*      dl 0x000078 ; 151.875 6C, 0.471
040CDB 73 00 00    0923*      dl 0x000073 ; 153.281 6D, 0.450
040CDE 6D 00 00    0924*      dl 0x00006D ; 154.688 6E, 0.428
040CE1 67 00 00    0925*      dl 0x000067 ; 156.094 6F, 0.405
040CE4 61 00 00    0926*      dl 0x000061 ; 157.500 70, 0.383
040CE7 5C 00 00    0927*      dl 0x00005C ; 158.906 71, 0.360
040CEA 56 00 00    0928*      dl 0x000056 ; 160.313 72, 0.337
040CED 50 00 00    0929*      dl 0x000050 ; 161.719 73, 0.314
040CF0 4A 00 00    0930*      dl 0x00004A ; 163.125 74, 0.290
040CF3 44 00 00    0931*      dl 0x000044 ; 164.531 75, 0.267
040CF6 3E 00 00    0932*      dl 0x00003E ; 165.938 76, 0.243
040CF9 38 00 00    0933*      dl 0x000038 ; 167.344 77, 0.219
040CFC 31 00 00    0934*      dl 0x000031 ; 168.750 78, 0.195
040CFF 2B 00 00    0935*      dl 0x00002B ; 170.156 79, 0.171
040D02 25 00 00    0936*      dl 0x000025 ; 171.563 7A, 0.147
040D05 1F 00 00    0937*      dl 0x00001F ; 172.969 7B, 0.122
040D08 19 00 00    0938*      dl 0x000019 ; 174.375 7C, 0.098
040D0B 12 00 00    0939*      dl 0x000012 ; 175.781 7D, 0.074
040D0E 0C 00 00    0940*      dl 0x00000C ; 177.188 7E, 0.049
040D11 06 00 00    0941*      dl 0x000006 ; 178.594 7F, 0.025
040D14 00 00 00    0942*      dl 0x000000 ; 180.000 80, 0.000
040D17 FA FF FF    0943*      dl 0xFFFFFA ; 181.406 81, -0.025
040D1A F4 FF FF    0944*      dl 0xFFFFF4 ; 182.813 82, -0.049
040D1D EE FF FF    0945*      dl 0xFFFFEE ; 184.219 83, -0.074
040D20 E7 FF FF    0946*      dl 0xFFFFE7 ; 185.625 84, -0.098
040D23 E1 FF FF    0947*      dl 0xFFFFE1 ; 187.031 85, -0.122
040D26 DB FF FF    0948*      dl 0xFFFFDB ; 188.438 86, -0.147
040D29 D5 FF FF    0949*      dl 0xFFFFD5 ; 189.844 87, -0.171
040D2C CF FF FF    0950*      dl 0xFFFFCF ; 191.250 88, -0.195
040D2F C8 FF FF    0951*      dl 0xFFFFC8 ; 192.656 89, -0.219
040D32 C2 FF FF    0952*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040D35 BC FF FF    0953*      dl 0xFFFFBC ; 195.469 8B, -0.267
040D38 B6 FF FF    0954*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040D3B B0 FF FF    0955*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040D3E AA FF FF    0956*      dl 0xFFFFAA ; 199.688 8E, -0.337
040D41 A4 FF FF    0957*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040D44 9F FF FF    0958*      dl 0xFFFF9F ; 202.500 90, -0.383
040D47 99 FF FF    0959*      dl 0xFFFF99 ; 203.906 91, -0.405
040D4A 93 FF FF    0960*      dl 0xFFFF93 ; 205.313 92, -0.428
040D4D 8D FF FF    0961*      dl 0xFFFF8D ; 206.719 93, -0.450
040D50 88 FF FF    0962*      dl 0xFFFF88 ; 208.125 94, -0.471
040D53 82 FF FF    0963*      dl 0xFFFF82 ; 209.531 95, -0.493
040D56 7D FF FF    0964*      dl 0xFFFF7D ; 210.938 96, -0.514
040D59 78 FF FF    0965*      dl 0xFFFF78 ; 212.344 97, -0.535
040D5C 72 FF FF    0966*      dl 0xFFFF72 ; 213.750 98, -0.556
040D5F 6D FF FF    0967*      dl 0xFFFF6D ; 215.156 99, -0.576
040D62 68 FF FF    0968*      dl 0xFFFF68 ; 216.563 9A, -0.596
040D65 63 FF FF    0969*      dl 0xFFFF63 ; 217.969 9B, -0.615
040D68 5E FF FF    0970*      dl 0xFFFF5E ; 219.375 9C, -0.634
040D6B 59 FF FF    0971*      dl 0xFFFF59 ; 220.781 9D, -0.653
040D6E 55 FF FF    0972*      dl 0xFFFF55 ; 222.188 9E, -0.672
040D71 50 FF FF    0973*      dl 0xFFFF50 ; 223.594 9F, -0.690
040D74 4B FF FF    0974*      dl 0xFFFF4B ; 225.000 A0, -0.707
040D77 47 FF FF    0975*      dl 0xFFFF47 ; 226.406 A1, -0.724
040D7A 43 FF FF    0976*      dl 0xFFFF43 ; 227.813 A2, -0.741
040D7D 3F FF FF    0977*      dl 0xFFFF3F ; 229.219 A3, -0.757
040D80 3B FF FF    0978*      dl 0xFFFF3B ; 230.625 A4, -0.773
040D83 37 FF FF    0979*      dl 0xFFFF37 ; 232.031 A5, -0.788
040D86 33 FF FF    0980*      dl 0xFFFF33 ; 233.438 A6, -0.803
040D89 2F FF FF    0981*      dl 0xFFFF2F ; 234.844 A7, -0.818
040D8C 2C FF FF    0982*      dl 0xFFFF2C ; 236.250 A8, -0.831
040D8F 28 FF FF    0983*      dl 0xFFFF28 ; 237.656 A9, -0.845
040D92 25 FF FF    0984*      dl 0xFFFF25 ; 239.063 AA, -0.858
040D95 22 FF FF    0985*      dl 0xFFFF22 ; 240.469 AB, -0.870
040D98 1F FF FF    0986*      dl 0xFFFF1F ; 241.875 AC, -0.882
040D9B 1C FF FF    0987*      dl 0xFFFF1C ; 243.281 AD, -0.893
040D9E 19 FF FF    0988*      dl 0xFFFF19 ; 244.688 AE, -0.904
040DA1 16 FF FF    0989*      dl 0xFFFF16 ; 246.094 AF, -0.914
040DA4 14 FF FF    0990*      dl 0xFFFF14 ; 247.500 B0, -0.924
040DA7 12 FF FF    0991*      dl 0xFFFF12 ; 248.906 B1, -0.933
040DAA 0F FF FF    0992*      dl 0xFFFF0F ; 250.313 B2, -0.942
040DAD 0D FF FF    0993*      dl 0xFFFF0D ; 251.719 B3, -0.950
040DB0 0C FF FF    0994*      dl 0xFFFF0C ; 253.125 B4, -0.957
040DB3 0A FF FF    0995*      dl 0xFFFF0A ; 254.531 B5, -0.964
040DB6 08 FF FF    0996*      dl 0xFFFF08 ; 255.938 B6, -0.970
040DB9 07 FF FF    0997*      dl 0xFFFF07 ; 257.344 B7, -0.976
040DBC 05 FF FF    0998*      dl 0xFFFF05 ; 258.750 B8, -0.981
040DBF 04 FF FF    0999*      dl 0xFFFF04 ; 260.156 B9, -0.985
040DC2 03 FF FF    1000*      dl 0xFFFF03 ; 261.563 BA, -0.989
040DC5 02 FF FF    1001*      dl 0xFFFF02 ; 262.969 BB, -0.992
040DC8 02 FF FF    1002*      dl 0xFFFF02 ; 264.375 BC, -0.995
040DCB 01 FF FF    1003*      dl 0xFFFF01 ; 265.781 BD, -0.997
040DCE 01 FF FF    1004*      dl 0xFFFF01 ; 267.188 BE, -0.999
040DD1 01 FF FF    1005*      dl 0xFFFF01 ; 268.594 BF, -1.000
040DD4 00 FF FF    1006*      dl 0xFFFF00 ; 270.000 C0, -1.000
040DD7 01 FF FF    1007*      dl 0xFFFF01 ; 271.406 C1, -1.000
040DDA 01 FF FF    1008*      dl 0xFFFF01 ; 272.813 C2, -0.999
040DDD 01 FF FF    1009*      dl 0xFFFF01 ; 274.219 C3, -0.997
040DE0 02 FF FF    1010*      dl 0xFFFF02 ; 275.625 C4, -0.995
040DE3 02 FF FF    1011*      dl 0xFFFF02 ; 277.031 C5, -0.992
040DE6 03 FF FF    1012*      dl 0xFFFF03 ; 278.438 C6, -0.989
040DE9 04 FF FF    1013*      dl 0xFFFF04 ; 279.844 C7, -0.985
040DEC 05 FF FF    1014*      dl 0xFFFF05 ; 281.250 C8, -0.981
040DEF 07 FF FF    1015*      dl 0xFFFF07 ; 282.656 C9, -0.976
040DF2 08 FF FF    1016*      dl 0xFFFF08 ; 284.063 CA, -0.970
040DF5 0A FF FF    1017*      dl 0xFFFF0A ; 285.469 CB, -0.964
040DF8 0C FF FF    1018*      dl 0xFFFF0C ; 286.875 CC, -0.957
040DFB 0D FF FF    1019*      dl 0xFFFF0D ; 288.281 CD, -0.950
040DFE 0F FF FF    1020*      dl 0xFFFF0F ; 289.688 CE, -0.942
040E01 12 FF FF    1021*      dl 0xFFFF12 ; 291.094 CF, -0.933
040E04 14 FF FF    1022*      dl 0xFFFF14 ; 292.500 D0, -0.924
040E07 16 FF FF    1023*      dl 0xFFFF16 ; 293.906 D1, -0.914
040E0A 19 FF FF    1024*      dl 0xFFFF19 ; 295.313 D2, -0.904
040E0D 1C FF FF    1025*      dl 0xFFFF1C ; 296.719 D3, -0.893
040E10 1F FF FF    1026*      dl 0xFFFF1F ; 298.125 D4, -0.882
040E13 22 FF FF    1027*      dl 0xFFFF22 ; 299.531 D5, -0.870
040E16 25 FF FF    1028*      dl 0xFFFF25 ; 300.938 D6, -0.858
040E19 28 FF FF    1029*      dl 0xFFFF28 ; 302.344 D7, -0.845
040E1C 2C FF FF    1030*      dl 0xFFFF2C ; 303.750 D8, -0.831
040E1F 2F FF FF    1031*      dl 0xFFFF2F ; 305.156 D9, -0.818
040E22 33 FF FF    1032*      dl 0xFFFF33 ; 306.563 DA, -0.803
040E25 37 FF FF    1033*      dl 0xFFFF37 ; 307.969 DB, -0.788
040E28 3B FF FF    1034*      dl 0xFFFF3B ; 309.375 DC, -0.773
040E2B 3F FF FF    1035*      dl 0xFFFF3F ; 310.781 DD, -0.757
040E2E 43 FF FF    1036*      dl 0xFFFF43 ; 312.188 DE, -0.741
040E31 47 FF FF    1037*      dl 0xFFFF47 ; 313.594 DF, -0.724
040E34 4B FF FF    1038*      dl 0xFFFF4B ; 315.000 E0, -0.707
040E37 50 FF FF    1039*      dl 0xFFFF50 ; 316.406 E1, -0.690
040E3A 55 FF FF    1040*      dl 0xFFFF55 ; 317.813 E2, -0.672
040E3D 59 FF FF    1041*      dl 0xFFFF59 ; 319.219 E3, -0.653
040E40 5E FF FF    1042*      dl 0xFFFF5E ; 320.625 E4, -0.634
040E43 63 FF FF    1043*      dl 0xFFFF63 ; 322.031 E5, -0.615
040E46 68 FF FF    1044*      dl 0xFFFF68 ; 323.438 E6, -0.596
040E49 6D FF FF    1045*      dl 0xFFFF6D ; 324.844 E7, -0.576
040E4C 72 FF FF    1046*      dl 0xFFFF72 ; 326.250 E8, -0.556
040E4F 78 FF FF    1047*      dl 0xFFFF78 ; 327.656 E9, -0.535
040E52 7D FF FF    1048*      dl 0xFFFF7D ; 329.063 EA, -0.514
040E55 82 FF FF    1049*      dl 0xFFFF82 ; 330.469 EB, -0.493
040E58 88 FF FF    1050*      dl 0xFFFF88 ; 331.875 EC, -0.471
040E5B 8D FF FF    1051*      dl 0xFFFF8D ; 333.281 ED, -0.450
040E5E 93 FF FF    1052*      dl 0xFFFF93 ; 334.688 EE, -0.428
040E61 99 FF FF    1053*      dl 0xFFFF99 ; 336.094 EF, -0.405
040E64 9F FF FF    1054*      dl 0xFFFF9F ; 337.500 F0, -0.383
040E67 A4 FF FF    1055*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040E6A AA FF FF    1056*      dl 0xFFFFAA ; 340.313 F2, -0.337
040E6D B0 FF FF    1057*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040E70 B6 FF FF    1058*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040E73 BC FF FF    1059*      dl 0xFFFFBC ; 344.531 F5, -0.267
040E76 C2 FF FF    1060*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040E79 C8 FF FF    1061*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040E7C CF FF FF    1062*      dl 0xFFFFCF ; 348.750 F8, -0.195
040E7F D5 FF FF    1063*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040E82 DB FF FF    1064*      dl 0xFFFFDB ; 351.563 FA, -0.147
040E85 E1 FF FF    1065*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040E88 E7 FF FF    1066*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040E8B EE FF FF    1067*      dl 0xFFFFEE ; 355.781 FD, -0.074
040E8E F4 FF FF    1068*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040E91 FA FF FF    1069*      dl 0xFFFFFA ; 358.594 FF, -0.025
040E94 00 00 00    1070*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040E97             1071*  
040E97             1072*  atan_lut_168:
040E97 00 00 00    1073*      dl 0x000000 ; 000000, 0.000
040E9A 28 00 00    1074*      dl 0x000028 ; 000001, 0.224
040E9D 51 00 00    1075*      dl 0x000051 ; 000002, 0.448
040EA0 7A 00 00    1076*      dl 0x00007A ; 000003, 0.671
040EA3 A2 00 00    1077*      dl 0x0000A2 ; 000004, 0.895
040EA6 CB 00 00    1078*      dl 0x0000CB ; 000005, 1.119
040EA9 F4 00 00    1079*      dl 0x0000F4 ; 000006, 1.343
040EAC 1D 01 00    1080*      dl 0x00011D ; 000007, 1.566
040EAF 45 01 00    1081*      dl 0x000145 ; 000008, 1.790
040EB2 6E 01 00    1082*      dl 0x00016E ; 000009, 2.013
040EB5 97 01 00    1083*      dl 0x000197 ; 00000A, 2.237
040EB8 BF 01 00    1084*      dl 0x0001BF ; 00000B, 2.460
040EBB E8 01 00    1085*      dl 0x0001E8 ; 00000C, 2.684
040EBE 11 02 00    1086*      dl 0x000211 ; 00000D, 2.907
040EC1 39 02 00    1087*      dl 0x000239 ; 00000E, 3.130
040EC4 62 02 00    1088*      dl 0x000262 ; 00000F, 3.353
040EC7 8B 02 00    1089*      dl 0x00028B ; 000010, 3.576
040ECA B3 02 00    1090*      dl 0x0002B3 ; 000011, 3.799
040ECD DC 02 00    1091*      dl 0x0002DC ; 000012, 4.022
040ED0 04 03 00    1092*      dl 0x000304 ; 000013, 4.245
040ED3 2D 03 00    1093*      dl 0x00032D ; 000014, 4.467
040ED6 55 03 00    1094*      dl 0x000355 ; 000015, 4.690
040ED9 7E 03 00    1095*      dl 0x00037E ; 000016, 4.912
040EDC A6 03 00    1096*      dl 0x0003A6 ; 000017, 5.134
040EDF CE 03 00    1097*      dl 0x0003CE ; 000018, 5.356
040EE2 F7 03 00    1098*      dl 0x0003F7 ; 000019, 5.578
040EE5 1F 04 00    1099*      dl 0x00041F ; 00001A, 5.799
040EE8 48 04 00    1100*      dl 0x000448 ; 00001B, 6.021
040EEB 70 04 00    1101*      dl 0x000470 ; 00001C, 6.242
040EEE 98 04 00    1102*      dl 0x000498 ; 00001D, 6.463
040EF1 C0 04 00    1103*      dl 0x0004C0 ; 00001E, 6.684
040EF4 E8 04 00    1104*      dl 0x0004E8 ; 00001F, 6.905
040EF7 11 05 00    1105*      dl 0x000511 ; 000020, 7.125
040EFA 39 05 00    1106*      dl 0x000539 ; 000021, 7.345
040EFD 61 05 00    1107*      dl 0x000561 ; 000022, 7.565
040F00 89 05 00    1108*      dl 0x000589 ; 000023, 7.785
040F03 B1 05 00    1109*      dl 0x0005B1 ; 000024, 8.005
040F06 D9 05 00    1110*      dl 0x0005D9 ; 000025, 8.224
040F09 01 06 00    1111*      dl 0x000601 ; 000026, 8.443
040F0C 28 06 00    1112*      dl 0x000628 ; 000027, 8.662
040F0F 50 06 00    1113*      dl 0x000650 ; 000028, 8.881
040F12 78 06 00    1114*      dl 0x000678 ; 000029, 9.099
040F15 A0 06 00    1115*      dl 0x0006A0 ; 00002A, 9.317
040F18 C7 06 00    1116*      dl 0x0006C7 ; 00002B, 9.535
040F1B EF 06 00    1117*      dl 0x0006EF ; 00002C, 9.752
040F1E 16 07 00    1118*      dl 0x000716 ; 00002D, 9.970
040F21 3E 07 00    1119*      dl 0x00073E ; 00002E, 10.187
040F24 65 07 00    1120*      dl 0x000765 ; 00002F, 10.403
040F27 8D 07 00    1121*      dl 0x00078D ; 000030, 10.620
040F2A B4 07 00    1122*      dl 0x0007B4 ; 000031, 10.836
040F2D DB 07 00    1123*      dl 0x0007DB ; 000032, 11.051
040F30 03 08 00    1124*      dl 0x000803 ; 000033, 11.267
040F33 2A 08 00    1125*      dl 0x00082A ; 000034, 11.482
040F36 51 08 00    1126*      dl 0x000851 ; 000035, 11.697
040F39 78 08 00    1127*      dl 0x000878 ; 000036, 11.911
040F3C 9F 08 00    1128*      dl 0x00089F ; 000037, 12.125
040F3F C6 08 00    1129*      dl 0x0008C6 ; 000038, 12.339
040F42 ED 08 00    1130*      dl 0x0008ED ; 000039, 12.553
040F45 13 09 00    1131*      dl 0x000913 ; 00003A, 12.766
040F48 3A 09 00    1132*      dl 0x00093A ; 00003B, 12.978
040F4B 61 09 00    1133*      dl 0x000961 ; 00003C, 13.191
040F4E 87 09 00    1134*      dl 0x000987 ; 00003D, 13.403
040F51 AE 09 00    1135*      dl 0x0009AE ; 00003E, 13.614
040F54 D4 09 00    1136*      dl 0x0009D4 ; 00003F, 13.825
040F57 FB 09 00    1137*      dl 0x0009FB ; 000040, 14.036
040F5A 21 0A 00    1138*      dl 0x000A21 ; 000041, 14.247
040F5D 47 0A 00    1139*      dl 0x000A47 ; 000042, 14.457
040F60 6D 0A 00    1140*      dl 0x000A6D ; 000043, 14.666
040F63 94 0A 00    1141*      dl 0x000A94 ; 000044, 14.876
040F66 BA 0A 00    1142*      dl 0x000ABA ; 000045, 15.085
040F69 E0 0A 00    1143*      dl 0x000AE0 ; 000046, 15.293
040F6C 05 0B 00    1144*      dl 0x000B05 ; 000047, 15.501
040F6F 2B 0B 00    1145*      dl 0x000B2B ; 000048, 15.709
040F72 51 0B 00    1146*      dl 0x000B51 ; 000049, 15.916
040F75 77 0B 00    1147*      dl 0x000B77 ; 00004A, 16.123
040F78 9C 0B 00    1148*      dl 0x000B9C ; 00004B, 16.329
040F7B C2 0B 00    1149*      dl 0x000BC2 ; 00004C, 16.535
040F7E E7 0B 00    1150*      dl 0x000BE7 ; 00004D, 16.740
040F81 0C 0C 00    1151*      dl 0x000C0C ; 00004E, 16.945
040F84 32 0C 00    1152*      dl 0x000C32 ; 00004F, 17.150
040F87 57 0C 00    1153*      dl 0x000C57 ; 000050, 17.354
040F8A 7C 0C 00    1154*      dl 0x000C7C ; 000051, 17.558
040F8D A1 0C 00    1155*      dl 0x000CA1 ; 000052, 17.761
040F90 C6 0C 00    1156*      dl 0x000CC6 ; 000053, 17.964
040F93 EB 0C 00    1157*      dl 0x000CEB ; 000054, 18.166
040F96 0F 0D 00    1158*      dl 0x000D0F ; 000055, 18.368
040F99 34 0D 00    1159*      dl 0x000D34 ; 000056, 18.569
040F9C 58 0D 00    1160*      dl 0x000D58 ; 000057, 18.770
040F9F 7D 0D 00    1161*      dl 0x000D7D ; 000058, 18.970
040FA2 A1 0D 00    1162*      dl 0x000DA1 ; 000059, 19.170
040FA5 C6 0D 00    1163*      dl 0x000DC6 ; 00005A, 19.370
040FA8 EA 0D 00    1164*      dl 0x000DEA ; 00005B, 19.569
040FAB 0E 0E 00    1165*      dl 0x000E0E ; 00005C, 19.767
040FAE 32 0E 00    1166*      dl 0x000E32 ; 00005D, 19.965
040FB1 56 0E 00    1167*      dl 0x000E56 ; 00005E, 20.163
040FB4 7A 0E 00    1168*      dl 0x000E7A ; 00005F, 20.360
040FB7 9E 0E 00    1169*      dl 0x000E9E ; 000060, 20.556
040FBA C1 0E 00    1170*      dl 0x000EC1 ; 000061, 20.752
040FBD E5 0E 00    1171*      dl 0x000EE5 ; 000062, 20.947
040FC0 08 0F 00    1172*      dl 0x000F08 ; 000063, 21.142
040FC3 2C 0F 00    1173*      dl 0x000F2C ; 000064, 21.337
040FC6 4F 0F 00    1174*      dl 0x000F4F ; 000065, 21.531
040FC9 72 0F 00    1175*      dl 0x000F72 ; 000066, 21.724
040FCC 95 0F 00    1176*      dl 0x000F95 ; 000067, 21.917
040FCF B8 0F 00    1177*      dl 0x000FB8 ; 000068, 22.109
040FD2 DB 0F 00    1178*      dl 0x000FDB ; 000069, 22.301
040FD5 FE 0F 00    1179*      dl 0x000FFE ; 00006A, 22.493
040FD8 21 10 00    1180*      dl 0x001021 ; 00006B, 22.683
040FDB 44 10 00    1181*      dl 0x001044 ; 00006C, 22.874
040FDE 66 10 00    1182*      dl 0x001066 ; 00006D, 23.063
040FE1 89 10 00    1183*      dl 0x001089 ; 00006E, 23.253
040FE4 AB 10 00    1184*      dl 0x0010AB ; 00006F, 23.441
040FE7 CD 10 00    1185*      dl 0x0010CD ; 000070, 23.629
040FEA EF 10 00    1186*      dl 0x0010EF ; 000071, 23.817
040FED 11 11 00    1187*      dl 0x001111 ; 000072, 24.004
040FF0 33 11 00    1188*      dl 0x001133 ; 000073, 24.191
040FF3 55 11 00    1189*      dl 0x001155 ; 000074, 24.376
040FF6 77 11 00    1190*      dl 0x001177 ; 000075, 24.562
040FF9 99 11 00    1191*      dl 0x001199 ; 000076, 24.747
040FFC BA 11 00    1192*      dl 0x0011BA ; 000077, 24.931
040FFF DC 11 00    1193*      dl 0x0011DC ; 000078, 25.115
041002 FD 11 00    1194*      dl 0x0011FD ; 000079, 25.298
041005 1E 12 00    1195*      dl 0x00121E ; 00007A, 25.481
041008 3F 12 00    1196*      dl 0x00123F ; 00007B, 25.663
04100B 60 12 00    1197*      dl 0x001260 ; 00007C, 25.844
04100E 81 12 00    1198*      dl 0x001281 ; 00007D, 26.025
041011 A2 12 00    1199*      dl 0x0012A2 ; 00007E, 26.206
041014 C3 12 00    1200*      dl 0x0012C3 ; 00007F, 26.386
041017 E4 12 00    1201*      dl 0x0012E4 ; 000080, 26.565
04101A 04 13 00    1202*      dl 0x001304 ; 000081, 26.744
04101D 25 13 00    1203*      dl 0x001325 ; 000082, 26.922
041020 45 13 00    1204*      dl 0x001345 ; 000083, 27.100
041023 65 13 00    1205*      dl 0x001365 ; 000084, 27.277
041026 85 13 00    1206*      dl 0x001385 ; 000085, 27.453
041029 A5 13 00    1207*      dl 0x0013A5 ; 000086, 27.629
04102C C5 13 00    1208*      dl 0x0013C5 ; 000087, 27.805
04102F E5 13 00    1209*      dl 0x0013E5 ; 000088, 27.979
041032 05 14 00    1210*      dl 0x001405 ; 000089, 28.154
041035 24 14 00    1211*      dl 0x001424 ; 00008A, 28.327
041038 44 14 00    1212*      dl 0x001444 ; 00008B, 28.501
04103B 63 14 00    1213*      dl 0x001463 ; 00008C, 28.673
04103E 83 14 00    1214*      dl 0x001483 ; 00008D, 28.845
041041 A2 14 00    1215*      dl 0x0014A2 ; 00008E, 29.017
041044 C1 14 00    1216*      dl 0x0014C1 ; 00008F, 29.187
041047 E0 14 00    1217*      dl 0x0014E0 ; 000090, 29.358
04104A FF 14 00    1218*      dl 0x0014FF ; 000091, 29.527
04104D 1E 15 00    1219*      dl 0x00151E ; 000092, 29.697
041050 3C 15 00    1220*      dl 0x00153C ; 000093, 29.865
041053 5B 15 00    1221*      dl 0x00155B ; 000094, 30.033
041056 79 15 00    1222*      dl 0x001579 ; 000095, 30.201
041059 98 15 00    1223*      dl 0x001598 ; 000096, 30.368
04105C B6 15 00    1224*      dl 0x0015B6 ; 000097, 30.534
04105F D4 15 00    1225*      dl 0x0015D4 ; 000098, 30.700
041062 F2 15 00    1226*      dl 0x0015F2 ; 000099, 30.865
041065 10 16 00    1227*      dl 0x001610 ; 00009A, 31.030
041068 2E 16 00    1228*      dl 0x00162E ; 00009B, 31.194
04106B 4C 16 00    1229*      dl 0x00164C ; 00009C, 31.357
04106E 6A 16 00    1230*      dl 0x00166A ; 00009D, 31.520
041071 87 16 00    1231*      dl 0x001687 ; 00009E, 31.682
041074 A5 16 00    1232*      dl 0x0016A5 ; 00009F, 31.844
041077 C2 16 00    1233*      dl 0x0016C2 ; 0000A0, 32.005
04107A DF 16 00    1234*      dl 0x0016DF ; 0000A1, 32.166
04107D FC 16 00    1235*      dl 0x0016FC ; 0000A2, 32.326
041080 19 17 00    1236*      dl 0x001719 ; 0000A3, 32.486
041083 36 17 00    1237*      dl 0x001736 ; 0000A4, 32.645
041086 53 17 00    1238*      dl 0x001753 ; 0000A5, 32.803
041089 70 17 00    1239*      dl 0x001770 ; 0000A6, 32.961
04108C 8C 17 00    1240*      dl 0x00178C ; 0000A7, 33.118
04108F A9 17 00    1241*      dl 0x0017A9 ; 0000A8, 33.275
041092 C5 17 00    1242*      dl 0x0017C5 ; 0000A9, 33.431
041095 E2 17 00    1243*      dl 0x0017E2 ; 0000AA, 33.587
041098 FE 17 00    1244*      dl 0x0017FE ; 0000AB, 33.742
04109B 1A 18 00    1245*      dl 0x00181A ; 0000AC, 33.896
04109E 36 18 00    1246*      dl 0x001836 ; 0000AD, 34.050
0410A1 52 18 00    1247*      dl 0x001852 ; 0000AE, 34.203
0410A4 6E 18 00    1248*      dl 0x00186E ; 0000AF, 34.356
0410A7 8A 18 00    1249*      dl 0x00188A ; 0000B0, 34.509
0410AA A5 18 00    1250*      dl 0x0018A5 ; 0000B1, 34.660
0410AD C1 18 00    1251*      dl 0x0018C1 ; 0000B2, 34.811
0410B0 DC 18 00    1252*      dl 0x0018DC ; 0000B3, 34.962
0410B3 F7 18 00    1253*      dl 0x0018F7 ; 0000B4, 35.112
0410B6 13 19 00    1254*      dl 0x001913 ; 0000B5, 35.262
0410B9 2E 19 00    1255*      dl 0x00192E ; 0000B6, 35.410
0410BC 49 19 00    1256*      dl 0x001949 ; 0000B7, 35.559
0410BF 64 19 00    1257*      dl 0x001964 ; 0000B8, 35.707
0410C2 7F 19 00    1258*      dl 0x00197F ; 0000B9, 35.854
0410C5 99 19 00    1259*      dl 0x001999 ; 0000BA, 36.001
0410C8 B4 19 00    1260*      dl 0x0019B4 ; 0000BB, 36.147
0410CB CE 19 00    1261*      dl 0x0019CE ; 0000BC, 36.293
0410CE E9 19 00    1262*      dl 0x0019E9 ; 0000BD, 36.438
0410D1 03 1A 00    1263*      dl 0x001A03 ; 0000BE, 36.582
0410D4 1D 1A 00    1264*      dl 0x001A1D ; 0000BF, 36.726
0410D7 37 1A 00    1265*      dl 0x001A37 ; 0000C0, 36.870
0410DA 51 1A 00    1266*      dl 0x001A51 ; 0000C1, 37.013
0410DD 6B 1A 00    1267*      dl 0x001A6B ; 0000C2, 37.155
0410E0 85 1A 00    1268*      dl 0x001A85 ; 0000C3, 37.297
0410E3 9F 1A 00    1269*      dl 0x001A9F ; 0000C4, 37.439
0410E6 B9 1A 00    1270*      dl 0x001AB9 ; 0000C5, 37.579
0410E9 D2 1A 00    1271*      dl 0x001AD2 ; 0000C6, 37.720
0410EC EC 1A 00    1272*      dl 0x001AEC ; 0000C7, 37.859
0410EF 05 1B 00    1273*      dl 0x001B05 ; 0000C8, 37.999
0410F2 1E 1B 00    1274*      dl 0x001B1E ; 0000C9, 38.137
0410F5 37 1B 00    1275*      dl 0x001B37 ; 0000CA, 38.276
0410F8 50 1B 00    1276*      dl 0x001B50 ; 0000CB, 38.413
0410FB 69 1B 00    1277*      dl 0x001B69 ; 0000CC, 38.550
0410FE 82 1B 00    1278*      dl 0x001B82 ; 0000CD, 38.687
041101 9B 1B 00    1279*      dl 0x001B9B ; 0000CE, 38.823
041104 B4 1B 00    1280*      dl 0x001BB4 ; 0000CF, 38.959
041107 CC 1B 00    1281*      dl 0x001BCC ; 0000D0, 39.094
04110A E5 1B 00    1282*      dl 0x001BE5 ; 0000D1, 39.228
04110D FD 1B 00    1283*      dl 0x001BFD ; 0000D2, 39.362
041110 16 1C 00    1284*      dl 0x001C16 ; 0000D3, 39.496
041113 2E 1C 00    1285*      dl 0x001C2E ; 0000D4, 39.629
041116 46 1C 00    1286*      dl 0x001C46 ; 0000D5, 39.762
041119 5E 1C 00    1287*      dl 0x001C5E ; 0000D6, 39.894
04111C 76 1C 00    1288*      dl 0x001C76 ; 0000D7, 40.025
04111F 8E 1C 00    1289*      dl 0x001C8E ; 0000D8, 40.156
041122 A5 1C 00    1290*      dl 0x001CA5 ; 0000D9, 40.286
041125 BD 1C 00    1291*      dl 0x001CBD ; 0000DA, 40.416
041128 D5 1C 00    1292*      dl 0x001CD5 ; 0000DB, 40.546
04112B EC 1C 00    1293*      dl 0x001CEC ; 0000DC, 40.675
04112E 04 1D 00    1294*      dl 0x001D04 ; 0000DD, 40.803
041131 1B 1D 00    1295*      dl 0x001D1B ; 0000DE, 40.931
041134 32 1D 00    1296*      dl 0x001D32 ; 0000DF, 41.059
041137 49 1D 00    1297*      dl 0x001D49 ; 0000E0, 41.186
04113A 60 1D 00    1298*      dl 0x001D60 ; 0000E1, 41.312
04113D 77 1D 00    1299*      dl 0x001D77 ; 0000E2, 41.438
041140 8E 1D 00    1300*      dl 0x001D8E ; 0000E3, 41.564
041143 A5 1D 00    1301*      dl 0x001DA5 ; 0000E4, 41.689
041146 BB 1D 00    1302*      dl 0x001DBB ; 0000E5, 41.814
041149 D2 1D 00    1303*      dl 0x001DD2 ; 0000E6, 41.938
04114C E9 1D 00    1304*      dl 0x001DE9 ; 0000E7, 42.061
04114F FF 1D 00    1305*      dl 0x001DFF ; 0000E8, 42.184
041152 15 1E 00    1306*      dl 0x001E15 ; 0000E9, 42.307
041155 2C 1E 00    1307*      dl 0x001E2C ; 0000EA, 42.429
041158 42 1E 00    1308*      dl 0x001E42 ; 0000EB, 42.551
04115B 58 1E 00    1309*      dl 0x001E58 ; 0000EC, 42.672
04115E 6E 1E 00    1310*      dl 0x001E6E ; 0000ED, 42.793
041161 84 1E 00    1311*      dl 0x001E84 ; 0000EE, 42.913
041164 99 1E 00    1312*      dl 0x001E99 ; 0000EF, 43.033
041167 AF 1E 00    1313*      dl 0x001EAF ; 0000F0, 43.152
04116A C5 1E 00    1314*      dl 0x001EC5 ; 0000F1, 43.271
04116D DA 1E 00    1315*      dl 0x001EDA ; 0000F2, 43.390
041170 F0 1E 00    1316*      dl 0x001EF0 ; 0000F3, 43.508
041173 05 1F 00    1317*      dl 0x001F05 ; 0000F4, 43.625
041176 1B 1F 00    1318*      dl 0x001F1B ; 0000F5, 43.742
041179 30 1F 00    1319*      dl 0x001F30 ; 0000F6, 43.859
04117C 45 1F 00    1320*      dl 0x001F45 ; 0000F7, 43.975
04117F 5A 1F 00    1321*      dl 0x001F5A ; 0000F8, 44.091
041182 6F 1F 00    1322*      dl 0x001F6F ; 0000F9, 44.206
041185 84 1F 00    1323*      dl 0x001F84 ; 0000FA, 44.321
041188 99 1F 00    1324*      dl 0x001F99 ; 0000FB, 44.435
04118B AD 1F 00    1325*      dl 0x001FAD ; 0000FC, 44.549
04118E C2 1F 00    1326*      dl 0x001FC2 ; 0000FD, 44.662
041191 D7 1F 00    1327*      dl 0x001FD7 ; 0000FE, 44.775
041194 EB 1F 00    1328*      dl 0x001FEB ; 0000FF, 44.888
041197 00 20 00    1329*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
04119A             0034       include "fonts.inc"
04119A             0001*  fonts_load:
04119A DD 21 04 1D 0002*      ld ix,font_list ; pointer to font list lookup
       04          
04119F 06 12       0003*      ld b,num_fonts ; loop counter
0411A1             0004*  
0411A1             0005*  @load_loop:
0411A1 C5          0006*      push bc ; save loop counter
0411A2             0007*  
0411A2             0008*  ; load font into a buffer
0411A2 DD 27 06    0009*      ld hl,(ix+font_list_bufferId)
0411A5 DD 31 09    0010*      ld iy,(ix+font_list_filename)
0411A8 CD C3 16 04 0011*      call vdu_load_buffer_from_file
0411AC             0012*  
0411AC             0013*  ; create font from buffer
0411AC DD 27 06    0014*      ld hl,(ix+font_list_bufferId)
0411AF DD 5E 00    0015*      ld e,(ix+font_list_width)
0411B2 DD 56 03    0016*      ld d,(ix+font_list_height)
0411B5 3E 00       0017*      ld a,0 ; flags
0411B7 CD 46 18 04 0018*      call vdu_font_create
0411BB             0019*  
0411BB             0020*  ; select font
0411BB DD 27 06    0021*      ld hl,(ix+font_list_bufferId)
0411BE 3E 01       0022*      ld a,1 ; flags
0411C0 CD 2C 18 04 0023*      call vdu_font_select
0411C4             0024*  
0411C4             0025*  ; ; debug print filename
0411C4             0026*  ;     call printNewLine
0411C4             0027*  ;     ld hl,(ix+font_list_filename)
0411C4             0028*  ;     call printString
0411C4             0029*  
0411C4             0030*  ; advance font_list pointer to next record
0411C4 ED 32 0C    0031*      lea ix,ix+font_list_record_size
0411C7             0032*  
0411C7             0033*  ; restore loop counter
0411C7 C1          0034*      pop bc
0411C8 10 D7       0035*      djnz @load_loop
0411CA             0036*  
0411CA             0037*  ; all done
0411CA C9          0038*      ret
0411CB             0035       include "images.inc"
0411CB             0001*  image_type: equ 0
0411CB             0002*  image_width: equ image_type+3
0411CB             0003*  image_height: equ image_width+3
0411CB             0004*  image_filesize: equ image_height+3
0411CB             0005*  image_filename: equ image_filesize+3
0411CB             0006*  image_bufferId: equ image_filename+3
0411CB             0007*  image_record_size: equ image_bufferId+3
0411CB             0008*  
0411CB 00 00 00    0009*  cur_image_list: dl 0
0411CE 00 00 00    0010*  cur_file_idx: dl 0
0411D1 00 00 00    0011*  cur_filename: dl 0
0411D4 00 00 00    0012*  cur_buffer_id: dl 0
0411D7             0013*  
0411D7             0014*  load_ui_images:
0411D7             0015*  ; initialize image loading variables
0411D7 21 00 00 00 0016*      ld hl,0
0411DB 22 CE 11 04 0017*      ld (cur_file_idx),hl
0411DF 21 F4 2F 04 0018*      ld hl,ui_image_list
0411E3 22 CB 11 04 0019*      ld (cur_image_list),hl
0411E7             0020*  ; load images
0411E7 06 04       0021*      ld b,ui_num_images
0411E9             0022*  @loop:
0411E9 C5          0023*      push bc
0411EA CD 48 12 04 0024*      call load_next_image
0411EE C1          0025*      pop bc
0411EF 10 F8       0026*      djnz @loop
0411F1 C9          0027*      ret
0411F2             0028*  
0411F2             0029*  load_sprite_images:
0411F2             0030*  ; initialize image loading variables
0411F2 21 00 00 00 0031*      ld hl,0
0411F6 22 CE 11 04 0032*      ld (cur_file_idx),hl
0411FA 21 04 20 04 0033*      ld hl,sprites_image_list
0411FE 22 CB 11 04 0034*      ld (cur_image_list),hl
041202 01 5F 00 00 0035*      ld bc,sprites_num_images
041206             0036*  ; load images
041206 CD 0B 12 04 0037*      call img_load_main
04120A C9          0038*      ret
04120B             0039*  
04120B             0040*  ; inputs: bc is the number of images to load, cur_image_list set
04120B             0041*  img_load_main:
04120B AF          0042*      xor a
04120C 32 CE 11 04 0043*      ld (cur_file_idx),a
041210             0044*  
041210             0045*  img_load_main_loop:
041210             0046*  ; back up loop counter
041210 C5          0047*      push bc
041211             0048*  
041211             0049*  ; load the next image
041211 CD 48 12 04 0050*      call load_next_image
041215             0051*  
041215             0052*  ; plot the background
041215 CD 96 14 04 0053*      call vdu_cls
041219 21 02 00 00 0054*      ld hl,BUF_SPLASH_BG
04121D CD 83 15 04 0055*      call vdu_buff_select
041221 01 00 00 00 0056*      ld bc,0
041225 11 00 00 00 0057*      ld de,0
041229 CD DF 18 04 0058*      call vdu_plot_bmp
04122D             0059*  
04122D             0060*  ; ; draw the most recently loaded image
04122D             0061*  ; 	ld hl,(cur_buffer_id)
04122D             0062*  ; 	call vdu_buff_select
04122D             0063*  ; 	ld bc,0
04122D             0064*  ; 	ld de,0
04122D             0065*  ; 	call vdu_plot_bmp
04122D             0066*  
04122D             0067*  ; move logo
04122D CD A8 12 04 0068*      call move_logo
041231             0069*  
041231             0070*  ; print current filename
041231 2A D1 11 04 0071*      ld hl,(cur_filename)
041235 CD 77 00 04 0072*      call printString
041239             0073*  
041239             0074*  ; flip the framebuffer
041239             0075*      ; call vdu_flip
041239             0076*  
041239             0077*  ; decrement loop counter
041239 C1          0078*      pop bc
04123A 0B          0079*      dec bc
04123B 79          0080*      ld a,c
04123C B7          0081*      or a
04123D C2 10 12 04 0082*      jp nz,img_load_main_loop
041241 78          0083*      ld a,b
041242 B7          0084*      or a
041243 C2 10 12 04 0085*      jp nz,img_load_main_loop
041247 C9          0086*      ret
041248             0087*  
041248             0088*  load_next_image:
041248 16 12       0089*      ld d,image_record_size
04124A 3A CE 11 04 0090*      ld a,(cur_file_idx)
04124E 5F          0091*      ld e,a
04124F ED 5C       0092*      mlt de
041251 FD 2A CB 11 0093*      ld iy,(cur_image_list)
       04          
041256 FD 19       0094*      add iy,de
041258             0095*  
041258 FD 7E 00    0096*      ld a,(iy+image_type) ; get image type
04125B FD 07 03    0097*      ld bc,(iy+image_width) ; get image width
04125E FD 17 06    0098*      ld de,(iy+image_height) ; get image height
041261 FD 31 09    0099*      ld ix,(iy+image_filesize) ; get image file size
041264 FD 27 0F    0100*      ld hl,(iy+image_bufferId) ; get image bufferId
041267 22 D4 11 04 0101*      ld (cur_buffer_id),hl
04126B FD 37 0C    0102*      ld iy,(iy+image_filename) ; get image filename
04126E FD 22 D1 11 0103*      ld (cur_filename),iy
       04          
041273 CD A1 16 04 0104*      call vdu_load_img
041277 FD 21 CE 11 0105*      ld iy,cur_file_idx
       04          
04127C FD 34 00    0106*      inc (iy)
04127F C9          0107*      ret
041280             0108*  
041280             0109*  img_load_init:
041280             0110*  ; initialize logo's position parameters
041280 21 00 00 00 0111*      ld hl,0
041284 22 CD 12 04 0112*      ld (logo_xvel),hl
041288 22 D0 12 04 0113*      ld (logo_xpos),hl
04128C             0114*  ; begin 16.8 maths to determine logo's y position and velocity
04128C 21 00 E0 00 0115*      ld hl,240-16*256 ; allow space for text at bottom of screen
041290 22 D6 12 04 0116*      ld (logo_ypos),hl
041294 EB          0117*      ex de,hl
041295 21 00 F8 FF 0118*      ld hl,-8*256 ; 8 pixels from top of screen
041299 19          0119*      add hl,de ; distance for logo to travel
04129A 11 00 A1 FF 0120*      ld de,-sprites_num_images*256
04129E CD B3 08 04 0121*      call sdiv168 ; ud.e = distance / num images = y velocity
0412A2 ED 53 D3 12 0122*      ld (logo_yvel),de
       04          
0412A7             0123*  ; all done
0412A7 C9          0124*      ret
0412A8             0125*  
0412A8             0126*  move_logo:
0412A8             0127*  ; activate logo bitmap
0412A8 21 03 00 00 0128*      ld hl, BUF_SPLASH_LOGO
0412AC CD 83 15 04 0129*      call vdu_buff_select
0412B0             0130*  ; update position based on velocity parameters
0412B0 2A D6 12 04 0131*      ld hl,(logo_ypos)
0412B4 ED 5B D3 12 0132*      ld de,(logo_yvel)
       04          
0412B9 19          0133*      add hl,de
0412BA 22 D6 12 04 0134*      ld (logo_ypos),hl
0412BE             0135*  ; draw logo
0412BE ED 4B D0 12 0136*      ld bc,(logo_xpos)
       04          
0412C3 ED 5B D6 12 0137*      ld de,(logo_ypos)
       04          
0412C8 CD FB 18 04 0138*      call vdu_plot_bmp168
0412CC C9          0139*      ret
0412CD             0140*  
0412CD 00 00 00    0141*  logo_xvel: dl 0
0412D0 00 00 00    0142*  logo_xpos: dl 0
0412D3             0143*  
0412D3 00 00 00    0144*  logo_yvel: dl 0
0412D6 00 00 00    0145*  logo_ypos: dl 0
0412D9             0036       include "timer.inc"
0412D9             0001*  ; Table 32. Timer Control Registers
0412D9             0002*  ; this constant is the base address of the timer control registers
0412D9             0003*  ; each timer takes three bytes:
0412D9             0004*  ;   0: control register
0412D9             0005*  ;   1: low byte of timer reset value
0412D9             0006*  ;   2: high byte of timer reset value
0412D9             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412D9             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412D9             0009*  TMR_CTL:     equ 80h
0412D9             0010*  
0412D9             0011*  ; Timer Control Register Bit Definitions
0412D9             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412D9             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412D9             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412D9             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412D9             0016*                              ; the TMRx_CTL register is read.
0412D9             0017*  
0412D9             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412D9             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412D9             0020*  
0412D9             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412D9             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412D9             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412D9             0024*                              ; written to the counter when the end-of-count value is reached.
0412D9             0025*  
0412D9             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412D9             0027*  CLK_DIV_256:  equ %00001100 ;
0412D9             0028*  CLK_DIV_64:   equ %00001000 ;
0412D9             0029*  CLK_DIV_16:   equ %00000100 ;
0412D9             0030*  CLK_DIV_4:    equ %00000000 ;
0412D9             0031*  
0412D9             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412D9             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412D9             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412D9             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412D9             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412D9             0037*                              ; SINGLE-PASS mode is used.
0412D9             0038*  
0412D9             0039*  ; disable/enable the programmable reload timer
0412D9             0040*  PRT_EN_0:     equ %00000000 ;
0412D9             0041*  PRT_EN_1:     equ %00000001 ;
0412D9             0042*  
0412D9             0043*  ; Table 37. Timer Input Source Select Register
0412D9             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412D9             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412D9             0046*  ;   00: System clock / CLK_DIV
0412D9             0047*  ;   01: RTC / CLK_DIV
0412D9             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412D9             0049*  ;   10: GPIO port B pin 1.
0412D9             0050*  ;   11: GPIO port B pin 1.
0412D9             0051*  TMR_ISS:   equ 92h ; register address
0412D9             0052*  
0412D9             0053*  ; Table 51. Real-Time Clock Control Register
0412D9             0054*  RTC_CTRL: equ EDh ; register address
0412D9             0055*  
0412D9             0056*  ; alarm interrupt disable/enable
0412D9             0057*  RTC_ALARM_0:    equ %00000000
0412D9             0058*  RTC_ALARM_1:    equ %10000000
0412D9             0059*  
0412D9             0060*  ; interrupt on alarm disable/enable
0412D9             0061*  RTC_INT_ENT_0:  equ %00000000
0412D9             0062*  RTC_INT_ENT_1:  equ %01000000
0412D9             0063*  
0412D9             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412D9             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412D9             0066*  
0412D9             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412D9             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412D9             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412D9             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412D9             0071*  
0412D9             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412D9             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412D9             0074*  
0412D9             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412D9             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412D9             0077*  
0412D9             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412D9             0079*                                  ; RTC counter is enabled.
0412D9             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412D9             0081*                                  ; RTC counter is disabled.
0412D9             0082*  
0412D9             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412D9             0084*  
0412D9             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412D9             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412D9 00 00 00    0087*  prt_reload: dl 0x000000
0412DC             0088*  
0412DC             0089*  ; set PRT timer
0412DC             0090*  prt_set:
0412DC 21 00 00 00 0091*      ld hl,0
0412E0 22 2A 13 04 0092*      ld (prt_irq_counter),hl
0412E4 2A D9 12 04 0093*      ld hl,(prt_reload)
0412E8 ED 29 84    0094*      out0 ($84),l
0412EB ED 21 85    0095*  	out0 ($85),h
0412EE             0096*  ; disable timer
0412EE 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0412F0 ED 39 83    0098*  	out0 ($83),a
0412F3             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0412F3 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0412F5 ED 39 83    0101*  	out0 ($83),a
0412F8 C9          0102*      ret
0412F9             0103*  
0412F9             0104*  ; ===============================================
0412F9             0105*  ; PRT Timer Interrupt Handling
0412F9             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0412F9             0107*  ; -----------------------------------------------
0412F9             0108*  prt_irq_init:
0412F9             0109*      ; set up interrupt vector table 2
0412F9 21 00 00 00 0110*  	ld hl,0
0412FD 3A 0C 01 00 0111*  	ld a,($10c)
041301 6F          0112*  	ld l,a
041302 3A 0D 01 00 0113*  	ld a,($10d)
041306 67          0114*  	ld h,a
041307             0115*  
041307             0116*  	; skip over CALL ($c3)
041307 23          0117*  	inc hl
041308             0118*  	; load address of jump into vector table 2 (in ram)
041308 ED 27       0119*  	ld hl,(hl)
04130A             0120*  
04130A             0121*  	; write CALL prt_irq_handler to vector table 2
04130A 3E C3       0122*  	ld a,$c3
04130C 77          0123*  	ld (hl),a
04130D 23          0124*  	inc hl
04130E 11 15 13 04 0125*  	ld de,prt_irq_handler
041312 ED 1F       0126*  	ld (hl),de
041314             0127*  
041314 C9          0128*      ret
041315             0129*  
041315             0130*  prt_irq_handler:
041315 F3          0131*  	di
041316 F5          0132*  	push af
041317 E5          0133*      push hl
041318 ED 38 83    0134*  	in0 a,($83)
04131B 2A 2A 13 04 0135*  	ld hl,(prt_irq_counter)
04131F 23          0136*  	inc hl
041320 22 2A 13 04 0137*  	ld (prt_irq_counter),hl
041324 E1          0138*      pop hl
041325 F1          0139*  	pop af
041326 FB          0140*  	ei
041327 5B ED 4D    0141*  	reti.l
04132A             0142*  
04132A             0143*  prt_irq_counter:
04132A 00 00 00    0144*  	.dl 0
04132D             0145*  prt_irq_counter_saved:
04132D 00 00 00    0146*      .dl 0
041330             0147*  
041330             0148*  prt_loop_reset:
041330 E5          0149*      push hl
041331 21 00 00 00 0150*  	ld hl,0
041335 22 2A 13 04 0151*  	ld (prt_irq_counter),hl
041339 22 9B 13 04 0152*      ld (prt_loop_counter),hl
04133D 22 9E 13 04 0153*      ld (prt_loops),hl
041341 CD DC 12 04 0154*      call prt_set
041345 E1          0155*      pop hl
041346 C9          0156*      ret
041347             0157*  
041347             0158*  prt_loop_start:
041347 E5          0159*      push hl
041348 21 00 00 00 0160*  	ld hl,0
04134C 22 2A 13 04 0161*  	ld (prt_irq_counter),hl
041350 E1          0162*      pop hl
041351 C9          0163*      ret
041352             0164*  
041352             0165*  prt_loop_stop:
041352 E5          0166*      push hl
041353 D5          0167*      push de
041354 2A 2A 13 04 0168*      ld hl,(prt_irq_counter)
041358 ED 5B 9B 13 0169*      ld de,(prt_loop_counter)
       04          
04135D 19          0170*      add hl,de
04135E 22 9B 13 04 0171*      ld (prt_loop_counter),hl
041362 21 00 00 00 0172*      ld hl,0
041366 22 2A 13 04 0173*      ld (prt_irq_counter),hl
04136A 2A 9E 13 04 0174*      ld hl,(prt_loops)
04136E 23          0175*      inc hl
04136F 22 9E 13 04 0176*      ld (prt_loops),hl
041373 D1          0177*      pop de
041374 E1          0178*      pop hl
041375 C9          0179*      ret
041376             0180*  
041376             0181*  ; inputs: bc = y,x text coordinates to print
041376             0182*  prt_loop_print:
041376 F5          0183*      push af
041377 E5          0184*      push hl
041378 C5          0185*      push bc
041379 D5          0186*      push de
04137A DD E5       0187*      push ix
04137C FD E5       0188*      push iy
04137E CD 82 14 04 0189*      call vdu_move_cursor
041382             0190*  
041382 2A 9B 13 04 0191*      ld hl,(prt_loop_counter)
041386 CD 76 01 04 0192*      call printDec
04138A             0193*  
04138A 2A 9E 13 04 0194*      ld hl,(prt_loops)
04138E CD 76 01 04 0195*      call printDec
041392             0196*  
041392 FD E1       0197*      pop iy
041394 DD E1       0198*      pop ix
041396 D1          0199*      pop de
041397 C1          0200*      pop bc
041398 E1          0201*      pop hl
041399 F1          0202*      pop af
04139A C9          0203*      ret
04139B             0204*  
04139B             0205*  prt_loop_counter:
04139B 00 00 00    0206*      .dl 0
04139E             0207*  prt_loops:
04139E 00 00 00    0208*      .dl 0
0413A1             0209*  
0413A1             0210*  ; ===============================================
0413A1             0211*  ; Timer functions
0413A1             0212*  ; -----------------------------------------------
0413A1             0213*  ; set a countdown timer
0413A1             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413A1             0215*  ; returns: hl = current time
0413A1             0216*  tmr_set:
0413A1 FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
0413A4             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
0413A4 3E 08       0001*M 			LD	A, function
0413A6 5B CF       0002*M 			RST.LIL	08h
0413A8 DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
0413AB FD 2F 00    0220*      ld (iy+0),hl            ; set start time
0413AE C9          0221*      ret
0413AF             0222*  
0413AF             0223*  ; gets time remaining on a countdown timer
0413AF             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413AF             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413AF             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413AF             0227*  tmr_get:
0413AF             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
0413AF 3E 08       0001*M 			LD	A, function
0413B1 5B CF       0002*M 			RST.LIL	08h
0413B3 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413B6 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413B9 AF          0231*      xor a                   ; clear carry
0413BA ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413BC FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413BF AF          0234*      xor a                   ; clear carry
0413C0 ED 5A       0235*      adc hl,de               ; hl = time remaining
0413C2             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413C2 C9          0237*      ret
0413C3             0238*  
0413C3             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413C9             0240*  
0413C9 00 00 00    0241*  timestamp_now: dl 0
0413CC 00 00 00    0242*  timestamp_old: dl 0
0413CF 00 00 00    0243*  timestamp_chg: dl 0
0413D2             0244*  
0413D2             0245*  ; update the global timestamp from the system clock
0413D2             0246*  ; inputs: none
0413D2             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413D2             0248*  ;          ix = pointer to syvars table
0413D2             0249*  ; destroys: af,hl,de,ix
0413D2             0250*  timestamp_tick:
0413D2 ED 5B C9 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413D7 ED 53 CC 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413DC             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413DC 3E 08       0001*M 			LD	A, function
0413DE 5B CF       0002*M 			RST.LIL	08h
0413E0 DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413E3 22 C9 13 04 0255*      ld (timestamp_now),hl   ; save current time
0413E7 AF          0256*      xor a                   ; clear carry
0413E8 ED 52       0257*      sbc hl,de               ; hl = time elapsed
0413EA 22 CF 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
0413EE C9          0259*      ret
0413EF             0260*  
0413EF             0261*  ; set a countdown timer
0413EF             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413EF             0263*  ; requires: timestamp_tick to be called at least once before this function
0413EF             0264*  ; returns: hl = current time
0413EF             0265*  ; destroys: hl
0413EF             0266*  timestamp_tmr_set:
0413EF FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
0413F2 2A C9 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
0413F6 FD 2F 00    0269*      ld (iy+0),hl            ; set start time
0413F9 C9          0270*      ret
0413FA             0271*  
0413FA             0272*  ; gets time remaining on a countdown timer following the global timestamp
0413FA             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413FA             0274*  ; requires: timestamp_tick to be called at least once before this function
0413FA             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413FA             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413FA             0277*  ; destroys: af,hl,de
0413FA             0278*  timestamp_tmr_get:
0413FA ED 5B C9 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
0413FF FD 27 00    0280*      ld hl,(iy+0)            ; get start time
041402 AF          0281*      xor a                   ; clear carry
041403 ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041405 FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
041408 AF          0284*      xor a                   ; clear carry
041409 ED 5A       0285*      adc hl,de               ; hl = time remaining
04140B             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04140B C9          0287*      ret
04140C             0288*  
04140C             0289*  ; set a stopwatch
04140C             0290*  ; returns: hl = start time
04140C             0291*  ; destroys: hl,ix
04140C             0292*  stopwatch_set:
04140C             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
04140C 3E 08       0001*M 			LD	A, function
04140E 5B CF       0002*M 			RST.LIL	08h
041410 DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
041413 22 28 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041417 C9          0296*      ret
041418             0297*  
041418             0298*  ; gets time elapsed on a stopwatch
041418             0299*  ; returns: hl = time elapsed in 1/120ths of a second
041418             0300*  ; destroys: af,hl,de,ix
041418             0301*  stopwatch_get:
041418             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
041418 3E 08       0001*M 			LD	A, function
04141A 5B CF       0002*M 			RST.LIL	08h
04141C DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
04141F ED 5B 28 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
041424 AF          0305*      xor a                   ; clear carry
041425 ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041427 C9          0307*      ret
041428             0308*  
041428             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04142B             0310*  
04142B             0311*  ; ------------------
04142B             0312*  ; delay routine
04142B             0313*  ; Author: Richard Turrnidge
04142B             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04142B             0315*  ; routine waits a fixed time,then returns
04142B             0316*  ; arrive with A =  the delay byte. One bit to be set only.
04142B             0317*  ; eg. ld A,00000100b
04142B             0318*  
04142B             0319*  multiPurposeDelay:
04142B F5          0320*      push af
04142C C5          0321*      push bc
04142D DD E5       0322*      push ix
04142F 47          0323*      ld b,a
041430 3E 08       0324*      ld a,$08
041432 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
041434             0326*  
041434             0327*  waitLoop:
041434             0328*  
041434 DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041437             0330*  
041437             0331*                                  ;   we check if bit set is same as last time we checked.
041437             0332*                                  ;   bit 0 - don't use
041437             0333*                                  ;   bit 1 - changes 64 times per second
041437             0334*                                  ;   bit 2 - changes 32 times per second
041437             0335*                                  ;   bit 3 - changes 16 times per second
041437             0336*  
041437             0337*                                  ;   bit 4 - changes 8 times per second
041437             0338*                                  ;   bit 5 - changes 4 times per second
041437             0339*                                  ;   bit 6 - changes 2 times per second
041437             0340*                                  ;   bit 7 - changes 1 times per second
041437 A0          0341*      and b
041438 4F          0342*      ld c,a
041439 3A 4A 14 04 0343*      ld a,(oldTimeStamp)
04143D B9          0344*      cp c                        ; is A same as last value?
04143E 28 F4       0345*      jr z,waitLoop              ; loop here if it is
041440 79          0346*      ld a,c
041441 32 4A 14 04 0347*      ld (oldTimeStamp),a        ; set new value
041445             0348*  
041445 DD E1       0349*      pop ix
041447 C1          0350*      pop bc
041448 F1          0351*      pop af
041449 C9          0352*      ret
04144A             0353*  
04144A 00          0354*  oldTimeStamp:   .db 00h
04144B             0037       include "vdu.inc"
04144B             0001*  
04144B             0002*  ; VDU 30: Home cursor
04144B             0003*  vdu_home_cursor:
04144B 3E 1E       0004*      ld a,30
04144D 5B D7       0005*  	rst.lil $10
04144F C9          0006*  	ret
041450             0007*  
041450             0008*  vdu_cursor_on:
041450 21 5B 14 04 0009*  	ld hl,@cmd
041454 01 03 00 00 0010*  	ld bc,@end-@cmd
041458 5B DF       0011*  	rst.lil $18
04145A C9          0012*  	ret
04145B             0013*  @cmd:
04145B 17 01 01    0014*  	db 23,1,1
04145E             0015*  @end:
04145E             0016*  
04145E             0017*  vdu_cursor_off:
04145E 21 69 14 04 0018*  	ld hl,@cmd
041462 01 03 00 00 0019*  	ld bc,@end-@cmd
041466 5B DF       0020*  	rst.lil $18
041468 C9          0021*  	ret
041469             0022*  @cmd:
041469 17 01 00    0023*  	db 23,1,0
04146C             0024*  @end:
04146C             0025*  
04146C             0026*  ; VDU 5: Write text at graphics cursor
04146C             0027*  ; inputs: a is the character to write to the screen
04146C             0028*  ; prerequisites: the graphics cursor at the intended position on screen
04146C             0029*  ; outputs: see the name of the function
04146C             0030*  ; destroys: a, hl, bc
04146C             0031*  vdu_char_to_gfx_cursor:
04146C 32 7C 14 04 0032*  	ld (@arg),a
041470 21 7B 14 04 0033*  	ld hl,@cmd
041474 01 02 00 00 0034*  	ld bc,@end-@cmd
041478 5B DF       0035*  	rst.lil $18
04147A C9          0036*  	ret
04147B 05          0037*  @cmd: db 5
04147C 00          0038*  @arg: db 0
04147D             0039*  @end:
04147D             0040*  ; VDU 9: Move cursor forward one character
04147D             0041*  vdu_cursor_forward:
04147D 3E 09       0042*      ld a,9
04147F 5B D7       0043*  	rst.lil $10
041481 C9          0044*  	ret
041482             0045*  
041482             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041482             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041482             0048*  vdu_move_cursor:
041482 ED 43 93 14 0049*      ld (@x0),bc
       04          
041487 21 92 14 04 0050*  	ld hl,@cmd
04148B 01 03 00 00 0051*  	ld bc,@end-@cmd
04148F 5B DF       0052*  	rst.lil $18
041491 C9          0053*  	ret
041492 1F          0054*  @cmd: 	db 31
041493 00          0055*  @x0:	db 0
041494 00          0056*  @y0: 	db 0
041495 00          0057*  @end: 	db 0 ; padding
041496             0058*  
041496             0059*  ; VDU 12: Clear text area (CLS)
041496             0060*  vdu_cls:
041496 3E 0C       0061*      ld a,12
041498 5B D7       0062*  	rst.lil $10
04149A C9          0063*  	ret
04149B             0064*  
04149B             0065*  vdu_flip:
04149B 21 A6 14 04 0066*  	ld hl,@cmd
04149F 01 03 00 00 0067*  	ld bc,@end-@cmd
0414A3 5B DF       0068*  	rst.lil $18
0414A5 C9          0069*  	ret
0414A6 17 00 C3    0070*  @cmd: db 23,0,0xC3
0414A9             0071*  @end:
0414A9             0072*  
0414A9             0073*  ; VDU 16: Clear graphics area (CLG)
0414A9             0074*  vdu_clg:
0414A9 3E 10       0075*      ld a,16
0414AB 5B D7       0076*  	rst.lil $10
0414AD C9          0077*  	ret
0414AE             0078*  
0414AE             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0414AE             0080*  ; VDU 23, 7: Scrolling
0414AE             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0414AE             0082*  ; inputs: a, extent; l, direction; h; speed
0414AE             0083*  vdu_scroll_down:
0414AE 32 C3 14 04 0084*  	ld (@extent),a
0414B2 22 C4 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414B6 21 C1 14 04 0086*  	ld hl,@cmd
0414BA 01 05 00 00 0087*  	ld bc,@end-@cmd
0414BE 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414C0 C9          0089*  	ret
0414C1 17 07       0090*  @cmd:       db 23,7
0414C3 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414C4 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414C5 00          0093*  @speed:     db 0x00 ; pixels
0414C6 00          0094*  @end:		db 0x00 ; padding
0414C7             0095*  
0414C7             0096*  ; COLOUR MODES
0414C7             0097*  ; Mode	Effect
0414C7             0098*  ; 0	Set on-screen pixel to target colour value
0414C7             0099*  ; 1	OR value with the on-screen pixel
0414C7             0100*  ; 2	AND value with the on-screen pixel
0414C7             0101*  ; 3	XOR value with the on-screen pixel
0414C7             0102*  ; 4	Invert the on-screen pixel
0414C7             0103*  ; 5	No operation
0414C7             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414C7             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414C7             0106*  
0414C7             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414C7             0108*  vdu_colour_text:
0414C7 32 D7 14 04 0109*  	ld (@arg),a
0414CB 21 D6 14 04 0110*  	ld hl,@cmd
0414CF 01 02 00 00 0111*  	ld bc,@end-@cmd
0414D3 5B DF       0112*  	rst.lil $18
0414D5 C9          0113*  	ret
0414D6 11          0114*  @cmd: db 17
0414D7 00          0115*  @arg: db 0
0414D8             0116*  @end:
0414D8             0117*  
0414D8             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414D8             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414D8             0120*  vdu_gcol:
0414D8 32 ED 14 04 0121*  	ld (@mode),a
0414DC 79          0122*      ld a,c
0414DD 32 EE 14 04 0123*      ld (@col),a
0414E1 21 EC 14 04 0124*  	ld hl,@cmd
0414E5 01 03 00 00 0125*  	ld bc,@end-@cmd
0414E9 5B DF       0126*  	rst.lil $18
0414EB C9          0127*  	ret
0414EC 12          0128*  @cmd:  db 18
0414ED 00          0129*  @mode: db 0
0414EE 00          0130*  @col:  db 0
0414EF             0131*  @end:
0414EF             0132*  
0414EF             0133*  
0414EF             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
0414EF             0135*  ; MIND THE LITTLE-ENDIANESS
0414EF             0136*  ; inputs: c=left,b=bottom,e=right,d=top
0414EF             0137*  ; outputs; nothing
0414EF             0138*  ; destroys: a might make it out alive
0414EF             0139*  vdu_set_txt_viewport:
0414EF ED 43 05 15 0140*      ld (@lb),bc
       04          
0414F4 ED 53 07 15 0141*  	ld (@rt),de
       04          
0414F9 21 04 15 04 0142*  	ld hl,@cmd
0414FD 01 05 00 00 0143*  	ld bc,@end-@cmd
041501 5B DF       0144*  	rst.lil $18
041503 C9          0145*  	ret
041504 1C          0146*  @cmd:   db 28 ; set text viewport command
041505 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
041507 00 00       0148*  @rt: 	dw 0x0000 ; set by de
041509 00          0149*  @end:   db 0x00	  ; padding
04150A             0150*  
04150A             0151*  ; Wait for VBLANK interrupt
04150A             0152*  vdu_vblank:
04150A DD E5       0153*      PUSH 	IX
04150C             0154*  	MOSCALL	mos_sysvars
04150C 3E 08       0001*M 			LD	A, function
04150E 5B CF       0002*M 			RST.LIL	08h
041510 DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041513             0156*  @wait:
041513 DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041516 28 FB       0158*      JR	Z, @wait
041518 DD E1       0159*      POP	IX
04151A C9          0160*      RET
04151B             0161*  
04151B             0162*  ; VDU 29, x; y;: Set graphics origin
04151B             0163*  ; This command sets the graphics origin.
04151B             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
04151B             0165*  ; inputs: bc=x0,de=y0
04151B             0166*  ; outputs; nothing
04151B             0167*  ; destroys: a might make it out alive
04151B             0168*  vdu_set_gfx_origin:
04151B ED 43 31 15 0169*      ld (@x0),bc
       04          
041520 ED 53 33 15 0170*      ld (@y0),de
       04          
041525 21 30 15 04 0171*      ld hl,@cmd
041529 01 05 00 00 0172*      ld bc,@end-@cmd
04152D 5B DF       0173*      rst.lil $18
04152F C9          0174*      ret
041530 1D          0175*  @cmd:   db 29 ; set graphics origin command
041531 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041533 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041535 00          0178*  @end:   db 0x00	  ; padding
041536             0179*  
041536             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041536             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041536             0182*  ; 	because we have turned off logical screen scaling
041536             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041536             0184*  ; outputs; nothing
041536             0185*  ; destroys: a might make it out alive
041536             0186*  vdu_set_gfx_viewport:
041536 ED 43 56 15 0187*      ld (@x0),bc
       04          
04153B FD 22 58 15 0188*      ld (@y1),iy
       04          
041540 DD 22 5A 15 0189*  	ld (@x1),ix
       04          
041545 ED 53 5C 15 0190*  	ld (@y0),de
       04          
04154A 21 55 15 04 0191*  	ld hl,@cmd
04154E 01 09 00 00 0192*  	ld bc,@end-@cmd
041552 5B DF       0193*  	rst.lil $18
041554 C9          0194*  	ret
041555 18          0195*  @cmd:   db 24 ; set graphics viewport command
041556 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
041558 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
04155A 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
04155C 00 00       0199*  @y0: 	dw 0x0000 ; set by de
04155E 00          0200*  @end:   db 0x00	  ; padding
04155F             0201*  
04155F             0202*  ; SCREEN MODES
04155F             0203*  ; ===============================
04155F             0204*  ; Mode  Horz  Vert  Cols  Refresh
04155F             0205*  ; ---   ----  ----  ----  -------
04155F             0206*  ; 11    320   240   2     60hz
04155F             0207*  ; 139   320   240   2     60hz
04155F             0208*  ; 23    512   384   2     60hz
04155F             0209*  ; 151   512   384   2     60hz
04155F             0210*  ; 6     640   240   2     60hz
04155F             0211*  ; 134   640   240   2     60hz
04155F             0212*  ; 2     640   480   2     60hz
04155F             0213*  ; 130   640   480   2     60hz
04155F             0214*  ; 17    800   600   2     60hz
04155F             0215*  ; 145   800   600   2     60hz
04155F             0216*  ; 18    1024  768   2     60hz
04155F             0217*  ; 146   1024  768   2     60hz
04155F             0218*  ; ---   ----  ----  ----  -------
04155F             0219*  ; 10    320   240   4     60hz
04155F             0220*  ; 138   320   240   4     60hz
04155F             0221*  ; 22    512   384   4     60hz
04155F             0222*  ; 150   512   384   4     60hz
04155F             0223*  ; 5     640   240   4     60hz
04155F             0224*  ; 133   640   240   4     60hz
04155F             0225*  ; 1     640   480   4     60hz
04155F             0226*  ; 129   640   480   4     60hz
04155F             0227*  ; 16    800   600   4     60hz
04155F             0228*  ; 19    1024  768   4     60hz
04155F             0229*  ; ---   ----  ----  ----  -------
04155F             0230*  ; 9     320   240   16    60hz
04155F             0231*  ; 137   320   240   16    60hz
04155F             0232*  ; 21    512   384   16    60hz
04155F             0233*  ; 149   512   384   16    60hz
04155F             0234*  ; 4     640   240   16    60hz
04155F             0235*  ; 132   640   240   16    60hz
04155F             0236*  ; 0     640   480   16    60hz
04155F             0237*  ; 7     n/a   n/a   16    60hz
04155F             0238*  ; ---   ----  ----  ----  -------
04155F             0239*  ; 8     320   240   64    60hz
04155F             0240*  ; 136   320   240   64    60hz
04155F             0241*  ; 20    512   384   64    60hz
04155F             0242*  ; 3     640   240   64    60hz
04155F             0243*  ; ---   ----  ----  ----  -------
04155F             0244*  vdu_set_screen_mode:
04155F 32 6F 15 04 0245*  	ld (@arg),a
041563 21 6E 15 04 0246*  	ld hl,@cmd
041567 01 02 00 00 0247*  	ld bc,@end-@cmd
04156B 5B DF       0248*  	rst.lil $18
04156D C9          0249*  	ret
04156E 16          0250*  @cmd: db 22 ; set screen mode
04156F 00          0251*  @arg: db 0  ; screen mode parameter
041570             0252*  @end:
041570             0253*  
041570             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041570             0255*  ; inputs: a is scaling mode, 1=on, 0=off
041570             0256*  ; note: default setting on boot is scaling ON
041570             0257*  vdu_set_scaling:
041570 32 82 15 04 0258*  	ld (@arg),a
041574 21 7F 15 04 0259*  	ld hl,@cmd
041578 01 04 00 00 0260*  	ld bc,@end-@cmd
04157C 5B DF       0261*  	rst.lil $18
04157E C9          0262*  	ret
04157F 17 00 C0    0263*  @cmd: db 23,0,0xC0
041582 00          0264*  @arg: db 0  ; scaling on/off
041583             0265*  @end:
041583             0266*  
041583             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041583             0268*  ; inputs: hl=bufferId
041583             0269*  vdu_buff_select:
041583 22 95 15 04 0270*  	ld (@bufferId),hl
041587 21 92 15 04 0271*  	ld hl,@cmd
04158B 01 05 00 00 0272*  	ld bc,@end-@cmd
04158F 5B DF       0273*  	rst.lil $18
041591 C9          0274*  	ret
041592 17 1B 20    0275*  @cmd: db 23,27,0x20
041595 00 00       0276*  @bufferId: dw 0x0000
041597 00          0277*  @end: db 0x00 ; padding
041598             0278*  
041598             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041598             0280*  ; inputs: a=format; bc=width; de=height
041598             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041598             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041598             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
041598             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
041598             0285*  ; 2 	Mono/Mask (1-bit per pixel)
041598             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
041598             0287*  vdu_bmp_create:
041598 ED 43 B4 15 0288*      ld (@width),bc
       04          
04159D ED 53 B6 15 0289*      ld (@height),de
       04          
0415A2 32 B8 15 04 0290*      ld (@fmt),a
0415A6 21 B1 15 04 0291*  	ld hl,@cmd
0415AA 01 08 00 00 0292*  	ld bc,@end-@cmd
0415AE 5B DF       0293*  	rst.lil $18
0415B0 C9          0294*  	ret
0415B1 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415B4 00 00       0296*  @width:     dw 0x0000
0415B6 00 00       0297*  @height:    dw 0x0000
0415B8 00          0298*  @fmt:       db 0x00
0415B9             0299*  @end:
0415B9             0300*  
0415B9             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415B9             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415B9             0303*  vdu_load_img_rgba2_to_8:
0415B9             0304*  ; backup the target buffer id and image dimensions
0415B9 E5          0305*      push hl
0415BA D5          0306*      push de
0415BB C5          0307*      push bc
0415BC             0308*  ; load the rgba2 image to working buffer 65534
0415BC 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415C0 CD C3 16 04 0310*  	call vdu_load_buffer_from_file
0415C4             0311*  ; restore the image dimensions and target buffer id
0415C4 C1          0312*      pop bc
0415C5 D1          0313*      pop de
0415C6 E1          0314*      pop hl
0415C7             0315*  ; fall through to vdu_rgba2_to_8
0415C7             0316*  
0415C7             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415C7             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415C7             0319*  ; the "expand bitmap" command is:
0415C7             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415C7             0321*  ; and then to reverse the byte order to fix endian-ness:
0415C7             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415C7             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415C7             0324*  ; VDU 23,27,&20,targetBufferID%;
0415C7             0325*  ; VDU 23,27,&21,width%;height%;0
0415C7             0326*  ; -------------------------------------------------------------------
0415C7             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415C7             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415C7             0329*  vdu_rgba2_to_8:
0415C7             0330*  ; load the image dimensions and buffer id parameters
0415C7 ED 43 23 16 0331*      ld (@width),bc
       04          
0415CC ED 53 25 16 0332*      ld (@height),de
       04          
0415D1 22 08 16 04 0333*      ld (@bufferId0),hl
0415D5 22 15 16 04 0334*      ld (@bufferId2),hl
0415D9 22 1E 16 04 0335*      ld (@bufferId1),hl
0415DD             0336*  ; clean up bytes that got stomped on by the ID loads
0415DD 3E 48       0337*      ld a,0x48
0415DF 32 0A 16 04 0338*      ld (@bufferId0+2),a
0415E3 3E 17       0339*      ld a,23
0415E5 32 20 16 04 0340*      ld (@bufferId1+2),a
0415E9 3E 18       0341*      ld a,24
0415EB 32 17 16 04 0342*      ld (@bufferId2+2),a
0415EF AF          0343*      xor a
0415F0 32 27 16 04 0344*      ld (@height+2),a
0415F4             0345*  ; send the vdu command strings
0415F4 21 FF 15 04 0346*      ld hl,@beg
0415F8 01 29 00 00 0347*      ld bc,@end-@beg
0415FC 5B DF       0348*      rst.lil $18
0415FE C9          0349*      ret
0415FF             0350*  @beg:
0415FF             0351*  ; Command 14: Consolidate blocks in a buffer
0415FF             0352*  ; VDU 23, 0, &A0, bufferId; 14
0415FF 17 00 A0    0353*      db 23,0,0xA0
041602 FE FF       0354*      dw 65534 ; workingBufferId
041604 0E          0355*      db 14 ; consolidate blocks
041605             0356*  ; the "expand bitmap" command is:
041605             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041605 17 00 A0    0358*      db 23,0,0xA0
041608 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
04160A 48          0360*      db 0x48 ; given as decimal command 72 in the docs
04160B 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
04160C FE FF       0362*      dw 65534 ; sourceBufferId
04160E 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041612             0364*  ; reverse the byte order to fix endian-ness:
041612             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041612             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041612             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041612 17 00 A0    0368*      db 23,0,0xA0
041615 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041617 18          0370*      db 24 ; reverse byte order
041618 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041619 04 00       0372*      dw 4 ; size (4 bytes)
04161B             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04161B             0374*  ; VDU 23,27,&20,targetBufferID%;
04161B 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
04161E 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
041620             0377*  ; VDU 23,27,&21,width%;height%;0
041620 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041623 00 00       0379*  @width: dw 0x0000
041625 00 00       0380*  @height: dw 0x0000
041627 00          0381*      db 0x00 ; rgba8888 format
041628             0382*  @end:
041628             0383*  
041628             0384*  ; scratch variables
041628 00 00 00    0385*  bufferId0: dl 0x000000
04162B 00 00 00    0386*  bufferId1: dl 0x000000
04162E             0387*  
04162E             0388*  ; load a vdu buffer from local memory
04162E             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04162E             0390*  vdu_load_buffer:
04162E ED 43 57 16 0391*      ld (@length),bc
       04          
041633 D5          0392*      push de ; save data pointer
041634             0393*  ; send the vdu command string
041634 7D          0394*      ld a,l
041635 32 54 16 04 0395*      ld (@bufferId),a
041639 7C          0396*      ld a,h
04163A 32 55 16 04 0397*      ld (@bufferId+1),a
04163E 21 51 16 04 0398*      ld hl,@cmd
041642 01 08 00 00 0399*      ld bc,@end-@cmd
041646 5B DF       0400*      rst.lil $18
041648             0401*  ; send the buffer data
041648 E1          0402*      pop hl ; pointer to data
041649 ED 4B 57 16 0403*      ld bc,(@length)
       04          
04164E 5B DF       0404*      rst.lil $18 ; send it
041650 C9          0405*      ret
041651             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041651 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041654 00 00       0408*  @bufferId:	dw 0x0000
041656 00          0409*  		    db 0 ; load buffer
041657 00 00       0410*  @length:	dw 0x0000
041659 00          0411*  @end: db 0 ; padding
04165A             0412*  
04165A             0413*  ; clear a buffer
04165A             0414*  ; inputs: hl = bufferId
04165A             0415*  vdu_clear_buffer:
04165A 7D          0416*      ld a,l
04165B 32 72 16 04 0417*      ld (@bufferId),a
04165F 7C          0418*      ld a,h
041660 32 73 16 04 0419*      ld (@bufferId+1),a
041664 21 6F 16 04 0420*      ld hl,@cmd
041668 01 06 00 00 0421*      ld bc,@end-@cmd
04166C 5B DF       0422*      rst.lil $18
04166E C9          0423*      ret
04166F 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041672 00 00       0425*  @bufferId:	dw 0x0000
041674 02          0426*  		    db 2 ; clear buffer
041675             0427*  @end:
041675             0428*  
041675             0429*  vdu_clear_all_buffers:
041675             0430*  ; clear all buffers
041675 21 80 16 04 0431*      ld hl,@beg
041679 01 06 00 00 0432*      ld bc,@end-@beg
04167D 5B DF       0433*      rst.lil $18
04167F C9          0434*      ret
041680 17 00 A0    0435*  @beg: db 23,0,$A0
041683 FF FF       0436*        dw -1 ; clear all buffers
041685 02          0437*        db 2  ; command 2: clear a buffer
041686             0438*  @end:
041686             0439*  
041686             0440*  ; Command 14: Consolidate blocks in a buffer
041686             0441*  vdu_consolidate_buffer:
041686             0442*  ; set parameters for vdu call
041686 7D          0443*      ld a,l
041687 32 9E 16 04 0444*      ld (@bufferId),a
04168B 7C          0445*      ld a,h
04168C 32 9F 16 04 0446*      ld (@bufferId+1),a
041690 21 9B 16 04 0447*      ld hl,@beg
041694 01 06 00 00 0448*      ld bc,@end-@beg
041698 5B DF       0449*      rst.lil $18
04169A C9          0450*      ret
04169B             0451*  ; VDU 23, 0, &A0, bufferId; 14
04169B 17 00 A0    0452*  @beg: db 23,0,0xA0
04169E 00 00       0453*  @bufferId: dw 0x0000
0416A0 0E          0454*             db 14
0416A1             0455*  @end:
0416A1             0456*  
0416A1             0457*  ; load an image file to a buffer and make it a bitmap
0416A1             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0416A1             0459*  vdu_load_img:
0416A1             0460*  ; back up image type and dimension parameters
0416A1 22 28 16 04 0461*      ld (bufferId0),hl
0416A5 F5          0462*      push af
0416A6 C5          0463*  	push bc
0416A7 D5          0464*  	push de
0416A8             0465*  ; load the image
0416A8 CD C3 16 04 0466*  	call vdu_load_buffer_from_file
0416AC             0467*  ; now make it a bitmap
0416AC 2A 28 16 04 0468*      ld hl,(bufferId0)
0416B0 CD 86 16 04 0469*      call vdu_consolidate_buffer
0416B4 2A 28 16 04 0470*      ld hl,(bufferId0)
0416B8 CD 83 15 04 0471*      call vdu_buff_select
0416BC D1          0472*  	pop de ; image height
0416BD C1          0473*  	pop bc ; image width
0416BE F1          0474*  	pop af ; image type
0416BF C3 98 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416C3             0476*  
0416C3             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416C3             0478*  vdu_load_buffer_from_file:
0416C3 22 28 16 04 0479*      ld (bufferId0),hl
0416C7             0480*  
0416C7             0481*  ; clear target buffer
0416C7 CD 5A 16 04 0482*      call vdu_clear_buffer
0416CB             0483*  
0416CB             0484*  ; open the file in read mode
0416CB             0485*  ; Open a file
0416CB             0486*  ; HLU: Filename
0416CB             0487*  ;   C: Mode
0416CB             0488*  ; Returns:
0416CB             0489*  ;   A: Filehandle, or 0 if couldn't open
0416CB FD E5       0490*  	push iy ; pointer to filename
0416CD E1          0491*  	pop hl
0416CE 0E 01       0492*  	ld c,fa_read
0416D0             0493*      MOSCALL mos_fopen
0416D0 3E 0A       0001*M 			LD	A, function
0416D2 5B CF       0002*M 			RST.LIL	08h
0416D4 32 0F 17 04 0494*      ld (@filehandle),a
0416D8             0495*  
0416D8             0496*  @read_file:
0416D8             0497*  ; Read a block of data from a file
0416D8             0498*  ;   C: Filehandle
0416D8             0499*  ; HLU: Pointer to where to write the data to
0416D8             0500*  ; DEU: Number of bytes to read
0416D8             0501*  ; Returns:
0416D8             0502*  ; DEU: Number of bytes read
0416D8 3A 0F 17 04 0503*      ld a,(@filehandle)
0416DC 4F          0504*      ld c,a
0416DD 21 00 E0 B7 0505*      ld hl,filedata
0416E1 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416E5             0507*      MOSCALL mos_fread
0416E5 3E 1A       0001*M 			LD	A, function
0416E7 5B CF       0002*M 			RST.LIL	08h
0416E9             0508*  
0416E9             0509*  ; test de for zero bytes read
0416E9 21 00 00 00 0510*      ld hl,0
0416ED AF          0511*      xor a ; clear carry
0416EE ED 52       0512*      sbc hl,de
0416F0 CA 06 17 04 0513*      jp z,@close_file
0416F4             0514*  
0416F4             0515*  ; load a vdu buffer from local memory
0416F4             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0416F4 2A 28 16 04 0517*      ld hl,(bufferId0)
0416F8 D5          0518*      push de ; chunksize
0416F9 C1          0519*      pop bc
0416FA 11 00 E0 B7 0520*      ld de,filedata
0416FE CD 2E 16 04 0521*      call vdu_load_buffer
041702             0522*  
041702             0523*  ; read the next block
041702 C3 D8 16 04 0524*      jp @read_file
041706             0525*  
041706             0526*  ; close the file
041706             0527*  @close_file:
041706 3A 0F 17 04 0528*      ld a,(@filehandle)
04170A             0529*      MOSCALL mos_fclose
04170A 3E 0B       0001*M 			LD	A, function
04170C 5B CF       0002*M 			RST.LIL	08h
04170E C9          0530*      ret ; vdu_load_buffer_from_file
04170F             0531*  
04170F 00          0532*  @filehandle: db 0 ; file handle
041710 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041713             0534*  
041713 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041716             0536*  
041716             0537*  ; File information structure (FILINFO)
041716             0538*  @filinfo:
041716 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04171A 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04171C 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04171E 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
04171F 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04172C 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04182C             0038       include "vdu_fonts.inc"
04182C             0001*  ; select font
04182C             0002*  ; inputs: hl = bufferId, a = font flags
04182C             0003*  ; Flags:
04182C             0004*  ; Bit	Description
04182C             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
04182C             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
04182C             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
04182C             0008*  ; 1-7	Reserved for future use
04182C             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04182C             0010*  vdu_font_select:
04182C 22 43 18 04 0011*      ld (@bufferId),hl
041830 32 45 18 04 0012*      ld (@flags),a
041834 21 3F 18 04 0013*      ld hl,@cmd
041838 01 07 00 00 0014*      ld bc,@end-@cmd
04183C 5B DF       0015*      rst.lil $18
04183E C9          0016*      ret
04183F 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041843 00 00       0018*  @bufferId: dw 0x0000
041845 00          0019*  @flags: db 0x00
041846             0020*  @end:
041846             0021*  
041846             0022*  ; create font from buffer
041846             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041846             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041846             0025*  vdu_font_create:
041846 22 6B 18 04 0026*      ld (@bufferId),hl
04184A ED 53 6D 18 0027*      ld (@width),de ; also loads height
       04          
04184F 32 70 18 04 0028*      ld (@flags),a
041853 7A          0029*      ld a,d ; height
041854 32 6F 18 04 0030*      ld (@ascent),a ; ascent = height
041858             0031*  ; consolidate buffer
041858 CD 86 16 04 0032*      call vdu_consolidate_buffer
04185C             0033*  ; create font
04185C 21 67 18 04 0034*      ld hl,@cmd
041860 01 0A 00 00 0035*      ld bc,@end-@cmd
041864 5B DF       0036*      rst.lil $18
041866 C9          0037*      ret
041867 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
04186B 00 00       0039*  @bufferId: dw 0x0000
04186D 00          0040*  @width: db 0x00
04186E 00          0041*  @height: db 0x00
04186F 00          0042*  @ascent: db 0x00
041870 00          0043*  @flags: db 0x00
041871             0044*  @end:
041871             0045*  
041871             0046*  ; set or adjust font property
041871             0047*  ; inputs: hl = bufferId, a = field, de = value
041871             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041871             0049*  vdu_font_property:
041871 22 8D 18 04 0050*      ld (@bufferId),hl
041875 32 8F 18 04 0051*      ld (@field),a
041879 ED 53 90 18 0052*      ld (@value),de
       04          
04187E 21 89 18 04 0053*      ld hl,@cmd
041882 01 09 00 00 0054*      ld bc,@end-@cmd
041886 5B DF       0055*      rst.lil $18
041888 C9          0056*      ret
041889 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
04188D 00 00       0058*  @bufferId: dw 0x0000
04188F 00          0059*  @field: db 0x00
041890 00 00       0060*  @value: dw 0x0000
041892 00          0061*  @end: db 0x00 ; padding
041893             0062*  
041893             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041893             0064*  
041893             0065*  ; Clear/Delete font
041893             0066*  ; inputs: hl = bufferId
041893             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041893             0068*  vdu_font_clear:
041893 22 A6 18 04 0069*      ld (@bufferId),hl
041897 21 A2 18 04 0070*      ld hl,@cmd
04189B 01 06 00 00 0071*      ld bc,@end-@cmd
04189F 5B DF       0072*      rst.lil $18
0418A1 C9          0073*      ret
0418A2 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
0418A6 00 00       0075*  @bufferId: dw 0x0000
0418A8 00          0076*  @end: db 0x00 ; padding
0418A9             0077*  
0418A9             0078*  ; Copy system font to buffer
0418A9             0079*  ; inputs: hl = bufferId
0418A9             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0418A9             0081*  vdu_font_copy_system:
0418A9 22 BC 18 04 0082*      ld (@bufferId),hl
0418AD 21 B8 18 04 0083*      ld hl,@cmd
0418B1 01 06 00 00 0084*      ld bc,@end-@cmd
0418B5 5B DF       0085*      rst.lil $18
0418B7 C9          0086*      ret
0418B8 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418BC 00 00       0088*  @bufferId: dw 0x0000
0418BE 00          0089*  @end: db 0x00 ; padding
0418BF             0039       include "vdu_plot.inc"
0418BF             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418BF             0002*  ; PLOT code 	(Decimal) 	Effect
0418BF             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418BF             0004*  plot_sl_both: equ 0x00
0418BF             0005*  
0418BF             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418BF             0007*  plot_sl_first: equ 0x08
0418BF             0008*  
0418BF             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418BF             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418BF             0011*  
0418BF             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418BF             0013*  plot_sl_last: equ 0x20
0418BF             0014*  
0418BF             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418BF             0016*  plot_sl_none: equ 0x28
0418BF             0017*  
0418BF             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418BF             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418BF             0020*  
0418BF             0021*  ; &40-&47 	64-71 	Point plot
0418BF             0022*  plot_pt: equ 0x40
0418BF             0023*  
0418BF             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418BF             0025*  plot_lf_lr_non_bg: equ 0x48
0418BF             0026*  
0418BF             0027*  ; &50-&57 	80-87 	Triangle fill
0418BF             0028*  plot_tf: equ 0x50
0418BF             0029*  
0418BF             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418BF             0031*  plot_lf_r_bg: equ 0x58
0418BF             0032*  
0418BF             0033*  ; &60-&67 	96-103 	Rectangle fill
0418BF             0034*  plot_rf: equ 0x60
0418BF             0035*  
0418BF             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418BF             0037*  plot_lf_lr_fg: equ 0x60
0418BF             0038*  
0418BF             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418BF             0040*  plot_pf: equ 0x70
0418BF             0041*  
0418BF             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418BF             0043*  plot_lf_r_non_fg: equ 0x78
0418BF             0044*  
0418BF             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418BF             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418BF             0047*  
0418BF             0048*  ; &90-&97 	144-151 	Circle outline
0418BF             0049*  plot_co: equ 0x90
0418BF             0050*  
0418BF             0051*  ; &98-&9F 	152-159 	Circle fill
0418BF             0052*  plot_cf: equ 0x98
0418BF             0053*  
0418BF             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418BF             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418BF             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418BF             0057*  
0418BF             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418BF             0059*  plot_rcm: equ 0xB8
0418BF             0060*  
0418BF             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418BF             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418BF             0063*  ; &D0-&D7 	208-215 	Not defined
0418BF             0064*  ; &D8-&DF 	216-223 	Not defined
0418BF             0065*  ; &E0-&E7 	224-231 	Not defined
0418BF             0066*  
0418BF             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418BF             0068*  plot_bmp: equ 0xE8
0418BF             0069*  
0418BF             0070*  ; &F0-&F7 	240-247 	Not defined
0418BF             0071*  ; &F8-&FF 	248-255 	Not defined
0418BF             0072*  
0418BF             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418BF             0074*  ; Agon Console8 VDP 2.2.0
0418BF             0075*  
0418BF             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418BF             0077*  ; Plot code 	Effect
0418BF             0078*  ; 0 	Move relative
0418BF             0079*  mv_rel: equ 0
0418BF             0080*  
0418BF             0081*  ; 1 	Plot relative in current foreground colour
0418BF             0082*  dr_rel_fg: equ 1
0418BF             0083*  
0418BF             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418BF             0085*  ; 3 	Plot relative in current background colour
0418BF             0086*  dr_rel_bg: equ 3
0418BF             0087*  
0418BF             0088*  ; 4 	Move absolute
0418BF             0089*  mv_abs: equ 4
0418BF             0090*  
0418BF             0091*  ; 5 	Plot absolute in current foreground colour
0418BF             0092*  dr_abs_fg: equ 5
0418BF             0093*  
0418BF             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418BF             0095*  ; 7 	Plot absolute in current background colour
0418BF             0096*  dr_abs_bg: equ 7
0418BF             0097*  
0418BF             0098*  ; Codes 0-3 use the position data provided as part of the command
0418BF             0099*  ; as a relative position, adding the position given to the current
0418BF             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418BF             0101*  ; as part of the command as an absolute position, setting the current
0418BF             0102*  ; graphical cursor position to the position given.
0418BF             0103*  
0418BF             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418BF             0105*  ; current pixel colour. These operations cannot currently be supported
0418BF             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418BF             0107*  ; supported. Support for these codes may be added in a future version
0418BF             0108*  ; of the VDP firmware.
0418BF             0109*  
0418BF             0110*  ; 16 colour palette constants
0418BF             0111*  c_black: equ 0
0418BF             0112*  c_red_dk: equ 1
0418BF             0113*  c_green_dk: equ 2
0418BF             0114*  c_yellow_dk: equ 3
0418BF             0115*  c_blue_dk: equ 4
0418BF             0116*  c_magenta_dk: equ 5
0418BF             0117*  c_cyan_dk: equ 6
0418BF             0118*  c_grey: equ 7
0418BF             0119*  c_grey_dk: equ 8
0418BF             0120*  c_red: equ 9
0418BF             0121*  c_green: equ 10
0418BF             0122*  c_yellow: equ 11
0418BF             0123*  c_blue: equ 12
0418BF             0124*  c_magenta: equ 13
0418BF             0125*  c_cyan: equ 14
0418BF             0126*  c_white: equ 15
0418BF             0127*  
0418BF             0128*  ; VDU 25, mode, x; y;: PLOT command
0418BF             0129*  ; inputs: a=mode, bc=x0, de=y0
0418BF             0130*  vdu_plot:
0418BF 32 D9 18 04 0131*      ld (@mode),a
0418C3 ED 43 DA 18 0132*      ld (@x0),bc
       04          
0418C8 ED 53 DC 18 0133*      ld (@y0),de
       04          
0418CD 21 D8 18 04 0134*  	ld hl,@cmd
0418D1 01 06 00 00 0135*  	ld bc,@end-@cmd
0418D5 5B DF       0136*  	rst.lil $18
0418D7 C9          0137*  	ret
0418D8 19          0138*  @cmd:   db 25
0418D9 00          0139*  @mode:  db 0
0418DA 00 00       0140*  @x0: 	dw 0
0418DC 00 00       0141*  @y0: 	dw 0
0418DE 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418DF             0143*  
0418DF             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418DF             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418DF             0146*  ; VDU 25, mode, x; y;: PLOT command
0418DF             0147*  ; inputs: bc=x0, de=y0
0418DF             0148*  ; prerequisites: vdu_buff_select
0418DF             0149*  vdu_plot_bmp:
0418DF ED 43 F6 18 0150*      ld (@x0),bc
       04          
0418E4 ED 53 F8 18 0151*      ld (@y0),de
       04          
0418E9 21 F4 18 04 0152*  	ld hl,@cmd
0418ED 01 06 00 00 0153*  	ld bc,@end-@cmd
0418F1 5B DF       0154*  	rst.lil $18
0418F3 C9          0155*  	ret
0418F4 19          0156*  @cmd:   db 25
0418F5 ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0418F6 00 00       0158*  @x0: 	dw 0x0000
0418F8 00 00       0159*  @y0: 	dw 0x0000
0418FA 00          0160*  @end:   db 0x00 ; padding
0418FB             0161*  
0418FB             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418FB             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0418FB             0164*  ; VDU 25, mode, x; y;: PLOT command
0418FB             0165*  ; inputs: bc=x0, de=y0
0418FB             0166*  ; USING 16.8 FIXED POINT COORDINATES
0418FB             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0418FB             0168*  ;   the fractional portiion of the inputs are truncated
0418FB             0169*  ;   leaving only the 16-bit integer portion
0418FB             0170*  ; prerequisites: vdu_buff_select
0418FB             0171*  vdu_plot_bmp168:
0418FB             0172*  ; populate in the reverse of normal to keep the
0418FB             0173*  ; inputs from stomping on each other
0418FB ED 53 19 19 0174*      ld (@y0-1),de
       04          
041900 ED 43 17 19 0175*      ld (@x0-1),bc
       04          
041905 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
041907 32 17 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04190B 21 16 19 04 0178*  	ld hl,@cmd
04190F 01 06 00 00 0179*  	ld bc,@end-@cmd
041913 5B DF       0180*  	rst.lil $18
041915 C9          0181*  	ret
041916 19          0182*  @cmd:   db 25
041917 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041918 00 00       0184*  @x0: 	dw 0x0000
04191A 00 00       0185*  @y0: 	dw 0x0000
04191C             0186*  @end:  ; no padding required b/c we shifted de right
04191C             0187*  
04191C             0188*  ; draw a filled rectangle
04191C             0189*  vdu_plot_rf:
04191C ED 43 43 19 0190*      ld (@x0),bc
       04          
041921 ED 53 45 19 0191*      ld (@y0),de
       04          
041926 DD 22 49 19 0192*      ld (@x1),ix
       04          
04192B FD 22 4B 19 0193*      ld (@y1),iy
       04          
041930 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041932 32 47 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041936 21 41 19 04 0196*  	ld hl,@cmd0
04193A 01 0C 00 00 0197*  	ld bc,@end-@cmd0
04193E 5B DF       0198*  	rst.lil $18
041940 C9          0199*      ret
041941 19          0200*  @cmd0:  db 25 ; plot
041942 04          0201*  @arg0:  db plot_sl_both+mv_abs
041943 00 00       0202*  @x0:    dw 0x0000
041945 00 00       0203*  @y0:    dw 0x0000
041947 19          0204*  @cmd1:  db 25 ; plot
041948 65          0205*  @arg1:  db plot_rf+dr_abs_fg
041949 00 00       0206*  @x1:    dw 0x0000
04194B 00 00       0207*  @y1:    dw 0x0000
04194D 00          0208*  @end:   db 0x00 ; padding
04194E             0209*  
04194E             0210*  ; draw a filled circle
04194E             0211*  vdu_plot_cf:
04194E ED 43 75 19 0212*      ld (@x0),bc
       04          
041953 ED 53 77 19 0213*      ld (@y0),de
       04          
041958 DD 22 7B 19 0214*      ld (@x1),ix
       04          
04195D FD 22 7D 19 0215*      ld (@y1),iy
       04          
041962 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041964 32 79 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041968 21 73 19 04 0218*  	ld hl,@cmd0
04196C 01 0C 00 00 0219*  	ld bc,@end-@cmd0
041970 5B DF       0220*  	rst.lil $18
041972 C9          0221*      ret
041973 19          0222*  @cmd0:  db 25 ; plot
041974 04          0223*  @arg0:  db plot_sl_both+mv_abs
041975 00 00       0224*  @x0:    dw 0x0000
041977 00 00       0225*  @y0:    dw 0x0000
041979 19          0226*  @cmd1:  db 25 ; plot
04197A 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
04197B 00 00       0228*  @x1:    dw 0x0000
04197D 00 00       0229*  @y1:    dw 0x0000
04197F 00          0230*  @end:   db 0x00 ; padding
041980             0040       include "vdu_sprites.inc"
041980             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041980             0002*  ; the VDP can support up to 256 sprites. They must be defined
041980             0003*  ; contiguously, and so the first sprite is sprite 0.
041980             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041980             0005*  ; Once a selection of sprites have been defined, you can activate
041980             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
041980             0007*  ; of sprites to activate. This will activate the first n sprites,
041980             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041980             0009*  
041980             0010*  ; A single sprite can have multiple "frames", referring to
041980             0011*  ; different bitmaps.
041980             0012*  ; (These bitmaps do not need to be the same size.)
041980             0013*  ; This allows a sprite to include an animation sequence,
041980             0014*  ; which can be stepped through one frame at a time, or picked
041980             0015*  ; in any order.
041980             0016*  
041980             0017*  ; Any format of bitmap can be used as a sprite frame. It should
041980             0018*  ; be noted however that "native" format bitmaps are not
041980             0019*  ; recommended for use as sprite frames, as they cannot get
041980             0020*  ; erased from the screen. (As noted above, the "native" bitmap
041980             0021*  ; format is not really intended for general use.) This is part
041980             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041980             0023*  ; screen are now stored in RGBA2222 format.
041980             0024*  
041980             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
041980             0026*  ; and then later shown again.
041980             0027*  
041980             0028*  ; Moving sprites around the screen is done by changing the
041980             0029*  ; position of the sprite. This can be done either by setting
041980             0030*  ; the absolute position of the sprite, or by moving the sprite
041980             0031*  ; by a given number of pixels. (Sprites are positioned using
041980             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
041980             0033*  ; In the current sprite system, sprites will not update their
041980             0034*  ; position on-screen until either another drawing operation is
041980             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
041980             0036*  
041980             0037*  ; VDU 23, 27, 4, n: Select sprite n
041980             0038*  ; inputs: a is the 8-bit sprite id
041980             0039*  vdu_sprite_select:
041980 32 92 19 04 0040*      ld (@sprite),a
041984 21 8F 19 04 0041*      ld hl,@cmd
041988 01 04 00 00 0042*      ld bc,@end-@cmd
04198C 5B DF       0043*      rst.lil $18
04198E C9          0044*      ret
04198F 17 1B 04    0045*  @cmd:    db 23,27,4
041992 00          0046*  @sprite: db 0x00
041993             0047*  @end:
041993             0048*  
041993             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041993             0050*  ; inputs: none
041993             0051*  ; prerequisites: vdu_sprite_select
041993             0052*  vdu_sprite_clear_frames:
041993 21 9E 19 04 0053*      ld hl,@cmd
041997 01 03 00 00 0054*      ld bc,@end-@cmd
04199B 5B DF       0055*      rst.lil $18
04199D C9          0056*      ret
04199E 17 1B 05    0057*  @cmd: db 23,27,5
0419A1             0058*  @end:
0419A1             0059*  
0419A1             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0419A1             0061*  ; inputs: a is the 8-bit bitmap number
0419A1             0062*  ; prerequisites: vdu_sprite_select
0419A1             0063*  vdu_sprite_add_bmp:
0419A1 32 B3 19 04 0064*      ld (@bmp),a
0419A5 21 B0 19 04 0065*      ld hl,@cmd
0419A9 01 04 00 00 0066*      ld bc,@end-@cmd
0419AD 5B DF       0067*      rst.lil $18
0419AF C9          0068*      ret
0419B0 17 1B 06    0069*  @cmd: db 23,27,6
0419B3 00          0070*  @bmp: db 0x00
0419B4             0071*  @end:
0419B4             0072*  
0419B4             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419B4             0074*  ; inputs: a is the number of sprites to activate
0419B4             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419B4             0076*  vdu_sprite_activate:
0419B4 32 C6 19 04 0077*      ld (@num),a
0419B8 21 C3 19 04 0078*      ld hl,@cmd
0419BC 01 04 00 00 0079*      ld bc,@end-@cmd
0419C0 5B DF       0080*      rst.lil $18
0419C2 C9          0081*      ret
0419C3 17 1B 07    0082*  @cmd: db 23,27,7
0419C6 00          0083*  @num: db 0x00
0419C7             0084*  @end:
0419C7             0085*  
0419C7             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419C7             0087*  ; inputs: none
0419C7             0088*  ; prerequisites: vdu_sprite_select
0419C7             0089*  vdu_sprite_next_frame:
0419C7 21 D2 19 04 0090*      ld hl,@cmd
0419CB 01 03 00 00 0091*      ld bc,@end-@cmd
0419CF 5B DF       0092*      rst.lil $18
0419D1 C9          0093*      ret
0419D2 17 1B 08    0094*  @cmd: db 23,27,8
0419D5             0095*  @end:
0419D5             0096*  
0419D5             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419D5             0098*  ; inputs: none
0419D5             0099*  ; prerequisites: vdu_sprite_select
0419D5             0100*  vdu_sprite_prev_frame:
0419D5 21 E0 19 04 0101*      ld hl,@cmd
0419D9 01 03 00 00 0102*      ld bc,@end-@cmd
0419DD 5B DF       0103*      rst.lil $18
0419DF C9          0104*      ret
0419E0 17 1B 09    0105*  @cmd: db 23,27,9
0419E3             0106*  @end:
0419E3             0107*  
0419E3             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419E3             0109*  ; inputs: a is frame number to select
0419E3             0110*  ; prerequisites: vdu_sprite_select
0419E3             0111*  vdu_sprite_select_frame:
0419E3 32 F5 19 04 0112*      ld (@frame),a
0419E7 21 F2 19 04 0113*      ld hl,@cmd
0419EB 01 04 00 00 0114*      ld bc,@end-@cmd
0419EF 5B DF       0115*      rst.lil $18
0419F1 C9          0116*      ret
0419F2 17 1B 0A    0117*  @cmd:    db 23,27,10
0419F5 00          0118*  @frame:  db 0x00
0419F6             0119*  @end:
0419F6             0120*  
0419F6             0121*  ; VDU 23, 27, 11: Show current sprite
0419F6             0122*  ; inputs: none
0419F6             0123*  ; prerequisites: vdu_sprite_select
0419F6             0124*  vdu_sprite_show:
0419F6 21 01 1A 04 0125*      ld hl,@cmd
0419FA 01 03 00 00 0126*      ld bc,@end-@cmd
0419FE 5B DF       0127*      rst.lil $18
041A00 C9          0128*      ret
041A01 17 1B 0B    0129*  @cmd: db 23,27,11
041A04             0130*  @end:
041A04             0131*  
041A04             0132*  ; VDU 23, 27, 12: Hide current sprite
041A04             0133*  ; inputs: none
041A04             0134*  ; prerequisites: vdu_sprite_select
041A04             0135*  vdu_sprite_hide:
041A04 21 0F 1A 04 0136*      ld hl,@cmd
041A08 01 03 00 00 0137*      ld bc,@end-@cmd
041A0C 5B DF       0138*      rst.lil $18
041A0E C9          0139*      ret
041A0F 17 1B 0C    0140*  @cmd: db 23,27,12
041A12             0141*  @end:
041A12             0142*  
041A12             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A12             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A12             0145*  ; prerequisites: vdu_sprite_select
041A12             0146*  vdu_sprite_move_abs:
041A12 ED 43 2A 1A 0147*      ld (@xpos),bc
       04          
041A17 ED 53 2C 1A 0148*      ld (@ypos),de
       04          
041A1C 21 27 1A 04 0149*      ld hl,@cmd
041A20 01 07 00 00 0150*      ld bc,@end-@cmd
041A24 5B DF       0151*      rst.lil $18
041A26 C9          0152*      ret
041A27 17 1B 0D    0153*  @cmd:  db 23,27,13
041A2A 00 00       0154*  @xpos: dw 0x0000
041A2C 00 00       0155*  @ypos: dw 0x0000
041A2E 00          0156*  @end:  db 0x00 ; padding
041A2F             0157*  
041A2F             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A2F             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A2F             0160*  ; prerequisites: vdu_sprite_select
041A2F             0161*  vdu_sprite_move_rel:
041A2F ED 43 47 1A 0162*      ld (@dx),bc
       04          
041A34 ED 53 49 1A 0163*      ld (@dy),de
       04          
041A39 21 44 1A 04 0164*      ld hl,@cmd
041A3D 01 07 00 00 0165*      ld bc,@end-@cmd
041A41 5B DF       0166*      rst.lil $18
041A43 C9          0167*      ret
041A44 17 1B 0E    0168*  @cmd: db 23,27,14
041A47 00 00       0169*  @dx:  dw 0x0000
041A49 00 00       0170*  @dy:  dw 0x0000
041A4B 00          0171*  @end: db 0x00 ; padding
041A4C             0172*  
041A4C             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A4C             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A4C             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A4C             0176*  ;   the fractional portiion of the inputs are truncated
041A4C             0177*  ;   leaving only the 16-bit integer portion
041A4C             0178*  ; prerequisites: vdu_sprite_select
041A4C             0179*  vdu_sprite_move_abs168:
041A4C             0180*  ; offset inputs by the gfx origin
041A4C             0181*  ; y coordinate
041A4C 21 00 00 00 0182*      ld hl,origin_top*256
041A50 19          0183*      add hl,de
041A51 22 73 1A 04 0184*      ld (@ypos-1),hl
041A55             0185*  ; x coordinate
041A55 21 00 80 00 0186*      ld hl,origin_left*256
041A59 09          0187*      add hl,bc
041A5A 22 71 1A 04 0188*      ld (@xpos-1),hl
041A5E             0189*  ; prepare vdu command
041A5E 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A60 32 71 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A64 21 6F 1A 04 0192*      ld hl,@cmd
041A68 01 07 00 00 0193*      ld bc,@end-@cmd
041A6C 5B DF       0194*      rst.lil $18
041A6E C9          0195*      ret
041A6F 17 1B 0D    0196*  @cmd:  db 23,27,13
041A72 00 00       0197*  @xpos: dw 0x0000
041A74 00 00       0198*  @ypos: dw 0x0000
041A76             0199*  @end:  ; no padding required b/c we shifted de right
041A76             0200*  
041A76             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A76             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A76             0203*  ; inputs: ub.c is dx, ud.e is dy
041A76             0204*  ;   the fractional portiion of the inputs are truncated
041A76             0205*  ;   leaving only the 16-bit integer portion
041A76             0206*  ; prerequisites: vdu_sprite_select
041A76             0207*  vdu_sprite_move_rel168:
041A76             0208*  ; populate in the reverse of normal to keep the
041A76             0209*  ; inputs from stomping on each other
041A76 ED 53 95 1A 0210*      ld (@dy-1),de
       04          
041A7B ED 43 93 1A 0211*      ld (@dx-1),bc
       04          
041A80 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A82 32 93 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A86 21 91 1A 04 0214*      ld hl,@cmd
041A8A 01 07 00 00 0215*      ld bc,@end-@cmd
041A8E 5B DF       0216*      rst.lil $18
041A90 C9          0217*      ret
041A91 17 1B 0E    0218*  @cmd:  db 23,27,14
041A94 00 00       0219*  @dx: dw 0x0000
041A96 00 00       0220*  @dy: dw 0x0000
041A98             0221*  @end:  ; no padding required b/c we shifted de right
041A98             0222*  
041A98             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041A98             0224*  ; inputs: none
041A98             0225*  vdu_sprite_update:
041A98 21 A3 1A 04 0226*      ld hl,@cmd
041A9C 01 03 00 00 0227*      ld bc,@end-@cmd
041AA0 5B DF       0228*      rst.lil $18
041AA2 C9          0229*      ret
041AA3 17 1B 0F    0230*  @cmd: db 23,27,15
041AA6             0231*  @end:
041AA6             0232*  
041AA6             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041AA6             0234*  ; inputs: none
041AA6             0235*  vdu_sprite_bmp_reset:
041AA6 21 B1 1A 04 0236*      ld hl,@cmd
041AAA 01 03 00 00 0237*      ld bc,@end-@cmd
041AAE 5B DF       0238*      rst.lil $18
041AB0 C9          0239*      ret
041AB1 17 1B 10    0240*  @cmd: db 23,27,16
041AB4             0241*  @end:
041AB4             0242*  
041AB4             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041AB4             0244*  ; inputs: none
041AB4             0245*  vdu_sprite_reset:
041AB4 21 BF 1A 04 0246*      ld hl,@cmd
041AB8 01 03 00 00 0247*      ld bc,@end-@cmd
041ABC 5B DF       0248*      rst.lil $18
041ABE C9          0249*      ret
041ABF 17 1B 11    0250*  @cmd: db 23,27,17
041AC2             0251*  @end:
041AC2             0252*  
041AC2             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041AC2             0254*  ; inputs: a is the GCOL paint mode
041AC2             0255*  ; prerequisites: vdu_sprite_select
041AC2             0256*  vdu_sprite_set_gcol:
041AC2 32 D4 1A 04 0257*      ld (@mode),a
041AC6 21 D1 1A 04 0258*      ld hl,@cmd
041ACA 01 04 00 00 0259*      ld bc,@end-@cmd
041ACE 5B DF       0260*      rst.lil $18
041AD0 C9          0261*      ret
041AD1 17 1B 12    0262*  @cmd:  db 23,27,18
041AD4 00          0263*  @mode: db 0x00
041AD5             0264*  @end:
041AD5             0265*  
041AD5             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AD5             0267*  ; inputs: hl=bufferId
041AD5             0268*  ; prerequisites: vdu_sprite_select
041AD5             0269*  vdu_sprite_add_buff:
041AD5 22 E7 1A 04 0270*      ld (@bufferId),hl
041AD9 21 E4 1A 04 0271*      ld hl,@cmd
041ADD 01 05 00 00 0272*      ld bc,@end-@cmd
041AE1 5B DF       0273*      rst.lil $18
041AE3 C9          0274*      ret
041AE4 17 1B 26    0275*  @cmd:      db 23,27,0x26
041AE7 00 00       0276*  @bufferId: dw 0x0000
041AE9 00          0277*  @end:      db 0x00 ; padding
041AEA             0041   
041AEA             0042   ; APPLICATION INCLUDES
041AEA             0043       include "collisions.inc"
041AEA             0001*  ; ====== COLLISION DETECTION ======
041AEA             0002*  ; --- constants ---
041AEA             0003*  ; sprite_collisions flags
041AEA             0004*  collides_with_player: equ 0
041AEA             0005*  collides_with_laser: equ 1
041AEA             0006*  sprite_alive: equ 6 ; set when sprite is alive
041AEA             0007*  sprite_just_died: equ 7 ; set when sprite just died
041AEA             0008*  
041AEA             0009*  ; TODO: make these bit numbers instead of masks
041AEA             0010*  collide_top: equ %00001000
041AEA             0011*  collide_bottom: equ %00000100
041AEA             0012*  collide_left: equ %00000010
041AEA             0013*  collide_right: equ %00000001
041AEA             0014*  ; END TODO
041AEA             0015*  
041AEA             0016*  ; this routine detects collisions between two collidable objects,
041AEA             0017*  ; which can include sprites, active tiles, or any screen coordinate
041AEA             0018*  ; which has been set up with a sprite table structure that includes dim_x
041AEA             0019*  ; representing the radius of the collidable object
041AEA             0020*  ; inputs: ix and iy point to the colliding objects' sprite table records
041AEA             0021*  ; outputs: uh.l = distance - sum of radii
041AEA             0022*  ;          zero flag set or sign flag negative if collision detected
041AEA             0023*  ;          dx168 and dy168 are also populated with the signed displacements
041AEA             0024*  ; destroys: everything except indexes
041AEA             0025*  check_collision:
041AEA             0026*  ; compute dx = x1-x0
041AEA DD 27 0B    0027*      ld hl,(ix+sprite_x)
041AED FD 17 0B    0028*      ld de,(iy+sprite_x)
041AF0 AF          0029*      xor a ; clear carry
041AF1 ED 52       0030*      sbc hl,de
041AF3 22 A2 09 04 0031*      ld (dx168),hl ; dx to scratch
041AF7             0032*  ; compute dy = y1-y0
041AF7 DD 27 0E    0033*      ld hl,(ix+sprite_y)
041AFA FD 17 0E    0034*      ld de,(iy+sprite_y)
041AFD AF          0035*      xor a ; clear carry
041AFE ED 52       0036*      sbc hl,de ; hl = dy
041B00 22 A8 09 04 0037*      ld (dy168),hl ; dy to scratch
041B04             0038*  ; compute euclidean distance between centers
041B04 CD AE 09 04 0039*      call distance168 ; uh.l = distance
041B08             0040*  ; check for overlap by summing half the radii
041B08 DD 7E 09    0041*      ld a,(ix+sprite_dim_x)
041B0B CB 3F       0042*      srl a ; divide by 2
041B0D FD 5E 09    0043*      ld e,(iy+sprite_dim_x)
041B10 CB 3B       0044*      srl e ; divide by 2
041B12 83          0045*      add a,e
041B13 11 00 00 00 0046*      ld de,0 ; clear deu and e
041B17 57          0047*      ld d,a ; ud.e = sum of radii
041B18 B7          0048*      or a ; clear carry
041B19 ED 52       0049*      sbc hl,de ; uh.l = distance - sum of radii
041B1B C9          0050*      ret
041B1C             0051*  ; end check_collision
041B1C             0044       include "enemies.inc"
041B1C 04          0001*  max_enemy_sprites: db 4
041B1D             0002*  
041B1D             0003*  ; sprite_type
041B1D             0004*  enemy_dead: equ 0
041B1D             0005*  enemy_seeker: equ 1
041B1D             0006*  enemy_medium: equ 2
041B1D             0007*  enemy_large: equ 3
041B1D             0008*  landing_pad: equ 4
041B1D             0009*  laser_turret: equ 5
041B1D             0010*  fireballs: equ 6
041B1D             0011*  explosion: equ 7
041B1D             0012*  
041B1D             0013*  move_enemies:
041B1D             0014*  ; are there any active enemies or explosions?
041B1D 3A F7 45 04 0015*      ld a,(table_active_sprites)
041B21 A7          0016*      and a ; will be zero if no alive enemies or explosions
041B22 C2 2F 1B 04 0017*      jp nz,@they_live
041B26 21 56 48 04 0018*      ld hl,enemies_dead
041B2A 22 53 48 04 0019*      ld (enemies_state),hl
041B2E C9          0020*      ret
041B2F             0021*  @they_live:
041B2F             0022*  ; initialize pointers and loop counter
041B2F FD 21 94 43 0023*      ld iy,table_base ; set iy to first record in table
       04          
041B34 06 10       0024*      ld b,table_max_records ; loop counter
041B36             0025*  @move_loop:
041B36 FD 22 F4 45 0026*      ld (table_pointer),iy ; update table pointer
       04          
041B3B C5          0027*      push bc ; backup loop counter
041B3C             0028*  ; check sprite_type to see if sprite is active
041B3C FD 7E 01    0029*      ld a,(iy+sprite_type)
041B3F A7          0030*      and a ; if zero, sprite is dead
041B40 CA 73 1B 04 0031*      jp z,@next_record ; ... and we skip to next record
041B44             0032*  ; otherwise we prepare to move the sprite
041B44 FD 7E 00    0033*      ld a,(iy+sprite_id) ; get spriteId
041B47 CD 80 19 04 0034*      call vdu_sprite_select ; select sprite
041B4B FD 27 05    0035*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B4E             0036*      callHL
041B4E 01 54 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B52 C5          0002*M     push bc ; which constitutes the return address
041B53 E9          0003*M     jp (hl) ; Jump to the address in HL
041B54             0004*M @@:
041B54             0037*  ; move_enemies_loop_return: return from behavior subroutines
041B54 FD 2A F4 45 0038*      ld iy,(table_pointer) ; get back table pointer
       04          
041B59             0039*  ; now we check results of all the moves
041B59 FD CB 08 7E 0040*      bit sprite_just_died,(iy+sprite_collisions)
041B5D CA 69 1B 04 0041*      jp z,@draw_sprite ; if not dead, draw sprite
041B61 CD 40 46 04 0042*      call table_deactivate_sprite
041B65 C3 73 1B 04 0043*      jp @next_record ; and to the next record
041B69             0044*  @draw_sprite:
041B69 FD 07 0B    0045*      ld bc,(iy+sprite_x)
041B6C FD 17 0E    0046*      ld de,(iy+sprite_y)
041B6F CD 4C 1A 04 0047*      call vdu_sprite_move_abs168
041B73             0048*  ; fall through to @next_record
041B73             0049*  @next_record:
041B73 ED 33 26    0050*      lea iy,iy+table_bytes_per_record
041B76 AF          0051*      xor a ; clears carry flag
041B77 32 F8 45 04 0052*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B7B C1          0053*      pop bc ; get back our loop counter
041B7C 10 B8       0054*      djnz @move_loop ; loop until we've checked all the records
041B7E C9          0055*      ret ; and we're out
041B7F             0056*  
041B7F             0057*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041B7F             0058*  ; ; each sprite in the table must have one of these defined
041B7F             0059*  ; ; but they need not be unique to a particular sprite
041B7F             0060*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041B7F             0061*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041B7F             0062*  ; ; but they can call anything they want between those two endpoints
041B7F             0063*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041B7F             0064*  
041B7F             0065*  ; move_nop: ; does nothing but burn a few cycles changing the PC
041B7F             0066*  ;     ret
041B7F             0067*  
041B7F             0068*  ; move_explosion:
041B7F             0069*  ;     call animate_explosion
041B7F             0070*  ;     ret
041B7F             0071*  
041B7F             0072*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041B7F             0073*  move_enemy_seeker:
041B7F             0074*  ; run the movement program for the seeker enemy
041B7F CD C0 1B 04 0075*      call en_nav_seek_zag
041B83 C3 87 1B 04 0076*      jp check_enemy_player_collisions
041B87             0077*  ; end move_enemy_seeker
041B87             0078*  
041B87             0079*  check_enemy_player_collisions:
041B87             0080*  ; check for collisions with laser
041B87 DD 21 86 30 0081*      ld ix,laser_start_variables
       04          
041B8C DD CB 08 76 0082*      bit sprite_alive,(ix+sprite_collisions)
041B90 CA AD 1B 04 0083*      jp z,@player ; laser dead, check player
041B94 CD EA 1A 04 0084*      call check_collision
041B98 F2 AD 1B 04 0085*      jp p,@player ; no collision
041B9C DD 21 86 30 0086*      ld ix,laser_start_variables
       04          
041BA1 DD CB 08 FE 0087*      set sprite_just_died,(ix+sprite_collisions)
041BA5 DD CB 08 F6 0088*      set sprite_alive,(ix+sprite_collisions)
041BA9 C3 EA 1C 04 0089*      jp enemy_kill
041BAD             0090*  @player: ; check for collisions with player
041BAD DD 21 61 42 0091*      ld ix,player_start_variables
       04          
041BB2 DD CB 08 76 0092*      bit sprite_alive,(ix+sprite_collisions)
041BB6 C8          0093*      ret z ; player dead, no collision
041BB7 CD EA 1A 04 0094*      call check_collision
041BBB F0          0095*      ret p ; no collision
041BBC C3 EA 1C 04 0096*      jp enemy_kill
041BC0             0097*  ; end move_enemy_seeker
041BC0             0098*  
041BC0             0099*  ; contains the logic for how to move the enemy
041BC0             0100*  ; and then does the moving
041BC0             0101*  ; inputs: a fully-populated active sprite table
041BC0             0102*  ;         player position variables
041BC0             0103*  ; destroys: everything except index registers
041BC0             0104*  ; outputs: moving enemies
041BC0             0105*  en_nav_seek_zag:
041BC0             0106*  ; set velocity and orientation by player's relative location
041BC0             0107*  ; move enemies y-axis
041BC0             0108*  ; where is player relative to us?
041BC0 CD C3 1C 04 0109*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041BC4             0110*  ; is player above or below us?
041BC4 ED 53 A5 05 0111*      ld (ude),de ; dy
       04          
041BC9 3A A7 05 04 0112*      ld a,(ude+2) ; deu
041BCD 17          0113*      rla ; shift sign bit into carry
041BCE D2 FA 1B 04 0114*      jp nc,@zig_zag ; player is below,evade
041BD2             0115*  ; player is even or above,so home in on current heading
041BD2 FD 2F 1A    0116*      ld (iy+sprite_heading),hl ; save sprite heading
041BD5             0117*  ; fall through to @compute_velocities
041BD5             0118*  @compute_velocities:
041BD5 CD 49 47 04 0119*      call sprite_compute_velocities
041BD9             0120*  ; change the animation frame to match heading
041BD9 FD 7E 1B    0121*      ld a,(iy+sprite_heading+1) ; we want the integer portion
041BDC CB 3F       0122*      srl a ; divide integer portion by 8
041BDE CB 3F       0123*      srl a
041BE0 CB 3F       0124*      srl a
041BE2 CD E3 19 04 0125*      call vdu_sprite_select_frame
041BE6 C3 A8 46 04 0126*      jp move_sprite ; will return to caller from there
041BEA             0127*  @zig_zag_start:
041BEA FD 2A F4 45 0128*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041BEF CD 49 07 04 0129*      call rand_8
041BF3 E6 3F       0130*      and %00111111 ; limit it to 64
041BF5 CB DF       0131*      set 3,a ; make sure it's at least 8
041BF7 FD 77 22    0132*      ld (iy+sprite_move_timer),a ; store it
041BFA             0133*      ; fall through to @zig_zag
041BFA             0134*  @zig_zag:
041BFA FD 7E 22    0135*      ld a,(iy+sprite_move_timer)
041BFD 3D          0136*      dec a
041BFE FD 77 22    0137*      ld (iy+sprite_move_timer),a
041C01 C2 27 1C 04 0138*      jp nz,@zig_zag_no_switch
041C05             0139*      ; otherwise flip direction and restart timer
041C05 FD 7E 23    0140*      ld a,(iy+sprite_move_step)
041C08 EE 01       0141*      xor %1 ; flips bit one
041C0A FD 77 23    0142*      ld (iy+sprite_move_step),a ; store it
041C0D C2 1C 1C 04 0143*      jp nz,@F ; zag right
041C11             0144*  ;otherwise zag left
041C11 21 00 A0 00 0145*      ld hl,160*256; southwest heading
041C15 FD 2F 1A    0146*      ld (iy+sprite_heading),hl ; save sprite heading
041C18 C3 EA 1B 04 0147*      jp @zig_zag_start
041C1C             0148*  @@: ; zag right
041C1C 21 00 60 00 0149*      ld hl,96*256; southeast heading
041C20 FD 2F 1A    0150*      ld (iy+sprite_heading),hl ; save sprite heading
041C23 C3 EA 1B 04 0151*      jp @zig_zag_start
041C27             0152*  @zig_zag_no_switch:
041C27             0153*      ; ld a,(sprite_orientation)
041C27 FD 27 1A    0154*      ld hl,(iy+sprite_heading)
041C2A C3 D5 1B 04 0155*      jp @compute_velocities
041C2E             0156*  ; end en_nav_seek_zag
041C2E             0157*  
041C2E             0158*  enemy_init_from_landing_pad:
041C2E             0159*  ; get next available spriteId
041C2E CD 1B 46 04 0160*      call table_get_next_id
041C32 D0          0161*      ret nc ; no carry means no free sprite slots, so we go home
041C33             0162*  ; ix comes back with the pointer to the new sprite variables
041C33 DD E5       0163*      push ix ; de picks it up when we're ready for the copy to the table
041C35             0164*  ; a comes back with the spriteId of the new sprite
041C35 32 9D 1C 04 0165*      ld (@id),a
041C39             0166*  ; initialize the new sprite
041C39 CD 80 19 04 0167*      call vdu_sprite_select
041C3D CD 93 19 04 0168*      call vdu_sprite_clear_frames
041C41 21 14 01 00 0169*      ld hl,BUF_SEEKER_000
041C45 06 20       0170*      ld b,32
041C47             0171*  @load_frames:
041C47 C5          0172*      push bc
041C48 E5          0173*      push hl
041C49 CD D5 1A 04 0174*      call vdu_sprite_add_buff
041C4D E1          0175*      pop hl
041C4E 23          0176*      inc hl
041C4F C1          0177*      pop bc
041C50 10 F5       0178*      djnz @load_frames
041C52             0179*  ; copy coordinates of active sprite to new sprite
041C52 FD 2A F4 45 0180*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041C57             0181*      ; ld hl,(iy+sprite_x)
041C57             0182*      ; ld hl,0x008000 ; debug
041C57             0183*  
041C57 CD 49 07 04 0184*      call rand_8
041C5B 21 00 00 00 0185*      ld hl,0
041C5F 67          0186*      ld h,a
041C60             0187*  
041C60 22 A8 1C 04 0188*      ld (@x),hl
041C64             0189*      ; ld hl,(iy+sprite_y)
041C64             0190*      ; ld hl,0x002000 ; debug
041C64             0191*  
041C64 CD 49 07 04 0192*      call rand_8
041C68 21 00 00 00 0193*      ld hl,0
041C6C 67          0194*      ld h,a
041C6D             0195*  
041C6D 22 AB 1C 04 0196*      ld (@y),hl
041C71 CD 49 07 04 0197*      call rand_8
041C75 E6 01       0198*      and %00000001 ; 50/50 chance of moving left or right on spanw
041C77 32 C0 1C 04 0199*      ld (@move_step),a
041C7B             0200*  ; now copy to the table
041C7B 21 9D 1C 04 0201*      ld hl,@id ; address to copy from
041C7F D1          0202*      pop de ; address to copy to (was ix)
041C80 01 26 00 00 0203*      ld bc,table_bytes_per_record ; number of bytes to copy
041C84 ED B0       0204*      ldir ; copy the records from local scratch to sprite table
041C86             0205*  ; set collision flags
041C86 FD CB 08 CE 0206*      set collides_with_laser,(iy+sprite_collisions)
041C8A FD CB 08 C6 0207*      set collides_with_player,(iy+sprite_collisions)
041C8E             0208*  ; update the new sprite's position and make it visible
041C8E FD 07 0B    0209*      ld bc,(iy+sprite_x)
041C91 FD 17 0E    0210*      ld de,(iy+sprite_y)
041C94 CD 4C 1A 04 0211*      call vdu_sprite_move_abs168
041C98 CD F6 19 04 0212*      call vdu_sprite_show
041C9C C9          0213*      ret
041C9D 00          0214*  @id:                    db 0x00 ; 1 bytes unique spriteId, zero-based
041C9E 01          0215*  @type:                  db enemy_seeker ; 1 bytes type of sprite as defined in enemies.inc
041C9F 14 01 00    0216*  @base_bufferId:         dl BUF_SEEKER_000 ; 3 bytes bitmap bufferId
041CA2 7F 1B 04    0217*  @move_program:          dl move_enemy_seeker ; 3 bytes address of sprite's behavior subroutine
041CA5 00          0218*  @collisions:            db 0 ; 3 bytes, set by spawing routine
041CA6 10          0219*  @dim_x:                 db 16 ; 1 bytes sprite width in pixels
041CA7 10          0220*  @dim_y:                 db 16 ; 1 bytes sprite height in pixels
041CA8 00 00 00    0221*  @x:                     dl 0x000000 ; 1 bytes 16.8 fractional x position in pixels
041CAB 00 00 00    0222*  @y:                     dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
041CAE 00 00 00    0223*  @xvel:                  dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
041CB1 00 00 00    0224*  @yvel:                  dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
041CB4 80 02 00    0225*  @vel:                   dl speed_seeker ; 3 bytes velocity, 16.8 fixed, pixels
041CB7 00 80 00    0226*  @heading:               dl 0x008000 ; 3 bytes sprite movement direction deg256 16.8 fixed
041CBA 00 80 00    0227*  @orientation:           dl 0x008000 ; 3 bytes orientation bits
041CBD 00          0228*  @animation:             db 0x00 ; 1 bytes current animation index, zero-based
041CBE 00          0229*  @animation_timer:       db 0x00 ; 1 bytes when hits zero, draw next animation
041CBF 01          0230*  @move_timer:            db 0x01 ; 1 bytes when zero, go to next move program, or step
041CC0 00          0231*  @move_step:             db 0x00 ; 1 bytes stage in a move program sequence, varies
041CC1 0A          0232*  @points:                db 10 ; 1 bytes points awarded for killing this sprite type
041CC2 02          0233*  @shield_damage:         db 0x02 ; 1 bytes shield points deducted for collision
041CC3             0234*  
041CC3             0235*  
041CC3             0236*  ; move_fireballs:
041CC3             0237*  ;     call move_sprite ; move sprite
041CC3             0238*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
041CC3             0239*  ;     and a ; if zero we're still within screen bounds
041CC3             0240*  ;     jp z,move_fireballs_alive
041CC3             0241*  ; ; otherwise kill sprite
041CC3             0242*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
041CC3             0243*  ;     ld (iy+sprite_collisions),a
041CC3             0244*  ;     ret
041CC3             0245*  ; move_fireballs_alive:
041CC3             0246*  ;     ld a,(sprite_animation_timer)
041CC3             0247*  ;     dec a
041CC3             0248*  ;     ld (sprite_animation_timer),a
041CC3             0249*  ;     jp nz,move_fireballs_draw
041CC3             0250*  ;     ld a,(sprite_animation)
041CC3             0251*  ;     xor %1
041CC3             0252*  ;     ld (sprite_animation),a
041CC3             0253*  ;     ld a,6 ; 1/10th of a second timer
041CC3             0254*  ;     ld (sprite_animation_timer),a
041CC3             0255*  ;     ; fall through
041CC3             0256*  
041CC3             0257*  ; move_fireballs_draw:
041CC3             0258*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041CC3             0259*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041CC3             0260*  ;     call check_collisions
041CC3             0261*  ;     ret
041CC3             0262*  
041CC3             0263*  ; compute orientation to player
041CC3             0264*  ; based on relative positions
041CC3             0265*  ; returns: h.l 16.8 fixed angle256 to player
041CC3             0266*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
041CC3             0267*  ;    representing delta-x/y *to* target respectively
041CC3             0268*  orientation_to_player:
041CC3 FD 2A F4 45 0269*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041CC8 FD 07 0B    0270*      ld bc,(iy+sprite_x)
041CCB FD 17 0E    0271*      ld de,(iy+sprite_y)
041CCE DD 2A 6C 42 0272*      ld ix,(player_x)
       04          
041CD3 FD 2A 6F 42 0273*      ld iy,(player_y)
       04          
041CD8 CD 87 09 04 0274*      call dxy168
041CDC C5          0275*      push bc
041CDD D5          0276*      push de
041CDE CD E3 09 04 0277*      call atan2_168fast
041CE2 D1          0278*      pop de
041CE3 C1          0279*      pop bc
041CE4 FD 2A F4 45 0280*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041CE9 C9          0281*      ret
041CEA             0282*  
041CEA             0283*  ; this routine vanquishes the enemy sprite
041CEA             0284*  ; and replaces it with an animated explosion
041CEA             0285*  ; we jump here instead of call because
041CEA             0286*  ; we want to return to differing locations in the loop
041CEA             0287*  ; depending on whether we're still sploding
041CEA             0288*  ; destroys: everything except index registers
041CEA             0289*  ; returns: an incandescent ball of debris and gas
041CEA             0290*  enemy_kill:
041CEA FD 2A F4 45 0291*      ld iy,(table_pointer); TODO: see if we can get IY to land here with the proper value
       04          
041CEF             0292*  ; tally up points
041CEF 2A 57 42 04 0293*      ld hl,(player_score)
041CF3 01 00 00 00 0294*      ld bc,0 ; clear bcu
041CF7 FD 4E 24    0295*      ld c,(iy+sprite_points)
041CFA 09          0296*      add hl,bc
041CFB 22 57 42 04 0297*      ld (player_score),hl
041CFF             0298*  ; ; initialize explosion
041CFF             0299*  ; init_explosion:
041CFF             0300*  ;     ld hl,explosion
041CFF             0301*  ;     ld (sprite_base_bufferId),hl
041CFF             0302*  ;     ld hl,move_explosion
041CFF             0303*  ;     ld (sprite_move_program),hl
041CFF             0304*  ;     ld a,%00000000 ; collides with nothing
041CFF             0305*  ;     ld (iy+sprite_collisions),a
041CFF             0306*  ;     ld hl,0 ; north
041CFF             0307*  ;     ld (sprite_heading),hl
041CFF             0308*  ;     ld a,0x04 ; will decrement to 03
041CFF             0309*  ;     ld (sprite_animation),a
041CFF             0310*  ;     ld a,0x07 ; 7/60th of a second timer
041CFF             0311*  ;     ld (sprite_animation_timer),a
041CFF             0312*  ;     xor a
041CFF             0313*  ;     ld (sprite_move_timer),a
041CFF             0314*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041CFF             0315*  ; ; fall through to next_explosion
041CFF             0316*  ; next_explosion:
041CFF             0317*  ;     ld a,(sprite_animation)
041CFF             0318*  ;     dec a ; if rolled negative from zero,we're done sploding
041CFF             0319*  ;     jp m,done_explosion
041CFF             0320*  ;     ld (sprite_animation),a
041CFF             0321*  ;     ld a,0x7 ; 7/60th of a second timer
041CFF             0322*  ;     ld (sprite_animation_timer),a
041CFF             0323*  ; ; fall through to animate_explosion
041CFF             0324*  ; animate_explosion:
041CFF             0325*  ;     ld hl,sprite_y+1
041CFF             0326*  ;     inc (hl) ; move explosion down 1 pixel
041CFF             0327*  ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
041CFF             0328*  ;     ld hl,sprite_animation_timer
041CFF             0329*  ;     dec (hl) ; if timer is zero,we do next animation
041CFF             0330*  ;     jp z,next_explosion
041CFF             0331*  ;     ;otherwise we fall through to draw the current one
041CFF             0332*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041CFF             0333*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041CFF             0334*  ;     ret ; now we go back to caller
041CFF             0335*  ; done_explosion:
041CFF FD CB 08 FE 0336*      set sprite_just_died,(iy+sprite_collisions)
041D03 C9          0337*      ret ; now we go back to caller
041D04             0338*  ; end enemy_kill
041D04             0045       include "fonts_list.inc"
041D04             0001*  ; Generated by asm_config_editor.py
041D04             0002*  font_list_record_size: equ 12
041D04             0003*  font_list_width: equ 0
041D04             0004*  font_list_height: equ 3
041D04             0005*  font_list_bufferId: equ 6
041D04             0006*  font_list_filename: equ 9
041D04             0007*  
041D04             0008*  num_fonts: equ 18
041D04             0009*  
041D04             0010*  ; Index list:
041D04             0011*  amiga_forever_16x24: equ 64000
041D04             0012*  amiga_forever_8x16: equ 64001
041D04             0013*  amiga_forever_8x8: equ 64002
041D04             0014*  computer_pixel_7_10x15: equ 64003
041D04             0015*  computer_pixel_7_10x24: equ 64004
041D04             0016*  computer_pixel_7_8x16: equ 64005
041D04             0017*  Lat2_Terminus12x6_6x12: equ 64006
041D04             0018*  Lat2_TerminusBold14_8x14: equ 64007
041D04             0019*  Lat2_VGA14_8x14: equ 64008
041D04             0020*  Lat2_VGA16_8x16: equ 64009
041D04             0021*  Lat2_VGA8_8x8: equ 64010
041D04             0022*  Lat7_Fixed13_8x13: equ 64011
041D04             0023*  Lat7_Terminus12x6_6x12: equ 64012
041D04             0024*  Lat7_TerminusBold16_8x16: equ 64013
041D04             0025*  Lat7_VGA14_8x14: equ 64014
041D04             0026*  Lat7_VGA8x8: equ 64015
041D04             0027*  scriptorium_12x14: equ 64016
041D04             0028*  Squarewave_Bold_8x12: equ 64017
041D04             0029*  
041D04             0030*  font_list: ; width; height; bufferId; filename;:
041D04 10 00 00 18 0031*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 DC 1D 04 
041D10 08 00 00 10 0032*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 FB 1D 04 
041D1C 08 00 00 08 0033*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 19 1E 04 
041D28 0A 00 00 0F 0034*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 36 1E 04 
041D34 0A 00 00 18 0035*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 58 1E 04 
041D40 08 00 00 10 0036*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 7A 1E 04 
041D4C 06 00 00 0C 0037*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 9B 1E 04 
041D58 08 00 00 0E 0038*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 BD 1E 04 
041D64 08 00 00 0E 0039*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 E1 1E 04 
041D70 08 00 00 10 0040*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 FC 1E 04 
041D7C 08 00 00 08 0041*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 17 1F 04 
041D88 08 00 00 0D 0042*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 30 1F 04 
041D94 06 00 00 0C 0043*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 4D 1F 04 
041DA0 08 00 00 10 0044*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6F 1F 04 
041DAC 08 00 00 0E 0045*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 93 1F 04 
041DB8 08 00 00 08 0046*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AE 1F 04 
041DC4 0C 00 00 0E 0047*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C7 1F 04 
041DD0 08 00 00 0C 0048*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E4 1F 04 
041DDC             0049*  
041DDC             0050*  ; files_list: ; filename:
041DDC 66 6F 6E 74 0051*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
041DFB 66 6F 6E 74 0052*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041E19 66 6F 6E 74 0053*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041E36 66 6F 6E 74 0054*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
041E58 66 6F 6E 74 0055*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
041E7A 66 6F 6E 74 0056*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
041E9B 66 6F 6E 74 0057*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041EBD 66 6F 6E 74 0058*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041EE1 66 6F 6E 74 0059*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041EFC 66 6F 6E 74 0060*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041F17 66 6F 6E 74 0061*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041F30 66 6F 6E 74 0062*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
041F4D 66 6F 6E 74 0063*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041F6F 66 6F 6E 74 0064*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
041F93 66 6F 6E 74 0065*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041FAE 66 6F 6E 74 0066*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041FC7 66 6F 6E 74 0067*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
041FE4 66 6F 6E 74 0068*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042004             0046       include "images_sprites.inc"
042004             0001*  ; Generated by make_images.py
042004             0002*  
042004             0003*  sprites_num_images: equ 95
042004             0004*  
042004             0005*  ; buffer_ids:
042004             0006*  BUF_0TILE_EMPTY: equ 256
042004             0007*  BUF_1TILE_CROSS: equ 257
042004             0008*  BUF_2TILE_HORIZ: equ 258
042004             0009*  BUF_3TILE_VERT: equ 259
042004             0010*  BUF_4TILE_SQUARE: equ 260
042004             0011*  BUF_5TILE_CIRCLE: equ 261
042004             0012*  BUF_6TILE_PAD: equ 262
042004             0013*  BUF_7TILE_TURRET: equ 263
042004             0014*  BUF_CIRCLE: equ 264
042004             0015*  BUF_CRATER: equ 265
042004             0016*  BUF_EXPLOSION_A: equ 266
042004             0017*  BUF_EXPLOSION_B: equ 267
042004             0018*  BUF_EXPLOSION_C: equ 268
042004             0019*  BUF_EXPLOSION_D: equ 269
042004             0020*  BUF_EXPLOSION_E: equ 270
042004             0021*  BUF_FIREBALL_A: equ 271
042004             0022*  BUF_FIREBALL_B: equ 272
042004             0023*  BUF_LASER_A: equ 273
042004             0024*  BUF_LASER_B: equ 274
042004             0025*  BUF_PAD: equ 275
042004             0026*  BUF_SEEKER_000: equ 276
042004             0027*  BUF_SEEKER_008: equ 277
042004             0028*  BUF_SEEKER_016: equ 278
042004             0029*  BUF_SEEKER_024: equ 279
042004             0030*  BUF_SEEKER_032: equ 280
042004             0031*  BUF_SEEKER_040: equ 281
042004             0032*  BUF_SEEKER_048: equ 282
042004             0033*  BUF_SEEKER_056: equ 283
042004             0034*  BUF_SEEKER_064: equ 284
042004             0035*  BUF_SEEKER_072: equ 285
042004             0036*  BUF_SEEKER_080: equ 286
042004             0037*  BUF_SEEKER_088: equ 287
042004             0038*  BUF_SEEKER_096: equ 288
042004             0039*  BUF_SEEKER_104: equ 289
042004             0040*  BUF_SEEKER_112: equ 290
042004             0041*  BUF_SEEKER_120: equ 291
042004             0042*  BUF_SEEKER_128: equ 292
042004             0043*  BUF_SEEKER_136: equ 293
042004             0044*  BUF_SEEKER_144: equ 294
042004             0045*  BUF_SEEKER_152: equ 295
042004             0046*  BUF_SEEKER_160: equ 296
042004             0047*  BUF_SEEKER_168: equ 297
042004             0048*  BUF_SEEKER_176: equ 298
042004             0049*  BUF_SEEKER_184: equ 299
042004             0050*  BUF_SEEKER_192: equ 300
042004             0051*  BUF_SEEKER_200: equ 301
042004             0052*  BUF_SEEKER_208: equ 302
042004             0053*  BUF_SEEKER_216: equ 303
042004             0054*  BUF_SEEKER_224: equ 304
042004             0055*  BUF_SEEKER_232: equ 305
042004             0056*  BUF_SEEKER_240: equ 306
042004             0057*  BUF_SEEKER_248: equ 307
042004             0058*  BUF_SHIP_0L: equ 308
042004             0059*  BUF_SHIP_1C: equ 309
042004             0060*  BUF_SHIP_2R: equ 310
042004             0061*  BUF_SHIP_SMALL: equ 311
042004             0062*  BUF_STAR: equ 312
042004             0063*  BUF_STATION_BG_00: equ 313
042004             0064*  BUF_STATION_BG_01: equ 314
042004             0065*  BUF_STATION_BG_02: equ 315
042004             0066*  BUF_STATION_BG_03: equ 316
042004             0067*  BUF_STATION_BG_04: equ 317
042004             0068*  BUF_STATION_BG_05: equ 318
042004             0069*  BUF_TURRET_000: equ 319
042004             0070*  BUF_TURRET_008: equ 320
042004             0071*  BUF_TURRET_016: equ 321
042004             0072*  BUF_TURRET_024: equ 322
042004             0073*  BUF_TURRET_032: equ 323
042004             0074*  BUF_TURRET_040: equ 324
042004             0075*  BUF_TURRET_048: equ 325
042004             0076*  BUF_TURRET_056: equ 326
042004             0077*  BUF_TURRET_064: equ 327
042004             0078*  BUF_TURRET_072: equ 328
042004             0079*  BUF_TURRET_080: equ 329
042004             0080*  BUF_TURRET_088: equ 330
042004             0081*  BUF_TURRET_096: equ 331
042004             0082*  BUF_TURRET_104: equ 332
042004             0083*  BUF_TURRET_112: equ 333
042004             0084*  BUF_TURRET_120: equ 334
042004             0085*  BUF_TURRET_128: equ 335
042004             0086*  BUF_TURRET_136: equ 336
042004             0087*  BUF_TURRET_144: equ 337
042004             0088*  BUF_TURRET_152: equ 338
042004             0089*  BUF_TURRET_160: equ 339
042004             0090*  BUF_TURRET_168: equ 340
042004             0091*  BUF_TURRET_176: equ 341
042004             0092*  BUF_TURRET_184: equ 342
042004             0093*  BUF_TURRET_192: equ 343
042004             0094*  BUF_TURRET_200: equ 344
042004             0095*  BUF_TURRET_208: equ 345
042004             0096*  BUF_TURRET_216: equ 346
042004             0097*  BUF_TURRET_224: equ 347
042004             0098*  BUF_TURRET_232: equ 348
042004             0099*  BUF_TURRET_240: equ 349
042004             0100*  BUF_TURRET_248: equ 350
042004             0101*  
042004             0102*  sprites_image_list: ; type; width; height; filename; bufferId:
042004 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_0tile_empty, 256
       00 00 10 00 
       00 00 01 00 
       B2 26 04 00 
       01 00       
042016 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_1tile_cross, 257
       00 00 10 00 
       00 00 01 00 
       CC 26 04 01 
       01 00       
042028 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_2tile_horiz, 258
       00 00 10 00 
       00 00 01 00 
       E6 26 04 02 
       01 00       
04203A 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_3tile_vert, 259
       00 00 10 00 
       00 00 01 00 
       00 27 04 03 
       01 00       
04204C 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_4tile_square, 260
       00 00 10 00 
       00 00 01 00 
       19 27 04 04 
       01 00       
04205E 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_5tile_circle, 261
       00 00 10 00 
       00 00 01 00 
       34 27 04 05 
       01 00       
042070 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_6tile_pad, 262
       00 00 10 00 
       00 00 01 00 
       4F 27 04 06 
       01 00       
042082 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_7tile_turret, 263
       00 00 10 00 
       00 00 01 00 
       67 27 04 07 
       01 00       
042094 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_circle, 264
       00 00 10 00 
       00 00 01 00 
       82 27 04 08 
       01 00       
0420A6 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_crater, 265
       00 00 10 00 
       00 00 01 00 
       97 27 04 09 
       01 00       
0420B8 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_explosion_a, 266
       00 00 10 00 
       00 00 01 00 
       AC 27 04 0A 
       01 00       
0420CA 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_explosion_b, 267
       00 00 10 00 
       00 00 01 00 
       C6 27 04 0B 
       01 00       
0420DC 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_explosion_c, 268
       00 00 10 00 
       00 00 01 00 
       E0 27 04 0C 
       01 00       
0420EE 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_explosion_d, 269
       00 00 10 00 
       00 00 01 00 
       FA 27 04 0D 
       01 00       
042100 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_explosion_e, 270
       00 00 10 00 
       00 00 01 00 
       14 28 04 0E 
       01 00       
042112 01 00 00 07 0118*  	dl 1, 7, 7, 49, fn_fireball_a, 271
       00 00 07 00 
       00 31 00 00 
       2E 28 04 0F 
       01 00       
042124 01 00 00 07 0119*  	dl 1, 7, 7, 49, fn_fireball_b, 272
       00 00 07 00 
       00 31 00 00 
       47 28 04 10 
       01 00       
042136 01 00 00 05 0120*  	dl 1, 5, 13, 65, fn_laser_a, 273
       00 00 0D 00 
       00 41 00 00 
       60 28 04 11 
       01 00       
042148 01 00 00 05 0121*  	dl 1, 5, 13, 65, fn_laser_b, 274
       00 00 0D 00 
       00 41 00 00 
       76 28 04 12 
       01 00       
04215A 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_pad, 275
       00 00 10 00 
       00 00 01 00 
       8C 28 04 13 
       01 00       
04216C 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_000, 276
       00 00 10 00 
       00 00 01 00 
       9E 28 04 14 
       01 00       
04217E 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_008, 277
       00 00 10 00 
       00 00 01 00 
       B7 28 04 15 
       01 00       
042190 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_016, 278
       00 00 10 00 
       00 00 01 00 
       D0 28 04 16 
       01 00       
0421A2 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_024, 279
       00 00 10 00 
       00 00 01 00 
       E9 28 04 17 
       01 00       
0421B4 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_032, 280
       00 00 10 00 
       00 00 01 00 
       02 29 04 18 
       01 00       
0421C6 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_040, 281
       00 00 10 00 
       00 00 01 00 
       1B 29 04 19 
       01 00       
0421D8 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_048, 282
       00 00 10 00 
       00 00 01 00 
       34 29 04 1A 
       01 00       
0421EA 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_seeker_056, 283
       00 00 10 00 
       00 00 01 00 
       4D 29 04 1B 
       01 00       
0421FC 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_seeker_064, 284
       00 00 10 00 
       00 00 01 00 
       66 29 04 1C 
       01 00       
04220E 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_seeker_072, 285
       00 00 10 00 
       00 00 01 00 
       7F 29 04 1D 
       01 00       
042220 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_seeker_080, 286
       00 00 10 00 
       00 00 01 00 
       98 29 04 1E 
       01 00       
042232 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_seeker_088, 287
       00 00 10 00 
       00 00 01 00 
       B1 29 04 1F 
       01 00       
042244 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_seeker_096, 288
       00 00 10 00 
       00 00 01 00 
       CA 29 04 20 
       01 00       
042256 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_seeker_104, 289
       00 00 10 00 
       00 00 01 00 
       E3 29 04 21 
       01 00       
042268 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_seeker_112, 290
       00 00 10 00 
       00 00 01 00 
       FC 29 04 22 
       01 00       
04227A 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_seeker_120, 291
       00 00 10 00 
       00 00 01 00 
       15 2A 04 23 
       01 00       
04228C 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_seeker_128, 292
       00 00 10 00 
       00 00 01 00 
       2E 2A 04 24 
       01 00       
04229E 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_seeker_136, 293
       00 00 10 00 
       00 00 01 00 
       47 2A 04 25 
       01 00       
0422B0 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_seeker_144, 294
       00 00 10 00 
       00 00 01 00 
       60 2A 04 26 
       01 00       
0422C2 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_seeker_152, 295
       00 00 10 00 
       00 00 01 00 
       79 2A 04 27 
       01 00       
0422D4 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_seeker_160, 296
       00 00 10 00 
       00 00 01 00 
       92 2A 04 28 
       01 00       
0422E6 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_seeker_168, 297
       00 00 10 00 
       00 00 01 00 
       AB 2A 04 29 
       01 00       
0422F8 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_seeker_176, 298
       00 00 10 00 
       00 00 01 00 
       C4 2A 04 2A 
       01 00       
04230A 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_seeker_184, 299
       00 00 10 00 
       00 00 01 00 
       DD 2A 04 2B 
       01 00       
04231C 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_seeker_192, 300
       00 00 10 00 
       00 00 01 00 
       F6 2A 04 2C 
       01 00       
04232E 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_seeker_200, 301
       00 00 10 00 
       00 00 01 00 
       0F 2B 04 2D 
       01 00       
042340 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_seeker_208, 302
       00 00 10 00 
       00 00 01 00 
       28 2B 04 2E 
       01 00       
042352 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_seeker_216, 303
       00 00 10 00 
       00 00 01 00 
       41 2B 04 2F 
       01 00       
042364 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_seeker_224, 304
       00 00 10 00 
       00 00 01 00 
       5A 2B 04 30 
       01 00       
042376 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_seeker_232, 305
       00 00 10 00 
       00 00 01 00 
       73 2B 04 31 
       01 00       
042388 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_seeker_240, 306
       00 00 10 00 
       00 00 01 00 
       8C 2B 04 32 
       01 00       
04239A 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_seeker_248, 307
       00 00 10 00 
       00 00 01 00 
       A5 2B 04 33 
       01 00       
0423AC 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_ship_0l, 308
       00 00 10 00 
       00 00 01 00 
       BE 2B 04 34 
       01 00       
0423BE 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_ship_1c, 309
       00 00 10 00 
       00 00 01 00 
       D4 2B 04 35 
       01 00       
0423D0 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_ship_2r, 310
       00 00 10 00 
       00 00 01 00 
       EA 2B 04 36 
       01 00       
0423E2 01 00 00 08 0158*  	dl 1, 8, 8, 64, fn_ship_small, 311
       00 00 08 00 
       00 40 00 00 
       00 2C 04 37 
       01 00       
0423F4 01 00 00 05 0159*  	dl 1, 5, 5, 25, fn_star, 312
       00 00 05 00 
       00 19 00 00 
       19 2C 04 38 
       01 00       
042406 01 00 00 00 0160*  	dl 1, 256, 256, 65536, fn_station_bg_00, 313
       01 00 00 01 
       00 00 00 01 
       2C 2C 04 39 
       01 00       
042418 01 00 00 00 0161*  	dl 1, 256, 256, 65536, fn_station_bg_01, 314
       01 00 00 01 
       00 00 00 01 
       48 2C 04 3A 
       01 00       
04242A 01 00 00 00 0162*  	dl 1, 256, 256, 65536, fn_station_bg_02, 315
       01 00 00 01 
       00 00 00 01 
       64 2C 04 3B 
       01 00       
04243C 01 00 00 00 0163*  	dl 1, 256, 256, 65536, fn_station_bg_03, 316
       01 00 00 01 
       00 00 00 01 
       80 2C 04 3C 
       01 00       
04244E 01 00 00 00 0164*  	dl 1, 256, 256, 65536, fn_station_bg_04, 317
       01 00 00 01 
       00 00 00 01 
       9C 2C 04 3D 
       01 00       
042460 01 00 00 00 0165*  	dl 1, 256, 256, 65536, fn_station_bg_05, 318
       01 00 00 01 
       00 00 00 01 
       B8 2C 04 3E 
       01 00       
042472 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_turret_000, 319
       00 00 10 00 
       00 00 01 00 
       D4 2C 04 3F 
       01 00       
042484 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_turret_008, 320
       00 00 10 00 
       00 00 01 00 
       ED 2C 04 40 
       01 00       
042496 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_turret_016, 321
       00 00 10 00 
       00 00 01 00 
       06 2D 04 41 
       01 00       
0424A8 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_turret_024, 322
       00 00 10 00 
       00 00 01 00 
       1F 2D 04 42 
       01 00       
0424BA 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_turret_032, 323
       00 00 10 00 
       00 00 01 00 
       38 2D 04 43 
       01 00       
0424CC 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_turret_040, 324
       00 00 10 00 
       00 00 01 00 
       51 2D 04 44 
       01 00       
0424DE 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_turret_048, 325
       00 00 10 00 
       00 00 01 00 
       6A 2D 04 45 
       01 00       
0424F0 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_turret_056, 326
       00 00 10 00 
       00 00 01 00 
       83 2D 04 46 
       01 00       
042502 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_turret_064, 327
       00 00 10 00 
       00 00 01 00 
       9C 2D 04 47 
       01 00       
042514 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_turret_072, 328
       00 00 10 00 
       00 00 01 00 
       B5 2D 04 48 
       01 00       
042526 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_turret_080, 329
       00 00 10 00 
       00 00 01 00 
       CE 2D 04 49 
       01 00       
042538 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_turret_088, 330
       00 00 10 00 
       00 00 01 00 
       E7 2D 04 4A 
       01 00       
04254A 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_turret_096, 331
       00 00 10 00 
       00 00 01 00 
       00 2E 04 4B 
       01 00       
04255C 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_turret_104, 332
       00 00 10 00 
       00 00 01 00 
       19 2E 04 4C 
       01 00       
04256E 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_turret_112, 333
       00 00 10 00 
       00 00 01 00 
       32 2E 04 4D 
       01 00       
042580 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_turret_120, 334
       00 00 10 00 
       00 00 01 00 
       4B 2E 04 4E 
       01 00       
042592 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_turret_128, 335
       00 00 10 00 
       00 00 01 00 
       64 2E 04 4F 
       01 00       
0425A4 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_turret_136, 336
       00 00 10 00 
       00 00 01 00 
       7D 2E 04 50 
       01 00       
0425B6 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_turret_144, 337
       00 00 10 00 
       00 00 01 00 
       96 2E 04 51 
       01 00       
0425C8 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_turret_152, 338
       00 00 10 00 
       00 00 01 00 
       AF 2E 04 52 
       01 00       
0425DA 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_turret_160, 339
       00 00 10 00 
       00 00 01 00 
       C8 2E 04 53 
       01 00       
0425EC 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_turret_168, 340
       00 00 10 00 
       00 00 01 00 
       E1 2E 04 54 
       01 00       
0425FE 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_turret_176, 341
       00 00 10 00 
       00 00 01 00 
       FA 2E 04 55 
       01 00       
042610 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_turret_184, 342
       00 00 10 00 
       00 00 01 00 
       13 2F 04 56 
       01 00       
042622 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_turret_192, 343
       00 00 10 00 
       00 00 01 00 
       2C 2F 04 57 
       01 00       
042634 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_turret_200, 344
       00 00 10 00 
       00 00 01 00 
       45 2F 04 58 
       01 00       
042646 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_turret_208, 345
       00 00 10 00 
       00 00 01 00 
       5E 2F 04 59 
       01 00       
042658 01 00 00 10 0193*  	dl 1, 16, 16, 256, fn_turret_216, 346
       00 00 10 00 
       00 00 01 00 
       77 2F 04 5A 
       01 00       
04266A 01 00 00 10 0194*  	dl 1, 16, 16, 256, fn_turret_224, 347
       00 00 10 00 
       00 00 01 00 
       90 2F 04 5B 
       01 00       
04267C 01 00 00 10 0195*  	dl 1, 16, 16, 256, fn_turret_232, 348
       00 00 10 00 
       00 00 01 00 
       A9 2F 04 5C 
       01 00       
04268E 01 00 00 10 0196*  	dl 1, 16, 16, 256, fn_turret_240, 349
       00 00 10 00 
       00 00 01 00 
       C2 2F 04 5D 
       01 00       
0426A0 01 00 00 10 0197*  	dl 1, 16, 16, 256, fn_turret_248, 350
       00 00 10 00 
       00 00 01 00 
       DB 2F 04 5E 
       01 00       
0426B2             0198*  
0426B2             0199*  ; files_list: ; filename:
0426B2 73 70 72 69 0200*  fn_0tile_empty: db "sprites/0tile_empty.rgba2",0
       74 65 73 2F 
       30 74 69 6C 
       65 5F 65 6D 
       70 74 79 2E 
       72 67 62 61 
       32 00       
0426CC 73 70 72 69 0201*  fn_1tile_cross: db "sprites/1tile_cross.rgba2",0
       74 65 73 2F 
       31 74 69 6C 
       65 5F 63 72 
       6F 73 73 2E 
       72 67 62 61 
       32 00       
0426E6 73 70 72 69 0202*  fn_2tile_horiz: db "sprites/2tile_horiz.rgba2",0
       74 65 73 2F 
       32 74 69 6C 
       65 5F 68 6F 
       72 69 7A 2E 
       72 67 62 61 
       32 00       
042700 73 70 72 69 0203*  fn_3tile_vert: db "sprites/3tile_vert.rgba2",0
       74 65 73 2F 
       33 74 69 6C 
       65 5F 76 65 
       72 74 2E 72 
       67 62 61 32 
       00          
042719 73 70 72 69 0204*  fn_4tile_square: db "sprites/4tile_square.rgba2",0
       74 65 73 2F 
       34 74 69 6C 
       65 5F 73 71 
       75 61 72 65 
       2E 72 67 62 
       61 32 00    
042734 73 70 72 69 0205*  fn_5tile_circle: db "sprites/5tile_circle.rgba2",0
       74 65 73 2F 
       35 74 69 6C 
       65 5F 63 69 
       72 63 6C 65 
       2E 72 67 62 
       61 32 00    
04274F 73 70 72 69 0206*  fn_6tile_pad: db "sprites/6tile_pad.rgba2",0
       74 65 73 2F 
       36 74 69 6C 
       65 5F 70 61 
       64 2E 72 67 
       62 61 32 00 
042767 73 70 72 69 0207*  fn_7tile_turret: db "sprites/7tile_turret.rgba2",0
       74 65 73 2F 
       37 74 69 6C 
       65 5F 74 75 
       72 72 65 74 
       2E 72 67 62 
       61 32 00    
042782 73 70 72 69 0208*  fn_circle: db "sprites/circle.rgba2",0
       74 65 73 2F 
       63 69 72 63 
       6C 65 2E 72 
       67 62 61 32 
       00          
042797 73 70 72 69 0209*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0427AC 73 70 72 69 0210*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
0427C6 73 70 72 69 0211*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
0427E0 73 70 72 69 0212*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
0427FA 73 70 72 69 0213*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
042814 73 70 72 69 0214*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
04282E 73 70 72 69 0215*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
042847 73 70 72 69 0216*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
042860 73 70 72 69 0217*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
042876 73 70 72 69 0218*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04288C 73 70 72 69 0219*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04289E 73 70 72 69 0220*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0428B7 73 70 72 69 0221*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0428D0 73 70 72 69 0222*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0428E9 73 70 72 69 0223*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
042902 73 70 72 69 0224*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04291B 73 70 72 69 0225*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042934 73 70 72 69 0226*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04294D 73 70 72 69 0227*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042966 73 70 72 69 0228*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04297F 73 70 72 69 0229*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
042998 73 70 72 69 0230*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0429B1 73 70 72 69 0231*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0429CA 73 70 72 69 0232*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0429E3 73 70 72 69 0233*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0429FC 73 70 72 69 0234*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
042A15 73 70 72 69 0235*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
042A2E 73 70 72 69 0236*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
042A47 73 70 72 69 0237*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
042A60 73 70 72 69 0238*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
042A79 73 70 72 69 0239*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
042A92 73 70 72 69 0240*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
042AAB 73 70 72 69 0241*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
042AC4 73 70 72 69 0242*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
042ADD 73 70 72 69 0243*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
042AF6 73 70 72 69 0244*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
042B0F 73 70 72 69 0245*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
042B28 73 70 72 69 0246*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
042B41 73 70 72 69 0247*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
042B5A 73 70 72 69 0248*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
042B73 73 70 72 69 0249*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
042B8C 73 70 72 69 0250*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042BA5 73 70 72 69 0251*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
042BBE 73 70 72 69 0252*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
042BD4 73 70 72 69 0253*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
042BEA 73 70 72 69 0254*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
042C00 73 70 72 69 0255*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
042C19 73 70 72 69 0256*  fn_star: db "sprites/star.rgba2",0
       74 65 73 2F 
       73 74 61 72 
       2E 72 67 62 
       61 32 00    
042C2C 73 70 72 69 0257*  fn_station_bg_00: db "sprites/station_bg_00.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       30 2E 72 67 
       62 61 32 00 
042C48 73 70 72 69 0258*  fn_station_bg_01: db "sprites/station_bg_01.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       31 2E 72 67 
       62 61 32 00 
042C64 73 70 72 69 0259*  fn_station_bg_02: db "sprites/station_bg_02.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       32 2E 72 67 
       62 61 32 00 
042C80 73 70 72 69 0260*  fn_station_bg_03: db "sprites/station_bg_03.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       33 2E 72 67 
       62 61 32 00 
042C9C 73 70 72 69 0261*  fn_station_bg_04: db "sprites/station_bg_04.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       34 2E 72 67 
       62 61 32 00 
042CB8 73 70 72 69 0262*  fn_station_bg_05: db "sprites/station_bg_05.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       35 2E 72 67 
       62 61 32 00 
042CD4 73 70 72 69 0263*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042CED 73 70 72 69 0264*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
042D06 73 70 72 69 0265*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042D1F 73 70 72 69 0266*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
042D38 73 70 72 69 0267*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
042D51 73 70 72 69 0268*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042D6A 73 70 72 69 0269*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
042D83 73 70 72 69 0270*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042D9C 73 70 72 69 0271*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
042DB5 73 70 72 69 0272*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
042DCE 73 70 72 69 0273*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
042DE7 73 70 72 69 0274*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
042E00 73 70 72 69 0275*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
042E19 73 70 72 69 0276*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
042E32 73 70 72 69 0277*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
042E4B 73 70 72 69 0278*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
042E64 73 70 72 69 0279*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
042E7D 73 70 72 69 0280*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
042E96 73 70 72 69 0281*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
042EAF 73 70 72 69 0282*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
042EC8 73 70 72 69 0283*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
042EE1 73 70 72 69 0284*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
042EFA 73 70 72 69 0285*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
042F13 73 70 72 69 0286*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
042F2C 73 70 72 69 0287*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
042F45 73 70 72 69 0288*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
042F5E 73 70 72 69 0289*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
042F77 73 70 72 69 0290*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
042F90 73 70 72 69 0291*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
042FA9 73 70 72 69 0292*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
042FC2 73 70 72 69 0293*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042FDB 73 70 72 69 0294*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
042FF4             0047       include "images_ui.inc"
042FF4             0001*  ; Generated by make_images.py
042FF4             0002*  
042FF4             0003*  ui_num_images: equ 4
042FF4             0004*  
042FF4             0005*  ; buffer_ids:
042FF4             0006*  BUF_BEZEL_L: equ 0
042FF4             0007*  BUF_BEZEL_R: equ 1
042FF4             0008*  BUF_SPLASH_BG: equ 2
042FF4             0009*  BUF_SPLASH_LOGO: equ 3
042FF4             0010*  
042FF4             0011*  ui_image_list: ; type; width; height; filename; bufferId:
042FF4 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       3C 30 04 00 
       00 00       
043006 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       4D 30 04 01 
       00 00       
043018 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       5E 30 04 02 
       00 00       
04302A 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       71 30 04 03 
       00 00       
04303C             0016*  
04303C             0017*  ; files_list: ; filename:
04303C 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
04304D 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04305E 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
043071 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
043086             0048       include "laser.inc"
043086             0001*  ; ##### LASER SPRITE PARAMETERS #####
043086             0002*  ; uses the same offsets from its table base as the main sprite table:
043086             0003*  laser_start_variables: ; label marking beginning of table
043086 11          0004*  laser_id:               db table_max_records+1
043087 00          0005*  laser_type:             db 0x00 ; 1 bytes currently not used
043088 11 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
04308B 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
04308E 00          0008*  laser_collisions:       db 0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
04308F 00          0009*  laser_dim_x:            db 0x00 ; 1 bytes sprite width in pixels
043090 00          0010*  laser_dim_y:            db 0x00 ; 1 bytes sprite height in pixels
043091 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
043094 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
043097 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04309A 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04309D 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
0430A0 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
0430A3 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
0430A6 00          0018*  laser_animation:        db 0x00 ; 1 bytes current sprite animation frame
0430A7 00          0019*  laser_animation_timer:  db 0x00 ; 1 bytes decremented every frame, when zero, advance animation
0430A8 00          0020*  laser_move_timer:       db 0x00 ; 1 bytes not currently used
0430A9 00          0021*  laser_move_step:        db 0x00 ; 1 bytes not currently used
0430AA 00          0022*  laser_points:           db 0x00 ; 1 bytes not currently used
0430AB 00          0023*  laser_shield_damage:    db 0x00 ; 1 bytes not currently used
0430AC             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
0430AC             0025*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
0430AC             0026*  laser_animation_timer_reset: equ 2 ; animate every two frames
0430AC             0027*  
0430AC             0028*  laser_control:
0430AC             0029*  ; point to laser sprite variables
0430AC FD 21 86 30 0030*      ld iy,laser_start_variables
       04          
0430B1 FD 22 F4 45 0031*      ld (table_pointer),iy
       04          
0430B6             0032*  ; did laser just die?
0430B6 FD CB 08 7E 0033*      bit sprite_just_died,(iy+sprite_collisions)
0430BA C2 43 31 04 0034*      jp nz,kill_laser
0430BE             0035*  ; select laser sprite
0430BE 3A 86 30 04 0036*      ld a,(laser_id)
0430C2 CD 80 19 04 0037*      call vdu_sprite_select
0430C6             0038*  ; update laser position
0430C6 CD A8 46 04 0039*      call move_sprite
0430CA             0040*  ; are we at top of screen?
0430CA 3A F8 45 04 0041*      ld a,(sprite_screen_edge)
0430CE E6 08       0042*      and collide_top
0430D0 C2 43 31 04 0043*      jp nz,kill_laser
0430D4             0044*  ; check animation timer
0430D4 FD 35 21    0045*      dec (iy+sprite_animation_timer)
0430D7 C2 E4 30 04 0046*      jp nz,@F
0430DB 3E 02       0047*      ld a,laser_animation_timer_reset
0430DD FD 77 21    0048*      ld (iy+sprite_animation_timer),a
0430E0 CD C7 19 04 0049*      call vdu_sprite_next_frame
0430E4             0050*  @@: ; draw the sprite
0430E4 FD 07 0B    0051*      ld bc,(iy+sprite_x)
0430E7 FD 17 0E    0052*      ld de,(iy+sprite_y)
0430EA CD 4C 1A 04 0053*      call vdu_sprite_move_abs168
0430EE             0054*  ; return to caller
0430EE C9          0055*      ret
0430EF             0056*  ; end laser_control
0430EF             0057*  
0430EF             0058*  fire_laser:
0430EF             0059*  ; point to laser sprite variables
0430EF FD 21 86 30 0060*      ld iy,laser_start_variables
       04          
0430F4 FD 22 F4 45 0061*      ld (table_pointer),iy
       04          
0430F9             0062*  ; is laser already active?
0430F9 FD CB 08 76 0063*      bit sprite_alive,(iy+sprite_collisions)
0430FD C0          0064*      ret nz ; laser already active
0430FE             0065*  ; otherwise,FIRE ZEE LASER!!1111
0430FE             0066*  ; set laser status to active
0430FE FD CB 08 F6 0067*      set sprite_alive,(iy+sprite_collisions)
043102             0068*  ; initialize laser sprite parameters
043102             0069*  ; x-coordinate
043102 DD 21 61 42 0070*      ld ix,player_start_variables
       04          
043107 DD 27 0B    0071*      ld hl,(ix+sprite_x)
04310A 11 06 00 00 0072*      ld de,6 ; horizontal center with player sprite
04310E 19          0073*      add hl,de
04310F FD 2F 0B    0074*      ld (iy+sprite_x),hl
043112             0075*  ; y-coordinate
043112 DD 27 0E    0076*      ld hl,(ix+sprite_y)
043115 11 FA FF FF 0077*      ld de,-6 ; set laser y a few pixels above player
043119 FD 2F 0E    0078*      ld (iy+sprite_y),hl
04311C             0079*  ; set laser velocity
04311C 21 00 FA FF 0080*      ld hl,laser_speed
043120 FD 2F 14    0081*      ld (iy+sprite_yvel),hl
043123             0082*  ; set laser animation frame and timer
043123 AF          0083*      xor a ; first frame
043124 FD 77 20    0084*      ld (iy+sprite_animation),a
043127 3E 02       0085*      ld a,laser_animation_timer_reset
043129 FD 77 21    0086*      ld (iy+sprite_animation_timer),a
04312C             0087*  ; plot the sprite and make it visible
04312C 3A 86 30 04 0088*      ld a,(laser_id)
043130 CD 80 19 04 0089*      call vdu_sprite_select
043134 FD 07 0B    0090*      ld bc,(iy+sprite_x)
043137 FD 17 0E    0091*      ld de,(iy+sprite_y)
04313A CD 4C 1A 04 0092*      call vdu_sprite_move_abs168
04313E CD F6 19 04 0093*      call vdu_sprite_show
043142             0094*  ; return to caller
043142 C9          0095*      ret
043143             0096*  ; end fire_laser
043143             0097*  
043143             0098*  kill_laser:
043143             0099*  ; update status to inactive
043143 AF          0100*      xor a ; zero out a
043144 32 8E 30 04 0101*      ld (laser_collisions),a
043148             0102*  ; hide the sprite
043148 3A 86 30 04 0103*      ld a,(laser_id)
04314C CD 80 19 04 0104*      call vdu_sprite_select
043150 CD 04 1A 04 0105*      call vdu_sprite_hide
043154 C9          0106*      ret
043155             0107*  ; end kill_laser
043155             0049       include "levels.inc"
043155 00          0001*  tiles_level_00: db 0 ; number of rows, 0 is max of 256
043156 00 00 00 00 0002*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 0
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
043166 00 00 00 00 0003*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03 ; row 1
       00 00 00 00 
       00 03 00 05 
       03 05 00 03 
043176 00 00 00 00 0004*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 2
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
043186 00 00 00 07 0005*      db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 3
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
043196 00 00 00 03 0006*      db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 4
       00 05 03 05 
       00 03 05 00 
       03 00 00 03 
0431A6 00 00 00 03 0007*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 5
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
0431B6 00 00 00 01 0008*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 6
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
0431C6 00 00 00 03 0009*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 7
       00 00 03 05 
       04 03 00 00 
       03 00 00 03 
0431D6 00 00 00 03 0010*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 8
       00 00 03 04 
       05 03 00 00 
       03 00 00 03 
0431E6 01 02 02 01 0011*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 9
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
0431F6 03 04 05 03 0012*      db 0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03 ; row 10
       00 00 03 00 
       00 03 00 00 
       03 05 05 03 
043206 03 05 04 03 0013*      db 0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 11
       00 00 03 00 
       00 03 00 00 
       03 04 04 03 
043216 01 02 02 01 0014*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 12
       02 02 01 02 
       02 06 02 02 
       01 02 02 01 
043226 00 00 00 00 0015*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 13
       00 00 03 04 
       00 03 05 00 
       03 00 00 03 
043236 00 00 00 00 0016*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 14
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
043246 00 00 00 00 0017*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 15
       00 00 01 02 
       02 07 02 02 
       01 02 02 01 
043256 00 00 00 00 0018*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x00,0x00,0x00 ; row 16
       00 00 03 05 
       05 03 00 05 
       03 00 00 00 
043266 00 00 00 00 0019*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 17
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
043276 00 00 00 00 0020*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 18
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
043286 00 00 00 00 0021*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x00 ; row 19
       00 00 03 00 
       00 03 04 00 
       03 00 00 00 
043296 00 00 00 00 0022*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 20
       00 00 03 00 
       05 03 00 00 
       03 00 00 00 
0432A6 00 00 00 00 0023*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00 ; row 21
       00 00 03 00 
       00 03 05 00 
       03 00 00 00 
0432B6 00 00 00 00 0024*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 22
       00 00 03 04 
       00 03 00 00 
       03 00 00 00 
0432C6 00 00 00 00 0025*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 23
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0432D6 00 00 00 00 0026*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 24
       00 00 03 00 
       04 03 00 00 
       00 00 00 00 
0432E6 00 00 00 00 0027*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 25
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
0432F6 00 00 00 01 0028*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 26
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
043306 00 00 00 03 0029*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 27
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043316 00 00 00 03 0030*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 28
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
043326 00 00 00 01 0031*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 29
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043336 00 00 00 03 0032*      db 0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 30
       04 05 03 00 
       00 03 00 00 
       00 00 00 00 
043346 00 00 00 03 0033*      db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 31
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
043356 00 00 00 01 0034*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 32
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
043366 00 00 00 00 0035*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 33
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043376 00 00 00 00 0036*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 34
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043386 00 00 00 00 0037*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 35
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
043396 00 00 00 00 0038*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 36
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0433A6 00 00 00 00 0039*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 37
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0433B6 00 00 00 00 0040*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 38
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0433C6 00 00 00 00 0041*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 39
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
0433D6 00 00 00 00 0042*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 40
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
0433E6 00 00 00 01 0043*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 41
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
0433F6 00 00 00 03 0044*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 42
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043406 00 00 00 03 0045*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 43
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043416 07 02 02 01 0046*      db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 44
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043426 03 00 00 03 0047*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 45
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043436 03 00 00 03 0048*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 46
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043446 01 02 02 01 0049*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 47
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043456 00 00 00 03 0050*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 48
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043466 00 00 00 03 0051*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 49
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043476 00 00 00 06 0052*      db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 50
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
043486 00 00 00 00 0053*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 51
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
043496 00 00 00 00 0054*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 52
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
0434A6 00 00 00 00 0055*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 53
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
0434B6 00 00 00 00 0056*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 54
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0434C6 00 00 00 00 0057*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 55
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0434D6 00 00 00 01 0058*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 56
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
0434E6 00 00 00 03 0059*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 57
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
0434F6 00 00 00 03 0060*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 58
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
043506 00 00 00 01 0061*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 59
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043516 00 00 00 03 0062*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 60
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043526 00 00 00 03 0063*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 61
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043536 00 00 00 07 0064*      db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 62
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
043546 00 00 00 00 0065*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 63
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043556 00 00 00 00 0066*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 64
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043566 00 00 00 00 0067*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 65
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
043576 00 00 00 00 0068*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 66
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043586 00 00 00 00 0069*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 67
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043596 00 00 00 00 0070*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 68
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0435A6 00 00 00 00 0071*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 69
       00 00 00 00 
       00 03 04 04 
       03 00 00 00 
0435B6 00 00 00 00 0072*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00 ; row 70
       00 00 00 00 
       00 03 05 04 
       03 00 00 00 
0435C6 00 00 00 00 0073*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 71
       00 00 00 00 
       00 01 02 02 
       01 00 00 00 
0435D6 00 00 00 00 0074*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 72
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0435E6 00 00 00 00 0075*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 73
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0435F6 00 00 00 00 0076*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 74
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
043606 00 00 00 00 0077*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 75
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043616 00 00 00 00 0078*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 76
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043626 00 00 00 07 0079*      db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 77
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
043636 00 00 00 03 0080*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 78
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043646 00 00 00 03 0081*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 79
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043656 00 00 00 01 0082*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 80
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
043666 00 00 00 03 0083*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 81
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
043676 00 00 00 03 0084*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 82
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
043686 00 00 00 01 0085*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 83
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
043696 00 00 00 00 0086*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 84
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0436A6 00 00 00 00 0087*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 85
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0436B6 00 00 00 00 0088*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 86
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0436C6 00 00 00 00 0089*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 87
       00 00 03 05 
       05 03 00 00 
       03 00 00 00 
0436D6 00 00 00 00 0090*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 88
       00 00 03 04 
       04 03 00 00 
       03 00 00 00 
0436E6 00 00 00 00 0091*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 89
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
0436F6 00 00 00 00 0092*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 90
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
043706 00 00 00 00 0093*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 91
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
043716 00 00 00 00 0094*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 92
       00 00 06 02 
       02 01 02 02 
       01 02 02 01 
043726 00 00 00 00 0095*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03 ; row 93
       00 00 00 00 
       00 03 00 00 
       03 05 04 03 
043736 00 00 00 00 0096*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03 ; row 94
       00 00 00 00 
       00 03 00 00 
       03 04 05 03 
043746 00 00 00 01 0097*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 95
       02 02 02 02 
       02 07 02 02 
       01 02 02 01 
043756 00 00 00 03 0098*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 96
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043766 00 00 00 03 0099*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 97
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043776 00 00 00 01 0100*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01,0x02,0x02,0x01 ; row 98
       02 02 02 02 
       02 02 02 02 
       01 02 02 01 
043786 01 02 02 01 0101*      db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 99
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043796 03 00 00 03 0102*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 100
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0437A6 03 00 00 03 0103*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 101
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0437B6 01 02 02 07 0104*      db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 102
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0437C6 03 00 00 03 0105*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 103
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0437D6 03 00 00 03 0106*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 104
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0437E6 01 02 02 01 0107*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 105
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
0437F6 03 00 04 03 0108*      db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 106
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043806 03 04 00 03 0109*      db 0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 107
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043816 01 02 02 01 0110*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 108
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
043826 03 00 00 03 0111*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 109
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043836 03 00 04 03 0112*      db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 110
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
043846 01 02 02 01 0113*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 111
       02 02 07 02 
       02 01 00 00 
       00 00 00 00 
043856 00 00 00 03 0114*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 112
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
043866 00 00 00 03 0115*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 113
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
043876 00 00 00 01 0116*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 114
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
043886 00 00 00 00 0117*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 115
       00 00 03 00 
       00 03 04 04 
       03 00 00 00 
043896 00 00 00 00 0118*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00 ; row 116
       00 00 03 00 
       00 03 05 05 
       03 00 00 00 
0438A6 00 00 00 00 0119*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 117
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0438B6 00 00 00 00 0120*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 118
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0438C6 00 00 00 00 0121*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 119
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0438D6 00 00 00 00 0122*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 120
       00 00 00 00 
       00 06 02 02 
       01 02 02 01 
0438E6 00 00 00 00 0123*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x05,0x03 ; row 121
       00 00 00 00 
       00 03 00 05 
       03 00 05 03 
0438F6 00 00 00 00 0124*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x05,0x00,0x03 ; row 122
       00 00 00 00 
       00 03 00 04 
       03 05 00 03 
043906 00 00 00 00 0125*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 123
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
043916 00 00 00 00 0126*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 124
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
043926 00 00 00 00 0127*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 125
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
043936 00 00 00 00 0128*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 126
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
043946 00 00 00 00 0129*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 127
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
043956 00 00 00 00 0130*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 128
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
043966 00 00 00 01 0131*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 129
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
043976 00 00 00 03 0132*      db 0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 130
       05 00 03 00 
       00 00 00 00 
       00 00 00 00 
043986 00 00 00 03 0133*      db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 131
       00 05 03 00 
       00 00 00 00 
       00 00 00 00 
043996 01 02 02 07 0134*      db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 132
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
0439A6 03 04 00 03 0135*      db 0x03,0x04,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 133
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0439B6 03 05 04 03 0136*      db 0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 134
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0439C6 01 02 02 01 0137*      db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 135
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0439D6 03 00 00 03 0138*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 136
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0439E6 03 00 00 03 0139*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 137
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0439F6 01 02 02 01 0140*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 138
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043A06 03 00 00 03 0141*      db 0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 139
       04 05 03 00 
       00 00 00 00 
       00 00 00 00 
043A16 03 00 00 03 0142*      db 0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 140
       05 04 03 00 
       00 00 00 00 
       00 00 00 00 
043A26 01 02 02 01 0143*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 141
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
043A36 00 00 00 03 0144*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 142
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043A46 00 00 00 03 0145*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 143
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043A56 00 00 00 06 0146*      db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 144
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
043A66 00 00 00 00 0147*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 145
       00 00 03 00 
       00 03 04 04 
       03 00 00 03 
043A76 00 00 00 00 0148*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03 ; row 146
       00 00 03 00 
       00 03 05 05 
       03 00 00 03 
043A86 00 00 00 00 0149*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01 ; row 147
       00 00 01 02 
       02 01 02 02 
       06 02 02 01 
043A96 00 00 00 00 0150*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 148
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
043AA6 00 00 00 00 0151*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 149
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
043AB6 00 00 00 00 0152*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 150
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
043AC6 00 00 00 00 0153*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 151
       00 00 00 00 
       00 03 04 04 
       03 00 00 03 
043AD6 00 00 00 00 0154*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03 ; row 152
       00 00 00 00 
       00 03 05 04 
       03 00 00 03 
043AE6 00 00 00 00 0155*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 153
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
043AF6 00 00 00 00 0156*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 154
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
043B06 00 00 00 00 0157*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 155
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
043B16 00 00 00 00 0158*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 156
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
043B26 00 00 00 00 0159*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 157
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043B36 00 00 00 00 0160*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 158
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043B46 00 00 00 00 0161*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01 ; row 159
       00 00 00 00 
       00 00 00 00 
       01 02 02 01 
043B56 00 00 00 00 0162*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03 ; row 160
       00 00 00 00 
       00 00 00 00 
       03 05 05 03 
043B66 00 00 00 00 0163*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03 ; row 161
       00 00 00 00 
       00 00 00 00 
       03 05 04 03 
043B76 00 00 00 00 0164*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01 ; row 162
       00 00 00 00 
       00 00 00 00 
       06 02 02 01 
043B86 00 00 00 00 0165*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 163
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043B96 00 00 00 00 0166*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 164
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
043BA6 00 00 00 01 0167*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01 ; row 165
       02 02 02 02 
       02 02 02 02 
       07 02 02 01 
043BB6 00 00 00 03 0168*      db 0x00,0x00,0x00,0x03,0x04,0x04,0x05,0x04,0x05,0x05,0x05,0x04,0x04,0x04,0x05,0x03 ; row 166
       04 04 05 04 
       05 05 05 04 
       04 04 05 03 
043BC6 00 00 00 03 0169*      db 0x00,0x00,0x00,0x03,0x05,0x05,0x04,0x04,0x04,0x04,0x05,0x05,0x04,0x05,0x05,0x03 ; row 167
       05 05 04 04 
       04 04 05 05 
       04 05 05 03 
043BD6 00 00 00 01 0170*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01 ; row 168
       02 02 02 02 
       02 02 02 02 
       02 02 02 01 
043BE6 01 02 02 07 0171*      db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 169
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043BF6 03 00 00 03 0172*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 170
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C06 03 00 00 03 0173*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 171
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C16 01 02 02 01 0174*      db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 172
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C26 03 04 04 03 0175*      db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 173
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C36 03 04 04 03 0176*      db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 174
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C46 01 02 02 01 0177*      db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 175
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C56 03 00 00 03 0178*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 176
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C66 03 00 00 03 0179*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 177
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C76 01 02 02 01 0180*      db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 178
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C86 03 00 00 03 0181*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 179
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C96 03 00 00 03 0182*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 180
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043CA6 01 02 02 07 0183*      db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 181
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043CB6 03 00 00 03 0184*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 182
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043CC6 03 00 00 03 0185*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 183
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043CD6 01 02 02 01 0186*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 184
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043CE6 00 00 00 03 0187*      db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 185
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
043CF6 00 00 00 03 0188*      db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 186
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
043D06 00 00 00 01 0189*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 187
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043D16 00 00 00 03 0190*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 188
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043D26 00 00 00 03 0191*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 189
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043D36 00 00 00 01 0192*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 190
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
043D46 00 00 00 03 0193*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 191
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043D56 00 00 00 03 0194*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 192
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043D66 00 00 00 01 0195*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 193
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043D76 00 00 00 03 0196*      db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 194
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
043D86 00 00 00 03 0197*      db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 195
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
043D96 00 00 00 01 0198*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 196
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043DA6 00 00 00 03 0199*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 197
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043DB6 00 00 00 03 0200*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 198
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043DC6 00 00 00 07 0201*      db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 199
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043DD6 00 00 00 03 0202*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 200
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043DE6 00 00 00 03 0203*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 201
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
043DF6 00 00 00 01 0204*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 202
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
043E06 00 00 00 00 0205*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 203
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
043E16 00 00 00 00 0206*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 204
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
043E26 00 00 00 00 0207*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 205
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
043E36 00 00 00 00 0208*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 206
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043E46 00 00 00 00 0209*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 207
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043E56 00 00 00 00 0210*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 208
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
043E66 00 00 00 00 0211*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 209
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
043E76 00 00 00 00 0212*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 210
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
043E86 00 00 00 00 0213*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 211
       00 00 00 00 
       01 06 02 02 
       01 02 02 01 
043E96 00 00 00 00 0214*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x01,0x00,0x00,0x00,0x00,0x00 ; row 212
       00 00 00 01 
       05 04 01 00 
       00 00 00 00 
043EA6 00 00 00 00 0215*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00 ; row 213
       00 00 01 05 
       04 05 01 00 
       00 00 00 00 
043EB6 00 00 00 00 0216*      db 0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 214
       00 01 05 04 
       05 01 00 00 
       00 00 00 00 
043EC6 00 00 00 00 0217*      db 0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 215
       01 05 04 05 
       01 00 00 00 
       00 00 00 00 
043ED6 00 00 00 01 0218*      db 0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 216
       05 04 05 01 
       00 00 00 00 
       00 00 00 00 
043EE6 00 00 01 05 0219*      db 0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 217
       04 05 01 00 
       00 00 00 00 
       00 00 00 00 
043EF6 01 02 02 07 0220*      db 0x01,0x02,0x02,0x07,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 218
       05 01 00 00 
       00 00 00 00 
       00 00 00 00 
043F06 03 00 00 03 0221*      db 0x03,0x00,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 219
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
043F16 03 00 00 03 0222*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 220
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043F26 01 02 02 01 0223*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 221
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
043F36 03 00 00 03 0224*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 222
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043F46 03 00 00 03 0225*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 223
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043F56 01 02 02 01 0226*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 224
       02 02 06 00 
       00 00 00 00 
       00 00 00 00 
043F66 00 00 00 03 0227*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 225
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043F76 00 00 00 03 0228*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 226
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
043F86 00 00 00 01 0229*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 227
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
043F96 00 00 00 03 0230*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 228
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043FA6 00 00 00 03 0231*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 229
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043FB6 00 00 00 01 0232*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 230
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
043FC6 00 00 00 03 0233*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 231
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043FD6 00 00 00 03 0234*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 232
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
043FE6 01 02 02 01 0235*      db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00 ; row 233
       02 02 01 02 
       02 01 02 02 
       06 00 00 00 
043FF6 03 00 00 03 0236*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 234
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
044006 03 00 00 03 0237*      db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 235
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
044016 07 02 02 01 0238*      db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 236
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
044026 00 00 00 03 0239*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 237
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
044036 00 00 00 03 0240*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 238
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
044046 00 00 00 01 0241*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 239
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
044056 00 00 00 03 0242*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 240
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
044066 00 00 00 03 0243*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 241
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
044076 00 00 00 01 0244*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 242
       02 02 06 02 
       02 01 02 02 
       01 00 00 00 
044086 00 00 00 00 0245*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 243
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
044096 00 00 00 00 0246*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 244
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0440A6 00 00 00 00 0247*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 245
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0440B6 00 00 00 00 0248*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 246
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
0440C6 00 00 00 00 0249*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 247
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
0440D6 00 00 00 01 0250*      db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 248
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
0440E6 00 00 00 03 0251*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 249
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0440F6 00 00 00 03 0252*      db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 250
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
044106 01 02 02 07 0253*      db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01 ; row 251
       02 02 01 02 
       02 01 02 02 
       07 02 02 01 
044116 03 05 05 03 0254*      db 0x03,0x05,0x05,0x03,0x04,0x05,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x05,0x04,0x03 ; row 252
       04 05 03 05 
       05 03 00 05 
       03 05 04 03 
044126 03 04 04 03 0255*      db 0x03,0x04,0x04,0x03,0x05,0x05,0x03,0x04,0x04,0x03,0x05,0x00,0x03,0x04,0x04,0x03 ; row 253
       05 05 03 04 
       04 03 05 00 
       03 04 04 03 
044136 01 02 02 06 0256*      db 0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06 ; row 254
       02 02 01 02 
       02 06 02 02 
       01 02 02 06 
044146 00 00 00 00 0257*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044156             0258*  
044156             0259*  
044156 10          0260*  tiles_level_01: db 16 ; number of rows, 0 is max of 256
044157 00 00 00 00 0261*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044167 00 00 00 00 0262*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044177 00 00 00 00 0263*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044187 00 00 00 00 0264*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044197 00 00 00 00 0265*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441A7 00 00 00 00 0266*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441B7 00 00 00 00 0267*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441C7 00 00 00 00 0268*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441D7 00 00 00 00 0269*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441E7 00 00 00 00 0270*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0441F7 00 00 00 00 0271*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044207 00 00 00 00 0272*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044217 00 00 00 00 0273*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044227 00 00 00 00 0274*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044237 00 00 00 00 0275*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044247 00 00 00 00 0276*      db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044257             0277*  
044257             0050       include "player.inc"
044257             0001*  ; ######## GAME STATE VARIABLES #######
044257             0002*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
044257 00 00 00    0003*  player_score: dl 0 ; integer
04425A             0004*  ; player current shields,binary
04425A             0005*  ; when < 0 player splodes
04425A             0006*  ; restores to player_max_shields when new ship spawns
04425A 10 00 00    0007*  player_shields: dl 16 ; integer
04425D             0008*  ; max player shields,binary
04425D             0009*  ; can increase with power-ups (todo)
04425D 10 00 00    0010*  player_max_shields: dl 16 ; integer
044260             0011*  ; when reaches zero,game ends
044260             0012*  ; can increase based on TODO
044260 03          0013*  player_ships: db 3 ; integer
044261             0014*  
044261             0015*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
044261             0016*  
044261             0017*  ; ######### PLAYER SPRITE PARAMETERS ##########
044261             0018*  ; uses the same offsets from its table base as the main sprite table:
044261             0019*  player_start_variables: ; label marking beginning of table
044261 10          0020*  player_id:               db table_max_records
044262 00          0021*  player_type:             db     0x00 ; 1 bytes currently not used
044263 34 01 00    0022*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
044266 00 00 00    0023*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
044269 00          0024*  player_collisions:       db     0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
04426A 00          0025*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04426B 00          0026*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04426C 00 00 00    0027*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04426F 00 00 00    0028*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
044272 00 00 00    0029*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044275 00 00 00    0030*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044278 00 00 00    0031*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04427B 00 00 00    0032*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04427E 00 00 00    0033*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
044281 00          0034*  player_animation:        db     0x00 ; 1 bytes not currently used
044282 00          0035*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
044283 00          0036*  player_move_timer:       db     0x00 ; 1 bytes not currently used
044284 00          0037*  player_move_step:        db     0x00 ; 1 bytes not currently used
044285 00          0038*  player_points:           db     0x00 ; 1 bytes not currently used
044286 00          0039*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
044287             0040*  player_end_variables: ; for when we want to traverse this table in reverse
044287             0041*  
044287             0042*  ; set initial player position
044287             0043*  ; inputs: none,everything is hardcoded
044287             0044*  ; outputs: player_x/y set to bottom-left corner of screen
044287             0045*  ; destroys: a
044287             0046*  player_init:
044287 3A 61 42 04 0047*  	ld a,(player_id)
04428B CD 80 19 04 0048*  	call vdu_sprite_select
04428F CD 93 19 04 0049*      call vdu_sprite_clear_frames
044293 21 34 01 00 0050*      ld hl,BUF_SHIP_0L
044297 CD D5 1A 04 0051*      call vdu_sprite_add_buff
04429B 21 35 01 00 0052*      ld hl,BUF_SHIP_1C
04429F CD D5 1A 04 0053*      call vdu_sprite_add_buff
0442A3 21 36 01 00 0054*      ld hl,BUF_SHIP_2R
0442A7 CD D5 1A 04 0055*      call vdu_sprite_add_buff
0442AB 01 00 00 00 0056*      ld bc,0
0442AF ED 43 6C 42 0057*      ld (player_x),bc
       04          
0442B4 11 00 6F 01 0058*      ld de,sprite_bottom*256 ; max sprite y-coordinate
0442B8 ED 53 6F 42 0059*      ld (player_y),de
       04          
0442BD CD 4C 1A 04 0060*      call vdu_sprite_move_abs168
0442C1 CD F6 19 04 0061*      call vdu_sprite_show
0442C5 21 3A 48 04 0062*      ld hl,player_alive
0442C9 22 2C 48 04 0063*      ld (player_state),hl
0442CD 21 69 42 04 0064*      ld hl,player_collisions
0442D1 CB F6       0065*      set sprite_alive,(hl)
0442D3 C9          0066*      ret
0442D4             0067*  
0442D4             0068*  ; process player keyboard input, set player bitmap
0442D4             0069*  ; velocities and draw player bitmap at updated coordinates
0442D4             0070*  ; Inputs: player_x/y set at desired position
0442D4             0071*  ; Returns: player bitmap drawn at updated position
0442D4             0072*  ; Destroys: probably everything except maybe iy
0442D4             0073*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
0442D4             0074*  ; TODO: requires sprite implementation
0442D4             0075*  player_input:
0442D4             0076*  ; ; did we die last frame?
0442D4             0077*  ;     ld a,(player_collisions)
0442D4             0078*  ;     and %00000010 ; zero flag will be set if not dead
0442D4             0079*  ;     jr z,player_not_dead
0442D4             0080*  ; ; yes we died
0442D4             0081*  ;     call kill_player
0442D4             0082*  ;     ret ; done
0442D4             0083*  player_not_dead: ; yay we didn't die
0442D4             0084*  ; reset player component velocities to zero as the default
0442D4 21 00 00 00 0085*  	ld hl,0
0442D8 22 72 42 04 0086*  	ld (player_xvel),hl
0442DC 22 75 42 04 0087*  	ld (player_yvel),hl
0442E0             0088*  ; make ship the active sprite
0442E0 3A 61 42 04 0089*      ld a,(player_id)
0442E4 CD 80 19 04 0090*      call vdu_sprite_select
0442E8             0091*  ; check for keypresses and branch accordingly
0442E8             0092*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
0442E8             0093*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
0442E8 3E 1E       0001*M 			LD	A, function
0442EA 5B CF       0002*M 			RST.LIL	08h
0442EC             0094*  ; we test all four arrow keys and add/subract velocities accordingly
0442EC             0095*  ; this handles the case where two opposing movement keys
0442EC             0096*  ; are down simultaneously (velocities will net to zero)
0442EC             0097*  ; and allows diagonal movement when a vertical and horizontal key are down
0442EC             0098*  ; it also allows movement and action keys to be detected simultaneously
0442EC             0099*  ; so we can walk and chew gum at the same time
0442EC 3E 01       0100*      ld a,1 ; set ship's default animation to center
0442EE             0101*          ; if left and right are both down a will net to
0442EE             0102*  
0442EE             0103*  ; 99 Space: fire main weapon
0442EE DD CB 0C 56 0104*      bit 2,(ix+12)
0442F2 F5          0105*      push af ; save flags for after player movement processed
0442F3             0106*  ; 26 Left: move player left
0442F3 DD CB 03 4E 0107*      bit 1,(ix+3)
0442F7 CA 09 43 04 0108*      jp z,@F
0442FB 2A 72 42 04 0109*      ld hl,(player_xvel)
0442FF 01 00 FD FF 0110*      ld bc,-speed_player
044303 09          0111*      add hl,bc
044304 22 72 42 04 0112*      ld (player_xvel),hl
044308 3D          0113*      dec a ; set ship's animation to left
044309             0114*  @@:
044309             0115*  ; 122 Right: move player right
044309 DD CB 0F 4E 0116*      bit 1,(ix+15)
04430D CA 1F 43 04 0117*  	jp z,@F
044311 2A 72 42 04 0118*      ld hl,(player_xvel)
044315 01 00 03 00 0119*      ld bc,speed_player
044319 09          0120*      add hl,bc
04431A 22 72 42 04 0121*      ld (player_xvel),hl
04431E 3C          0122*      inc a ; set ship's animation to right
04431F             0123*  @@:
04431F             0124*  ; 58 Up: move player up
04431F DD CB 07 4E 0125*      bit 1,(ix+7)
044323 CA 34 43 04 0126*  	jp z,@F
044327 2A 75 42 04 0127*      ld hl,(player_yvel)
04432B 01 00 FD FF 0128*      ld bc,-speed_player
04432F 09          0129*      add hl,bc
044330 22 75 42 04 0130*      ld (player_yvel),hl
044334             0131*  @@:
044334             0132*  ; 42 Down: move player down
044334 DD CB 05 4E 0133*      bit 1,(ix+5)
044338 CA 49 43 04 0134*  	jp z,@F
04433C 2A 75 42 04 0135*      ld hl,(player_yvel)
044340 01 00 03 00 0136*      ld bc,speed_player
044344 09          0137*      add hl,bc
044345 22 75 42 04 0138*      ld (player_yvel),hl
044349             0139*  @@:
044349             0140*  ; a should land here loaded with the correct frame
044349 CD E3 19 04 0141*      call vdu_sprite_select_frame
04434D             0142*  ; draw player at updated position
04434D FD 21 61 42 0143*      ld iy,player_start_variables
       04          
044352 FD 22 F4 45 0144*      ld (table_pointer),iy
       04          
044357 CD A8 46 04 0145*      call move_sprite
04435B ED 4B 6C 42 0146*      ld bc,(player_x)
       04          
044360 ED 5B 6F 42 0147*      ld de,(player_y)
       04          
044365 CD 4C 1A 04 0148*  	call vdu_sprite_move_abs168
044369             0149*  ; process player laser fire
044369 F1          0150*      pop af ; restore flags from spacebar check
04436A C2 EF 30 04 0151*      jp nz,fire_laser ; will return to caller from there
04436E C9          0152*      ret
04436F             0153*  ; end player_input
04436F             0154*  
04436F             0155*  ; ###################################################################
04436F             0156*  ; TODO: the below is all stuff from the original code we need to port
04436F             0157*  ; ###################################################################
04436F             0158*  
04436F             0159*  kill_player:
04436F             0160*  ; ; set player status to dead
04436F             0161*  ;     xor a; sets all player flags to zero
04436F             0162*  ;     ld (player_collisions),a
04436F             0163*  ; ; deduct a ship from the inventory
04436F             0164*  ;     ld a,(player_ships)
04436F             0165*  ;     dec a
04436F             0166*  ;     ld (player_ships),a
04436F             0167*  ; ; are we out of ships?
04436F             0168*  ;     jp z,game_over
04436F             0169*  ; ; wait a few ticks
04436F             0170*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
04436F             0171*  ;     ld (player_move_timer),a
04436F             0172*  ; kill_player_loop:
04436F             0173*  ;     call vdu_vblank
04436F             0174*  ;     ld a,(player_move_timer)
04436F             0175*  ;     dec a
04436F             0176*  ;     ld (player_move_timer),a
04436F             0177*  ;     jr nz,kill_player_loop
04436F             0178*  ;     call player_init ; player respawn if timer zero
04436F C9          0179*      ret ; and out
044370             0180*  
044370             0181*  ; draws the player's shields level
044370             0182*  ; draw_shields:
044370             0183*  ; TODO: Agonize this routine
044370             0184*  ; ; prep the loop to draw the bars
044370             0185*  ;     ld a,(player_shields) ; snag shields
044370             0186*  ;     and a
044370             0187*  ;     ret z ; don't draw if zero shields
044370             0188*  ; ; set loop counter and drawing position
044370             0189*  ;     ld b,a ; loop counter
044370             0190*  ;     ld hl,#5300+48+12
044370             0191*  ; ; set color based on bars remaining
044370             0192*  ;     ld c,103 ; bright green 28fe0a
044370             0193*  ;     cp 9
044370             0194*  ;     jp p,draw_shields_loop
044370             0195*  ;     ld c,74 ; bright yellow eafe5b
044370             0196*  ;     cp 3
044370             0197*  ;     jp p,draw_shields_loop
044370             0198*  ;     ld c,28 ; bright red fe0a0a
044370             0199*  ; draw_shields_loop:
044370             0200*  ;     push bc ; yup,outta
044370             0201*  ;     push hl ; registers again
044370             0202*  ;     ; ld a,#A8 ; ▀,168
044370             0203*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
044370             0204*  ;     ; call draw_char
044370             0205*  ;     call draw_num ; we nuked draw_char for the time being
044370             0206*  ;     pop hl
044370             0207*  ;     ld a,8
044370             0208*  ;     add a,l
044370             0209*  ;     ld l,a
044370             0210*  ;     pop bc
044370             0211*  ;     djnz draw_shields_loop
044370             0212*      ; ret
044370             0213*  
044370             0214*  score_x: equ 0
044370             0215*  score_y: equ 1
044370             0216*  ; prints the player's score
044370             0217*  print_score:
044370             0218*  ; DEBUG
044370 0E 00       0219*      ld c,score_x
044372 06 00       0220*      ld b,score_y-1
044374 CD 82 14 04 0221*      call vdu_move_cursor
044378 CD 70 00 04 0222*      call printInline
04437C 53 63 6F 72 0223*      asciz "Score:"
       65 3A 00    
044383             0224*  ; END DEBUG
044383 0E 00       0225*      ld c,score_x
044385 06 01       0226*      ld b,score_y
044387 CD 82 14 04 0227*      call vdu_move_cursor
04438B 2A 57 42 04 0228*      ld hl,(player_score)
04438F CD 76 01 04 0229*      call printDec
044393 C9          0230*      ret
044394             0231*  
044394             0232*  ; draw_lives:
044394             0233*  ;     ld hl,player_small ; make small yellow ship the active sprite
044394             0234*  ;     ld (sprite_base_bufferId),hl
044394             0235*  ;     ; ld a,#80 ; northern orientation
044394             0236*  ;     ; ld (sprite_orientation),a
044394             0237*  ;     ld hl,0 ; north
044394             0238*  ;     ld (sprite_heading),hl
044394             0239*  ;     xor a
044394             0240*  ;     ld (sprite_animation),a
044394             0241*  ;     ld a,#56 ; top of visible screen
044394             0242*  ;     ld (sprite_y+1),a
044394             0243*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
044394             0244*  ;     ld a,(player_ships)
044394             0245*  ;     dec a ; we draw one fewer ships than lives
044394             0246*  ;     ret z ; nothing to draw here, move along
044394             0247*  ;     ld b,a ; loop counter
044394             0248*  ;     ld a,256-16 ; initial x position
044394             0249*  ; draw_lives_loop:
044394             0250*  ;     ld (sprite_x+1),a
044394             0251*  ;     push af
044394             0252*  ;     push bc
044394             0253*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
044394             0254*  ;     pop bc
044394             0255*  ;     pop af
044394             0256*  ;     sub 10
044394             0257*  ;     djnz draw_lives_loop
044394             0258*  ;     ret
044394             0051       include "sprites.inc"
044394             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
044394             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
044394             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
044394             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
044394             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
044394             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
044394             0007*  sprite_collisions:      equ 08 ; 1 bytes see collisions.inc constants for bit definitions
044394             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
044394             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
044394             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
044394             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
044394             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044394             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044394             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
044394             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
044394             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
044394             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
044394             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
044394             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
044394             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
044394             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type
044394             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision
044394             0023*  
044394             0024*  ; ###### SPRITE TABLE VARIABLES ######
044394             0025*  ; maximum number of sprites
044394             0026*  table_max_records: equ 16 ; it can handle more but this is pushing it
044394             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
044394             0028*  
044394             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
044394             0030*  table_base:
044394 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0445F4             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
0445F4             0033*  
0445F4             0034*  ; pointer to top address of current record, initialized to table_base
0445F4 94 43 04    0035*  table_pointer: dl table_base
0445F7             0036*  ; how many active sprites
0445F7 00          0037*  table_active_sprites: db 0x00
0445F8             0038*  ; flag indicating collision with screen edge
0445F8             0039*  ; uses orientation codes to specify which edge(s)
0445F8 00          0040*  sprite_screen_edge: db #00
0445F9             0041*  ; next sprite id to use
0445F9 00          0042*  sprite_next_id: db 0
0445FA             0043*  
0445FA             0044*  ; origin_top: equ 48
0445FA             0045*  origin_top: equ 0 ; DEBUG
0445FA             0046*  origin_left: equ 128
0445FA             0047*  field_top: equ 0
0445FA             0048*  field_bottom: equ 383-origin_top
0445FA             0049*  field_left: equ 0
0445FA             0050*  field_right: equ 255
0445FA             0051*  sprite_top: equ 0
0445FA             0052*  sprite_bottom: equ field_bottom-16
0445FA             0053*  sprite_left: equ field_left
0445FA             0054*  sprite_right: equ field_right-16
0445FA             0055*  
0445FA             0056*  ; ######### COLLISION SPRITE PARAMETERS ##########
0445FA             0057*  ; integer coordinates are all that are needed for collision calculations
0445FA 00          0058*  collision_x: db 0x00
0445FB 00          0059*  collision_y: db 0x00
0445FC 00          0060*  collision_dim_x: db 0x00
0445FD 00          0061*  collision_dim_y: db 0x00
0445FE             0062*  
0445FE             0063*  ; scratch variables
0445FE 00          0064*  x: db 0x00 ; 8-bit signed integer
0445FF 00          0065*  y: db 0x00 ; 8-bit signed integer
044600 00 00 00    0066*  x0: dl 0x000000 ; 16.8 signed fixed place
044603 00 00 00    0067*  y0: dl 0x000000 ; 16.8 signed fixed place
044606 00 00 00    0068*  incx1: dl 0x000000 ; 16.8 signed fixed place
044609 00 00 00    0069*  incy1: dl 0x000000 ; 16.8 signed fixed place
04460C 00 00 00    0070*  incx2: dl 0x000000 ; 16.8 signed fixed place
04460F 00 00 00    0071*  incy2: dl 0x000000 ; 16.8 signed fixed place
044612             0072*  
044612             0073*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
044612 00 00 00    0074*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
044615 00 00 00    0075*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
044618 00 00 00    0076*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04461B             0077*  
04461B             0078*  ; gets the next available sprite id
04461B             0079*  ; inputs; none
04461B             0080*  ; returns: if new sprite available, a = sprite id,
04461B             0081*  ;           ix pointing to new sprite vars, carry set
04461B             0082*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04461B             0083*  ; destroys: a,b,hl,ix
04461B             0084*  ; affects: bumps table_active_sprites by one
04461B             0085*  table_get_next_id:
04461B DD 21 94 43 0086*      ld ix,table_base
       04          
044620 11 26 00 00 0087*      ld de,table_bytes_per_record
044624 06 10       0088*      ld b,table_max_records
044626             0089*  @loop:
044626 DD 7E 01    0090*      ld a,(ix+sprite_type)
044629 A7          0091*      and a
04462A 28 06       0092*      jr z,@found
04462C DD 19       0093*      add ix,de
04462E 10 F6       0094*      djnz @loop
044630             0095*  @notfound:
044630 AF          0096*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
044631 C9          0097*      ret
044632             0098*  @found:
044632             0099*  ; bump number of active sprites
044632 21 F7 45 04 0100*      ld hl,table_active_sprites
044636 34          0101*      inc (hl)
044637             0102*  ; return sprite id
044637 3E 10       0103*      ld a,table_max_records
044639 90          0104*      sub b
04463A 32 F9 45 04 0105*      ld (sprite_next_id),a
04463E 37          0106*      scf ; sets carry flag indicating we found a free sprite
04463F C9          0107*      ret ; done
044640             0108*  ; end table_get_next_id
044640             0109*  
044640             0110*  ; deactivate the sprite with the given id
044640             0111*  ; inputs: iy set to sprite record, vdu_sprite_select called
044640             0112*  ; outputs: nothing
044640             0113*  ; destroys: a,hl
044640             0114*  ; affects: decrements table_active_sprites by one
044640             0115*  table_deactivate_sprite:
044640 CD 04 1A 04 0116*      call vdu_sprite_hide
044644 AF          0117*      xor a
044645 FD 77 01    0118*      ld (iy+sprite_type),a
044648 21 F7 45 04 0119*      ld hl,table_active_sprites
04464C 35          0120*      dec (hl)
04464D C9          0121*      ret
04464E             0122*  ; end table_deactivate_sprite
04464E             0123*  
04464E             0124*  sprites_init:
04464E             0125*  ; initialize sprites
04464E CD B4 1A 04 0126*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
044652 AF          0127*  	xor a
044653             0128*  @sprite_loop:
044653 F5          0129*  	push af
044654 CD 80 19 04 0130*  	call vdu_sprite_select
044658 21 00 01 00 0131*  	ld hl,BUF_0TILE_EMPTY ; can be anything, but why not blank?
04465C CD D5 1A 04 0132*  	call vdu_sprite_add_buff
044660 F1          0133*  	pop af
044661 3C          0134*  	inc a
044662 FE 12       0135*  	cp table_max_records+2 ; tack on sprites for player and laser
044664 20 ED       0136*  	jr nz,@sprite_loop
044666 3C          0137*  	inc a
044667 CD B4 19 04 0138*  	call vdu_sprite_activate
04466B             0139*  
04466B             0140*  ; define player sprite
04466B 3A 61 42 04 0141*  	ld a,(player_id)
04466F CD 80 19 04 0142*  	call vdu_sprite_select
044673 CD 93 19 04 0143*  	call vdu_sprite_clear_frames
044677 21 34 01 00 0144*  	ld hl,BUF_SHIP_0L
04467B 01 03 00 00 0145*  	ld bc,3 ; three bitmaps for player ship
04467F             0146*  @sprite_player_loop:
04467F C5          0147*  	push bc
044680 E5          0148*  	push hl
044681 CD D5 1A 04 0149*  	call vdu_sprite_add_buff
044685 E1          0150*  	pop hl
044686 23          0151*  	inc hl
044687 C1          0152*  	pop bc
044688 10 F5       0153*  	djnz @sprite_player_loop
04468A             0154*  
04468A             0155*  ; define laser sprite
04468A 3A 86 30 04 0156*  	ld a,(laser_id)
04468E CD 80 19 04 0157*  	call vdu_sprite_select
044692 CD 93 19 04 0158*  	call vdu_sprite_clear_frames
044696 21 11 01 00 0159*  	ld hl,BUF_LASER_A
04469A 06 02       0160*  	ld b,2 ; two bitmaps for laser
04469C             0161*  @sprite_laser_loop:
04469C C5          0162*  	push bc
04469D E5          0163*  	push hl
04469E CD D5 1A 04 0164*  	call vdu_sprite_add_buff
0446A2 E1          0165*  	pop hl
0446A3 23          0166*  	inc hl
0446A4 C1          0167*  	pop bc
0446A5 10 F5       0168*  	djnz @sprite_laser_loop
0446A7             0169*  ; all done
0446A7 C9          0170*      ret
0446A8             0171*  ; end sprites_init
0446A8             0172*  
0446A8             0173*  ; compute a sprite's new position based on its component x,y velocities
0446A8             0174*  ; with screen boundary checking and update its sprite table record accordingly
0446A8             0175*  ; inputs: table_pointer set to sprite record
0446A8             0176*  ; returns: updated x, y positions and edge collision flags in sprite table record
0446A8             0177*  ; destroys: everything
0446A8             0178*  ; note: actual rendering of sprite must be handled by caller
0446A8             0179*  move_sprite:
0446A8 FD 2A F4 45 0180*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0446AD             0181*  ; x-axis movement
0446AD FD 27 0B    0182*      ld hl,(iy+sprite_x)
0446B0 FD 17 11    0183*      ld de,(iy+sprite_xvel)
0446B3 19          0184*      add hl,de
0446B4 FD 2F 0B    0185*      ld (iy+sprite_x),hl
0446B7             0186*  ; y-axis movement
0446B7 FD 27 0E    0187*      ld hl,(iy+sprite_y)
0446BA FD 17 14    0188*      ld de,(iy+sprite_yvel)
0446BD 19          0189*      add hl,de
0446BE FD 2F 0E    0190*      ld (iy+sprite_y),hl
0446C1             0191*  ; detect screen edge collisions
0446C1 AF          0192*      xor a ; reset screen edge collision flag and clear carry
0446C2 32 F8 45 04 0193*      ld (sprite_screen_edge),a
0446C6             0194*  ; y-axis first since we already have it in hl
0446C6 11 00 00 00 0195*      ld de,-sprite_top*256
0446CA ED 5A       0196*      adc hl,de
0446CC FA F6 46 04 0197*      jp m,@top
0446D0 ED 52       0198*      sbc hl,de ; hl back to original value
0446D2 11 00 91 FE 0199*      ld de,-sprite_bottom*256
0446D6 ED 5A       0200*      adc hl,de
0446D8 F2 00 47 04 0201*      jp p,@bottom
0446DC             0202*  @xaxis:
0446DC FD 27 0B    0203*      ld hl,(iy+sprite_x)
0446DF 11 00 00 00 0204*      ld de,-sprite_left*256
0446E3 ED 5A       0205*      adc hl,de
0446E5 FA 1B 47 04 0206*      jp m,@left
0446E9 ED 52       0207*      sbc hl,de ; hl back to original value
0446EB 11 00 11 FF 0208*      ld de,-sprite_right*256
0446EF ED 5A       0209*      adc hl,de
0446F1 F2 29 47 04 0210*      jp p,@right
0446F5             0211*  ; no edge collisions so go home
0446F5 C9          0212*      ret
0446F6             0213*  @top:
0446F6 3E 08       0214*      ld a,collide_top
0446F8 21 00 00 00 0215*      ld hl,sprite_top*256
0446FC C3 06 47 04 0216*      jp @collide_y
044700             0217*  @bottom:
044700 3E 04       0218*      ld a,collide_bottom
044702 21 00 6F 01 0219*      ld hl,sprite_bottom*256
044706             0220*  @collide_y:
044706 32 F8 45 04 0221*      ld (sprite_screen_edge),a
04470A FD 2F 0E    0222*      ld (iy+sprite_y),hl
04470D             0223*  ; reverse y-axis velocity
04470D FD 27 14    0224*      ld hl,(iy+sprite_yvel)
044710 CD A4 06 04 0225*      call neg_hlu
044714 FD 2F 14    0226*      ld (iy+sprite_yvel),hl
044717             0227*  ; go check for x-axis collisions
044717 C3 DC 46 04 0228*      jp @xaxis
04471B             0229*  @left:
04471B 3A F8 45 04 0230*      ld a,(sprite_screen_edge)
04471F F6 02       0231*      or a,collide_left
044721 21 00 00 00 0232*      ld hl,sprite_left*256
044725 C3 33 47 04 0233*      jp @collide_x
044729             0234*  @right:
044729 3A F8 45 04 0235*      ld a,(sprite_screen_edge)
04472D F6 01       0236*      or a,collide_right
04472F 21 00 EF 00 0237*      ld hl,sprite_right*256
044733             0238*  @collide_x:
044733 32 F8 45 04 0239*      ld (sprite_screen_edge),a
044737 FD 2F 0B    0240*      ld (iy+sprite_x),hl
04473A             0241*  ; reverse x-axis velocity
04473A FD 27 11    0242*      ld hl,(iy+sprite_xvel)
04473D CD A4 06 04 0243*      call neg_hlu
044741 FD 2F 11    0244*      ld (iy+sprite_xvel),hl
044744             0245*  ; final collision flag to a and return
044744 3A F8 45 04 0246*      ld a,(sprite_screen_edge)
044748 C9          0247*      ret
044749             0248*  ; end move_sprite
044749             0249*  
044749             0250*  sprite_compute_velocities:
044749 FD 2A F4 45 0251*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
04474E FD 17 17    0252*      ld de,(iy+sprite_vel)
044751 CD 52 09 04 0253*      call polar_to_cartesian
044755 FD 2A F4 45 0254*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
04475A FD 0F 11    0255*      ld (iy+sprite_xvel),bc ; save x-velocity component
04475D FD 1F 14    0256*      ld (iy+sprite_yvel),de ; save y-velocity component
044760 C9          0257*      ret
044761             0258*  ; end sprite_compute_velocities
044761             0052       include "state.inc"
044761             0001*  ; Game state variables
044761 6F 47 04    0002*  game_state:  dl game_main_menu
044764             0003*  
044764             0004*  do_game:
044764 2A 61 47 04 0005*      ld hl,(game_state)   ; Load the current game state
044768             0006*      callHL                ; Call the corresponding state handler
044768 01 6E 47 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04476C C5          0002*M     push bc ; which constitutes the return address
04476D E9          0003*M     jp (hl) ; Jump to the address in HL
04476E             0004*M @@:
04476E C9          0007*      ret
04476F             0008*  
04476F             0009*  ; ========================
04476F             0010*  ; Main Game States
04476F             0011*  ; ========================
04476F             0012*  
04476F             0013*  game_main_menu:
04476F             0014*      ; Handle main menu options
04476F             0015*      ; Example: Check input for "Start Game"
04476F CD 9C 48 04 0016*      call check_input_menu
044773 C2 78 47 04 0017*      jp nz, game_initialize ; Start game on selection
044777 C9          0018*      ret
044778             0019*  
044778             0020*  game_initialize:
044778             0021*  ; reset the sprite table
044778 AF          0022*      xor a
044779 32 F7 45 04 0023*      ld (table_active_sprites),a
04477D 21 94 43 04 0024*      ld hl,table_base
044781 22 F4 45 04 0025*      ld (table_pointer),hl
044785             0026*  ; initialize sprites
044785 CD 4E 46 04 0027*      call sprites_init
044789             0028*  ; initialize the first level
044789 AF          0029*      xor a
04478A 32 AD 48 04 0030*      ld (cur_level),a
04478E CD AD 49 04 0031*      call init_level
044792             0032*  ; initialize player
044792 21 00 00 00 0033*      ld hl,0
044796 22 57 42 04 0034*      ld (player_score),hl
04479A 2A 5D 42 04 0035*      ld hl,(player_max_shields)
04479E 22 5A 42 04 0036*      ld (player_shields),hl
0447A2 3E 03       0037*      ld a,3
0447A4 32 60 42 04 0038*      ld (player_ships),a
0447A8 CD 87 42 04 0039*      call player_init
0447AC             0040*  ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
0447AC 21 56 48 04 0041*      ld hl,enemies_dead
0447B0 22 53 48 04 0042*      ld (enemies_state),hl
0447B4             0043*  ; END TODO
0447B4             0044*  ; set the game state to playing
0447B4 21 BE 47 04 0045*      ld hl,game_playing
0447B8 22 61 47 04 0046*      ld (game_state), hl
0447BC C9          0047*      ret
0447BD             0048*  ; done initializing
0447BD C9          0049*      ret
0447BE             0050*  
0447BE             0051*  game_playing:
0447BE             0052*  ; Main gameplay loop
0447BE CD F8 48 04 0053*      call tiles_plot
0447C2 CD 2F 48 04 0054*      call do_player
0447C6 CD 48 48 04 0055*      call do_enemies
0447CA             0056*  ; update UI: TODO make this a standalone function
0447CA CD 70 43 04 0057*      call print_score
0447CE C9          0058*      ret
0447CF             0059*  
0447CF             0060*  game_paused:
0447CF             0061*      ; Pause menu logic
0447CF CD 9F 48 04 0062*      call check_input_pause
0447D3 C2 BE 47 04 0063*      jp nz, game_playing ; Resume game
0447D7 CA 6F 47 04 0064*      jp z, game_main_menu ; Exit to main menu
0447DB C9          0065*      ret
0447DC             0066*  
0447DC             0067*  game_level_transition:
0447DC             0068*      ; Handle level transitions
0447DC CD A0 48 04 0069*      call load_next_level
0447E0 21 BE 47 04 0070*      ld hl, game_playing
0447E4 22 61 47 04 0071*      ld (game_state), hl
0447E8 C9          0072*      ret
0447E9             0073*  
0447E9             0074*  game_over:
0447E9             0075*      ; Display game over screen
0447E9 CD A1 48 04 0076*      call display_game_over
0447ED C2 6F 47 04 0077*      jp nz, game_main_menu ; Return to main menu on input
0447F1 C9          0078*      ret
0447F2             0079*  
0447F2             0080*  game_victory:
0447F2             0081*      ; Display victory screen
0447F2 CD A2 48 04 0082*      call display_victory
0447F6 C2 6F 47 04 0083*      jp nz, game_main_menu ; Return to main menu on input
0447FA C9          0084*      ret
0447FB             0085*  
0447FB             0086*  ; ========================
0447FB             0087*  ; Supporting States
0447FB             0088*  ; ========================
0447FB             0089*  
0447FB             0090*  game_loading:
0447FB             0091*      ; Show loading screen while preparing assets
0447FB CD A3 48 04 0092*      call load_resources
0447FF 21 78 47 04 0093*      ld hl, game_initialize
044803 22 61 47 04 0094*      ld (game_state), hl
044807 C9          0095*      ret
044808             0096*  
044808             0097*  game_cutscene:
044808             0098*      ; Play a non-interactive cutscene
044808 CD A4 48 04 0099*      call play_cutscene
04480C C2 BE 47 04 0100*      jp nz, game_playing ; Return to gameplay after cutscene
044810 C9          0101*      ret
044811             0102*  
044811             0103*  game_inventory:
044811             0104*      ; Open inventory or shop
044811 CD A5 48 04 0105*      call display_inventory
044815 C2 BE 47 04 0106*      jp nz, game_playing ; Return to gameplay after inventory close
044819 C9          0107*      ret
04481A             0108*  
04481A             0109*  game_map:
04481A             0110*      ; Display map or quest
04481A CD A6 48 04 0111*      call display_map
04481E C2 BE 47 04 0112*      jp nz, game_playing ; Return to gameplay after map close
044822 C9          0113*      ret
044823             0114*  
044823             0115*  game_exit:
044823             0116*      ; Handle exit logic
044823 CD A7 48 04 0117*      call save_game
044827 C3 A8 48 04 0118*      jp exit_game         ; Safely shut down
04482B C9          0119*      ret
04482C             0120*  
04482C             0121*  ; ========================
04482C             0122*  ; Sub-state branching (Example for player state)
04482C             0123*  ; ========================
04482C             0124*  
04482C 3A 48 04    0125*  player_state:  dl player_alive ; Player state variable
04482F             0126*  
04482F             0127*  do_player:
04482F 2A 2C 48 04 0128*      ld hl,(player_state)
044833             0129*      callHL                ; Call the corresponding player state
044833 01 39 48 04 0001*M     ld bc,@F ; Address of first instruction after the jump
044837 C5          0002*M     push bc ; which constitutes the return address
044838 E9          0003*M     jp (hl) ; Jump to the address in HL
044839             0004*M @@:
044839 C9          0130*      ret
04483A             0131*  
04483A             0132*  player_alive:
04483A CD D4 42 04 0133*      call player_input     ; Handle player input
04483E CD AC 30 04 0134*      call laser_control    ; Handle laser movement and collision detection
044842 C9          0135*      ret
044843             0136*  
044843             0137*  player_dead:
044843 CD AC 30 04 0138*      call laser_control    ; Handle laser movement and collision detection
044847 C9          0139*      ret
044848             0140*  
044848             0141*  do_enemies:
044848 2A 53 48 04 0142*      ld hl, (enemies_state)
04484C             0143*      callHL
04484C 01 52 48 04 0001*M     ld bc,@F ; Address of first instruction after the jump
044850 C5          0002*M     push bc ; which constitutes the return address
044851 E9          0003*M     jp (hl) ; Jump to the address in HL
044852             0004*M @@:
044852 C9          0144*      ret
044853 56 48 04    0145*  enemies_state: dl enemies_dead
044856             0146*  enemies_dead:
044856 FD 21 7B 48 0147*      ld iy,enemies_respawn_tmr
       04          
04485B 21 F0 00 00 0148*      ld hl,120*2 ; 120ths of a second
04485F CD EF 13 04 0149*      call timestamp_tmr_set
044863 21 6C 48 04 0150*      ld hl,enemies_respawning
044867 22 53 48 04 0151*      ld (enemies_state),hl
04486B C9          0152*      ret
04486C             0153*  
04486C             0154*  ; DEBUG: FOR TESTING UNTIL WE PROPERLY IMPLEMENT MAP LOGIC
04486C             0155*  enemies_respawning:
04486C FD 21 7B 48 0156*      ld iy,enemies_respawn_tmr
       04          
044871 CD FA 13 04 0157*      call timestamp_tmr_get
044875 F0          0158*      ret p ; not time to respawn yet
044876 CD 81 48 04 0159*      call enemies_respawn
04487A C9          0160*      ret
04487B             0161*  enemies_respawn_tmr: ds 6
044881             0162*  
044881             0163*  enemies_respawn:
044881             0164*  ; initialize enemy sprites
044881 3A 1C 1B 04 0165*      ld a,(max_enemy_sprites)
044885 47          0166*      ld b,a ; loop counter
044886             0167*  @respawn_loop:
044886 C5          0168*      push bc
044887 CD 2E 1C 04 0169*      call enemy_init_from_landing_pad
04488B C1          0170*      pop bc
04488C 10 F8       0171*      djnz @respawn_loop
04488E 21 97 48 04 0172*      ld hl,enemies_alive
044892 22 53 48 04 0173*      ld (enemies_state),hl
044896 C9          0174*      ret
044897             0175*  ; END DEBUG
044897             0176*  
044897             0177*  enemies_alive:
044897 CD 1D 1B 04 0178*      call move_enemies
04489B C9          0179*      ret
04489C             0180*  
04489C             0181*  check_input_menu:
04489C C9          0182*      ret
04489D             0183*  
04489D             0184*  update_game_world:
04489D C9          0185*      ret
04489E             0186*  
04489E             0187*  check_game_events:
04489E C9          0188*      ret
04489F             0189*  
04489F             0190*  check_input_pause:
04489F C9          0191*      ret
0448A0             0192*  
0448A0             0193*  load_next_level:
0448A0 C9          0194*      ret
0448A1             0195*  
0448A1             0196*  display_game_over:
0448A1 C9          0197*      ret
0448A2             0198*  
0448A2             0199*  display_victory:
0448A2 C9          0200*      ret
0448A3             0201*  
0448A3             0202*  load_resources:
0448A3 C9          0203*      ret
0448A4             0204*  
0448A4             0205*  play_cutscene:
0448A4 C9          0206*      ret
0448A5             0207*  
0448A5             0208*  display_inventory:
0448A5 C9          0209*      ret
0448A6             0210*  
0448A6             0211*  display_map:
0448A6 C9          0212*      ret
0448A7             0213*  
0448A7             0214*  save_game:
0448A7 C9          0215*      ret
0448A8             0216*  
0448A8             0217*  exit_game:
0448A8 C9          0218*      ret
0448A9             0219*  
0448A9             0053       include "tiles.inc"
0448A9             0001*  ; ######### TILES #########
0448A9             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
0448A9             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
0448A9 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
0448AC 00          0005*  tiles_row: db 0 ; decrements each time a row is drawn. level is over when hits zero
0448AD             0006*      ; initialize to zero for a maximum of 256 rows in a level
0448AD 00          0007*  cur_level: db 0
0448AE             0008*  num_levels: equ 2 ; number of levels,duh
0448AE             0009*  
0448AE             0010*  ; lookup table for level definitions
0448AE 55 31 04 56 0011*  tiles_levels: dl tiles_level_00,tiles_level_01
       41 04       
0448B4             0012*  
0448B4             0013*  ; tiles_bufferId: dl 0
0448B4 00 00 00    0014*  tiles_x_plot: dl 0
0448B7 F1 FF FF    0015*  tiles_y_plot: dl -15
0448BA             0016*  
0448BA FF FF FF    0017*  bg_y_plot: dl -1
0448BD 39 01 00    0018*  bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
0448C0             0019*  
0448C0             0020*  bg_plot:
0448C0             0021*  ; load current bg tile bufferId as default
0448C0 2A BD 48 04 0022*      ld hl,(bg_bufferId)
0448C4             0023*  ; check whether it is time for a new background tile
0448C4 3A BA 48 04 0024*      ld a,(bg_y_plot)
0448C8 3C          0025*      inc a
0448C9 32 BA 48 04 0026*      ld (bg_y_plot),a
0448CD C2 E5 48 04 0027*      jp nz,@F ; not time for a new tile so draw current one
0448D1             0028*  ; load the next background tile
0448D1 21 39 01 00 0029*      ld hl,BUF_STATION_BG_00
0448D5 CD 49 07 04 0030*      call rand_8
0448D9 E6 03       0031*      and %0000011
0448DB 85          0032*      add a,l
0448DC 6F          0033*      ld l,a
0448DD 3E 00       0034*      ld a,0
0448DF 8C          0035*      adc a,h
0448E0 67          0036*      ld h,a
0448E1 22 BD 48 04 0037*      ld (bg_bufferId),hl
0448E5             0038*  @@:
0448E5 CD 83 15 04 0039*      call vdu_buff_select
0448E9 01 00 00 00 0040*      ld bc,0
0448ED ED 5B BA 48 0041*      ld de,(bg_y_plot)
       04          
0448F2 13          0042*      inc de
0448F3 CD DF 18 04 0043*      call vdu_plot_bmp
0448F7             0044*  ; all done
0448F7 C9          0045*      ret
0448F8             0046*  
0448F8             0047*  ; xevious_plot:
0448F8             0048*  ; ; load current bg tile bufferId as default
0448F8             0049*  ;     ld hl,(bg_bufferId)
0448F8             0050*  ; ; check whether it is time for a new background tile
0448F8             0051*  ;     ld a,(bg_y_plot)
0448F8             0052*  ;     inc a
0448F8             0053*  ;     ld (bg_y_plot),a
0448F8             0054*  ;     jp nz,@F ; not time for a new tile so draw current one
0448F8             0055*  ; ; load the next background tile
0448F8             0056*  ;     ld hl,Xevious_tile
0448F8             0057*  ;     inc (hl)
0448F8             0058*  ;     ld a,%00011111 ; 31
0448F8             0059*  ;     and (hl)
0448F8             0060*  ;     ld hl,BUF_XEVIOUS_00
0448F8             0061*  ;     add a,l
0448F8             0062*  ;     ld l,a
0448F8             0063*  ;     ld a,0
0448F8             0064*  ;     adc a,h
0448F8             0065*  ;     ld h,a
0448F8             0066*  ;     ld (bg_bufferId),hl
0448F8             0067*  ; @@:
0448F8             0068*  ;     call vdu_buff_select
0448F8             0069*  ;     ld bc,0
0448F8             0070*  ;     ld de,(bg_y_plot)
0448F8             0071*  ;     inc de
0448F8             0072*  ;     call vdu_plot_bmp
0448F8             0073*  ; ; all done
0448F8             0074*  ;     ret
0448F8             0075*  ; Xevious_tile: db 0
0448F8             0076*  
0448F8             0077*  tiles_plot:
0448F8             0078*  ; set gfx viewport to playing field window
0448F8 01 00 00 00 0079*      ld bc,field_left
0448FC 11 00 00 00 0080*      ld de,field_top
044900 DD 21 FF 00 0081*      ld ix,field_right
       00          
044905 FD 21 7F 01 0082*      ld iy,field_bottom
       00          
04490A CD 36 15 04 0083*      call vdu_set_gfx_viewport
04490E             0084*  ; move the background down one pixel
04490E 3E 02       0085*      ld a,2 ; current gfx viewport
044910 2E 02       0086*      ld l,2 ; direction=down
044912 26 01       0087*      ld h,1 ; speed=1 px
044914 CD AE 14 04 0088*      call vdu_scroll_down
044918             0089*  ; set gfx viewport to one scanline to optimise plotting tiles
044918 01 00 00 00 0090*      ld bc,0 ; leftmost x-coord
04491C 11 00 00 00 0091*      ld de,0 ; topmost y-coord
044920 DD 21 FF 00 0092*      ld ix,255 ; rightmost x-coord
       00          
044925 FD 21 00 00 0093*      ld iy,0 ; bottommost y-coord
       00          
04492A CD 36 15 04 0094*      call vdu_set_gfx_viewport
04492E             0095*  ; plot the background
04492E CD C0 48 04 0096*      call bg_plot
044932             0097*      ; call xevious_plot
044932             0098*      ; ret ; DEBUG
044932             0099*  ; initialize tiles loop
044932 21 00 00 00 0100*      ld hl,0 ; init plotting x-coordinate
044936 22 B4 48 04 0101*      ld (tiles_x_plot),hl
04493A 2A A9 48 04 0102*      ld hl,(tiles_row_defs)
04493E 06 10       0103*      ld b,16 ; loop counter
044940             0104*  @loop:
044940 C5          0105*      push bc ; save the loop counter
044941             0106*  ; read the tile defintion for the current column
044941 7E          0107*      ld a,(hl) ; a has tile definition
044942 E5          0108*      push hl ; save pointer to tile definition
044943 21 00 00 00 0109*      ld hl,0 ; hlu is non-zero
044947 6F          0110*      ld l,a ; l is tile defintion
044948 26 01       0111*      ld h,0x01 ; hl = 256 + tile index = the tile's bitmapId
04494A CD 83 15 04 0112*      call vdu_buff_select ; tile bitmap buffer is now active
04494E             0113*  ; plot the active bitmap
04494E ED 4B B4 48 0114*      ld bc,(tiles_x_plot)
       04          
044953 ED 5B B7 48 0115*      ld de,(tiles_y_plot)
       04          
044958 CD DF 18 04 0116*      call vdu_plot_bmp
04495C             0117*  ; bump x-coords the width of one tile and save it
04495C 2A B4 48 04 0118*      ld hl,(tiles_x_plot)
044960 01 10 00 00 0119*      ld bc,16
044964 09          0120*      add hl,bc
044965 22 B4 48 04 0121*      ld (tiles_x_plot),hl
044969             0122*  ; prepare to loop to next column
044969 E1          0123*      pop hl ; get back pointer to tile def
04496A 23          0124*      inc hl ; bump it to the next column
04496B C1          0125*      pop bc ; snag our loop counter
04496C 10 D2       0126*      djnz @loop
04496E             0127*  ; increment tiles plotting y-coordinate
04496E             0128*  ; when it hits zero, we go to next row of tiles in the map
04496E             0129*  ; (we use ix b/c we want to preserve hl for the next step)
04496E DD 21 B7 48 0130*      ld ix,tiles_y_plot
       04          
044973 DD 34 00    0131*      inc (ix)
044976 C0          0132*      ret nz
044977             0133*  ; time to bump tiles_row_defs to next row
044977             0134*  ; (hl was already there at the end of the loop)
044977 22 A9 48 04 0135*      ld (tiles_row_defs),hl
04497B             0136*  ; reset coords to plot next row of tiles
04497B 21 00 00 00 0137*      ld hl,0
04497F 22 B4 48 04 0138*      ld (tiles_x_plot),hl
044983 21 F1 FF FF 0139*      ld hl,-15
044987 22 B7 48 04 0140*      ld (tiles_y_plot),hl
04498B             0141*  ; decrement tiles row counter
04498B 21 AC 48 04 0142*      ld hl,tiles_row
04498F 35          0143*      dec (hl)
044990 C0          0144*      ret nz
044991             0145*  ; queue up next level
044991 3A AD 48 04 0146*      ld a,(cur_level)
044995 FE 01       0147*      cp num_levels-1
044997 20 02       0148*      jr nz,@inc_level
044999 3E FF       0149*      ld a,-1 ; will wrap around to zero when we fall through
04499B             0150*  @inc_level:
04499B 3C          0151*      inc a
04499C 32 AD 48 04 0152*      ld (cur_level),a
0449A0             0153*  ; increase the number of enemy sprites
0449A0 3A 1C 1B 04 0154*      ld a,(max_enemy_sprites)
0449A4 3C          0155*      inc a
0449A5 FE 10       0156*      cp table_max_records ; if we're at the global limit,skip ahead at max level
0449A7 28 04       0157*      jr z,init_level
0449A9 32 1C 1B 04 0158*      ld (max_enemy_sprites),a ; otherwise save the updated number
0449AD             0159*  ; fall through to init_level
0449AD             0160*  
0449AD             0161*  init_level:
0449AD             0162*  ; look up address of level's tile defintion
0449AD 21 AE 48 04 0163*      ld hl,tiles_levels
0449B1 3A AD 48 04 0164*      ld a,(cur_level)
0449B5 11 00 00 00 0165*      ld de,0 ; just in case deu is non-zero
0449B9 57          0166*      ld d,a
0449BA 1E 03       0167*      ld e,3
0449BC ED 5C       0168*      mlt de
0449BE 19          0169*      add hl,de
0449BF ED 37       0170*      ld ix,(hl)
0449C1 DD 22 A9 48 0171*      ld (tiles_row_defs),ix
       04          
0449C6             0172*  ; set tiles_row counter
0449C6 DD 7E 00    0173*      ld a,(ix)
0449C9 32 AC 48 04 0174*      ld (tiles_row),a
0449CD DD 23       0175*      inc ix ; now ix points first element of first row tile def
0449CF DD 22 A9 48 0176*      ld (tiles_row_defs),ix ; ... so we save it
       04          
0449D4             0177*  ; draw initial background tiles
0449D4             0178*  ; TODO: make this a stars background
0449D4 21 39 01 00 0179*      ld hl,BUF_STATION_BG_00
0449D8 CD 83 15 04 0180*      call vdu_buff_select
0449DC 01 00 00 00 0181*      ld bc,0
0449E0 11 00 00 00 0182*      ld de,field_top
0449E4 CD DF 18 04 0183*      call vdu_plot_bmp
0449E8             0184*  
0449E8 21 3A 01 00 0185*      ld hl,BUF_STATION_BG_01
0449EC CD 83 15 04 0186*      call vdu_buff_select
0449F0 01 00 00 00 0187*      ld bc,0
0449F4 11 00 01 00 0188*      ld de,field_top+256
0449F8 CD DF 18 04 0189*      call vdu_plot_bmp
0449FC             0190*  
0449FC C9          0191*      ret
0449FD             0192*  
0449FD             0193*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
0449FD             0194*  ; dt_is_active:
0449FD             0195*  ; ; a lands here containing a tile index in the low nibble
0449FD             0196*  ; ; we test the values for the tiles which are active
0449FD             0197*  ;     cp #07
0449FD             0198*  ;     call z,ld_act_landing_pad
0449FD             0199*  ;     cp #08
0449FD             0200*  ;     call z,ld_act_laser_turret
0449FD             0201*  ;     ; fall through
0449FD             0202*  ;     ret
0449FD             0203*  
0449FD             0204*  ; ; some tiles become active sprites,so we load those here
0449FD             0205*  ; ; sprite_x/y have already been loaded
0449FD             0206*  ; ; sprite_dim_x/y are loaded by table_add_record
0449FD             0207*  ; ; we don't want sprite drawn to background like other tiles
0449FD             0208*  ; ; so this routine only adds them to the sprite table
0449FD             0209*  ; dt_ld_act:
0449FD             0210*  ;     ld a,#48 ; top of screen + 1/2 tile height
0449FD             0211*  ;     ld (sprite_y+1),a ; just the integer part
0449FD             0212*  ;     ld (sprite_base_bufferId),hl
0449FD             0213*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
0449FD             0214*  ;     call table_add_record
0449FD             0215*  ;     call sprite_variables_from_stack
0449FD             0216*  ;     ld a,#FF ; lets calling proc know we loaded an active tile
0449FD             0217*  ;     ret ; and back
0449FD             0218*  
0449FD             0219*  ; ld_act_landing_pad:
0449FD             0220*  ;     call sprite_variables_to_stack
0449FD             0221*  
0449FD             0222*  ;     ld hl,move_landing_pad
0449FD             0223*  ;     ld (sprite_move_program),hl
0449FD             0224*  
0449FD             0225*  ;     xor a
0449FD             0226*  ;     ld (sprite_animation),a ; animation 0
0449FD             0227*  
0449FD             0228*  ;     call rand_8     ; snag a random number
0449FD             0229*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
0449FD             0230*  ;     add a,64 ; range is now 64-127
0449FD             0231*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
0449FD             0232*  
0449FD             0233*  ;     ld a,%10 ; collides with laser but not player
0449FD             0234*  ;     ld (iy+sprite_collisions),a
0449FD             0235*  
0449FD             0236*  ;     ld a,#05 ; BCD
0449FD             0237*  ;     ld (sprite_points),a
0449FD             0238*  ;     ld a,0 ; binary
0449FD             0239*  ;     ld (sprite_shield_damage),a
0449FD             0240*  
0449FD             0241*  ;     ld hl,landing_pad ; dt_ld_act loads this to sprite_base_bufferId
0449FD             0242*  ;     jr dt_ld_act
0449FD             0243*  
0449FD             0244*  ; ld_act_laser_turret:
0449FD             0245*  ;     call sprite_variables_to_stack
0449FD             0246*  
0449FD             0247*  ;     ld hl,move_laser_turret
0449FD             0248*  ;     ld (sprite_move_program),hl
0449FD             0249*  
0449FD             0250*  ;     xor a
0449FD             0251*  ;     ld (sprite_animation),a
0449FD             0252*  ;     ld (sprite_move_step),a
0449FD             0253*  
0449FD             0254*  ;     call rand_8     ; snag a random number
0449FD             0255*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
0449FD             0256*  ;     add a,64 ; range is now 64-127
0449FD             0257*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
0449FD             0258*  
0449FD             0259*  ;     ld a,%10 ; collides with laser but not player
0449FD             0260*  ;     ld (iy+sprite_collisions),a
0449FD             0261*  
0449FD             0262*  ;     ld a,#10 ; BCD
0449FD             0263*  ;     ld (sprite_points),a
0449FD             0264*  ;     ld a,0 ; binary
0449FD             0265*  ;     ld (sprite_shield_damage),a
0449FD             0266*  
0449FD             0267*  ;     ld hl,laser_turret ; dt_ld_act loads this to sprite_base_bufferId
0449FD             0268*  ;     jp dt_ld_act
0449FD             0269*  
0449FD             0270*  
0449FD             0271*  ; moves active tile sprites down one pixel in sync with tiles movement
0449FD             0272*  ; deletes sprites from table when they wrap around to top of screen
0449FD             0273*  move_active_tiles:
0449FD             0274*  ; get current position
0449FD 3A 0F 00 00 0275*      ld a,(sprite_y+1) ; we only need the integer part
044A01 3C          0276*      inc a
044A02             0277*  ; are we at the bottom of the screen?
044A02 20 06       0278*      jr nz,move_active_tiles_draw_sprite ; nope
044A04             0279*  ; otherwise kill sprite
044A04 3E 80       0280*      ld a,%10000000 ; any bit set in high nibble means sprite will die
044A06 FD 77 08    0281*      ld (iy+sprite_collisions),a
044A09 C9          0282*      ret ; debug
044A0A             0283*  move_active_tiles_draw_sprite:
044A0A 32 0F 00 00 0284*      ld (sprite_y+1),a ; update tile y position integer part
044A0E             0285*      ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
044A0E             0286*      ; call vdu_bmp_draw ; convert to vdu_bmp_plot ; draw it
044A0E C9          0287*      ret ; and done
044A0F             0288*  
044A0F             0289*  
044A0F             0290*  ; move_landing_pad:
044A0F             0291*  ;     call move_active_tiles
044A0F             0292*  ;     call check_collisions
044A0F             0293*  ; ; is it time to launch an enemy?
044A0F             0294*  ;     ld hl,sprite_move_timer
044A0F             0295*  ;     dec (hl)
044A0F             0296*  ;     jp nz,move_enemies_loop_return
044A0F             0297*  ;     call enemy_init_from_landing_pad
044A0F             0298*  ;     ; reset move timer so can spawn again if player doesn't take us out
044A0F             0299*  ;     call rand_8     ; snag a random number
044A0F             0300*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
044A0F             0301*  ;     add a,64 ; range is now 64-127
044A0F             0302*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
044A0F             0303*  ;     ret
044A0F             0304*  
044A0F             0305*  
044A0F             0306*  ; move_laser_turret:
044A0F             0307*  ; ; compute orientation to player
044A0F             0308*  ;     call orientation_to_player
044A0F             0309*  ; ; h.l 8.8 fixed angle256 to player
044A0F             0310*  ; ; bc and de as signed 16-bit integers
044A0F             0311*  ; ; representing delta-x/y *to* target respectively
044A0F             0312*  ;     ld (Bearing_t),hl
044A0F             0313*  ;     ld hl,0x0400
044A0F             0314*  ;     ld (Vp),hl
044A0F             0315*  ;     call targeting_computer
044A0F             0316*  ;     ld (sprite_heading),hl ; store bearing to player
044A0F             0317*  ; ; is it time to launch a fireball?
044A0F             0318*  ;     ld hl,sprite_move_timer
044A0F             0319*  ;     dec (hl)
044A0F             0320*  ;     jp nz,move_laser_turret_boilerplate
044A0F             0321*  ;     call fireballs_init
044A0F             0322*  ;     ; reset move timer so can fire again if player doesn't take us out
044A0F             0323*  ;     call rand_8     ; snag a random number
044A0F             0324*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
044A0F             0325*  ;     add a,64 ; range is now 64-127
044A0F             0326*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
044A0F             0327*  ; move_laser_turret_boilerplate:
044A0F             0328*  ;     call move_active_tiles
044A0F             0329*  ;     call check_collisions
044A0F             0330*  ;     ret
044A0F             0331*  
044A0F             0332*  
044A0F             0333*  ; fireballs_init:
044A0F             0334*  ;     call sprite_variables_to_stack
044A0F             0335*  
044A0F             0336*  ;     ld hl,fireballs
044A0F             0337*  ;     ld (sprite_base_bufferId),hl
044A0F             0338*  
044A0F             0339*  ;     ld hl,move_fireballs
044A0F             0340*  ;     ld (sprite_move_program),hl
044A0F             0341*  
044A0F             0342*  ;     ld a,%11 ; collides with laser and player
044A0F             0343*  ;     ; ld a,%10 ; collides with laser DEBUG
044A0F             0344*  ;     ld (iy+sprite_collisions),a
044A0F             0345*  
044A0F             0346*  ;     ld hl,(Vp)
044A0F             0347*  ;     ld (sprite_vel),hl
044A0F             0348*  ;     ld hl,(Vp_x)
044A0F             0349*  ;     ld (sprite_xvel),hl
044A0F             0350*  ;     ld hl,(Vp_y)
044A0F             0351*  ;     inc h ; account for ground movement
044A0F             0352*  ;     ld (sprite_yvel),hl
044A0F             0353*  
044A0F             0354*  ;     xor a ; zero a
044A0F             0355*  ;     ld (sprite_animation),a
044A0F             0356*  ;     ld (sprite_move_step),a
044A0F             0357*  ;     ld (sprite_move_timer),a
044A0F             0358*  
044A0F             0359*  ;     ld a,6 ; 1/10th of a second timer
044A0F             0360*  ;     ld (sprite_animation_timer),a
044A0F             0361*  
044A0F             0362*  ;     ld a,0x00 ; BCD
044A0F             0363*  ;     ld (sprite_points),a
044A0F             0364*  ;     ld a,1 ; binary
044A0F             0365*  ;     ld (sprite_shield_damage),a
044A0F             0366*  
044A0F             0367*  ;     call table_add_record ; plops that on the sprite stack for later
044A0F             0368*  ;     call sprite_variables_from_stack ; come back to where we started
044A0F             0369*  ;     ret
044A0F             0054   
044A0F 57 65 6C 63 0055   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
044A2A 4C 6F 61 64 0056   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
044A35 4C 6F 61 64 0057   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
044A43 50 72 65 73 0058   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
044A5E             0059   
044A5E             0060   init:
044A5E             0061   ; clear all buffers
044A5E CD 75 16 04 0062       call vdu_clear_all_buffers
044A62             0063   
044A62             0064   ; set up the display
044A62 3E 08       0065       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
044A64 CD 5F 15 04 0066       call vdu_set_screen_mode
044A68 AF          0067       xor a
044A69 CD 70 15 04 0068       call vdu_set_scaling
044A6D             0069   
044A6D             0070   ; ; enable additional audio channels
044A6D             0071   ; 	call vdu_enable_channels
044A6D             0072   
044A6D             0073   ; set text background color
044A6D 3E 9A       0074       ld a,26+128 ; violet
044A6F CD C7 14 04 0075       call vdu_colour_text
044A73             0076   
044A73             0077   ; set text foreground color
044A73 3E 2F       0078       ld a,47 ; aaaaff lavenderish
044A75 CD C7 14 04 0079       call vdu_colour_text
044A79             0080   
044A79             0081   ; set gfx bg color
044A79 AF          0082       xor a ; plotting mode 0
044A7A 3E 9A       0083       ld a,26+128 ; violet
044A7C CD D8 14 04 0084       call vdu_gcol
044A80 CD 96 14 04 0085       call vdu_cls
044A84             0086   
044A84             0087   ; set the cursor off
044A84 CD 5E 14 04 0088       call vdu_cursor_off
044A88             0089   
044A88             0090   ; VDU 28, left, bottom, right, top: Set text viewport **
044A88             0091   ; MIND THE LITTLE-ENDIANESS
044A88             0092   ; inputs: c=left,b=bottom,e=right,d=top
044A88 0E 00       0093       ld c,0 ; left
044A8A 16 1D       0094       ld d,29 ; top
044A8C 1E 27       0095       ld e,39 ; right
044A8E 06 1D       0096       ld b,29; bottom
044A90 CD EF 14 04 0097       call vdu_set_txt_viewport
044A94             0098   
044A94             0099   ; print loading ui message
044A94 21 2A 4A 04 0100       ld hl,loading_ui
044A98 CD 77 00 04 0101       call printString
044A9C CD 9B 14 04 0102       call vdu_flip
044AA0             0103   
044AA0             0104   ; load UI images
044AA0 CD D7 11 04 0105       call load_ui_images
044AA4             0106   
044AA4             0107   ; load sprites
044AA4 CD 80 12 04 0108       call img_load_init ; sets up the animated load screen
044AA8 CD F2 11 04 0109       call load_sprite_images
044AAC             0110   
044AAC             0111   ; ; load sound effects ; TODO
044AAC             0112   ; 	ld bc,SFX_num_buffers
044AAC             0113   ; 	ld hl,SFX_buffer_id_lut
044AAC             0114   ; 	ld (cur_buffer_id_lut),hl
044AAC             0115   ; 	ld hl,SFX_load_routines_table
044AAC             0116   ; 	ld (cur_load_jump_table),hl
044AAC             0117   ; 	call sfx_load_main
044AAC             0118   
044AAC             0119   ; print loading complete message and wait for user keypress
044AAC CD 96 14 04 0120       call vdu_cls
044AB0 21 43 4A 04 0121       ld hl,loading_complete
044AB4 CD 77 00 04 0122       call printString
044AB8 CD 9B 14 04 0123       call vdu_flip
044ABC CD 15 06 04 0124       call waitKeypress
044AC0             0125   
044AC0             0126   ; set up display for gameplay
044AC0             0127       ; ld a,8
044AC0 3E 14       0128       ld a,20
044AC2 CD 5F 15 04 0129       call vdu_set_screen_mode
044AC6 AF          0130       xor a
044AC7 CD 70 15 04 0131       call vdu_set_scaling
044ACB CD 5E 14 04 0132       call vdu_cursor_off
044ACF             0133   ; load fonts
044ACF CD 9A 11 04 0134   	call fonts_load
044AD3             0135   ; select font
044AD3 21 05 FA 00 0136       ld hl,computer_pixel_7_8x16
044AD7 3E 01       0137       ld a,1 ; flags
044AD9 CD 2C 18 04 0138       call vdu_font_select
044ADD             0139   ; plot bezel art
044ADD 21 00 00 00 0140       ld hl,BUF_BEZEL_L
044AE1 CD 83 15 04 0141       call vdu_buff_select
044AE5 01 00 00 00 0142       ld bc,0
044AE9 11 00 00 00 0143       ld de,0
044AED CD DF 18 04 0144       call vdu_plot_bmp
044AF1 21 01 00 00 0145       ld hl,BUF_BEZEL_R
044AF5 CD 83 15 04 0146       call vdu_buff_select
044AF9 01 80 01 00 0147       ld bc,384
044AFD 11 00 00 00 0148       ld de,0
044B01 CD DF 18 04 0149       call vdu_plot_bmp
044B05             0150   ; set gfx origin and viewport to playing field window
044B05 01 80 00 00 0151       ld bc,origin_left
044B09 11 00 00 00 0152       ld de,origin_top
044B0D CD 1B 15 04 0153       call vdu_set_gfx_origin
044B11 01 00 00 00 0154       ld bc,field_left
044B15 11 00 00 00 0155       ld de,field_top
044B19 DD 21 FF 00 0156       ld ix,field_right
       00          
044B1E FD 21 7F 01 0157       ld iy,field_bottom
       00          
044B23 CD 36 15 04 0158       call vdu_set_gfx_viewport
044B27             0159   ; set background color
044B27 3E 9A       0160       ld a,26+128 ; violet
044B29 CD D8 14 04 0161       call vdu_gcol
044B2D CD A9 14 04 0162       call vdu_clg
044B31             0163   ; VDU 28, left, bottom, right, top: Set text viewport **
044B31 0E 00       0164       ld c,0 ; left
044B33 16 00       0165       ld d,0 ; top
044B35 1E 3E       0166       ld e,62 ; right
044B37 06 07       0167       ld b,7; bottom
044B39 CD EF 14 04 0168       call vdu_set_txt_viewport
044B3D             0169   
044B3D             0170   ; initialize the global timestamp
044B3D CD D2 13 04 0171       call timestamp_tick
044B41             0172   
044B41             0173   ; done with init
044B41 C9          0174       ret
044B42             0175   
044B42             0176   main:
044B42             0177   ; start a new game
044B42 CD 78 47 04 0178       call game_initialize
044B46             0179   
044B46             0180   main_loop:
044B46             0181   ; update the global timestamp
044B46 CD D2 13 04 0182       call timestamp_tick
044B4A             0183   
044B4A             0184   ; do gamestate logic
044B4A CD 64 47 04 0185       call do_game
044B4E             0186   
044B4E             0187   ; wait for the next vblank mitigate flicker and for loop timing
044B4E CD 0A 15 04 0188       call vdu_vblank
044B52             0189       ; call vdu_vblank ; DEBUG
044B52             0190   
044B52             0191   ; poll keyboard for escape keypress
044B52 3E 08       0192       ld a, $08 ; code to send to MOS
044B54 5B CF       0193       rst.lil $08 ; get IX pointer to System Variables
044B56             0194   
044B56 DD 7E 05    0195       ld a, (ix + $05) ; get ASCII code of key pressed
044B59 FE 1B       0196       cp 27 ; check if 27 (ascii code for ESC)
044B5B CA 63 4B 04 0197       jp z, main_end ; if pressed, jump to exit
044B5F             0198   
044B5F C3 46 4B 04 0199       jp main_loop
044B63             0200   
044B63             0201   main_end:
044B63 CD 50 14 04 0202       call vdu_cursor_on
044B67 C9          0203       ret

PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD 15 98 04 0016        call main
040050             0017    
040050             0018    exit:
040050 FD E1       0019        pop iy
040052 DD E1       0020        pop ix
040054 D1          0021        pop de
040055 C1          0022        pop bc
040056 F1          0023        pop af
040057 21 00 00 00 0024        ld hl,0
04005B             0025    
04005B C9          0026        ret
04005C             0027    
04005C             0028    ; API INCLUDES
04005C             0029        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ; Title:	AGON MOS - API for user projects
04005C             0003*   ; Author:	Dean Belfield
04005C             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0005*   ;			Added MOS error codes for return in HL
04005C             0006*   ; Created:	03/08/2022
04005C             0007*   ; Last Updated:	10/08/2023
04005C             0008*   ;
04005C             0009*   ; Modinfo:
04005C             0010*   ; 05/08/2022:	Added mos_feof
04005C             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0015*   ; 13/10/2022:	Added mos_oscli
04005C             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0025*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0027*   ; 03/08/2023:	Added mos_setkbvector
04005C             0028*   ; 10/08/2023:	Added mos_getkbmap
04005C             0029*   
04005C             0030*   ; VDP control (VDU 23, 0, n)
04005C             0031*   ;
04005C             0032*   vdp_gp:				EQU 80h
04005C             0033*   vdp_keycode:		EQU 81h
04005C             0034*   vdp_cursor:			EQU	82h
04005C             0035*   vdp_scrchar:		EQU	83h
04005C             0036*   vdp_scrpixel:		EQU	84h
04005C             0037*   vdp_audio:			EQU	85h
04005C             0038*   vdp_mode:			EQU	86h
04005C             0039*   vdp_rtc:			EQU	87h
04005C             0040*   vdp_keystate:		EQU	88h
04005C             0041*   vdp_logicalcoords:	EQU	C0h
04005C             0042*   vdp_terminalmode:	EQU	FFh
04005C             0043*   
04005C             0044*   ; MOS high level functions
04005C             0045*   ;
04005C             0046*   mos_getkey:			EQU	00h
04005C             0047*   mos_load:			EQU	01h
04005C             0048*   mos_save:			EQU	02h
04005C             0049*   mos_cd:				EQU	03h
04005C             0050*   mos_dir:			EQU	04h
04005C             0051*   mos_del:			EQU	05h
04005C             0052*   mos_ren:			EQU	06h
04005C             0053*   mos_mkdir:			EQU	07h
04005C             0054*   mos_sysvars:		EQU	08h
04005C             0055*   mos_editline:		EQU	09h
04005C             0056*   mos_fopen:			EQU	0Ah
04005C             0057*   mos_fclose:			EQU	0Bh
04005C             0058*   mos_fgetc:			EQU	0Ch
04005C             0059*   mos_fputc:			EQU	0Dh
04005C             0060*   mos_feof:			EQU	0Eh
04005C             0061*   mos_getError:		EQU	0Fh
04005C             0062*   mos_oscli:			EQU	10h
04005C             0063*   mos_copy:			EQU	11h
04005C             0064*   mos_getrtc:			EQU	12h
04005C             0065*   mos_setrtc:			EQU	13h
04005C             0066*   mos_setintvector:	EQU	14h
04005C             0067*   mos_uopen:			EQU	15h
04005C             0068*   mos_uclose:			EQU	16h
04005C             0069*   mos_ugetc:			EQU	17h
04005C             0070*   mos_uputc:			EQU	18h
04005C             0071*   mos_getfil:			EQU	19h
04005C             0072*   mos_fread:			EQU	1Ah
04005C             0073*   mos_fwrite:			EQU	1Bh
04005C             0074*   mos_flseek:			EQU	1Ch
04005C             0075*   mos_setkbvector:	EQU	1Dh
04005C             0076*   mos_getkbmap:		EQU	1Eh
04005C             0077*   
04005C             0078*   ; MOS program exit codes
04005C             0079*   ;
04005C             0080*   EXIT_OK:				EQU  0;	"OK",
04005C             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04005C             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04005C             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04005C             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04005C             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04005C             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04005C             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04005C             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04005C             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04005C             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04005C             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04005C             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04005C             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04005C             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04005C             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04005C             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04005C             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04005C             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04005C             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04005C             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04005C             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04005C             0102*   ; FatFS file access functions
04005C             0103*   ;
04005C             0104*   ffs_fopen:			EQU	80h
04005C             0105*   ffs_fclose:			EQU	81h
04005C             0106*   ffs_fread:			EQU	82h
04005C             0107*   ffs_fwrite:			EQU	83h
04005C             0108*   ffs_flseek:			EQU	84h
04005C             0109*   ffs_ftruncate:		EQU	85h
04005C             0110*   ffs_fsync:			EQU	86h
04005C             0111*   ffs_fforward:		EQU	87h
04005C             0112*   ffs_fexpand:		EQU	88h
04005C             0113*   ffs_fgets:			EQU	89h
04005C             0114*   ffs_fputc:			EQU	8Ah
04005C             0115*   ffs_fputs:			EQU	8Bh
04005C             0116*   ffs_fprintf:		EQU	8Ch
04005C             0117*   ffs_ftell:			EQU	8Dh
04005C             0118*   ffs_feof:			EQU	8Eh
04005C             0119*   ffs_fsize:			EQU	8Fh
04005C             0120*   ffs_ferror:			EQU	90h
04005C             0121*   
04005C             0122*   ; FatFS directory access functions
04005C             0123*   ;
04005C             0124*   ffs_dopen:			EQU	91h
04005C             0125*   ffs_dclose:			EQU	92h
04005C             0126*   ffs_dread:			EQU	93h
04005C             0127*   ffs_dfindfirst:		EQU	94h
04005C             0128*   ffs_dfindnext:		EQU	95h
04005C             0129*   
04005C             0130*   ; FatFS file and directory management functions
04005C             0131*   ;
04005C             0132*   ffs_stat:			EQU	96h
04005C             0133*   ffs_unlink:			EQU	97h
04005C             0134*   ffs_rename:			EQU	98h
04005C             0135*   ffs_chmod:			EQU	99h
04005C             0136*   ffs_utime:			EQU	9Ah
04005C             0137*   ffs_mkdir:			EQU	9Bh
04005C             0138*   ffs_chdir:			EQU	9Ch
04005C             0139*   ffs_chdrive:		EQU	9Dh
04005C             0140*   ffs_getcwd:			EQU	9Eh
04005C             0141*   
04005C             0142*   ; FatFS volume management and system configuration functions
04005C             0143*   ;
04005C             0144*   ffs_mount:			EQU	9Fh
04005C             0145*   ffs_mkfs:			EQU	A0h
04005C             0146*   ffs_fdisk:			EQU	A1h
04005C             0147*   ffs_getfree:		EQU	A2h
04005C             0148*   ffs_getlabel:		EQU	A3h
04005C             0149*   ffs_setlabel:		EQU	A4h
04005C             0150*   ffs_setcp:			EQU	A5h
04005C             0151*   
04005C             0152*   ; File access modes
04005C             0153*   ;
04005C             0154*   fa_read:			EQU	01h
04005C             0155*   fa_write:			EQU	02h
04005C             0156*   fa_open_existing:	EQU	00h
04005C             0157*   fa_create_new:		EQU	04h
04005C             0158*   fa_create_always:	EQU	08h
04005C             0159*   fa_open_always:		EQU	10h
04005C             0160*   fa_open_append:		EQU	30h
04005C             0161*   
04005C             0162*   ; System variable indexes for api_sysvars
04005C             0163*   ; Index into _sysvars in globals.inc
04005C             0164*   ;
04005C             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04005C             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04005C             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04005C             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04005C             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04005C             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04005C             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04005C             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04005C             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04005C             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04005C             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04005C             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04005C             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04005C             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04005C             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04005C             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04005C             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04005C             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04005C             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04005C             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04005C             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04005C             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04005C             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04005C             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04005C             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04005C             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04005C             0191*   
04005C             0192*   ; Flags for the VPD protocol
04005C             0193*   ;
04005C             0194*   vdp_pflag_cursor:		EQU	00000001b
04005C             0195*   vdp_pflag_scrchar:		EQU	00000010b
04005C             0196*   vdp_pflag_point:		EQU	00000100b
04005C             0197*   vdp_pflag_audio:		EQU	00001000b
04005C             0198*   vdp_pflag_mode:			EQU	00010000b
04005C             0199*   vdp_pflag_rtc:			EQU	00100000b
04005C             0200*   
04005C             0201*   ;
04005C             0202*   ; FatFS structures
04005C             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04005C             0204*   ;
04005C             0205*   ; Object ID and allocation information (FFOBJID)
04005C             0206*   ;
04005C             0207*   ; Indexes into FFOBJID structure
04005C             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04005C             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04005C             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
04005C             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04005C             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04005C             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04005C             0214*   ;
04005C             0215*   ; File object structure (FIL)
04005C             0216*   ;
04005C             0217*   ; Indexes into FIL structure
04005C             0218*   fil_obj:		EQU 0	; 15: Object identifier
04005C             0219*   fil_flag:		EQU	15 	;  1: File status flags
04005C             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
04005C             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04005C             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04005C             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04005C             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04005C             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04005C             0226*   ;
04005C             0227*   ; Directory object structure (DIR)
04005C             0228*   ; Indexes into DIR structure
04005C             0229*   dir_obj:		EQU  0	; 15: Object identifier
04005C             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
04005C             0231*   dir_clust:		EQU	19	;  4: Current cluster
04005C             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04005C             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04005C             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04005C             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04005C             0236*   ;
04005C             0237*   ; File information structure (FILINFO)
04005C             0238*   ;
04005C             0239*   ; Indexes into FILINFO structure
04005C             0240*   filinfo_fsize:		EQU 0	;   4: File size
04005C             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
04005C             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
04005C             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
04005C             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
04005C             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
04005C             0246*   ;
04005C             0247*   ; Macro for calling the API
04005C             0248*   ; Parameters:
04005C             0249*   ; - function: One of the function numbers listed above
04005C             0250*   ;
04005C             0251*   	MACRO	MOSCALL	function
04005C             0252*   			LD	A, function
04005C             0253*   			RST.LIL	08h
04005C             0254*   	ENDMACRO
04005C             0030        include "macros.inc"
04005C             0001*   
04005C             0002*   ; test the sign of HL
04005C             0003*   ; inputs: HL obviously
04005C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04005C             0005*   ; destroys: flags
04005C             0006*       MACRO SIGN_HLU
04005C             0007*       add hl,de ; 1 cycle
04005C             0008*       or a ; clear flags ; 1 cycle
04005C             0009*       sbc hl,de ; 2 cycles
04005C             0010*       ; 4 cycles total
04005C             0011*       ENDMACRO
04005C             0012*   
04005C             0013*   ; put the value in A into HLU
04005C             0014*   ; affects: HLU
04005C             0015*   ; destroys: nothing
04005C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04005C             0017*       MACRO A_TO_HLU
04005C             0018*       xor a ; 1 cycle
04005C             0019*       ld ($+8+1),hl ; 7 cycles
04005C             0020*       ld ($+4+3),a ; 5 cycles
04005C             0021*       ld hl,0x000000 ; 4 cycles
04005C             0022*       ; 17 cycles total
04005C             0023*       ENDMACRO
04005C             0024*   
04005C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04005C             0026*   ; one cycle less but burns flags
04005C             0027*       MACRO A_TO_HLU_ALT
04005C             0028*       push hl ; 4 cycles
04005C             0029*       ld hl,2 ; 4 cycles
04005C             0030*       add hl,sp ; 1 cycle
04005C             0031*       ld (hl),a ; 2 cycles
04005C             0032*       pop hl ; 4 cycles
04005C             0033*       ; 15 cycles total
04005C             0034*       ENDMACRO
04005C             0035*   
04005C             0036*       MACRO hlu_mul256
04005C             0037*       add hl,hl ; * 2
04005C             0038*       add hl,hl ; * 4
04005C             0039*       add hl,hl ; * 8
04005C             0040*       add hl,hl ; * 16
04005C             0041*       add hl,hl ; * 32
04005C             0042*       add hl,hl ; * 64
04005C             0043*       add hl,hl ; * 128
04005C             0044*       add hl,hl ; * 256
04005C             0045*       ENDMACRO
04005C             0046*   
04005C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04005C             0048*       MACRO SRL_UHL
04005C             0049*       dec sp ; 1 cycle
04005C             0050*       push hl ; 4 cycles
04005C             0051*       inc sp ; 1 cycle
04005C             0052*       pop hl ; 4 cycles
04005C             0053*       inc hl ; 1 cycle
04005C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04005C             0055*       ; 13 cycles total
04005C             0056*       ENDMACRO
04005C             0057*   
04005C             0058*       MACRO printChar char
04005C             0059*       LD A, char
04005C             0060*       RST.LIL 10h
04005C             0061*       ENDMACRO
04005C             0062*   
04005C             0063*   ; Simulated call to subroutine at HL
04005C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04005C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04005C             0066*   ; destroys: only what the subroutine does, but always BC
04005C             0067*       MACRO CALL_HL
04005C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0069*       push bc ; which constitutes the return address
04005C             0070*       jp (hl) ; Jump to the address in HL
04005C             0071*       ENDMACRO
04005C             0072*   
04005C             0073*   ; Simulated call to subroutine at IX
04005C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04005C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04005C             0076*   ; destroys: only what the subroutine does, but always BC
04005C             0077*       MACRO CALL_IX
04005C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0079*       push bc ; which constitutes the return address
04005C             0080*       jp (ix) ; Jump to the address in IX
04005C             0081*       ENDMACRO
04005C             0082*   
04005C             0083*   ; Simulated call to soubroutinte at IY
04005C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04005C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04005C             0086*   ; destroys: only what the subroutine does, but always BC
04005C             0087*       MACRO CALL_IY
04005C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0089*       push bc ; which constitutes the return address
04005C             0090*       jp (iy) ; Jump to the address in IY
04005C             0091*       ENDMACRO
04005C             0092*   
04005C             0093*   ; put the value in HLU into A
04005C             0094*   ; destroys: af
04005C             0095*       MACRO HLU_TO_A
04005C             0096*       dec sp ; 1 cycle
04005C             0097*       push hl ; 4 cycles
04005C             0098*       inc sp ; 1 cycle
04005C             0099*       pop af ; 4 cycles
04005C             0100*       ; 10 cycles total
04005C             0101*       ENDMACRO
04005C             0102*   
04005C             0103*       MACRO PUSH_ALL
04005C             0104*       ex af,af'
04005C             0105*       exx
04005C             0106*       push af
04005C             0107*       push hl
04005C             0108*       push bc
04005C             0109*       push de
04005C             0110*   
04005C             0111*       ex af,af'
04005C             0112*       exx
04005C             0113*       push af
04005C             0114*       push hl
04005C             0115*       push bc
04005C             0116*       push de
04005C             0117*       push ix
04005C             0118*       push iy
04005C             0119*       ENDMACRO
04005C             0120*   
04005C             0121*       MACRO POP_ALL
04005C             0122*       pop iy
04005C             0123*       pop ix
04005C             0124*       pop de
04005C             0125*       pop bc
04005C             0126*       pop hl
04005C             0127*       pop af
04005C             0128*       ex af,af'
04005C             0129*       exx
04005C             0130*   
04005C             0131*       pop de
04005C             0132*       pop bc
04005C             0133*       pop hl
04005C             0134*       pop af
04005C             0135*       ex af,af'
04005C             0136*       exx
04005C             0137*       ENDMACRO
04005C             0031        include "functions.inc"
04005C             0001*   ; Print a zero-terminated string inline with code, e.g.:
04005C             0002*   ;
04005C             0003*   ;    call printInline
04005C             0004*   ;    ASCIZ "Hello, world!\r\n"
04005C             0005*   ;
04005C             0006*   ; Destroys: HL,AF
04005C             0007*   printInline:
04005C E1          0008*       pop hl ; get the return address = pointer to start of string
04005D CD 63 00 04 0009*       call printString ; HL advances to end of string
040061 E5          0010*       push hl ; restore the return address = pointer to end of string
040062 C9          0011*       ret
040063             0012*   
040063             0013*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040063             0014*   ; Print a zero-terminated string
040063             0015*   ; HL: Pointer to string
040063             0016*   printString:
040063 C5          0017*       PUSH BC
040064 01 00 00 00 0018*       LD BC,0
040068 3E 00       0019*       LD A,0
04006A 5B DF       0020*       RST.LIL 18h
04006C C1          0021*       POP BC
04006D C9          0022*       RET
04006E             0023*   ; print a VDU sequence
04006E             0024*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
04006E             0025*   sendVDUsequence:
04006E C5          0026*       PUSH BC
04006F 01 00 00 00 0027*       LD BC, 0
040073 4E          0028*       LD C, (HL)
040074 5B DF       0029*       RST.LIL 18h
040076 C1          0030*       POP BC
040077 C9          0031*       RET
040078             0032*   ; Print Newline sequence to VDP
040078             0033*   ; destroys bc
040078             0034*   printNewLine:
040078 F5          0035*       push af ; for some reason rst.lil 10h sets carry flag
040079 3E 0D       0036*       LD A, '\r'
04007B 5B D7       0037*       RST.LIL 10h
04007D 3E 0A       0038*       LD A, '\n'
04007F 5B D7       0039*       RST.LIL 10h
040081 F1          0040*       pop af
040082 C9          0041*       RET
040083             0042*   
040083             0043*   ; print a zero-terminated string at a graphics coordinate
040083             0044*   ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040083             0045*   printStringGfx:
040083 E5          0046*       push hl ; preserve string pointer
040084             0047*   ; move graphics cursor to x,y location
040084 3E 44       0048*       ld a,plot_pt+mv_abs
040086 CD D1 16 04 0049*       call vdu_plot
04008A             0050*   ; print string
04008A E1          0051*       pop hl ; restore string pointer
04008B             0052*   @print_loop:
04008B 7E          0053*       ld a,(hl)
04008C B7          0054*       or a ; check for end of string
04008D C8          0055*       ret z ; if zero, we're done
04008E 08          0056*       ex af,af' ; preserve character
04008F 3E 05       0057*       ld a,5 ; VDU 5 char to gfx cursor
040091 5B D7       0058*       rst.lil 10h ; send it
040093 08          0059*       ex af,af' ; restore character
040094 5B D7       0060*       rst.lil 10h ; print character
040096 23          0061*       inc hl
040097 C3 8B 00 04 0062*       jp @print_loop
04009B C9          0063*       ret
04009C             0064*   ; end printStringGfx
04009C             0065*   
04009C             0066*   ; Print a 24-bit HEX number
04009C             0067*   ; HLU: Number to print
04009C             0068*   printHex24:
04009C             0069*       HLU_TO_A
04009C 3B          0001*M1     dec sp ; 1 cycle
04009D E5          0002*M1     push hl ; 4 cycles
04009E 33          0003*M1     inc sp ; 1 cycle
04009F F1          0004*M1     pop af ; 4 cycles
0400A0             0005*M1     ; 10 cycles total
0400A0 CD AA 00 04 0070*       CALL printHex8
0400A4             0071*   ; Print a 16-bit HEX number
0400A4             0072*   ; HL: Number to print
0400A4             0073*   printHex16:
0400A4 7C          0074*       LD A,H
0400A5 CD AA 00 04 0075*       CALL printHex8
0400A9 7D          0076*       LD A,L
0400AA             0077*   ; Print an 8-bit HEX number
0400AA             0078*   ; A: Number to print
0400AA             0079*   printHex8:
0400AA 4F          0080*       LD C,A
0400AB 1F          0081*       RRA
0400AC 1F          0082*       RRA
0400AD 1F          0083*       RRA
0400AE 1F          0084*       RRA
0400AF CD B4 00 04 0085*       CALL @F
0400B3 79          0086*       LD A,C
0400B4             0087*   @@:
0400B4 E6 0F       0088*       AND 0Fh
0400B6 C6 90       0089*       ADD A,90h
0400B8 27          0090*       DAA
0400B9 CE 40       0091*       ADC A,40h
0400BB 27          0092*       DAA
0400BC 5B D7       0093*       RST.LIL 10h
0400BE C9          0094*       RET
0400BF             0095*   
0400BF             0096*   ; Print a 0x HEX prefix
0400BF             0097*   DisplayHexPrefix:
0400BF 3E 30       0098*       LD A, '0'
0400C1 5B D7       0099*       RST.LIL 10h
0400C3 3E 78       0100*       LD A, 'x'
0400C5 5B D7       0101*       RST.LIL 10h
0400C7 C9          0102*       RET
0400C8             0103*   
0400C8             0104*       MACRO printDecBC
0400C8             0105*       push hl
0400C8             0106*       push bc
0400C8             0107*       pop hl
0400C8             0108*       call printDec
0400C8             0109*       pop hl
0400C8             0110*       ENDMACRO
0400C8             0111*   
0400C8             0112*       MACRO printDecDE
0400C8             0113*       push hl
0400C8             0114*       push de
0400C8             0115*       pop hl
0400C8             0116*       call printDec
0400C8             0117*       pop hl
0400C8             0118*       ENDMACRO
0400C8             0119*   
0400C8             0120*       MACRO printDecHL
0400C8             0121*       call printDec
0400C8             0122*       ENDMACRO
0400C8             0123*   
0400C8             0124*       MACRO printDecIX
0400C8             0125*       push hl
0400C8             0126*       push ix
0400C8             0127*       pop hl
0400C8             0128*       call printDec
0400C8             0129*       pop hl
0400C8             0130*       ENDMACRO
0400C8             0131*   
0400C8             0132*       MACRO printDecIY
0400C8             0133*       push hl
0400C8             0134*       push iy
0400C8             0135*       pop hl
0400C8             0136*       call printDec
0400C8             0137*       pop hl
0400C8             0138*       ENDMACRO
0400C8             0139*   
0400C8             0140*   
0400C8             0141*   ; Prints the right justified decimal value in HL without leading zeroes
0400C8             0142*   ; HL : Value to print
0400C8             0143*   ; preserves all registers and flags
0400C8             0144*   printDec:
0400C8             0145*   ; BEGIN MY CODE
0400C8             0146*   ; back up all the things
0400C8 F5          0147*       push af
0400C9 C5          0148*       push bc
0400CA D5          0149*       push de
0400CB E5          0150*       push hl
0400CC             0151*   ; END MY CODE
0400CC 11 F4 00 04 0152*       LD DE, _printDecBuffer
0400D0 CD 04 01 04 0153*       CALL u24_to_ascii
0400D4             0154*   ; BEGIN MY CODE
0400D4             0155*   ; replace leading zeroes with spaces
0400D4 21 F4 00 04 0156*       LD HL, _printDecBuffer
0400D8 06 07       0157*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400DA             0158*   @loop:
0400DA 7E          0159*       LD A, (HL)
0400DB FE 30       0160*       CP '0'
0400DD C2 E7 00 04 0161*       JP NZ, @done
0400E1 3E 20       0162*       LD A, ' '
0400E3 77          0163*       LD (HL), A
0400E4 23          0164*       INC HL
0400E5             0165*       ; CALL vdu_cursor_forward
0400E5 10 F3       0166*       DJNZ @loop
0400E7             0167*   @done:
0400E7             0168*   ; END MY CODE
0400E7 21 F4 00 04 0169*       LD HL, _printDecBuffer
0400EB CD 63 00 04 0170*       CALL printString
0400EF             0171*   ; BEGIN MY CODE
0400EF             0172*   ; restore all the things
0400EF E1          0173*       pop hl
0400F0 D1          0174*       pop de
0400F1 C1          0175*       pop bc
0400F2 F1          0176*       pop af
0400F3             0177*   ; END MY CODE
0400F3 C9          0178*       RET
0400F4 00 00 00 00 0179*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040104             0180*   
040104             0181*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040104             0182*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040104             0183*   ; so it will allways be 8 characters length
040104             0184*   ; HL : Value to convert to string
040104             0185*   ; DE : pointer to buffer, at least 8 byte + 0
040104             0186*   u24_to_ascii:
040104 01 80 69 67 0187*       LD BC,-10000000
040108 CD 3B 01 04 0188*       CALL @one_digit
04010C 01 C0 BD F0 0189*       LD BC,-1000000
040110 CD 3B 01 04 0190*       CALL @one_digit
040114 01 60 79 FE 0191*       LD BC,-100000
040118 CD 3B 01 04 0192*       CALL @one_digit
04011C 01 F0 D8 FF 0193*       LD BC,-10000
040120 CD 3B 01 04 0194*       CALL @one_digit
040124 01 18 FC FF 0195*       LD BC,-1000
040128 CD 3B 01 04 0196*       CALL @one_digit
04012C 01 9C FF FF 0197*       LD BC,-100
040130 CD 3B 01 04 0198*       CALL @one_digit
040134 0E F6       0199*       LD C,-10
040136 CD 3B 01 04 0200*       CALL @one_digit
04013A 48          0201*       LD C,B
04013B             0202*   @one_digit:
04013B 3E 2F       0203*       LD A,'0'-1
04013D             0204*   @divide_me:
04013D 3C          0205*       INC A
04013E 09          0206*       ADD HL,BC
04013F 38 FC       0207*       JR C,@divide_me
040141 ED 42       0208*       SBC HL,BC
040143 12          0209*       LD (DE),A
040144 13          0210*       INC DE
040145 C9          0211*       RET
040146             0212*   
040146             0213*   print_u24:
040146 D5          0214*       push de
040147 E5          0215*       push hl
040148 11 F4 00 04 0216*       ld de,_printDecBuffer
04014C CD 04 01 04 0217*       call u24_to_ascii
040150 21 F4 00 04 0218*       ld hl,_printDecBuffer
040154 CD 63 00 04 0219*       call printString
040158 3E 20       0220*       ld a,' '
04015A 5B D7       0221*       rst.lil 10h
04015C E1          0222*       pop hl
04015D D1          0223*       pop de
04015E C9          0224*       ret
04015F             0225*   
04015F             0226*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04015F             0227*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04015F             0228*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04015F             0229*   u168_to_ascii:
04015F             0230*   ; add a leading space to make room for sign flag if needed
04015F 3E 20       0231*       ld a,' '
040161 12          0232*       ld (de),a
040162 13          0233*       inc de
040163             0234*   ; Convert integer part
040163 E5          0235*       push hl ; Save HL (we’ll need the fractional part later)
040164             0236*       ; call hlu_udiv256 ; Shift to get integer portion in HL
040164             0237*       SRL_UHL ; Shift to get integer portion in HL
040164 3B          0001*M1     dec sp ; 1 cycle
040165 E5          0002*M1     push hl ; 4 cycles
040166 33          0003*M1     inc sp ; 1 cycle
040167 E1          0004*M1     pop hl ; 4 cycles
040168 23          0005*M1     inc hl ; 1 cycle
040169 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04016B             0007*M1     ; 13 cycles total
04016B 01 F0 D8 FF 0238*       ld bc, -10000
04016F CD 92 01 04 0239*       call @one_int
040173 01 18 FC FF 0240*       ld bc, -1000
040177 CD 92 01 04 0241*       call @one_int
04017B 01 9C FF FF 0242*       ld bc, -100
04017F CD 92 01 04 0243*       call @one_int
040183 0E F6       0244*       ld c, -10
040185 CD 92 01 04 0245*       call @one_int
040189 48          0246*       ld c, b
04018A CD 92 01 04 0247*       call @one_int
04018E C3 9D 01 04 0248*       jp @frac ; Jump to fractional part conversion
040192             0249*   @one_int:
040192 3E 2F       0250*       ld a, '0' - 1 ; Start ASCII character at '0'
040194             0251*   @divide_me:
040194 3C          0252*       inc a
040195 09          0253*       add hl, bc ; Accumulate until overflow
040196 38 FC       0254*       jr c, @divide_me
040198 ED 42       0255*       sbc hl, bc ; Remove excess after overflow
04019A 12          0256*       ld (de), a ; Store ASCII digit
04019B 13          0257*       inc de
04019C C9          0258*       ret
04019D             0259*   ; Convert fractional part
04019D             0260*   @frac:
04019D 3E 2E       0261*       ld a, '.' ; Decimal point
04019F 12          0262*       ld (de), a
0401A0 13          0263*       inc de
0401A1 E1          0264*       pop hl ; Restore HL with original fraction
0401A2 06 03       0265*       ld b, 3 ; Loop counter for 3 fractional digits
0401A4             0266*   @frac_loop:
0401A4 26 0A       0267*       ld h, 10 ; Load multiplier for fractional part
0401A6 ED 6C       0268*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401A8 3E 30       0269*       ld a, '0'
0401AA 84          0270*       add a, h ; Convert integer part to ASCII
0401AB 12          0271*       ld (de), a
0401AC 13          0272*       inc de
0401AD 10 F5       0273*       djnz @frac_loop ; Repeat for each fractional digit
0401AF             0274*   ; Add null terminator
0401AF AF          0275*       xor a ; Null terminator
0401B0 12          0276*       ld (de), a
0401B1 C9          0277*       ret
0401B2             0278*   
0401B2             0279*   print_u168:
0401B2 D5          0280*       push de
0401B3 E5          0281*       push hl
0401B4 11 F4 00 04 0282*       ld de,_printDecBuffer
0401B8 CD 5F 01 04 0283*       call u168_to_ascii
0401BC 21 F4 00 04 0284*       ld hl,_printDecBuffer
0401C0 CD 63 00 04 0285*       call printString
0401C4 E1          0286*       pop hl
0401C5 D1          0287*       pop de
0401C6 C9          0288*       ret
0401C7             0289*   
0401C7             0290*   ; signed version of u168_to_ascii
0401C7             0291*   s168_to_ascii:
0401C7 D5          0292*       push de ; save starting address of buffer
0401C8 CD 6C 04 04 0293*       call hlu_abs
0401CC F5          0294*       push af ; save sign flag
0401CD CD 5F 01 04 0295*       call u168_to_ascii
0401D1 F1          0296*       pop af ; restore sign flag
0401D2 D1          0297*       pop de ; restore starting address of buffer
0401D3 F0          0298*       ret p ; hlu was positive so nothing to do
0401D4 3E 2D       0299*       ld a,'-'
0401D6 12          0300*       ld (de),a
0401D7 C9          0301*       ret
0401D8             0302*   
0401D8             0303*   print_s168:
0401D8 D5          0304*       push de
0401D9 E5          0305*       push hl
0401DA 11 F4 00 04 0306*       ld de,_printDecBuffer
0401DE CD C7 01 04 0307*       call s168_to_ascii
0401E2 21 F4 00 04 0308*       ld hl,_printDecBuffer
0401E6 CD 63 00 04 0309*       call printString
0401EA E1          0310*       pop hl
0401EB D1          0311*       pop de
0401EC C9          0312*       ret
0401ED             0313*   
0401ED             0314*   print_s168_hl:
0401ED F5          0315*       push af
0401EE E5          0316*       push hl
0401EF CD D8 01 04 0317*       call print_s168
0401F3 3E 20       0318*       ld a,' '
0401F5 5B D7       0319*       rst.lil 10h
0401F7 E1          0320*       pop hl
0401F8 F1          0321*       pop af
0401F9 C9          0322*       ret
0401FA             0323*   
0401FA             0324*   print_s168_bc:
0401FA F5          0325*       push af
0401FB C5          0326*       push bc
0401FC E5          0327*       push hl
0401FD C5          0328*       push bc
0401FE E1          0329*       pop hl
0401FF CD D8 01 04 0330*       call print_s168
040203 3E 20       0331*       ld a,' '
040205 5B D7       0332*       rst.lil 10h
040207 E1          0333*       pop hl
040208 C1          0334*       pop bc
040209 F1          0335*       pop af
04020A C9          0336*       ret
04020B             0337*   
04020B             0338*   print_s168_de:
04020B F5          0339*       push af
04020C D5          0340*       push de
04020D E5          0341*       push hl
04020E EB          0342*       ex de,hl
04020F CD D8 01 04 0343*       call print_s168
040213 3E 20       0344*       ld a,' '
040215 5B D7       0345*       rst.lil 10h
040217 E1          0346*       pop hl
040218 D1          0347*       pop de
040219 F1          0348*       pop af
04021A C9          0349*       ret
04021B             0350*   
04021B             0351*   print_s168_hl_bc_de:
04021B F5          0352*       push af
04021C C5          0353*       push bc
04021D D5          0354*       push de
04021E E5          0355*       push hl
04021F CD D8 01 04 0356*       call print_s168
040223 3E 20       0357*       ld a,' '
040225 5B D7       0358*       rst.lil 10h
040227 C5          0359*       push bc
040228 E1          0360*       pop hl
040229 CD D8 01 04 0361*       call print_s168
04022D 3E 20       0362*       ld a,' '
04022F 5B D7       0363*       rst.lil 10h
040231 EB          0364*       ex de,hl
040232 CD D8 01 04 0365*       call print_s168
040236 3E 20       0366*       ld a,' '
040238 5B D7       0367*       rst.lil 10h
04023A E1          0368*       pop hl
04023B D1          0369*       pop de
04023C C1          0370*       pop bc
04023D F1          0371*       pop af
04023E C9          0372*       ret
04023F             0373*   
04023F             0374*   print_s168_bc_de:
04023F F5          0375*       push af
040240 C5          0376*       push bc
040241 D5          0377*       push de
040242 C5          0378*       push bc
040243 E1          0379*       pop hl
040244 CD D8 01 04 0380*       call print_s168
040248 3E 20       0381*       ld a,' '
04024A 5B D7       0382*       rst.lil 10h
04024C EB          0383*       ex de,hl
04024D CD D8 01 04 0384*       call print_s168
040251 3E 20       0385*       ld a,' '
040253 5B D7       0386*       rst.lil 10h
040255 E1          0387*       pop hl
040256 D1          0388*       pop de
040257 C1          0389*       pop bc
040258 F1          0390*       pop af
040259 C9          0391*       ret
04025A             0392*   
04025A             0393*   print_s168_a:
04025A F5          0394*       push af
04025B C5          0395*       push bc
04025C E5          0396*       push hl
04025D 21 00 00 00 0397*       ld hl,0
040261 6F          0398*       ld l,a
040262 CD ED 01 04 0399*       call print_s168_hl
040266 E1          0400*       pop hl
040267 C1          0401*       pop bc
040268 F1          0402*       pop af
040269 C9          0403*       ret
04026A             0404*   
04026A             0405*   ; #### new functions added by Brandon R. Gates ####
04026A             0406*   
04026A             0407*   ; print the binary representation of the 8-bit value in a
04026A             0408*   ; destroys a, hl, bc
04026A             0409*   printBin8:
04026A 06 08       0410*       ld b,8 ; loop counter for 8 bits
04026C 21 87 02 04 0411*       ld hl,@cmd ; set hl to the low byte of the output string
040270             0412*       ; (which will be the high bit of the value in a)
040270             0413*   @loop:
040270 07          0414*       rlca ; put the next highest bit into carry
040271 38 04       0415*       jr c,@one
040273 36 30       0416*       ld (hl),'0'
040275 18 02       0417*       jr @next_bit
040277             0418*   @one:
040277 36 31       0419*       ld (hl),'1'
040279             0420*   @next_bit:
040279 23          0421*       inc hl
04027A 10 F4       0422*       djnz @loop
04027C             0423*   ; print it
04027C 21 87 02 04 0424*       ld hl,@cmd
040280 01 08 00 00 0425*       ld bc,@end-@cmd
040284 5B DF       0426*       rst.lil $18
040286 C9          0427*       ret
040287             0428*   @cmd: ds 8 ; eight bytes for eight bits
04028F             0429*   @end:
04028F             0430*   
04028F             0431*   ; print the binary representation of the 8-bit value in a
04028F             0432*   ; in reverse order (lsb first)
04028F             0433*   ; destroys a, hl, bc
04028F             0434*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
04028F 06 08       0435*       ld b,8 ; loop counter for 8 bits
040291 21 AC 02 04 0436*       ld hl,@cmd ; set hl to the low byte of the output string
040295             0437*       ; (which will be the high bit of the value in a)
040295             0438*   @loop:
040295 0F          0439*       rrca ; put the next lowest bit into carry
040296 38 04       0440*       jr c,@one
040298 36 30       0441*       ld (hl),'0'
04029A 18 02       0442*       jr @next_bit
04029C             0443*   @one:
04029C 36 31       0444*       ld (hl),'1'
04029E             0445*   @next_bit:
04029E 23          0446*       inc hl
04029F 10 F4       0447*       djnz @loop
0402A1             0448*   ; print it
0402A1 21 AC 02 04 0449*       ld hl,@cmd
0402A5 01 08 00 00 0450*       ld bc,@end-@cmd
0402A9 5B DF       0451*       rst.lil $18
0402AB C9          0452*       ret
0402AC             0453*   @cmd: ds 8 ; eight bytes for eight bits
0402B4             0454*   @end:
0402B4             0455*   
       FF FF FF FF 
       FF FF FF FF 
0402B4 20 61 66 3D 0456*   str_afu: db " af=",0
       00          
0402B9 20 68 6C 3D 0457*   str_hlu: db " hl=",0
       00          
0402BE 20 62 63 3D 0458*   str_bcu: db " bc=",0
       00          
0402C3 20 64 65 3D 0459*   str_deu: db " de=",0
       00          
0402C8 20 69 78 3D 0460*   str_ixu: db " ix=",0
       00          
0402CD 20 69 79 3D 0461*   str_iyu: db " iy=",0
       00          
0402D2             0462*   
0402D2             0463*   ; print udeuhl to screen in hexidecimal format
0402D2             0464*   ; inputs: none
0402D2             0465*   ; outputs: concatenated hexidecimal udeuhl
0402D2             0466*   ; destroys: nothing
0402D2             0467*   dumpUDEUHLHex:
0402D2             0468*   ; store everything in scratch
0402D2 22 31 03 04 0469*       ld (uhl),hl
0402D6 ED 43 34 03 0470*       ld (ubc),bc
       04          
0402DB ED 53 37 03 0471*       ld (ude),de
       04          
0402E0 DD 22 3A 03 0472*       ld (uix),ix
       04          
0402E5 FD 22 3D 03 0473*       ld (uiy),iy
       04          
0402EA F5          0474*       push af
0402EB             0475*   
0402EB             0476*   ; print each register
0402EB             0477*   
0402EB 21 25 03 04 0478*       ld hl,str_udeuhl
0402EF CD 63 00 04 0479*       call printString
0402F3 2A 37 03 04 0480*       ld hl,(ude)
0402F7 CD 9C 00 04 0481*       call printHex24
0402FB 3E 2E       0482*       ld a,'.' ; print a dot to separate the values
0402FD 5B D7       0483*       rst.lil 10h
0402FF 2A 31 03 04 0484*       ld hl,(uhl)
040303 CD 9C 00 04 0485*       call printHex24
040307 CD 78 00 04 0486*       call printNewLine
04030B             0487*   
04030B             0488*   ; restore everything
04030B 2A 31 03 04 0489*       ld hl, (uhl)
04030F ED 4B 34 03 0490*       ld bc, (ubc)
       04          
040314 ED 5B 37 03 0491*       ld de, (ude)
       04          
040319 DD 2A 3A 03 0492*       ld ix, (uix)
       04          
04031E FD 2A 3D 03 0493*       ld iy, (uiy)
       04          
040323 F1          0494*       pop af
040324             0495*   ; all done
040324 C9          0496*       ret
040325             0497*   
040325 75 64 65 2E 0498*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04032E             0499*   
04032E             0500*   ; global scratch memory for registers
04032E 00 00 00    0501*   uaf: dl 0
040331 00 00 00    0502*   uhl: dl 0
040334 00 00 00    0503*   ubc: dl 0
040337 00 00 00    0504*   ude: dl 0
04033A 00 00 00    0505*   uix: dl 0
04033D 00 00 00    0506*   uiy: dl 0
040340 00 00 00    0507*   usp: dl 0
040343 00 00 00    0508*   upc: dl 0
040346             0509*   
040346             0510*   
040346             0511*   ; set all the bits in the flag register
040346             0512*   ; more of an academic exercise than anything useful
040346             0513*   ; inputs; none
040346             0514*   ; outputs; a=0,f=255
040346             0515*   ; destroys: flags, hl
040346             0516*   ; preserves: a, because why not
040346             0517*   setAllFlags:
040346 21 FF 00 00 0518*       ld hl,255
04034A 67          0519*       ld h,a ; four cycles to preserve a is cheap
04034B E5          0520*       push hl
04034C F1          0521*       pop af
04034D C9          0522*       ret
04034E             0523*   
04034E             0524*   ; reset all the bits in the flag register
04034E             0525*   ; unlike its inverse counterpart, this may actually be useful
04034E             0526*   ; inputs; none
04034E             0527*   ; outputs; a=0,f=0
04034E             0528*   ; destroys: flags, hl
04034E             0529*   ; preserves: a, because why not
04034E             0530*   resetAllFlags:
04034E 21 00 00 00 0531*       ld hl,0
040352 67          0532*       ld h,a ; four cycles to preserve a is cheap
040353 E5          0533*       push hl
040354 F1          0534*       pop af
040355 C9          0535*       ret
040356             0536*   
040356             0537*   ; wait until user presses a key
040356             0538*   ; inputs: none
040356             0539*   ; outputs: ascii code of key pressed in a
040356             0540*   ; destroys: af,ix
040356             0541*   waitKeypress:
040356             0542*       MOSCALL mos_getkey
040356 3E 00       0001*M1 			LD	A, function
040358 5B CF       0002*M1 			RST.LIL	08h
04035A C9          0543*       ret
04035B             0544*   
04035B             0545*   ; clear a block of memory by writing a prescribed value to each byte in the range
04035B             0546*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04035B             0547*   ; outputs: memory block is cleared
04035B             0548*   ; destroys: hl, de
04035B             0549*   clear_mem:
04035B 0B          0550*       dec bc ; we do this because we will increment de before writing the first byte
04035C 77          0551*       ld (hl),a
04035D E5          0552*       push hl
04035E D1          0553*       pop de
04035F 13          0554*       inc de ; target address
040360 ED B0       0555*       ldir
040362 C9          0556*       ret
040363             0032        include "arith24.inc"
040363             0001*   ;------------------------------------------------------------------------
040363             0002*   ;  arith24.asm
040363             0003*   ;  24-bit ez80 arithmetic routines
040363             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040363             0005*   ;  MIT license
040363             0006*   ;
040363             0007*   ;  This library was created as a tool to help make ez80
040363             0008*   ;  24-bit native assembly routines for simple mathematical problems
040363             0009*   ;  more widely available.
040363             0010*   ;
040363             0011*   ;------------------------------------------------------------------------
040363             0012*   
040363             0013*   ;------------------------------------------------------------------------
040363             0014*   ; umul24:	HL = HL*DE (unsigned)
040363             0015*   ; Preserves AF, BC, DE
040363             0016*   ; Uses a fast multiply routine.
040363             0017*   ;------------------------------------------------------------------------
040363             0018*   umul24:
040363 D5          0019*   	push	DE
040364 C5          0020*   	push	BC
040365 F5          0021*   	push	AF
040366 E5          0022*   	push	HL
040367 C1          0023*   	pop		BC
040368 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
04036A 21 00 00 00 0025*       ld	 	hl, 0 ; Result
04036E             0026*   umul24_lp:
04036E 29          0027*   	add	hl,hl
04036F EB          0028*   	ex	de,hl
040370 29          0029*   	add	hl,hl
040371 EB          0030*   	ex	de,hl
040372 30 01       0031*   	jr	nc,umul24_nc
040374 09          0032*   	add	hl,bc
040375             0033*   umul24_nc:
040375 3D          0034*   	dec	a
040376 20 F6       0035*   	jr	nz,umul24_lp
040378 F1          0036*   	pop	af
040379 C1          0037*   	pop	bc
04037A D1          0038*   	pop	de
04037B C9          0039*   	ret
04037C             0040*   
04037C             0041*   
04037C             0042*   ;------------------------------------------------------------------------
04037C             0043*   ; udiv24
04037C             0044*   ; Unsigned 24-bit division
04037C             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04037C             0046*   ;
04037C             0047*   ; Uses AF BC DE HL
04037C             0048*   ; Uses Restoring Division algorithm
04037C             0049*   ;------------------------------------------------------------------------
04037C             0050*   
04037C             0051*   udiv24:
04037C E5          0052*   	push	hl
04037D C1          0053*   	pop		bc	;move dividend to BCU
04037E 21 00 00 00 0054*   	ld		hl,0	;result
040382 A7          0055*   	and		a
040383 ED 52       0056*   	sbc		hl,de	;test for div by 0
040385 C8          0057*   	ret		z		;it's zero, carry flag is clear
040386 19          0058*   	add		hl,de	;HL is 0 again
040387 3E 18       0059*   	ld		a,24	;number of loops through.
040389             0060*   udiv1:
040389 C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
04038A E3          0062*   	ex		(sp),hl
04038B 37          0063*   	scf
04038C ED 6A       0064*   	adc	hl,hl
04038E E3          0065*   	ex	(sp),hl
04038F C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040390             0067*   
040390 ED 6A       0068*   	adc	hl,hl
040392 A7          0069*   	and	a		;is this the bug
040393 ED 52       0070*   	sbc	hl,de
040395 30 02       0071*   	jr	nc,udiv2
040397 19          0072*   	add	hl,de
040398             0073*   ;	dec	c
040398 0B          0074*   	dec	bc
040399             0075*   udiv2:
040399 3D          0076*   	dec	a
04039A 20 ED       0077*   	jr	nz,udiv1
04039C 37          0078*   	scf		;flag used for div0 error
04039D C5          0079*   	push	bc
04039E D1          0080*   	pop		de	;remainder
04039F C9          0081*   	ret
0403A0             0082*   
0403A0             0083*   
0403A0             0084*   
0403A0             0085*   ;------------------------------------------------------------------------
0403A0             0086*   ; neg24
0403A0             0087*   ; Returns: HLU = 0-HLU
0403A0             0088*   ; preserves all other registers
0403A0             0089*   ;------------------------------------------------------------------------
0403A0             0090*   neg24:
0403A0 D5          0091*   	push	de
0403A1 EB          0092*   	ex		de,hl
0403A2 21 00 00 00 0093*   	ld		hl,0
0403A6 B7          0094*   	or		a
0403A7 ED 52       0095*   	sbc		hl,de
0403A9 D1          0096*   	pop		de
0403AA C9          0097*   	ret
0403AB             0098*   
0403AB             0099*   ;------------------------------------------------------------------------
0403AB             0100*   ; or_hlu_deu: 24 bit bitwise OR
0403AB             0101*   ; Returns: hlu = hlu OR deu
0403AB             0102*   ; preserves all other registers
0403AB             0103*   ;------------------------------------------------------------------------
0403AB             0104*   or_hlu_deu:
0403AB 22 34 04 04 0105*   	ld	(bitbuf1),hl
0403AF ED 53 37 04 0106*   	ld	(bitbuf2),de
       04          
0403B4 D5          0107*   	push	de	;preserve DEU
0403B5 C5          0108*   	push	bc	;preserve BCU
0403B6 06 03       0109*   	ld		b,3
0403B8 21 34 04 04 0110*   	ld	hl,bitbuf1
0403BC 11 34 04 04 0111*   	ld	de,bitbuf1
0403C0             0112*   orloop_24:
0403C0 1A          0113*   	ld	a,(de)
0403C1 B6          0114*   	or	(hl)
0403C2 12          0115*   	ld	(de),a
0403C3 13          0116*   	inc	de
0403C4 23          0117*   	inc	hl
0403C5 10 F9       0118*   	djnz	orloop_24
0403C7 2A 37 04 04 0119*   	ld	hl,(bitbuf2)
0403CB C1          0120*   	pop		bc	;restore BC
0403CC D1          0121*   	pop		de	;restore DE
0403CD             0122*   
0403CD             0123*   ;------------------------------------------------------------------------
0403CD             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403CD             0125*   ; Returns: hlu = hlu AND deu
0403CD             0126*   ; preserves all other registers
0403CD             0127*   ;------------------------------------------------------------------------
0403CD             0128*   and_hlu_deu:
0403CD 22 34 04 04 0129*   	ld	(bitbuf1),hl
0403D1 ED 53 37 04 0130*   	ld	(bitbuf2),de
       04          
0403D6 D5          0131*   	push	de	;preserve DEU
0403D7 C5          0132*   	push	bc	;preserve BCU
0403D8 06 03       0133*   	ld		b,3
0403DA 21 34 04 04 0134*   	ld	hl,bitbuf1
0403DE 11 34 04 04 0135*   	ld	de,bitbuf1
0403E2             0136*   andloop_24:
0403E2 1A          0137*   	ld	a,(de)
0403E3 A6          0138*   	and	(hl)
0403E4 12          0139*   	ld	(de),a
0403E5 13          0140*   	inc	de
0403E6 23          0141*   	inc	hl
0403E7 10 F9       0142*   	djnz	andloop_24
0403E9 2A 37 04 04 0143*   	ld	hl,(bitbuf2)
0403ED C1          0144*   	pop		bc	;restore BC
0403EE D1          0145*   	pop		de	;restore DE
0403EF             0146*   
0403EF             0147*   ;------------------------------------------------------------------------
0403EF             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403EF             0149*   ; Returns: hlu = hlu XOR deu
0403EF             0150*   ; preserves all other registers
0403EF             0151*   ;------------------------------------------------------------------------
0403EF             0152*   xor_hlu_deu:
0403EF 22 34 04 04 0153*   	ld	(bitbuf1),hl
0403F3 ED 53 37 04 0154*   	ld	(bitbuf2),de
       04          
0403F8 D5          0155*   	push	de	;preserve DEU
0403F9 C5          0156*   	push	bc	;preserve BCU
0403FA 06 03       0157*   	ld		b,3
0403FC 21 34 04 04 0158*   	ld	hl,bitbuf1
040400 11 34 04 04 0159*   	ld	de,bitbuf1
040404             0160*   xorloop_24:
040404 1A          0161*   	ld	a,(de)
040405 AE          0162*   	xor	(hl)
040406 12          0163*   	ld	(de),a
040407 13          0164*   	inc	de
040408 23          0165*   	inc	hl
040409 10 F9       0166*   	djnz	xorloop_24
04040B 2A 37 04 04 0167*   	ld	hl,(bitbuf2)
04040F C1          0168*   	pop		bc	;restore BC
040410 D1          0169*   	pop		de	;restore DE
040411             0170*   
040411             0171*   ;------------------------------------------------------------------------
040411             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
040411             0173*   ; Returns: hlu = hlu << a
040411             0174*   ;		   a = 0
040411             0175*   ; NOTE: only considers a up to 16 bits.
040411             0176*   ; preserves all other registers
040411             0177*   ; modified by Brandon R. Gates to use a instead of de
040411             0178*   ;------------------------------------------------------------------------
040411             0179*   shl_hlu:
040411 B7          0180*   	or a
040412 C8          0181*   	ret		z		;we're done
040413 29          0182*   	add		hl,hl	;shift HLU left
040414 3D          0183*   	dec a
040415 18 FA       0184*   	jr		shl_hlu
040417             0185*   
040417             0186*   ;------------------------------------------------------------------------
040417             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
040417             0188*   ; Returns: hlu = hlu >> a
040417             0189*   ;		   a = 0
040417             0190*   ; NOTE: only considers a up to 16 bits.
040417             0191*   ; preserves all other registers
040417             0192*   ; modified by Brandon R. Gates to use a instead of de
040417             0193*   ;------------------------------------------------------------------------
040417             0194*   shr_hlu:
040417 22 34 04 04 0195*   	ld		(bitbuf1),hl
04041B 21 36 04 04 0196*   	ld		hl,bitbuf1+2
04041F             0197*   @shr_loop:
04041F B7          0198*   	or a
040420 28 0D       0199*   	jr		z,@shr_done		;we're done
040422             0200*   ;carry is clear from or instruction
040422 CB 1E       0201*   	rr		(hl)
040424 2B          0202*   	dec		hl
040425 CB 1E       0203*   	rr		(hl)
040427 2B          0204*   	dec		hl
040428 CB 1E       0205*   	rr		(hl)
04042A 23          0206*   	inc		hl
04042B 23          0207*   	inc		hl
04042C 3D          0208*   	dec a
04042D 18 F0       0209*   	jr		@shr_loop
04042F             0210*   @shr_done:
04042F 2A 34 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
040433 C9          0212*   	ret
040434             0213*   
040434             0214*   ;------------------------------------------------------------------------
040434             0215*   ; Scratch area for calculations
040434             0216*   ;------------------------------------------------------------------------
040434 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
040437 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
04043A             0219*   
04043A             0220*   ; -----------------------------------------------------------------------
04043A             0221*   ; Functions added by Brandon R. Gates
04043A             0222*   ; -----------------------------------------------------------------------
04043A             0223*   
04043A             0224*   ;------------------------------------------------------------------------
04043A             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
04043A             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
04043A             0227*   ;              HLU = HLU >> LSB(A)
04043A             0228*   ; Returns: HLU = HLU >> LSB(A)
04043A             0229*   ; Destroys: af
04043A             0230*   ;------------------------------------------------------------------------
04043A             0231*   shr_hlu_log2a:
04043A B7          0232*   	or a    ; check for zero
04043B C8          0233*   	ret z   ; nothing to shift so we're done
04043C C5          0234*   	push 	bc ; preserve
04043D 06 00       0235*   	ld		b,0 ; clear b
04043F             0236*   @find_bit:
04043F 0F          0237*   	rrca ; bit 0 to carry
040440 DA 49 04 04 0238*   	jp c,@found_bit
040444 04          0239*   	inc b ; next bit
040445 C3 3F 04 04 0240*   	jp @find_bit
040449             0241*   @found_bit:
040449 78          0242*   	ld a,b
04044A CD 17 04 04 0243*   	call shr_hlu
04044E C1          0244*   	pop 	bc ; restore
04044F C9          0245*   	ret
040450             0246*   ; end shr_hlu_log2a
040450             0247*   
040450             0248*   ;------------------------------------------------------------------------
040450             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040450             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040450             0251*   ;                HLU = HLU << LSB(A)
040450             0252*   ; Returns: HLU = HLU << LSB(A)
040450             0253*   ; Destroys: af
040450             0254*   ;------------------------------------------------------------------------
040450             0255*   shl_hlu_log2a:
040450 B7          0256*   	or a    ; check for zero
040451 C8          0257*   	ret z   ; nothing to shift so we're done
040452 C5          0258*   	push 	bc ; preserve
040453 06 00       0259*   	ld		b,0 ; clear b
040455             0260*   @find_bit:
040455 0F          0261*   	rrca ; bit 0 to carry
040456 DA 5F 04 04 0262*   	jp c,@found_bit
04045A 04          0263*   	inc b ; next bit
04045B C3 55 04 04 0264*   	jp @find_bit
04045F             0265*   @found_bit:
04045F 78          0266*   	ld a,b
040460 CD 11 04 04 0267*   	call shl_hlu
040464 C1          0268*   	pop 	bc ; restore
040465 C9          0269*   	ret
040466             0270*   ; end shl_hlu_log2a
040466             0033        include "maths.inc"
040466             0001*   ;------------------------------------------------------------------------
040466             0002*   ; Scratch area for calculations
040466             0003*   ;------------------------------------------------------------------------
040466 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
040469 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
04046C             0006*   
04046C             0007*   ; absolute value of hlu
04046C             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
04046C             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
04046C             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
04046C             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
04046C             0012*   ; destroys: a
04046C             0013*   hlu_abs:
04046C 19          0014*       add hl,de
04046D B7          0015*       or a
04046E ED 52       0016*       sbc hl,de
040470 FA 75 04 04 0017*       jp m,@is_neg
040474 C9          0018*       ret ; hlu is positive or zero so we're done
040475             0019*   @is_neg:
040475 F5          0020*       push af ; otherwise, save current flags for return
040476 CD 7C 04 04 0021*       call neg_hlu ; negate hlu
04047A F1          0022*       pop af ; get back flags
04047B C9          0023*       ret
04047C             0024*   
04047C             0025*   ; flip the sign of hlu
04047C             0026*   ; inputs: hlu
04047C             0027*   ; returns: 0-hlu, flags set appropriately for the result:
04047C             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
04047C             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
04047C             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
04047C             0031*   ; destroys a
04047C             0032*   neg_hlu:
04047C D5          0033*       push de ; save de
04047D EB          0034*       ex de,hl ; put hl into de
04047E 21 00 00 00 0035*       ld hl,0 ; clear hl
040482 AF          0036*       xor a ; clear carry
040483 ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
040485 D1          0038*       pop de ; get de back
040486 C9          0039*       ret ; easy peasy
040487             0040*   
040487             0041*   ;------------------------------------------------------------------------
040487             0042*   ; divide hlu by 2, inspired by above
040487             0043*   ;------------------------------------------------------------------------
040487             0044*   hlu_div2:
040487 22 66 04 04 0045*       ld (scratch1),hl
04048B 21 68 04 04 0046*       ld hl,scratch1+2
04048F CB 1E       0047*       rr (hl)
040491 2B          0048*       dec hl
040492 CB 1E       0049*       rr (hl)
040494 2B          0050*       dec hl
040495 CB 1E       0051*       rr (hl)
040497 23          0052*       inc hl
040498 23          0053*       inc hl
040499 2A 66 04 04 0054*       ld hl,(scratch1)
04049D C9          0055*       ret
04049E             0056*   
04049E             0057*   ; this is my little hack to divide by 16
04049E             0058*   hlu_div16:
04049E AF          0059*       xor a
04049F 29          0060*       add hl,hl
0404A0 17          0061*       rla
0404A1 29          0062*       add hl,hl
0404A2 17          0063*       rla
0404A3 29          0064*       add hl,hl
0404A4 17          0065*       rla
0404A5 29          0066*       add hl,hl
0404A6 17          0067*       rla
0404A7 22 B4 04 04 0068*       ld (@scratch),hl
0404AB 32 B7 04 04 0069*       ld (@scratch+3),a
0404AF 2A B5 04 04 0070*       ld hl,(@scratch+1)
0404B3 C9          0071*       ret
0404B4             0072*   @scratch: ds 4
0404B8             0073*   
0404B8             0074*   ; hlu signed division by 256
0404B8             0075*   ; returns: hlu / 256
0404B8             0076*   ; destroys: af
0404B8             0077*   hlu_sdiv256:
       FF FF FF FF 
0404B8 AF          0078*       xor a ; assume hl is positive
0404B9 22 CF 04 04 0079*       ld (@buffer),hl
0404BD             0080*       SIGN_HLU
0404BD 19          0001*M1     add hl,de ; 1 cycle
0404BE B7          0002*M1     or a ; clear flags ; 1 cycle
0404BF ED 52       0003*M1     sbc hl,de ; 2 cycles
0404C1             0004*M1     ; 4 cycles total
0404C1 F2 C6 04 04 0081*       jp p,@hl_pos
0404C5 3D          0082*       dec a
0404C6             0083*   @hl_pos:
0404C6 32 D2 04 04 0084*       ld (@buffer+3),a
0404CA 2A D0 04 04 0085*       ld hl,(@buffer+1)
0404CE C9          0086*       ret
0404CF             0087*   @buffer: ds 4
0404D3             0088*   
0404D3             0089*   ; hlu 1 byte right shift, unsigned
0404D3             0090*   ; returns: hlu / 256, fractional portion in a
0404D3             0091*   ; destroys: af
0404D3             0092*   hlu_udiv256:
       FF FF FF FF 
0404D3 AF          0093*       xor a
0404D4 32 E5 04 04 0094*       ld (@buffer+3),a
0404D8 7D          0095*       ld a,l ; save the fractional portion
0404D9 22 E2 04 04 0096*       ld (@buffer),hl
0404DD 2A E3 04 04 0097*       ld hl,(@buffer+1)
0404E1 C9          0098*       ret
0404E2             0099*   @buffer: ds 4
0404E6             0100*   
       FF FF FF FF 
0404E6 00 00 00 00 0101*   add_bcd_arg1: db #00,#00,#00,#00
0404EA 00 00 00 00 0102*   add_bcd_arg2: db #00,#00,#00,#00
0404EE             0103*   
0404EE             0104*   ; set bcd values in a scratch memory address from registers bcde
0404EE             0105*   ; input: hl; scratch address,bcde; 8-place bcd number
0404EE             0106*   ; destroys ; hl
0404EE             0107*   set_bcd:
0404EE 73          0108*       ld (hl),e
0404EF 23          0109*       inc hl
0404F0 72          0110*       ld (hl),d
0404F1 23          0111*       inc hl
0404F2 71          0112*       ld (hl),c
0404F3 23          0113*       inc hl
0404F4 70          0114*       ld (hl),b
0404F5 C9          0115*       ret
0404F6             0116*   
0404F6             0117*   ; load bcd values from a scratch memory address to bcde
0404F6             0118*   ; input: hl; scratch address
0404F6             0119*   ; output: bcde; 8-place bcd number
0404F6             0120*   ; destroys: hl
0404F6             0121*   get_bcd:
0404F6 5E          0122*       ld e,(hl)
0404F7 23          0123*       inc hl
0404F8 56          0124*       ld d,(hl)
0404F9 23          0125*       inc hl
0404FA 4E          0126*       ld c,(hl)
0404FB 23          0127*       inc hl
0404FC 46          0128*       ld b,(hl)
0404FD C9          0129*       ret
0404FE             0130*   
0404FE             0131*   ; BCD addition
0404FE             0132*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404FE             0133*   ;       a is the number of bytes holding each number (number of places/2)
0404FE             0134*   ; outputs: (hl) + (de) --> (hl)
0404FE             0135*   ; destroys: a,b,de,hl
0404FE             0136*   add_bcd:
0404FE 47          0137*       ld b,a ; loop counter
0404FF AF          0138*       xor a ; reset a, clear carry flag
040500             0139*   adcec:
040500 1A          0140*       ld a,(de) ; addend to acc
040501 8E          0141*       adc a,(hl) ; add (hl) to acc
040502 27          0142*       daa ; adjust result to bcd
040503 77          0143*       ld (hl),a ; store result
040504 23          0144*       inc hl ; advance memory pointers
040505 13          0145*       inc de
040506 10 F8       0146*       djnz adcec ; loop until b == 0
040508 C9          0147*       ret
040509             0148*   
040509             0149*   ; BCD subtraction
040509             0150*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040509             0151*   ;       a is the number of bytes holding each number (number of places/2)
040509             0152*   ; outputs: (hl) - (de) --> (hl)
040509             0153*   ; destroys: a,b,de,hl
040509             0154*   sub_bcd:
040509 47          0155*       ld b,a ; loop counter
04050A AF          0156*       xor a ; reset a,clear carry flag
04050B             0157*   subdec:
04050B 1A          0158*       ld a,(de) ; subtrahend to acc
04050C 9E          0159*       sbc a,(hl) ; subtract (hl) from acc
04050D 27          0160*       daa ; adjust result to bcd
04050E 77          0161*       ld (hl),a ; store result
04050F 23          0162*       inc hl ; advance memory pointers
040510 13          0163*       inc de
040511 10 F8       0164*       djnz subdec ; loop until b == 0
040513 C9          0165*       ret
040514             0166*   
040514             0167*   ; http://www.z80.info/pseudo-random.txt
040514             0168*   rand_8:
040514 C5          0169*       push bc
040515 3A 28 05 04 0170*       ld a,(r_seed)
040519 4F          0171*       ld c,a
04051A             0172*   
04051A 0F          0173*       rrca ; multiply by 32
04051B 0F          0174*       rrca
04051C 0F          0175*       rrca
04051D EE 1F       0176*       xor 0x1f
04051F             0177*   
04051F 81          0178*       add a,c
040520 DE FF       0179*       sbc a,255 ; carry
040522             0180*   
040522 32 28 05 04 0181*       ld (r_seed),a
040526 C1          0182*       pop bc
040527 C9          0183*       ret
040528 50          0184*   r_seed: defb $50
040529             0185*   
040529             0186*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
040529             0187*   prng24:
040529             0188*   ;;Expects ADL mode.
040529             0189*   ;;Output: HL
040529             0190*   ;;50cc
040529             0191*   ;;33 bytes
040529             0192*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
040529 ED 5B 4A 05 0193*       ld de,(seed1)
       04          
04052E B7          0194*       or a
04052F ED 62       0195*       sbc hl,hl
040531 19          0196*       add hl,de
040532 29          0197*       add hl,hl
040533 29          0198*       add hl,hl
040534 2C          0199*       inc l
040535 19          0200*       add hl,de
040536 22 4A 05 04 0201*       ld (seed1),hl
04053A 2A 4D 05 04 0202*       ld hl,(seed2)
04053E 29          0203*       add hl,hl
04053F 9F          0204*       sbc a,a
040540 E6 1B       0205*       and %00011011
040542 AD          0206*       xor l
040543 6F          0207*       ld l,a
040544 22 4D 05 04 0208*       ld (seed2),hl
040548 19          0209*       add hl,de
040549 C9          0210*       ret
04054A 00 00 00    0211*   seed1: dl 0
04054D 00 00 00    0212*   seed2: dl 0
040550             0034        include "files.inc"
040550             0001*   ; load to onboard 8k sram
040550             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
040550             0035        include "fixed168.inc"
040550             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040550             0002*   ; uses EZ80 MLT instruction for speed
040550             0003*   ; operation: UHL * A --> UHL
040550             0004*   ; destroys: AF, HL
040550             0005*   smul24x8:
040550             0006*   ; make hl positive and store sign flag
040550 CD 6C 04 04 0007*       call hlu_abs
040554 F5          0008*       push af
040555             0009*   ; do the division
040555 CD 60 05 04 0010*       call mul24x8 ; hl = product
040559             0011*   ; adjust sign of result
040559 F1          0012*       pop af ; sign de
04055A F0          0013*       ret p ; hl was positive, nothing to do
04055B CD 7C 04 04 0014*       call neg_hlu ; result is negative
04055F C9          0015*       ret
040560             0016*   
040560             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040560             0018*   ; uses EZ80 MLT instruction for speed
040560             0019*   ; operation: UHL * A --> AUHL
040560             0020*   ; destroys: AF, HL
040560             0021*   mul24x8:
040560 D5          0022*       push de ; preserve de
040561             0023*   ; low byte
040561 5D          0024*       ld e,l
040562 57          0025*       ld d,a
040563 ED 5C       0026*       mlt de
040565 6B          0027*       ld l,e ; product low byte
040566 08          0028*       ex af,af' ; save multiplier
040567 7A          0029*       ld a,d ; carry
040568 08          0030*       ex af,af' ; save carry, restore multiplier
040569             0031*   ; high byte
040569 5C          0032*       ld e,h
04056A 57          0033*       ld d,a
04056B ED 5C       0034*       mlt de
04056D 08          0035*       ex af,af' ; save multiplier, restore carry
04056E 83          0036*       add a,e ; add carry
04056F 67          0037*       ld h,a ; product middle byte
040570 7A          0038*       ld a,d ; carry
040571 08          0039*       ex af,af' ; save carry, restore multiplier
040572             0040*   ; upper byte
040572 22 8D 05 04 0041*       ld (@scratch),hl ; 7 cycles
040576 5F          0042*       ld e,a
040577 3A 8F 05 04 0043*       ld a,(@scratch+2)
04057B 57          0044*       ld d,a
04057C ED 5C       0045*       mlt de
04057E 08          0046*       ex af,af' ; restore carry
04057F 8B          0047*       adc a,e ; add carry
040580 32 8F 05 04 0048*       ld (@scratch+2),a ; 5 cycles
040584 2A 8D 05 04 0049*       ld hl,(@scratch) ; 7 cycles
040588             0050*   ; highest byte
040588 3E 00       0051*       ld a,0 ; preserve carry flag
04058A 8A          0052*       adc a,d ; product highest byte
04058B D1          0053*       pop de ; restore de
04058C C9          0054*       ret
04058D             0055*   @scratch: ds 3
040590             0056*   
       FF FF FF 
040590 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
040596             0058*   
040596             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040596             0060*   ; operation: UHL * UDE --> mul24out
040596             0061*   mul24:
040596 DD E5       0062*       push ix ; preserve
040598             0063*   ; point to output buffer and clear it
040598 DD 21 90 05 0064*       ld ix,mul24out
       04          
04059D C5          0065*       push bc
04059E 01 00 00 00 0066*       ld bc,0
0405A2 DD 0F 00    0067*       ld (ix),bc
0405A5 DD 0F 03    0068*       ld (ix+3),bc
0405A8 C1          0069*       pop bc
0405A9             0070*   ; STEP 1: UHL * E
0405A9 7B          0071*       ld a,e
0405AA E5          0072*       push hl
0405AB CD 60 05 04 0073*       call mul24x8
0405AF DD 2F 00    0074*       ld (ix+0),hl
0405B2 DD 77 03    0075*       ld (ix+3),a
0405B5             0076*   ; STEP 2: UHL * D
0405B5 E1          0077*       pop hl
0405B6 E5          0078*       push hl
0405B7 7A          0079*       ld a,d
0405B8 CD 60 05 04 0080*       call mul24x8
0405BC CD D5 05 04 0081*       call @accumulate
0405C0             0082*   ; STEP 3: UHL * DEU
0405C0 E1          0083*       pop hl
0405C1 ED 53 05 06 0084*       ld (@de),de
       04          
0405C6 3A 07 06 04 0085*       ld a,(@de+2)
0405CA CD 60 05 04 0086*       call mul24x8
0405CE CD D5 05 04 0087*       call @accumulate
0405D2             0088*   ; all done
0405D2 DD E1       0089*       pop ix ; restore
0405D4 C9          0090*       ret
0405D5             0091*   @accumulate:
0405D5 DD 23       0092*       inc ix
0405D7             0093*   ; highest byte of product to carry
0405D7 DD 77 03    0094*       ld (ix+3),a
0405DA             0095*   ; low byte of product
0405DA 7D          0096*       ld a,l
0405DB DD 86 00    0097*       add a,(ix+0)
0405DE DD 77 00    0098*       ld (ix+0),a
0405E1             0099*   ; high byte of product
0405E1 7C          0100*       ld a,h
0405E2 DD 8E 01    0101*       adc a,(ix+1)
0405E5 DD 77 01    0102*       ld (ix+1),a
0405E8             0103*   ; uppper byte of product
0405E8 22 02 06 04 0104*       ld (@hl),hl
0405EC 3A 04 06 04 0105*       ld a,(@hl+2)
0405F0 DD 8E 02    0106*       adc a,(ix+2)
0405F3 DD 77 02    0107*       ld (ix+2),a
0405F6             0108*   ; carry
0405F6 3E 00       0109*       ld a,0 ; preserve flags
0405F8 DD 8E 03    0110*       adc a,(ix+3)
0405FB DD 77 03    0111*       ld (ix+3),a
0405FE C9          0112*       ret
0405FF             0113*   
0405FF 00 00 00    0114*   @ix: dl 0
040602 00 00 00    0115*   @hl: dl 0
040605 00 00 00    0116*   @de: dl 0
040608             0117*   
040608             0118*   ; ; UHL * UDE --> UHL (unsigned)
040608             0119*   ; umul24:
040608             0120*   ;     call mul24
040608             0121*   ;     ld hl,(mul24out)
040608             0122*   ;     ret
040608             0123*   
040608             0124*   ; UH.L = UH.L*UD.E (unsigned)
040608             0125*   umul168:
040608 CD 96 05 04 0126*       call mul24
04060C 2A 91 05 04 0127*       ld hl,(mul24out+1)
040610 C9          0128*       ret
040611             0129*   
040611             0130*   ; UH.L * UD.E --> UH.L (signed)
040611             0131*   smul168:
040611             0132*   ; make everything positive and store sign flags
040611 CD 6C 04 04 0133*       call hlu_abs
040615 F5          0134*       push af
040616 EB          0135*       ex de,hl
040617 CD 6C 04 04 0136*       call hlu_abs
04061B EB          0137*       ex de,hl
04061C F5          0138*       push af
04061D             0139*   ; do the division
04061D CD 08 06 04 0140*       call umul168 ; hl = product
040621             0141*   ; adjust sign of result
040621 F1          0142*       pop af ; sign de
040622 FA 2D 06 04 0143*       jp m,@de_neg
040626 F1          0144*       pop af ; sign hl
040627 F0          0145*       ret p ; both positive, nothing to do
040628             0146*   @hl_neg:
040628 CD 7C 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
04062C C9          0148*       ret
04062D             0149*   @de_neg:
04062D F1          0150*       pop af
04062E F8          0151*       ret m ; both negative, nothing to do
04062F CD 7C 04 04 0152*       call neg_hlu ; result is negative
040633 C9          0153*       ret
040634             0154*   
040634             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040634             0156*   ; perform unsigned division of 16.8 fixed place values
040634             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040634             0158*   udiv168:
040634             0159*   ; back up divisor
040634 ED 53 6B 06 0160*       ld (@ude),de
       04          
040639             0161*   ; get the 16-bit integer part of the quotient
040639 CD 7C 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
04063D             0163*   ; load quotient to upper three bytes of output
04063D ED 53 72 06 0164*       ld (div168_out+1),de
       04          
040642             0165*   @div256:
040642             0166*   ; multiply remainder by 256
040642             0167*       hlu_mul256
040642 29          0001*M1     add hl,hl ; * 2
040643 29          0002*M1     add hl,hl ; * 4
040644 29          0003*M1     add hl,hl ; * 8
040645 29          0004*M1     add hl,hl ; * 16
040646 29          0005*M1     add hl,hl ; * 32
040647 29          0006*M1     add hl,hl ; * 64
040648 29          0007*M1     add hl,hl ; * 128
040649 29          0008*M1     add hl,hl ; * 256
04064A             0168*   ; skip fractional computation if remainder is zero
04064A             0169*       SIGN_HLU
04064A 19          0001*M1     add hl,de ; 1 cycle
04064B B7          0002*M1     or a ; clear flags ; 1 cycle
04064C ED 52       0003*M1     sbc hl,de ; 2 cycles
04064E             0004*M1     ; 4 cycles total
04064E 20 03       0170*       jr nz,@div_frac
040650 AF          0171*       xor a
040651 18 0A       0172*       jr @write_frac
040653             0173*   ; now divide the shifted remainder by the divisor
040653             0174*   @div_frac:
040653 ED 5B 6B 06 0175*       ld de,(@ude) ; get back divisor
       04          
040658 CD 7C 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
04065C             0177*   ; load low byte of quotient to low byte of output
04065C 7B          0178*       ld a,e
04065D             0179*   @write_frac:
04065D 32 71 06 04 0180*       ld (div168_out),a
040661             0181*   ; load de with return value
040661 ED 5B 71 06 0182*       ld de,(div168_out)
       04          
040666             0183*   ; load a with any overflow
040666 3A 74 06 04 0184*       ld a,(div168_out+3)
04066A C9          0185*       ret ; ud.e is the 16.8 result
04066B             0186*   @ude: ds 6
040671             0187*   div168_out: ds 4 ; the extra byte is for overflow
040675             0188*   
040675             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040675             0190*   ; perform signed division of 16.8 fixed place values
040675             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040675             0192*   sdiv168:
040675             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040675 CD 6C 04 04 0194*       call hlu_abs
040679 F5          0195*       push af
04067A EB          0196*       ex de,hl
04067B CD 6C 04 04 0197*       call hlu_abs
04067F EB          0198*       ex de,hl
040680 F5          0199*       push af
040681             0200*   ; do the division
040681 CD 34 06 04 0201*       call udiv168 ; de = quotient, hl = remainder
040685             0202*   ; adjust sign of result
040685 F1          0203*       pop af ; sign de
040686 FA 93 06 04 0204*       jp m,@de_neg
04068A F1          0205*       pop af ; sign hl
04068B F0          0206*       ret p ; both positive, nothing to do
04068C             0207*   @hl_neg:
04068C EB          0208*       ex de,hl ; hl = quotient, de = remainder
04068D CD 7C 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040691 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040692 C9          0211*       ret
040693             0212*   @de_neg:
040693 F1          0213*       pop af
040694 F8          0214*       ret m ; both negative, nothing to do
040695 EB          0215*       ex de,hl ; hl = quotient, de = remainder
040696 CD 7C 04 04 0216*       call neg_hlu ; result is negative
04069A EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
04069B C9          0218*       ret
04069C             0219*   
04069C             0220*   ; convert signed angles from a 360 to 256 degree circle
04069C             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
04069C             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
04069C             0223*   ; destroys: TODO
04069C             0224*   deg_360_to_256:
04069C D5          0225*       push de ; preserve de
04069D             0226*   ; make angle positive and store sign flag
04069D CD 6C 04 04 0227*       call hlu_abs
0406A1 F5          0228*       push af
0406A2             0229*   ; multiply by coversion factor of 256/360
0406A2 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
0406A6 CD 08 06 04 0231*       call umul168 ; uh.l = uh.l * 0.711
0406AA             0232*   ; restore sign flag and adjust output accordingly
0406AA F1          0233*       pop af
0406AB F2 B3 06 04 0234*       jp p,@pos ; positive number
0406AF CD 7C 04 04 0235*       call neg_hlu
0406B3             0236*   @pos:
0406B3             0237*   ; restore de and return uh.l as the result
0406B3 D1          0238*       pop de
0406B4 C9          0239*       ret
0406B5             0240*   
0406B5             0241*   ; convert signed angles from a 256 to 360 degree circle
0406B5             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
0406B5             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
0406B5             0244*   ; destroys: TODO
0406B5             0245*   deg_256_to_360:
0406B5 D5          0246*       push de ; preserve de
0406B6             0247*   ; make angle positive and store sign flag
0406B6 CD 6C 04 04 0248*       call hlu_abs
0406BA F5          0249*       push af
0406BB             0250*   ; multiply by coversion factor of 360/256
0406BB 11 68 01 00 0251*       ld de,0x000168 ; 1.406
0406BF CD 08 06 04 0252*       call umul168 ; uh.l = uh.l * 1.406
0406C3             0253*   ; restore sign flag and adjust output accordingly
0406C3 F1          0254*       pop af
0406C4 F2 CC 06 04 0255*       jp p,@pos ; positive number
0406C8 CD 7C 04 04 0256*       call neg_hlu
0406CC             0257*   @pos:
0406CC             0258*   ; restore de and return uh.l as the result
0406CC D1          0259*       pop de
0406CD C9          0260*       ret
0406CE             0261*   
0406CE             0262*   ; fixed 16.8 routine
0406CE             0263*   ; cos(uh.l) --> uh.l
0406CE             0264*   ; destroys: f, hl
0406CE             0265*   cos168:
0406CE D5          0266*       push de ; preserve de
0406CF             0267*   ; for cos we simply increment the angle by 90 degrees
0406CF             0268*   ; or 0x004000 in 16.8 degrees256
0406CF             0269*   ; which makes it a sin problem
0406CF 11 00 40 00 0270*       ld de,0x004000
0406D3 19          0271*       add hl,de ; modulo 256 happens below
0406D4 D1          0272*       pop de ; restore de
0406D5             0273*   ; fall through to sin168
0406D5             0274*   
0406D5             0275*   ; ---------------------
0406D5             0276*   ; fixed 16.8 routine
0406D5             0277*   ; sin(uh.l) --> uh.l
0406D5             0278*   ; destroys: f, hl
0406D5             0279*   sin168:
0406D5 D5          0280*       push de
0406D6             0281*   ; handle negative angles appropriately
0406D6 CD 6C 04 04 0282*       call hlu_abs
0406DA F2 E3 06 04 0283*       jp p,@F
0406DE 11 00 00 FF 0284*       ld de,-256*256
0406E2 19          0285*       add hl,de
0406E3             0286*   @@:
0406E3 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
0406E5 ED 6C       0288*       mlt hl
0406E7 11 9B 09 04 0289*       ld de,sin_lut_168 ; grab the lut address
0406EB 19          0290*       add hl,de ; bump hl by the index
0406EC ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
0406EE D1          0292*       pop de
0406EF C9          0293*       ret
0406F0             0294*   
0406F0             0295*   ; 16.8 fixed inputs / outputs
0406F0             0296*   ; takes: uh.l as angle in degrees 256
0406F0             0297*   ;        ud.e as radius
0406F0             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0406F0             0299*   ;        displacements from origin (0,0)
0406F0             0300*   ; destroys: everything except indexes
0406F0             0301*   polar_to_cartesian:
0406F0             0302*   ; back up input parameters
0406F0 22 1F 07 04 0303*       ld (@angle), hl
0406F4 ED 53 22 07 0304*       ld (@radius), de
       04          
0406F9             0305*   ; compute dx = sin(uh.l) * ud.e
0406F9 CD D5 06 04 0306*       call sin168 ; uh.l = sin(uh.l)
0406FD ED 5B 22 07 0307*       ld de,(@radius)
       04          
040702 CD 11 06 04 0308*       call smul168 ; uh.l = dx
040706 E5          0309*       push hl
040707             0310*   ; compute dy = -cos(uh.l) * ud.e
040707 2A 1F 07 04 0311*       ld hl,(@angle)
04070B CD CE 06 04 0312*       call cos168 ; uh.l = cos(uh.l)
04070F ED 5B 22 07 0313*       ld de,(@radius)
       04          
040714 CD 11 06 04 0314*       call smul168 ; uh.l = dy
040718 CD 7C 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
04071C EB          0316*       ex de,hl ; de = dy for output
04071D C1          0317*       pop bc ; bc = dx for output
04071E             0318*   ; and out
04071E C9          0319*       ret
04071F             0320*   @angle: ds 3
040722             0321*   @radius: ds 3
040725             0322*   
040725             0323*   ; 16.8 fixed inputs / outputs
040725             0324*   ; inputs: ub.c as dx, ud.e as dy
040725             0325*   ;        displacements from origin (0,0)
040725             0326*   ; returns: uh.l as angle in degrees 256
040725             0327*   ;        ud.e as radius
040725             0328*   ; destroys: everything except indexes
040725             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040725 ED 43 7E 07 0330*       ld (dx168),bc ; dx argument for distance168
       04          
04072A ED 53 84 07 0331*       ld (dy168),de ; dy argument for distance168
       04          
04072F             0332*   ; compute radius
04072F CD 8A 07 04 0333*       call distance168 ; uh.l = radius
040733 E5          0334*       push hl ; save radius
040734             0335*   ; compute angle
040734 ED 4B 7E 07 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040739 ED 5B 84 07 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
04073E CD EA 07 04 0338*       call atan2_168fast ; uh.l = angle
040742             0339*   ; return result
040742 D1          0340*       pop de ; de = radius (was hl)
040743 C9          0341*       ret
040744             0342*   ; end cartesian_to_polar
040744             0343*   
040744             0344*   ; 16.8 fixed inputs / outputs
040744             0345*   ; inputs: ub.c as dx, ud.e as dy
040744             0346*   ;        displacements from origin (0,0)
040744             0347*   ; returns: uh.l as angle in degrees 256
040744             0348*   ;        ud.e as radius
040744             0349*   ; destroys: everything except indexes
040744             0350*   ; note: uses distance168sm which is more accurate for small deltas
040744             0351*   cartesian_to_polar_sm:
040744 ED 43 7E 07 0352*       ld (dx168),bc ; dx argument for distance168
       04          
040749 ED 53 84 07 0353*       ld (dy168),de ; dy argument for distance168
       04          
04074E             0354*   ; compute radius
04074E CD C5 07 04 0355*       call distance168sm ; uh.l = radius
040752 E5          0356*       push hl ; save radius
040753             0357*   ; compute angle
040753 ED 4B 7E 07 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040758 ED 5B 84 07 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
04075D CD EA 07 04 0360*       call atan2_168fast ; uh.l = angle
040761             0361*   ; return result
040761 D1          0362*       pop de ; de = radius (was hl)
040762 C9          0363*       ret
040763             0364*   ; end cartesian_to_polar
040763             0365*   
040763             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040763             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040763             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040763             0369*   ;         also populates scratch locations dx168 and dy168
040763             0370*   ; destroys: a,hl,bc,de
040763             0371*   dxy168:
040763             0372*   ; compute dx = x1-x0
040763 AF          0373*       xor a ; clear carry
040764 DD E5       0374*       push ix ; move ix to hl via the stack
040766 E1          0375*       pop hl ; hl = x1
040767 ED 42       0376*       sbc hl,bc ; hl = dx
040769 22 7E 07 04 0377*       ld (dx168),hl ; dx to scratch
04076D             0378*   ; compute dy = y1-y0
04076D AF          0379*       xor a ; clear carry
04076E FD E5       0380*       push iy ; move iy to hl via the stack
040770 E1          0381*       pop hl ; hl = y1
040771 ED 52       0382*       sbc hl,de ; hl = dy
040773 22 84 07 04 0383*       ld (dy168),hl ; dy to scratch
040777             0384*   ; populate output registers and return
040777 EB          0385*       ex de,hl ; ud.e = dy
040778 ED 4B 7E 07 0386*       ld bc,(dx168) ; ub.c = dx
       04          
04077D C9          0387*       ret
04077E 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
040784 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
04078A             0390*   
04078A             0391*   ; compute the euclidian distance between two cartesian coordinates
04078A             0392*   ; using the formula d = sqrt(dx^2+dy^2)
04078A             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04078A             0394*   ; output; uh.l is the 16.8 fixed format distance
04078A             0395*   ;         also populates scratch locations dx168 and dy168
04078A             0396*   ; destroys: a,hl,bc,de
04078A             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04078A             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
04078A             0399*   distance168:
04078A             0400*   ; compute dy^2
04078A 2A 84 07 04 0401*       ld hl,(dy168)
04078E CD 6C 04 04 0402*       call hlu_abs
040792             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
040792             0404*       SRL_UHL ; make integer to avoid overflow
040792 3B          0001*M1     dec sp ; 1 cycle
040793 E5          0002*M1     push hl ; 4 cycles
040794 33          0003*M1     inc sp ; 1 cycle
040795 E1          0004*M1     pop hl ; 4 cycles
040796 23          0005*M1     inc hl ; 1 cycle
040797 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040799             0007*M1     ; 13 cycles total
040799 E5          0405*       push hl
04079A D1          0406*       pop de
04079B CD 63 03 04 0407*       call umul24 ; hl = dy^2
04079F E5          0408*       push hl ; save dy^2
0407A0             0409*   ; compute dx^2
0407A0 2A 7E 07 04 0410*       ld hl,(dx168)
0407A4 CD 6C 04 04 0411*       call hlu_abs
0407A8             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
0407A8             0413*       SRL_UHL ; make integer to avoid overflow
0407A8 3B          0001*M1     dec sp ; 1 cycle
0407A9 E5          0002*M1     push hl ; 4 cycles
0407AA 33          0003*M1     inc sp ; 1 cycle
0407AB E1          0004*M1     pop hl ; 4 cycles
0407AC 23          0005*M1     inc hl ; 1 cycle
0407AD 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0407AF             0007*M1     ; 13 cycles total
0407AF E5          0414*       push hl
0407B0 D1          0415*       pop de
0407B1 CD 63 03 04 0416*       call umul24 ; hl = dx^2
0407B5             0417*   ; add dx^2 and dy^2
0407B5 D1          0418*       pop de ; de = dy^2 (was hl)
0407B6 19          0419*       add hl,de ; hl = dx^2 + dy^2
0407B7             0420*   ; compute the square root
0407B7 CD B5 08 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407BB EB          0422*       ex de,hl ; hl = distance
0407BC             0423*       hlu_mul256 ; convert back to 16.8 fixed
0407BC 29          0001*M1     add hl,hl ; * 2
0407BD 29          0002*M1     add hl,hl ; * 4
0407BE 29          0003*M1     add hl,hl ; * 8
0407BF 29          0004*M1     add hl,hl ; * 16
0407C0 29          0005*M1     add hl,hl ; * 32
0407C1 29          0006*M1     add hl,hl ; * 64
0407C2 29          0007*M1     add hl,hl ; * 128
0407C3 29          0008*M1     add hl,hl ; * 256
0407C4 C9          0424*       ret
0407C5             0425*   
0407C5             0426*   ; compute the euclidian distance between two cartesian coordinates
0407C5             0427*   ; using the formula d = sqrt(dx^2+dy^2)
0407C5             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0407C5             0429*   ; output; uh.l is the 16.8 fixed format distance
0407C5             0430*   ;         also populates scratch locations dx168 and dy168
0407C5             0431*   ; destroys: a,hl,bc,de
0407C5             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
0407C5             0433*   ;       making it more accurate for small deltas,
0407C5             0434*   ;       but will overflow if used for screen-sized deltas
0407C5             0435*   distance168sm:
0407C5             0436*   ; compute dy^2
0407C5 2A 84 07 04 0437*       ld hl,(dy168)
0407C9 CD 6C 04 04 0438*       call hlu_abs
0407CD E5          0439*       push hl
0407CE D1          0440*       pop de
0407CF CD 63 03 04 0441*       call umul24 ; hl = dy^2
0407D3 E5          0442*       push hl ; save dy^2
0407D4             0443*   ; compute dx^2
0407D4 2A 7E 07 04 0444*       ld hl,(dx168)
0407D8 CD 6C 04 04 0445*       call hlu_abs
0407DC E5          0446*       push hl
0407DD D1          0447*       pop de
0407DE CD 63 03 04 0448*       call umul24 ; hl = dx^2
0407E2             0449*   ; add dx^2 and dy^2
0407E2 D1          0450*       pop de ; de = dy^2 (was hl)
0407E3 19          0451*       add hl,de ; hl = dx^2 + dy^2
0407E4             0452*   ; compute the square root
0407E4 CD B5 08 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407E8 EB          0454*       ex de,hl ; hl = distance
0407E9 C9          0455*       ret
0407EA             0456*   
0407EA             0457*   ; atan2_(ub.c,ud.e) --> uh.l
0407EA             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0407EA             0459*   ;   whether inputs are integers or fractional doesn't matter
0407EA             0460*   ;   so long as the sign bit of the upper byte is correct
0407EA             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
0407EA             0462*   ; angles are COMPASS HEADINGS based on
0407EA             0463*   ; screen coordinate conventions,where the y axis is flipped
0407EA             0464*   ; #E0 224      0       32 #20
0407EA             0465*   ;        -x,-y | +x,-y
0407EA             0466*   ; #C0 192------+------ 64 #40
0407EA             0467*   ;        -x,+y | +x,+y
0407EA             0468*   ; #A0 160   128 #80   96 #60
0407EA             0469*   atan2_168fast:
0407EA             0470*   ; get signs and make everything positive
0407EA             0471*   ; get abs(x) and store its original sign
0407EA C5          0472*       push bc
0407EB E1          0473*       pop hl
0407EC CD 6C 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
0407F0 E5          0475*       push hl ; store abs(x)
0407F1 C1          0476*       pop bc ; bc = abs(x)
0407F2 F5          0477*       push af ; store sign of x
0407F3             0478*   ; get abs(y) and store its original sign
0407F3 EB          0479*       ex de,hl ; hl = y
0407F4 CD 6C 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
0407F8 EB          0481*       ex de,hl ; de = abs(y)
0407F9 F5          0482*       push af ; store sign of y
0407FA             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0407FA             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
0407FA AF          0485*       xor a ; clear the carry flag
0407FB D5          0486*       push de
0407FC E1          0487*       pop hl
0407FD ED 42       0488*       sbc hl,bc
0407FF F5          0489*       push af ; save sign of de - bc
040800 F2 09 08 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
040804             0491*   ; otherwise we swap bc and de
040804 C5          0492*       push bc
040805 E1          0493*       pop hl
040806 EB          0494*       ex de,hl
040807 E5          0495*       push hl
040808 C1          0496*       pop bc
040809             0497*   @1:
040809             0498*   ; now we're ready to snag our preliminary result
040809 C5          0499*       push bc
04080A E1          0500*       pop hl
04080B CD 79 08 04 0501*       call atan_168fast ; uh.l comes back with prelim result
04080F             0502*   ; now we adjust uh.l based on sign of de - bc
04080F F1          0503*       pop af
040810 F2 1C 08 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
040814 EB          0505*       ex de,hl
040815 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
040819 AF          0507*       xor a ; clear the carry flag
04081A ED 52       0508*       sbc hl,de
04081C             0509*   @2:
04081C             0510*   ; adjust the result based on quadrant
04081C             0511*   ; #E0 224      0       32 #20
04081C             0512*   ;        -x,-y | +x,-y
04081C             0513*   ; #C0 192------+------ 64 #40
04081C             0514*   ;        -x,+y | +x,+y
04081C             0515*   ; #A0 160   128 #80   96 #60
04081C F1          0516*       pop af ; sign of y
04081D CA 5A 08 04 0517*       jp z,@y_zero
040821 F2 3A 08 04 0518*       jp p,@y_pos
040825             0519*   ; y neg,check x
040825 F1          0520*       pop af ; sign of x
040826 CA 34 08 04 0521*       jp z,@y_neg_x_zero
04082A F2 39 08 04 0522*       jp p,@y_neg_x_pos
04082E             0523*   ; y neg,x neg
04082E             0524*   ; angle is 128 to 256 (270 to 360)
04082E             0525*   ; negating the intermediate does the trick
04082E CD 7C 04 04 0526*       call neg_hlu
040832 18 31       0527*       jr @zero_hlu
040834             0528*   
040834             0529*   @y_neg_x_zero:
040834             0530*   ; y neg,x zero
040834             0531*   ; angle is 0
040834 21 00 00 00 0532*       ld hl,0
040838 C9          0533*       ret
040839             0534*   @y_neg_x_pos:
040839             0535*   ; y neg,x pos
040839             0536*   ; angle is 0 to 64 (0 to 90)
040839             0537*   ; so we're good
040839 C9          0538*       ret
04083A             0539*   
04083A             0540*   @y_pos:
04083A F1          0541*       pop af ; sign of x
04083B CA 4A 08 04 0542*       jp z,@y_pos_x_zero
04083F F2 4F 08 04 0543*       jp p,@y_pos_x_pos
040843             0544*   ; y pos,x neg
040843             0545*   ; angle is 128 to 192 (180-270)
040843             0546*   ; so we add 128 to intermediate
040843 11 00 80 00 0547*       ld de,128*256
040847 19          0548*       add hl,de
040848 18 1B       0549*       jr @zero_hlu
04084A             0550*   @y_pos_x_zero:
04084A             0551*   ; y pos,x zero
04084A             0552*   ; angle is 128 (180)
04084A 21 00 80 00 0553*       ld hl,128*256
04084E C9          0554*       ret
04084F             0555*   @y_pos_x_pos:
04084F             0556*   ; y pos,x pos
04084F             0557*   ; angle is 64 to 128 (90 to 180)
04084F             0558*   ; neg the intermediate and add 180 degrees
04084F CD 7C 04 04 0559*       call neg_hlu
040853 11 00 80 00 0560*       ld de,128*256
040857 19          0561*       add hl,de
040858 18 0B       0562*       jr @zero_hlu
04085A             0563*   
04085A             0564*   @y_zero:
04085A F1          0565*       pop af ; sign of x
04085B FA 60 08 04 0566*       jp m,@y_zero_x_neg
04085F             0567*   ; y zero,x pos
04085F             0568*   ; angle is 64 (90),nothing to do
04085F C9          0569*       ret
040860             0570*   @y_zero_x_neg:
040860             0571*   ; y zero ,x neg
040860             0572*   ; angle is 192 (270)
040860 21 00 C0 00 0573*       ld hl,192*256
040864 C9          0574*       ret
040865             0575*   @zero_hlu:
040865 AF          0576*       xor a
040866 22 73 08 04 0577*       ld (@scratch),hl
04086A 32 75 08 04 0578*       ld (@scratch+2),a
04086E 2A 73 08 04 0579*       ld hl,(@scratch)
040872 C9          0580*       ret
040873             0581*   @scratch: ds 6
040879             0582*   
040879             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040879             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040879             0585*   ; destroys: a,hl,bc,de
040879             0586*   ; note: only works for angles from 0 to 32 (45) degrees
040879             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040879             0588*   atan_168fast:
040879             0589*   ; because we use compass headings instead of geometric angles
040879             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040879             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040879 CD 34 06 04 0592*       call udiv168 ; ud.e = dx/dy
04087D EB          0593*       ex de,hl ; uh.l = dx/dy
04087E             0594*   ; test uh.l for 0
04087E 19          0595*       add hl,de
04087F B7          0596*       or a
040880 ED 52       0597*       sbc hl,de
040882 28 22       0598*       jr z,@is_zero
040884             0599*   ; test uh.l for 1
040884 AF          0600*       xor a ; clear carry
040885 EB          0601*       ex de,hl
040886 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
04088A ED 52       0603*       sbc hl,de
04088C 28 13       0604*       jr z,@is_45
04088E EB          0605*       ex de,hl
04088F             0606*   ; no special cases so we move on
04088F             0607*   ; l contains the fractional portion of tan(uh.l)
04088F             0608*   ; we multiply it by three to get our lookup table index
04088F 26 03       0609*       ld h,3
040891 ED 6C       0610*       mlt hl ; index into lut
040893 11 00 00 00 0611*       ld de,0 ; clear deu
040897 54          0612*       ld d,h ; copy hl to de
040898 5D          0613*       ld e,l ; de contains our index
040899 21 9E 0C 04 0614*       ld hl,atan_lut_168 ; grab the lut address
04089D 19          0615*       add hl,de ; bump hl by the index
04089E ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
0408A0 C9          0617*       ret ; and out
0408A1             0618*   @is_45:
0408A1 21 00 20 00 0619*       ld hl,32*256
0408A5 C9          0620*       ret
0408A6             0621*   ; for the case tan(0)
0408A6             0622*   @is_zero:
0408A6 21 00 00 00 0623*       ld hl,0*256
0408AA C9          0624*       ret
0408AB             0625*   
0408AB             0626*   ; Expects  ADL mode
0408AB             0627*   ; Inputs:  UH.L
0408AB             0628*   ; Outputs: UH.L is the 16.8 square root
0408AB             0629*   ;          UDE is the integer difference inputHL-DE^2
0408AB             0630*   sqrt168:
0408AB CD B5 08 04 0631*       call sqrt24
0408AF EB          0632*       ex de,hl
0408B0 29          0633*       add hl,hl
0408B1 29          0634*       add hl,hl
0408B2 29          0635*       add hl,hl
0408B3 29          0636*       add hl,hl
0408B4 C9          0637*       ret
0408B5             0638*   
0408B5             0639*   ; credit: xeda112358
0408B5             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
0408B5             0641*   sqrt24:
0408B5             0642*   ; Expects ADL mode
0408B5             0643*   ; Inputs: HL
0408B5             0644*   ; Outputs: DE is the integer square root
0408B5             0645*   ;  HL is the difference inputHL-DE^2
0408B5             0646*   ;  c flag reset
0408B5 01 00 00 00 0647*       ld bc,0 ; clear bcu
0408B9 11 00 00 00 0648*       ld de,0 ; clear deu
0408BD AF          0649*       xor a
0408BE 45          0650*       ld b,l
0408BF C5          0651*       push bc
0408C0 47          0652*       ld b,a
0408C1 6F          0653*       ld l,a
0408C2             0654*   ; Iteration 1
0408C2 29          0655*       add hl,hl
0408C3 CB 11       0656*       rl c
0408C5 29          0657*       add hl,hl
0408C6 CB 11       0658*       rl c
0408C8 91          0659*       sub c
0408C9 30 04       0660*       jr nc,$+6
0408CB 1C          0661*       inc e
0408CC 1C          0662*       inc e
0408CD 2F          0663*       cpl
0408CE 4F          0664*       ld c,a
0408CF             0665*   ; Iteration 2
0408CF 29          0666*       add hl,hl
0408D0 CB 11       0667*       rl c
0408D2 29          0668*       add hl,hl
0408D3 CB 11       0669*       rl c
0408D5 CB 13       0670*       rl e
0408D7 7B          0671*       ld a,e
0408D8 91          0672*       sub c
0408D9 30 04       0673*       jr nc,$+6
0408DB 1C          0674*       inc e
0408DC 1C          0675*       inc e
0408DD 2F          0676*       cpl
0408DE 4F          0677*       ld c,a
0408DF             0678*   ; Iteration 3
0408DF 29          0679*       add hl,hl
0408E0 CB 11       0680*       rl c
0408E2 29          0681*       add hl,hl
0408E3 CB 11       0682*       rl c
0408E5 CB 13       0683*       rl e
0408E7 7B          0684*       ld a,e
0408E8 91          0685*       sub c
0408E9 30 04       0686*       jr nc,$+6
0408EB 1C          0687*       inc e
0408EC 1C          0688*       inc e
0408ED 2F          0689*       cpl
0408EE 4F          0690*       ld c,a
0408EF             0691*   ; Iteration 4
0408EF 29          0692*       add hl,hl
0408F0 CB 11       0693*       rl c
0408F2 29          0694*       add hl,hl
0408F3 CB 11       0695*       rl c
0408F5 CB 13       0696*       rl e
0408F7 7B          0697*       ld a,e
0408F8 91          0698*       sub c
0408F9 30 04       0699*       jr nc,$+6
0408FB 1C          0700*       inc e
0408FC 1C          0701*       inc e
0408FD 2F          0702*       cpl
0408FE 4F          0703*       ld c,a
0408FF             0704*   ; Iteration 5
0408FF 29          0705*       add hl,hl
040900 CB 11       0706*       rl c
040902 29          0707*       add hl,hl
040903 CB 11       0708*       rl c
040905 CB 13       0709*       rl e
040907 7B          0710*       ld a,e
040908 91          0711*       sub c
040909 30 04       0712*       jr nc,$+6
04090B 1C          0713*       inc e
04090C 1C          0714*       inc e
04090D 2F          0715*       cpl
04090E 4F          0716*       ld c,a
04090F             0717*   ; Iteration 6
04090F 29          0718*       add hl,hl
040910 CB 11       0719*       rl c
040912 29          0720*       add hl,hl
040913 CB 11       0721*       rl c
040915 CB 13       0722*       rl e
040917 7B          0723*       ld a,e
040918 91          0724*       sub c
040919 30 04       0725*       jr nc,$+6
04091B 1C          0726*       inc e
04091C 1C          0727*       inc e
04091D 2F          0728*       cpl
04091E 4F          0729*       ld c,a
04091F             0730*   ; Iteration 7
04091F 29          0731*       add hl,hl
040920 CB 11       0732*       rl c
040922 29          0733*       add hl,hl
040923 CB 11       0734*       rl c
040925 CB 10       0735*       rl b
040927 EB          0736*       ex de,hl
040928 29          0737*       add hl,hl
040929 E5          0738*       push hl
04092A ED 42       0739*       sbc hl,bc
04092C 30 06       0740*       jr nc,$+8
04092E 7C          0741*       ld a,h
04092F 2F          0742*       cpl
040930 47          0743*       ld b,a
040931 7D          0744*       ld a,l
040932 2F          0745*       cpl
040933 4F          0746*       ld c,a
040934 E1          0747*       pop hl
040935 30 02       0748*       jr nc,$+4
040937 23          0749*       inc hl
040938 23          0750*       inc hl
040939 EB          0751*       ex de,hl
04093A             0752*   ; Iteration 8
04093A 29          0753*       add hl,hl
04093B 69          0754*       ld l,c
04093C 60          0755*       ld h,b
04093D ED 6A       0756*       adc hl,hl
04093F ED 6A       0757*       adc hl,hl
040941 EB          0758*       ex de,hl
040942 29          0759*       add hl,hl
040943 ED 52       0760*       sbc hl,de
040945 19          0761*       add hl,de
040946 EB          0762*       ex de,hl
040947 30 04       0763*       jr nc,$+6
040949 ED 52       0764*       sbc hl,de
04094B 13          0765*       inc de
04094C 13          0766*       inc de
04094D             0767*   ; Iteration 9
04094D F1          0768*       pop af
04094E 17          0769*       rla
04094F ED 6A       0770*       adc hl,hl
040951 17          0771*       rla
040952 ED 6A       0772*       adc hl,hl
040954 EB          0773*       ex de,hl
040955 29          0774*       add hl,hl
040956 ED 52       0775*       sbc hl,de
040958 19          0776*       add hl,de
040959 EB          0777*       ex de,hl
04095A 30 04       0778*       jr nc,$+6
04095C ED 52       0779*       sbc hl,de
04095E 13          0780*       inc de
04095F 13          0781*       inc de
040960             0782*   ; Iteration 10
040960 17          0783*       rla
040961 ED 6A       0784*       adc hl,hl
040963 17          0785*       rla
040964 ED 6A       0786*       adc hl,hl
040966 EB          0787*       ex de,hl
040967 29          0788*       add hl,hl
040968 ED 52       0789*       sbc hl,de
04096A 19          0790*       add hl,de
04096B EB          0791*       ex de,hl
04096C 30 04       0792*       jr nc,$+6
04096E ED 52       0793*       sbc hl,de
040970 13          0794*       inc de
040971 13          0795*       inc de
040972             0796*   ; Iteration 11
040972 17          0797*       rla
040973 ED 6A       0798*       adc hl,hl
040975 17          0799*       rla
040976 ED 6A       0800*       adc hl,hl
040978 EB          0801*       ex de,hl
040979 29          0802*       add hl,hl
04097A ED 52       0803*       sbc hl,de
04097C 19          0804*       add hl,de
04097D EB          0805*       ex de,hl
04097E 30 04       0806*       jr nc,$+6
040980 ED 52       0807*       sbc hl,de
040982 13          0808*       inc de
040983 13          0809*       inc de
040984             0810*   ; Iteration 12
040984 17          0811*       rla
040985 ED 6A       0812*       adc hl,hl
040987 17          0813*       rla
040988 ED 6A       0814*       adc hl,hl
04098A EB          0815*       ex de,hl
04098B 29          0816*       add hl,hl
04098C ED 52       0817*       sbc hl,de
04098E 19          0818*       add hl,de
04098F EB          0819*       ex de,hl
040990 30 04       0820*       jr nc,$+6
040992 ED 52       0821*       sbc hl,de
040994 13          0822*       inc de
040995 13          0823*       inc de
040996 CB 1A       0824*       rr d
040998 CB 1B       0825*       rr e
04099A C9          0826*       ret
04099B             0827*   
04099B             0828*   sin_lut_168:
04099B 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
04099E 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
0409A1 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
0409A4 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
0409A7 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
0409AA 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
0409AD 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
0409B0 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
0409B3 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
0409B6 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
0409B9 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
0409BC 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
0409BF 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
0409C2 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
0409C5 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
0409C8 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
0409CB 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
0409CE 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
0409D1 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
0409D4 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
0409D7 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
0409DA 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
0409DD 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
0409E0 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
0409E3 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
0409E6 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
0409E9 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
0409EC 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
0409EF A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
0409F2 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
0409F5 AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
0409F8 B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
0409FB B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
0409FE B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
040A01 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
040A04 C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
040A07 C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
040A0A C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
040A0D CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
040A10 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
040A13 D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
040A16 D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
040A19 DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
040A1C DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
040A1F E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
040A22 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
040A25 E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
040A28 EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
040A2B EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
040A2E EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
040A31 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
040A34 F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
040A37 F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
040A3A F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
040A3D F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
040A40 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
040A43 FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
040A46 FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
040A49 FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
040A4C FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
040A4F FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
040A52 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
040A55 FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
040A58 FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
040A5B 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
040A5E FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
040A61 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
040A64 FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
040A67 FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
040A6A FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
040A6D FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
040A70 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
040A73 FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
040A76 F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
040A79 F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
040A7C F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
040A7F F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
040A82 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
040A85 F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
040A88 EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
040A8B EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
040A8E EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
040A91 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
040A94 E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
040A97 E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
040A9A DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
040A9D DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
040AA0 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
040AA3 D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
040AA6 D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
040AA9 CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
040AAC C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
040AAF C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
040AB2 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
040AB5 BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
040AB8 B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
040ABB B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
040ABE B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
040AC1 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
040AC4 A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
040AC7 A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
040ACA 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
040ACD 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
040AD0 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
040AD3 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
040AD6 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
040AD9 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
040ADC 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
040ADF 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
040AE2 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
040AE5 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
040AE8 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
040AEB 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
040AEE 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
040AF1 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
040AF4 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
040AF7 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
040AFA 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
040AFD 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
040B00 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
040B03 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
040B06 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
040B09 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
040B0C 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
040B0F 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
040B12 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
040B15 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
040B18 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
040B1B 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
040B1E FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
040B21 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
040B24 EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
040B27 E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
040B2A E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
040B2D DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
040B30 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
040B33 CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
040B36 C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
040B39 C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040B3C BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
040B3F B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040B42 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040B45 AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
040B48 A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040B4B 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
040B4E 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
040B51 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
040B54 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
040B57 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
040B5A 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
040B5D 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
040B60 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
040B63 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
040B66 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
040B69 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
040B6C 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
040B6F 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
040B72 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
040B75 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
040B78 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
040B7B 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
040B7E 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
040B81 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
040B84 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
040B87 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
040B8A 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
040B8D 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
040B90 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
040B93 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
040B96 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
040B99 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
040B9C 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
040B9F 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
040BA2 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
040BA5 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
040BA8 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
040BAB 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
040BAE 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
040BB1 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
040BB4 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
040BB7 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
040BBA 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
040BBD 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
040BC0 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
040BC3 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
040BC6 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
040BC9 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
040BCC 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
040BCF 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
040BD2 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
040BD5 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
040BD8 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
040BDB 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
040BDE 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
040BE1 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
040BE4 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
040BE7 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
040BEA 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
040BED 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
040BF0 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
040BF3 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
040BF6 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
040BF9 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
040BFC 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
040BFF 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
040C02 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
040C05 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
040C08 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
040C0B 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
040C0E 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
040C11 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
040C14 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
040C17 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
040C1A 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
040C1D 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
040C20 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
040C23 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
040C26 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
040C29 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
040C2C 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
040C2F 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
040C32 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
040C35 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
040C38 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
040C3B 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
040C3E 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
040C41 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
040C44 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
040C47 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
040C4A 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
040C4D 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
040C50 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
040C53 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
040C56 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
040C59 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
040C5C 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
040C5F 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
040C62 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
040C65 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
040C68 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
040C6B 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
040C6E A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040C71 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
040C74 B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040C77 B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040C7A BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
040C7D C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040C80 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040C83 CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
040C86 D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040C89 DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
040C8C E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040C8F E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040C92 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
040C95 F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040C98 FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
040C9B 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040C9E             1086*   
040C9E             1087*   atan_lut_168:
040C9E 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
040CA1 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
040CA4 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
040CA7 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
040CAA A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
040CAD CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
040CB0 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
040CB3 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
040CB6 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
040CB9 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
040CBC 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
040CBF BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
040CC2 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
040CC5 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
040CC8 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
040CCB 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
040CCE 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
040CD1 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
040CD4 DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
040CD7 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
040CDA 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
040CDD 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
040CE0 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
040CE3 A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
040CE6 CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
040CE9 F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
040CEC 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
040CEF 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
040CF2 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
040CF5 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
040CF8 C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
040CFB E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
040CFE 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
040D01 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
040D04 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
040D07 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
040D0A B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
040D0D D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
040D10 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
040D13 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
040D16 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
040D19 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
040D1C A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
040D1F C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
040D22 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
040D25 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
040D28 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
040D2B 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
040D2E 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
040D31 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
040D34 DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
040D37 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
040D3A 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
040D3D 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
040D40 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
040D43 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
040D46 C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
040D49 ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
040D4C 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
040D4F 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
040D52 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
040D55 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
040D58 AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
040D5B D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
040D5E FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
040D61 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
040D64 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
040D67 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
040D6A 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
040D6D BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
040D70 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
040D73 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
040D76 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
040D79 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
040D7C 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
040D7F 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
040D82 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
040D85 E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
040D88 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
040D8B 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
040D8E 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
040D91 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
040D94 A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
040D97 C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
040D9A EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
040D9D 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
040DA0 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
040DA3 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
040DA6 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
040DA9 A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
040DAC C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
040DAF EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
040DB2 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
040DB5 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
040DB8 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
040DBB 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
040DBE 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
040DC1 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
040DC4 E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
040DC7 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
040DCA 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
040DCD 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
040DD0 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
040DD3 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
040DD6 B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
040DD9 DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
040DDC FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
040DDF 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
040DE2 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
040DE5 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
040DE8 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
040DEB AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
040DEE CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
040DF1 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
040DF4 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
040DF7 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
040DFA 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
040DFD 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
040E00 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
040E03 BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
040E06 DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
040E09 FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
040E0C 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
040E0F 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
040E12 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
040E15 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
040E18 A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
040E1B C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
040E1E E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
040E21 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
040E24 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
040E27 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
040E2A 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
040E2D 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
040E30 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
040E33 C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
040E36 E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
040E39 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
040E3C 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
040E3F 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
040E42 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
040E45 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
040E48 A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
040E4B C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
040E4E E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
040E51 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
040E54 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
040E57 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
040E5A 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
040E5D 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
040E60 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
040E63 B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
040E66 D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
040E69 F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
040E6C 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
040E6F 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
040E72 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
040E75 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
040E78 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
040E7B A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
040E7E C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
040E81 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
040E84 FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
040E87 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
040E8A 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
040E8D 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
040E90 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
040E93 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
040E96 A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
040E99 C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
040E9C E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
040E9F FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
040EA2 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
040EA5 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
040EA8 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
040EAB 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
040EAE 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
040EB1 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
040EB4 C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
040EB7 DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
040EBA F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
040EBD 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
040EC0 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
040EC3 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
040EC6 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
040EC9 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
040ECC 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
040ECF B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
040ED2 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
040ED5 E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
040ED8 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
040EDB 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
040EDE 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
040EE1 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
040EE4 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
040EE7 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
040EEA 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
040EED B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
040EF0 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
040EF3 EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
040EF6 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
040EF9 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
040EFC 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
040EFF 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
040F02 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
040F05 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
040F08 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
040F0B B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
040F0E CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
040F11 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
040F14 FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
040F17 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
040F1A 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
040F1D 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
040F20 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
040F23 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
040F26 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
040F29 A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
040F2C BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
040F2F D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
040F32 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
040F35 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
040F38 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
040F3B 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
040F3E 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
040F41 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
040F44 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
040F47 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
040F4A A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
040F4D BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
040F50 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
040F53 E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
040F56 FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
040F59 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
040F5C 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
040F5F 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
040F62 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
040F65 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
040F68 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
040F6B 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
040F6E AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
040F71 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
040F74 DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
040F77 F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
040F7A 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
040F7D 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
040F80 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
040F83 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
040F86 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
040F89 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
040F8C 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
040F8F 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
040F92 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
040F95 C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
040F98 D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
040F9B EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
040F9E 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
040FA1             0036        include "fonts.inc"
040FA1             0001*   fonts_load:
040FA1 DD 21 E3 21 0002*       ld ix,font_list ; pointer to font list lookup
       04          
040FA6 06 0D       0003*       ld b,num_fonts ; loop counter
040FA8             0004*   
040FA8             0005*   @load_loop:
040FA8 C5          0006*       push bc ; save loop counter
040FA9             0007*   
040FA9             0008*   ; load font into a buffer
040FA9 DD 27 06    0009*       ld hl,(ix+font_list_bufferId)
040FAC DD 31 09    0010*       ld iy,(ix+font_list_filename)
040FAF CD D5 14 04 0011*       call vdu_load_buffer_from_file
040FB3             0012*   
040FB3             0013*   ; create font from buffer
040FB3 DD 27 06    0014*       ld hl,(ix+font_list_bufferId)
040FB6 DD 5E 00    0015*       ld e,(ix+font_list_width)
040FB9 DD 56 03    0016*       ld d,(ix+font_list_height)
040FBC 3E 00       0017*       ld a,0 ; flags
040FBE CD 58 16 04 0018*       call vdu_font_create
040FC2             0019*   
040FC2             0020*   ; select font
040FC2 DD 27 06    0021*       ld hl,(ix+font_list_bufferId)
040FC5 3E 01       0022*       ld a,1 ; flags
040FC7 CD 3E 16 04 0023*       call vdu_font_select
040FCB             0024*   
040FCB             0025*   ; ; debug print filename
040FCB             0026*   ;     call printNewLine
040FCB             0027*   ;     ld hl,(ix+font_list_filename)
040FCB             0028*   ;     call printString
040FCB             0029*   
040FCB             0030*   ; advance font_list pointer to next record
040FCB ED 32 0C    0031*       lea ix,ix+font_list_record_size
040FCE             0032*   
040FCE             0033*   ; restore loop counter
040FCE C1          0034*       pop bc
040FCF 10 D7       0035*       djnz @load_loop
040FD1             0036*   
040FD1             0037*   ; all done
040FD1 C9          0038*       ret
040FD2             0037        include "images.inc"
040FD2             0001*   image_type: equ 0
040FD2             0002*   image_width: equ image_type+3
040FD2             0003*   image_height: equ image_width+3
040FD2             0004*   image_filesize: equ image_height+3
040FD2             0005*   image_filename: equ image_filesize+3
040FD2             0006*   image_bufferId: equ image_filename+3
040FD2             0007*   image_record_size: equ image_bufferId+3
040FD2             0008*   
040FD2 00 00 00    0009*   cur_image_list: dl 0
040FD5 00 00 00    0010*   cur_filename: dl 0
040FD8 00 00 00    0011*   cur_buffer_id: dl 0
040FDB             0012*   
040FDB             0013*   img_load_init:
040FDB             0014*   ; initialize logo's position parameters
040FDB 21 00 00 00 0015*       ld hl,0
040FDF 22 90 10 04 0016*       ld (logo_xvel),hl
040FE3 22 93 10 04 0017*       ld (logo_xpos),hl
040FE7             0018*   ; begin 16.8 maths to determine logo's y position and velocity
040FE7 21 00 E0 00 0019*       ld hl,224*256
040FEB 22 99 10 04 0020*       ld (logo_ypos),hl
040FEF EB          0021*       ex de,hl
040FF0 21 00 28 FF 0022*       ld hl,-240+24*256
040FF4             0023*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
040FF4 11 00 8C 01 0024*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
040FF8 CD 75 06 04 0025*       call sdiv168 ; ud.e = distance / num images = y velocity
040FFC ED 53 96 10 0026*       ld (logo_yvel),de
       04          
041001             0027*   ; all done
041001 C9          0028*       ret
041002             0029*   
041002             0030*   ; inputs: bc is the number of images to load, cur_image_list set
041002             0031*   img_load_main:
041002             0032*   ; back up loop counter
041002 C5          0033*       push bc
041003             0034*   
041003             0035*   ; load the next image
041003 CD 3A 10 04 0036*       call load_next_image
041007             0037*   
041007             0038*   ; plot the background
041007 CD A0 12 04 0039*       call vdu_cls
04100B 21 2C 00 00 0040*       ld hl,BUF_SPLASH_BG
04100F CD 95 13 04 0041*       call vdu_buff_select
041013 01 00 00 00 0042*       ld bc,0
041017 11 00 00 00 0043*       ld de,0
04101B CD F1 16 04 0044*       call vdu_plot_bmp
04101F             0045*   
04101F             0046*   ; ; draw the most recently loaded image
04101F             0047*   ; 	ld hl,(cur_buffer_id)
04101F             0048*   ; 	call vdu_buff_select
04101F             0049*   ; 	ld bc,0
04101F             0050*   ; 	ld de,0
04101F             0051*   ; 	call vdu_plot_bmp
04101F             0052*   
04101F             0053*   ; move logo
04101F CD 6B 10 04 0054*       call move_logo
041023             0055*   
041023             0056*   ; print current filename
041023 2A D5 0F 04 0057*       ld hl,(cur_filename)
041027 CD 63 00 04 0058*       call printString
04102B             0059*   
04102B             0060*   ; flip the framebuffer
04102B             0061*       ; call vdu_flip
04102B             0062*   
04102B             0063*   ; decrement loop counter
04102B C1          0064*       pop bc
04102C 0B          0065*       dec bc
04102D 79          0066*       ld a,c
04102E B7          0067*       or a
04102F C2 02 10 04 0068*       jp nz,img_load_main
041033 78          0069*       ld a,b
041034 B7          0070*       or a
041035 C2 02 10 04 0071*       jp nz,img_load_main
041039 C9          0072*       ret
04103A             0073*   
04103A             0074*   load_next_image:
04103A FD 2A D2 0F 0075*       ld iy,(cur_image_list)
       04          
04103F FD E5       0076*       push iy
041041 FD 7E 00    0077*       ld a,(iy+image_type) ; get image type
041044 FD 07 03    0078*       ld bc,(iy+image_width) ; get image width
041047 FD 17 06    0079*       ld de,(iy+image_height) ; get image height
04104A FD 31 09    0080*       ld ix,(iy+image_filesize) ; get image file size
04104D FD 27 0F    0081*       ld hl,(iy+image_bufferId) ; get image bufferId
041050 22 D8 0F 04 0082*       ld (cur_buffer_id),hl
041054 FD 37 0C    0083*       ld iy,(iy+image_filename) ; get image filename
041057 FD 22 D5 0F 0084*       ld (cur_filename),iy
       04          
04105C CD B3 14 04 0085*       call vdu_load_img
041060 FD E1       0086*       pop iy
041062 ED 33 12    0087*       lea iy,iy+image_record_size
041065 FD 22 D2 0F 0088*       ld (cur_image_list),iy
       04          
04106A C9          0089*       ret
04106B             0090*   
04106B             0091*   move_logo:
04106B             0092*   ; activate logo bitmap
04106B 21 2D 00 00 0093*       ld hl, BUF_SPLASH_LOGO
04106F CD 95 13 04 0094*       call vdu_buff_select
041073             0095*   ; update position based on velocity parameters
041073 2A 99 10 04 0096*       ld hl,(logo_ypos)
041077 ED 5B 96 10 0097*       ld de,(logo_yvel)
       04          
04107C 19          0098*       add hl,de
04107D 22 99 10 04 0099*       ld (logo_ypos),hl
041081             0100*   ; draw logo
041081 ED 4B 93 10 0101*       ld bc,(logo_xpos)
       04          
041086 ED 5B 99 10 0102*       ld de,(logo_ypos)
       04          
04108B CD 0D 17 04 0103*       call vdu_plot_bmp168
04108F C9          0104*       ret
041090             0105*   
041090 00 00 00    0106*   logo_xvel: dl 0
041093 00 00 00    0107*   logo_xpos: dl 0
041096             0108*   
041096 00 00 00    0109*   logo_yvel: dl 0
041099 00 00 00    0110*   logo_ypos: dl 0
04109C             0111*   
04109C             0112*   load_ui_images:
04109C             0113*   ; initialize image loading variables
04109C 21 85 5D 04 0114*       ld hl,ui_image_list
0410A0 22 D2 0F 04 0115*       ld (cur_image_list),hl
0410A4             0116*   ; load images
0410A4 06 2E       0117*       ld b,ui_num_images
0410A6             0118*   @loop:
0410A6 C5          0119*       push bc
0410A7 CD 3A 10 04 0120*       call load_next_image
0410AB C1          0121*       pop bc
0410AC 10 F8       0122*       djnz @loop
0410AE C9          0123*       ret
0410AF             0124*   ; end load_ui_images
0410AF             0125*   
0410AF             0126*   load_sprite_images:
0410AF             0127*   ; initialize image loading variables
0410AF 21 45 41 04 0128*       ld hl,sprites_image_list
0410B3 22 D2 0F 04 0129*       ld (cur_image_list),hl
0410B7 01 A3 00 00 0130*       ld bc,sprites_num_images
0410BB             0131*   ; load images
0410BB CD 02 10 04 0132*       call img_load_main
0410BF C9          0133*       ret
0410C0             0134*   ; end load_sprite_images
0410C0             0135*   
0410C0             0136*   load_tilesets:
0410C0             0137*   ; initialize image loading variables
0410C0 21 C8 24 04 0138*       ld hl,tiles_dg_image_list
0410C4 22 D2 0F 04 0139*       ld (cur_image_list),hl
0410C8 01 BB 00 00 0140*       ld bc,tiles_dg_num_images
0410CC             0141*   ; load images
0410CC CD 02 10 04 0142*       call img_load_main
0410D0 C9          0143*       ret
0410D1             0144*   ; end load_tilesets
0410D1             0145*   
0410D1             0146*   load_backgrounds:
0410D1             0147*   ; initialize image loading variables
0410D1 21 30 24 04 0148*       ld hl,bg_image_list
0410D5 22 D2 0F 04 0149*       ld (cur_image_list),hl
0410D9 01 04 00 00 0150*       ld bc,bg_num_images
0410DD             0151*   ; load images
0410DD CD 02 10 04 0152*       call img_load_main
0410E1 C9          0153*       ret
0410E2             0154*   ; end load_backgrounds
0410E2             0155*   
0410E2             0156*   ; ; initialize image loading variables
0410E2             0157*   ;     ld hl,tiles_xevious_image_list
0410E2             0158*   ;     ld (cur_image_list),hl
0410E2             0159*   ;     ld bc,tiles_xevious_num_images
0410E2             0160*   ; ; load images
0410E2             0161*   ;     call img_load_main
0410E2 C9          0162*       ret
0410E3             0038        include "timer.inc"
0410E3             0001*   ; Table 32. Timer Control Registers
0410E3             0002*   ; this constant is the base address of the timer control registers
0410E3             0003*   ; each timer takes three bytes:
0410E3             0004*   ;   0: control register
0410E3             0005*   ;   1: low byte of timer reset value
0410E3             0006*   ;   2: high byte of timer reset value
0410E3             0007*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0410E3             0008*   ; which correctly force the high and upper bytes of the address bus to zero
0410E3             0009*   TMR_CTL:     equ 80h
0410E3             0010*   
0410E3             0011*   ; Timer Control Register Bit Definitions
0410E3             0012*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0410E3             0013*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0410E3             0014*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0410E3             0015*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0410E3             0016*                               ; the TMRx_CTL register is read.
0410E3             0017*   
0410E3             0018*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0410E3             0019*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0410E3             0020*   
0410E3             0021*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0410E3             0022*                               ;  0,and counting stops when the end-of-count value is reached.
0410E3             0023*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0410E3             0024*                               ; written to the counter when the end-of-count value is reached.
0410E3             0025*   
0410E3             0026*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0410E3             0027*   CLK_DIV_256:  equ %00001100 ;
0410E3             0028*   CLK_DIV_64:   equ %00001000 ;
0410E3             0029*   CLK_DIV_16:   equ %00000100 ;
0410E3             0030*   CLK_DIV_4:    equ %00000000 ;
0410E3             0031*   
0410E3             0032*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0410E3             0033*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0410E3             0034*                               ; When a 1 is written to this bit,the values in the reload registers
0410E3             0035*                               ;  are loaded into the downcounter when the timer restarts. The
0410E3             0036*                               ; programmer must ensure that this bit is set to 1 each time
0410E3             0037*                               ; SINGLE-PASS mode is used.
0410E3             0038*   
0410E3             0039*   ; disable/enable the programmable reload timer
0410E3             0040*   PRT_EN_0:     equ %00000000 ;
0410E3             0041*   PRT_EN_1:     equ %00000001 ;
0410E3             0042*   
0410E3             0043*   ; Table 37. Timer Input Source Select Register
0410E3             0044*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0410E3             0045*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0410E3             0046*   ;   00: System clock / CLK_DIV
0410E3             0047*   ;   01: RTC / CLK_DIV
0410E3             0048*   ;   NOTE: these are the values given in the manual,but it may be a typo
0410E3             0049*   ;   10: GPIO port B pin 1.
0410E3             0050*   ;   11: GPIO port B pin 1.
0410E3             0051*   TMR_ISS:   equ 92h ; register address
0410E3             0052*   
0410E3             0053*   ; Table 51. Real-Time Clock Control Register
0410E3             0054*   RTC_CTRL: equ EDh ; register address
0410E3             0055*   
0410E3             0056*   ; alarm interrupt disable/enable
0410E3             0057*   RTC_ALARM_0:    equ %00000000
0410E3             0058*   RTC_ALARM_1:    equ %10000000
0410E3             0059*   
0410E3             0060*   ; interrupt on alarm disable/enable
0410E3             0061*   RTC_INT_ENT_0:  equ %00000000
0410E3             0062*   RTC_INT_ENT_1:  equ %01000000
0410E3             0063*   
0410E3             0064*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0410E3             0065*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0410E3             0066*   
0410E3             0067*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0410E3             0068*                                   ; On-chip 32768 Hz oscillator is enabled.
0410E3             0069*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0410E3             0070*                                   ; On-chip 32768 Hz oscillator is disabled.
0410E3             0071*   
0410E3             0072*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0410E3             0073*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0410E3             0074*   
0410E3             0075*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0410E3             0076*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0410E3             0077*   
0410E3             0078*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0410E3             0079*                                   ; RTC counter is enabled.
0410E3             0080*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0410E3             0081*                                   ; RTC counter is disabled.
0410E3             0082*   
0410E3             0083*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0410E3             0084*   
0410E3             0085*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0410E3             0086*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0410E3 00 00 00    0087*   prt_reload: dl 0x000000
0410E6             0088*   
0410E6             0089*   ; set PRT timer
0410E6             0090*   prt_set:
0410E6 21 00 00 00 0091*       ld hl,0
0410EA 22 34 11 04 0092*       ld (prt_irq_counter),hl
0410EE 2A E3 10 04 0093*       ld hl,(prt_reload)
0410F2 ED 29 84    0094*       out0 ($84),l
0410F5 ED 21 85    0095*   	out0 ($85),h
0410F8             0096*   ; disable timer
0410F8 3E 06       0097*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0410FA ED 39 83    0098*   	out0 ($83),a
0410FD             0099*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0410FD 3E 57       0100*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0410FF ED 39 83    0101*   	out0 ($83),a
041102 C9          0102*       ret
041103             0103*   
041103             0104*   ; ===============================================
041103             0105*   ; PRT Timer Interrupt Handling
041103             0106*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041103             0107*   ; -----------------------------------------------
041103             0108*   prt_irq_init:
041103             0109*       ; set up interrupt vector table 2
041103 21 00 00 00 0110*   	ld hl,0
041107 3A 0C 01 00 0111*   	ld a,($10c)
04110B 6F          0112*   	ld l,a
04110C 3A 0D 01 00 0113*   	ld a,($10d)
041110 67          0114*   	ld h,a
041111             0115*   
041111             0116*   	; skip over CALL ($c3)
041111 23          0117*   	inc hl
041112             0118*   	; load address of jump into vector table 2 (in ram)
041112 ED 27       0119*   	ld hl,(hl)
041114             0120*   
041114             0121*   	; write CALL prt_irq_handler to vector table 2
041114 3E C3       0122*   	ld a,$c3
041116 77          0123*   	ld (hl),a
041117 23          0124*   	inc hl
041118 11 1F 11 04 0125*   	ld de,prt_irq_handler
04111C ED 1F       0126*   	ld (hl),de
04111E             0127*   
04111E C9          0128*       ret
04111F             0129*   
04111F             0130*   prt_irq_handler:
04111F F3          0131*   	di
041120 F5          0132*   	push af
041121 E5          0133*       push hl
041122 ED 38 83    0134*   	in0 a,($83)
041125 2A 34 11 04 0135*   	ld hl,(prt_irq_counter)
041129 23          0136*   	inc hl
04112A 22 34 11 04 0137*   	ld (prt_irq_counter),hl
04112E E1          0138*       pop hl
04112F F1          0139*   	pop af
041130 FB          0140*   	ei
041131 5B ED 4D    0141*   	reti.l
041134             0142*   
041134             0143*   prt_irq_counter:
041134 00 00 00    0144*   	.dl 0
041137             0145*   prt_irq_counter_saved:
041137 00 00 00    0146*       .dl 0
04113A             0147*   
04113A             0148*   prt_loop_reset:
04113A E5          0149*       push hl
04113B 21 00 00 00 0150*   	ld hl,0
04113F 22 34 11 04 0151*   	ld (prt_irq_counter),hl
041143 22 A5 11 04 0152*       ld (prt_loop_counter),hl
041147 22 A8 11 04 0153*       ld (prt_loops),hl
04114B CD E6 10 04 0154*       call prt_set
04114F E1          0155*       pop hl
041150 C9          0156*       ret
041151             0157*   
041151             0158*   prt_loop_start:
041151 E5          0159*       push hl
041152 21 00 00 00 0160*   	ld hl,0
041156 22 34 11 04 0161*   	ld (prt_irq_counter),hl
04115A E1          0162*       pop hl
04115B C9          0163*       ret
04115C             0164*   
04115C             0165*   prt_loop_stop:
04115C E5          0166*       push hl
04115D D5          0167*       push de
04115E 2A 34 11 04 0168*       ld hl,(prt_irq_counter)
041162 ED 5B A5 11 0169*       ld de,(prt_loop_counter)
       04          
041167 19          0170*       add hl,de
041168 22 A5 11 04 0171*       ld (prt_loop_counter),hl
04116C 21 00 00 00 0172*       ld hl,0
041170 22 34 11 04 0173*       ld (prt_irq_counter),hl
041174 2A A8 11 04 0174*       ld hl,(prt_loops)
041178 23          0175*       inc hl
041179 22 A8 11 04 0176*       ld (prt_loops),hl
04117D D1          0177*       pop de
04117E E1          0178*       pop hl
04117F C9          0179*       ret
041180             0180*   
041180             0181*   ; inputs: bc = y,x text coordinates to print
041180             0182*   prt_loop_print:
041180 F5          0183*       push af
041181 E5          0184*       push hl
041182 C5          0185*       push bc
041183 D5          0186*       push de
041184 DD E5       0187*       push ix
041186 FD E5       0188*       push iy
041188 CD 8C 12 04 0189*       call vdu_move_cursor
04118C             0190*   
04118C 2A A5 11 04 0191*       ld hl,(prt_loop_counter)
041190 CD C8 00 04 0192*       call printDec
041194             0193*   
041194 2A A8 11 04 0194*       ld hl,(prt_loops)
041198 CD C8 00 04 0195*       call printDec
04119C             0196*   
04119C FD E1       0197*       pop iy
04119E DD E1       0198*       pop ix
0411A0 D1          0199*       pop de
0411A1 C1          0200*       pop bc
0411A2 E1          0201*       pop hl
0411A3 F1          0202*       pop af
0411A4 C9          0203*       ret
0411A5             0204*   
0411A5             0205*   prt_loop_counter:
0411A5 00 00 00    0206*       .dl 0
0411A8             0207*   prt_loops:
0411A8 00 00 00    0208*       .dl 0
0411AB             0209*   
0411AB             0210*   ; ===============================================
0411AB             0211*   ; Timer functions
0411AB             0212*   ; -----------------------------------------------
0411AB             0213*   ; set a countdown timer
0411AB             0214*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411AB             0215*   ; returns: hl = current time
0411AB             0216*   tmr_set:
0411AB FD 2F 03    0217*       ld (iy+3),hl            ; set time remaining
0411AE             0218*       MOSCALL mos_sysvars     ; ix points to syvars table
0411AE 3E 08       0001*M1 			LD	A, function
0411B0 5B CF       0002*M1 			RST.LIL	08h
0411B2 DD 27 00    0219*       ld hl,(ix+sysvar_time)  ; get current time
0411B5 FD 2F 00    0220*       ld (iy+0),hl            ; set start time
0411B8 C9          0221*       ret
0411B9             0222*   
0411B9             0223*   ; gets time remaining on a countdown timer
0411B9             0224*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411B9             0225*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411B9             0226*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411B9             0227*   tmr_get:
0411B9             0228*       MOSCALL mos_sysvars     ; ix points to syvars table
0411B9 3E 08       0001*M1 			LD	A, function
0411BB 5B CF       0002*M1 			RST.LIL	08h
0411BD DD 17 00    0229*       ld de,(ix+sysvar_time)  ; get current time
0411C0 FD 27 00    0230*       ld hl,(iy+0)            ; get start time
0411C3 AF          0231*       xor a                   ; clear carry
0411C4 ED 52       0232*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411C6 FD 17 03    0233*       ld de,(iy+3)            ; get timer set value
0411C9 AF          0234*       xor a                   ; clear carry
0411CA ED 5A       0235*       adc hl,de               ; hl = time remaining
0411CC             0236*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411CC C9          0237*       ret
0411CD             0238*   
0411CD             0239*   tmr_test: ds 6 ; example of a buffer to hold timer data
0411D3             0240*   
       FF FF FF FF 
       FF FF 
0411D3 00 00 00    0241*   timestamp_now: dl 0
0411D6 00 00 00    0242*   timestamp_old: dl 0
0411D9 00 00 00    0243*   timestamp_chg: dl 0
0411DC             0244*   
0411DC             0245*   ; update the global timestamp from the system clock
0411DC             0246*   ; inputs: none
0411DC             0247*   ; returns: hl = time elapsed in 1/120ths of a second
0411DC             0248*   ;          ix = pointer to syvars table
0411DC             0249*   ; destroys: af,hl,de,ix
0411DC             0250*   timestamp_tick:
0411DC ED 5B D3 11 0251*       ld de,(timestamp_now)   ; get previous time
       04          
0411E1 ED 53 D6 11 0252*       ld (timestamp_old),de   ; save previous time
       04          
0411E6             0253*       MOSCALL mos_sysvars     ; ix points to syvars table
0411E6 3E 08       0001*M1 			LD	A, function
0411E8 5B CF       0002*M1 			RST.LIL	08h
0411EA DD 27 00    0254*       ld hl,(ix+sysvar_time)  ; get current time
0411ED 22 D3 11 04 0255*       ld (timestamp_now),hl   ; save current time
0411F1 AF          0256*       xor a                   ; clear carry
0411F2 ED 52       0257*       sbc hl,de               ; hl = time elapsed
0411F4 22 D9 11 04 0258*       ld (timestamp_chg),hl   ; save elapsed time
0411F8 C9          0259*       ret
0411F9             0260*   
0411F9             0261*   ; set a countdown timer
0411F9             0262*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411F9             0263*   ; requires: timestamp_tick to be called at least once before this function
0411F9             0264*   ; returns: hl = current time
0411F9             0265*   ; destroys: hl
0411F9             0266*   timestamp_tmr_set:
0411F9 FD 2F 03    0267*       ld (iy+3),hl            ; set time remaining
0411FC 2A D3 11 04 0268*       ld hl,(timestamp_now)   ; get current timestamp
041200 FD 2F 00    0269*       ld (iy+0),hl            ; set start time
041203 C9          0270*       ret
041204             0271*   
041204             0272*   ; gets time remaining on a countdown timer following the global timestamp
041204             0273*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041204             0274*   ; requires: timestamp_tick to be called at least once before this function
041204             0275*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041204             0276*   ;          sign flags: pos = time not expired,zero or neg = time expired
041204             0277*   ; destroys: af,hl,de
041204             0278*   timestamp_tmr_get:
041204 ED 5B D3 11 0279*       ld de,(timestamp_now)   ; get current timestamp
       04          
041209 FD 27 00    0280*       ld hl,(iy+0)            ; get start time
04120C AF          0281*       xor a                   ; clear carry
04120D ED 52       0282*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04120F FD 17 03    0283*       ld de,(iy+3)            ; get timer set value
041212 AF          0284*       xor a                   ; clear carry
041213 ED 5A       0285*       adc hl,de               ; hl = time remaining
041215             0286*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041215 C9          0287*       ret
041216             0288*   
041216             0289*   ; set a stopwatch
041216             0290*   ; returns: hl = start time
041216             0291*   ; destroys: hl,ix
041216             0292*   stopwatch_set:
041216             0293*       MOSCALL mos_sysvars     ; ix points to syvars table
041216 3E 08       0001*M1 			LD	A, function
041218 5B CF       0002*M1 			RST.LIL	08h
04121A DD 27 00    0294*       ld hl,(ix+sysvar_time)  ; get current time
04121D 22 32 12 04 0295*       ld (stopwatch_started),hl            ; set start time
041221 C9          0296*       ret
041222             0297*   
041222             0298*   ; gets time elapsed on a stopwatch
041222             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041222             0300*   ; destroys: af,hl,de,ix
041222             0301*   stopwatch_get:
041222             0302*       MOSCALL mos_sysvars     ; ix points to syvars table
041222 3E 08       0001*M1 			LD	A, function
041224 5B CF       0002*M1 			RST.LIL	08h
041226 DD 27 00    0303*       ld hl,(ix+sysvar_time)  ; get current time
041229 ED 5B 32 12 0304*       ld de,(stopwatch_started)            ; get start time
       04          
04122E AF          0305*       xor a                   ; clear carry
04122F ED 52       0306*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041231 C9          0307*       ret
041232             0308*   
041232             0309*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041235             0310*   
041235             0311*   ; ------------------
041235             0312*   ; delay routine
041235             0313*   ; Author: Richard Turrnidge
041235             0314*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041235             0315*   ; routine waits a fixed time,then returns
041235             0316*   ; arrive with A =  the delay byte. One bit to be set only.
041235             0317*   ; eg. ld A,00000100b
041235             0318*   
041235             0319*   multiPurposeDelay:
       FF FF FF 
041235 F5          0320*       push af
041236 C5          0321*       push bc
041237 DD E5       0322*       push ix
041239 47          0323*       ld b,a
04123A 3E 08       0324*       ld a,$08
04123C 5B CF       0325*       RST.LIL	08h                 ; get IX pointer to sysvars
04123E             0326*   
04123E             0327*   waitLoop:
04123E             0328*   
04123E DD 7E 00    0329*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041241             0330*   
041241             0331*                                   ;   we check if bit set is same as last time we checked.
041241             0332*                                   ;   bit 0 - don't use
041241             0333*                                   ;   bit 1 - changes 64 times per second
041241             0334*                                   ;   bit 2 - changes 32 times per second
041241             0335*                                   ;   bit 3 - changes 16 times per second
041241             0336*   
041241             0337*                                   ;   bit 4 - changes 8 times per second
041241             0338*                                   ;   bit 5 - changes 4 times per second
041241             0339*                                   ;   bit 6 - changes 2 times per second
041241             0340*                                   ;   bit 7 - changes 1 times per second
041241 A0          0341*       and b
041242 4F          0342*       ld c,a
041243 3A 54 12 04 0343*       ld a,(oldTimeStamp)
041247 B9          0344*       cp c                        ; is A same as last value?
041248 28 F4       0345*       jr z,waitLoop              ; loop here if it is
04124A 79          0346*       ld a,c
04124B 32 54 12 04 0347*       ld (oldTimeStamp),a        ; set new value
04124F             0348*   
04124F DD E1       0349*       pop ix
041251 C1          0350*       pop bc
041252 F1          0351*       pop af
041253 C9          0352*       ret
041254             0353*   
041254 00          0354*   oldTimeStamp:   .db 00h
041255             0039        include "vdu.inc"
041255             0001*   ; VDU 30: Home cursor
041255             0002*   vdu_home_cursor:
041255 3E 1E       0003*       ld a,30
041257 5B D7       0004*   	rst.lil $10
041259 C9          0005*   	ret
04125A             0006*   
04125A             0007*   vdu_cursor_on:
04125A 21 65 12 04 0008*   	ld hl,@cmd
04125E 01 03 00 00 0009*   	ld bc,@end-@cmd
041262 5B DF       0010*   	rst.lil $18
041264 C9          0011*   	ret
041265             0012*   @cmd:
041265 17 01 01    0013*   	db 23,1,1
041268             0014*   @end:
041268             0015*   
041268             0016*   vdu_cursor_off:
041268 21 73 12 04 0017*   	ld hl,@cmd
04126C 01 03 00 00 0018*   	ld bc,@end-@cmd
041270 5B DF       0019*   	rst.lil $18
041272 C9          0020*   	ret
041273             0021*   @cmd:
041273 17 01 00    0022*   	db 23,1,0
041276             0023*   @end:
041276             0024*   
041276             0025*   ; VDU 5: Write text at graphics cursor
041276             0026*   ; inputs: a is the character to write to the screen
041276             0027*   ; prerequisites: the graphics cursor at the intended position on screen
041276             0028*   ; outputs: see the name of the function
041276             0029*   ; destroys: a, hl, bc
041276             0030*   vdu_char_to_gfx_cursor:
041276 32 86 12 04 0031*   	ld (@arg),a
04127A 21 85 12 04 0032*   	ld hl,@cmd
04127E 01 02 00 00 0033*   	ld bc,@end-@cmd
041282 5B DF       0034*   	rst.lil $18
041284 C9          0035*   	ret
041285 05          0036*   @cmd: db 5
041286 00          0037*   @arg: db 0
041287             0038*   @end:
041287             0039*   ; VDU 9: Move cursor forward one character
041287             0040*   vdu_cursor_forward:
041287 3E 09       0041*       ld a,9
041289 5B D7       0042*   	rst.lil $10
04128B C9          0043*   	ret
04128C             0044*   
04128C             0045*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04128C             0046*   ; inputs: c=x, b=y 8-bit unsigned integers
04128C             0047*   vdu_move_cursor:
04128C ED 43 9D 12 0048*       ld (@x0),bc
       04          
041291 21 9C 12 04 0049*   	ld hl,@cmd
041295 01 03 00 00 0050*   	ld bc,@end-@cmd
041299 5B DF       0051*   	rst.lil $18
04129B C9          0052*   	ret
04129C 1F          0053*   @cmd: 	db 31
04129D 00          0054*   @x0:	db 0
04129E 00          0055*   @y0: 	db 0
04129F 00          0056*   @end: 	db 0 ; padding
0412A0             0057*   
0412A0             0058*   ; VDU 12: Clear text area (CLS)
0412A0             0059*   vdu_cls:
0412A0 3E 0C       0060*       ld a,12
0412A2 5B D7       0061*   	rst.lil $10
0412A4 C9          0062*   	ret
0412A5             0063*   
0412A5             0064*   vdu_flip:
0412A5 21 B0 12 04 0065*   	ld hl,@cmd
0412A9 01 03 00 00 0066*   	ld bc,@end-@cmd
0412AD 5B DF       0067*   	rst.lil $18
0412AF C9          0068*   	ret
0412B0 17 00 C3    0069*   @cmd: db 23,0,0xC3
0412B3             0070*   @end:
0412B3             0071*   
0412B3             0072*   ; VDU 16: Clear graphics area (CLG)
0412B3             0073*   vdu_clg:
0412B3 3E 10       0074*       ld a,16
0412B5 5B D7       0075*   	rst.lil $10
0412B7 C9          0076*   	ret
0412B8             0077*   
0412B8             0078*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0412B8             0079*   ; VDU 23, 7: Scrolling
0412B8             0080*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0412B8             0081*   ; inputs: a, extent; l, direction; h; speed
0412B8             0082*   vdu_scroll_down:
0412B8 32 CD 12 04 0083*   	ld (@extent),a
0412BC 22 CE 12 04 0084*   	ld (@dir),hl ; implicitly populates @speed
0412C0 21 CB 12 04 0085*   	ld hl,@cmd
0412C4 01 05 00 00 0086*   	ld bc,@end-@cmd
0412C8 5B DF       0087*   	rst.lil $18     ;; Sending command to VDP
0412CA C9          0088*   	ret
0412CB 17 07       0089*   @cmd:       db 23,7
0412CD 00          0090*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0412CE 00          0091*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0412CF 00          0092*   @speed:     db 0x00 ; pixels
0412D0 00          0093*   @end:		db 0x00 ; padding
0412D1             0094*   
0412D1             0095*   ; COLOUR MODES
0412D1             0096*   ; Mode	Effect
0412D1             0097*   ; 0	Set on-screen pixel to target colour value
0412D1             0098*   ; 1	OR value with the on-screen pixel
0412D1             0099*   ; 2	AND value with the on-screen pixel
0412D1             0100*   ; 3	XOR value with the on-screen pixel
0412D1             0101*   ; 4	Invert the on-screen pixel
0412D1             0102*   ; 5	No operation
0412D1             0103*   ; 6	AND the inverse of the specified colour with the on-screen pixel
0412D1             0104*   ; 7	OR the inverse of the specified colour with the on-screen pixel
0412D1             0105*   
0412D1             0106*   ; VDU 17, colour: Define text colour (COLOUR)
0412D1             0107*   vdu_colour_text:
0412D1 32 E1 12 04 0108*   	ld (@arg),a
0412D5 21 E0 12 04 0109*   	ld hl,@cmd
0412D9 01 02 00 00 0110*   	ld bc,@end-@cmd
0412DD 5B DF       0111*   	rst.lil $18
0412DF C9          0112*   	ret
0412E0 11          0113*   @cmd: db 17
0412E1 00          0114*   @arg: db 0
0412E2             0115*   @end:
0412E2             0116*   
0412E2             0117*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0412E2             0118*   ; inputs: a=mode, c=colour (add 128 to set background colour)
0412E2             0119*   vdu_gcol:
0412E2 32 F7 12 04 0120*   	ld (@mode),a
0412E6 79          0121*       ld a,c
0412E7 32 F8 12 04 0122*       ld (@col),a
0412EB 21 F6 12 04 0123*   	ld hl,@cmd
0412EF 01 03 00 00 0124*   	ld bc,@end-@cmd
0412F3 5B DF       0125*   	rst.lil $18
0412F5 C9          0126*   	ret
0412F6 12          0127*   @cmd:  db 18
0412F7 00          0128*   @mode: db 0
0412F8 00          0129*   @col:  db 0
0412F9             0130*   @end:
0412F9             0131*   
0412F9             0132*   
0412F9             0133*   ; VDU 28, left, bottom, right, top: Set text viewport **
0412F9             0134*   ; MIND THE LITTLE-ENDIANESS
0412F9             0135*   ; inputs: c=left,b=bottom,e=right,d=top
0412F9             0136*   ; outputs; nothing
0412F9             0137*   ; destroys: a might make it out alive
0412F9             0138*   vdu_set_txt_viewport:
0412F9 ED 43 0F 13 0139*       ld (@lb),bc
       04          
0412FE ED 53 11 13 0140*   	ld (@rt),de
       04          
041303 21 0E 13 04 0141*   	ld hl,@cmd
041307 01 05 00 00 0142*   	ld bc,@end-@cmd
04130B 5B DF       0143*   	rst.lil $18
04130D C9          0144*   	ret
04130E 1C          0145*   @cmd:   db 28 ; set text viewport command
04130F 00 00       0146*   @lb: 	dw 0x0000 ; set by bc
041311 00 00       0147*   @rt: 	dw 0x0000 ; set by de
041313 00          0148*   @end:   db 0x00	  ; padding
041314             0149*   
041314             0150*   ; Wait for VBLANK interrupt
041314             0151*   vdu_vblank:
041314 DD E5       0152*       PUSH 	IX
041316             0153*   	MOSCALL	mos_sysvars
041316 3E 08       0001*M1 			LD	A, function
041318 5B CF       0002*M1 			RST.LIL	08h
04131A DD 7E 00    0154*   	LD	A, (IX + sysvar_time + 0)
04131D             0155*   @wait:
04131D DD BE 00    0156*       CP 	A, (IX + sysvar_time + 0)
041320 28 FB       0157*       JR	Z, @wait
041322 DD E1       0158*       POP	IX
041324 C9          0159*       RET
041325             0160*   
041325             0161*   ; VDU 29, x; y;: Set graphics origin
041325             0162*   ; This command sets the graphics origin.
041325             0163*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041325             0164*   ; inputs: bc=x0,de=y0
041325             0165*   ; outputs; nothing
041325             0166*   ; destroys: a might make it out alive
041325             0167*   vdu_set_gfx_origin:
041325 ED 43 3B 13 0168*       ld (@x0),bc
       04          
04132A ED 53 3D 13 0169*       ld (@y0),de
       04          
04132F 21 3A 13 04 0170*       ld hl,@cmd
041333 01 05 00 00 0171*       ld bc,@end-@cmd
041337 5B DF       0172*       rst.lil $18
041339 C9          0173*       ret
04133A 1D          0174*   @cmd:   db 29 ; set graphics origin command
04133B 00 00       0175*   @x0: 	dw 0x0000 ; set by bc
04133D 00 00       0176*   @y0: 	dw 0x0000 ; set by de
04133F 00          0177*   @end:   db 0x00	  ; padding
041340             0178*   
041340             0179*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041340             0180*   ; NOTE: the order of the y-coordinate parameters are inverted
041340             0181*   ; 	because we have turned off logical screen scaling
041340             0182*   ; NOTE: coordinates are relative to current gfx origin
041340             0183*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041340             0184*   ; outputs; nothing
041340             0185*   ; destroys: a might make it out alive
041340             0186*   vdu_set_gfx_viewport:
041340 ED 43 60 13 0187*       ld (@x0),bc
       04          
041345 FD 22 62 13 0188*       ld (@y1),iy
       04          
04134A DD 22 64 13 0189*   	ld (@x1),ix
       04          
04134F ED 53 66 13 0190*   	ld (@y0),de
       04          
041354 21 5F 13 04 0191*   	ld hl,@cmd
041358 01 09 00 00 0192*   	ld bc,@end-@cmd
04135C 5B DF       0193*   	rst.lil $18
04135E C9          0194*   	ret
04135F 18          0195*   @cmd:   db 24 ; set graphics viewport command
041360 00 00       0196*   @x0: 	dw 0x0000 ; set by bc
041362 00 00       0197*   @y1: 	dw 0x0000 ; set by iy
041364 00 00       0198*   @x1: 	dw 0x0000 ; set by ix
041366 00 00       0199*   @y0: 	dw 0x0000 ; set by de
041368 00          0200*   @end:   db 0x00	  ; padding
041369             0201*   
041369             0202*   ; SCREEN MODES
041369             0203*   ; ===============================
041369             0204*   ; Mode  Horz  Vert  Cols  Refresh
041369             0205*   ; ---   ----  ----  ----  -------
041369             0206*   ; 11    320   240   2     60hz
041369             0207*   ; 139   320   240   2     60hz
041369             0208*   ; 23    512   384   2     60hz
041369             0209*   ; 151   512   384   2     60hz
041369             0210*   ; 6     640   240   2     60hz
041369             0211*   ; 134   640   240   2     60hz
041369             0212*   ; 2     640   480   2     60hz
041369             0213*   ; 130   640   480   2     60hz
041369             0214*   ; 17    800   600   2     60hz
041369             0215*   ; 145   800   600   2     60hz
041369             0216*   ; 18    1024  768   2     60hz
041369             0217*   ; 146   1024  768   2     60hz
041369             0218*   ; ---   ----  ----  ----  -------
041369             0219*   ; 10    320   240   4     60hz
041369             0220*   ; 138   320   240   4     60hz
041369             0221*   ; 22    512   384   4     60hz
041369             0222*   ; 150   512   384   4     60hz
041369             0223*   ; 5     640   240   4     60hz
041369             0224*   ; 133   640   240   4     60hz
041369             0225*   ; 1     640   480   4     60hz
041369             0226*   ; 129   640   480   4     60hz
041369             0227*   ; 16    800   600   4     60hz
041369             0228*   ; 19    1024  768   4     60hz
041369             0229*   ; ---   ----  ----  ----  -------
041369             0230*   ; 9     320   240   16    60hz
041369             0231*   ; 137   320   240   16    60hz
041369             0232*   ; 21    512   384   16    60hz
041369             0233*   ; 149   512   384   16    60hz
041369             0234*   ; 4     640   240   16    60hz
041369             0235*   ; 132   640   240   16    60hz
041369             0236*   ; 0     640   480   16    60hz
041369             0237*   ; 7     n/a   n/a   16    60hz
041369             0238*   ; ---   ----  ----  ----  -------
041369             0239*   ; 8     320   240   64    60hz
041369             0240*   ; 136   320   240   64    60hz
041369             0241*   ; 20    512   384   64    60hz
041369             0242*   ; 3     640   240   64    60hz
041369             0243*   ; ---   ----  ----  ----  -------
041369             0244*   vdu_set_screen_mode:
041369 32 79 13 04 0245*   	ld (@arg),a
04136D 21 78 13 04 0246*   	ld hl,@cmd
041371 01 02 00 00 0247*   	ld bc,@end-@cmd
041375 5B DF       0248*   	rst.lil $18
041377 C9          0249*   	ret
041378 16          0250*   @cmd: db 22 ; set screen mode
041379 00          0251*   @arg: db 0  ; screen mode parameter
04137A             0252*   @end:
04137A             0253*   
04137A             0254*   ; get the current screen mode
04137A             0255*   ; inputs: none
04137A             0256*   ; outputs: a=screen mode
04137A             0257*   ; destroys: af, ix
04137A             0258*   vdu_get_screen_mode:
04137A             0259*       MOSCALL mos_sysvars
04137A 3E 08       0001*M1 			LD	A, function
04137C 5B CF       0002*M1 			RST.LIL	08h
04137E DD 7E 27    0260*       ld a,(IX+sysvar_scrMode)
041381 C9          0261*       ret
041382             0262*   ; end vdu_get_screen_mode
041382             0263*   
041382             0264*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041382             0265*   ; inputs: a is scaling mode, 1=on, 0=off
041382             0266*   ; note: default setting on boot is scaling ON
041382             0267*   vdu_set_scaling:
041382 32 94 13 04 0268*   	ld (@arg),a
041386 21 91 13 04 0269*   	ld hl,@cmd
04138A 01 04 00 00 0270*   	ld bc,@end-@cmd
04138E 5B DF       0271*   	rst.lil $18
041390 C9          0272*   	ret
041391 17 00 C0    0273*   @cmd: db 23,0,0xC0
041394 00          0274*   @arg: db 0  ; scaling on/off
041395             0275*   @end:
041395             0276*   
041395             0277*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041395             0278*   ; inputs: hl=bufferId
041395             0279*   vdu_buff_select:
041395 22 A7 13 04 0280*   	ld (@bufferId),hl
041399 21 A4 13 04 0281*   	ld hl,@cmd
04139D 01 05 00 00 0282*   	ld bc,@end-@cmd
0413A1 5B DF       0283*   	rst.lil $18
0413A3 C9          0284*   	ret
0413A4 17 1B 20    0285*   @cmd: db 23,27,0x20
0413A7 00 00       0286*   @bufferId: dw 0x0000
0413A9 00          0287*   @end: db 0x00 ; padding
0413AA             0288*   
0413AA             0289*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0413AA             0290*   ; inputs: a=format; bc=width; de=height
0413AA             0291*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0413AA             0292*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0413AA             0293*   ; 0 	RGBA8888 (4-bytes per pixel)
0413AA             0294*   ; 1 	RGBA2222 (1-bytes per pixel)
0413AA             0295*   ; 2 	Mono/Mask (1-bit per pixel)
0413AA             0296*   ; 3 	Reserved for internal use by VDP (“native” format)
0413AA             0297*   vdu_bmp_create:
0413AA ED 43 C6 13 0298*       ld (@width),bc
       04          
0413AF ED 53 C8 13 0299*       ld (@height),de
       04          
0413B4 32 CA 13 04 0300*       ld (@fmt),a
0413B8 21 C3 13 04 0301*   	ld hl,@cmd
0413BC 01 08 00 00 0302*   	ld bc,@end-@cmd
0413C0 5B DF       0303*   	rst.lil $18
0413C2 C9          0304*   	ret
0413C3 17 1B 21    0305*   @cmd:       db 23,27,0x21
0413C6 00 00       0306*   @width:     dw 0x0000
0413C8 00 00       0307*   @height:    dw 0x0000
0413CA 00          0308*   @fmt:       db 0x00
0413CB             0309*   @end:
0413CB             0310*   
0413CB             0311*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0413CB             0312*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0413CB             0313*   vdu_load_img_rgba2_to_8:
0413CB             0314*   ; backup the target buffer id and image dimensions
0413CB E5          0315*       push hl
0413CC D5          0316*       push de
0413CD C5          0317*       push bc
0413CE             0318*   ; load the rgba2 image to working buffer 65534
0413CE 21 FE FF 00 0319*       ld hl,65534 ; temporary working buffer id
0413D2 CD D5 14 04 0320*   	call vdu_load_buffer_from_file
0413D6             0321*   ; restore the image dimensions and target buffer id
0413D6 C1          0322*       pop bc
0413D7 D1          0323*       pop de
0413D8 E1          0324*       pop hl
0413D9             0325*   ; fall through to vdu_rgba2_to_8
0413D9             0326*   
0413D9             0327*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0413D9             0328*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0413D9             0329*   ; the "expand bitmap" command is:
0413D9             0330*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413D9             0331*   ; and then to reverse the byte order to fix endian-ness:
0413D9             0332*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0413D9             0333*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0413D9             0334*   ; VDU 23,27,&20,targetBufferID%;
0413D9             0335*   ; VDU 23,27,&21,width%;height%;0
0413D9             0336*   ; -------------------------------------------------------------------
0413D9             0337*   ; inputs: bc,de image width,height ; hl = targetBufferId
0413D9             0338*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0413D9             0339*   vdu_rgba2_to_8:
0413D9             0340*   ; load the image dimensions and buffer id parameters
0413D9 ED 43 35 14 0341*       ld (@width),bc
       04          
0413DE ED 53 37 14 0342*       ld (@height),de
       04          
0413E3 22 1A 14 04 0343*       ld (@bufferId0),hl
0413E7 22 27 14 04 0344*       ld (@bufferId2),hl
0413EB 22 30 14 04 0345*       ld (@bufferId1),hl
0413EF             0346*   ; clean up bytes that got stomped on by the ID loads
0413EF 3E 48       0347*       ld a,0x48
0413F1 32 1C 14 04 0348*       ld (@bufferId0+2),a
0413F5 3E 17       0349*       ld a,23
0413F7 32 32 14 04 0350*       ld (@bufferId1+2),a
0413FB 3E 18       0351*       ld a,24
0413FD 32 29 14 04 0352*       ld (@bufferId2+2),a
041401 AF          0353*       xor a
041402 32 39 14 04 0354*       ld (@height+2),a
041406             0355*   ; send the vdu command strings
041406 21 11 14 04 0356*       ld hl,@beg
04140A 01 29 00 00 0357*       ld bc,@end-@beg
04140E 5B DF       0358*       rst.lil $18
041410 C9          0359*       ret
041411             0360*   @beg:
041411             0361*   ; Command 14: Consolidate blocks in a buffer
041411             0362*   ; VDU 23, 0, &A0, bufferId; 14
041411 17 00 A0    0363*       db 23,0,0xA0
041414 FE FF       0364*       dw 65534 ; workingBufferId
041416 0E          0365*       db 14 ; consolidate blocks
041417             0366*   ; the "expand bitmap" command is:
041417             0367*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041417 17 00 A0    0368*       db 23,0,0xA0
04141A 00 00       0369*   @bufferId0: dw 0x0000 ; targetBufferId
04141C 48          0370*       db 0x48 ; given as decimal command 72 in the docs
04141D 02          0371*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
04141E FE FF       0372*       dw 65534 ; sourceBufferId
041420 00 7F BF FF 0373*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041424             0374*   ; reverse the byte order to fix endian-ness:
041424             0375*   ; Command 24: Reverse the order of data of blocks within a buffer
041424             0376*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041424             0377*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041424 17 00 A0    0378*       db 23,0,0xA0
041427 00 00       0379*   @bufferId2:    dw 0x0000 ; targetBufferId
041429 18          0380*       db 24 ; reverse byte order
04142A 04          0381*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
04142B 04 00       0382*       dw 4 ; size (4 bytes)
04142D             0383*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04142D             0384*   ; VDU 23,27,&20,targetBufferID%;
04142D 17 1B 20    0385*       db 23,27,0x20 ; select bitmap
041430 00 00       0386*   @bufferId1: dw 0x0000 ; targetBufferId
041432             0387*   ; VDU 23,27,&21,width%;height%;0
041432 17 1B 21    0388*       db 23,27,0x21 ; create bitmap from buffer
041435 00 00       0389*   @width: dw 0x0000
041437 00 00       0390*   @height: dw 0x0000
041439 00          0391*       db 0x00 ; rgba8888 format
04143A             0392*   @end:
04143A             0393*   
04143A             0394*   ; scratch variables
04143A 00 00 00    0395*   bufferId0: dl 0x000000
04143D 00 00 00    0396*   bufferId1: dl 0x000000
041440             0397*   
041440             0398*   ; load a vdu buffer from local memory
041440             0399*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041440             0400*   vdu_load_buffer:
041440 ED 43 69 14 0401*       ld (@length),bc
       04          
041445 D5          0402*       push de ; save data pointer
041446             0403*   ; send the vdu command string
041446 7D          0404*       ld a,l
041447 32 66 14 04 0405*       ld (@bufferId),a
04144B 7C          0406*       ld a,h
04144C 32 67 14 04 0407*       ld (@bufferId+1),a
041450 21 63 14 04 0408*       ld hl,@cmd
041454 01 08 00 00 0409*       ld bc,@end-@cmd
041458 5B DF       0410*       rst.lil $18
04145A             0411*   ; send the buffer data
04145A E1          0412*       pop hl ; pointer to data
04145B ED 4B 69 14 0413*       ld bc,(@length)
       04          
041460 5B DF       0414*       rst.lil $18 ; send it
041462 C9          0415*       ret
041463             0416*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041463 17 00 A0    0417*   @cmd:       db 23,0,0xA0
041466 00 00       0418*   @bufferId:	dw 0x0000
041468 00          0419*   		    db 0 ; load buffer
041469 00 00       0420*   @length:	dw 0x0000
04146B 00          0421*   @end: db 0 ; padding
04146C             0422*   
04146C             0423*   ; clear a buffer
04146C             0424*   ; inputs: hl = bufferId
04146C             0425*   vdu_clear_buffer:
04146C 7D          0426*       ld a,l
04146D 32 84 14 04 0427*       ld (@bufferId),a
041471 7C          0428*       ld a,h
041472 32 85 14 04 0429*       ld (@bufferId+1),a
041476 21 81 14 04 0430*       ld hl,@cmd
04147A 01 06 00 00 0431*       ld bc,@end-@cmd
04147E 5B DF       0432*       rst.lil $18
041480 C9          0433*       ret
041481 17 00 A0    0434*   @cmd:       db 23,0,0xA0
041484 00 00       0435*   @bufferId:	dw 0x0000
041486 02          0436*   		    db 2 ; clear buffer
041487             0437*   @end:
041487             0438*   
041487             0439*   vdu_clear_all_buffers:
041487             0440*   ; clear all buffers
041487 21 92 14 04 0441*       ld hl,@beg
04148B 01 06 00 00 0442*       ld bc,@end-@beg
04148F 5B DF       0443*       rst.lil $18
041491 C9          0444*       ret
041492 17 00 A0    0445*   @beg: db 23,0,$A0
041495 FF FF       0446*         dw -1 ; clear all buffers
041497 02          0447*         db 2  ; command 2: clear a buffer
041498             0448*   @end:
041498             0449*   
041498             0450*   ; Command 14: Consolidate blocks in a buffer
041498             0451*   vdu_consolidate_buffer:
041498             0452*   ; set parameters for vdu call
041498 7D          0453*       ld a,l
041499 32 B0 14 04 0454*       ld (@bufferId),a
04149D 7C          0455*       ld a,h
04149E 32 B1 14 04 0456*       ld (@bufferId+1),a
0414A2 21 AD 14 04 0457*       ld hl,@beg
0414A6 01 06 00 00 0458*       ld bc,@end-@beg
0414AA 5B DF       0459*       rst.lil $18
0414AC C9          0460*       ret
0414AD             0461*   ; VDU 23, 0, &A0, bufferId; 14
0414AD 17 00 A0    0462*   @beg: db 23,0,0xA0
0414B0 00 00       0463*   @bufferId: dw 0x0000
0414B2 0E          0464*              db 14
0414B3             0465*   @end:
0414B3             0466*   
0414B3             0467*   ; load an image file to a buffer and make it a bitmap
0414B3             0468*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0414B3             0469*   vdu_load_img:
0414B3             0470*   ; back up image type and dimension parameters
0414B3 22 3A 14 04 0471*       ld (bufferId0),hl
0414B7 F5          0472*       push af
0414B8 C5          0473*   	push bc
0414B9 D5          0474*   	push de
0414BA             0475*   ; load the image
0414BA CD D5 14 04 0476*   	call vdu_load_buffer_from_file
0414BE             0477*   ; now make it a bitmap
0414BE 2A 3A 14 04 0478*       ld hl,(bufferId0)
0414C2 CD 98 14 04 0479*       call vdu_consolidate_buffer
0414C6 2A 3A 14 04 0480*       ld hl,(bufferId0)
0414CA CD 95 13 04 0481*       call vdu_buff_select
0414CE D1          0482*   	pop de ; image height
0414CF C1          0483*   	pop bc ; image width
0414D0 F1          0484*   	pop af ; image type
0414D1 C3 AA 13 04 0485*   	jp vdu_bmp_create ; will return to caller from there
0414D5             0486*   
0414D5             0487*   ; inputs: hl = bufferId; iy = pointer to filename
0414D5             0488*   vdu_load_buffer_from_file:
0414D5 22 3A 14 04 0489*       ld (bufferId0),hl
0414D9             0490*   
0414D9             0491*   ; clear target buffer
0414D9 CD 6C 14 04 0492*       call vdu_clear_buffer
0414DD             0493*   
0414DD             0494*   ; open the file in read mode
0414DD             0495*   ; Open a file
0414DD             0496*   ; HLU: Filename
0414DD             0497*   ;   C: Mode
0414DD             0498*   ; Returns:
0414DD             0499*   ;   A: Filehandle, or 0 if couldn't open
0414DD FD E5       0500*   	push iy ; pointer to filename
0414DF E1          0501*   	pop hl
0414E0 0E 01       0502*   	ld c,fa_read
0414E2             0503*       MOSCALL mos_fopen
0414E2 3E 0A       0001*M1 			LD	A, function
0414E4 5B CF       0002*M1 			RST.LIL	08h
0414E6 32 21 15 04 0504*       ld (@filehandle),a
0414EA             0505*   
0414EA             0506*   @read_file:
0414EA             0507*   ; Read a block of data from a file
0414EA             0508*   ;   C: Filehandle
0414EA             0509*   ; HLU: Pointer to where to write the data to
0414EA             0510*   ; DEU: Number of bytes to read
0414EA             0511*   ; Returns:
0414EA             0512*   ; DEU: Number of bytes read
0414EA 3A 21 15 04 0513*       ld a,(@filehandle)
0414EE 4F          0514*       ld c,a
0414EF 21 00 E0 B7 0515*       ld hl,filedata
0414F3 11 00 20 00 0516*       ld de,8192 ; max we can read into onboard sram at one time
0414F7             0517*       MOSCALL mos_fread
0414F7 3E 1A       0001*M1 			LD	A, function
0414F9 5B CF       0002*M1 			RST.LIL	08h
0414FB             0518*   
0414FB             0519*   ; test de for zero bytes read
0414FB 21 00 00 00 0520*       ld hl,0
0414FF AF          0521*       xor a ; clear carry
041500 ED 52       0522*       sbc hl,de
041502 CA 18 15 04 0523*       jp z,@close_file
041506             0524*   
041506             0525*   ; load a vdu buffer from local memory
041506             0526*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041506 2A 3A 14 04 0527*       ld hl,(bufferId0)
04150A D5          0528*       push de ; chunksize
04150B C1          0529*       pop bc
04150C 11 00 E0 B7 0530*       ld de,filedata
041510 CD 40 14 04 0531*       call vdu_load_buffer
041514             0532*   
041514             0533*   ; read the next block
041514 C3 EA 14 04 0534*       jp @read_file
041518             0535*   
041518             0536*   ; close the file
041518             0537*   @close_file:
041518 3A 21 15 04 0538*       ld a,(@filehandle)
04151C             0539*       MOSCALL mos_fclose
04151C 3E 0B       0001*M1 			LD	A, function
04151E 5B CF       0002*M1 			RST.LIL	08h
041520 C9          0540*       ret ; vdu_load_buffer_from_file
041521             0541*   
041521 00          0542*   @filehandle: db 0 ; file handle
041522 00 00 00    0543*   @fil: dl 0 ; pointer to FIL struct
041525             0544*   
041525 00 00 00    0545*   @chunkpointer: dl 0 ; pointer to current chunk
041528             0546*   
041528             0547*   ; File information structure (FILINFO)
041528             0548*   @filinfo:
041528 00 00 00 00 0549*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04152C 00 00       0550*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04152E 00 00       0551*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041530 00          0552*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041531 00 00 00 00 0553*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04153E 00 00 00 00 0554*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04163E             0040        include "vdu_fonts.inc"
04163E             0001*   ; select font
04163E             0002*   ; inputs: hl = bufferId, a = font flags
04163E             0003*   ; Flags:
04163E             0004*   ; Bit	Description
04163E             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
04163E             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
04163E             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
04163E             0008*   ; 1-7	Reserved for future use
04163E             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04163E             0010*   vdu_font_select:
04163E 22 55 16 04 0011*       ld (@bufferId),hl
041642 32 57 16 04 0012*       ld (@flags),a
041646 21 51 16 04 0013*       ld hl,@cmd
04164A 01 07 00 00 0014*       ld bc,@end-@cmd
04164E 5B DF       0015*       rst.lil $18
041650 C9          0016*       ret
041651 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
041655 00 00       0018*   @bufferId: dw 0x0000
041657 00          0019*   @flags: db 0x00
041658             0020*   @end:
041658             0021*   
041658             0022*   ; create font from buffer
041658             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041658             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041658             0025*   vdu_font_create:
041658 22 7D 16 04 0026*       ld (@bufferId),hl
04165C ED 53 7F 16 0027*       ld (@width),de ; also loads height
       04          
041661 32 82 16 04 0028*       ld (@flags),a
041665 7A          0029*       ld a,d ; height
041666 32 81 16 04 0030*       ld (@ascent),a ; ascent = height
04166A             0031*   ; consolidate buffer
04166A CD 98 14 04 0032*       call vdu_consolidate_buffer
04166E             0033*   ; create font
04166E 21 79 16 04 0034*       ld hl,@cmd
041672 01 0A 00 00 0035*       ld bc,@end-@cmd
041676 5B DF       0036*       rst.lil $18
041678 C9          0037*       ret
041679 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
04167D 00 00       0039*   @bufferId: dw 0x0000
04167F 00          0040*   @width: db 0x00
041680 00          0041*   @height: db 0x00
041681 00          0042*   @ascent: db 0x00
041682 00          0043*   @flags: db 0x00
041683             0044*   @end:
041683             0045*   
041683             0046*   ; set or adjust font property
041683             0047*   ; inputs: hl = bufferId, a = field, de = value
041683             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041683             0049*   vdu_font_property:
041683 22 9F 16 04 0050*       ld (@bufferId),hl
041687 32 A1 16 04 0051*       ld (@field),a
04168B ED 53 A2 16 0052*       ld (@value),de
       04          
041690 21 9B 16 04 0053*       ld hl,@cmd
041694 01 09 00 00 0054*       ld bc,@end-@cmd
041698 5B DF       0055*       rst.lil $18
04169A C9          0056*       ret
04169B 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
04169F 00 00       0058*   @bufferId: dw 0x0000
0416A1 00          0059*   @field: db 0x00
0416A2 00 00       0060*   @value: dw 0x0000
0416A4 00          0061*   @end: db 0x00 ; padding
0416A5             0062*   
0416A5             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
0416A5             0064*   
0416A5             0065*   ; Clear/Delete font
0416A5             0066*   ; inputs: hl = bufferId
0416A5             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
0416A5             0068*   vdu_font_clear:
0416A5 22 B8 16 04 0069*       ld (@bufferId),hl
0416A9 21 B4 16 04 0070*       ld hl,@cmd
0416AD 01 06 00 00 0071*       ld bc,@end-@cmd
0416B1 5B DF       0072*       rst.lil $18
0416B3 C9          0073*       ret
0416B4 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
0416B8 00 00       0075*   @bufferId: dw 0x0000
0416BA 00          0076*   @end: db 0x00 ; padding
0416BB             0077*   
0416BB             0078*   ; Copy system font to buffer
0416BB             0079*   ; inputs: hl = bufferId
0416BB             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0416BB             0081*   vdu_font_copy_system:
0416BB 22 CE 16 04 0082*       ld (@bufferId),hl
0416BF 21 CA 16 04 0083*       ld hl,@cmd
0416C3 01 06 00 00 0084*       ld bc,@end-@cmd
0416C7 5B DF       0085*       rst.lil $18
0416C9 C9          0086*       ret
0416CA 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
0416CE 00 00       0088*   @bufferId: dw 0x0000
0416D0 00          0089*   @end: db 0x00 ; padding
0416D1             0041        include "vdu_plot.inc"
0416D1             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416D1             0002*   ; PLOT code 	(Decimal) 	Effect
0416D1             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
0416D1             0004*   plot_sl_both: equ 0x00
0416D1             0005*   
0416D1             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
0416D1             0007*   plot_sl_first: equ 0x08
0416D1             0008*   
0416D1             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0416D1             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0416D1             0011*   
0416D1             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
0416D1             0013*   plot_sl_last: equ 0x20
0416D1             0014*   
0416D1             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
0416D1             0016*   plot_sl_none: equ 0x28
0416D1             0017*   
0416D1             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0416D1             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0416D1             0020*   
0416D1             0021*   ; &40-&47 	64-71 	Point plot
0416D1             0022*   plot_pt: equ 0x40
0416D1             0023*   
0416D1             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0416D1             0025*   plot_lf_lr_non_bg: equ 0x48
0416D1             0026*   
0416D1             0027*   ; &50-&57 	80-87 	Triangle fill
0416D1             0028*   plot_tf: equ 0x50
0416D1             0029*   
0416D1             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
0416D1             0031*   plot_lf_r_bg: equ 0x58
0416D1             0032*   
0416D1             0033*   ; &60-&67 	96-103 	Rectangle fill
0416D1             0034*   plot_rf: equ 0x60
0416D1             0035*   
0416D1             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0416D1             0037*   plot_lf_lr_fg: equ 0x60
0416D1             0038*   
0416D1             0039*   ; &70-&77 	112-119 	Parallelogram fill
0416D1             0040*   plot_pf: equ 0x70
0416D1             0041*   
0416D1             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0416D1             0043*   plot_lf_r_non_fg: equ 0x78
0416D1             0044*   
0416D1             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
0416D1             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0416D1             0047*   
0416D1             0048*   ; &90-&97 	144-151 	Circle outline
0416D1             0049*   plot_co: equ 0x90
0416D1             0050*   
0416D1             0051*   ; &98-&9F 	152-159 	Circle fill
0416D1             0052*   plot_cf: equ 0x98
0416D1             0053*   
0416D1             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
0416D1             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
0416D1             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
0416D1             0057*   
0416D1             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
0416D1             0059*   plot_rcm: equ 0xB8
0416D1             0060*   
0416D1             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0416D1             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0416D1             0063*   ; &D0-&D7 	208-215 	Not defined
0416D1             0064*   ; &D8-&DF 	216-223 	Not defined
0416D1             0065*   ; &E0-&E7 	224-231 	Not defined
0416D1             0066*   
0416D1             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
0416D1             0068*   plot_bmp: equ 0xE8
0416D1             0069*   
0416D1             0070*   ; &F0-&F7 	240-247 	Not defined
0416D1             0071*   ; &F8-&FF 	248-255 	Not defined
0416D1             0072*   
0416D1             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0416D1             0074*   ; Agon Console8 VDP 2.2.0
0416D1             0075*   
0416D1             0076*   ; Within each group of eight plot codes, the effects are as follows:
0416D1             0077*   ; Plot code 	Effect
0416D1             0078*   ; 0 	Move relative
0416D1             0079*   mv_rel: equ 0
0416D1             0080*   
0416D1             0081*   ; 1 	Plot relative in current foreground colour
0416D1             0082*   dr_rel_fg: equ 1
0416D1             0083*   
0416D1             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
0416D1             0085*   ; 3 	Plot relative in current background colour
0416D1             0086*   dr_rel_bg: equ 3
0416D1             0087*   
0416D1             0088*   ; 4 	Move absolute
0416D1             0089*   mv_abs: equ 4
0416D1             0090*   
0416D1             0091*   ; 5 	Plot absolute in current foreground colour
0416D1             0092*   dr_abs_fg: equ 5
0416D1             0093*   
0416D1             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
0416D1             0095*   ; 7 	Plot absolute in current background colour
0416D1             0096*   dr_abs_bg: equ 7
0416D1             0097*   
0416D1             0098*   ; Codes 0-3 use the position data provided as part of the command
0416D1             0099*   ; as a relative position, adding the position given to the current
0416D1             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
0416D1             0101*   ; as part of the command as an absolute position, setting the current
0416D1             0102*   ; graphical cursor position to the position given.
0416D1             0103*   
0416D1             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0416D1             0105*   ; current pixel colour. These operations cannot currently be supported
0416D1             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
0416D1             0107*   ; supported. Support for these codes may be added in a future version
0416D1             0108*   ; of the VDP firmware.
0416D1             0109*   
0416D1             0110*   ; 16 colour palette constants
0416D1             0111*   c_black: equ 0
0416D1             0112*   c_red_dk: equ 1
0416D1             0113*   c_green_dk: equ 2
0416D1             0114*   c_yellow_dk: equ 3
0416D1             0115*   c_blue_dk: equ 4
0416D1             0116*   c_magenta_dk: equ 5
0416D1             0117*   c_cyan_dk: equ 6
0416D1             0118*   c_grey: equ 7
0416D1             0119*   c_grey_dk: equ 8
0416D1             0120*   c_red: equ 9
0416D1             0121*   c_green: equ 10
0416D1             0122*   c_yellow: equ 11
0416D1             0123*   c_blue: equ 12
0416D1             0124*   c_magenta: equ 13
0416D1             0125*   c_cyan: equ 14
0416D1             0126*   c_white: equ 15
0416D1             0127*   
0416D1             0128*   ; VDU 25, mode, x; y;: PLOT command
0416D1             0129*   ; inputs: a=mode, bc=x0, de=y0
0416D1             0130*   vdu_plot:
0416D1 32 EB 16 04 0131*       ld (@mode),a
0416D5 ED 43 EC 16 0132*       ld (@x0),bc
       04          
0416DA ED 53 EE 16 0133*       ld (@y0),de
       04          
0416DF 21 EA 16 04 0134*   	ld hl,@cmd
0416E3 01 06 00 00 0135*   	ld bc,@end-@cmd
0416E7 5B DF       0136*   	rst.lil $18
0416E9 C9          0137*   	ret
0416EA 19          0138*   @cmd:   db 25
0416EB 00          0139*   @mode:  db 0
0416EC 00 00       0140*   @x0: 	dw 0
0416EE 00 00       0141*   @y0: 	dw 0
0416F0 00          0142*   @end:   db 0 ; extra byte to soak up deu
0416F1             0143*   
0416F1             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416F1             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
0416F1             0146*   ; VDU 25, mode, x; y;: PLOT command
0416F1             0147*   ; inputs: bc=x0, de=y0
0416F1             0148*   ; prerequisites: vdu_buff_select
0416F1             0149*   vdu_plot_bmp:
0416F1 ED 43 08 17 0150*       ld (@x0),bc
       04          
0416F6 ED 53 0A 17 0151*       ld (@y0),de
       04          
0416FB 21 06 17 04 0152*   	ld hl,@cmd
0416FF 01 06 00 00 0153*   	ld bc,@end-@cmd
041703 5B DF       0154*   	rst.lil $18
041705 C9          0155*   	ret
041706 19          0156*   @cmd:   db 25
041707 ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041708 00 00       0158*   @x0: 	dw 0x0000
04170A 00 00       0159*   @y0: 	dw 0x0000
04170C 00          0160*   @end:   db 0x00 ; padding
04170D             0161*   
04170D             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04170D             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
04170D             0164*   ; VDU 25, mode, x; y;: PLOT command
04170D             0165*   ; inputs: bc=x0, de=y0
04170D             0166*   ; USING 16.8 FIXED POINT COORDINATES
04170D             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04170D             0168*   ;   the fractional portiion of the inputs are truncated
04170D             0169*   ;   leaving only the 16-bit integer portion
04170D             0170*   ; prerequisites: vdu_buff_select
04170D             0171*   vdu_plot_bmp168:
04170D             0172*   ; populate in the reverse of normal to keep the
04170D             0173*   ; inputs from stomping on each other
04170D ED 53 2B 17 0174*       ld (@y0-1),de
       04          
041712 ED 43 29 17 0175*       ld (@x0-1),bc
       04          
041717 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
041719 32 29 17 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
04171D 21 28 17 04 0178*   	ld hl,@cmd
041721 01 06 00 00 0179*   	ld bc,@end-@cmd
041725 5B DF       0180*   	rst.lil $18
041727 C9          0181*   	ret
041728 19          0182*   @cmd:   db 25
041729 ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
04172A 00 00       0184*   @x0: 	dw 0x0000
04172C 00 00       0185*   @y0: 	dw 0x0000
04172E             0186*   @end:  ; no padding required b/c we shifted de right
04172E             0187*   
04172E             0188*   ; draw a filled rectangle
04172E             0189*   vdu_plot_rf:
04172E ED 43 55 17 0190*       ld (@x0),bc
       04          
041733 ED 53 57 17 0191*       ld (@y0),de
       04          
041738 DD 22 5B 17 0192*       ld (@x1),ix
       04          
04173D FD 22 5D 17 0193*       ld (@y1),iy
       04          
041742 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
041744 32 59 17 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041748 21 53 17 04 0196*   	ld hl,@cmd0
04174C 01 0C 00 00 0197*   	ld bc,@end-@cmd0
041750 5B DF       0198*   	rst.lil $18
041752 C9          0199*       ret
041753 19          0200*   @cmd0:  db 25 ; plot
041754 04          0201*   @arg0:  db plot_sl_both+mv_abs
041755 00 00       0202*   @x0:    dw 0x0000
041757 00 00       0203*   @y0:    dw 0x0000
041759 19          0204*   @cmd1:  db 25 ; plot
04175A 65          0205*   @arg1:  db plot_rf+dr_abs_fg
04175B 00 00       0206*   @x1:    dw 0x0000
04175D 00 00       0207*   @y1:    dw 0x0000
04175F 00          0208*   @end:   db 0x00 ; padding
041760             0209*   
041760             0210*   ; draw a filled circle
041760             0211*   vdu_plot_cf:
041760 ED 43 87 17 0212*       ld (@x0),bc
       04          
041765 ED 53 89 17 0213*       ld (@y0),de
       04          
04176A DD 22 8D 17 0214*       ld (@x1),ix
       04          
04176F FD 22 8F 17 0215*       ld (@y1),iy
       04          
041774 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
041776 32 8B 17 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04177A 21 85 17 04 0218*   	ld hl,@cmd0
04177E 01 0C 00 00 0219*   	ld bc,@end-@cmd0
041782 5B DF       0220*   	rst.lil $18
041784 C9          0221*       ret
041785 19          0222*   @cmd0:  db 25 ; plot
041786 04          0223*   @arg0:  db plot_sl_both+mv_abs
041787 00 00       0224*   @x0:    dw 0x0000
041789 00 00       0225*   @y0:    dw 0x0000
04178B 19          0226*   @cmd1:  db 25 ; plot
04178C 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
04178D 00 00       0228*   @x1:    dw 0x0000
04178F 00 00       0229*   @y1:    dw 0x0000
041791 00          0230*   @end:   db 0x00 ; padding
041792             0042        include "vdu_sprites.inc"
041792             0001*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041792             0002*   ; the VDP can support up to 256 sprites. They must be defined
041792             0003*   ; contiguously, and so the first sprite is sprite 0.
041792             0004*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041792             0005*   ; Once a selection of sprites have been defined, you can activate
041792             0006*   ; them using the VDU 23, 27, 7, n command, where n is the number
041792             0007*   ; of sprites to activate. This will activate the first n sprites,
041792             0008*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041792             0009*   
041792             0010*   ; A single sprite can have multiple "frames", referring to
041792             0011*   ; different bitmaps.
041792             0012*   ; (These bitmaps do not need to be the same size.)
041792             0013*   ; This allows a sprite to include an animation sequence,
041792             0014*   ; which can be stepped through one frame at a time, or picked
041792             0015*   ; in any order.
041792             0016*   
041792             0017*   ; Any format of bitmap can be used as a sprite frame. It should
041792             0018*   ; be noted however that "native" format bitmaps are not
041792             0019*   ; recommended for use as sprite frames, as they cannot get
041792             0020*   ; erased from the screen. (As noted above, the "native" bitmap
041792             0021*   ; format is not really intended for general use.) This is part
041792             0022*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041792             0023*   ; screen are now stored in RGBA2222 format.
041792             0024*   
041792             0025*   ; An "active" sprite can be hidden, so it will stop being drawn,
041792             0026*   ; and then later shown again.
041792             0027*   
041792             0028*   ; Moving sprites around the screen is done by changing the
041792             0029*   ; position of the sprite. This can be done either by setting
041792             0030*   ; the absolute position of the sprite, or by moving the sprite
041792             0031*   ; by a given number of pixels. (Sprites are positioned using
041792             0032*   ; pixel coordinates, and not by the logical OS coordinate system.)
041792             0033*   ; In the current sprite system, sprites will not update their
041792             0034*   ; position on-screen until either another drawing operation is
041792             0035*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041792             0036*   
041792             0037*   ; VDU 23, 27, 4, n: Select sprite n
041792             0038*   ; inputs: a is the 8-bit sprite id
041792             0039*   vdu_sprite_select:
041792 32 A4 17 04 0040*       ld (@sprite),a
041796 21 A1 17 04 0041*       ld hl,@cmd
04179A 01 04 00 00 0042*       ld bc,@end-@cmd
04179E 5B DF       0043*       rst.lil $18
0417A0 C9          0044*       ret
0417A1 17 1B 04    0045*   @cmd:    db 23,27,4
0417A4 00          0046*   @sprite: db 0x00
0417A5             0047*   @end:
0417A5             0048*   
0417A5             0049*   ; VDU 23, 27, 5: Clear frames in current sprite
0417A5             0050*   ; inputs: none
0417A5             0051*   ; prerequisites: vdu_sprite_select
0417A5             0052*   vdu_sprite_clear_frames:
0417A5 21 B0 17 04 0053*       ld hl,@cmd
0417A9 01 03 00 00 0054*       ld bc,@end-@cmd
0417AD 5B DF       0055*       rst.lil $18
0417AF C9          0056*       ret
0417B0 17 1B 05    0057*   @cmd: db 23,27,5
0417B3             0058*   @end:
0417B3             0059*   
0417B3             0060*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0417B3             0061*   ; inputs: a is the 8-bit bitmap number
0417B3             0062*   ; prerequisites: vdu_sprite_select
0417B3             0063*   vdu_sprite_add_bmp:
0417B3 32 C5 17 04 0064*       ld (@bmp),a
0417B7 21 C2 17 04 0065*       ld hl,@cmd
0417BB 01 04 00 00 0066*       ld bc,@end-@cmd
0417BF 5B DF       0067*       rst.lil $18
0417C1 C9          0068*       ret
0417C2 17 1B 06    0069*   @cmd: db 23,27,6
0417C5 00          0070*   @bmp: db 0x00
0417C6             0071*   @end:
0417C6             0072*   
0417C6             0073*   ; VDU 23, 27, 7, n: Activate n sprites
0417C6             0074*   ; inputs: a is the number of sprites to activate
0417C6             0075*   ; prerequisites: each sprite activated must have at least one frame attached to it
0417C6             0076*   vdu_sprite_activate:
0417C6 32 D8 17 04 0077*       ld (@num),a
0417CA 21 D5 17 04 0078*       ld hl,@cmd
0417CE 01 04 00 00 0079*       ld bc,@end-@cmd
0417D2 5B DF       0080*       rst.lil $18
0417D4 C9          0081*       ret
0417D5 17 1B 07    0082*   @cmd: db 23,27,7
0417D8 00          0083*   @num: db 0x00
0417D9             0084*   @end:
0417D9             0085*   
0417D9             0086*   ; VDU 23, 27, 8: Select next frame of current sprite
0417D9             0087*   ; inputs: none
0417D9             0088*   ; prerequisites: vdu_sprite_select
0417D9             0089*   vdu_sprite_next_frame:
0417D9 21 E4 17 04 0090*       ld hl,@cmd
0417DD 01 03 00 00 0091*       ld bc,@end-@cmd
0417E1 5B DF       0092*       rst.lil $18
0417E3 C9          0093*       ret
0417E4 17 1B 08    0094*   @cmd: db 23,27,8
0417E7             0095*   @end:
0417E7             0096*   
0417E7             0097*   ; VDU 23, 27, 9: Select previous frame of current sprite
0417E7             0098*   ; inputs: none
0417E7             0099*   ; prerequisites: vdu_sprite_select
0417E7             0100*   vdu_sprite_prev_frame:
0417E7 21 F2 17 04 0101*       ld hl,@cmd
0417EB 01 03 00 00 0102*       ld bc,@end-@cmd
0417EF 5B DF       0103*       rst.lil $18
0417F1 C9          0104*       ret
0417F2 17 1B 09    0105*   @cmd: db 23,27,9
0417F5             0106*   @end:
0417F5             0107*   
0417F5             0108*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0417F5             0109*   ; inputs: a is frame number to select
0417F5             0110*   ; prerequisites: vdu_sprite_select
0417F5             0111*   vdu_sprite_select_frame:
0417F5 32 07 18 04 0112*       ld (@frame),a
0417F9 21 04 18 04 0113*       ld hl,@cmd
0417FD 01 04 00 00 0114*       ld bc,@end-@cmd
041801 5B DF       0115*       rst.lil $18
041803 C9          0116*       ret
041804 17 1B 0A    0117*   @cmd:    db 23,27,10
041807 00          0118*   @frame:  db 0x00
041808             0119*   @end:
041808             0120*   
041808             0121*   ; VDU 23, 27, 11: Show current sprite
041808             0122*   ; inputs: none
041808             0123*   ; prerequisites: vdu_sprite_select
041808             0124*   vdu_sprite_show:
041808 21 13 18 04 0125*       ld hl,@cmd
04180C 01 03 00 00 0126*       ld bc,@end-@cmd
041810 5B DF       0127*       rst.lil $18
041812 C9          0128*       ret
041813 17 1B 0B    0129*   @cmd: db 23,27,11
041816             0130*   @end:
041816             0131*   
041816             0132*   ; VDU 23, 27, 12: Hide current sprite
041816             0133*   ; inputs: none
041816             0134*   ; prerequisites: vdu_sprite_select
041816             0135*   vdu_sprite_hide:
041816 21 21 18 04 0136*       ld hl,@cmd
04181A 01 03 00 00 0137*       ld bc,@end-@cmd
04181E 5B DF       0138*       rst.lil $18
041820 C9          0139*       ret
041821 17 1B 0C    0140*   @cmd: db 23,27,12
041824             0141*   @end:
041824             0142*   
041824             0143*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041824             0144*   ; inputs: bc is x coordinate, de is y coordinate
041824             0145*   ; prerequisites: vdu_sprite_select
041824             0146*   vdu_sprite_move_abs:
041824 ED 43 3C 18 0147*       ld (@xpos),bc
       04          
041829 ED 53 3E 18 0148*       ld (@ypos),de
       04          
04182E 21 39 18 04 0149*       ld hl,@cmd
041832 01 07 00 00 0150*       ld bc,@end-@cmd
041836 5B DF       0151*       rst.lil $18
041838 C9          0152*       ret
041839 17 1B 0D    0153*   @cmd:  db 23,27,13
04183C 00 00       0154*   @xpos: dw 0x0000
04183E 00 00       0155*   @ypos: dw 0x0000
041840 00          0156*   @end:  db 0x00 ; padding
041841             0157*   
041841             0158*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041841             0159*   ; inputs: bc is x coordinate, de is y coordinate
041841             0160*   ; prerequisites: vdu_sprite_select
041841             0161*   vdu_sprite_move_rel:
041841 ED 43 59 18 0162*       ld (@dx),bc
       04          
041846 ED 53 5B 18 0163*       ld (@dy),de
       04          
04184B 21 56 18 04 0164*       ld hl,@cmd
04184F 01 07 00 00 0165*       ld bc,@end-@cmd
041853 5B DF       0166*       rst.lil $18
041855 C9          0167*       ret
041856 17 1B 0E    0168*   @cmd: db 23,27,14
041859 00 00       0169*   @dx:  dw 0x0000
04185B 00 00       0170*   @dy:  dw 0x0000
04185D 00          0171*   @end: db 0x00 ; padding
04185E             0172*   
04185E             0173*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04185E             0174*   ; USING 16.8 FIXED POINT COORDINATES
04185E             0175*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04185E             0176*   ;   the fractional portiion of the inputs are truncated
04185E             0177*   ;   leaving only the 16-bit integer portion
04185E             0178*   ; prerequisites: vdu_sprite_select
04185E             0179*   vdu_sprite_move_abs168:
04185E             0180*   ; offset inputs by the gfx origin
04185E             0181*   ; y coordinate
04185E 21 00 30 00 0182*       ld hl,origin_top*256
041862 19          0183*       add hl,de
041863 22 85 18 04 0184*       ld (@ypos-1),hl
041867             0185*   ; x coordinate
041867 21 00 80 00 0186*       ld hl,origin_left*256
04186B 09          0187*       add hl,bc
04186C 22 83 18 04 0188*       ld (@xpos-1),hl
041870             0189*   ; prepare vdu command
041870 3E 0D       0190*       ld a,13       ; restore the final byte of the command
041872 32 83 18 04 0191*       ld (@cmd+2),a ; string that got stomped on by bcu
041876 21 81 18 04 0192*       ld hl,@cmd
04187A 01 07 00 00 0193*       ld bc,@end-@cmd
04187E 5B DF       0194*       rst.lil $18
041880 C9          0195*       ret
041881 17 1B 0D    0196*   @cmd:  db 23,27,13
041884 00 00       0197*   @xpos: dw 0x0000
041886 00 00       0198*   @ypos: dw 0x0000
041888             0199*   @end:  ; no padding required b/c we shifted de right
041888             0200*   
041888             0201*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041888             0202*   ; USING 16.8 FIXED POINT COORDINATES
041888             0203*   ; inputs: ub.c is dx, ud.e is dy
041888             0204*   ;   the fractional portiion of the inputs are truncated
041888             0205*   ;   leaving only the 16-bit integer portion
041888             0206*   ; prerequisites: vdu_sprite_select
041888             0207*   vdu_sprite_move_rel168:
041888             0208*   ; populate in the reverse of normal to keep the
041888             0209*   ; inputs from stomping on each other
041888 ED 53 A7 18 0210*       ld (@dy-1),de
       04          
04188D ED 43 A5 18 0211*       ld (@dx-1),bc
       04          
041892 3E 0E       0212*       ld a,14       ; restore the final byte of the command
041894 32 A5 18 04 0213*       ld (@cmd+2),a ; string that got stomped on by bcu
041898 21 A3 18 04 0214*       ld hl,@cmd
04189C 01 07 00 00 0215*       ld bc,@end-@cmd
0418A0 5B DF       0216*       rst.lil $18
0418A2 C9          0217*       ret
0418A3 17 1B 0E    0218*   @cmd:  db 23,27,14
0418A6 00 00       0219*   @dx: dw 0x0000
0418A8 00 00       0220*   @dy: dw 0x0000
0418AA             0221*   @end:  ; no padding required b/c we shifted de right
0418AA             0222*   
0418AA             0223*   ; VDU 23, 27, 15: Update the sprites in the GPU
0418AA             0224*   ; inputs: none
0418AA             0225*   vdu_sprite_update:
0418AA 21 B5 18 04 0226*       ld hl,@cmd
0418AE 01 03 00 00 0227*       ld bc,@end-@cmd
0418B2 5B DF       0228*       rst.lil $18
0418B4 C9          0229*       ret
0418B5 17 1B 0F    0230*   @cmd: db 23,27,15
0418B8             0231*   @end:
0418B8             0232*   
0418B8             0233*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
0418B8             0234*   ; inputs: none
0418B8             0235*   vdu_sprite_bmp_reset:
0418B8 21 C3 18 04 0236*       ld hl,@cmd
0418BC 01 03 00 00 0237*       ld bc,@end-@cmd
0418C0 5B DF       0238*       rst.lil $18
0418C2 C9          0239*       ret
0418C3 17 1B 10    0240*   @cmd: db 23,27,16
0418C6             0241*   @end:
0418C6             0242*   
0418C6             0243*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0418C6             0244*   ; inputs: none
0418C6             0245*   vdu_sprite_reset:
0418C6 21 D1 18 04 0246*       ld hl,@cmd
0418CA 01 03 00 00 0247*       ld bc,@end-@cmd
0418CE 5B DF       0248*       rst.lil $18
0418D0 C9          0249*       ret
0418D1 17 1B 11    0250*   @cmd: db 23,27,17
0418D4             0251*   @end:
0418D4             0252*   
0418D4             0253*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0418D4             0254*   ; inputs: a is the GCOL paint mode
0418D4             0255*   ; prerequisites: vdu_sprite_select
0418D4             0256*   vdu_sprite_set_gcol:
0418D4 32 E6 18 04 0257*       ld (@mode),a
0418D8 21 E3 18 04 0258*       ld hl,@cmd
0418DC 01 04 00 00 0259*       ld bc,@end-@cmd
0418E0 5B DF       0260*       rst.lil $18
0418E2 C9          0261*       ret
0418E3 17 1B 12    0262*   @cmd:  db 23,27,18
0418E6 00          0263*   @mode: db 0x00
0418E7             0264*   @end:
0418E7             0265*   
0418E7             0266*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0418E7             0267*   ; inputs: hl=bufferId
0418E7             0268*   ; prerequisites: vdu_sprite_select
0418E7             0269*   vdu_sprite_add_buff:
0418E7 22 F9 18 04 0270*       ld (@bufferId),hl
0418EB 21 F6 18 04 0271*       ld hl,@cmd
0418EF 01 05 00 00 0272*       ld bc,@end-@cmd
0418F3 5B DF       0273*       rst.lil $18
0418F5 C9          0274*       ret
0418F6 17 1B 26    0275*   @cmd:      db 23,27,0x26
0418F9 00 00       0276*   @bufferId: dw 0x0000
0418FB 00          0277*   @end:      db 0x00 ; padding
0418FC             0043    
0418FC             0044    ; APPLICATION INCLUDES
0418FC             0045        include "ascii.inc"
0418FC             0001*   purple_nurples_ascii:
0418FC 20 20 20 20 0002*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041921 5F 5F 5F 5F 0003*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
04194A 5C 5F 5F 20 0004*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041972 20 2F 20 5F 0005*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
041999 28 5F 5F 5F 0006*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
0419C2 20 20 20 20 0007*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
0419EB 20 20 5F 5F 0008*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
041A0F 20 2F 20 20 0009*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041A34 28 20 20 3C 0010*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041A59 20 5C 5F 5F 0011*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041A7F 5F 5F 5F 5F 0012*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041ABD 5C 5F 5F 5F 0013*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041AFB 20 7C 20 20 0014*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041B38 20 7C 20 20 0015*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041B76 20 7C 5F 5F 0016*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
041BB4 20 5F 5F 5F 0017*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
041BFC 20 5C 20 20 0018*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
041C44 20 2F 20 20 0019*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
041C8B 2F 20 20 20 0020*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
041CD3 5C 5F 5F 5F 0021*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
041D1B 20 20 20 20 0022*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
041D62 00          0023*       db 0 ; string terminator
041D63             0046        include "collisions.inc"
041D63             0001*   ; ====== COLLISION DETECTION ======
041D63             0002*   ; --- constants ---
041D63             0003*   ; sprite_collisions flags
041D63             0004*   ; collides_with_player: equ %00000001
041D63             0005*   ; collides_with_laser: equ %00000010
041D63             0006*   sprite_alive: equ 6; set when sprite is alive
041D63             0007*   sprite_just_died: equ 7; set when sprite just died
041D63             0008*   collide_top: equ %00001000
041D63             0009*   collide_bottom: equ %00000100
041D63             0010*   collide_left: equ %00000010
041D63             0011*   collide_right: equ %00000001
041D63             0012*   
041D63 00 00 00    0013*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
041D66             0014*   
041D66             0015*   collision_draw_hitboxes:
041D66             0016*   ; draw hitbox for ix collider
041D66 DD E5       0017*       push ix
041D68 FD E5       0018*       push iy
041D6A AF          0019*       xor a ; color mode 0
041D6B 0E 09       0020*       ld c,c_red
041D6D CD E2 12 04 0021*       call vdu_gcol
041D71 01 00 00 00 0022*       ld bc,0
041D75 DD 4E 02    0023*       ld c,(ix+sprite_x+1)
041D78 DD 46 03    0024*       ld b,(ix+sprite_x+2)
041D7B 11 00 00 00 0025*       ld de,0
041D7F DD 5E 05    0026*       ld e,(ix+sprite_y+1)
041D82 DD 56 06    0027*       ld d,(ix+sprite_y+2)
041D85 21 00 00 00 0028*       ld hl,0 ; clear hlu and h
041D89 DD 6E 1E    0029*       ld l,(ix+sprite_dim_x)
041D8C 09          0030*       add hl,bc ; hl = x1
041D8D E5          0031*       push hl ; save x1
041D8E 21 00 00 00 0032*       ld hl,0 ; clear hlu and h
041D92 DD 6E 1F    0033*       ld l,(ix+sprite_dim_y)
041D95 19          0034*       add hl,de ; hl = y1
041D96 DD E1       0035*       pop ix ; ix = x1 (was hl)
041D98 E5          0036*       push hl
041D99 FD E1       0037*       pop iy ; iy = y1
041D9B CD 2E 17 04 0038*       call vdu_plot_rf
041D9F FD E1       0039*       pop iy
041DA1 DD E1       0040*       pop ix
041DA3             0041*   
041DA3             0042*   ; draw hitbox for iy collider
041DA3 DD E5       0043*       push ix
041DA5 FD E5       0044*       push iy
041DA7 AF          0045*       xor a ; color mode 0
041DA8 0E 0A       0046*       ld c,c_green
041DAA CD E2 12 04 0047*       call vdu_gcol
041DAE 01 00 00 00 0048*       ld bc,0
041DB2 FD 4E 02    0049*       ld c,(iy+sprite_x+1)
041DB5 FD 46 03    0050*       ld b,(iy+sprite_x+2)
041DB8 11 00 00 00 0051*       ld de,0
041DBC FD 5E 05    0052*       ld e,(iy+sprite_y+1)
041DBF FD 56 06    0053*       ld d,(iy+sprite_y+2)
041DC2 21 00 00 00 0054*       ld hl,0 ; clear hlu and h
041DC6 FD 6E 1E    0055*       ld l,(iy+sprite_dim_x)
041DC9 09          0056*       add hl,bc ; hl = x1
041DCA E5          0057*       push hl ; save x1
041DCB 21 00 00 00 0058*       ld hl,0 ; clear hlu and h
041DCF FD 6E 1F    0059*       ld l,(iy+sprite_dim_y)
041DD2 19          0060*       add hl,de ; hl = y1
041DD3 DD E1       0061*       pop ix ; ix = x1 (was hl)
041DD5 E5          0062*       push hl
041DD6 FD E1       0063*       pop iy ; iy = y1
041DD8 CD 2E 17 04 0064*       call vdu_plot_rf
041DDC FD E1       0065*       pop iy
041DDE DD E1       0066*       pop ix
041DE0 C9          0067*       ret
041DE1             0068*   ; end collision_draw_hitboxes
041DE1             0069*   
041DE1             0070*   ; check_collision:
041DE1             0071*   ; Detects collision using bounding box method.
041DE1             0072*   ; Inputs:
041DE1             0073*   ;   IX -> Sprite/Tile table for Collider A
041DE1             0074*   ;   IY -> Sprite/Tile table for Collider B
041DE1             0075*   ; Outputs:
041DE1             0076*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
041DE1             0077*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
041DE1             0078*   ; Destroys: HL, DE, AF
041DE1             0079*   check_collision:
041DE1             0080*   check_collision_box:
041DE1             0081*   ; Test 1: (ay + ah) - by < 0
041DE1 21 00 00 00 0082*       ld hl,0                     ; Clear hlu
041DE5 DD 6E 05    0083*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
041DE8 DD 66 06    0084*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
041DEB 11 00 00 00 0085*       ld de,0                     ; Clear deu and d
041DEF DD 5E 1F    0086*       ld e,(ix+sprite_dim_y)      ; Load ah
041DF2 19          0087*       add hl,de                   ; (ay + ah)
041DF3 FD 5E 05    0088*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
041DF6 FD 56 06    0089*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
041DF9 AF          0090*       xor a                       ; Clear carry
041DFA ED 52       0091*       sbc hl,de                   ; (ay + ah) - by
041DFC FA 5F 1E 04 0092*       jp m,@not_collision         ; No collision if negative
041E00             0093*   
041E00             0094*   ; Test 2: ay - (by + bh) < 0
041E00 21 00 00 00 0095*       ld hl,0                     ; Clear hlu
041E04 FD 6E 05    0096*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
041E07 FD 66 06    0097*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
041E0A 11 00 00 00 0098*       ld de,0                     ; Clear deu and d
041E0E FD 5E 1F    0099*       ld e,(iy+sprite_dim_y)      ; Load bh
041E11 19          0100*       add hl,de                   ; (by + bh)
041E12 DD 5E 05    0101*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
041E15 DD 56 06    0102*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
041E18 AF          0103*       xor a                       ; Clear carry
041E19 ED 52       0104*       sbc hl,de                   ; (by + bh) - ay
041E1B FA 5F 1E 04 0105*       jp m,@not_collision         ; No collision if negative
041E1F             0106*   
041E1F             0107*   ; Test 3: (ax + aw) - bx < 0
041E1F 21 00 00 00 0108*       ld hl,0                     ; Clear hlu
041E23 DD 6E 02    0109*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
041E26 DD 66 03    0110*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
041E29 11 00 00 00 0111*       ld de,0                     ; Clear deu and d
041E2D DD 5E 1E    0112*       ld e,(ix+sprite_dim_x)      ; Load aw
041E30 19          0113*       add hl,de                   ; (ax + aw)
041E31 FD 5E 02    0114*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
041E34 FD 56 03    0115*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
041E37 AF          0116*       xor a                       ; Clear carry
041E38 ED 52       0117*       sbc hl,de                   ; (ax + aw) - bx
041E3A FA 5F 1E 04 0118*       jp m,@not_collision         ; No collision if negative
041E3E             0119*   
041E3E             0120*   ; Test 4: ax - (bx + bw) < 0
041E3E 21 00 00 00 0121*       ld hl,0                     ; Clear hlu
041E42 FD 6E 02    0122*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
041E45 FD 66 03    0123*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
041E48 11 00 00 00 0124*       ld de,0                     ; Clear deu and d
041E4C FD 5E 1E    0125*       ld e,(iy+sprite_dim_x)      ; Load bw
041E4F 19          0126*       add hl,de                   ; (bx + bw)
041E50 DD 5E 02    0127*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
041E53 DD 56 03    0128*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
041E56 AF          0129*       xor a                       ; Clear carry
041E57 ED 52       0130*       sbc hl,de                   ; (bx + bw) - ax
041E59 FA 5F 1E 04 0131*       jp m,@not_collision         ; No collision if negative
041E5D             0132*   
041E5D             0133*   ; If all tests pass, collision is detected
041E5D             0134*   @is_collision:
041E5D AF          0135*       xor a                       ; Clear accumulator and flags (a = 0)
041E5E C9          0136*       ret                         ; Return with zero flag set
041E5F             0137*   
041E5F             0138*   ; No collision detected
041E5F             0139*   @not_collision:
041E5F 3D          0140*       dec a                       ; Set a to -1
041E60 C9          0141*       ret                         ; Return with carry set
041E61             0142*   ; End check_collision_box
041E61             0143*   
041E61             0144*   
041E61             0145*   ; this routine detects collisions between two collidable objects,
041E61             0146*   ; which can include sprites, active tiles, or any screen coordinate
041E61             0147*   ; which has been set up with a sprite table structure that includes dim_x
041E61             0148*   ; representing the radius of the collidable object
041E61             0149*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
041E61             0150*   ; outputs: uh.l = distance - sum of radii
041E61             0151*   ;          zero flag set if collision detected
041E61             0152*   ;          dx168 and dy168 are also populated with the signed displacements
041E61             0153*   ; destroys: everything except indexes
041E61             0154*   ; check_collision:
041E61             0155*   check_collision_cartesian:
041E61             0156*   ; compute dx = x1-x0
041E61 DD 27 01    0157*       ld hl,(ix+sprite_x)
041E64 FD 17 01    0158*       ld de,(iy+sprite_x)
041E67 AF          0159*       xor a ; clear carry
041E68 ED 52       0160*       sbc hl,de
041E6A 22 7E 07 04 0161*       ld (dx168),hl ; dx to scratch
041E6E             0162*   ; compute dy = y1-y0
041E6E DD 27 04    0163*       ld hl,(ix+sprite_y)
041E71 FD 17 04    0164*       ld de,(iy+sprite_y)
041E74 AF          0165*       xor a ; clear carry
041E75 ED 52       0166*       sbc hl,de ; hl = dy
041E77 22 84 07 04 0167*       ld (dy168),hl ; dy to scratch
041E7B             0168*   ; compute euclidean distance between centers
041E7B CD 8A 07 04 0169*       call distance168 ; uh.l = distance
041E7F             0170*   ; check for overlap by summing half the radii
041E7F DD 7E 1E    0171*       ld a,(ix+sprite_dim_x)
041E82 CB 3F       0172*       srl a ; divide by 2
041E84 FD 5E 1E    0173*       ld e,(iy+sprite_dim_x)
041E87 CB 3B       0174*       srl e ; divide by 2
041E89 83          0175*       add a,e
041E8A 11 00 00 00 0176*       ld de,0 ; clear deu and e
041E8E 57          0177*       ld d,a ; ud.e = sum of radii
041E8F B7          0178*       or a ; clear carry
041E90 ED 52       0179*       sbc hl,de ; uh.l = distance - sum of radii
041E92 C8          0180*       ret z ; return collision
041E93 F0          0181*       ret p ; return no collision
041E94 AF          0182*       xor a ; return collision
041E95 C9          0183*       ret
041E96             0184*   ; end check_collision_cartesian
041E96             0185*   
041E96             0186*   ; check collisions of a sprite or tile against a sprite group
041E96             0187*   ; inputs: iy = pointer to sprite or tile record being checked
041E96             0188*   ;         ix = pointer to sprite group, b = number of records in sprite group
041E96             0189*   check_sprite_group_collisions:
041E96             0190*   @collision_loop:
041E96 DD 22 63 1D 0191*       ld (collision_table_pointer),ix ; update table pointer
       04          
041E9B C5          0192*       push bc ; backup loop counter
041E9C             0193*   ; check sprite_collisions sprite_alive flag to see if sprite is active
041E9C DD CB 1D 76 0194*       bit sprite_alive,(ix+sprite_collisions)
041EA0 CA B6 1E 04 0195*       jp z,@next_record ; not alive so skip to next record
041EA4             0196*   ; sprite alive so check for collision
041EA4 CD E1 1D 04 0197*       call check_collision
041EA8 C2 B6 1E 04 0198*       jp nz,@next_record ; no collision
041EAC             0199*   ; set sprite_just_died flag for each entity and return to caller
041EAC C1          0200*       pop bc ; dummy pop to balance stack
041EAD DD CB 1D FE 0201*       set sprite_just_died,(ix+sprite_collisions)
041EB1 FD CB 1D FE 0202*       set sprite_just_died,(iy+sprite_collisions)
041EB5 C9          0203*       ret
041EB6             0204*   @next_record:
041EB6 C1          0205*       pop bc ; get back our loop counter
041EB7 ED 32 40    0206*       lea ix,ix+table_record_size
041EBA 10 DA       0207*       djnz @collision_loop ; loop until we've checked all the records
041EBC             0208*   ; return to caller
041EBC AF          0209*       xor a
041EBD 3C          0210*       inc a ; resets sign flag and a to non-zero indicating no collision
041EBE C9          0211*       ret
041EBF             0212*   ; end check_sprite_group_collisions
041EBF             0213*   
041EBF             0214*   check_enemy_collision_laser: ; check for collisions with laser
041EBF DD 21 67 98 0215*       ld ix,player_lasers_begin
       04          
041EC4 06 04       0216*       ld b,player_lasers_max
041EC6 CD 96 1E 04 0217*       call check_sprite_group_collisions
041ECA C9          0218*       ret
041ECB             0219*   ; end check_enemy_collision_laser
041ECB             0220*   
041ECB             0221*   check_enemy_collision_player: ; check for collisions with player
041ECB DD 21 67 99 0222*       ld ix,player_begin
       04          
041ED0 CD E1 1D 04 0223*       call check_collision
041ED4 C0          0224*       ret nz ; no collision so nothing to do
041ED5 DD CB 1D FE 0225*       set sprite_just_died,(ix+sprite_collisions)
041ED9 FD CB 1D FE 0226*       set sprite_just_died,(iy+sprite_collisions)
041EDD AF          0227*       xor a ; signal collision detected
041EDE C9          0228*       ret
041EDF             0229*   ; end check_enemy_collision_player
041EDF             0047        include "enemies.inc"
041EDF ED 1E 04    0001*   enemies_state: dl enemies_alive
041EE2             0002*   
041EE2             0003*   do_enemies:
041EE2 2A DF 1E 04 0004*       ld hl,(enemies_state)
041EE6             0005*       CALL_HL
041EE6 01 EC 1E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
041EEA C5          0002*M1     push bc ; which constitutes the return address
041EEB E9          0003*M1     jp (hl) ; Jump to the address in HL
041EEC C9          0006*       ret
041EED             0007*   
041EED             0008*   enemies_alive:
041EED FD 21 A7 99 0009*       ld iy,enemy_sprites_begin
       04          
041EF2 06 07       0010*       ld b,table_num_enemy_records
041EF4 CD C5 7E 04 0011*       call move_sprite_group
041EF8 C9          0012*       ret
041EF9             0013*   
041EF9             0014*   enemies_despawning:
041EF9 C9          0015*       ret
041EFA             0016*   
041EFA             0017*   enemies_dead:
041EFA C9          0018*       ret
041EFB             0019*   
041EFB             0020*   enemies_respawning:
041EFB C9          0021*       ret
041EFC             0048        include "enemy_fireball.inc"
041EFC             0001*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
041EFC             0002*   fireballs_max: equ 4
041EFC             0003*   
041EFC             0004*   fireball_defaults:
041EFC 03          0005*       db enemy_projectile     ; type
041EFD 11 01 00    0006*       dl BUF_FIREBALL_2_000   ; base_bufferId
041F00 4E 1F 04    0007*       dl move_enemy_fireball  ; move_program
041F03 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
041F04 10          0009*       db 16                   ; dim_x
041F05 10          0010*       db 16                   ; dim_y
041F06 20          0011*       db 32                   ; num_orientations
041F07 02          0012*       db 2                    ; num_animations
041F08 00          0013*       db 0                    ; animation
041F09 08          0014*       db 8                    ; animation_timer
041F0A 00          0015*       db 0                    ; move_timer
041F0B 00          0016*       db 0                    ; move_step
041F0C 00          0017*       db 0                    ; points
041F0D FE          0018*       db -2                   ; shield_damage
041F0E 00          0019*       db 0                    ; frame
041F0F             0020*   
041F0F             0021*   enemy_spawn_fireball:
041F0F 21 FC 1E 04 0022*       ld hl,fireball_defaults
041F13 DD 21 67 9A 0023*       ld ix,fireballs_base
       04          
041F18 06 04       0024*       ld b,fireballs_max
041F1A CD 5B 8A 04 0025*       call spawn_sprite_from_tile
041F1E D0          0026*       ret nc ; no carry means no free sprite slots, so we go home
041F1F             0027*   ; other specific initialization
041F1F             0028*   ; ------------------------------------------------
041F1F             0029*   ; copy sprite heading and component velocities from targeting_computer
041F1F 2A 6B 83 04 0030*       ld hl,(Bearing_t)
041F23 11 00 80 00 0031*       ld de,128*256 ; rotate 128 degrees
041F27 19          0032*       add hl,de
041F28 DD 2F 10    0033*       ld (ix+sprite_heading),hl
041F2B 2A 74 83 04 0034*       ld hl,(Vp_x)
041F2F DD 2F 07    0035*       ld (ix+sprite_xvel),hl
041F32 2A 77 83 04 0036*       ld hl,(Vp_y)
041F36 DD 2F 0A    0037*       ld (ix+sprite_yvel),hl
041F39             0038*   ; move projectile one frame's distance so it isn't drawn right over turret
041F39 DD 27 01    0039*       ld hl,(ix+sprite_x)
041F3C DD 17 07    0040*       ld de,(ix+sprite_xvel)
041F3F 19          0041*       add hl,de
041F40 DD 2F 01    0042*       ld (ix+sprite_x),hl
041F43 DD 27 04    0043*       ld hl,(ix+sprite_y)
041F46 DD 17 0A    0044*       ld de,(ix+sprite_yvel)
041F49 19          0045*       add hl,de
041F4A DD 2F 04    0046*       ld (ix+sprite_y),hl
041F4D C9          0047*       ret
041F4E             0048*   ; end enemy_spawn_fireball
041F4E             0049*   
041F4E             0050*   move_enemy_fireball:
041F4E             0051*   ; run the movement program for the fireball enemy
041F4E CD 5B 7F 04 0052*       call move_sprite
041F52 3A 99 7D 04 0053*       ld a,(sprite_screen_edge)
041F56 B7          0054*       or a ; a will be non-zero if have scrolled off screen
041F57 C2 DF 7D 04 0055*       jp nz,table_deactivate_sprite
041F5B DD 21 67 99 0056*       ld ix,player_begin
       04          
041F60 DD CB 1D 76 0057*       bit sprite_alive,(ix+sprite_collisions)
041F64 CA 78 1F 04 0058*       jp z,@animate ; player is dead so don't check for collisions
041F68 CD CB 1E 04 0059*       call check_enemy_collision_player
041F6C C2 78 1F 04 0060*       jp nz,@animate ; no collision so do animation
041F70 CD 44 7D 04 0061*       call update_shields
041F74 C3 24 21 04 0062*       jp spawn_explosion
041F78             0063*   @animate:
041F78             0064*   ; check the animation timer
041F78 FD 35 23    0065*       dec (iy+sprite_animation_timer)
041F7B C0          0066*       ret nz ; not time to animate
041F7C             0067*   ; reset the animation timer and bump animation
041F7C 3E 08       0068*       ld a,8
041F7E FD 77 23    0069*       ld (iy+sprite_animation_timer),a
041F81 FD 7E 22    0070*       ld a,(iy+sprite_animation)
041F84 3C          0071*       inc a
041F85 E6 01       0072*       and %00000001 ; modulo 2
041F87 FD 77 22    0073*       ld (iy+sprite_animation),a
041F8A CD 12 80 04 0074*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
041F8E CD F5 17 04 0075*       call vdu_sprite_select_frame
041F92 C9          0076*       ret
041F93             0077*   ; end move_enemy_fireball
041F93             0078*   
041F93             0079*   init_enemy_fireballs:
041F93             0080*   ; set pointer to seeker sprite table
041F93 FD 21 67 9A 0081*       ld iy,fireballs_base
       04          
041F98 FD 7E 00    0082*       ld a,(iy+sprite_id) ; sprite id
041F9B 1E 04       0083*       ld e,fireballs_max ; sprite loop counter
041F9D             0084*   ; define seeker sprites
041F9D             0085*   @sprites_loop:
041F9D F5          0086*       push af
041F9E D5          0087*       push de
041F9F CD 92 17 04 0088*       call vdu_sprite_select
041FA3 CD A5 17 04 0089*       call vdu_sprite_clear_frames
041FA7 21 11 01 00 0090*       ld hl,BUF_FIREBALL_2_000
041FAB 06 80       0091*       ld b,4*32 ; 4 animations * 32 orientations
041FAD             0092*   @frames_loop:
041FAD C5          0093*       push bc
041FAE E5          0094*       push hl
041FAF CD E7 18 04 0095*       call vdu_sprite_add_buff
041FB3 E1          0096*       pop hl
041FB4 23          0097*       inc hl
041FB5 C1          0098*       pop bc
041FB6 10 F5       0099*       djnz @frames_loop
041FB8 D1          0100*       pop de ; sprite loop counter
041FB9 F1          0101*       pop af ; sprite id
041FBA 3C          0102*       inc a
041FBB 1D          0103*       dec e
041FBC C2 9D 1F 04 0104*       jp nz,@sprites_loop
041FC0 C9          0105*       ret
041FC1             0106*   ; end init_enemy_fireballs
041FC1             0049        include "enemy_seeker.inc"
041FC1 00          0001*   seekers_count: db 0
041FC2             0002*   seekers_max: equ 3
041FC2             0003*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041FC2             0004*   
041FC2             0005*   seeker_defaults:
041FC2 01          0006*       db enemy_air            ; type
041FC3 56 01 00    0007*       dl BUF_SEEKER_000       ; base_bufferId
041FC6 79 20 04    0008*       dl en_nav_seek_zag    ; move_program
041FC9 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
041FCA 10          0010*       db 16                   ; dim_x
041FCB 10          0011*       db 16                   ; dim_y
041FCC 20          0012*       db 32                   ; num_orientations
041FCD 01          0013*       db 1                    ; num_animations
041FCE 00          0014*       db 0                    ; animation
041FCF 00          0015*       db 0                    ; animation_timer
041FD0 01          0016*       db 1                    ; move_timer
041FD1 00          0017*       db 0                    ; move_step
041FD2 0A          0018*       db 10                   ; points
041FD3 FC          0019*       db -4                   ; shield_damage
041FD4 00          0020*       db 0                    ; frame
041FD5             0021*   
041FD5             0022*   enemy_spawn_seeker:
041FD5 21 C2 1F 04 0023*       ld hl,seeker_defaults
041FD9 DD 21 A7 99 0024*       ld ix,seekers_base
       04          
041FDE 06 03       0025*       ld b,seekers_max
041FE0 CD 5B 8A 04 0026*       call spawn_sprite_from_tile
041FE4 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
041FE5             0028*   ; other specific initialization
041FE5 21 80 02 00 0029*       ld hl,speed_seeker
041FE9 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
041FEC C9          0031*       ret
041FED             0032*   ; end enemy_spawn_seeker
041FED             0033*   
041FED             0034*   move_enemy_seeker_orbit:
041FED             0035*   ; compute x coordinate of orbit origin based on sprite id
041FED 3E 05       0036*       ld a,seeker_min_sprite_id
041FEF FD 96 00    0037*       sub (iy+sprite_id)
041FF2 6F          0038*       ld l,a
041FF3 26 55       0039*       ld h,85 ; 1/3 the playing field width
041FF5 ED 6C       0040*       mlt hl
041FF7 3E 40       0041*       ld a,64 ; 1/4 of the playing field width
041FF9 85          0042*       add a,l ; a = x coordinate of orbit origin
041FFA FD 77 25    0043*       ld (iy+sprite_move_step),a ; as good a place as any to store it
041FFD             0044*   ; initialize orbit angle
041FFD AF          0045*       xor a
041FFE FD 77 13    0046*       ld (iy+sprite_orientation),a
042001             0047*   ; ; initialize move timer
042001             0048*   ;     inc a ; set to 1
042001             0049*   ;     ld (iy+sprite_move_timer),a
042001             0050*   ; init done, so update move program
042001 21 08 20 04 0051*       ld hl,@stage1 ; update move program pointer
042005 FD 2F 1A    0052*       ld (iy+sprite_move_program),hl
042008             0053*   ; fall through to @stage1
042008             0054*   @stage1:
042008             0055*   ; ; check whether time to update orbit angle
042008             0056*   ;     dec (iy+sprite_move_timer)
042008             0057*   ;     jp nz,@F ; not time to change so simply movethe sprite on the current heading
042008             0058*   ;     inc (iy+sprite_move_timer) ; reset timer to 1
042008             0059*   ; update the target coordinates based on orbit angle and radius
042008 FD 34 13    0060*       inc (iy+sprite_orientation) ; increment angle
04200B 21 00 00 00 0061*       ld hl,0 ; clear hlu and l
04200F FD 66 13    0062*       ld h,(iy+sprite_orientation) ; uh.l = angle
042012 11 00 80 00 0063*       ld de,128*256 ; ud.e = radius
042016 CD F0 06 04 0064*       call polar_to_cartesian ; u.bc, u.de = x,y offsets
04201A FD 7E 25    0065*       ld a,(iy+sprite_move_step) ; x coordinate of orbit origin
04201D 80          0066*       add a,b ; add x offset
04201E 01 00 00 00 0067*       ld bc,0 ; bcu and c
042022 47          0068*       ld b,a ; ub.c = x
042023 21 00 A8 00 0069*       ld hl,336/2*256
042027 19          0070*       add hl,de
042028 EB          0071*       ex de,hl ; ud.e = y
042029 CD 48 83 04 0072*       call bearing_to_coord ; uh.l = angle to coordinate
04202D FD 2F 10    0073*       ld (iy+sprite_heading),hl ; save angle as heading
042030             0074*   ; compute component velocities, save them in sprite record, and move the sprite
042030 CD FC 7F 04 0075*       call sprite_compute_velocities
042034             0076*   @@:
042034 CD 5B 7F 04 0077*       call move_sprite ; move the sprite
042038 C3 3C 20 04 0078*       jp move_enemy_seeker
04203C             0079*   ; end move_enemy_seeker_orbit
04203C             0080*   
04203C             0081*   move_enemy_seeker:
04203C DD 21 67 99 0082*       ld ix,player_begin
       04          
042041 DD CB 1D 76 0083*       bit sprite_alive,(ix+sprite_collisions)
042045 CA 51 20 04 0084*       jp z,@F ; player is dead so don't check for collisions
042049 CD CB 1E 04 0085*       call check_enemy_collision_player
04204D CA 71 20 04 0086*       jp z,@player
042051             0087*   @@:
042051 CD BF 1E 04 0088*       call check_enemy_collision_laser
042055 CA 69 20 04 0089*       jp z,@laser
042059             0090*   ; change the animation frame to match heading
042059 FD 7E 00    0091*       ld a,(iy+sprite_id)
04205C CD 92 17 04 0092*       call vdu_sprite_select
042060 CD 27 80 04 0093*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
042064 CD F5 17 04 0094*       call vdu_sprite_select_frame
042068 C9          0095*       ret
042069             0096*   @laser:
042069 CD DE 7C 04 0097*       call update_score
04206D C3 24 21 04 0098*       jp spawn_explosion
042071             0099*   @player:
042071 CD 44 7D 04 0100*       call update_shields
042075 C3 24 21 04 0101*       jp spawn_explosion
042079             0102*   ; end move_enemy_seeker
042079             0103*   
042079             0104*   ; contains the logic for how to move the enemy
042079             0105*   ; and then does the moving
042079             0106*   ; inputs: a fully-populated active sprite table
042079             0107*   ;         player position variables
042079             0108*   ; destroys: everything except index registers
042079             0109*   ; outputs: moving enemies
042079             0110*   en_nav_seek_zag:
042079             0111*   ; set velocity and orientation by player's relative location
042079             0112*   ; move enemies y-axis
042079             0113*   ; where is player relative to us?
042079 CD F6 82 04 0114*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
04207D             0115*   ; is player above or below us?
04207D ED 53 37 03 0116*       ld (ude),de ; dy
       04          
042082 3A 39 03 04 0117*       ld a,(ude+2) ; deu
042086 17          0118*       rla ; shift sign bit into carry
042087 D2 AF 20 04 0119*       jp nc,@zig_zag ; player is below,evade
04208B             0120*   ; player is even or above,so home in on current heading
04208B FD 2F 10    0121*       ld (iy+sprite_heading),hl ; save sprite heading
04208E             0122*   ; fall through to @compute_velocities
04208E             0123*   @compute_velocities:
04208E CD FC 7F 04 0124*       call sprite_compute_velocities
042092 CD 5B 7F 04 0125*       call move_sprite ; move the sprite
042096 B7          0126*       or a ; a will be non-zero if have collided with screen edge
042097 C2 BA 20 04 0127*       jp nz,@zag_switch ; switch direction
04209B C3 3C 20 04 0128*       jp move_enemy_seeker ; didn't hit an edge so check collisions and move sprite
04209F             0129*   @zig_zag_start:
04209F FD 2A 96 7D 0130*       ld iy,(table_pointer)
       04          
0420A4 CD 14 05 04 0131*       call rand_8
0420A8 E6 3F       0132*       and %00111111 ; limit it to 64
0420AA CB DF       0133*       set 3,a ; make sure it's at least 8
0420AC FD 77 24    0134*       ld (iy+sprite_move_timer),a ; store it
0420AF             0135*       ; fall through to @zig_zag
0420AF             0136*   @zig_zag:
0420AF FD 7E 24    0137*       ld a,(iy+sprite_move_timer)
0420B2 3D          0138*       dec a
0420B3 FD 77 24    0139*       ld (iy+sprite_move_timer),a
0420B6 C2 DC 20 04 0140*       jp nz,@zig_zag_no_switch
0420BA             0141*   @zag_switch:
0420BA             0142*       ; otherwise flip direction and restart timer
0420BA FD 7E 25    0143*       ld a,(iy+sprite_move_step)
0420BD EE 01       0144*       xor %1 ; flips bit zero
0420BF FD 77 25    0145*       ld (iy+sprite_move_step),a ; store it
0420C2 C2 D1 20 04 0146*       jp nz,@F ; zag right
0420C6             0147*   ;otherwise zag left
0420C6 21 00 A0 00 0148*       ld hl,160*256; southwest heading
0420CA FD 2F 10    0149*       ld (iy+sprite_heading),hl ; save sprite heading
0420CD C3 9F 20 04 0150*       jp @zig_zag_start
0420D1             0151*   @@: ; zag right
0420D1 21 00 60 00 0152*       ld hl,96*256; southeast heading
0420D5 FD 2F 10    0153*       ld (iy+sprite_heading),hl ; save sprite heading
0420D8 C3 9F 20 04 0154*       jp @zig_zag_start
0420DC             0155*   @zig_zag_no_switch:
0420DC             0156*       ; ld a,(sprite_orientation)
0420DC FD 27 10    0157*       ld hl,(iy+sprite_heading)
0420DF C3 8E 20 04 0158*       jp @compute_velocities
0420E3             0159*   ; end en_nav_seek_zag
0420E3             0160*   
0420E3             0161*   
0420E3             0162*   init_enemy_seekers:
0420E3             0163*   ; set pointer to seeker sprite table
0420E3 FD 21 A7 99 0164*       ld iy,seekers_base
       04          
0420E8 FD 7E 00    0165*       ld a,(iy+sprite_id) ; sprite id
0420EB 1E 03       0166*       ld e,seekers_max ; sprite loop counter
0420ED             0167*   ; define seeker sprites
0420ED             0168*   @sprites_loop:
0420ED F5          0169*       push af
0420EE D5          0170*       push de
0420EF CD 92 17 04 0171*   	call vdu_sprite_select
0420F3 CD A5 17 04 0172*   	call vdu_sprite_clear_frames
0420F7 21 56 01 00 0173*   	ld hl,BUF_SEEKER_000
0420FB 06 20       0174*   	ld b,32 ; 32 bitmaps for seeker
0420FD             0175*   @frames_loop:
0420FD C5          0176*   	push bc
0420FE E5          0177*   	push hl
0420FF CD E7 18 04 0178*   	call vdu_sprite_add_buff
042103 E1          0179*   	pop hl
042104 23          0180*   	inc hl
042105 C1          0181*   	pop bc
042106 10 F5       0182*   	djnz @frames_loop
042108 D1          0183*       pop de ; sprite loop counter
042109 F1          0184*       pop af ; sprite id
04210A 3C          0185*       inc a
04210B 1D          0186*       dec e
04210C C2 ED 20 04 0187*       jp nz,@sprites_loop
042110 C9          0188*       ret
042111             0189*   ; end init_enemy_seekers
042111             0050        include "explosion.inc"
042111             0001*   explosions_max: equ 8
042111             0002*   explosion_defaults:
042111 04          0003*       db explosion            ; type
042112 0C 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042115 8C 21 04    0005*       dl move_explosion	    ; move_program
042118 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
042119 07          0007*       db 7	                ; dim_x
04211A 07          0008*       db 7                    ; dim_y
04211B 01          0009*       db 1                    ; num_orientations
04211C 05          0010*       db 5                    ; num_animations
04211D 05          0011*       db 5	                ; animation
04211E 08          0012*       db 8	                ; animation_timer
04211F 00          0013*       db 0	                ; move_timer
042120 00          0014*       db 0	                ; move_step
042121 00          0015*       db 0	                ; points
042122 00          0016*       db 0	                ; shield_damage
042123 00          0017*       db 0                    ; frame
042124             0018*   
042124             0019*   spawn_explosion:
042124 21 11 21 04 0020*       ld hl,explosion_defaults
042128 DD 21 67 9B 0021*       ld ix,explosions_base
       04          
04212D 06 08       0022*       ld b,explosions_max
04212F CD 93 7E 04 0023*       call spawn_sprite_from_sprite
042133 D2 DF 7D 04 0024*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042137             0025*   ; other specific initialization
042137 21 00 00 00 0026*       ld hl,0
04213B DD 2F 07    0027*       ld (ix+sprite_xvel),hl
04213E 21 00 01 00 0028*       ld hl,1*256
042142 DD 2F 0A    0029*       ld (ix+sprite_yvel),hl
042145             0030*   ; deactivate parent sprite
042145 C3 DF 7D 04 0031*       jp table_deactivate_sprite
042149             0032*   ; end spawn_explosion
042149             0033*   
042149             0034*   spawn_explosion_player:
042149 FD 21 67 99 0035*       ld iy,player_begin
       04          
04214E FD 22 96 7D 0036*       ld (table_pointer),iy
       04          
042153 21 11 21 04 0037*       ld hl,explosion_defaults
042157 DD 21 67 9B 0038*       ld ix,explosions_base
       04          
04215C 06 08       0039*       ld b,explosions_max
04215E CD 93 7E 04 0040*       call spawn_sprite_from_sprite
042162 D2 DF 7D 04 0041*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042166             0042*   ; other specific initialization
042166 C9          0043*       ret
042167             0044*   ; end spawn_explosion_player
042167             0045*   
042167             0046*   tile_spawn_explosion:
042167 21 11 21 04 0047*       ld hl,explosion_defaults
04216B DD 21 67 9B 0048*       ld ix,explosions_base
       04          
042170 06 08       0049*       ld b,explosions_max
042172 CD 5B 8A 04 0050*       call spawn_sprite_from_tile
042176 D2 99 87 04 0051*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
04217A             0052*   ; other specific initialization
04217A 21 00 00 00 0053*       ld hl,0
04217E DD 2F 07    0054*       ld (ix+sprite_xvel),hl
042181 21 00 01 00 0055*       ld hl,1*256
042185 DD 2F 0A    0056*       ld (ix+sprite_yvel),hl
042188             0057*   ; deactivate parent sprite
042188 C3 99 87 04 0058*       jp table_deactivate_tile
04218C             0059*   ; end tile_spawn_explosion
04218C             0060*   
04218C             0061*   move_explosion:
04218C             0062*   ; run the movement program for the explosion
04218C CD 5B 7F 04 0063*       call move_sprite
042190 B7          0064*       or a ; a will be non-zero if have scrolled off screen
042191 C2 DF 7D 04 0065*       jp nz,table_deactivate_sprite
042195             0066*   ; do the animations
042195 FD 35 23    0067*       dec (iy+sprite_animation_timer)
042198 C0          0068*       ret nz ; not time to bump animation frame
042199 FD 34 28    0069*       inc (iy+sprite_frame)
04219C FD 35 22    0070*       dec (iy+sprite_animation)
04219F CA DF 7D 04 0071*       jp z,table_deactivate_sprite ; reached the end of the animations
0421A3 3E 08       0072*       ld a,8 ; reset animation timer
0421A5 FD 77 23    0073*       ld (iy+sprite_animation_timer),a
0421A8 C9          0074*       ret
0421A9             0075*   ; end move_explosion
0421A9             0076*   
0421A9             0077*   move_explosions:
0421A9             0078*   ; initialize pointers and loop counter
0421A9 FD 21 67 9B 0079*       ld iy,explosions_base ; set iy to first record in table
       04          
0421AE 06 08       0080*       ld b,explosions_max ; loop counter
0421B0 CD C5 7E 04 0081*       call move_sprite_group
0421B4 C9          0082*       ret
0421B5             0083*   ; end move_explosions
0421B5             0084*   
0421B5             0085*   init_explosions:
0421B5             0086*   ; set pointer to explosion sprite table
0421B5 FD 21 67 9B 0087*       ld iy,explosions_base
       04          
0421BA FD 7E 00    0088*       ld a,(iy+sprite_id) ; sprite id
0421BD 1E 08       0089*       ld e,explosions_max ; sprite loop counter
0421BF             0090*   ; define explosion sprites
0421BF             0091*   @sprites_loop:
0421BF F5          0092*       push af
0421C0 D5          0093*       push de
0421C1 CD 92 17 04 0094*   	call vdu_sprite_select
0421C5 CD A5 17 04 0095*   	call vdu_sprite_clear_frames
0421C9 21 0C 01 00 0096*   	ld hl,BUF_EXPLOSION_A
0421CD 06 05       0097*   	ld b,5 ; 5 bitmaps for explosion
0421CF             0098*   @frames_loop:
0421CF C5          0099*   	push bc
0421D0 E5          0100*   	push hl
0421D1 CD E7 18 04 0101*   	call vdu_sprite_add_buff
0421D5 E1          0102*   	pop hl
0421D6 23          0103*   	inc hl
0421D7 C1          0104*   	pop bc
0421D8 10 F5       0105*   	djnz @frames_loop
0421DA D1          0106*       pop de ; sprite loop counter
0421DB F1          0107*       pop af ; sprite id
0421DC 3C          0108*       inc a
0421DD 1D          0109*       dec e
0421DE C2 BF 21 04 0110*       jp nz,@sprites_loop
0421E2 C9          0111*       ret
0421E3             0112*   ; end init_explosions
0421E3             0051        include "fonts_list.inc"
0421E3             0001*   ; Generated by asm_config_editor.py
0421E3             0002*   font_list_record_size: equ 12
0421E3             0003*   font_list_width: equ 0
0421E3             0004*   font_list_height: equ 3
0421E3             0005*   font_list_bufferId: equ 6
0421E3             0006*   font_list_filename: equ 9
0421E3             0007*   
0421E3             0008*   num_fonts: equ 13
0421E3             0009*   
0421E3             0010*   ; Index list:
0421E3             0011*   amiga_forever_8x8: equ 64000
0421E3             0012*   computer_pixel_7_8x12: equ 64001
0421E3             0013*   computer_pixel_7_8x16: equ 64002
0421E3             0014*   dopecre_8x8: equ 64003
0421E3             0015*   gamer_2_8x8: equ 64004
0421E3             0016*   Lat15_VGA8_8x8: equ 64005
0421E3             0017*   Lat2_VGA8_8x8: equ 64006
0421E3             0018*   Lat38_VGA8_8x8: equ 64007
0421E3             0019*   Lat7_VGA8_8x8: equ 64008
0421E3             0020*   planetary_contact_8x8: equ 64009
0421E3             0021*   Squarewave_Bold_8x12: equ 64010
0421E3             0022*   super_mario_bros_2_8x8: equ 64011
0421E3             0023*   wendy_neue_6x6: equ 64012
0421E3             0024*   
0421E3             0025*   font_list: ; width; height; bufferId; filename;:
0421E3 08 00 00 08 0026*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 7F 22 04 
0421EF 08 00 00 0C 0027*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 A1 22 04 
0421FB 08 00 00 10 0028*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 C7 22 04 
042207 08 00 00 08 0029*   	dl 8, 8, 64003, fn_dopecre_8x8
       00 00 03 FA 
       00 ED 22 04 
042213 08 00 00 08 0030*   	dl 8, 8, 64004, fn_gamer_2_8x8
       00 00 04 FA 
       00 09 23 04 
04221F 08 00 00 08 0031*   	dl 8, 8, 64005, fn_Lat15_VGA8_8x8
       00 00 05 FA 
       00 25 23 04 
04222B 08 00 00 08 0032*   	dl 8, 8, 64006, fn_Lat2_VGA8_8x8
       00 00 06 FA 
       00 44 23 04 
042237 08 00 00 08 0033*   	dl 8, 8, 64007, fn_Lat38_VGA8_8x8
       00 00 07 FA 
       00 62 23 04 
042243 08 00 00 08 0034*   	dl 8, 8, 64008, fn_Lat7_VGA8_8x8
       00 00 08 FA 
       00 81 23 04 
04224F 08 00 00 08 0035*   	dl 8, 8, 64009, fn_planetary_contact_8x8
       00 00 09 FA 
       00 9F 23 04 
04225B 08 00 00 0C 0036*   	dl 8, 12, 64010, fn_Squarewave_Bold_8x12
       00 00 0A FA 
       00 C5 23 04 
042267 08 00 00 08 0037*   	dl 8, 8, 64011, fn_super_mario_bros_2_8x8
       00 00 0B FA 
       00 EA 23 04 
042273 06 00 00 06 0038*   	dl 6, 6, 64012, fn_wendy_neue_6x6
       00 00 0C FA 
       00 11 24 04 
04227F             0039*   
04227F             0040*   ; files_list: ; filename:
04227F 2F 6D 6F 73 0041*   fn_amiga_forever_8x8: db "/mos/fonts/amiga_forever_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 61 
       6D 69 67 61 
       5F 66 6F 72 
       65 76 65 72 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0422A1 2F 6D 6F 73 0042*   fn_computer_pixel_7_8x12: db "/mos/fonts/computer_pixel_7_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 32 
       2E 66 6F 6E 
       74 00       
0422C7 2F 6D 6F 73 0043*   fn_computer_pixel_7_8x16: db "/mos/fonts/computer_pixel_7_8x16.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
0422ED 2F 6D 6F 73 0044*   fn_dopecre_8x8: db "/mos/fonts/dopecre_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 64 
       6F 70 65 63 
       72 65 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
042309 2F 6D 6F 73 0045*   fn_gamer_2_8x8: db "/mos/fonts/gamer_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 67 
       61 6D 65 72 
       5F 32 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
042325 2F 6D 6F 73 0046*   fn_Lat15_VGA8_8x8: db "/mos/fonts/Lat15-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 31 35 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
042344 2F 6D 6F 73 0047*   fn_Lat2_VGA8_8x8: db "/mos/fonts/Lat2-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 32 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
042362 2F 6D 6F 73 0048*   fn_Lat38_VGA8_8x8: db "/mos/fonts/Lat38-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 33 38 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
042381 2F 6D 6F 73 0049*   fn_Lat7_VGA8_8x8: db "/mos/fonts/Lat7-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 37 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
04239F 2F 6D 6F 73 0050*   fn_planetary_contact_8x8: db "/mos/fonts/planetary_contact_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 70 
       6C 61 6E 65 
       74 61 72 79 
       5F 63 6F 6E 
       74 61 63 74 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0423C5 2F 6D 6F 73 0051*   fn_Squarewave_Bold_8x12: db "/mos/fonts/Squarewave_Bold_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 53 
       71 75 61 72 
       65 77 61 76 
       65 5F 42 6F 
       6C 64 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
0423EA 2F 6D 6F 73 0052*   fn_super_mario_bros_2_8x8: db "/mos/fonts/super_mario_bros_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 73 
       75 70 65 72 
       5F 6D 61 72 
       69 6F 5F 62 
       72 6F 73 5F 
       32 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
042411 2F 6D 6F 73 0053*   fn_wendy_neue_6x6: db "/mos/fonts/wendy_neue_6x6.font",0
       2F 66 6F 6E 
       74 73 2F 77 
       65 6E 64 79 
       5F 6E 65 75 
       65 5F 36 78 
       36 2E 66 6F 
       6E 74 00    
042430             0052        include "images_bg.inc"
042430             0001*   ; Generated by make_images.py
042430             0002*   
042430             0003*   bg_num_images: equ 4
042430             0004*   
042430             0005*   ; buffer_ids:
042430             0006*   BUF_BG_STARS_0: equ 1024
042430             0007*   BUF_BG_STARS_3: equ 1025
042430             0008*   BUF_BG_STARS_4: equ 1026
042430             0009*   BUF_BG_STARS_6: equ 1027
042430             0010*   
042430             0011*   bg_image_list: ; type; width; height; size; filename; bufferId:
042430 01 00 00 00 0012*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       78 24 04 00 
       04 00       
042442 01 00 00 00 0013*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1025
       01 00 00 01 
       00 00 00 01 
       8C 24 04 01 
       04 00       
042454 01 00 00 00 0014*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1026
       01 00 00 01 
       00 00 00 01 
       A0 24 04 02 
       04 00       
042466 01 00 00 00 0015*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1027
       01 00 00 01 
       00 00 00 01 
       B4 24 04 03 
       04 00       
042478             0016*   
042478             0017*   ; files_list: ; filename:
042478 62 67 2F 62 0018*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
04248C 62 67 2F 62 0019*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
0424A0 62 67 2F 62 0020*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
0424B4 62 67 2F 62 0021*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
0424C8             0053        include "images_tiles_dg.inc"
0424C8             0001*   ; Generated by tiles_dg.py
0424C8             0002*   
0424C8             0003*   tiles_dg_num_images: equ 187
0424C8             0004*   
0424C8             0005*   ; bufferIds:
0424C8             0006*   
0424C8             0007*   
0424C8             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
0424C8 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       EE 31 04 00 
       02 00       
0424DA 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       03 32 04 01 
       02 00       
0424EC 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       18 32 04 02 
       02 00       
0424FE 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2D 32 04 03 
       02 00       
042510 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       42 32 04 04 
       02 00       
042522 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       57 32 04 05 
       02 00       
042534 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6C 32 04 06 
       02 00       
042546 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       81 32 04 07 
       02 00       
042558 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       96 32 04 08 
       02 00       
04256A 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AB 32 04 09 
       02 00       
04257C 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C0 32 04 0A 
       02 00       
04258E 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D5 32 04 0B 
       02 00       
0425A0 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       EA 32 04 10 
       02 00       
0425B2 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FF 32 04 21 
       02 00       
0425C4 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       14 33 04 22 
       02 00       
0425D6 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       29 33 04 23 
       02 00       
0425E8 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3E 33 04 24 
       02 00       
0425FA 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       53 33 04 25 
       02 00       
04260C 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       68 33 04 26 
       02 00       
04261E 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7D 33 04 27 
       02 00       
042630 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       92 33 04 28 
       02 00       
042642 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       A7 33 04 2D 
       02 00       
042654 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       BC 33 04 2E 
       02 00       
042666 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       D1 33 04 2F 
       02 00       
042678 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       E6 33 04 30 
       02 00       
04268A 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       FB 33 04 31 
       02 00       
04269C 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       10 34 04 32 
       02 00       
0426AE 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       25 34 04 33 
       02 00       
0426C0 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       3A 34 04 34 
       02 00       
0426D2 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       4F 34 04 35 
       02 00       
0426E4 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       64 34 04 36 
       02 00       
0426F6 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       79 34 04 37 
       02 00       
042708 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       8E 34 04 38 
       02 00       
04271A 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       A3 34 04 39 
       02 00       
04272C 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       B8 34 04 3A 
       02 00       
04273E 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       CD 34 04 3B 
       02 00       
042750 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       E2 34 04 3D 
       02 00       
042762 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       F7 34 04 3E 
       02 00       
042774 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       0C 35 04 3F 
       02 00       
042786 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       21 35 04 40 
       02 00       
042798 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       36 35 04 41 
       02 00       
0427AA 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       4B 35 04 42 
       02 00       
0427BC 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       60 35 04 43 
       02 00       
0427CE 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       75 35 04 44 
       02 00       
0427E0 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       8A 35 04 45 
       02 00       
0427F2 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       9F 35 04 46 
       02 00       
042804 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       B4 35 04 47 
       02 00       
042816 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       C9 35 04 48 
       02 00       
042828 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       DE 35 04 49 
       02 00       
04283A 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       F3 35 04 4A 
       02 00       
04284C 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       08 36 04 4B 
       02 00       
04285E 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       1D 36 04 4C 
       02 00       
042870 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       32 36 04 4D 
       02 00       
042882 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       47 36 04 51 
       02 00       
042894 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       5C 36 04 52 
       02 00       
0428A6 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       71 36 04 53 
       02 00       
0428B8 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       86 36 04 54 
       02 00       
0428CA 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       9B 36 04 55 
       02 00       
0428DC 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       B0 36 04 56 
       02 00       
0428EE 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       C5 36 04 57 
       02 00       
042900 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       DA 36 04 58 
       02 00       
042912 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       EF 36 04 59 
       02 00       
042924 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       04 37 04 5A 
       02 00       
042936 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       19 37 04 5B 
       02 00       
042948 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       2E 37 04 5C 
       02 00       
04295A 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       43 37 04 5D 
       02 00       
04296C 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       58 37 04 61 
       02 00       
04297E 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6D 37 04 62 
       02 00       
042990 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       82 37 04 63 
       02 00       
0429A2 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       97 37 04 64 
       02 00       
0429B4 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AC 37 04 65 
       02 00       
0429C6 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C1 37 04 66 
       02 00       
0429D8 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D6 37 04 67 
       02 00       
0429EA 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       EB 37 04 68 
       02 00       
0429FC 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       00 38 04 69 
       02 00       
042A0E 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       15 38 04 6A 
       02 00       
042A20 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2A 38 04 6B 
       02 00       
042A32 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       3F 38 04 6C 
       02 00       
042A44 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       54 38 04 71 
       02 00       
042A56 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       69 38 04 72 
       02 00       
042A68 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       7E 38 04 73 
       02 00       
042A7A 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       93 38 04 74 
       02 00       
042A8C 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       A8 38 04 75 
       02 00       
042A9E 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BD 38 04 76 
       02 00       
042AB0 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D2 38 04 77 
       02 00       
042AC2 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E7 38 04 78 
       02 00       
042AD4 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FC 38 04 79 
       02 00       
042AE6 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       11 39 04 7A 
       02 00       
042AF8 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       26 39 04 7B 
       02 00       
042B0A 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3B 39 04 81 
       02 00       
042B1C 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       50 39 04 82 
       02 00       
042B2E 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       65 39 04 83 
       02 00       
042B40 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7A 39 04 84 
       02 00       
042B52 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       8F 39 04 85 
       02 00       
042B64 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A4 39 04 86 
       02 00       
042B76 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       B9 39 04 87 
       02 00       
042B88 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       CE 39 04 88 
       02 00       
042B9A 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E3 39 04 89 
       02 00       
042BAC 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       F8 39 04 8A 
       02 00       
042BBE 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0D 3A 04 8B 
       02 00       
042BD0 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       22 3A 04 8C 
       02 00       
042BE2 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       37 3A 04 91 
       02 00       
042BF4 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       4C 3A 04 92 
       02 00       
042C06 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       61 3A 04 93 
       02 00       
042C18 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       76 3A 04 94 
       02 00       
042C2A 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       8B 3A 04 95 
       02 00       
042C3C 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       A0 3A 04 96 
       02 00       
042C4E 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       B5 3A 04 97 
       02 00       
042C60 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       CA 3A 04 98 
       02 00       
042C72 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       DF 3A 04 99 
       02 00       
042C84 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       F4 3A 04 9A 
       02 00       
042C96 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       09 3B 04 9B 
       02 00       
042CA8 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       1E 3B 04 9C 
       02 00       
042CBA 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       33 3B 04 A1 
       02 00       
042CCC 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       48 3B 04 A2 
       02 00       
042CDE 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       5D 3B 04 A3 
       02 00       
042CF0 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       72 3B 04 A4 
       02 00       
042D02 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       87 3B 04 A5 
       02 00       
042D14 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       9C 3B 04 A6 
       02 00       
042D26 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       B1 3B 04 A7 
       02 00       
042D38 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       C6 3B 04 A8 
       02 00       
042D4A 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       DB 3B 04 A9 
       02 00       
042D5C 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       F0 3B 04 AA 
       02 00       
042D6E 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       05 3C 04 AB 
       02 00       
042D80 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       1A 3C 04 AC 
       02 00       
042D92 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       2F 3C 04 AE 
       02 00       
042DA4 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       44 3C 04 AF 
       02 00       
042DB6 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       59 3C 04 B0 
       02 00       
042DC8 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       6E 3C 04 B1 
       02 00       
042DDA 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       83 3C 04 B2 
       02 00       
042DEC 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       98 3C 04 B3 
       02 00       
042DFE 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       AD 3C 04 B4 
       02 00       
042E10 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       C2 3C 04 B5 
       02 00       
042E22 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       D7 3C 04 B6 
       02 00       
042E34 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       EC 3C 04 B7 
       02 00       
042E46 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       01 3D 04 B8 
       02 00       
042E58 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       16 3D 04 B9 
       02 00       
042E6A 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       2B 3D 04 BA 
       02 00       
042E7C 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       40 3D 04 BB 
       02 00       
042E8E 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       55 3D 04 BC 
       02 00       
042EA0 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       6A 3D 04 BE 
       02 00       
042EB2 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       7F 3D 04 BF 
       02 00       
042EC4 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       94 3D 04 C0 
       02 00       
042ED6 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       A9 3D 04 C1 
       02 00       
042EE8 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       BE 3D 04 C2 
       02 00       
042EFA 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       D3 3D 04 C3 
       02 00       
042F0C 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       E8 3D 04 C4 
       02 00       
042F1E 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       FD 3D 04 C5 
       02 00       
042F30 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       12 3E 04 C6 
       02 00       
042F42 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       27 3E 04 C7 
       02 00       
042F54 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       3C 3E 04 C8 
       02 00       
042F66 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       51 3E 04 C9 
       02 00       
042F78 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       66 3E 04 CA 
       02 00       
042F8A 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       7B 3E 04 CB 
       02 00       
042F9C 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       90 3E 04 CC 
       02 00       
042FAE 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       A5 3E 04 CE 
       02 00       
042FC0 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       BA 3E 04 CF 
       02 00       
042FD2 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       CF 3E 04 D0 
       02 00       
042FE4 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       E4 3E 04 D1 
       02 00       
042FF6 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       F9 3E 04 D2 
       02 00       
043008 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       0E 3F 04 D3 
       02 00       
04301A 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       23 3F 04 D4 
       02 00       
04302C 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       38 3F 04 D5 
       02 00       
04303E 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       4D 3F 04 D6 
       02 00       
043050 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       62 3F 04 D7 
       02 00       
043062 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       77 3F 04 D8 
       02 00       
043074 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       8C 3F 04 D9 
       02 00       
043086 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       A1 3F 04 DA 
       02 00       
043098 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       B6 3F 04 DB 
       02 00       
0430AA 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       CB 3F 04 DC 
       02 00       
0430BC 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       E0 3F 04 E1 
       02 00       
0430CE 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       F5 3F 04 E2 
       02 00       
0430E0 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       0A 40 04 E3 
       02 00       
0430F2 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       1F 40 04 E4 
       02 00       
043104 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       34 40 04 E5 
       02 00       
043116 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       49 40 04 E6 
       02 00       
043128 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       5E 40 04 E7 
       02 00       
04313A 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       73 40 04 E8 
       02 00       
04314C 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       88 40 04 E9 
       02 00       
04315E 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       9D 40 04 EA 
       02 00       
043170 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       B2 40 04 EB 
       02 00       
043182 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       C7 40 04 EC 
       02 00       
043194 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       DC 40 04 F1 
       02 00       
0431A6 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       F1 40 04 F2 
       02 00       
0431B8 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       06 41 04 F5 
       02 00       
0431CA 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       1B 41 04 F6 
       02 00       
0431DC 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       30 41 04 F8 
       02 00       
0431EE             0196*   
0431EE             0197*   tiles_dg_files_list: ; filename:
0431EE 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043203 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043218 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04322D 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043242 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043257 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04326C 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043281 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043296 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0432AB 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0432C0 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0432D5 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0432EA 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0432FF 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043314 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043329 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04333E 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043353 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043368 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04337D 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043392 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0433A7 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
0433BC 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
0433D1 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
0433E6 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0433FB 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043410 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043425 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
04343A 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
04344F 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043464 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043479 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
04348E 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0434A3 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
0434B8 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
0434CD 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
0434E2 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
0434F7 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
04350C 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
043521 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
043536 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
04354B 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043560 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043575 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
04358A 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
04359F 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0435B4 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0435C9 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0435DE 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
0435F3 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043608 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
04361D 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
043632 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
043647 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
04365C 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043671 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043686 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
04369B 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0436B0 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0436C5 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0436DA 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0436EF 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043704 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043719 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
04372E 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
043743 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
043758 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
04376D 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043782 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043797 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0437AC 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0437C1 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0437D6 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0437EB 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043800 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043815 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
04382A 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
04383F 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043854 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043869 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
04387E 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043893 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0438A8 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0438BD 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0438D2 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0438E7 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0438FC 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043911 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043926 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
04393B 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043950 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043965 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04397A 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
04398F 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0439A4 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0439B9 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0439CE 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0439E3 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0439F8 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043A0D 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043A22 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043A37 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043A4C 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043A61 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043A76 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043A8B 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043AA0 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043AB5 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043ACA 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043ADF 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043AF4 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043B09 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043B1E 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043B33 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043B48 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043B5D 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043B72 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043B87 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043B9C 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043BB1 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043BC6 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043BDB 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043BF0 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043C05 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043C1A 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043C2F 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
043C44 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
043C59 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
043C6E 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043C83 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043C98 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043CAD 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043CC2 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043CD7 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043CEC 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043D01 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043D16 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043D2B 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043D40 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043D55 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043D6A 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
043D7F 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
043D94 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
043DA9 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043DBE 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043DD3 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043DE8 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043DFD 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043E12 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043E27 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
043E3C 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043E51 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043E66 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
043E7B 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043E90 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043EA5 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
043EBA 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
043ECF 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
043EE4 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
043EF9 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043F0E 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
043F23 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
043F38 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043F4D 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
043F62 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
043F77 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
043F8C 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
043FA1 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
043FB6 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043FCB 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043FE0 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043FF5 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
04400A 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
04401F 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
044034 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
044049 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
04405E 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
044073 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044088 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
04409D 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
0440B2 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
0440C7 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
0440DC 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
0440F1 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
044106 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
04411B 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
044130 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044145             0054        include "images_sprites.inc"
044145             0001*   ; Generated by make_images.py
044145             0002*   
044145             0003*   sprites_num_images: equ 163
044145             0004*   
044145             0005*   ; buffer_ids:
044145             0006*   BUF_CRATER: equ 256
044145             0007*   BUF_CRATER_0.: equ 257
044145             0008*   BUF_CRATER_0: equ 258
044145             0009*   BUF_CRATER_1.: equ 259
044145             0010*   BUF_CRATER_1: equ 260
044145             0011*   BUF_CRATER_2: equ 261
044145             0012*   BUF_CRATER_3: equ 262
044145             0013*   BUF_CRATER_A: equ 263
044145             0014*   BUF_CRATER_B: equ 264
044145             0015*   BUF_CRATER_C: equ 265
044145             0016*   BUF_CRATER_D: equ 266
044145             0017*   BUF_CRATER_E: equ 267
044145             0018*   BUF_EXPLOSION_A: equ 268
044145             0019*   BUF_EXPLOSION_B: equ 269
044145             0020*   BUF_EXPLOSION_C: equ 270
044145             0021*   BUF_EXPLOSION_D: equ 271
044145             0022*   BUF_EXPLOSION_E: equ 272
044145             0023*   BUF_FIREBALL_2_000: equ 273
044145             0024*   BUF_FIREBALL_2_008: equ 274
044145             0025*   BUF_FIREBALL_2_016: equ 275
044145             0026*   BUF_FIREBALL_2_024: equ 276
044145             0027*   BUF_FIREBALL_2_032: equ 277
044145             0028*   BUF_FIREBALL_2_040: equ 278
044145             0029*   BUF_FIREBALL_2_048: equ 279
044145             0030*   BUF_FIREBALL_2_056: equ 280
044145             0031*   BUF_FIREBALL_2_064: equ 281
044145             0032*   BUF_FIREBALL_2_072: equ 282
044145             0033*   BUF_FIREBALL_2_080: equ 283
044145             0034*   BUF_FIREBALL_2_088: equ 284
044145             0035*   BUF_FIREBALL_2_096: equ 285
044145             0036*   BUF_FIREBALL_2_104: equ 286
044145             0037*   BUF_FIREBALL_2_112: equ 287
044145             0038*   BUF_FIREBALL_2_120: equ 288
044145             0039*   BUF_FIREBALL_2_128: equ 289
044145             0040*   BUF_FIREBALL_2_136: equ 290
044145             0041*   BUF_FIREBALL_2_144: equ 291
044145             0042*   BUF_FIREBALL_2_152: equ 292
044145             0043*   BUF_FIREBALL_2_160: equ 293
044145             0044*   BUF_FIREBALL_2_168: equ 294
044145             0045*   BUF_FIREBALL_2_176: equ 295
044145             0046*   BUF_FIREBALL_2_184: equ 296
044145             0047*   BUF_FIREBALL_2_192: equ 297
044145             0048*   BUF_FIREBALL_2_200: equ 298
044145             0049*   BUF_FIREBALL_2_208: equ 299
044145             0050*   BUF_FIREBALL_2_216: equ 300
044145             0051*   BUF_FIREBALL_2_224: equ 301
044145             0052*   BUF_FIREBALL_2_232: equ 302
044145             0053*   BUF_FIREBALL_2_240: equ 303
044145             0054*   BUF_FIREBALL_2_248: equ 304
044145             0055*   BUF_FIREBALL_3_000: equ 305
044145             0056*   BUF_FIREBALL_3_008: equ 306
044145             0057*   BUF_FIREBALL_3_016: equ 307
044145             0058*   BUF_FIREBALL_3_024: equ 308
044145             0059*   BUF_FIREBALL_3_032: equ 309
044145             0060*   BUF_FIREBALL_3_040: equ 310
044145             0061*   BUF_FIREBALL_3_048: equ 311
044145             0062*   BUF_FIREBALL_3_056: equ 312
044145             0063*   BUF_FIREBALL_3_064: equ 313
044145             0064*   BUF_FIREBALL_3_072: equ 314
044145             0065*   BUF_FIREBALL_3_080: equ 315
044145             0066*   BUF_FIREBALL_3_088: equ 316
044145             0067*   BUF_FIREBALL_3_096: equ 317
044145             0068*   BUF_FIREBALL_3_104: equ 318
044145             0069*   BUF_FIREBALL_3_112: equ 319
044145             0070*   BUF_FIREBALL_3_120: equ 320
044145             0071*   BUF_FIREBALL_3_128: equ 321
044145             0072*   BUF_FIREBALL_3_136: equ 322
044145             0073*   BUF_FIREBALL_3_144: equ 323
044145             0074*   BUF_FIREBALL_3_152: equ 324
044145             0075*   BUF_FIREBALL_3_160: equ 325
044145             0076*   BUF_FIREBALL_3_168: equ 326
044145             0077*   BUF_FIREBALL_3_176: equ 327
044145             0078*   BUF_FIREBALL_3_184: equ 328
044145             0079*   BUF_FIREBALL_3_192: equ 329
044145             0080*   BUF_FIREBALL_3_200: equ 330
044145             0081*   BUF_FIREBALL_3_208: equ 331
044145             0082*   BUF_FIREBALL_3_216: equ 332
044145             0083*   BUF_FIREBALL_3_224: equ 333
044145             0084*   BUF_FIREBALL_3_232: equ 334
044145             0085*   BUF_FIREBALL_3_240: equ 335
044145             0086*   BUF_FIREBALL_3_248: equ 336
044145             0087*   BUF_LASER_A: equ 337
044145             0088*   BUF_LASER_B: equ 338
044145             0089*   BUF_LIGHTNING_H_0: equ 339
044145             0090*   BUF_LIGHTNING_H_1: equ 340
044145             0091*   BUF_PAD: equ 341
044145             0092*   BUF_SEEKER_000: equ 342
044145             0093*   BUF_SEEKER_008: equ 343
044145             0094*   BUF_SEEKER_016: equ 344
044145             0095*   BUF_SEEKER_024: equ 345
044145             0096*   BUF_SEEKER_032: equ 346
044145             0097*   BUF_SEEKER_040: equ 347
044145             0098*   BUF_SEEKER_048: equ 348
044145             0099*   BUF_SEEKER_056: equ 349
044145             0100*   BUF_SEEKER_064: equ 350
044145             0101*   BUF_SEEKER_072: equ 351
044145             0102*   BUF_SEEKER_080: equ 352
044145             0103*   BUF_SEEKER_088: equ 353
044145             0104*   BUF_SEEKER_096: equ 354
044145             0105*   BUF_SEEKER_104: equ 355
044145             0106*   BUF_SEEKER_112: equ 356
044145             0107*   BUF_SEEKER_120: equ 357
044145             0108*   BUF_SEEKER_128: equ 358
044145             0109*   BUF_SEEKER_136: equ 359
044145             0110*   BUF_SEEKER_144: equ 360
044145             0111*   BUF_SEEKER_152: equ 361
044145             0112*   BUF_SEEKER_160: equ 362
044145             0113*   BUF_SEEKER_168: equ 363
044145             0114*   BUF_SEEKER_176: equ 364
044145             0115*   BUF_SEEKER_184: equ 365
044145             0116*   BUF_SEEKER_192: equ 366
044145             0117*   BUF_SEEKER_200: equ 367
044145             0118*   BUF_SEEKER_208: equ 368
044145             0119*   BUF_SEEKER_216: equ 369
044145             0120*   BUF_SEEKER_224: equ 370
044145             0121*   BUF_SEEKER_232: equ 371
044145             0122*   BUF_SEEKER_240: equ 372
044145             0123*   BUF_SEEKER_248: equ 373
044145             0124*   BUF_SHIP_0L: equ 374
044145             0125*   BUF_SHIP_1C: equ 375
044145             0126*   BUF_SHIP_2R: equ 376
044145             0127*   BUF_TEST_STRIPES: equ 377
044145             0128*   BUF_TILE_BLANK: equ 378
044145             0129*   BUF_TILE_PAD_0: equ 379
044145             0130*   BUF_TILE_PAD_1: equ 380
044145             0131*   BUF_TILE_PAD_2: equ 381
044145             0132*   BUF_TILE_PAD_3: equ 382
044145             0133*   BUF_TILE_PAD_4: equ 383
044145             0134*   BUF_TILE_PAD_5: equ 384
044145             0135*   BUF_TILE_PAD_6: equ 385
044145             0136*   BUF_TILE_PAD_7: equ 386
044145             0137*   BUF_TURRET_000: equ 387
044145             0138*   BUF_TURRET_008: equ 388
044145             0139*   BUF_TURRET_016: equ 389
044145             0140*   BUF_TURRET_024: equ 390
044145             0141*   BUF_TURRET_032: equ 391
044145             0142*   BUF_TURRET_040: equ 392
044145             0143*   BUF_TURRET_048: equ 393
044145             0144*   BUF_TURRET_056: equ 394
044145             0145*   BUF_TURRET_064: equ 395
044145             0146*   BUF_TURRET_072: equ 396
044145             0147*   BUF_TURRET_080: equ 397
044145             0148*   BUF_TURRET_088: equ 398
044145             0149*   BUF_TURRET_096: equ 399
044145             0150*   BUF_TURRET_104: equ 400
044145             0151*   BUF_TURRET_112: equ 401
044145             0152*   BUF_TURRET_120: equ 402
044145             0153*   BUF_TURRET_128: equ 403
044145             0154*   BUF_TURRET_136: equ 404
044145             0155*   BUF_TURRET_144: equ 405
044145             0156*   BUF_TURRET_152: equ 406
044145             0157*   BUF_TURRET_160: equ 407
044145             0158*   BUF_TURRET_168: equ 408
044145             0159*   BUF_TURRET_176: equ 409
044145             0160*   BUF_TURRET_184: equ 410
044145             0161*   BUF_TURRET_192: equ 411
044145             0162*   BUF_TURRET_200: equ 412
044145             0163*   BUF_TURRET_208: equ 413
044145             0164*   BUF_TURRET_216: equ 414
044145             0165*   BUF_TURRET_224: equ 415
044145             0166*   BUF_TURRET_232: equ 416
044145             0167*   BUF_TURRET_240: equ 417
044145             0168*   BUF_TURRET_248: equ 418
044145             0169*   
044145             0170*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044145 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       BB 4C 04 00 
       01 00       
044157 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_crater_0., 257
       00 00 10 00 
       00 00 01 00 
       D0 4C 04 01 
       01 00       
044169 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_crater_0, 258
       00 00 10 00 
       00 00 01 00 
       E8 4C 04 02 
       01 00       
04417B 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_crater_1., 259
       00 00 10 00 
       00 00 01 00 
       FF 4C 04 03 
       01 00       
04418D 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_crater_1, 260
       00 00 10 00 
       00 00 01 00 
       17 4D 04 04 
       01 00       
04419F 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_crater_2, 261
       00 00 10 00 
       00 00 01 00 
       2E 4D 04 05 
       01 00       
0441B1 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_crater_3, 262
       00 00 10 00 
       00 00 01 00 
       45 4D 04 06 
       01 00       
0441C3 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_crater_a, 263
       00 00 10 00 
       00 00 01 00 
       5C 4D 04 07 
       01 00       
0441D5 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_crater_b, 264
       00 00 10 00 
       00 00 01 00 
       73 4D 04 08 
       01 00       
0441E7 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_crater_c, 265
       00 00 10 00 
       00 00 01 00 
       8A 4D 04 09 
       01 00       
0441F9 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_crater_d, 266
       00 00 10 00 
       00 00 01 00 
       A1 4D 04 0A 
       01 00       
04420B 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_crater_e, 267
       00 00 10 00 
       00 00 01 00 
       B8 4D 04 0B 
       01 00       
04421D 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_explosion_a, 268
       00 00 10 00 
       00 00 01 00 
       CF 4D 04 0C 
       01 00       
04422F 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_explosion_b, 269
       00 00 10 00 
       00 00 01 00 
       E9 4D 04 0D 
       01 00       
044241 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_explosion_c, 270
       00 00 10 00 
       00 00 01 00 
       03 4E 04 0E 
       01 00       
044253 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_explosion_d, 271
       00 00 10 00 
       00 00 01 00 
       1D 4E 04 0F 
       01 00       
044265 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_explosion_e, 272
       00 00 10 00 
       00 00 01 00 
       37 4E 04 10 
       01 00       
044277 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_000, 273
       00 00 10 00 
       00 00 01 00 
       51 4E 04 11 
       01 00       
044289 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_008, 274
       00 00 10 00 
       00 00 01 00 
       6E 4E 04 12 
       01 00       
04429B 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_016, 275
       00 00 10 00 
       00 00 01 00 
       8B 4E 04 13 
       01 00       
0442AD 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_024, 276
       00 00 10 00 
       00 00 01 00 
       A8 4E 04 14 
       01 00       
0442BF 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_032, 277
       00 00 10 00 
       00 00 01 00 
       C5 4E 04 15 
       01 00       
0442D1 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_040, 278
       00 00 10 00 
       00 00 01 00 
       E2 4E 04 16 
       01 00       
0442E3 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_048, 279
       00 00 10 00 
       00 00 01 00 
       FF 4E 04 17 
       01 00       
0442F5 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_056, 280
       00 00 10 00 
       00 00 01 00 
       1C 4F 04 18 
       01 00       
044307 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_064, 281
       00 00 10 00 
       00 00 01 00 
       39 4F 04 19 
       01 00       
044319 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_072, 282
       00 00 10 00 
       00 00 01 00 
       56 4F 04 1A 
       01 00       
04432B 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_080, 283
       00 00 10 00 
       00 00 01 00 
       73 4F 04 1B 
       01 00       
04433D 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_088, 284
       00 00 10 00 
       00 00 01 00 
       90 4F 04 1C 
       01 00       
04434F 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_096, 285
       00 00 10 00 
       00 00 01 00 
       AD 4F 04 1D 
       01 00       
044361 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_104, 286
       00 00 10 00 
       00 00 01 00 
       CA 4F 04 1E 
       01 00       
044373 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_112, 287
       00 00 10 00 
       00 00 01 00 
       E7 4F 04 1F 
       01 00       
044385 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_120, 288
       00 00 10 00 
       00 00 01 00 
       04 50 04 20 
       01 00       
044397 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_128, 289
       00 00 10 00 
       00 00 01 00 
       21 50 04 21 
       01 00       
0443A9 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_136, 290
       00 00 10 00 
       00 00 01 00 
       3E 50 04 22 
       01 00       
0443BB 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_2_144, 291
       00 00 10 00 
       00 00 01 00 
       5B 50 04 23 
       01 00       
0443CD 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_2_152, 292
       00 00 10 00 
       00 00 01 00 
       78 50 04 24 
       01 00       
0443DF 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_2_160, 293
       00 00 10 00 
       00 00 01 00 
       95 50 04 25 
       01 00       
0443F1 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_2_168, 294
       00 00 10 00 
       00 00 01 00 
       B2 50 04 26 
       01 00       
044403 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_2_176, 295
       00 00 10 00 
       00 00 01 00 
       CF 50 04 27 
       01 00       
044415 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_2_184, 296
       00 00 10 00 
       00 00 01 00 
       EC 50 04 28 
       01 00       
044427 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_2_192, 297
       00 00 10 00 
       00 00 01 00 
       09 51 04 29 
       01 00       
044439 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_2_200, 298
       00 00 10 00 
       00 00 01 00 
       26 51 04 2A 
       01 00       
04444B 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_2_208, 299
       00 00 10 00 
       00 00 01 00 
       43 51 04 2B 
       01 00       
04445D 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_2_216, 300
       00 00 10 00 
       00 00 01 00 
       60 51 04 2C 
       01 00       
04446F 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_2_224, 301
       00 00 10 00 
       00 00 01 00 
       7D 51 04 2D 
       01 00       
044481 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_2_232, 302
       00 00 10 00 
       00 00 01 00 
       9A 51 04 2E 
       01 00       
044493 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_2_240, 303
       00 00 10 00 
       00 00 01 00 
       B7 51 04 2F 
       01 00       
0444A5 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_2_248, 304
       00 00 10 00 
       00 00 01 00 
       D4 51 04 30 
       01 00       
0444B7 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_000, 305
       00 00 10 00 
       00 00 01 00 
       F1 51 04 31 
       01 00       
0444C9 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_008, 306
       00 00 10 00 
       00 00 01 00 
       0E 52 04 32 
       01 00       
0444DB 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_016, 307
       00 00 10 00 
       00 00 01 00 
       2B 52 04 33 
       01 00       
0444ED 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_024, 308
       00 00 10 00 
       00 00 01 00 
       48 52 04 34 
       01 00       
0444FF 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_032, 309
       00 00 10 00 
       00 00 01 00 
       65 52 04 35 
       01 00       
044511 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_040, 310
       00 00 10 00 
       00 00 01 00 
       82 52 04 36 
       01 00       
044523 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_048, 311
       00 00 10 00 
       00 00 01 00 
       9F 52 04 37 
       01 00       
044535 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_056, 312
       00 00 10 00 
       00 00 01 00 
       BC 52 04 38 
       01 00       
044547 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_064, 313
       00 00 10 00 
       00 00 01 00 
       D9 52 04 39 
       01 00       
044559 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_072, 314
       00 00 10 00 
       00 00 01 00 
       F6 52 04 3A 
       01 00       
04456B 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_080, 315
       00 00 10 00 
       00 00 01 00 
       13 53 04 3B 
       01 00       
04457D 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_088, 316
       00 00 10 00 
       00 00 01 00 
       30 53 04 3C 
       01 00       
04458F 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_096, 317
       00 00 10 00 
       00 00 01 00 
       4D 53 04 3D 
       01 00       
0445A1 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_104, 318
       00 00 10 00 
       00 00 01 00 
       6A 53 04 3E 
       01 00       
0445B3 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_112, 319
       00 00 10 00 
       00 00 01 00 
       87 53 04 3F 
       01 00       
0445C5 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_120, 320
       00 00 10 00 
       00 00 01 00 
       A4 53 04 40 
       01 00       
0445D7 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_128, 321
       00 00 10 00 
       00 00 01 00 
       C1 53 04 41 
       01 00       
0445E9 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_136, 322
       00 00 10 00 
       00 00 01 00 
       DE 53 04 42 
       01 00       
0445FB 01 00 00 10 0238*   	dl 1, 16, 16, 256, fn_fireball_3_144, 323
       00 00 10 00 
       00 00 01 00 
       FB 53 04 43 
       01 00       
04460D 01 00 00 10 0239*   	dl 1, 16, 16, 256, fn_fireball_3_152, 324
       00 00 10 00 
       00 00 01 00 
       18 54 04 44 
       01 00       
04461F 01 00 00 10 0240*   	dl 1, 16, 16, 256, fn_fireball_3_160, 325
       00 00 10 00 
       00 00 01 00 
       35 54 04 45 
       01 00       
044631 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_fireball_3_168, 326
       00 00 10 00 
       00 00 01 00 
       52 54 04 46 
       01 00       
044643 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_fireball_3_176, 327
       00 00 10 00 
       00 00 01 00 
       6F 54 04 47 
       01 00       
044655 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_fireball_3_184, 328
       00 00 10 00 
       00 00 01 00 
       8C 54 04 48 
       01 00       
044667 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_fireball_3_192, 329
       00 00 10 00 
       00 00 01 00 
       A9 54 04 49 
       01 00       
044679 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_fireball_3_200, 330
       00 00 10 00 
       00 00 01 00 
       C6 54 04 4A 
       01 00       
04468B 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_fireball_3_208, 331
       00 00 10 00 
       00 00 01 00 
       E3 54 04 4B 
       01 00       
04469D 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_fireball_3_216, 332
       00 00 10 00 
       00 00 01 00 
       00 55 04 4C 
       01 00       
0446AF 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_fireball_3_224, 333
       00 00 10 00 
       00 00 01 00 
       1D 55 04 4D 
       01 00       
0446C1 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_fireball_3_232, 334
       00 00 10 00 
       00 00 01 00 
       3A 55 04 4E 
       01 00       
0446D3 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_fireball_3_240, 335
       00 00 10 00 
       00 00 01 00 
       57 55 04 4F 
       01 00       
0446E5 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_fireball_3_248, 336
       00 00 10 00 
       00 00 01 00 
       74 55 04 50 
       01 00       
0446F7 01 00 00 05 0252*   	dl 1, 5, 13, 65, fn_laser_a, 337
       00 00 0D 00 
       00 41 00 00 
       91 55 04 51 
       01 00       
044709 01 00 00 05 0253*   	dl 1, 5, 13, 65, fn_laser_b, 338
       00 00 0D 00 
       00 41 00 00 
       A7 55 04 52 
       01 00       
04471B 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_lightning_h_0, 339
       00 00 10 00 
       00 00 01 00 
       BD 55 04 53 
       01 00       
04472D 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_lightning_h_1, 340
       00 00 10 00 
       00 00 01 00 
       D9 55 04 54 
       01 00       
04473F 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_pad, 341
       00 00 10 00 
       00 00 01 00 
       F5 55 04 55 
       01 00       
044751 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_000, 342
       00 00 10 00 
       00 00 01 00 
       07 56 04 56 
       01 00       
044763 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_008, 343
       00 00 10 00 
       00 00 01 00 
       20 56 04 57 
       01 00       
044775 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_016, 344
       00 00 10 00 
       00 00 01 00 
       39 56 04 58 
       01 00       
044787 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_024, 345
       00 00 10 00 
       00 00 01 00 
       52 56 04 59 
       01 00       
044799 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_032, 346
       00 00 10 00 
       00 00 01 00 
       6B 56 04 5A 
       01 00       
0447AB 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_040, 347
       00 00 10 00 
       00 00 01 00 
       84 56 04 5B 
       01 00       
0447BD 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_048, 348
       00 00 10 00 
       00 00 01 00 
       9D 56 04 5C 
       01 00       
0447CF 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_056, 349
       00 00 10 00 
       00 00 01 00 
       B6 56 04 5D 
       01 00       
0447E1 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_064, 350
       00 00 10 00 
       00 00 01 00 
       CF 56 04 5E 
       01 00       
0447F3 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_072, 351
       00 00 10 00 
       00 00 01 00 
       E8 56 04 5F 
       01 00       
044805 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_080, 352
       00 00 10 00 
       00 00 01 00 
       01 57 04 60 
       01 00       
044817 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_088, 353
       00 00 10 00 
       00 00 01 00 
       1A 57 04 61 
       01 00       
044829 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_096, 354
       00 00 10 00 
       00 00 01 00 
       33 57 04 62 
       01 00       
04483B 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_104, 355
       00 00 10 00 
       00 00 01 00 
       4C 57 04 63 
       01 00       
04484D 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_112, 356
       00 00 10 00 
       00 00 01 00 
       65 57 04 64 
       01 00       
04485F 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_120, 357
       00 00 10 00 
       00 00 01 00 
       7E 57 04 65 
       01 00       
044871 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_128, 358
       00 00 10 00 
       00 00 01 00 
       97 57 04 66 
       01 00       
044883 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_136, 359
       00 00 10 00 
       00 00 01 00 
       B0 57 04 67 
       01 00       
044895 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_seeker_144, 360
       00 00 10 00 
       00 00 01 00 
       C9 57 04 68 
       01 00       
0448A7 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_seeker_152, 361
       00 00 10 00 
       00 00 01 00 
       E2 57 04 69 
       01 00       
0448B9 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_seeker_160, 362
       00 00 10 00 
       00 00 01 00 
       FB 57 04 6A 
       01 00       
0448CB 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_seeker_168, 363
       00 00 10 00 
       00 00 01 00 
       14 58 04 6B 
       01 00       
0448DD 01 00 00 10 0279*   	dl 1, 16, 16, 256, fn_seeker_176, 364
       00 00 10 00 
       00 00 01 00 
       2D 58 04 6C 
       01 00       
0448EF 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_seeker_184, 365
       00 00 10 00 
       00 00 01 00 
       46 58 04 6D 
       01 00       
044901 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_seeker_192, 366
       00 00 10 00 
       00 00 01 00 
       5F 58 04 6E 
       01 00       
044913 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_seeker_200, 367
       00 00 10 00 
       00 00 01 00 
       78 58 04 6F 
       01 00       
044925 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_seeker_208, 368
       00 00 10 00 
       00 00 01 00 
       91 58 04 70 
       01 00       
044937 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_seeker_216, 369
       00 00 10 00 
       00 00 01 00 
       AA 58 04 71 
       01 00       
044949 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_seeker_224, 370
       00 00 10 00 
       00 00 01 00 
       C3 58 04 72 
       01 00       
04495B 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_seeker_232, 371
       00 00 10 00 
       00 00 01 00 
       DC 58 04 73 
       01 00       
04496D 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_seeker_240, 372
       00 00 10 00 
       00 00 01 00 
       F5 58 04 74 
       01 00       
04497F 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_seeker_248, 373
       00 00 10 00 
       00 00 01 00 
       0E 59 04 75 
       01 00       
044991 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_ship_0l, 374
       00 00 10 00 
       00 00 01 00 
       27 59 04 76 
       01 00       
0449A3 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_ship_1c, 375
       00 00 10 00 
       00 00 01 00 
       3D 59 04 77 
       01 00       
0449B5 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_ship_2r, 376
       00 00 10 00 
       00 00 01 00 
       53 59 04 78 
       01 00       
0449C7 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_test_stripes, 377
       00 00 10 00 
       00 00 01 00 
       69 59 04 79 
       01 00       
0449D9 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_tile_blank, 378
       00 00 10 00 
       00 00 01 00 
       84 59 04 7A 
       01 00       
0449EB 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_tile_pad_0, 379
       00 00 10 00 
       00 00 01 00 
       9D 59 04 7B 
       01 00       
0449FD 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_tile_pad_1, 380
       00 00 10 00 
       00 00 01 00 
       B6 59 04 7C 
       01 00       
044A0F 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_tile_pad_2, 381
       00 00 10 00 
       00 00 01 00 
       CF 59 04 7D 
       01 00       
044A21 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_tile_pad_3, 382
       00 00 10 00 
       00 00 01 00 
       E8 59 04 7E 
       01 00       
044A33 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_tile_pad_4, 383
       00 00 10 00 
       00 00 01 00 
       01 5A 04 7F 
       01 00       
044A45 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_tile_pad_5, 384
       00 00 10 00 
       00 00 01 00 
       1A 5A 04 80 
       01 00       
044A57 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_tile_pad_6, 385
       00 00 10 00 
       00 00 01 00 
       33 5A 04 81 
       01 00       
044A69 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_tile_pad_7, 386
       00 00 10 00 
       00 00 01 00 
       4C 5A 04 82 
       01 00       
044A7B 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_000, 387
       00 00 10 00 
       00 00 01 00 
       65 5A 04 83 
       01 00       
044A8D 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_008, 388
       00 00 10 00 
       00 00 01 00 
       7E 5A 04 84 
       01 00       
044A9F 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_016, 389
       00 00 10 00 
       00 00 01 00 
       97 5A 04 85 
       01 00       
044AB1 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_024, 390
       00 00 10 00 
       00 00 01 00 
       B0 5A 04 86 
       01 00       
044AC3 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_032, 391
       00 00 10 00 
       00 00 01 00 
       C9 5A 04 87 
       01 00       
044AD5 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_040, 392
       00 00 10 00 
       00 00 01 00 
       E2 5A 04 88 
       01 00       
044AE7 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_048, 393
       00 00 10 00 
       00 00 01 00 
       FB 5A 04 89 
       01 00       
044AF9 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_056, 394
       00 00 10 00 
       00 00 01 00 
       14 5B 04 8A 
       01 00       
044B0B 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_064, 395
       00 00 10 00 
       00 00 01 00 
       2D 5B 04 8B 
       01 00       
044B1D 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_072, 396
       00 00 10 00 
       00 00 01 00 
       46 5B 04 8C 
       01 00       
044B2F 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_080, 397
       00 00 10 00 
       00 00 01 00 
       5F 5B 04 8D 
       01 00       
044B41 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_088, 398
       00 00 10 00 
       00 00 01 00 
       78 5B 04 8E 
       01 00       
044B53 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_096, 399
       00 00 10 00 
       00 00 01 00 
       91 5B 04 8F 
       01 00       
044B65 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_104, 400
       00 00 10 00 
       00 00 01 00 
       AA 5B 04 90 
       01 00       
044B77 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_112, 401
       00 00 10 00 
       00 00 01 00 
       C3 5B 04 91 
       01 00       
044B89 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_120, 402
       00 00 10 00 
       00 00 01 00 
       DC 5B 04 92 
       01 00       
044B9B 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_128, 403
       00 00 10 00 
       00 00 01 00 
       F5 5B 04 93 
       01 00       
044BAD 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_136, 404
       00 00 10 00 
       00 00 01 00 
       0E 5C 04 94 
       01 00       
044BBF 01 00 00 10 0320*   	dl 1, 16, 16, 256, fn_turret_144, 405
       00 00 10 00 
       00 00 01 00 
       27 5C 04 95 
       01 00       
044BD1 01 00 00 10 0321*   	dl 1, 16, 16, 256, fn_turret_152, 406
       00 00 10 00 
       00 00 01 00 
       40 5C 04 96 
       01 00       
044BE3 01 00 00 10 0322*   	dl 1, 16, 16, 256, fn_turret_160, 407
       00 00 10 00 
       00 00 01 00 
       59 5C 04 97 
       01 00       
044BF5 01 00 00 10 0323*   	dl 1, 16, 16, 256, fn_turret_168, 408
       00 00 10 00 
       00 00 01 00 
       72 5C 04 98 
       01 00       
044C07 01 00 00 10 0324*   	dl 1, 16, 16, 256, fn_turret_176, 409
       00 00 10 00 
       00 00 01 00 
       8B 5C 04 99 
       01 00       
044C19 01 00 00 10 0325*   	dl 1, 16, 16, 256, fn_turret_184, 410
       00 00 10 00 
       00 00 01 00 
       A4 5C 04 9A 
       01 00       
044C2B 01 00 00 10 0326*   	dl 1, 16, 16, 256, fn_turret_192, 411
       00 00 10 00 
       00 00 01 00 
       BD 5C 04 9B 
       01 00       
044C3D 01 00 00 10 0327*   	dl 1, 16, 16, 256, fn_turret_200, 412
       00 00 10 00 
       00 00 01 00 
       D6 5C 04 9C 
       01 00       
044C4F 01 00 00 10 0328*   	dl 1, 16, 16, 256, fn_turret_208, 413
       00 00 10 00 
       00 00 01 00 
       EF 5C 04 9D 
       01 00       
044C61 01 00 00 10 0329*   	dl 1, 16, 16, 256, fn_turret_216, 414
       00 00 10 00 
       00 00 01 00 
       08 5D 04 9E 
       01 00       
044C73 01 00 00 10 0330*   	dl 1, 16, 16, 256, fn_turret_224, 415
       00 00 10 00 
       00 00 01 00 
       21 5D 04 9F 
       01 00       
044C85 01 00 00 10 0331*   	dl 1, 16, 16, 256, fn_turret_232, 416
       00 00 10 00 
       00 00 01 00 
       3A 5D 04 A0 
       01 00       
044C97 01 00 00 10 0332*   	dl 1, 16, 16, 256, fn_turret_240, 417
       00 00 10 00 
       00 00 01 00 
       53 5D 04 A1 
       01 00       
044CA9 01 00 00 10 0333*   	dl 1, 16, 16, 256, fn_turret_248, 418
       00 00 10 00 
       00 00 01 00 
       6C 5D 04 A2 
       01 00       
044CBB             0334*   
044CBB             0335*   ; files_list: ; filename:
044CBB 73 70 72 69 0336*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044CD0 73 70 72 69 0337*   fn_crater_0.: db "sprites/crater_0..rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 2E 72 67 
       62 61 32 00 
044CE8 73 70 72 69 0338*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
044CFF 73 70 72 69 0339*   fn_crater_1.: db "sprites/crater_1..rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 2E 72 67 
       62 61 32 00 
044D17 73 70 72 69 0340*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
044D2E 73 70 72 69 0341*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
044D45 73 70 72 69 0342*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
044D5C 73 70 72 69 0343*   fn_crater_a: db "sprites/crater_a.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 61 
       2E 72 67 62 
       61 32 00    
044D73 73 70 72 69 0344*   fn_crater_b: db "sprites/crater_b.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 62 
       2E 72 67 62 
       61 32 00    
044D8A 73 70 72 69 0345*   fn_crater_c: db "sprites/crater_c.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 63 
       2E 72 67 62 
       61 32 00    
044DA1 73 70 72 69 0346*   fn_crater_d: db "sprites/crater_d.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 64 
       2E 72 67 62 
       61 32 00    
044DB8 73 70 72 69 0347*   fn_crater_e: db "sprites/crater_e.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 65 
       2E 72 67 62 
       61 32 00    
044DCF 73 70 72 69 0348*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044DE9 73 70 72 69 0349*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044E03 73 70 72 69 0350*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044E1D 73 70 72 69 0351*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044E37 73 70 72 69 0352*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044E51 73 70 72 69 0353*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044E6E 73 70 72 69 0354*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044E8B 73 70 72 69 0355*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044EA8 73 70 72 69 0356*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044EC5 73 70 72 69 0357*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044EE2 73 70 72 69 0358*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044EFF 73 70 72 69 0359*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044F1C 73 70 72 69 0360*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044F39 73 70 72 69 0361*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044F56 73 70 72 69 0362*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044F73 73 70 72 69 0363*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044F90 73 70 72 69 0364*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044FAD 73 70 72 69 0365*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044FCA 73 70 72 69 0366*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044FE7 73 70 72 69 0367*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045004 73 70 72 69 0368*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045021 73 70 72 69 0369*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04503E 73 70 72 69 0370*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04505B 73 70 72 69 0371*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045078 73 70 72 69 0372*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045095 73 70 72 69 0373*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0450B2 73 70 72 69 0374*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0450CF 73 70 72 69 0375*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0450EC 73 70 72 69 0376*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045109 73 70 72 69 0377*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045126 73 70 72 69 0378*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045143 73 70 72 69 0379*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045160 73 70 72 69 0380*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04517D 73 70 72 69 0381*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04519A 73 70 72 69 0382*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0451B7 73 70 72 69 0383*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0451D4 73 70 72 69 0384*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0451F1 73 70 72 69 0385*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04520E 73 70 72 69 0386*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04522B 73 70 72 69 0387*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045248 73 70 72 69 0388*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045265 73 70 72 69 0389*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045282 73 70 72 69 0390*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04529F 73 70 72 69 0391*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0452BC 73 70 72 69 0392*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0452D9 73 70 72 69 0393*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0452F6 73 70 72 69 0394*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045313 73 70 72 69 0395*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045330 73 70 72 69 0396*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04534D 73 70 72 69 0397*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04536A 73 70 72 69 0398*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045387 73 70 72 69 0399*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0453A4 73 70 72 69 0400*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0453C1 73 70 72 69 0401*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0453DE 73 70 72 69 0402*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0453FB 73 70 72 69 0403*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045418 73 70 72 69 0404*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045435 73 70 72 69 0405*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045452 73 70 72 69 0406*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04546F 73 70 72 69 0407*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04548C 73 70 72 69 0408*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0454A9 73 70 72 69 0409*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0454C6 73 70 72 69 0410*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0454E3 73 70 72 69 0411*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045500 73 70 72 69 0412*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04551D 73 70 72 69 0413*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04553A 73 70 72 69 0414*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045557 73 70 72 69 0415*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045574 73 70 72 69 0416*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045591 73 70 72 69 0417*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
0455A7 73 70 72 69 0418*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
0455BD 73 70 72 69 0419*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
0455D9 73 70 72 69 0420*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
0455F5 73 70 72 69 0421*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
045607 73 70 72 69 0422*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045620 73 70 72 69 0423*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045639 73 70 72 69 0424*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045652 73 70 72 69 0425*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04566B 73 70 72 69 0426*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045684 73 70 72 69 0427*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04569D 73 70 72 69 0428*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0456B6 73 70 72 69 0429*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0456CF 73 70 72 69 0430*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0456E8 73 70 72 69 0431*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045701 73 70 72 69 0432*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
04571A 73 70 72 69 0433*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045733 73 70 72 69 0434*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04574C 73 70 72 69 0435*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045765 73 70 72 69 0436*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04577E 73 70 72 69 0437*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045797 73 70 72 69 0438*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0457B0 73 70 72 69 0439*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0457C9 73 70 72 69 0440*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0457E2 73 70 72 69 0441*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0457FB 73 70 72 69 0442*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045814 73 70 72 69 0443*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04582D 73 70 72 69 0444*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045846 73 70 72 69 0445*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04585F 73 70 72 69 0446*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045878 73 70 72 69 0447*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045891 73 70 72 69 0448*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0458AA 73 70 72 69 0449*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0458C3 73 70 72 69 0450*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0458DC 73 70 72 69 0451*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0458F5 73 70 72 69 0452*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04590E 73 70 72 69 0453*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045927 73 70 72 69 0454*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
04593D 73 70 72 69 0455*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
045953 73 70 72 69 0456*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045969 73 70 72 69 0457*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045984 73 70 72 69 0458*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
04599D 73 70 72 69 0459*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
0459B6 73 70 72 69 0460*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
0459CF 73 70 72 69 0461*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
0459E8 73 70 72 69 0462*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
045A01 73 70 72 69 0463*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
045A1A 73 70 72 69 0464*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045A33 73 70 72 69 0465*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045A4C 73 70 72 69 0466*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
045A65 73 70 72 69 0467*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045A7E 73 70 72 69 0468*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045A97 73 70 72 69 0469*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045AB0 73 70 72 69 0470*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045AC9 73 70 72 69 0471*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045AE2 73 70 72 69 0472*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045AFB 73 70 72 69 0473*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045B14 73 70 72 69 0474*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045B2D 73 70 72 69 0475*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045B46 73 70 72 69 0476*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045B5F 73 70 72 69 0477*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045B78 73 70 72 69 0478*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045B91 73 70 72 69 0479*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045BAA 73 70 72 69 0480*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045BC3 73 70 72 69 0481*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045BDC 73 70 72 69 0482*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045BF5 73 70 72 69 0483*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045C0E 73 70 72 69 0484*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045C27 73 70 72 69 0485*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045C40 73 70 72 69 0486*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045C59 73 70 72 69 0487*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045C72 73 70 72 69 0488*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045C8B 73 70 72 69 0489*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045CA4 73 70 72 69 0490*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045CBD 73 70 72 69 0491*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045CD6 73 70 72 69 0492*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045CEF 73 70 72 69 0493*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045D08 73 70 72 69 0494*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045D21 73 70 72 69 0495*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045D3A 73 70 72 69 0496*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045D53 73 70 72 69 0497*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045D6C 73 70 72 69 0498*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045D85             0055        include "images_ui.inc"
045D85             0001*   ; Generated by make_images.py
045D85             0002*   
045D85             0003*   ui_num_images: equ 46
045D85             0004*   
045D85             0005*   ; buffer_ids:
045D85             0006*   BUF_BAR_H_0: equ 0
045D85             0007*   BUF_BAR_H_1: equ 1
045D85             0008*   BUF_BAR_H_2: equ 2
045D85             0009*   BUF_BAR_V_0: equ 3
045D85             0010*   BUF_BAR_V_1: equ 4
045D85             0011*   BUF_BAR_V_2: equ 5
045D85             0012*   BUF_BEZEL_L: equ 6
045D85             0013*   BUF_BEZEL_R: equ 7
045D85             0014*   BUF_CREDITS: equ 8
045D85             0015*   BUF_CTL_PANEL_L: equ 9
045D85             0016*   BUF_CTL_PANEL_NAVBALL_SM: equ 10
045D85             0017*   BUF_CTL_PANEL_R: equ 11
045D85             0018*   BUF_CTL_PANEL_TOP: equ 12
045D85             0019*   BUF_JERRY_CAN: equ 13
045D85             0020*   BUF_MFD_ARMS: equ 14
045D85             0021*   BUF_MFD_BEZEL: equ 15
045D85             0022*   BUF_MFD_BG: equ 16
045D85             0023*   BUF_MFD_GUN_0: equ 17
045D85             0024*   BUF_MFD_GUN_1: equ 18
045D85             0025*   BUF_MFD_GUN_2: equ 19
045D85             0026*   BUF_MFD_GUN_3: equ 20
045D85             0027*   BUF_MFD_GUN_4: equ 21
045D85             0028*   BUF_MFD_GUN_5: equ 22
045D85             0029*   BUF_MFD_MAVERICK_0: equ 23
045D85             0030*   BUF_MFD_MAVERICK_1: equ 24
045D85             0031*   BUF_MFD_MAVERICK_2: equ 25
045D85             0032*   BUF_MFD_MAVERICK_3: equ 26
045D85             0033*   BUF_MFD_MAVERICK_4: equ 27
045D85             0034*   BUF_MFD_MAVERICK_5: equ 28
045D85             0035*   BUF_MFD_SIDEWINDER_0: equ 29
045D85             0036*   BUF_MFD_SIDEWINDER_1: equ 30
045D85             0037*   BUF_MFD_SIDEWINDER_2: equ 31
045D85             0038*   BUF_MFD_SIDEWINDER_3: equ 32
045D85             0039*   BUF_MFD_SIDEWINDER_4: equ 33
045D85             0040*   BUF_MFD_SIDEWINDER_5: equ 34
045D85             0041*   BUF_MFD_SPARROW_0: equ 35
045D85             0042*   BUF_MFD_SPARROW_1: equ 36
045D85             0043*   BUF_MFD_SPARROW_2: equ 37
045D85             0044*   BUF_MFD_SPARROW_3: equ 38
045D85             0045*   BUF_MFD_SPARROW_4: equ 39
045D85             0046*   BUF_MFD_SPARROW_5: equ 40
045D85             0047*   BUF_POWER: equ 41
045D85             0048*   BUF_SHIELD: equ 42
045D85             0049*   BUF_SHIP_MFD: equ 43
045D85             0050*   BUF_SPLASH_BG: equ 44
045D85             0051*   BUF_SPLASH_LOGO: equ 45
045D85             0052*   
045D85             0053*   ui_image_list: ; type; width; height; size; filename; bufferId:
045D85 01 00 00 80 0054*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       C1 60 04 00 
       00 00       
045D97 01 00 00 80 0055*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       D2 60 04 01 
       00 00       
045DA9 01 00 00 80 0056*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       E3 60 04 02 
       00 00       
045DBB 01 00 00 08 0057*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       F4 60 04 03 
       00 00       
045DCD 01 00 00 08 0058*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       05 61 04 04 
       00 00       
045DDF 01 00 00 08 0059*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       16 61 04 05 
       00 00       
045DF1 01 00 00 80 0060*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       27 61 04 06 
       00 00       
045E03 01 00 00 80 0061*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       38 61 04 07 
       00 00       
045E15 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       49 61 04 08 
       00 00       
045E27 01 00 00 80 0063*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       5A 61 04 09 
       00 00       
045E39 01 00 00 27 0064*   	dl 1, 39, 39, 1521, fn_ctl_panel_navball_sm, 10
       00 00 27 00 
       00 F1 05 00 
       6F 61 04 0A 
       00 00       
045E4B 01 00 00 80 0065*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 11
       00 00 80 00 
       00 00 40 00 
       8D 61 04 0B 
       00 00       
045E5D 01 00 00 60 0066*   	dl 1, 352, 48, 16896, fn_ctl_panel_top, 12
       01 00 30 00 
       00 00 42 00 
       A2 61 04 0C 
       00 00       
045E6F 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_jerry_can, 13
       00 00 10 00 
       00 00 01 00 
       B9 61 04 0D 
       00 00       
045E81 01 00 00 24 0068*   	dl 1, 36, 18, 648, fn_mfd_arms, 14
       00 00 12 00 
       00 88 02 00 
       CC 61 04 0E 
       00 00       
045E93 01 00 00 60 0069*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 15
       00 00 60 00 
       00 00 24 00 
       DE 61 04 0F 
       00 00       
045EA5 01 00 00 40 0070*   	dl 1, 64, 64, 4096, fn_mfd_bg, 16
       00 00 40 00 
       00 00 10 00 
       F1 61 04 10 
       00 00       
045EB7 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 17
       00 00 06 00 
       00 06 00 00 
       01 62 04 11 
       00 00       
045EC9 01 00 00 01 0072*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 18
       00 00 06 00 
       00 06 00 00 
       14 62 04 12 
       00 00       
045EDB 01 00 00 01 0073*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 19
       00 00 06 00 
       00 06 00 00 
       27 62 04 13 
       00 00       
045EED 01 00 00 01 0074*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 20
       00 00 06 00 
       00 06 00 00 
       3A 62 04 14 
       00 00       
045EFF 01 00 00 01 0075*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 21
       00 00 06 00 
       00 06 00 00 
       4D 62 04 15 
       00 00       
045F11 01 00 00 01 0076*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 22
       00 00 06 00 
       00 06 00 00 
       60 62 04 16 
       00 00       
045F23 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 23
       00 00 06 00 
       00 18 00 00 
       73 62 04 17 
       00 00       
045F35 01 00 00 04 0078*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 24
       00 00 06 00 
       00 18 00 00 
       8B 62 04 18 
       00 00       
045F47 01 00 00 04 0079*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 25
       00 00 06 00 
       00 18 00 00 
       A3 62 04 19 
       00 00       
045F59 01 00 00 04 0080*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 26
       00 00 06 00 
       00 18 00 00 
       BB 62 04 1A 
       00 00       
045F6B 01 00 00 04 0081*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 27
       00 00 06 00 
       00 18 00 00 
       D3 62 04 1B 
       00 00       
045F7D 01 00 00 04 0082*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 28
       00 00 06 00 
       00 18 00 00 
       EB 62 04 1C 
       00 00       
045F8F 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 29
       00 00 06 00 
       00 12 00 00 
       03 63 04 1D 
       00 00       
045FA1 01 00 00 03 0084*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 30
       00 00 06 00 
       00 12 00 00 
       1D 63 04 1E 
       00 00       
045FB3 01 00 00 03 0085*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 31
       00 00 06 00 
       00 12 00 00 
       37 63 04 1F 
       00 00       
045FC5 01 00 00 03 0086*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 32
       00 00 06 00 
       00 12 00 00 
       51 63 04 20 
       00 00       
045FD7 01 00 00 03 0087*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 33
       00 00 06 00 
       00 12 00 00 
       6B 63 04 21 
       00 00       
045FE9 01 00 00 03 0088*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 34
       00 00 06 00 
       00 12 00 00 
       85 63 04 22 
       00 00       
045FFB 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 35
       00 00 07 00 
       00 15 00 00 
       9F 63 04 23 
       00 00       
04600D 01 00 00 03 0090*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 36
       00 00 07 00 
       00 15 00 00 
       B6 63 04 24 
       00 00       
04601F 01 00 00 03 0091*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 37
       00 00 07 00 
       00 15 00 00 
       CD 63 04 25 
       00 00       
046031 01 00 00 03 0092*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 38
       00 00 07 00 
       00 15 00 00 
       E4 63 04 26 
       00 00       
046043 01 00 00 03 0093*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 39
       00 00 07 00 
       00 15 00 00 
       FB 63 04 27 
       00 00       
046055 01 00 00 03 0094*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 40
       00 00 07 00 
       00 15 00 00 
       12 64 04 28 
       00 00       
046067 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_power, 41
       00 00 10 00 
       00 00 01 00 
       29 64 04 29 
       00 00       
046079 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_shield, 42
       00 00 10 00 
       00 00 01 00 
       38 64 04 2A 
       00 00       
04608B 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_ship_mfd, 43
       00 00 10 00 
       00 00 01 00 
       48 64 04 2B 
       00 00       
04609D 01 00 00 40 0098*   	dl 1, 320, 240, 76800, fn_splash_bg, 44
       01 00 F0 00 
       00 00 2C 01 
       5A 64 04 2C 
       00 00       
0460AF 01 00 00 A0 0099*   	dl 1, 160, 106, 16960, fn_splash_logo, 45
       00 00 6A 00 
       00 40 42 00 
       6D 64 04 2D 
       00 00       
0460C1             0100*   
0460C1             0101*   ; files_list: ; filename:
0460C1 75 69 2F 62 0102*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
0460D2 75 69 2F 62 0103*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
0460E3 75 69 2F 62 0104*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
0460F4 75 69 2F 62 0105*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
046105 75 69 2F 62 0106*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
046116 75 69 2F 62 0107*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
046127 75 69 2F 62 0108*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046138 75 69 2F 62 0109*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046149 75 69 2F 63 0110*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
04615A 75 69 2F 63 0111*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
04616F 75 69 2F 63 0112*   fn_ctl_panel_navball_sm: db "ui/ctl_panel_navball_sm.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6E 61 76 
       62 61 6C 6C 
       5F 73 6D 2E 
       72 67 62 61 
       32 00       
04618D 75 69 2F 63 0113*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0461A2 75 69 2F 63 0114*   fn_ctl_panel_top: db "ui/ctl_panel_top.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 74 6F 70 
       2E 72 67 62 
       61 32 00    
0461B9 75 69 2F 6A 0115*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
0461CC 75 69 2F 6D 0116*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
0461DE 75 69 2F 6D 0117*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
0461F1 75 69 2F 6D 0118*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
046201 75 69 2F 6D 0119*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
046214 75 69 2F 6D 0120*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
046227 75 69 2F 6D 0121*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
04623A 75 69 2F 6D 0122*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
04624D 75 69 2F 6D 0123*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
046260 75 69 2F 6D 0124*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
046273 75 69 2F 6D 0125*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
04628B 75 69 2F 6D 0126*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
0462A3 75 69 2F 6D 0127*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
0462BB 75 69 2F 6D 0128*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
0462D3 75 69 2F 6D 0129*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
0462EB 75 69 2F 6D 0130*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
046303 75 69 2F 6D 0131*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
04631D 75 69 2F 6D 0132*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
046337 75 69 2F 6D 0133*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
046351 75 69 2F 6D 0134*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
04636B 75 69 2F 6D 0135*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
046385 75 69 2F 6D 0136*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
04639F 75 69 2F 6D 0137*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
0463B6 75 69 2F 6D 0138*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
0463CD 75 69 2F 6D 0139*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
0463E4 75 69 2F 6D 0140*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
0463FB 75 69 2F 6D 0141*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
046412 75 69 2F 6D 0142*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
046429 75 69 2F 70 0143*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
046438 75 69 2F 73 0144*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
046448 75 69 2F 73 0145*   fn_ship_mfd: db "ui/ship_mfd.rgba2",0
       68 69 70 5F 
       6D 66 64 2E 
       72 67 62 61 
       32 00       
04645A 75 69 2F 73 0146*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04646D 75 69 2F 73 0147*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046482             0056        include "levels.inc"
046482             0001*   ; tileset indices
046482             0002*   tiles_dg: equ 0
046482             0003*   ; tiles_xevious: equ 1
046482 00 00 00    0004*   tileset_ptr_idx: dl 0
046485             0005*   tileset_ptrs:
046485             0006*       ; dl tiles_xevious_levels
046485 04 66 04    0007*       dl tileset_00_levels
046488 00 00 00    0008*   tileset_ptrs_end: dl 0 ; list terminator
04648B             0009*   
04648B             0010*   ; get a pointer to the current tileset
04648B             0011*   ; inputs: tileset_ptr_idx
04648B             0012*   ; returns: ix = pointer to tileset levels lut
04648B             0013*   get_tileset_ptr:
04648B 3A 82 64 04 0014*       ld a,(tileset_ptr_idx)
04648F 57          0015*       ld d,a ; d = tileset index
046490 1E 03       0016*       ld e,3 ; three bytes per index record
046492 ED 5C       0017*       mlt de ; offset into tileset_ptrs lut
046494 DD 21 85 64 0018*       ld ix,tileset_ptrs
       04          
046499 DD 19       0019*       add ix,de ; ix = pointer to tileset_ptrs record
04649B C9          0020*       ret
04649C             0021*   ; end get_tileset_ptr
04649C             0022*   
04649C             0023*   ; intialize a tileset
04649C             0024*   ; inputs: a = index into tileset_ptrs
04649C             0025*   init_tileset:
04649C 32 82 64 04 0026*       ld (tileset_ptr_idx),a ; store new tileset index
0464A0 CD 8B 64 04 0027*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
0464A4 DD 37 00    0028*       ld ix,(ix) ; ix = pointer to tileset levels lut
0464A7 DD 7E FF    0029*       ld a,(ix-1) ; number of levels in the tileset
0464AA 32 DA 64 04 0030*       ld (num_levels),a
0464AE AF          0031*       xor a ; reset current level to zero
0464AF 32 D9 64 04 0032*       ld (cur_level),a
0464B3 C3 13 65 04 0033*       jp init_level
0464B7             0034*   ; end init_tileset
0464B7             0035*   
0464B7             0036*   next_tileset:
0464B7 21 82 64 04 0037*       ld hl,tileset_ptr_idx
0464BB 34          0038*       inc (hl) ; bump to next index
0464BC CD 8B 64 04 0039*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
0464C0 DD 27 00    0040*       ld hl,(ix) ; ix = pointer to tileset levels lut
0464C3             0041*       sign_hlu ; check for list terminator (0)
0464C3 19          0001*M1     add hl,de ; 1 cycle
0464C4 B7          0002*M1     or a ; clear flags ; 1 cycle
0464C5 ED 52       0003*M1     sbc hl,de ; 2 cycles
0464C7             0004*M1     ; 4 cycles total
0464C7 C2 D5 64 04 0042*       jp nz,@F ; not end of list
0464CB 3E FF       0043*       ld a,-1 ; will wrap around to zero on the next iteration
0464CD 32 82 64 04 0044*       ld (tileset_ptr_idx),a
0464D1 C3 B7 64 04 0045*       jp next_tileset ; try again
0464D5             0046*   @@:
0464D5 C3 9C 64 04 0047*       jp init_tileset
0464D9             0048*   ; end next_tileset
0464D9             0049*   
0464D9 00          0050*   cur_level: db 0
0464DA 00          0051*   num_levels: db 0
0464DB             0052*   
0464DB             0053*   ; get a pointer to the current level lookup record
0464DB             0054*   ; inputs: tileset_ptr_idx, cur_level
0464DB             0055*   ; returns: ix = pointer to level definition
0464DB             0056*   get_level_ptr:
0464DB CD 8B 64 04 0057*       call get_tileset_ptr
0464DF DD 37 00    0058*       ld ix,(ix) ; ix = pointer to tileset levels lut
0464E2 3A D9 64 04 0059*       ld a,(cur_level)
0464E6 57          0060*       ld d,a ; d = level index
0464E7 1E 03       0061*       ld e,3 ; three bytes per level record
0464E9 ED 5C       0062*       mlt de ; offset into tileset levels lut
0464EB DD 19       0063*       add ix,de ; ix = pointer to level record
0464ED C9          0064*       ret
0464EE             0065*   ; end get_level_ptr
0464EE             0066*   
0464EE             0067*   ; advance to the next level in the current tileset
0464EE             0068*   ; inputs: tileset_ptr_idx, cur_level
0464EE             0069*   next_level:
0464EE             0070*   ; update starting score
0464EE 2A D5 7C 04 0071*       ld hl,(player_score)
0464F2 22 DB 7C 04 0072*       ld (player_starting_score),hl
0464F6             0073*   ; set up pointers to next map definition
0464F6 21 D9 64 04 0074*       ld hl,cur_level
0464FA 34          0075*       inc (hl) ; bump to next level
0464FB CD DB 64 04 0076*       call get_level_ptr ; ix points to current level lookup record
0464FF DD 27 00    0077*       ld hl,(ix) ; hl = pointer to next level lookup record
046502             0078*       sign_hlu ; check for list terminator (0)
046502 19          0001*M1     add hl,de ; 1 cycle
046503 B7          0002*M1     or a ; clear flags ; 1 cycle
046504 ED 52       0003*M1     sbc hl,de ; 2 cycles
046506             0004*M1     ; 4 cycles total
046506 C2 13 65 04 0079*       jp nz,@F ; not end of list
04650A AF          0080*       xor a ; reset level to zero
04650B 32 D9 64 04 0081*       ld (cur_level),a
04650F C3 B7 64 04 0082*       jp next_tileset ; try next tileset
046513             0083*   @@: ; fall through to init_level
046513             0084*   ; end next_level
046513             0085*   
046513             0086*   ; inputs: tileset_ptr_idx, cur_level
046513             0087*   init_level:
046513             0088*   ; ; initialize sprites and active tiles table
046513             0089*   ;     call sprites_init
046513             0090*   ;     call table_init
046513             0091*   ;     call tile_table_init
046513             0092*   ; set pointers
046513 CD DB 64 04 0093*       call get_level_ptr ; ix points to level lookup record
046517 DD 37 00    0094*       ld ix,(ix) ; ix points to level definition
04651A             0095*   ; set tiles_cols
04651A DD 7E 00    0096*       ld a,(ix+0)
04651D 32 83 88 04 0097*       ld (tiles_cols),a
046521             0098*   ; set tiles_row counter
046521 DD 7E 01    0099*       ld a,(ix+1)
046524 32 80 88 04 0100*       ld (tiles_row),a
046528             0101*   ; set cur_baseBufferId
046528 DD 27 04    0102*       ld hl,(ix+4)
04652B 22 84 88 04 0103*       ld (cur_baseBufferId),hl
04652F             0104*   ; set tiles_row_defs
04652F ED 32 07    0105*       lea ix,ix+7 ; ix points to definition of first tile of first row
046532 DD 22 7D 88 0106*       ld (tiles_row_defs),ix
       04          
046537             0107*   ; reset tile rows and plot coordinates
046537 21 FF FF FF 0108*       ld hl,-1
04653B 22 7D 89 04 0109*       ld (bg_y_plot),hl
04653F 23          0110*       inc hl
046540 22 88 88 04 0111*       ld (tiles_x_plot),hl
046544 21 F1 FF FF 0112*       ld hl,-15
046548 22 8C 88 04 0113*       ld (tiles_y_plot),hl
04654C             0114*   ; print level number
04654C CD DB 65 04 0115*       call print_level
046550             0116*       ; call start_level_countdown
046550 C9          0117*       ret
046551             0118*   ; end init_level
046551             0119*   
046551             0120*   init_bg:
046551             0121*   ; draw initial background tiles
046551 21 00 04 00 0122*       ld hl,BUF_BG_STARS_0
046555 CD 95 13 04 0123*       call vdu_buff_select
046559 01 00 00 00 0124*       ld bc,0
04655D 11 00 00 00 0125*       ld de,field_top
046561 CD F1 16 04 0126*       call vdu_plot_bmp
046565 21 02 04 00 0127*       ld hl,BUF_BG_STARS_4
046569 CD 95 13 04 0128*       call vdu_buff_select
04656D 01 00 00 00 0129*       ld bc,0
046571 11 00 01 00 0130*       ld de,field_top+256
046575 CD F1 16 04 0131*       call vdu_plot_bmp
046579 C9          0132*       ret
04657A             0133*   ; end init_level
04657A             0134*   start_level_countdown:
04657A             0135*   ; set gfx origin and viewport to playing field window
04657A CD 73 7D 04 0136*       call set_gfx_playing_field
04657E CD 51 65 04 0137*       call init_bg
046582             0138*   ; set text colors
046582 3E 90       0139*       ld a,16+128 ; darkest blue
046584 CD D1 12 04 0140*       call vdu_colour_text
046588 3E 3A       0141*       ld a,58 ; dark orange
04658A CD D1 12 04 0142*       call vdu_colour_text
04658E             0143*   ; print get ready message
04658E 0E 1B       0144*       ld c,27 ; x
046590 06 10       0145*       ld b,16 ; y
046592 CD 8C 12 04 0146*       call vdu_move_cursor
046596 CD 5C 00 04 0147*       call printInline
04659A 47 65 74 20 0148*       asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
0465A5             0149*   ; countdown to restart
0465A5 0E 18       0150*       ld c,24 ; x
0465A7 06 11       0151*       ld b,17 ; y
0465A9 CD 8C 12 04 0152*       call vdu_move_cursor
0465AD CD 5C 00 04 0153*       call printInline
0465B1 53 74 61 72 0154*       asciz "Starting In..."
       74 69 6E 67 
       20 49 6E 2E 
       2E 2E 00    
0465C0 06 06       0155*       ld b,6 ; loop counter
0465C2             0156*   @waitLoop:
0465C2 C5          0157*       push bc
0465C3 78          0158*       ld a,b
0465C4 3D          0159*       dec a
0465C5 CD 42 8D 04 0160*       call printHexA
0465C9 0E 26       0161*       ld c,38 ; x
0465CB 06 11       0162*       ld b,17 ; y
0465CD CD 8C 12 04 0163*       call vdu_move_cursor
0465D1 3E 80       0164*       ld a,%10000000 ; bit 7 changes once per second
0465D3 CD 35 12 04 0165*       call multiPurposeDelay
0465D7 C1          0166*       pop bc
0465D8 10 E8       0167*       djnz @waitLoop
0465DA C9          0168*       ret
0465DB             0169*   ; end start_level_countdown
0465DB             0170*   
0465DB             0171*   level_x: equ 39
0465DB             0172*   level_y: equ 1
0465DB             0173*   print_level:
0465DB             0174*   ; set text colors
0465DB 3E 80       0175*       ld a,c_black+128
0465DD CD D1 12 04 0176*       call vdu_colour_text
0465E1 3E 0A       0177*       ld a,c_green
0465E3 CD D1 12 04 0178*       call vdu_colour_text
0465E7             0179*   ; set text coordinates and print
0465E7 0E 27       0180*       ld c,level_x
0465E9 06 01       0181*       ld b,level_y
0465EB CD 8C 12 04 0182*       call vdu_move_cursor
0465EF CD 5C 00 04 0183*       call printInline
0465F3 4C 65 76 65 0184*       asciz "Level "
       6C 20 00    
0465FA 3A D9 64 04 0185*       ld a,(cur_level)
0465FE CD 42 8D 04 0186*       call printHexA
046602 C9          0187*       ret
046603             0188*   ; end print_level
046603             0057        include "levels_tileset_0.inc"
046603             0001*   ; Generated from tiles/dg/dg0_03.tmx
046603             0002*   
046603 01          0003*   tileset_00_num_levels: db 1
046604             0004*   
046604             0005*   tileset_00_levels:
046604 0A 66 04    0006*   	dl tileset_00_level_00
046607 00 00 00    0007*   	dl 0 ; list terminator
04660A             0008*   
04660A             0009*   tileset_00_level_00: ; Level 0
04660A 10          0010*   	db 16          ; num cols
04660B 00 01 00    0011*   	dl 256          ; num rows
04660E 00 02 00    0012*   	dl 512 ; base bufferId
046611 F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
046621 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
046631 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
046641 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
046651 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
046661 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
046671 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
046681 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
046691 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
0466A1 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0466B1 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0466C1 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0466D1 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0466E1 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
0466F1 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
046701 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
046711 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
046721 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,140,140,140,140,208,000
       00 00 D7 00 
       00 CE 8C 8C 
       8C 8C D0 00 
046731 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,140,081,082,083,084,140,129
       D8 D8 A6 00 
       00 8C 51 52 
       53 54 8C 81 
046741 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,140,065,092,093,068,140,000
       00 00 83 00 
       00 8C 41 5C 
       5D 44 8C 00 
046751 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,140,049,076,077,052,140,000
       00 00 83 81 
       81 8C 31 4C 
       4D 34 8C 00 
046761 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,140,033,034,035,036,140,129
       00 00 83 00 
       00 8C 21 22 
       23 24 8C 81 
046771 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,140,140,140,140,176,000
       00 00 83 00 
       00 AE 8C 8C 
       8C 8C B0 00 
046781 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,000,000,000,000,000,000
       D8 D8 B6 00 
       00 00 00 00 
       00 00 00 00 
046791 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,000,000,000,000,000,000
       00 CE B7 D0 
       00 00 00 00 
       00 00 00 00 
0467A1 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,009,010,010,010,010,010,010,011
       00 BE 9C C0 
       09 0A 0A 0A 
       0A 0A 0A 0B 
0467B1 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,000,000,000,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       00 00 00 00 
0467C1 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
0467D1 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
0467E1 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
0467F1 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
046801 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
046811 BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046821 BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046831 BF 93 96 04 0047*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046841 BF 93 96 04 0048*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046851 BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046861 BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046871 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
046881 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
046891 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
0468A1 DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
0468B1 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
0468C1 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
0468D1 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
0468E1 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
0468F1 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
046901 BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,009,010,010,011
       00 CE BF D7 
       BF BF 86 87 
       09 0A 0A 0B 
046911 BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
046921 59 5A 5B BF 0062*   	db 089,090,091,191,191,004,191,215,191,191,150,151,191,191,248,191
       BF 04 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
046931 49 05 4B BF 0063*   	db 073,005,075,191,191,004,167,200,191,191,150,151,191,248,001,248
       BF 04 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
046941 39 3A 3B BF 0064*   	db 057,058,059,191,191,004,191,215,191,191,154,155,191,191,248,191
       BF 04 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
046951 BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
046961 BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
046971 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046981 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
046991 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0469A1 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
0469B1 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0469C1 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0469D1 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
0469E1 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
0469F1 BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
046A01 BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
046A11 BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
046A21 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
046A31 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
046A41 00 00 83 00 0080*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046A51 00 00 83 00 0081*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046A61 00 00 83 00 0082*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,206,207,208
       83 00 00 00 
       83 00 00 00 
       00 CE CF D0 
046A71 00 00 83 00 0083*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,248,191
       83 00 00 00 
       83 00 00 00 
       CE BF F8 BF 
046A81 81 81 81 81 0084*   	db 129,129,129,129,129,129,129,129,129,129,129,129,190,248,001,248
       81 81 81 81 
       81 81 81 81 
       BE F8 01 F8 
046A91 00 00 83 00 0085*   	db 000,000,131,000,131,000,000,000,131,000,000,000,174,191,248,191
       83 00 00 00 
       83 00 00 00 
       AE BF F8 BF 
046AA1 00 00 83 00 0086*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
046AB1 00 00 83 00 0087*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
046AC1 00 00 83 00 0088*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,191,191
       83 00 00 00 
       83 00 00 00 
       CE BF BF BF 
046AD1 00 CE 09 0A 0089*   	db 000,206,009,010,011,208,000,000,131,000,000,206,191,191,191,191
       0B D0 00 00 
       83 00 00 CE 
       BF BF BF BF 
046AE1 BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,191,191,092,093
       5B BF BF BF 
       BF BF BF BF 
       BF BF 5C 5D 
046AF1 BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,191,191,076,077
       4B BF BF BF 
       BF BF BF BF 
       BF BF 4C 4D 
046B01 BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,191,191,191,191
       3B BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
046B11 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,174,175,175,175
       BF BF BF BF 
       BF BF B0 00 
       AE AF AF AF 
046B21 00 00 83 00 0094*   	db 000,000,131,000,131,000,174,191,191,191,000,000,000,000,131,000
       83 00 AE BF 
       BF BF 00 00 
       00 00 83 00 
046B31 00 00 83 00 0095*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046B41 00 00 83 00 0096*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046B51 84 84 84 84 0097*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
046B61 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046B71 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046B81 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046B91 00 CE CF CF 0101*   	db 000,206,207,207,208,000,000,009,010,011,000,000,000,000,000,000
       D0 00 00 09 
       0A 0B 00 00 
       00 00 00 00 
046BA1 00 BE 98 99 0102*   	db 000,190,152,153,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
046BB1 00 BE 96 97 0103*   	db 000,190,150,151,192,145,145,248,001,248,000,000,000,000,000,000
       C0 91 91 F8 
       01 F8 00 00 
       00 00 00 00 
046BC1 00 BE 96 97 0104*   	db 000,190,150,151,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
046BD1 00 BE 96 97 0105*   	db 000,190,150,151,192,000,000,191,191,191,000,000,000,000,000,000
       C0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046BE1 00 BE 8A 8B 0106*   	db 000,190,138,139,192,145,145,191,191,191,000,000,000,000,000,000
       C0 91 91 BF 
       BF BF 00 00 
       00 00 00 00 
046BF1 00 AE BF BC 0107*   	db 000,174,191,188,176,000,000,191,191,191,000,206,207,207,208,000
       B0 00 00 BF 
       BF BF 00 CE 
       CF CF D0 00 
046C01 00 00 BE DB 0108*   	db 000,000,190,219,000,000,000,191,191,191,145,190,152,153,192,000
       00 00 00 BF 
       BF BF 91 BE 
       98 99 C0 00 
046C11 BF BF BF DB 0109*   	db 191,191,191,219,208,000,206,191,191,191,000,190,150,151,192,000
       D0 00 CE BF 
       BF BF 00 BE 
       96 97 C0 00 
046C21 59 5A 5B DB 0110*   	db 089,090,091,219,191,191,191,191,167,216,216,168,150,151,192,000
       BF BF BF BF 
       A7 D8 D8 A8 
       96 97 C0 00 
046C31 49 05 4B AA 0111*   	db 073,005,075,170,191,191,191,191,191,191,000,190,150,151,192,000
       BF BF BF BF 
       BF BF 00 BE 
       96 97 C0 00 
046C41 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,145,190,138,139,192,000
       BF BF BF BF 
       BF BF 91 BE 
       8A 8B C0 00 
046C51 BF BF B0 93 0113*   	db 191,191,176,147,000,000,174,191,191,191,000,174,188,175,176,000
       00 00 AE BF 
       BF BF 00 AE 
       BC AF B0 00 
046C61 00 00 00 93 0114*   	db 000,000,000,147,000,000,000,191,008,191,000,000,219,192,000,000
       00 00 00 BF 
       08 BF 00 00 
       DB C0 00 00 
046C71 00 00 00 93 0115*   	db 000,000,000,147,000,000,000,191,008,220,220,220,170,192,000,000
       00 00 00 BF 
       08 DC DC DC 
       AA C0 00 00 
046C81 00 00 00 93 0116*   	db 000,000,000,147,000,000,000,191,008,191,175,175,175,176,000,000
       00 00 00 BF 
       08 BF AF AF 
       AF B0 00 00 
046C91 00 00 00 93 0117*   	db 000,000,000,147,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046CA1 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046CB1 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
046CC1 81 BE F8 01 0120*   	db 129,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
046CD1 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
046CE1 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
046CF1 00 00 00 83 0123*   	db 000,000,000,131,000,000,000,000,131,000,000,000,174,191,191,191
       00 00 00 00 
       83 00 00 00 
       AE BF BF BF 
046D01 7A 7B 7A 7B 0124*   	db 122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123
       7A 7B 7A 7B 
       7A 7B 7A 7B 
       7A 7B 7A 7B 
046D11 6A 6B 6A 6B 0125*   	db 106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107
       6A 6B 6A 6B 
       6A 6B 6A 6B 
       6A 6B 6A 6B 
046D21 00 93 00 93 0126*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046D31 00 93 00 93 0127*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046D41 00 93 00 93 0128*   	db 000,147,000,147,108,108,108,108,108,108,147,000,147,000,000,147
       6C 6C 6C 6C 
       6C 6C 93 00 
       93 00 00 93 
046D51 00 93 00 93 0129*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,108,108,108
       00 00 00 00 
       00 00 93 00 
       93 6C 6C 6C 
046D61 00 93 00 93 0130*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046D71 00 93 00 93 0131*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046D81 CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
046D91 BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
046DA1 BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
046DB1 BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
046DC1 AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
046DD1 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046DE1 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046DF1 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046E01 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,206,248,208,000,000,000,000
       00 00 00 00 
       00 CE F8 D0 
       00 00 00 00 
046E11 09 0A 0A 0A 0141*   	db 009,010,010,010,010,010,010,010,011,248,001,248,145,145,145,145
       0A 0A 0A 0A 
       0B F8 01 F8 
       91 91 91 91 
046E21 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,174,248,176,000,000,000,000
       00 00 00 00 
       00 AE F8 B0 
       00 00 00 00 
046E31 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E41 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E51 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E61 00 00 CE CF 0146*   	db 000,000,206,207,207,207,208,000,000,000,000,000,000,000,000,000
       CF CF D0 00 
       00 00 00 00 
       00 00 00 00 
046E71 81 81 BE 59 0147*   	db 129,129,190,089,090,091,192,207,207,207,207,208,000,000,000,000
       5A 5B C0 CF 
       CF CF CF D0 
       00 00 00 00 
046E81 00 00 BE 49 0148*   	db 000,000,190,073,005,075,167,216,216,216,216,182,208,000,000,000
       05 4B A7 D8 
       D8 D8 D8 B6 
       D0 00 00 00 
046E91 81 81 BE 39 0149*   	db 129,129,190,057,058,059,192,176,000,000,000,215,192,000,000,000
       3A 3B C0 B0 
       00 00 00 D7 
       C0 00 00 00 
046EA1 00 00 AE AF 0150*   	db 000,000,174,175,175,175,176,000,000,000,000,215,192,000,000,000
       AF AF B0 00 
       00 00 00 D7 
       C0 00 00 00 
046EB1 00 00 00 83 0151*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046EC1 00 00 00 83 0152*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046ED1 00 00 00 83 0153*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046EE1 00 00 00 83 0154*   	db 000,000,000,131,000,131,000,000,000,206,207,207,207,208,000,000
       00 83 00 00 
       00 CE CF CF 
       CF D0 00 00 
046EF1 81 81 81 81 0155*   	db 129,129,129,129,129,129,129,129,129,190,089,090,091,192,129,129
       81 81 81 81 
       81 BE 59 5A 
       5B C0 81 81 
046F01 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,190,073,005,075,192,000,000
       00 00 00 00 
       00 BE 49 05 
       4B C0 00 00 
046F11 81 81 81 81 0157*   	db 129,129,129,129,129,129,129,129,129,190,057,058,059,192,129,129
       81 81 81 81 
       81 BE 39 3A 
       3B C0 81 81 
046F21 00 00 00 83 0158*   	db 000,000,000,131,000,131,000,000,000,174,175,180,175,176,000,000
       00 83 00 00 
       00 AE AF B4 
       AF B0 00 00 
046F31 00 00 00 83 0159*   	db 000,000,000,131,000,131,000,000,000,000,191,179,000,000,000,000
       00 83 00 00 
       00 00 BF B3 
       00 00 00 00 
046F41 09 0A 0A 0A 0160*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
046F51 00 00 00 83 0161*   	db 000,000,000,131,000,131,000,000,000,000,191,180,000,000,000,000
       00 83 00 00 
       00 00 BF B4 
       00 00 00 00 
046F61 00 00 CE CF 0162*   	db 000,000,206,207,207,207,208,000,000,000,191,211,000,000,000,000
       CF CF D0 00 
       00 00 BF D3 
       00 00 00 00 
046F71 00 00 BE 59 0163*   	db 000,000,190,089,090,091,192,000,000,000,191,211,000,000,000,000
       5A 5B C0 00 
       00 00 BF D3 
       00 00 00 00 
046F81 00 00 BE 49 0164*   	db 000,000,190,073,005,075,192,000,000,206,191,248,208,000,000,000
       05 4B C0 00 
       00 CE BF F8 
       D0 00 00 00 
046F91 81 81 BE 39 0165*   	db 129,129,190,057,058,059,171,220,220,220,248,001,248,145,145,145
       3A 3B AB DC 
       DC DC F8 01 
       F8 91 91 91 
046FA1 00 83 AE AF 0166*   	db 000,131,174,175,175,175,176,000,000,000,174,248,176,000,000,000
       AF AF B0 00 
       00 00 AE F8 
       B0 00 00 00 
046FB1 00 83 00 83 0167*   	db 000,131,000,131,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FC1 CE CF CF CF 0168*   	db 206,207,207,207,208,000,000,000,000,000,000,000,000,000,000,000
       D0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FD1 09 0A 0A 0A 0169*   	db 009,010,010,010,011,000,000,000,000,000,000,000,000,000,000,000
       0B 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FE1 BE CF CF CF 0170*   	db 190,207,207,207,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FF1 BE BF 04 BF 0171*   	db 190,191,004,191,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
047001 BE BF 04 BF 0172*   	db 190,191,004,191,191,000,000,206,207,207,207,208,000,000,000,000
       BF 00 00 CE 
       CF CF CF D0 
       00 00 00 00 
047011 BE BF 04 BF 0173*   	db 190,191,004,191,192,129,129,190,089,090,091,192,000,000,000,000
       C0 81 81 BE 
       59 5A 5B C0 
       00 00 00 00 
047021 AE AF AF AF 0174*   	db 174,175,175,175,176,000,000,190,073,005,075,167,216,216,182,000
       B0 00 00 BE 
       49 05 4B A7 
       D8 D8 B6 00 
047031 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,215,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 D7 00 
047041 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,215,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 D7 00 
047051 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047061 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047071 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047081 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047091 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0470A1 CF CF CF D0 0182*   	db 207,207,207,208,000,000,000,000,147,000,147,000,206,207,183,207
       00 00 00 00 
       93 00 93 00 
       CE CF B7 CF 
0470B1 59 5A 5B C0 0183*   	db 089,090,091,192,145,145,145,145,145,145,145,145,190,089,090,091
       91 91 91 91 
       91 91 91 91 
       BE 59 5A 5B 
0470C1 49 05 4B C0 0184*   	db 073,005,075,192,000,000,000,000,147,000,147,000,190,073,005,075
       00 00 00 00 
       93 00 93 00 
       BE 49 05 4B 
0470D1 39 3A 3B C0 0185*   	db 057,058,059,192,145,145,145,145,145,145,145,145,190,057,058,059
       91 91 91 91 
       91 91 91 91 
       BE 39 3A 3B 
0470E1 BF B4 AF B0 0186*   	db 191,180,175,176,206,207,207,207,208,000,147,000,174,175,175,175
       CE CF CF CF 
       D0 00 93 00 
       AE AF AF AF 
0470F1 BF D3 00 00 0187*   	db 191,211,000,000,009,010,010,010,011,000,147,000,000,000,000,000
       09 0A 0A 0A 
       0B 00 93 00 
       00 00 00 00 
047101 BF D3 00 00 0188*   	db 191,211,000,000,190,207,207,207,192,000,147,000,000,000,000,000
       BE CF CF CF 
       C0 00 93 00 
       00 00 00 00 
047111 BF D3 00 00 0189*   	db 191,211,000,000,190,191,008,191,192,000,152,153,145,145,145,145
       BE BF 08 BF 
       C0 00 98 99 
       91 91 91 91 
047121 BF D3 00 00 0190*   	db 191,211,000,000,190,191,008,191,191,000,150,151,000,000,000,000
       BE BF 08 BF 
       BF 00 96 97 
       00 00 00 00 
047131 BF D3 00 00 0191*   	db 191,211,000,000,190,191,008,191,192,000,150,151,000,000,000,000
       BE BF 08 BF 
       C0 00 96 97 
       00 00 00 00 
047141 BF D3 00 00 0192*   	db 191,211,000,000,174,175,175,175,176,000,134,135,000,000,000,000
       AE AF AF AF 
       B0 00 86 87 
       00 00 00 00 
047151 BF D3 00 00 0193*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
047161 BF D3 00 CE 0194*   	db 191,211,000,206,207,207,207,208,000,000,138,139,129,129,129,129
       CF CF CF D0 
       00 00 8A 8B 
       81 81 81 81 
047171 BF A1 A4 BE 0195*   	db 191,161,164,190,089,090,091,192,000,000,188,147,000,000,000,000
       59 5A 5B C0 
       00 00 BC 93 
       00 00 00 00 
047181 AE AF BF BE 0196*   	db 174,175,191,190,073,005,075,171,220,220,170,147,000,000,000,000
       49 05 4B AB 
       DC DC AA 93 
       00 00 00 00 
047191 00 00 AE BE 0197*   	db 000,000,174,190,057,058,059,192,000,000,000,147,000,000,000,000
       39 3A 3B C0 
       00 00 00 93 
       00 00 00 00 
0471A1 00 00 00 AE 0198*   	db 000,000,000,174,175,175,175,191,129,129,129,129,129,129,129,129
       AF AF AF BF 
       81 81 81 81 
       81 81 81 81 
0471B1 00 00 00 00 0199*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
0471C1 00 00 00 00 0200*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
0471D1 09 0A 0A 0A 0201*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
0471E1 00 00 00 00 0202*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
0471F1 00 CE CF CF 0203*   	db 000,206,207,207,207,208,000,000,000,000,000,147,000,147,000,000
       CF D0 00 00 
       00 00 00 93 
       00 93 00 00 
047201 00 BE BF F8 0204*   	db 000,190,191,248,191,192,000,000,000,000,000,147,000,147,000,000
       BF C0 00 00 
       00 00 00 93 
       00 93 00 00 
047211 00 BE F8 01 0205*   	db 000,190,248,001,248,192,000,000,000,000,206,207,207,207,208,000
       F8 C0 00 00 
       00 00 CE CF 
       CF CF D0 00 
047221 00 AE BF F8 0206*   	db 000,174,191,248,191,176,000,000,000,000,190,089,090,091,192,000
       BF B0 00 00 
       00 00 BE 59 
       5A 5B C0 00 
047231 00 00 AE BC 0207*   	db 000,000,174,188,176,000,000,000,000,185,172,073,005,075,192,000
       B0 00 00 00 
       00 B9 AC 49 
       05 4B C0 00 
047241 00 00 00 DB 0208*   	db 000,000,000,219,000,000,000,000,000,219,190,057,058,059,192,000
       00 00 00 00 
       00 DB BE 39 
       3A 3B C0 00 
047251 00 00 00 DB 0209*   	db 000,000,000,219,000,000,000,000,000,219,174,175,175,175,176,000
       00 00 00 00 
       00 DB AE AF 
       AF AF B0 00 
047261 00 00 00 DB 0210*   	db 000,000,000,219,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047271 00 B9 DC EC 0211*   	db 000,185,220,236,220,220,220,220,220,204,000,000,000,000,000,000
       DC DC DC DC 
       DC CC 00 00 
       00 00 00 00 
047281 00 DB 00 00 0212*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047291 00 DB 00 00 0213*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0472A1 00 DB 00 00 0214*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0472B1 00 DB 00 00 0215*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0472C1 DC AA 00 00 0216*   	db 220,170,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0472D1 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0472E1 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,206,207,187,207,208,000,000,000,000
       00 00 00 CE 
       CF BB CF D0 
       00 00 00 00 
0472F1 81 81 81 81 0219*   	db 129,129,129,129,129,129,129,190,089,090,091,192,129,129,129,129
       81 81 81 BE 
       59 5A 5B C0 
       81 81 81 81 
047301 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,190,073,005,075,192,000,000,000,000
       00 00 00 BE 
       49 05 4B C0 
       00 00 00 00 
047311 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,000,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 00 00 
047321 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,000,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 00 00 
047331 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047341 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
047351 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047361 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047371 81 81 81 81 0227*   	db 129,129,129,129,129,129,129,129,131,000,000,000,000,000,000,000
       81 81 81 81 
       83 00 00 00 
       00 00 00 00 
047381 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047391 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0473A1 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
0473B1 BF BF BF D0 0231*   	db 191,191,191,208,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0473C1 59 5A 5B BF 0232*   	db 089,090,091,191,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0473D1 49 05 4B BF 0233*   	db 073,005,075,191,000,000,000,000,131,000,000,152,153,145,145,145
       00 00 00 00 
       83 00 00 98 
       99 91 91 91 
0473E1 39 3A 3B BF 0234*   	db 057,058,059,191,000,000,000,000,131,000,000,150,151,000,000,000
       00 00 00 00 
       83 00 00 96 
       97 00 00 00 
0473F1 BF BF BF BF 0235*   	db 191,191,191,191,000,000,206,207,207,207,208,150,151,000,000,000
       00 00 CE CF 
       CF CF D0 96 
       97 00 00 00 
047401 00 00 BF BF 0236*   	db 000,000,191,191,191,191,191,191,248,191,192,150,151,145,145,145
       BF BF BF BF 
       F8 BF C0 96 
       97 91 91 91 
047411 00 00 BF BF 0237*   	db 000,000,191,191,191,191,191,248,001,248,192,134,135,000,000,000
       BF BF BF F8 
       01 F8 C0 86 
       87 00 00 00 
047421 00 00 AE BF 0238*   	db 000,000,174,191,191,191,191,191,248,191,192,134,135,000,000,000
       BF BF BF BF 
       F8 BF C0 86 
       87 00 00 00 
047431 00 00 00 83 0239*   	db 000,000,000,131,000,000,174,175,175,175,176,134,135,000,000,000
       00 00 AE AF 
       AF AF B0 86 
       87 00 00 00 
047441 00 00 00 83 0240*   	db 000,000,000,131,000,000,000,000,131,000,000,134,135,000,000,000
       00 00 00 00 
       83 00 00 86 
       87 00 00 00 
047451 6A 6B 6C 6B 0241*   	db 106,107,108,107,108,106,107,108,131,000,000,138,139,145,145,145
       6C 6A 6B 6C 
       83 00 00 8A 
       8B 91 91 91 
047461 00 00 00 83 0242*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047471 00 00 00 83 0243*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047481 00 00 00 83 0244*   	db 000,000,000,131,000,000,000,000,131,206,207,207,207,208,000,000
       00 00 00 00 
       83 CE CF CF 
       CF D0 00 00 
047491 00 00 00 83 0245*   	db 000,000,000,131,000,000,000,000,131,190,089,090,091,192,145,145
       00 00 00 00 
       83 BE 59 5A 
       5B C0 91 91 
0474A1 00 00 00 83 0246*   	db 000,000,000,131,000,000,000,000,131,190,073,005,075,192,000,000
       00 00 00 00 
       83 BE 49 05 
       4B C0 00 00 
0474B1 81 81 81 83 0247*   	db 129,129,129,131,129,129,129,129,131,190,057,058,059,192,145,145
       81 81 81 81 
       83 BE 39 3A 
       3B C0 91 91 
0474C1 00 00 00 83 0248*   	db 000,000,000,131,000,000,000,000,131,174,175,175,175,176,000,000
       00 00 00 00 
       83 AE AF AF 
       AF B0 00 00 
0474D1 00 00 00 83 0249*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
0474E1 09 0A 0A 0A 0250*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
0474F1 85 85 85 85 0251*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
047501 00 00 93 00 0252*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047511 7A 7B 93 7A 0253*   	db 122,123,147,122,123,122,147,122,123,122,147,122,123,147,122,123
       7B 7A 93 7A 
       7B 7A 93 7A 
       7B 93 7A 7B 
047521 6A 6B 93 6A 0254*   	db 106,107,147,106,107,106,147,106,107,106,147,106,107,147,106,107
       6B 6A 93 6A 
       6B 6A 93 6A 
       6B 93 6A 6B 
047531 00 00 93 00 0255*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047541 00 00 93 00 0256*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047551 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
047561 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047571 49 05 4B BF 0259*   	db 073,005,075,191,008,191,191,191,191,191,004,191,191,073,005,075
       08 BF BF BF 
       BF BF 04 BF 
       BF 49 05 4B 
047581 39 3A 3B BF 0260*   	db 057,058,059,191,008,191,191,191,191,191,004,191,191,057,058,059
       08 BF BF BF 
       BF BF 04 BF 
       BF 39 3A 3B 
047591 BF BF BF BF 0261*   	db 191,191,191,191,008,191,191,191,191,191,004,191,191,191,191,191
       08 BF BF BF 
       BF BF 04 BF 
       BF BF BF BF 
0475A1 BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0475B1 BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
0475C1 BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0475D1 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0475E1 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0475F1 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,191,191,191,191,191,191,057,058,059
       BF BF BF BF 
       BF BF BF BF 
       BF 39 3A 3B 
047601 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047611             0058        include "player_state.inc"
047611             0001*   player_defaults:
047611 05          0002*       db player               ; type
047612 76 01 00    0003*       dl BUF_SHIP_0L          ; base_bufferId
047615 79 76 04    0004*       dl do_player            ; move_program
047618 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047619 10          0006*       db 16                   ; dim_x
04761A 10          0007*       db 16                   ; dim_y
04761B 01          0008*       db 1                    ; num_orientations
04761C 01          0009*       db 1                    ; num_animations
04761D 00          0010*       db 0                    ; animation
04761E 00          0011*       db 0                    ; animation_timer
04761F 00          0012*       db 0                    ; move_timer
047620 00          0013*       db 0                    ; move_step
047621 00          0014*       db 0                    ; points
047622 00          0015*       db 0                    ; shield_damage
047623 00          0016*       db 0                    ; frame
047624             0017*   
047624 08 77 04    0018*   player_state:  dl player_alive
047627 00          0019*   player_ships: db 0
047628 03          0020*   player_ships_max: db 3
047629             0021*   player_speed: equ 3*256 ; pixels per frame 16.8 fixed
047629             0022*   
047629             0023*   draw_player_ships:
047629             0024*   ; activate mfd
047629 DD 21 65 78 0025*       ld ix,mfd_ships
       04          
04762E CD 6C 79 04 0026*       call mfd_activate
047632             0027*   ; blank out previously drawn ships
047632 AF          0028*       xor a ; color mode 0
047633 0E 00       0029*       ld c,c_black
047635 CD E2 12 04 0030*       call vdu_gcol
047639 01 00 00 00 0031*       ld bc,0
04763D 11 00 00 00 0032*       ld de,0
047641 DD 21 4F 00 0033*       ld ix,0+79
       00          
047646 FD 21 0F 00 0034*       ld iy,0+15
       00          
04764B CD 2E 17 04 0035*       call vdu_plot_rf
04764F             0036*   ; draw the ships remaining
04764F 21 2B 00 00 0037*       ld hl,BUF_SHIP_MFD
047653 CD 95 13 04 0038*       call vdu_buff_select
047657 3A 27 76 04 0039*       ld a,(player_ships) ; loop counter
04765B 01 00 00 00 0040*       ld bc,0 ; starting x-coordinate
04765F             0041*   @loop:
04765F 3D          0042*       dec a ; we don't count the ship we're flying
047660 C8          0043*       ret z
047661 F5          0044*       push af ; back up loop counter
047662 C5          0045*       push bc ; save x-coordinate
047663 11 00 00 00 0046*       ld de,0 ; y-coordinate
047667 CD F1 16 04 0047*       call vdu_plot_bmp
04766B C1          0048*       pop bc ; restore x-coordinate
04766C 21 10 00 00 0049*       ld hl,16 ; bump x-coords
047670 09          0050*       add hl,bc
047671 E5          0051*       push hl
047672 C1          0052*       pop bc ; bc = new x-coordinate
047673 F1          0053*       pop af
047674 C3 5F 76 04 0054*       jp @loop
047678 C9          0055*       ret
047679             0056*   ; end draw_player_ships
047679             0057*   
047679             0058*   do_player:
047679 2A 24 76 04 0059*       ld hl,(player_state)
04767D             0060*       CALL_HL
04767D 01 83 76 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047681 C5          0002*M1     push bc ; which constitutes the return address
047682 E9          0003*M1     jp (hl) ; Jump to the address in HL
047683 C9          0061*       ret
047684             0062*   ; end do_player
047684             0063*   
047684             0064*   ; set initial player position
047684             0065*   ; inputs: none,everything is hardcoded
047684             0066*   ; outputs: player_x/y set to bottom-left corner of screen
047684             0067*   ; destroys: pretty much everything
047684             0068*   player_init:
047684 3A 1F 7D 04 0069*       ld a,(player_shields_max)
047688 32 1E 7D 04 0070*       ld (player_shields),a
04768C 3A A6 7B 04 0071*       ld a,(laser_power_max)
047690 32 A4 7B 04 0072*       ld (laser_power),a
047694 3A 84 7A 04 0073*       ld a,(player_fuel_max)
047698 32 82 7A 04 0074*       ld (player_fuel),a
04769C             0075*   ; set all to zero so they will update
04769C AF          0076*       xor a
04769D 32 A5 7B 04 0077*       ld (laser_power_last),a
0476A1 32 20 7D 04 0078*       ld (player_shields_last),a
0476A5 32 83 7A 04 0079*       ld (player_fuel_last),a
0476A9             0080*   ; set player sprite record with defaults
0476A9 DD 21 67 99 0081*       ld ix,player_begin
       04          
0476AE 21 11 76 04 0082*       ld hl,player_defaults
0476B2 01 00 00 00 0083*       ld bc,0*256
0476B6 11 00 40 01 0084*       ld de,sprite_bottom*256
0476BA 3E 01       0085*       ld a,1
0476BC CD 53 7E 04 0086*       call spawn_sprite_from_coords
0476C0 D2 EB 76 04 0087*       jp nc,@draw
0476C4 DD CB 16 BE 0088*       res 7,(ix+sprite_type)
0476C8             0089*   ; load sprite frames
0476C8 DD 7E 00    0090*       ld a,(ix+sprite_id)
0476CB CD 92 17 04 0091*       call vdu_sprite_select
0476CF CD A5 17 04 0092*       call vdu_sprite_clear_frames
0476D3 21 76 01 00 0093*       ld hl,BUF_SHIP_0L
0476D7 CD E7 18 04 0094*       call vdu_sprite_add_buff
0476DB 21 77 01 00 0095*       ld hl,BUF_SHIP_1C
0476DF CD E7 18 04 0096*       call vdu_sprite_add_buff
0476E3 21 78 01 00 0097*       ld hl,BUF_SHIP_2R
0476E7 CD E7 18 04 0098*       call vdu_sprite_add_buff
0476EB             0099*   @draw:
0476EB 01 00 00 00 0100*       ld bc,0*256
0476EF 11 00 40 01 0101*       ld de,sprite_bottom*256
0476F3 CD 5E 18 04 0102*       call vdu_sprite_move_abs168
0476F7 CD 08 18 04 0103*       call vdu_sprite_show
0476FB 21 08 77 04 0104*       ld hl,player_alive
0476FF 22 24 76 04 0105*       ld (player_state),hl
047703 DD CB 1D F6 0106*       set sprite_alive,(ix+sprite_collisions)
047707 C9          0107*       ret
047708             0108*   ; end player_init
047708             0109*   
047708             0110*   player_alive:
047708 CD BF 7A 04 0111*       call player_input
04770C CD 10 7C 04 0112*       call player_move_weapons
047710 C9          0113*       ret
047711             0114*   ; end player_alive
047711             0115*   
047711             0116*   kill_player:
047711             0117*   ; set player collision flag to dead
047711 DD 21 67 99 0118*       ld ix,player_begin
       04          
047716 DD CB 1D B6 0119*       res sprite_alive,(ix+sprite_collisions)
04771A             0120*   ; change seeker move program to move_enemy_seeker_orbit
04771A FD 21 A7 99 0121*       ld iy,seekers_base
       04          
04771F 21 ED 1F 04 0122*       ld hl,move_enemy_seeker_orbit
047723 06 03       0123*       ld b,seekers_max
047725 CD 46 7F 04 0124*       call change_sprite_group_move_program
047729             0125*   ; set player state to dying
047729 21 32 77 04 0126*       ld hl,player_dying
04772D 22 24 76 04 0127*       ld (player_state),hl
047731 C9          0128*       ret
047732             0129*   ; end kill_player
047732             0130*   
047732             0131*   player_dying:
047732             0132*   ; spawn explosions at player location
047732 06 10       0133*       ld b,16 ; loop counter
047734             0134*   @loop_explode:
047734 C5          0135*       push bc ; save loop counter
047735 CD 49 21 04 0136*       call spawn_explosion_player
047739 21 00 00 00 0137*       ld hl,0
04773D DD 2F 07    0138*       ld (ix+sprite_xvel),hl
047740 21 00 01 00 0139*       ld hl,1*256
047744 DD 2F 0A    0140*       ld (ix+sprite_yvel),hl
047747             0141*   ; move explosions for a few frames
047747 06 10       0142*       ld b,16 ; loop counter
047749             0143*   @loop_animate:
047749 C5          0144*       push bc
04774A CD 87 77 04 0145*       call @animate
04774E C1          0146*       pop bc
04774F 10 F8       0147*       djnz @loop_animate
047751 C1          0148*       pop bc
047752 10 E0       0149*       djnz @loop_explode
047754             0150*   ; delay until grand finale
047754 06 10       0151*       ld b,16 ; loop counter
047756             0152*   @loop_delay:
047756 C5          0153*       push bc
047757 CD 87 77 04 0154*       call @animate
04775B C1          0155*       pop bc
04775C 10 F8       0156*       djnz @loop_delay
04775E             0157*   ; set up the grand finale
04775E 06 08       0158*       ld b,explosions_max ; loop counter
047760             0159*   @loop_spawn_finale:
047760 C5          0160*       push bc
047761 CD 49 21 04 0161*       call spawn_explosion_player
047765 CD A4 77 04 0162*       call @rand
047769 DD 2F 07    0163*       ld (ix+sprite_xvel),hl
04776C CD A4 77 04 0164*       call @rand
047770 DD 2F 0A    0165*       ld (ix+sprite_yvel),hl
047773 C1          0166*       pop bc
047774 10 EA       0167*       djnz @loop_spawn_finale
047776             0168*   @loop_finale_animate:
047776 C5          0169*       push bc
047777 CD 87 77 04 0170*       call @animate
04777B C1          0171*       pop bc
04777C 10 F8       0172*       djnz @loop_finale_animate
04777E             0173*   
04777E             0174*   ; set game state to player dead
04777E 21 C4 77 04 0175*       ld hl,player_dead
047782 22 24 76 04 0176*       ld (player_state),hl
047786 C9          0177*       ret
047787             0178*   @animate:
047787 CD 8F 88 04 0179*       call tiles_plot
04778B CD 73 7D 04 0180*       call set_gfx_playing_field
04778F CD 10 7C 04 0181*       call player_move_weapons
047793 CD E2 1E 04 0182*       call do_enemies
047797 CD A9 21 04 0183*       call move_explosions
04779B CD FF 89 04 0184*       call move_tiles
04779F CD 14 13 04 0185*       call vdu_vblank
0477A3 C9          0186*       ret
0477A4             0187*   @rand:
0477A4 21 00 00 00 0188*       ld hl,0
0477A8 CD 14 05 04 0189*       call rand_8
0477AC 47          0190*       ld b,a
0477AD E6 01       0191*       and %00000001
0477AF 67          0192*       ld h,a
0477B0 68          0193*       ld l,b
0477B1 CB 78       0194*       bit 7,b
0477B3 C8          0195*       ret z
0477B4 CD 7C 04 04 0196*       call neg_hlu
0477B8 C9          0197*       ret
0477B9             0198*   ; end player_dying
0477B9             0199*   
0477B9 47 65 74 20 0200*   get_ready: asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
0477C4             0201*   
0477C4             0202*   player_dead:
0477C4             0203*   ; decrement lives
0477C4 3A 27 76 04 0204*       ld a,(player_ships)
0477C8 3D          0205*       dec a
0477C9 CA 84 80 04 0206*       jp z,game_over
0477CD 32 27 76 04 0207*       ld (player_ships),a
0477D1 CD 29 76 04 0208*       call draw_player_ships
0477D5             0209*   ; reset the sprite table
0477D5 CD BB 7D 04 0210*       call table_init
0477D9 21 67 98 04 0211*       ld hl,table_base
0477DD 22 96 7D 04 0212*       ld (table_pointer),hl
0477E1             0213*   ; initialize sprites and active tiles table
0477E1 CD F3 7D 04 0214*       call sprites_init
0477E5 CD BB 7D 04 0215*       call table_init
0477E9 CD 19 87 04 0216*       call tile_table_init
0477ED             0217*   ; reset player score to what it was at the start of the level
0477ED 2A DB 7C 04 0218*       ld hl,(player_starting_score)
0477F1 22 D5 7C 04 0219*       ld (player_score),hl
0477F5             0220*   ; restart the level
0477F5 CD 7A 65 04 0221*       call start_level_countdown
0477F9 CD 13 65 04 0222*       call init_level
0477FD             0223*   ; spawn player sprite at starting position
0477FD CD 84 76 04 0224*       call player_init
047801             0225*   ; set the game state to playing
047801 21 C1 82 04 0226*       ld hl,game_playing
047805 22 53 80 04 0227*       ld (game_state), hl
047809             0228*   ; set game playing substates
047809 21 08 77 04 0229*       ld hl,player_alive
04780D 22 24 76 04 0230*       ld (player_state), hl
047811 21 ED 1E 04 0231*       ld hl,enemies_alive
047815 22 DF 1E 04 0232*       ld (enemies_state), hl
047819 C9          0233*       ret
04781A             0234*   ; end player_dead
04781A             0059        include "player_cockpit.inc"
04781A             0001*   ; offsets into control panel element definitions
04781A             0002*   panel_bufferId: equ 0
04781A             0003*   panel_x0: equ 3
04781A             0004*   panel_y0: equ 6
04781A             0005*   panel_x1: equ 9
04781A             0006*   panel_y1: equ 12
04781A             0007*   
04781A             0008*   ctl_panel_l:
04781A 09 00 00    0009*       dl BUF_CTL_PANEL_L ; bufferId
04781D 00 00 00    0010*       dl 0 ; x0
047820 00 01 00    0011*       dl 256 ; y0
047823 7F 00 00    0012*       dl 0+127 ; x1
047826 7F 01 00    0013*       dl 256+127 ; y1
047829             0014*   
047829             0015*   ctl_panel_r:
047829 0B 00 00    0016*       dl BUF_CTL_PANEL_R ; bufferId
04782C 80 01 00    0017*       dl 384 ; x0
04782F 00 01 00    0018*       dl 256 ; y0
047832 FF 01 00    0019*       dl 384+127 ; x1
047835 7F 01 00    0020*       dl 256+127 ; y1
047838             0021*   
047838             0022*   ctl_panel_top:
047838 0C 00 00    0023*       dl BUF_CTL_PANEL_TOP ; bufferId
04783B 50 00 00    0024*       dl 80 ; x0
04783E 00 00 00    0025*       dl 0 ; y0
047841 AF 01 00    0026*       dl 80+351 ; x1
047844 2F 00 00    0027*       dl 0+47 ; y1
047847             0028*   
047847             0029*   mfd_bezel_l:
047847 0F 00 00    0030*       dl BUF_MFD_BEZEL ; bufferId
04784A 18 00 00    0031*       dl 24 ; x0
04784D 18 01 00    0032*       dl 280 ; y0
047850 77 00 00    0033*       dl 24+95 ; x1
047853 77 01 00    0034*       dl 280+95 ; y1
047856             0035*   
047856             0036*   mfd_bezel_r:
047856 0F 00 00    0037*       dl BUF_MFD_BEZEL ; bufferId
047859 88 01 00    0038*       dl 392 ; x0
04785C 18 01 00    0039*       dl 280 ; y0
04785F E7 01 00    0040*       dl 392+95 ; x1
047862 77 01 00    0041*       dl 280+95 ; y1
047865             0042*   
047865             0043*   mfd_ships:
047865 00 00 00    0044*       dl 0 ; bufferId
047868 80 00 00    0045*       dl 128 ; x0
04786B 08 00 00    0046*       dl 8 ; y0
04786E CF 00 00    0047*       dl 128+79 ; x1
047871 27 00 00    0048*       dl 8+31 ; y1
047874             0049*   
047874             0050*   draw_player_cockpit:
047874 DD 21 1A 78 0051*       ld ix,ctl_panel_l
       04          
047879 CD 2D 79 04 0052*       call draw_player_ctl_panel
04787D DD 21 29 78 0053*       ld ix,ctl_panel_r
       04          
047882 CD 2D 79 04 0054*       call draw_player_ctl_panel
047886 DD 21 38 78 0055*       ld ix,ctl_panel_top
       04          
04788B CD 2D 79 04 0056*       call draw_player_ctl_panel
04788F DD 21 47 78 0057*       ld ix,mfd_bezel_l
       04          
047894 CD 2D 79 04 0058*       call draw_player_ctl_panel
047898 DD 21 3F 79 0059*       ld ix,mfd_bg_l
       04          
04789D CD 2D 79 04 0060*       call draw_player_ctl_panel
0478A1 DD 21 4E 79 0061*       ld ix,mfd_arms_l
       04          
0478A6 CD 2D 79 04 0062*       call draw_player_ctl_panel
0478AA DD 21 56 78 0063*       ld ix,mfd_bezel_r
       04          
0478AF CD 2D 79 04 0064*       call draw_player_ctl_panel
0478B3 DD 21 5D 79 0065*       ld ix,mfd_bg_r
       04          
0478B8 CD 2D 79 04 0066*       call draw_player_ctl_panel
0478BC             0067*   
0478BC 21 2A 00 00 0068*       ld hl,BUF_SHIELD
0478C0 CD 95 13 04 0069*       call vdu_buff_select
0478C4 01 EC 01 00 0070*       ld bc,492
0478C8 11 70 01 00 0071*       ld de,368
0478CC CD F1 16 04 0072*       call vdu_plot_bmp
0478D0             0073*   
0478D0 21 29 00 00 0074*       ld hl,BUF_POWER
0478D4 CD 95 13 04 0075*       call vdu_buff_select
0478D8 01 04 00 00 0076*       ld bc,4
0478DC 11 70 01 00 0077*       ld de,368
0478E0 CD F1 16 04 0078*       call vdu_plot_bmp
0478E4             0079*   
0478E4 21 08 00 00 0080*       ld hl,BUF_CREDITS
0478E8 CD 95 13 04 0081*       call vdu_buff_select
0478EC 01 80 01 00 0082*       ld bc,384
0478F0 11 05 01 00 0083*       ld de,261
0478F4 CD F1 16 04 0084*       call vdu_plot_bmp
0478F8             0085*   
0478F8 21 0D 00 00 0086*       ld hl,BUF_JERRY_CAN
0478FC CD 95 13 04 0087*       call vdu_buff_select
047900 01 6E 00 00 0088*       ld bc,110
047904 11 02 01 00 0089*       ld de,258
047908 CD F1 16 04 0090*       call vdu_plot_bmp
04790C             0091*   
04790C 21 0A 00 00 0092*       ld hl,BUF_CTL_PANEL_NAVBALL_SM
047910 CD 95 13 04 0093*       call vdu_buff_select
047914 01 A4 01 00 0094*       ld bc,420
047918 11 35 01 00 0095*       ld de,309
04791C CD F1 16 04 0096*       call vdu_plot_bmp
047920             0097*   
047920 CD 33 7D 04 0098*       call init_bar_shields
047924 CD BC 7B 04 0099*       call init_bar_laser
047928 CD 69 7A 04 0100*       call init_bar_fuel
04792C             0101*   
04792C C9          0102*       ret
04792D             0103*   ; end draw_player_cockpit
04792D             0104*   
04792D             0105*   draw_player_ctl_panel:
04792D DD 27 00    0106*       ld hl,(ix+panel_bufferId)
047930 CD 95 13 04 0107*       call vdu_buff_select
047934 DD 07 03    0108*       ld bc,(ix+panel_x0)
047937 DD 17 06    0109*       ld de,(ix+panel_y0)
04793A CD F1 16 04 0110*       call vdu_plot_bmp
04793E C9          0111*       ret
04793F             0112*   ; end draw_player_ctl_panel
04793F             0113*   
04793F             0114*   mfd_bg_l:
04793F 10 00 00    0115*       dl BUF_MFD_BG ; bufferId
047942 28 00 00    0116*       dl 40 ; x0
047945 28 01 00    0117*       dl 296 ; y0
047948 67 00 00    0118*       dl 40+63 ; x1
04794B 67 01 00    0119*       dl 296+63 ; y1
04794E             0120*   
04794E             0121*   mfd_arms_l:
04794E 0E 00 00    0122*       dl BUF_MFD_ARMS ; bufferId
047951 36 00 00    0123*       dl 54 ; x0
047954 40 01 00    0124*       dl 320 ; y0
047957 59 00 00    0125*       dl 54+35 ; x1
04795A 51 01 00    0126*       dl 320+17 ; y1
04795D             0127*   
04795D             0128*   mfd_bg_r:
04795D 10 00 00    0129*       dl BUF_MFD_BG ; bufferId
047960 98 01 00    0130*       dl 408 ; x0
047963 28 01 00    0131*       dl 296 ; y0
047966 D7 01 00    0132*       dl 408+63 ; x1
047969 67 01 00    0133*       dl 296+63 ; y1
04796C             0134*   
04796C             0135*   mfd_activate:
04796C DD E5       0136*       push ix ; preserve pointer
04796E DD 07 03    0137*       ld bc,(ix+panel_x0)
047971 DD 17 06    0138*       ld de,(ix+panel_y0)
047974 CD 25 13 04 0139*       call vdu_set_gfx_origin
047978 01 00 00 00 0140*       ld bc,0
04797C 11 00 00 00 0141*       ld de,0
047980 DD 21 3F 00 0142*       ld ix,63
       00          
047985 FD 21 3F 00 0143*       ld iy,63
       00          
04798A CD 40 13 04 0144*       call vdu_set_gfx_viewport
04798E DD E1       0145*       pop ix ; restore pointer
047990 C9          0146*       ret
047991             0147*   ; end mfd_activate
047991             0148*   
047991             0149*   mfd_init:
047991 DD 27 00    0150*       ld hl,(ix+panel_bufferId)
047994 CD 95 13 04 0151*       call vdu_buff_select
047998 01 00 00 00 0152*       ld bc,0
04799C 11 00 00 00 0153*       ld de,0
0479A0 CD F1 16 04 0154*       call vdu_plot_bmp
0479A4 C9          0155*       ret
0479A5             0156*   ; end mfd_init
0479A5             0157*   
0479A5             0158*   bar_val: equ 0 ; current value
0479A5             0159*   bar_x0: equ panel_x0
0479A5             0160*   bar_y0: equ panel_y0
0479A5             0161*   bar_x1: equ panel_x1
0479A5             0162*   bar_y1: equ panel_y1
0479A5             0163*   bar_y: equ 15 ; y-plot coordinate
0479A5             0164*   bar_x: equ 15 ; x-plot coordinate
0479A5             0165*   
0479A5             0166*   bar_yellow: equ 33
0479A5             0167*   bar_red: equ 17
0479A5             0168*   
0479A5             0169*   ; update a vertical bar display
0479A5             0170*   ; inputs: ix points to bar structure
0479A5             0171*   ;         bar_val set by caller
0479A5             0172*   ; prerequisite: bar_init called before first use
0479A5             0173*   bar_update_v:
0479A5             0174*   ; set gfx viewport
0479A5 DD E5       0175*       push ix ; preserve pointer
0479A7 DD 07 03    0176*       ld bc,(ix+bar_x0)
0479AA DD 17 06    0177*       ld de,(ix+bar_y0)
0479AD DD 31 0C    0178*       ld iy,(ix+bar_y1)
0479B0 DD 37 09    0179*       ld ix,(ix+bar_x1)
0479B3 CD 40 13 04 0180*       call vdu_set_gfx_viewport
0479B7 DD E1       0181*       pop ix ; restore pointer
0479B9             0182*   ; select the color based on the value thresholds
0479B9 DD 17 00    0183*       ld de,(ix+bar_val)
0479BC 21 EF FF FF 0184*       ld hl,-bar_red
0479C0 19          0185*       add hl,de
0479C1 D2 DE 79 04 0186*       jp nc,@red
0479C5 21 DF FF FF 0187*       ld hl,-bar_yellow
0479C9 19          0188*       add hl,de
0479CA D2 D6 79 04 0189*       jp nc,@yellow
0479CE 21 05 00 00 0190*       ld hl,BUF_BAR_V_2 ; green
0479D2 C3 E2 79 04 0191*       jp @select
0479D6             0192*   @yellow:
0479D6 21 04 00 00 0193*       ld hl,BUF_BAR_V_1 ; yellow
0479DA C3 E2 79 04 0194*       jp @select
0479DE             0195*   @red:
0479DE 21 03 00 00 0196*       ld hl,BUF_BAR_V_0 ; red
0479E2             0197*   @select:
0479E2 CD 95 13 04 0198*       call vdu_buff_select
0479E6             0199*   ; get x-plot position
0479E6 DD 07 03    0200*       ld bc,(ix+bar_x0)
0479E9             0201*   ; compute y-plot position
0479E9 DD 17 00    0202*       ld de,(ix+bar_val)
0479EC 21 40 00 00 0203*       ld hl,64
0479F0 AF          0204*       xor a ; clear carry
0479F1 ED 52       0205*       sbc hl,de
0479F3 DD 17 0F    0206*       ld de,(ix+bar_y)
0479F6 19          0207*       add hl,de
0479F7 7D          0208*       ld a,l
0479F8 E6 FC       0209*       and %11111100 ; round to nearest 4 pixels
0479FA 6F          0210*       ld l,a
0479FB EB          0211*       ex de,hl
0479FC CD F1 16 04 0212*       call vdu_plot_bmp
047A00 C9          0213*       ret
047A01             0214*   ; end bar_update_v
047A01             0215*   
047A01             0216*   ; update a horizontal bar display
047A01             0217*   ; inputs: ix points to bar structure
047A01             0218*   ;         bar_val set by caller
047A01             0219*   ; prerequisite: bar_init called before first use
047A01             0220*   bar_update_h:
047A01             0221*   ; set gfx viewport
047A01 DD E5       0222*       push ix ; preserve pointer
047A03 DD 07 03    0223*       ld bc,(ix+bar_x0)
047A06 DD 17 06    0224*       ld de,(ix+bar_y0)
047A09 DD 31 0C    0225*       ld iy,(ix+bar_y1)
047A0C DD 37 09    0226*       ld ix,(ix+bar_x1)
047A0F CD 40 13 04 0227*       call vdu_set_gfx_viewport
047A13 DD E1       0228*       pop ix ; restore pointer
047A15             0229*   ; select the color based on the value thresholds
047A15 DD 17 00    0230*       ld de,(ix+bar_val)
047A18 21 EF FF FF 0231*       ld hl,-bar_red
047A1C 19          0232*       add hl,de
047A1D D2 3A 7A 04 0233*       jp nc,@red
047A21 21 DF FF FF 0234*       ld hl,-bar_yellow
047A25 19          0235*       add hl,de
047A26 D2 32 7A 04 0236*       jp nc,@yellow
047A2A 21 02 00 00 0237*       ld hl,BUF_BAR_H_2 ; green
047A2E C3 3E 7A 04 0238*       jp @select
047A32             0239*   @yellow:
047A32 21 01 00 00 0240*       ld hl,BUF_BAR_H_1 ; yellow
047A36 C3 3E 7A 04 0241*       jp @select
047A3A             0242*   @red:
047A3A 21 00 00 00 0243*       ld hl,BUF_BAR_H_0 ; red
047A3E             0244*   @select:
047A3E CD 95 13 04 0245*       call vdu_buff_select
047A42             0246*   ; compute x-plot position
047A42 DD 27 00    0247*       ld hl,(ix+bar_val)
047A45 DD 07 0F    0248*       ld bc,(ix+bar_x)
047A48 09          0249*       add hl,bc
047A49 7D          0250*       ld a,l
047A4A E6 FC       0251*       and %11111100 ; round to nearest 4 pixels
047A4C 6F          0252*       ld l,a
047A4D E5          0253*       push hl
047A4E C1          0254*       pop bc
047A4F             0255*   ; get y-plot position
047A4F DD 17 06    0256*       ld de,(ix+bar_y0)
047A52 CD F1 16 04 0257*       call vdu_plot_bmp
047A56 C9          0258*       ret
047A57             0259*   ; end bar_update_h
047A57             0060        include "player_fuel.inc"
047A57             0001*   
047A57             0002*   bar_fuel:
047A57 00 00 00    0003*       dl 0 ; value
047A5A 30 00 00    0004*       dl 48 ; x0
047A5D 08 01 00    0005*       dl 264 ; y0
047A60 6F 00 00    0006*       dl 48+63 ; x1
047A63 0F 01 00    0007*       dl 264+7 ; y1
047A66 F0 FF FF    0008*       dl 48-64 ; x-plot coordinate
047A69             0009*   
047A69             0010*   init_bar_fuel:
047A69 3A 86 7A 04 0011*       ld a,(discharge_fuel_timer_max)
047A6D 32 85 7A 04 0012*       ld (discharge_fuel_timer),a
047A71 DD 21 57 7A 0013*       ld ix,bar_fuel
       04          
047A76 3A 84 7A 04 0014*       ld a,(player_fuel_max)
047A7A DD 77 00    0015*       ld (ix+bar_val),a
047A7D CD 01 7A 04 0016*       call bar_update_h
047A81 C9          0017*       ret
047A82             0018*   ; end init_bar_fuel
047A82             0019*   
047A82 40          0020*   player_fuel: db 64 ; integer
047A83 00          0021*   player_fuel_last: db 0 ; integer
047A84 40          0022*   player_fuel_max: db 64 ; integer
047A85 00          0023*   discharge_fuel_timer: db 0
047A86 40          0024*   discharge_fuel_timer_max: db 64 ;
047A87             0025*   discharge_fuel:
047A87             0026*   ; check fuel timer
047A87 21 85 7A 04 0027*       ld hl,discharge_fuel_timer
047A8B 35          0028*       dec (hl)
047A8C C0          0029*       ret nz ; not time to discharge fuel so return
047A8D             0030*   ; reset fuel discharge timer
047A8D 3A 86 7A 04 0031*       ld a,(discharge_fuel_timer_max)
047A91 77          0032*       ld (hl),a
047A92             0033*   ; discharge fuel
047A92 21 82 7A 04 0034*       ld hl,player_fuel
047A96 35          0035*       dec (hl)
047A97 CA A0 7A 04 0036*       jp z,@no_fuel
047A9B FA A0 7A 04 0037*       jp m,@no_fuel
047A9F C9          0038*       ret ; fuel not zero so return
047AA0             0039*   @no_fuel:
047AA0 36 00       0040*       ld (hl),0 ; TODO: implement out-of-fuel handler
047AA2 C9          0041*       ret
047AA3             0042*   ; end discharge_fuel
047AA3             0043*   
047AA3             0044*   draw_fuel:
047AA3 CD 87 7A 04 0045*       call discharge_fuel
047AA7 21 83 7A 04 0046*       ld hl,player_fuel_last
047AAB 3A 82 7A 04 0047*       ld a,(player_fuel)
047AAF BE          0048*       cp (hl)
047AB0 C8          0049*       ret z ; no change to update
047AB1 77          0050*       ld (hl),a
047AB2 DD 21 57 7A 0051*       ld ix,bar_fuel
       04          
047AB7 DD 77 00    0052*       ld (ix+bar_val),a ; TODO: this is redundant
047ABA CD 01 7A 04 0053*       call bar_update_h
047ABE C9          0054*       ret
047ABF             0055*   ; end draw_fuel
047ABF             0061        include "player_input.inc"
047ABF             0001*   ; UART ports for reading joystick input
047ABF             0002*   ; bit tests: 0 means actuated, 1 means not actuated
047ABF             0003*   portC: 	EQU 	$9E ; reads dpad input
047ABF             0004*   joy1_u: equ 1
047ABF             0005*   joy1_d: equ 3
047ABF             0006*   joy1_l: equ 5
047ABF             0007*   joy1_r: equ 7
047ABF             0008*   portD: 	EQU 	$A2 ; reads buttons
047ABF             0009*   btn1_a: equ 5
047ABF             0010*   
047ABF             0011*   ; process player keyboard input, set player bitmap
047ABF             0012*   ; velocities and draw player bitmap at updated coordinates
047ABF             0013*   ; Inputs: player_x/y set at desired position
047ABF             0014*   ; Returns: player bitmap drawn at updated position
047ABF             0015*   ; Destroys: probably everything except maybe iy
047ABF             0016*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
047ABF             0017*   ; TODO: requires sprite implementation
047ABF             0018*   player_input:
047ABF             0019*   ; point to player sprite record
047ABF FD 21 67 99 0020*       ld iy,player_begin
       04          
047AC4 FD 22 96 7D 0021*       ld (table_pointer),iy
       04          
047AC9             0022*   ; reset player component velocities to zero as the default
047AC9 21 00 00 00 0023*       ld hl,0
047ACD FD 2F 07    0024*       ld (iy+sprite_xvel),hl
047AD0 FD 2F 0A    0025*       ld (iy+sprite_yvel),hl
047AD3             0026*   ; make ship the active sprite
047AD3 FD 7E 00    0027*       ld a,(iy+sprite_id)
047AD6 CD 92 17 04 0028*       call vdu_sprite_select
047ADA             0029*   ; check for keypresses and branch accordingly
047ADA             0030*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
047ADA 3E 1E       0001*M1 			LD	A, function
047ADC 5B CF       0002*M1 			RST.LIL	08h
047ADE             0031*   ; do player directional input
047ADE AF          0032*       xor a ; clear flags
047ADF DB 9E       0033*       in a,(portC) ; read dpad input
047AE1 57          0034*       ld d,a ; save dpad input
047AE2 3E 01       0035*       ld a,1 ; set ship's default animation to center
047AE4             0036*   ; 26 Left: move player left
047AE4 DD CB 03 4E 0037*       bit 1,(ix+3)
047AE8 C2 F6 7A 04 0038*       jp nz,@F
047AEC             0039*   ; test dpad left
047AEC CB 6A       0040*       bit joy1_l,d
047AEE CA F6 7A 04 0041*       jp z,@F
047AF2 C3 02 7B 04 0042*       jp @right
047AF6             0043*   @@:
047AF6 FD 27 07    0044*       ld hl,(iy+sprite_xvel)
047AF9 01 00 FD FF 0045*       ld bc,-player_speed
047AFD 09          0046*       add hl,bc
047AFE FD 2F 07    0047*       ld (iy+sprite_xvel),hl
047B01 3D          0048*       dec a ; set ship's animation to left
047B02             0049*   @right:
047B02             0050*   ; 122 Right: move player right
047B02 DD CB 0F 4E 0051*       bit 1,(ix+15)
047B06 C2 14 7B 04 0052*       jp nz,@F
047B0A             0053*   ; test dpad right
047B0A CB 7A       0054*       bit joy1_r,d
047B0C CA 14 7B 04 0055*       jp z,@F
047B10 C3 20 7B 04 0056*       jp @up
047B14             0057*   @@:
047B14 FD 27 07    0058*       ld hl,(iy+sprite_xvel)
047B17 01 00 03 00 0059*       ld bc,player_speed
047B1B 09          0060*       add hl,bc
047B1C FD 2F 07    0061*       ld (iy+sprite_xvel),hl
047B1F 3C          0062*       inc a ; set ship's animation to right
047B20             0063*   @up:
047B20             0064*   ; 58 Up: move player up
047B20 DD CB 07 4E 0065*       bit 1,(ix+7)
047B24 C2 32 7B 04 0066*       jp nz,@F
047B28             0067*   ; test dpad up
047B28 CB 4A       0068*       bit joy1_u,d
047B2A CA 32 7B 04 0069*       jp z,@F
047B2E C3 3D 7B 04 0070*       jp @dn
047B32             0071*   @@:
047B32 FD 27 0A    0072*       ld hl,(iy+sprite_yvel)
047B35 01 00 FD FF 0073*       ld bc,-player_speed
047B39 09          0074*       add hl,bc
047B3A FD 2F 0A    0075*       ld (iy+sprite_yvel),hl
047B3D             0076*   @dn:
047B3D             0077*   ; 42 Down: move player down
047B3D DD CB 05 4E 0078*       bit 1,(ix+5)
047B41 C2 4F 7B 04 0079*       jp nz,@F
047B45             0080*   ; test dpad down
047B45 CB 5A       0081*       bit joy1_d,d
047B47 CA 4F 7B 04 0082*       jp z,@F
047B4B C3 5A 7B 04 0083*       jp @frame
047B4F             0084*   @@:
047B4F FD 27 0A    0085*       ld hl,(iy+sprite_yvel)
047B52 01 00 03 00 0086*       ld bc,player_speed
047B56 09          0087*       add hl,bc
047B57 FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
047B5A             0089*   @frame:
047B5A             0090*   ; a should land here loaded with the correct frame
047B5A CD F5 17 04 0091*       call vdu_sprite_select_frame
047B5E             0092*   ; draw player at updated position
047B5E FD 21 67 99 0093*       ld iy,player_begin
       04          
047B63 FD 22 96 7D 0094*       ld (table_pointer),iy
       04          
047B68 CD 5B 7F 04 0095*       call move_sprite
047B6C FD 07 01    0096*       ld bc,(iy+sprite_x)
047B6F FD 17 04    0097*       ld de,(iy+sprite_y)
047B72 CD 5E 18 04 0098*       call vdu_sprite_move_abs168
047B76             0099*   
047B76             0100*   ; process player laser fire
047B76             0101*   ; do player fire button input
047B76             0102*   ; read joystick fire button
047B76 AF          0103*       xor a ; clear flags
047B77 DB A2       0104*       in a,(portD) ; read joypad fire button input
047B79 CB 6F       0105*       bit btn1_a,a
047B7B CA 1C 7C 04 0106*       jp z,player_spawn_laser
047B7F             0107*   ; 99 Space: fire main weapon
047B7F DD CB 0C 56 0108*       bit 2,(ix+12)
047B83 C2 1C 7C 04 0109*       jp nz,player_spawn_laser
047B87             0110*   ; no fire button pressed so go home
047B87 C9          0111*       ret
047B88             0112*   ; end player_input
047B88             0062        include "player_laser.inc"
047B88             0001*   laser_defaults:
047B88 06          0002*       db player_air        ; type
047B89 51 01 00    0003*       dl BUF_LASER_A	    ; base_bufferId
047B8C 79 7C 04    0004*       dl move_player_laser	; move_program
047B8F 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047B90 05          0006*       db 5	                ; dim_x
047B91 0D          0007*       db 13                   ; dim_y
047B92 01          0008*       db 1                    ; num_orientations
047B93 02          0009*       db 2                    ; num_animations
047B94 00          0010*       db 0	                ; animation
047B95 02          0011*       db laser_animation_timer_reset ; animation_timer
047B96 00          0012*       db 0	                ; move_timer
047B97 00          0013*       db 0	                ; move_step
047B98 00          0014*       db 0	                ; points
047B99 00          0015*       db 0	                ; shield_damage
047B9A 00          0016*       db 0                    ; frame
047B9B             0017*   
047B9B             0018*   
047B9B             0019*   player_lasers_max: equ 4
047B9B             0020*   laser_speed: equ 4*256 ; 6 pixels per frame 16.8 fixed
047B9B             0021*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
047BA1 0C 00 00    0022*   tmr_laser_reset: dl 120/10
047BA4             0023*   laser_animation_timer_reset: equ 2 ; animate every two frames
047BA4             0024*   
047BA4 40          0025*   laser_power: db 64 ; integer
047BA5 00          0026*   laser_power_last: db 0 ; integer
047BA6 40          0027*   laser_power_max: db 64 ; integer
047BA7 04          0028*   laser_power_per_shot: db 4 ; integer
047BA8 00          0029*   charge_laser_timer: db 0
047BA9 06          0030*   charge_laser_timer_max: db 6
047BAA             0031*   bar_laser:
047BAA 00 00 00    0032*       dl 0 ; value
047BAD 08 00 00    0033*       dl 8 ; x0
047BB0 30 01 00    0034*       dl 304 ; y0
047BB3 0F 00 00    0035*       dl 8+7 ; x1
047BB6 6F 01 00    0036*       dl 304+63 ; y1
047BB9 F0 00 00    0037*       dl 304-64 ; y-plot coordinate
047BBC             0038*   
047BBC             0039*   init_bar_laser:
047BBC 3A A9 7B 04 0040*       ld a,(charge_laser_timer_max)
047BC0 32 A8 7B 04 0041*       ld (charge_laser_timer),a
047BC4 DD 21 AA 7B 0042*       ld ix,bar_laser
       04          
047BC9 3A A6 7B 04 0043*       ld a,(laser_power_max)
047BCD DD 77 00    0044*       ld (ix+bar_val),a
047BD0 CD A5 79 04 0045*       call bar_update_v
047BD4 C9          0046*       ret
047BD5             0047*   ; end init_bar_laser
047BD5             0048*   
047BD5             0049*   init_player_laser:
047BD5             0050*   ; set pointer to laser sprite table
047BD5 FD 21 67 98 0051*       ld iy,player_weapons_begin
       04          
047BDA FD 7E 00    0052*       ld a,(iy+sprite_id) ; sprite id
047BDD 1E 04       0053*       ld e,player_lasers_max ; sprite loop counter
047BDF             0054*   ; define laser sprites
047BDF             0055*   @sprites_loop:
047BDF F5          0056*       push af
047BE0 D5          0057*       push de
047BE1 CD 92 17 04 0058*   	call vdu_sprite_select
047BE5 CD A5 17 04 0059*   	call vdu_sprite_clear_frames
047BE9 21 51 01 00 0060*   	ld hl,BUF_LASER_A
047BED 06 02       0061*   	ld b,2 ; two bitmaps for laser
047BEF             0062*   @frames_loop:
047BEF C5          0063*   	push bc
047BF0 E5          0064*   	push hl
047BF1 CD E7 18 04 0065*   	call vdu_sprite_add_buff
047BF5 E1          0066*   	pop hl
047BF6 23          0067*   	inc hl
047BF7 C1          0068*   	pop bc
047BF8 10 F5       0069*   	djnz @frames_loop
047BFA D1          0070*       pop de ; sprite loop counter
047BFB F1          0071*       pop af ; sprite id
047BFC 3C          0072*       inc a
047BFD 1D          0073*       dec e
047BFE C2 DF 7B 04 0074*       jp nz,@sprites_loop
047C02             0075*   ; set laser firing timer to zero
047C02 FD 21 9B 7B 0076*       ld iy,tmr_laser
       04          
047C07 21 00 00 00 0077*       ld hl,0
047C0B CD F9 11 04 0078*       call timestamp_tmr_set
047C0F C9          0079*       ret
047C10             0080*   ; end init_player_laser
047C10             0081*   
047C10             0082*   player_move_weapons:
047C10             0083*   ; initialize pointers and loop counter
047C10 FD 21 67 98 0084*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
047C15 06 04       0085*       ld b,player_lasers_max ; loop counter
047C17 CD C5 7E 04 0086*       call move_sprite_group
047C1B C9          0087*       ret
047C1C             0088*   ; end player_move_weapons
047C1C             0089*   
047C1C             0090*   player_spawn_laser:
047C1C             0091*    ; check laser spawn timer
047C1C FD 21 9B 7B 0092*       ld iy,tmr_laser
       04          
047C21 CD 04 12 04 0093*       call timestamp_tmr_get
047C25 F0          0094*       ret p ; not time to fire
047C26             0095*   ; check laser power
047C26 3A A4 7B 04 0096*       ld a,(laser_power)
047C2A 21 A7 7B 04 0097*       ld hl,laser_power_per_shot
047C2E 96          0098*       sub (hl) ; units of power per laser shot
047C2F D8          0099*       ret c ; not enough power to fire
047C30             0100*   ; update power to reflect firing
047C30 32 A4 7B 04 0101*       ld (laser_power),a
047C34             0102*   ; reset timer
047C34 2A A1 7B 04 0103*       ld hl,(tmr_laser_reset)
047C38 CD F9 11 04 0104*       call timestamp_tmr_set
047C3C             0105*   ; fire the laser
047C3C DD 21 67 98 0106*       ld ix,player_weapons_begin
       04          
047C41 06 04       0107*       ld b,player_lasers_max
047C43 FD 21 67 99 0108*       ld iy,player_begin
       04          
047C48 FD 22 96 7D 0109*       ld (table_pointer),iy
       04          
047C4D 21 88 7B 04 0110*       ld hl,laser_defaults
047C51 CD 93 7E 04 0111*       call spawn_sprite_from_sprite
047C55 D0          0112*       ret nc ; no carry means no free sprite slots, so we go home
047C56             0113*   ; other specific initialization
047C56             0114*   ; ------------------------------------------------
047C56 FD 21 67 99 0115*       ld iy,player_begin
       04          
047C5B             0116*   ; x-coordinate
047C5B FD 27 01    0117*       ld hl,(iy+sprite_x)
047C5E 11 00 05 00 0118*       ld de,5*256 ; horizontal center with player sprite
047C62 19          0119*       add hl,de
047C63 DD 2F 01    0120*       ld (ix+sprite_x),hl
047C66             0121*   ; y-coordinate
047C66 FD 27 04    0122*       ld hl,(iy+sprite_y)
047C69 11 00 FA FF 0123*       ld de,-6*256 ; set laser y a few pixels above player
047C6D 19          0124*       add hl,de
047C6E DD 2F 04    0125*       ld (ix+sprite_y),hl
047C71             0126*   ; set laser velocity
047C71 21 00 FC FF 0127*       ld hl,-laser_speed
047C75 DD 2F 0A    0128*       ld (ix+sprite_yvel),hl
047C78 C9          0129*       ret
047C79             0130*   ; end player_spawn_laser
047C79             0131*   
047C79             0132*   move_player_laser:
047C79             0133*   ; run the movement program for the laser
047C79 CD 5B 7F 04 0134*       call move_sprite
047C7D 3A 99 7D 04 0135*       ld a,(sprite_screen_edge)
047C81 E6 08       0136*       and a,collide_top ; check collision with top of screen
047C83 CA 8B 7C 04 0137*       jp z,@F ; still on screen
047C87 C3 DF 7D 04 0138*       jp table_deactivate_sprite
047C8B             0139*   @@: ; check animation timer
047C8B FD 35 23    0140*       dec (iy+sprite_animation_timer)
047C8E C2 A2 7C 04 0141*       jp nz,@F
047C92 3E 02       0142*       ld a,laser_animation_timer_reset
047C94 FD 77 23    0143*       ld (iy+sprite_animation_timer),a
047C97 FD 7E 00    0144*       ld a,(iy+sprite_id)
047C9A CD 92 17 04 0145*       call vdu_sprite_select
047C9E CD D9 17 04 0146*       call vdu_sprite_next_frame
047CA2             0147*   @@: ; all done
047CA2 C9          0148*       ret
047CA3             0149*   ; end move_player_laser
047CA3             0150*   
047CA3             0151*   charge_laser:
047CA3             0152*   ; check laser timer
047CA3 21 A8 7B 04 0153*       ld hl,charge_laser_timer
047CA7 35          0154*       dec (hl)
047CA8 C0          0155*       ret nz
047CA9 3A A9 7B 04 0156*       ld a,(charge_laser_timer_max)
047CAD 77          0157*       ld (hl),a
047CAE 21 A4 7B 04 0158*       ld hl,laser_power
047CB2 34          0159*       inc (hl)
047CB3 3E 40       0160*       ld a,64
047CB5 BE          0161*       cp (hl)
047CB6 D0          0162*       ret nc
047CB7 77          0163*       ld (hl),a
047CB8 C9          0164*       ret
047CB9             0165*   ; end charge_laser
047CB9             0166*   draw_laser:
047CB9 CD A3 7C 04 0167*       call charge_laser
047CBD 21 A5 7B 04 0168*       ld hl,laser_power_last
047CC1 3A A4 7B 04 0169*       ld a,(laser_power)
047CC5 BE          0170*       cp (hl)
047CC6 C8          0171*       ret z ; no change to update
047CC7 77          0172*       ld (hl),a
047CC8 DD 21 AA 7B 0173*       ld ix,bar_laser
       04          
047CCD DD 77 00    0174*       ld (ix+bar_val),a ; TODO: this is redundant
047CD0 CD A5 79 04 0175*       call bar_update_v
047CD4 C9          0176*       ret
047CD5             0063        include "player_score.inc"
047CD5             0001*   ; scores are unsigned integers
047CD5 00 00 00    0002*   player_score: dl 0
047CD8 00 00 00    0003*   player_score_last: dl 0 ; if equal to player_score, no need to update
047CDB 00 00 00    0004*   player_starting_score: dl 0 ; to reset after restarting a map
047CDE             0005*   
047CDE             0006*   ; inputs: iy set to sprite/tile record being tallied
047CDE             0007*   ; outputs: hl,player_score = updated score
047CDE             0008*   ; destroys: hl,de
047CDE             0009*   update_score:
047CDE 11 00 00 00 0010*       ld de,0 ; clear deu and d
047CE2 FD 5E 26    0011*       ld e,(iy+sprite_points)
047CE5 2A D5 7C 04 0012*       ld hl,(player_score)
047CE9 19          0013*       add hl,de
047CEA 22 D5 7C 04 0014*       ld (player_score),hl
047CEE C9          0015*       ret
047CEF             0016*   ; end update_score
047CEF             0017*   
047CEF             0018*   ; text coordinates for score display
047CEF             0019*   score_x: equ 50
047CEF             0020*   score_y: equ 33
047CEF             0021*   ; inputs: none
047CEF             0022*   print_score:
047CEF             0023*   ; set text colors
047CEF 3E 80       0024*       ld a,c_black+128
047CF1 CD D1 12 04 0025*       call vdu_colour_text
047CF5 3E 0A       0026*       ld a,c_green
047CF7 CD D1 12 04 0027*       call vdu_colour_text
047CFB             0028*   ; print the score
047CFB 2A D8 7C 04 0029*       ld hl,(player_score_last)
047CFF ED 5B D5 7C 0030*       ld de,(player_score)
       04          
047D04 ED 53 D8 7C 0031*       ld (player_score_last),de
       04          
047D09 AF          0032*       xor a ; clear carry
047D0A ED 52       0033*       sbc hl,de
047D0C C8          0034*       ret z ; no change to update
047D0D 0E 32       0035*       ld c,score_x
047D0F 06 21       0036*       ld b,score_y
047D11 CD 8C 12 04 0037*       call vdu_move_cursor
047D15 2A D5 7C 04 0038*       ld hl,(player_score)
047D19 CD C8 00 04 0039*       call printDec
047D1D C9          0040*       ret
047D1E             0041*   ; end print_score
047D1E             0064        include "player_shields.inc"
047D1E             0001*   
047D1E 40          0002*   player_shields: db 64
047D1F 40          0003*   player_shields_max: db 64
047D20             0004*   ; player_shields_max: db 8 ; DEBUG
047D20 00          0005*   player_shields_last: db 0
047D21             0006*   bar_shields:
047D21 00 00 00    0007*       dl 0 ; value
047D24 F0 01 00    0008*       dl 496 ; x0
047D27 30 01 00    0009*       dl 304 ; y0
047D2A F7 01 00    0010*       dl 496+7 ; x1
047D2D 6F 01 00    0011*       dl 304+63 ; y1
047D30 F0 00 00    0012*       dl 304-64 ; y-plot coordinate
047D33             0013*   
047D33             0014*   init_bar_shields:
047D33 DD 21 21 7D 0015*       ld ix,bar_shields
       04          
047D38 2A 1F 7D 04 0016*       ld hl,(player_shields_max)
047D3C DD 2F 00    0017*       ld (ix+bar_val),hl
047D3F CD A5 79 04 0018*       call bar_update_v
047D43 C9          0019*       ret
047D44             0020*   ; end init_bar_shields
047D44             0021*   
047D44             0022*   ; inputs: iy set to sprite/tile record being tallied
047D44             0023*   ; outputs: hl,player_shields = updated shields
047D44             0024*   ; destroys: hl,de
047D44             0025*   update_shields:
047D44 FD 6E 27    0026*       ld l,(iy+sprite_shield_damage)
047D47 3A 1E 7D 04 0027*       ld a,(player_shields)
047D4B 85          0028*       add a,l
047D4C F2 51 7D 04 0029*       jp p,@have_shields
047D50 AF          0030*       xor a ; set to zero
047D51             0031*   @have_shields:
047D51 32 1E 7D 04 0032*       ld (player_shields),a
047D55 B7          0033*       or a ; check for zero
047D56 CA 11 77 04 0034*       jp z,kill_player
047D5A C9          0035*       ret
047D5B             0036*   ; end update_shields
047D5B             0037*   
047D5B             0038*   draw_shields:
047D5B 21 20 7D 04 0039*       ld hl,player_shields_last
047D5F 3A 1E 7D 04 0040*       ld a,(player_shields)
047D63 BE          0041*       cp (hl)
047D64 C8          0042*       ret z ; no change to update
047D65 77          0043*       ld (hl),a
047D66 DD 21 21 7D 0044*       ld ix,bar_shields
       04          
047D6B DD 77 00    0045*       ld (ix+bar_val),a ; TODO: this is redundant
047D6E CD A5 79 04 0046*       call bar_update_v
047D72 C9          0047*       ret
047D73             0065        include "screen.inc"
047D73             0001*   
047D73             0002*   screen_right: equ 511
047D73             0003*   screen_bottom: equ 383
047D73             0004*   origin_top: equ 48
047D73             0005*   origin_left: equ 128
047D73             0006*   field_top: equ 0
047D73             0007*   field_bottom: equ screen_bottom-origin_top
047D73             0008*   field_left: equ 0
047D73             0009*   field_right: equ 255
047D73             0010*   sprite_top: equ field_top
047D73             0011*   sprite_bottom: equ field_bottom-15
047D73             0012*   sprite_left: equ field_left
047D73             0013*   sprite_right: equ field_right-15
047D73             0014*   tile_bottom: equ screen_bottom+1
047D73             0015*   
047D73             0016*   ; set gfx origin and viewport to playing field window
047D73             0017*   set_gfx_playing_field:
047D73 01 80 00 00 0018*       ld bc,origin_left
047D77 11 30 00 00 0019*       ld de,origin_top
047D7B CD 25 13 04 0020*       call vdu_set_gfx_origin
047D7F 01 00 00 00 0021*       ld bc,field_left
047D83 11 00 00 00 0022*       ld de,field_top
047D87 DD 21 FF 00 0023*       ld ix,field_right
       00          
047D8C FD 21 4F 01 0024*       ld iy,field_bottom
       00          
047D91 CD 40 13 04 0025*       call vdu_set_gfx_viewport
047D95 C9          0026*       ret
047D96             0027*   ; end set_gfx_playing_field
047D96             0066        include "sprites.inc"
047D96             0001*   ; sprite_type
047D96             0002*   enemy_dead: equ 0
047D96             0003*   enemy_air: equ 1
047D96             0004*   enemy_ground: equ 2
047D96             0005*   enemy_projectile: equ 3
047D96             0006*   explosion: equ 4
047D96             0007*   player: equ 5
047D96             0008*   player_air: equ 6
047D96             0009*   player_ground: equ 7
047D96             0010*   
047D96             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
047D96             0012*   table_record_size:         equ  64; bytes per sprite record
047D96             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
047D96             0014*   ; sprite state variables
047D96             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
047D96             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047D96             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047D96             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047D96             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047D96             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047D96             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
047D96             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
047D96             0023*   ; sprite definition variables
047D96             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
047D96             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
047D96             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047D96             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
047D96             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047D96             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
047D96             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
047D96             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
047D96             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
047D96             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
047D96             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047D96             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047D96             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047D96             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
047D96             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047D96             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
047D96             0040*   
047D96             0041*   ; ###### SPRITE TABLE VARIABLES ######
047D96             0042*   ; pointer to top address of current record, initialized to table_base
047D96 67 98 04    0043*   table_pointer: dl table_base
047D99             0044*   
047D99             0045*   ; flag indicating collision with screen edge
047D99 00          0046*   sprite_screen_edge: db #00
047D9A             0047*   
047D9A             0048*   ; ######### COLLISION SPRITE PARAMETERS ##########
047D9A             0049*   ; integer coordinates are all that are needed for collision calculations
047D9A 00          0050*   collision_x: db 0x00
047D9B 00          0051*   collision_y: db 0x00
047D9C 00          0052*   collision_dim_x: db 0x00
047D9D 00          0053*   collision_dim_y: db 0x00
047D9E             0054*   
047D9E             0055*   ; scratch variables
047D9E 00          0056*   x: db 0x00 ; 8-bit signed integer
047D9F 00          0057*   y: db 0x00 ; 8-bit signed integer
047DA0 00 00 00    0058*   x0: dl 0x000000 ; 16.8 signed fixed place
047DA3 00 00 00    0059*   y0: dl 0x000000 ; 16.8 signed fixed place
047DA6 00 00 00    0060*   incx1: dl 0x000000 ; 16.8 signed fixed place
047DA9 00 00 00    0061*   incy1: dl 0x000000 ; 16.8 signed fixed place
047DAC 00 00 00    0062*   incx2: dl 0x000000 ; 16.8 signed fixed place
047DAF 00 00 00    0063*   incy2: dl 0x000000 ; 16.8 signed fixed place
047DB2             0064*   
047DB2             0065*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
047DB2 00 00 00    0066*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
047DB5 00 00 00    0067*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
047DB8 00 00 00    0068*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
047DBB             0069*   
047DBB             0070*   table_init:
047DBB             0071*   ; clear the sprite table
047DBB AF          0072*       xor a ; write zeroes to sprite table
047DBC 21 67 98 04 0073*       ld hl,table_base ; address to copy from
047DC0 01 00 05 00 0074*       ld bc,table_end-table_base ; number of bytes to clear
047DC4 CD 5B 03 04 0075*       call clear_mem
047DC8             0076*   ; write sprite ids
047DC8 DD 21 67 98 0077*       ld ix,table_base
       04          
047DCD AF          0078*       xor a ; sprite id
047DCE 0E 00       0079*       ld c,0 ; sprite type
047DD0 06 14       0080*       ld b,table_num_records ; loop counter
047DD2             0081*   @loop:
047DD2 DD 77 00    0082*       ld (ix+sprite_id),a
047DD5 DD 71 16    0083*       ld (ix+sprite_type),c
047DD8 ED 32 40    0084*       lea ix,ix+table_record_size
047DDB 3C          0085*       inc a
047DDC 10 F4       0086*       djnz @loop
047DDE C9          0087*       ret
047DDF             0088*   ; end table_init
047DDF             0089*   
047DDF             0090*   ; deactivate the sprite with the given id
047DDF             0091*   ; inputs: iy set to sprite record
047DDF             0092*   ; outputs: nothing
047DDF             0093*   ; destroys: a,hl
047DDF             0094*   table_deactivate_sprite:
047DDF FD 7E 00    0095*       ld a,(iy+sprite_id) ; get spriteId
047DE2 CD 92 17 04 0096*       call vdu_sprite_select ; select sprite
047DE6 CD 16 18 04 0097*       call vdu_sprite_hide
047DEA FD CB 1D B6 0098*       res sprite_alive,(iy+sprite_collisions)
047DEE FD CB 1D BE 0099*       res sprite_just_died,(iy+sprite_collisions)
047DF2 C9          0100*       ret
047DF3             0101*   ; end table_deactivate_sprite
047DF3             0102*   
047DF3             0103*   sprites_init:
047DF3             0104*   ; initialize sprites
047DF3 CD C6 18 04 0105*   	call vdu_sprite_reset ; clear sprite data in vdp
047DF7 AF          0106*   	xor a ; loop counter / sprite id
047DF8             0107*   @sprite_loop:
047DF8 F5          0108*   	push af ; save loop counter / sprite id
047DF9 CD 92 17 04 0109*   	call vdu_sprite_select
047DFD 21 00 01 00 0110*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
047E01 CD E7 18 04 0111*   	call vdu_sprite_add_buff
047E05 F1          0112*   	pop af ; restore loop counter / sprite id
047E06 3C          0113*       inc a
047E07 FE 14       0114*       cp table_num_records
047E09 C2 F8 7D 04 0115*       jp nz,@sprite_loop
047E0D CD C6 17 04 0116*   	call vdu_sprite_activate
047E11             0117*   
047E11             0118*   ; define player sprite
047E11 3A 67 99 04 0119*   	ld a,(player_begin+sprite_id)
047E15 CD 92 17 04 0120*   	call vdu_sprite_select
047E19 CD A5 17 04 0121*   	call vdu_sprite_clear_frames
047E1D 21 76 01 00 0122*   	ld hl,BUF_SHIP_0L
047E21 01 03 00 00 0123*   	ld bc,3 ; three bitmaps for player ship
047E25             0124*   @sprite_player_loop:
047E25 C5          0125*   	push bc
047E26 E5          0126*   	push hl
047E27 CD E7 18 04 0127*   	call vdu_sprite_add_buff
047E2B E1          0128*   	pop hl
047E2C 23          0129*   	inc hl
047E2D C1          0130*   	pop bc
047E2E 10 F5       0131*   	djnz @sprite_player_loop
047E30             0132*   
047E30             0133*   ; define player weapon sprites
047E30 CD D5 7B 04 0134*       call init_player_laser
047E34             0135*   
047E34             0136*   ; define enemy sprites
047E34 CD E3 20 04 0137*       call init_enemy_seekers
047E38 CD 93 1F 04 0138*       call init_enemy_fireballs
047E3C             0139*   
047E3C             0140*   ; define explosion sprites
047E3C CD B5 21 04 0141*       call init_explosions
047E40 C9          0142*       ret
047E41             0143*   ; end sprites_init
047E41             0144*   
047E41             0145*   ; gets the next available sprite id for a particular sprite group
047E41             0146*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
047E41             0147*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047E41             0148*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047E41             0149*   ; destroys: a,b,c,hl,ix
047E41             0150*   table_get_next_id:
047E41             0151*   @loop:
047E41 DD CB 1D 76 0152*       bit sprite_alive,(ix+sprite_collisions)
047E45 28 07       0153*       jr z,@found
047E47 ED 32 40    0154*       lea ix,ix+table_record_size
047E4A 10 F5       0155*       djnz @loop
047E4C             0156*   @notfound:
047E4C AF          0157*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
047E4D C9          0158*       ret
047E4E             0159*   @found:
047E4E             0160*   ; return sprite id
047E4E DD 7E 00    0161*       ld a,(ix+sprite_id)
047E51 37          0162*       scf ; sets carry flag indicating we found a free sprite
047E52 C9          0163*       ret ; done
047E53             0164*   ; end table_get_next_id
047E53             0165*   
047E53             0166*   ; create a new sprite at the prescribed coordinates
047E53             0167*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
047E53             0168*   ;         ix = pointer to sprite group, a = number of records in sprite group
047E53             0169*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047E53             0170*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047E53             0171*   spawn_sprite_from_coords:
047E53 ED 43 8D 7E 0172*       ld (@sprite_x),bc ; store x-coordinate
       04          
047E58 ED 53 90 7E 0173*       ld (@sprite_y),de ; store y-coordinate
       04          
047E5D 47          0174*       ld b,a ; number of records in sprite group
047E5E E5          0175*       push hl ; back up pointer to new sprite defaults
047E5F CD 41 7E 04 0176*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047E63 E1          0177*       pop hl ; restore pointer to new sprite defaults
047E64 D0          0178*       ret nc ; no carry means no free sprite slots, so we go home
047E65             0179*   ; copy default settings to new sprite
047E65 DD E5       0180*       push ix ; back up pointer to new sprite record
047E67 ED 32 16    0181*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047E6A DD E5       0182*       push ix ; pointer to default sprite settings
047E6C D1          0183*       pop de ; address to copy to
047E6D 01 2A 00 00 0184*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047E71 ED B0       0185*       ldir ; copies defaults to new sprite record
047E73 DD E1       0186*       pop ix ; restore pointer to new sprite record
047E75             0187*   ; copy sprite position from existing sprite
047E75 2A 8D 7E 04 0188*       ld hl,(@sprite_x)
047E79 DD 2F 01    0189*       ld (ix+sprite_x),hl
047E7C 2A 90 7E 04 0190*       ld hl,(@sprite_y)
047E80 DD 2F 04    0191*       ld (ix+sprite_y),hl
047E83             0192*   ; return to caller
047E83 DD CB 16 FE 0193*       set 7,(ix+sprite_type) ; set just spawned flag
047E87 DD CB 1D F6 0194*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047E8B 37          0195*       scf ; set carry flag to indicate success
047E8C C9          0196*       ret
047E8D 00 00 00    0197*   @sprite_x: dl 0 ; new sprite x-coordinate
047E90 00 00 00    0198*   @sprite_y: dl 0 ; new sprite y-coordinate
047E93             0199*   ; end spawn_sprite_from_coords
047E93             0200*   
047E93             0201*   ; create a new sprite at the same location as an existing sprite
047E93             0202*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
047E93             0203*   ;         ix = pointer to sprite group, b = number of records in sprite group
047E93             0204*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047E93             0205*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047E93             0206*   spawn_sprite_from_sprite:
047E93 E5          0207*       push hl ; back up pointer to new sprite defaults
047E94 CD 41 7E 04 0208*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047E98 E1          0209*       pop hl ; restore pointer to new sprite defaults
047E99 D0          0210*       ret nc ; no carry means no free sprite slots, so we go home
047E9A             0211*   ; copy default settings to new sprite
047E9A DD E5       0212*       push ix ; back up pointer to new sprite record
047E9C ED 32 16    0213*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047E9F DD E5       0214*       push ix ; pointer to default sprite settings
047EA1 D1          0215*       pop de ; address to copy to
047EA2 01 2A 00 00 0216*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047EA6 ED B0       0217*       ldir ; copies defaults to new sprite record
047EA8 DD E1       0218*       pop ix ; restore pointer to new sprite record
047EAA             0219*   ; copy sprite position from existing sprite
047EAA FD 2A 96 7D 0220*       ld iy,(table_pointer) ; get existing sprite record
       04          
047EAF FD 27 01    0221*       ld hl,(iy+sprite_x)
047EB2 DD 2F 01    0222*       ld (ix+sprite_x),hl
047EB5 FD 27 04    0223*       ld hl,(iy+sprite_y)
047EB8 DD 2F 04    0224*       ld (ix+sprite_y),hl
047EBB             0225*   ; return to caller
047EBB DD CB 16 FE 0226*       set 7,(ix+sprite_type) ; set just spawned flag
047EBF DD CB 1D F6 0227*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047EC3 37          0228*       scf ; set carry flag to indicate success
047EC4 C9          0229*       ret
047EC5             0230*   ; end spawn_sprite_from_sprite
047EC5             0231*   
047EC5             0232*   ; call the behavior subroutines for a specified sprite group
047EC5             0233*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
047EC5             0234*   move_sprite_group:
047EC5 C5          0235*       push bc ; backup loop counter
047EC6 FD E5       0236*       push iy ; backup table pointer
047EC8             0237*   @move_loop:
047EC8 FD 22 96 7D 0238*       ld (table_pointer),iy ; update table pointer
       04          
047ECD C5          0239*       push bc ; backup loop counter
047ECE             0240*   ; check top bit of sprite_type to see if sprite is just spawned
047ECE FD CB 16 7E 0241*       bit 7,(iy+sprite_type)
047ED2 C2 07 7F 04 0242*       jp nz,@next_record ; if just spawned, skip to next record
047ED6             0243*   ; check sprite_just_died bit
047ED6 FD CB 1D 7E 0244*       bit sprite_just_died,(iy+sprite_collisions)
047EDA C2 3E 7F 04 0245*       jp nz,@sprite_died ; if just died, deactivate sprite
047EDE             0246*   ; check sprite_alive bit to see if sprite is active
047EDE FD CB 1D 76 0247*       bit sprite_alive,(iy+sprite_collisions)
047EE2 CA 07 7F 04 0248*       jp z,@next_record ; ... skip to next record
047EE6             0249*   ; otherwise move the sprite
047EE6 FD 27 1A    0250*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
047EE9             0251*       CALL_HL ; run the behavior subroutine
047EE9 01 EF 7E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047EED C5          0002*M1     push bc ; which constitutes the return address
047EEE E9          0003*M1     jp (hl) ; Jump to the address in HL
047EEF FD 7E 00    0252*       ld a,(iy+sprite_id) ; get spriteId
047EF2 CD 92 17 04 0253*       call vdu_sprite_select ; select sprite
047EF6 FD 7E 28    0254*       ld a,(iy+sprite_frame)
047EF9 CD F5 17 04 0255*       call vdu_sprite_select_frame
047EFD FD 07 01    0256*       ld bc,(iy+sprite_x)
047F00 FD 17 04    0257*       ld de,(iy+sprite_y)
047F03 CD 5E 18 04 0258*       call vdu_sprite_move_abs168
047F07             0259*   ; fall through to @next_record
047F07             0260*   @next_record:
047F07 ED 33 40    0261*       lea iy,iy+table_record_size
047F0A AF          0262*       xor a ; clears carry flag
047F0B 32 99 7D 04 0263*       ld (sprite_screen_edge),a ; clear screen edge collision flag
047F0F C1          0264*       pop bc ; get back our loop counter
047F10 10 B6       0265*       djnz @move_loop ; loop until we've checked all the records
047F12             0266*   ; reset all just spawned flags
047F12 FD E1       0267*       pop iy ; get back table pointer
047F14 C1          0268*       pop bc ; get back loop counter
047F15             0269*   @reset_just_spawned:
047F15 C5          0270*       push bc ; back up loop counter
047F16 FD CB 16 7E 0271*       bit 7,(iy+sprite_type) ; check if just spawned
047F1A CA 37 7F 04 0272*       jp z,@F
047F1E FD CB 16 BE 0273*       res 7,(iy+sprite_type) ; clear just spawned flag
047F22 FD 7E 00    0274*       ld a,(iy+sprite_id)
047F25 CD 92 17 04 0275*       call vdu_sprite_select
047F29 FD 07 01    0276*       ld bc,(iy+sprite_x)
047F2C FD 17 04    0277*       ld de,(iy+sprite_y)
047F2F CD 5E 18 04 0278*       call vdu_sprite_move_abs168
047F33 CD 08 18 04 0279*       call vdu_sprite_show
047F37             0280*   @@:
047F37 ED 33 40    0281*       lea iy,iy+table_record_size
047F3A C1          0282*       pop bc ; get back loop counter
047F3B 10 D8       0283*       djnz @reset_just_spawned
047F3D C9          0284*       ret
047F3E             0285*   @sprite_died:
047F3E CD DF 7D 04 0286*       call table_deactivate_sprite
047F42 C3 07 7F 04 0287*       jp @next_record
047F46             0288*   ; end move_sprite_group
047F46             0289*   
047F46             0290*   ; update behavior subroutines for a specified sprite group
047F46             0291*   ; inputs: hl = pointer to move program, iy = pointer to sprite group, b = number of records in sprite group
047F46             0292*   change_sprite_group_move_program:
047F46             0293*   @update_loop:
047F46             0294*   ; check sprite_alive bit to see if sprite is active
047F46 FD CB 1D 76 0295*       bit sprite_alive,(iy+sprite_collisions)
047F4A CA 55 7F 04 0296*       jp z,@next_record ; ... skip to next record
047F4E             0297*   ; otherwise load the behavior subroutine address
047F4E FD 2F 1A    0298*       ld (iy+sprite_move_program),hl
047F51             0299*    ; clear just spawned flag
047F51 FD CB 16 BE 0300*       res 7,(iy+sprite_type)
047F55             0301*   ; fall through to @next_record
047F55             0302*   @next_record:
047F55 ED 33 40    0303*       lea iy,iy+table_record_size
047F58 10 EC       0304*       djnz @update_loop ; loop until we've checked all the records
047F5A C9          0305*       ret
047F5B             0306*   ; end change_sprite_group_move_program
047F5B             0307*   
047F5B             0308*   ; compute a sprite's new position based on its component x,y velocities
047F5B             0309*   ; with screen boundary checking and update its sprite table record accordingly
047F5B             0310*   ; inputs: table_pointer set to sprite record
047F5B             0311*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
047F5B             0312*   ; destroys: everything
047F5B             0313*   ; note: actual rendering of sprite must be handled by caller
047F5B             0314*   move_sprite:
047F5B FD 2A 96 7D 0315*       ld iy,(table_pointer)
       04          
047F60             0316*   ; x-axis movement
047F60 FD 27 01    0317*       ld hl,(iy+sprite_x)
047F63 FD 17 07    0318*       ld de,(iy+sprite_xvel)
047F66 19          0319*       add hl,de
047F67 FD 2F 01    0320*       ld (iy+sprite_x),hl
047F6A             0321*   ; y-axis movement
047F6A FD 27 04    0322*       ld hl,(iy+sprite_y)
047F6D FD 17 0A    0323*       ld de,(iy+sprite_yvel)
047F70 19          0324*       add hl,de
047F71 FD 2F 04    0325*       ld (iy+sprite_y),hl
047F74             0326*   ; detect screen edge collisions
047F74 AF          0327*       xor a ; reset screen edge collision flag and clear carry
047F75 32 99 7D 04 0328*       ld (sprite_screen_edge),a
047F79             0329*   ; y-axis first since we already have it in hl
047F79 11 00 00 00 0330*       ld de,-sprite_top*256
047F7D ED 5A       0331*       adc hl,de
047F7F FA A9 7F 04 0332*       jp m,@top
047F83 ED 52       0333*       sbc hl,de ; hl back to original value
047F85 11 00 C0 FE 0334*       ld de,-sprite_bottom*256
047F89 ED 5A       0335*       adc hl,de
047F8B F2 B3 7F 04 0336*       jp p,@bottom
047F8F             0337*   @xaxis:
047F8F FD 27 01    0338*       ld hl,(iy+sprite_x)
047F92 11 00 00 00 0339*       ld de,-sprite_left*256
047F96 ED 5A       0340*       adc hl,de
047F98 FA CE 7F 04 0341*       jp m,@left
047F9C ED 52       0342*       sbc hl,de ; hl back to original value
047F9E 11 00 10 FF 0343*       ld de,-sprite_right*256
047FA2 ED 5A       0344*       adc hl,de
047FA4 F2 DC 7F 04 0345*       jp p,@right
047FA8             0346*   ; no edge collisions so go home
047FA8 C9          0347*       ret
047FA9             0348*   @top:
047FA9 3E 08       0349*       ld a,collide_top
047FAB 21 00 00 00 0350*       ld hl,sprite_top*256
047FAF C3 B9 7F 04 0351*       jp @collide_y
047FB3             0352*   @bottom:
047FB3 3E 04       0353*       ld a,collide_bottom
047FB5 21 00 40 01 0354*       ld hl,sprite_bottom*256
047FB9             0355*   @collide_y:
047FB9 32 99 7D 04 0356*       ld (sprite_screen_edge),a
047FBD FD 2F 04    0357*       ld (iy+sprite_y),hl
047FC0             0358*   ; reverse y-axis velocity
047FC0 FD 27 0A    0359*       ld hl,(iy+sprite_yvel)
047FC3 CD 7C 04 04 0360*       call neg_hlu
047FC7 FD 2F 0A    0361*       ld (iy+sprite_yvel),hl
047FCA             0362*   ; go check for x-axis collisions
047FCA C3 8F 7F 04 0363*       jp @xaxis
047FCE             0364*   @left:
047FCE 3A 99 7D 04 0365*       ld a,(sprite_screen_edge)
047FD2 F6 02       0366*       or a,collide_left
047FD4 21 00 00 00 0367*       ld hl,sprite_left*256
047FD8 C3 E6 7F 04 0368*       jp @collide_x
047FDC             0369*   @right:
047FDC 3A 99 7D 04 0370*       ld a,(sprite_screen_edge)
047FE0 F6 01       0371*       or a,collide_right
047FE2 21 00 F0 00 0372*       ld hl,sprite_right*256
047FE6             0373*   @collide_x:
047FE6 32 99 7D 04 0374*       ld (sprite_screen_edge),a
047FEA FD 2F 01    0375*       ld (iy+sprite_x),hl
047FED             0376*   ; reverse x-axis velocity
047FED FD 27 07    0377*       ld hl,(iy+sprite_xvel)
047FF0 CD 7C 04 04 0378*       call neg_hlu
047FF4 FD 2F 07    0379*       ld (iy+sprite_xvel),hl
047FF7             0380*   ; final collision flag to a and return
047FF7 3A 99 7D 04 0381*       ld a,(sprite_screen_edge)
047FFB C9          0382*       ret
047FFC             0383*   ; end move_sprite
047FFC             0384*   
047FFC             0385*   sprite_compute_velocities:
047FFC FD 27 10    0386*       ld hl,(iy+sprite_heading)
047FFF FD 17 0D    0387*       ld de,(iy+sprite_vel)
048002 CD F0 06 04 0388*       call polar_to_cartesian
048006 FD 2A 96 7D 0389*       ld iy,(table_pointer)
       04          
04800B FD 0F 07    0390*       ld (iy+sprite_xvel),bc ; save x-velocity component
04800E FD 1F 0A    0391*       ld (iy+sprite_yvel),de ; save y-velocity component
048011 C9          0392*       ret
048012             0393*   ; end sprite_compute_velocities
048012             0394*   
048012             0395*   ; compute animation frame based on sprite_animation and sprite_heading
048012             0396*   ; inputs: table_pointer set to sprite record
048012             0397*   ; outputs: a, sprite_frame set to animation frame
048012             0398*   ; destroys: a,hl
048012             0399*   sprite_frame_heading_animation:
048012 FD 7E 11    0400*       ld a,(iy+sprite_heading+1) ; we want the integer portion
048015 CB 3F       0401*       srl a ; divide integer portion by 8
048017 CB 3F       0402*       srl a
048019 CB 3F       0403*       srl a
04801B FD 66 22    0404*       ld h,(iy+sprite_animation)
04801E 2E 20       0405*       ld l,32 ; 32 orientation frames per animation
048020 ED 6C       0406*       mlt hl ; hl = offset from base animation
048022 85          0407*       add a,l ; modulo256 since sprite_frame is only 1 byte
048023 FD 77 28    0408*       ld (iy+sprite_frame),a
048026 C9          0409*       ret
048027             0410*   ; end sprite_frame_heading_animation
048027             0411*   
048027             0412*   ; compute animation frame based on sprite_heading
048027             0413*   ; inputs: table_pointer set to sprite record
048027             0414*   ; outputs: a, sprite_frame set to animation frame
048027             0415*   ; destroys: a,hl
048027             0416*   sprite_frame_heading:
048027 FD 7E 11    0417*       ld a,(iy+sprite_heading+1) ; we want the integer portion
04802A CB 3F       0418*       srl a ; divide integer portion by 8
04802C CB 3F       0419*       srl a
04802E CB 3F       0420*       srl a
048030 FD 77 28    0421*       ld (iy+sprite_frame),a
048033 C9          0422*       ret
048034             0423*   ; end sprite_frame_heading
048034             0424*   
048034             0425*   ; load a sprite with animation bitmaps
048034             0426*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
048034             0427*   sprite_load_frames:
048034             0428*   ; back up input parameters
048034 E5          0429*       push hl ; base bufferId
048035 C5          0430*       push bc ; bc = number of frames
048036 CD A5 17 04 0431*       call vdu_sprite_clear_frames
04803A C1          0432*       pop bc ; bc = number of frames
04803B E1          0433*       pop hl ; = base bufferId
04803C             0434*   @load_frames:
04803C C5          0435*       push bc ; back up loop counter
04803D E5          0436*       push hl ; back up base bufferId
04803E CD E7 18 04 0437*       call vdu_sprite_add_buff
048042 E1          0438*       pop hl ; restore base bufferId
048043 23          0439*       inc hl ; bump it to the next frame
048044             0440*   ; decrement loop counter
048044 C1          0441*       pop bc
048045 0B          0442*       dec bc
048046 79          0443*       ld a,c
048047 B7          0444*       or a
048048 C2 3C 80 04 0445*       jp nz,@load_frames
04804C 78          0446*       ld a,b
04804D B7          0447*       or a
04804E C2 3C 80 04 0448*       jp nz,@load_frames
048052 C9          0449*       ret
048053             0450*   ; end sprite_load_frames
048053             0067        include "state.inc"
048053             0001*   ; Game state variables
048053 61 80 04    0002*   game_state:  dl game_main_menu
048056             0003*   
048056             0004*   do_game:
048056 2A 53 80 04 0005*       ld hl,(game_state)   ; Load the current game state
04805A             0006*       CALL_HL                ; Call the corresponding state handler
04805A 01 60 80 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04805E C5          0002*M1     push bc ; which constitutes the return address
04805F E9          0003*M1     jp (hl) ; Jump to the address in HL
048060 C9          0007*       ret
048061             0008*   
048061             0009*   ; ========================
048061             0010*   ; Main Game States
048061             0011*   ; ========================
048061             0012*   
048061             0013*   game_main_menu:
048061             0014*       ; Handle main menu options
048061             0015*       ; Example: Check input for "Start Game"
048061 CD 1B 81 04 0016*       call check_input_menu
048065 C2 45 81 04 0017*       jp nz, game_init ; Start game on selection
048069 C9          0018*       ret
04806A             0019*   
04806A             0020*   
04806A             0021*   
04806A             0022*   game_paused:
04806A             0023*       ; Pause menu logic
04806A CD 1E 81 04 0024*       call check_input_pause
04806E C2 C1 82 04 0025*       jp nz, game_playing ; Resume game
048072 CA 61 80 04 0026*       jp z, game_main_menu ; Exit to main menu
048076 C9          0027*       ret
048077             0028*   
048077             0029*   game_level_transition:
048077             0030*       ; Handle level transitions
048077 CD 1F 81 04 0031*       call load_next_level
04807B 21 C1 82 04 0032*       ld hl, game_playing
04807F 22 53 80 04 0033*       ld (game_state), hl
048083 C9          0034*       ret
048084             0035*   
048084             0036*   game_over:
048084             0037*   ; set text colors
048084 3E 90       0038*       ld a,16+128 ; darkest blue
048086 CD D1 12 04 0039*       call vdu_colour_text
04808A 3E 3A       0040*       ld a,58 ; dark orange
04808C CD D1 12 04 0041*       call vdu_colour_text
048090             0042*   ; print game over and prompt
048090 0E 1B       0043*       ld c,27 ; x
048092 06 10       0044*       ld b,16 ; y
048094 CD 8C 12 04 0045*       call vdu_move_cursor
048098 CD 5C 00 04 0046*       call printInline
04809C 47 41 4D 45 0047*       asciz "GAME OVER!"
       20 4F 56 45 
       52 21 00    
0480A7 0E 13       0048*       ld c,19 ; x
0480A9 06 11       0049*       ld b,17 ; y
0480AB CD 8C 12 04 0050*       call vdu_move_cursor
0480AF CD 5C 00 04 0051*       call printInline
0480B3 50 72 65 73 0052*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0480CE 3E 20       0053*       ld a,%00100000 ; wait just a tick before polling for input
0480D0 CD 35 12 04 0054*       call multiPurposeDelay
0480D4 CD 56 03 04 0055*       call waitKeypress
0480D8             0056*   ; initialize a new game
0480D8 21 45 81 04 0057*       ld hl,game_init
0480DC 22 53 80 04 0058*       ld (game_state),hl
0480E0 C9          0059*       ret
0480E1             0060*   
0480E1             0061*   game_victory:
0480E1             0062*       ; Display victory screen
0480E1 CD 21 81 04 0063*       call display_victory
0480E5 C2 61 80 04 0064*       jp nz, game_main_menu ; Return to main menu on input
0480E9 C9          0065*       ret
0480EA             0066*   
0480EA             0067*   ; ========================
0480EA             0068*   ; Supporting States
0480EA             0069*   ; ========================
0480EA             0070*   
0480EA             0071*   game_loading:
0480EA             0072*       ; Show loading screen while preparing assets
0480EA CD 22 81 04 0073*       call load_resources
0480EE 21 45 81 04 0074*       ld hl, game_init
0480F2 22 53 80 04 0075*       ld (game_state), hl
0480F6 C9          0076*       ret
0480F7             0077*   
0480F7             0078*   game_cutscene:
0480F7             0079*       ; Play a non-interactive cutscene
0480F7 CD 23 81 04 0080*       call play_cutscene
0480FB C2 C1 82 04 0081*       jp nz, game_playing ; Return to gameplay after cutscene
0480FF C9          0082*       ret
048100             0083*   
048100             0084*   game_inventory:
048100             0085*       ; Open inventory or shop
048100 CD 24 81 04 0086*       call display_inventory
048104 C2 C1 82 04 0087*       jp nz, game_playing ; Return to gameplay after inventory close
048108 C9          0088*       ret
048109             0089*   
048109             0090*   game_map:
048109             0091*       ; Display map or quest
048109 CD 25 81 04 0092*       call display_map
04810D C2 C1 82 04 0093*       jp nz, game_playing ; Return to gameplay after map close
048111 C9          0094*       ret
048112             0095*   
048112             0096*   game_exit:
048112             0097*       ; Handle exit logic
048112 CD 26 81 04 0098*       call save_game
048116 C3 27 81 04 0099*       jp exit_game         ; Safely shut down
04811A C9          0100*       ret
04811B             0101*   
04811B             0102*   ; ========================
04811B             0103*   ; Sub-state branching (Example for player state)
04811B             0104*   ; ========================
04811B             0105*   
04811B             0106*   
04811B             0107*   
04811B             0108*   
04811B             0109*   check_input_menu:
04811B C9          0110*       ret
04811C             0111*   
04811C             0112*   update_game_world:
04811C C9          0113*       ret
04811D             0114*   
04811D             0115*   check_game_events:
04811D C9          0116*       ret
04811E             0117*   
04811E             0118*   check_input_pause:
04811E C9          0119*       ret
04811F             0120*   
04811F             0121*   load_next_level:
04811F C9          0122*       ret
048120             0123*   
048120             0124*   display_game_over:
048120 C9          0125*       ret
048121             0126*   
048121             0127*   display_victory:
048121 C9          0128*       ret
048122             0129*   
048122             0130*   load_resources:
048122 C9          0131*       ret
048123             0132*   
048123             0133*   play_cutscene:
048123 C9          0134*       ret
048124             0135*   
048124             0136*   display_inventory:
048124 C9          0137*       ret
048125             0138*   
048125             0139*   display_map:
048125 C9          0140*       ret
048126             0141*   
048126             0142*   save_game:
048126 C9          0143*       ret
048127             0144*   
048127             0145*   exit_game:
048127 C9          0146*       ret
048128             0147*   
048128             0068        include "state_game_init.inc"
048128             0001*   ; hello_world: asciz "Welcome to Purple Nurples!"
048128             0002*   ; loading_time: asciz "Loading time:"
048128 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
048143 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
048144 00          0005*   original_screen_mode: db 0
048145             0006*   
048145             0007*   game_init:
048145             0008*   ; check whether assets are loaded
048145 3A 43 81 04 0009*       ld a,(game_assets_loaded)
048149 B7          0010*       or a
04814A C2 55 82 04 0011*       jp nz,@assets_loaded
04814E             0012*   ; get current screen mode and save it so we can return to it on exit
04814E CD 7A 13 04 0013*       call vdu_get_screen_mode
048152 32 44 81 04 0014*       ld (original_screen_mode),a
048156             0015*   ; print ascii art splash screen
048156 CD A0 12 04 0016*       call vdu_cls
04815A CD 5C 00 04 0017*       call printInline
04815E 57 65 6C 63 0018*       asciz "Welcome to\r\n"
       6F 6D 65 20 
       74 6F 0D 0A 
       00          
04816B 21 FC 18 04 0019*       ld hl,purple_nurples_ascii
04816F CD 63 00 04 0020*       call printString
048173 CD 5C 00 04 0021*       call printInline
048177 4C 6F 61 64 0022*       asciz "Loading UI...\r\n"
       69 6E 67 20 
       55 49 2E 2E 
       2E 0D 0A 00 
048187             0023*   ; clear all buffers
048187 CD 87 14 04 0024*       call vdu_clear_all_buffers
04818B             0025*   ; load fonts
04818B CD A1 0F 04 0026*   	call fonts_load
04818F             0027*   ; select font
04818F 21 07 FA 00 0028*       ld hl,Lat38_VGA8_8x8
048193 3E 01       0029*       ld a,1 ; flags
048195 CD 3E 16 04 0030*       call vdu_font_select
048199             0031*   ; load UI images
048199 CD 9C 10 04 0032*       call load_ui_images
04819D             0033*   ; set up the display
04819D 3E 08       0034*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
04819F CD 69 13 04 0035*       call vdu_set_screen_mode
0481A3 AF          0036*       xor a
0481A4 CD 82 13 04 0037*       call vdu_set_scaling
0481A8             0038*   ; ; enable additional audio channels
0481A8             0039*   ; 	call vdu_enable_channels
0481A8             0040*   ; set text background color
0481A8 3E 9A       0041*       ld a,26+128 ; violet
0481AA CD D1 12 04 0042*       call vdu_colour_text
0481AE             0043*   ; set text foreground color
0481AE 3E 2F       0044*       ld a,47 ; aaaaff lavenderish
0481B0 CD D1 12 04 0045*       call vdu_colour_text
0481B4             0046*   ; set gfx bg color
0481B4 AF          0047*       xor a ; plotting mode 0
0481B5 3E 9A       0048*       ld a,26+128 ; violet
0481B7 CD E2 12 04 0049*       call vdu_gcol
0481BB CD A0 12 04 0050*       call vdu_cls
0481BF             0051*   ; set the cursor off
0481BF CD 68 12 04 0052*       call vdu_cursor_off
0481C3             0053*   ; VDU 28, left, bottom, right, top: Set text viewport **
0481C3             0054*   ; MIND THE LITTLE-ENDIANESS
0481C3             0055*   ; inputs: c=left,b=bottom,e=right,d=top
0481C3 0E 00       0056*       ld c,0 ; left
0481C5 16 00       0057*       ld d,0 ; top
0481C7 1E 27       0058*       ld e,39 ; right
0481C9 06 00       0059*       ld b,0; bottom
0481CB CD F9 12 04 0060*       call vdu_set_txt_viewport
0481CF             0061*   ; load background and sprite images
0481CF CD DB 0F 04 0062*       call img_load_init
0481D3 CD D1 10 04 0063*       call load_backgrounds
0481D7 CD AF 10 04 0064*       call load_sprite_images
0481DB             0065*   ; load tileset_ptrs
0481DB CD C0 10 04 0066*       call load_tilesets
0481DF             0067*   ; ; load sound effects ; TODO
0481DF             0068*   ; 	ld bc,SFX_num_buffers
0481DF             0069*   ; 	ld hl,SFX_buffer_id_lut
0481DF             0070*   ; 	ld (cur_buffer_id_lut),hl
0481DF             0071*   ; 	ld hl,SFX_load_routines_table
0481DF             0072*   ; 	ld (cur_load_jump_table),hl
0481DF             0073*   ; 	call sfx_load_main
0481DF             0074*   ; print loading complete message and wait for user keypress
0481DF 3E 01       0075*       ld a,1
0481E1 32 43 81 04 0076*       ld (game_assets_loaded),a
0481E5 CD A0 12 04 0077*       call vdu_cls
0481E9 CD 5C 00 04 0078*       call printInline
0481ED 50 72 65 73 0079*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
048208 CD A5 12 04 0080*       call vdu_flip
04820C CD 56 03 04 0081*       call waitKeypress
048210             0082*   ; set up display for gameplay
048210 3E 14       0083*       ld a,20
048212 CD 69 13 04 0084*       call vdu_set_screen_mode
048216 AF          0085*       xor a
048217 CD 82 13 04 0086*       call vdu_set_scaling
04821B CD 68 12 04 0087*       call vdu_cursor_off
04821F             0088*   ; select font
04821F 21 07 FA 00 0089*       ld hl,Lat38_VGA8_8x8
048223 3E 01       0090*       ld a,1 ; flags
048225 CD 3E 16 04 0091*       call vdu_font_select
048229             0092*   ; plot bezel art
048229 21 06 00 00 0093*       ld hl,BUF_BEZEL_L
04822D CD 95 13 04 0094*       call vdu_buff_select
048231 01 00 00 00 0095*       ld bc,0
048235 11 00 00 00 0096*       ld de,0
048239 CD F1 16 04 0097*       call vdu_plot_bmp
04823D 21 07 00 00 0098*       ld hl,BUF_BEZEL_R
048241 CD 95 13 04 0099*       call vdu_buff_select
048245 01 80 01 00 0100*       ld bc,384
048249 11 00 00 00 0101*       ld de,0
04824D CD F1 16 04 0102*       call vdu_plot_bmp
048251             0103*   ; draw player cockpit
048251 CD 74 78 04 0104*       call draw_player_cockpit
048255             0105*   @assets_loaded:
048255             0106*   ; set gfx origin and viewport to playing field window
048255 CD 73 7D 04 0107*       call set_gfx_playing_field
048259 CD 51 65 04 0108*       call init_bg ; plot the starry background
04825D             0109*   ; VDU 28, left, bottom, right, top: Set text viewport **
04825D 0E 00       0110*       ld c,0 ; left
04825F 16 00       0111*       ld d,0 ; top
048261 1E 3E       0112*       ld e,62 ; right
048263 06 30       0113*       ld b,48; bottom
048265 CD F9 12 04 0114*       call vdu_set_txt_viewport
048269             0115*   ; initialize the global timestamp
048269 CD DC 11 04 0116*       call timestamp_tick
04826D             0117*   ; reset the sprite table
04826D CD BB 7D 04 0118*       call table_init
048271 21 67 98 04 0119*       ld hl,table_base
048275 22 96 7D 04 0120*       ld (table_pointer),hl
048279             0121*   ; initialize sprites and active tiles table
048279 CD F3 7D 04 0122*       call sprites_init
04827D CD BB 7D 04 0123*       call table_init
048281 CD 19 87 04 0124*       call tile_table_init
048285             0125*   ; initialize the first level
048285 3E 00       0126*       ld a,tiles_dg
048287 CD 9C 64 04 0127*       call init_tileset
04828B             0128*   ; initialize player
04828B 21 00 00 00 0129*       ld hl,0
04828F 22 D5 7C 04 0130*       ld (player_score),hl
048293 2B          0131*       dec hl ; anything but zero so print_score will update
048294 22 D8 7C 04 0132*       ld (player_score_last),hl
048298 3A 28 76 04 0133*       ld a,(player_ships_max)
04829C 32 27 76 04 0134*       ld (player_ships),a
0482A0 CD 29 76 04 0135*       call draw_player_ships
0482A4 CD 84 76 04 0136*       call player_init
0482A8             0137*   ; set the game state to playing
0482A8 21 C1 82 04 0138*       ld hl,game_playing
0482AC 22 53 80 04 0139*       ld (game_state), hl
0482B0             0140*   ; set game playing substates
0482B0 21 08 77 04 0141*       ld hl,player_alive
0482B4 22 24 76 04 0142*       ld (player_state), hl
0482B8 21 ED 1E 04 0143*       ld hl,enemies_alive
0482BC 22 DF 1E 04 0144*       ld (enemies_state), hl
0482C0             0145*   ; done initializing
0482C0 C9          0146*       ret
0482C1             0147*   ; end game_init
0482C1             0069        include "state_game_playing.inc"
0482C1             0001*   ; main game state
0482C1             0002*   game_playing:
0482C1             0003*   ; Main gameplay loop
0482C1             0004*   
0482C1             0005*   ; plot tiles
0482C1 CD 8F 88 04 0006*       call tiles_plot
0482C5             0007*   
0482C5             0008*   ; set gfx viewport to playing field window
0482C5 CD 73 7D 04 0009*       call set_gfx_playing_field
0482C9             0010*   
0482C9             0011*   ; process movement and collisions
0482C9 CD 79 76 04 0012*       call do_player
0482CD CD E2 1E 04 0013*       call do_enemies
0482D1 CD A9 21 04 0014*       call move_explosions
0482D5 CD FF 89 04 0015*       call move_tiles
0482D9             0016*   
0482D9             0017*   ; update UI
0482D9 01 00 00 00 0018*       ld bc,0
0482DD 11 00 00 00 0019*       ld de,0
0482E1 CD 25 13 04 0020*       call vdu_set_gfx_origin
0482E5 CD EF 7C 04 0021*       call print_score
0482E9 CD 5B 7D 04 0022*       call draw_shields
0482ED CD B9 7C 04 0023*       call draw_laser
0482F1 CD A3 7A 04 0024*       call draw_fuel
0482F5 C9          0025*       ret
0482F6             0026*   
0482F6             0070        include "targeting.inc"
0482F6             0001*   ; compute orientation to player
0482F6             0002*   ; based on relative positions
0482F6             0003*   ; returns: uh.l 16.8 fixed angle256 to player
0482F6             0004*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
0482F6             0005*   ;    representing delta-x/y *to* target respectively
0482F6             0006*   ; inputs: iy pointed at sprite record
0482F6             0007*   ; destroys: everything except iy (sprite record pointer)
0482F6             0008*   orientation_to_player:
0482F6 DD 21 67 99 0009*       ld ix,player_begin
       04          
0482FB             0010*   ; compute dx
0482FB DD 27 01    0011*       ld hl,(ix+sprite_x)
0482FE FD 17 01    0012*       ld de,(iy+sprite_x)
048301 B7          0013*       or a ; clear carry
048302 ED 52       0014*       sbc hl,de ; dx
048304 E5          0015*       push hl ; save dx
048305             0016*   ; compute dy
048305 DD 27 04    0017*       ld hl,(ix+sprite_y)
048308 FD 17 04    0018*       ld de,(iy+sprite_y)
04830B B7          0019*       or a ; clear carry
04830C ED 52       0020*       sbc hl,de ; dy
04830E EB          0021*       ex de,hl ; de = dy
04830F             0022*   ; compute angle to player
04830F C1          0023*       pop bc ; dx (was hl)
048310 C5          0024*       push bc ; save dx
048311 D5          0025*       push de ; save dy
048312 CD EA 07 04 0026*       call atan2_168fast ; uh.l = angle to player
048316 3E E0       0027*       ld a,%11100000
048318 A5          0028*       and l ; round angle to nearest 32th of a circle
048319 6F          0029*       ld l,a
04831A 22 6B 83 04 0030*       ld (Bearing_t),hl ; return angle to player
04831E D1          0031*       pop de ; restore dy
04831F C1          0032*       pop bc ; restore dx
048320 C9          0033*       ret
048321             0034*   ; end orientation_to_player
048321             0035*   
048321             0036*   ; compute orientation to player
048321             0037*   ; based on relative positions
048321             0038*   ; returns: uh.l 16.8 fixed angle256 to player
048321             0039*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
048321             0040*   ;    representing delta-x/y *to* target respectively
048321             0041*   ; inputs: iy pointed at tile record
048321             0042*   ; destroys: everything except iy (tile record pointer)
048321             0043*   tile_orientation_to_player:
048321 DD 21 67 99 0044*       ld ix,player_begin
       04          
048326             0045*   ; compute dx
048326 DD 27 01    0046*       ld hl,(ix+sprite_x)
048329 FD 17 01    0047*       ld de,(iy+tile_x)
04832C B7          0048*       or a ; clear carry
04832D ED 52       0049*       sbc hl,de ; dx
04832F E5          0050*       push hl ; save dx
048330             0051*   ; compute dy
048330 DD 27 04    0052*       ld hl,(ix+sprite_y)
048333 FD 17 04    0053*       ld de,(iy+tile_y)
048336 B7          0054*       or a ; clear carry
048337 ED 52       0055*       sbc hl,de ; dy
048339 EB          0056*       ex de,hl ; de = dy
04833A             0057*   ; compute angle to player
04833A C1          0058*       pop bc ; dx (was hl)
04833B CD EA 07 04 0059*       call atan2_168fast ; uh.l = angle to player
04833F 3E E0       0060*       ld a,%11100000
048341 A5          0061*       and l ; round angle to nearest 32th of a circle
048342 6F          0062*       ld l,a
048343 22 6B 83 04 0063*       ld (Bearing_t),hl
048347 C9          0064*       ret
048348             0065*   ; end tile_orientation_to_player
048348             0066*   
048348             0067*   ; compute orientation to coordinate
048348             0068*   ; based on relative positions
048348             0069*   ; returns: uh.l 16.8 fixed angle256 to coordinate
048348             0070*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
048348             0071*   ;    representing delta-x/y *to* target respectively
048348             0072*   ; inputs: iy pointed at sprite record, ub.c,ud.e are target x,y coordinates
048348             0073*   ; destroys: everything except iy (sprite record pointer)
048348             0074*   bearing_to_coord:
048348             0075*   ; compute dx
048348 C5          0076*       push bc
048349 E1          0077*       pop hl
04834A FD 07 01    0078*       ld bc,(iy+sprite_x)
04834D B7          0079*       or a ; clear carry
04834E ED 42       0080*       sbc hl,bc ; dx
048350 E5          0081*       push hl ; save dx
048351             0082*   ; compute dy
048351 EB          0083*       ex de,hl
048352 FD 17 04    0084*       ld de,(iy+sprite_y)
048355 B7          0085*       or a ; clear carry
048356 ED 52       0086*       sbc hl,de ; dy
048358 EB          0087*       ex de,hl ; de = dy
048359             0088*   ; compute angle to coordinate
048359 C1          0089*       pop bc ; dx (was hl)
04835A C5          0090*       push bc ; save dx
04835B D5          0091*       push de ; save dy
04835C CD EA 07 04 0092*       call atan2_168fast ; uh.l = angle to coordinate
048360 3E E0       0093*       ld a,%11100000
048362 A5          0094*       and l ; round angle to nearest 32th of a circle
048363 6F          0095*       ld l,a
048364 22 6B 83 04 0096*       ld (Bearing_t),hl ; return angle to coordinate
048368 D1          0097*       pop de ; restore dy
048369 C1          0098*       pop bc ; restore dx
04836A C9          0099*       ret
04836B             0100*   ; end bearing_to_coord
04836B             0101*   
04836B             0102*   ; targeting_computer variables fixed 16.8 format
04836B 00 00 00    0103*   Bearing_t: dl 0x000000 ; angle to target
04836E 00 00 00    0104*   Heading_t: dl 0x000000 ; angle of target motion
048371 00 00 00    0105*   Vp: dl 0x000000 ; velocity of projectile
048374 00 00 00    0106*   Vp_x: dl 0x000000 ; x component of projectile velocity
048377 00 00 00    0107*   Vp_y: dl 0x000000 ; y component of projectile velocity
04837A 00 00 00    0108*   Vt: dl 0x000000 ; velocity of target
04837D 00 00 00    0109*   Vt_x: dl 0x000000 ; x component of target velocity
048380 00 00 00    0110*   Vt_y: dl 0x000000 ; y component of target velocity
048383 00 00 00    0111*   Heading_p: dl 0x000000 ; angle of projectile motion
048386 00 00 00    0112*   lead_angle: dl 0x000000 ; lead angle
048389             0113*   
048389             0114*   ; Inputs:   Vp velocity of projectile set,
048389             0115*   ;           iy pointed to sprite record,
048389             0116*   ;           player position and velocities correctly set
048389             0117*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
048389             0118*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
048389             0119*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
048389             0120*   targeting_computer:
048389 DD 21 67 99 0121*       ld ix,player_begin
       04          
04838E             0122*   ; ; compute target velocity from x,y component velocities
04838E             0123*   ;     ld bc,(ix+sprite_xvel)
04838E             0124*   ;     ld de,(ix+sprite_yvel)
04838E             0125*   ;     ld hl,-1*256 ; account for vertical ground movement
04838E             0126*   ;     add hl,de
04838E             0127*   ;     ex de,hl ; ud.e = player_yvel-1
04838E             0128*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
04838E             0129*   ;     ld (Heading_t),hl ; PASSES
04838E             0130*   ;     ld (Vt),de ; PASSES
04838E             0131*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
04838E             0132*   ; ; compute Heading_t-Bearing_t PASSES
04838E             0133*   ;     ld de,(Bearing_t)
04838E             0134*   ;     and a ; clear carry
04838E             0135*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
04838E             0136*   ; ; compute sin(Heading_t-Bearing_t)
04838E             0137*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
04838E             0138*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
04838E             0139*   ;     ld de,(Vt)
04838E             0140*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
04838E             0141*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
04838E             0142*   ;     ld de,(Vp)
04838E             0143*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
04838E             0144*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
04838E             0145*   ; ; answer is in radians, convert to degrees256
04838E             0146*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
04838E             0147*   ;     call smul168 ; uh.l = angle in degrees256
04838E             0148*   ;     ld (lead_angle),hl ; TODO: fix this
04838E             0149*   ; ; add lead angle to target bearing
04838E             0150*   ;     ld de,(Bearing_t)
04838E             0151*   ;     add hl,de ; h.l = lead angle+target bearing
04838E             0152*   
04838E 2A 6B 83 04 0153*       ld hl,(Bearing_t) ; TODO: fix this
048392             0154*   
048392 E5          0155*       push hl
048393             0156*   
048393             0157*   ; compute component projectile velocities
048393 ED 5B 71 83 0158*       ld de,(Vp) ; Vp should have been set by caller
       04          
048398 CD F0 06 04 0159*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
04839C ED 43 74 83 0160*       ld (Vp_x),bc
       04          
0483A1             0161*       ; inc d ; account for vertical ground movement
0483A1 ED 53 77 83 0162*       ld (Vp_y),de
       04          
0483A6 E1          0163*       pop hl ; uh.l = lead angle+target bearing
0483A7 22 83 83 04 0164*       ld (Heading_p),hl
0483AB             0165*   
0483AB C9          0166*       ret
0483AC             0167*   
0483AC             0168*   ; debug print the results
0483AC             0169*       PUSH_ALL
0483AC 08          0001*M1     ex af,af'
0483AD D9          0002*M1     exx
0483AE F5          0003*M1     push af
0483AF E5          0004*M1     push hl
0483B0 C5          0005*M1     push bc
0483B1 D5          0006*M1     push de
0483B2             0007*M1 
0483B2 08          0008*M1     ex af,af'
0483B3 D9          0009*M1     exx
0483B4 F5          0010*M1     push af
0483B5 E5          0011*M1     push hl
0483B6 C5          0012*M1     push bc
0483B7 D5          0013*M1     push de
0483B8 DD E5       0014*M1     push ix
0483BA FD E5       0015*M1     push iy
0483BC CD 55 12 04 0170*       call vdu_home_cursor
0483C0 CD 78 00 04 0171*       call printNewLine
0483C4 CD 5C 00 04 0172*       call printInline
0483C8 42 74 20 00 0173*       asciz "Bt "
0483CC 2A 6B 83 04 0174*       ld hl,(Bearing_t)
0483D0 CD ED 01 04 0175*       call print_s168_hl
0483D4             0176*   
0483D4             0177*       ; call printInline
0483D4             0178*       ; asciz "\r\nHt "
0483D4             0179*       ; ld hl,(Heading_t)
0483D4             0180*       ; call print_s168_hl
0483D4             0181*   
0483D4             0182*       ; call printInline
0483D4             0183*       ; asciz "\r\nVt "
0483D4             0184*       ; ld hl,(Vt)
0483D4             0185*       ; call print_s168_hl
0483D4             0186*   
0483D4             0187*       ; call printInline
0483D4             0188*       ; asciz "\r\nVtx"
0483D4             0189*       ; ld hl,(ix+sprite_xvel)
0483D4             0190*       ; call print_s168_hl
0483D4             0191*   
0483D4             0192*       ; call printInline
0483D4             0193*       ; asciz "\r\nVty"
0483D4             0194*       ; ld hl,(ix+sprite_yvel)
0483D4             0195*       ; ld de,-1*256 ; account for vertical ground movement
0483D4             0196*       ; add hl,de
0483D4             0197*       ; call print_s168_hl
0483D4             0198*   
0483D4 CD 5C 00 04 0199*       call printInline
0483D8 0D 0A 4C 64 0200*       asciz "\r\nLda"
       61 00       
0483DE 2A 86 83 04 0201*       ld hl,(lead_angle)
0483E2 CD ED 01 04 0202*       call print_s168_hl
0483E6             0203*   
0483E6 CD 5C 00 04 0204*       call printInline
0483EA 0D 0A 48 70 0205*       asciz "\r\nHp "
       20 00       
0483F0 2A 83 83 04 0206*       ld hl,(Heading_p)
0483F4 CD ED 01 04 0207*       call print_s168_hl
0483F8             0208*   
0483F8             0209*       ; call printInline
0483F8             0210*       ; asciz "\r\nVp "
0483F8             0211*       ; ld hl,(Vp)
0483F8             0212*       ; call print_s168_hl
0483F8             0213*   
0483F8             0214*       ; call printInline
0483F8             0215*       ; asciz "\r\nVpx"
0483F8             0216*       ; ld hl,(Vp_x)
0483F8             0217*       ; call print_s168_hl
0483F8             0218*   
0483F8             0219*       ; call printInline
0483F8             0220*       ; asciz "\r\nVpy"
0483F8             0221*       ; ld hl,(Vp_y)
0483F8             0222*       ; call print_s168_hl
0483F8             0223*   
0483F8             0224*       POP_ALL
0483F8 FD E1       0001*M1     pop iy
0483FA DD E1       0002*M1     pop ix
0483FC D1          0003*M1     pop de
0483FD C1          0004*M1     pop bc
0483FE E1          0005*M1     pop hl
0483FF F1          0006*M1     pop af
048400 08          0007*M1     ex af,af'
048401 D9          0008*M1     exx
048402             0009*M1 
048402 D1          0010*M1     pop de
048403 C1          0011*M1     pop bc
048404 E1          0012*M1     pop hl
048405 F1          0013*M1     pop af
048406 08          0014*M1     ex af,af'
048407 D9          0015*M1     exx
048408 C9          0225*       ret
048409             0071        include "tile_table.inc"
048409             0001*   ; ###### tile TABLE FIELD INDICES ######
048409             0002*   tile_table_record_size:         equ  64; bytes per tile record
048409             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
048409             0004*   ; tile state variables
048409             0005*   tile_state_variables:    equ   1; beginning of tile state variables
048409             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
048409             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
048409             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
048409             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
048409             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
048409             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
048409             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
048409             0013*   ; tile definition variables
048409             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
048409             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
048409             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
048409             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
048409             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
048409             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
048409             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
048409             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
048409             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
048409             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
048409             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
048409             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
048409             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
048409             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
048409             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
048409             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
048409             0030*   
048409             0031*   ; ###### tile TABLE VARIABLES ######
048409 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
048709 00 00 00    0033*       dl 0 ; list terminator
04870C             0034*   tile_stack_end:
04870C 09 84 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
04870F 67 9D 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
048712 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
048715 00          0038*   next_tile_id: db 0 ; next available tile id
048716 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
048719             0040*   
048719             0041*   tile_table_init:
048719             0042*   ; reset num active tiles
048719 21 00 00 00 0043*       ld hl,0
04871D 22 12 87 04 0044*       ld (num_active_tiles),hl
048721             0045*   ; reset next tile id
048721 AF          0046*       xor a
048722 32 15 87 04 0047*       ld (next_tile_id),a
048726             0048*   ; clear the tile stack
048726 AF          0049*       xor a ; write zeroes to tile stack
048727 21 09 84 04 0050*       ld hl,tile_stack
04872B 01 03 03 00 0051*       ld bc,tile_stack_end-tile_stack
04872F CD 5B 03 04 0052*       call clear_mem
048733             0053*   ; clear the tile table
048733 AF          0054*       xor a ; write zeroes to tile table
048734 21 67 9D 04 0055*       ld hl,tile_table_base ; address to copy from
048738 01 00 40 00 0056*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
04873C CD 5B 03 04 0057*       call clear_mem
048740             0058*   ; write tile ids
048740 DD 21 67 9D 0059*       ld ix,tile_table_base
       04          
048745 AF          0060*       xor a ; tile id
048746 06 00       0061*       ld b,0 ; loop counter
048748             0062*   @loop:
048748 DD 77 00    0063*       ld (ix+tile_id),a
04874B ED 32 40    0064*       lea ix,ix+table_record_size
04874E 3C          0065*       inc a
04874F 10 F7       0066*       djnz @loop
048751             0067*   ; set pointers to top of tile stack and tile table
048751 21 15 87 04 0068*       ld hl,next_tile_id
048755 3E FF       0069*       ld a,255 ; will wrap around to 0 on first call to create active tile
048757 77          0070*       ld (hl),a
048758 21 67 9D 04 0071*       ld hl,tile_table_base
04875C 22 0F 87 04 0072*       ld (tile_table_pointer),hl
048760 21 09 84 04 0073*       ld hl,tile_stack
048764 22 0C 87 04 0074*       ld (tile_stack_pointer),hl
048768 C9          0075*       ret
048769             0076*   ; end tile_table_init
048769             0077*   
048769             0078*   ; gets the next available tile id
048769             0079*   ; inputs; none
048769             0080*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048769             0081*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048769             0082*   ; destroys: a,hl,ix
048769             0083*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048769             0084*   tile_table_get_next_id:
048769 21 12 87 04 0085*       ld hl,num_active_tiles
04876D 34          0086*       inc (hl)
04876E C2 75 87 04 0087*       jp nz,@F ; check rollover to > 256 active tiles
048772 35          0088*       dec (hl) ; undo increment
048773 AF          0089*       xor a ; reset carry flag indicating that we didn't find a free tile
048774 C9          0090*       ret
048775             0091*   @@:
048775 7E          0092*       ld a,(hl) ; number of active tiles
048776             0093*   ; point ix to next tile record
048776 21 15 87 04 0094*       ld hl,next_tile_id
04877A 34          0095*       inc (hl)
04877B 56          0096*       ld d,(hl) ; index into tile table
04877C 1E 40       0097*       ld e,tile_table_record_size
04877E ED 5C       0098*       mlt de ; de is now the offset to the table entry
048780 DD 21 67 9D 0099*       ld ix,tile_table_base ; point to base address of tile table
       04          
048785 DD 19       0100*       add ix,de ; ix is now the address of the table entry
048787             0101*   ; add tile pointer to tile stack
048787 21 09 84 04 0102*       ld hl,tile_stack
04878B 57          0103*       ld d,a ; number of active tiles
04878C 15          0104*       dec d ; zero-based index
04878D 1E 03       0105*       ld e,3 ; three bytes per tile record
04878F ED 5C       0106*       mlt de ; offset into tile stack
048791 19          0107*       add hl,de ; hl points to top of the active tiles
048792 ED 3F       0108*       ld (hl),ix
048794             0109*   ; return tile id
048794 DD 7E 00    0110*       ld a,(ix+tile_id)
048797 37          0111*       scf ; sets carry flag indicating we found a free tile
048798 C9          0112*       ret ; done
048799             0113*   ; end tile_table_get_next_id
048799             0114*   
048799             0115*   ; deactivate the tile with the given id
048799             0116*   ; inputs: tile_stack_pointer set to record to remove
048799             0117*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
048799             0118*   ; destroys: a,hl,bc,de
048799             0119*   table_deactivate_tile:
048799             0120*   ; compute address to copy from
048799 2A 0C 87 04 0121*       ld hl,(tile_stack_pointer)
04879D 23          0122*       inc hl
04879E 23          0123*       inc hl
04879F 23          0124*       inc hl
0487A0 E5          0125*       push hl ; save copy from address
0487A1             0126*   ; compute bytes to copy
0487A1 3A 12 87 04 0127*       ld a,(num_active_tiles)
0487A5 6F          0128*       ld l,a
0487A6 26 03       0129*       ld h,3
0487A8 ED 6C       0130*       mlt hl
0487AA 11 09 84 04 0131*       ld de,tile_stack
0487AE 19          0132*       add hl,de ; hl = bottom of stack address
0487AF ED 5B 0C 87 0133*       ld de,(tile_stack_pointer)
       04          
0487B4 B7          0134*       or a ; clear carry
0487B5 ED 52       0135*       sbc hl,de ; hl = bytes to copy
0487B7 E5          0136*       push hl
0487B8 C1          0137*       pop bc ; bytes to copy
0487B9             0138*   ; compute target address
0487B9 ED 5B 0C 87 0139*       ld de,(tile_stack_pointer)
       04          
0487BE             0140*   ; copy bytes
0487BE E1          0141*       pop hl ; copy from address
0487BF ED B0       0142*       ldir
0487C1             0143*   ; update stack pointer and active tile count
0487C1 21 12 87 04 0144*       ld hl,num_active_tiles
0487C5 35          0145*       dec (hl)
0487C6 2A 0C 87 04 0146*       ld hl,(tile_stack_pointer)
0487CA 2B          0147*       dec hl
0487CB 2B          0148*       dec hl
0487CC 2B          0149*       dec hl
0487CD 22 0C 87 04 0150*       ld (tile_stack_pointer),hl
0487D1 C9          0151*       ret
0487D2             0152*   ; end table_deactivate_tile
0487D2             0153*   
0487D2             0154*   ; spawn a new active tile at the prescribed location
0487D2             0155*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
0487D2             0156*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0487D2             0157*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0487D2             0158*   ; destroys: a,hl,bc,de,ix
0487D2             0159*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0487D2             0160*   spawn_active_tile:
0487D2 E5          0161*       push hl ; back up pointer to new tile defaults
0487D3 CD 69 87 04 0162*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0487D7 E1          0163*       pop hl ; restore pointer to new tile defaults
0487D8 D0          0164*       ret nc ; no carry means no free tile slots, so we go home
0487D9             0165*   ; copy default settings to new tile
0487D9 DD 22 16 87 0166*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0487DE ED 32 16    0167*       lea ix,ix+tile_definitions ; bump pointer to copy to
0487E1 DD E5       0168*       push ix ; pointer to default tile settings
0487E3 D1          0169*       pop de ; address to copy to
0487E4 01 2A 00 00 0170*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0487E8 ED B0       0171*       ldir ; copies defaults to new tile record
0487EA             0172*   ; copy tile position from inputs
0487EA DD 2A 16 87 0173*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0487EF 2A 87 88 04 0174*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
0487F3 DD 2F 01    0175*       ld (ix+tile_x),hl
0487F6 2A 8B 88 04 0176*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
0487FA DD 2F 04    0177*       ld (ix+tile_y),hl
0487FD             0178*   ; set default tile velocities
0487FD 21 00 00 00 0179*       ld hl,0
048801 DD 2F 07    0180*       ld (ix+tile_xvel),hl
048804 21 00 01 00 0181*       ld hl,1*256 ; 1 pixel per frame
048808 DD 2F 0A    0182*       ld (ix+tile_yvel),hl
04880B             0183*   ; return to caller
04880B DD CB 16 FE 0184*       set 7,(ix+sprite_type) ; set just spawned flag
04880F DD CB 1D F6 0185*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048813 37          0186*       scf ; set carry flag to indicate success
048814 C9          0187*       ret
048815             0188*   ; end spawn_active_tile
048815             0189*   
048815             0190*   ; spawn a new active tile at the prescribed location
048815             0191*   ; inputs: iy pointer to current hl = pointer to new tile default settings
048815             0192*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048815             0193*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048815             0194*   ; destroys: a,hl,bc,de,ix
048815             0195*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048815             0196*   spawn_active_tile_from_sprite:
048815 E5          0197*       push hl ; back up pointer to new tile defaults
048816 CD 69 87 04 0198*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
04881A E1          0199*       pop hl ; restore pointer to new tile defaults
04881B D0          0200*       ret nc ; no carry means no free tile slots, so we go home
04881C             0201*   ; copy default settings to new tile
04881C DD 22 16 87 0202*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
048821 ED 32 16    0203*       lea ix,ix+tile_definitions ; bump pointer to copy to
048824 DD E5       0204*       push ix ; pointer to default tile settings
048826 D1          0205*       pop de ; address to copy to
048827 01 2A 00 00 0206*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
04882B ED B0       0207*       ldir ; copies defaults to new tile record
04882D             0208*   ; copy tile position from existing sprite
04882D DD 2A 16 87 0209*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
048832 FD 2A 96 7D 0210*       ld iy,(table_pointer) ; get existing sprite record
       04          
048837 FD 27 01    0211*       ld hl,(iy+sprite_x)
04883A DD 2F 01    0212*       ld (ix+tile_x),hl
04883D FD 27 04    0213*       ld hl,(iy+sprite_y)
048840 DD 2F 04    0214*       ld (ix+tile_y),hl
048843             0215*   ; set default tile velocities
048843 21 00 00 00 0216*       ld hl,0
048847 DD 2F 07    0217*       ld (ix+tile_xvel),hl
04884A 21 00 01 00 0218*       ld hl,1*256 ; 1 pixel per frame
04884E DD 2F 0A    0219*       ld (ix+tile_yvel),hl
048851             0220*   ; return to caller
048851 DD CB 16 FE 0221*       set 7,(ix+sprite_type) ; set just spawned flag
048855 DD CB 1D F6 0222*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048859 37          0223*       scf ; set carry flag to indicate success
04885A C9          0224*       ret
04885B             0225*   ; end spawn_active_tile_from_sprite
04885B             0226*   
04885B             0227*   ; compute animation frame based on tile_animation and tile_heading
04885B             0228*   ; inputs: iy set to tile record
04885B             0229*   ; outputs: a, tile_frame set to animation frame
04885B             0230*   ; destroys: a,hl
04885B             0231*   tile_frame_heading_animation:
04885B FD 7E 11    0232*       ld a,(iy+tile_heading+1) ; we want the integer portion
04885E CB 3F       0233*       srl a ; divide integer portion by 8
048860 CB 3F       0234*       srl a
048862 CB 3F       0235*       srl a
048864 FD 66 22    0236*       ld h,(iy+tile_animation)
048867 2E 20       0237*       ld l,32 ; 32 orientation frames per animation
048869 ED 6C       0238*       mlt hl ; hl = offset from base animation
04886B 85          0239*       add a,l ; modulo256 since tile_frame is only 1 byte
04886C FD 77 28    0240*       ld (iy+tile_frame),a
04886F C9          0241*       ret
048870             0242*   ; end tile_frame_heading_animation
048870             0243*   
048870             0244*   ; compute animation frame based on tile_heading
048870             0245*   ; inputs: iy set to tile record
048870             0246*   ; outputs: a, tile_frame set to animation frame
048870             0247*   ; destroys: a,hl
048870             0248*   tile_frame_heading:
048870 FD 7E 11    0249*       ld a,(iy+tile_heading+1) ; we want the integer portion
048873 CB 3F       0250*       srl a ; divide integer portion by 8
048875 CB 3F       0251*       srl a
048877 CB 3F       0252*       srl a
048879 FD 77 28    0253*       ld (iy+tile_frame),a
04887C C9          0254*       ret
04887D             0255*   ; end tile_frame_heading
04887D             0072        include "tiles.inc"
04887D 00 00 00    0001*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
048880 00 00 00    0002*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
048883             0003*       ; initialize to zero for a maximum of 256 rows in a level
048883 00          0004*   tiles_cols: db 0 ; number of tile columns in the current level
048884             0005*   
048884 00 00 00    0006*   cur_baseBufferId: dl 0
048887 00          0007*       db 0 ; padding for byte-shifting
048888 00 00 00    0008*   tiles_x_plot: dl 0
04888B 00          0009*       db 0 ; padding for byte-shifting
04888C F1 FF FF    0010*   tiles_y_plot: dl -15
04888F             0011*   
04888F             0012*   tiles_plot:
04888F             0013*   ; set gfx origin to playing field window
04888F 01 80 00 00 0014*       ld bc,origin_left
048893 11 30 00 00 0015*       ld de,origin_top
048897 CD 25 13 04 0016*       call vdu_set_gfx_origin
04889B             0017*   ; set gfx viewport to playing field window
04889B CD 73 7D 04 0018*       call set_gfx_playing_field
04889F             0019*   ; move the background down one pixel
04889F 3E 02       0020*       ld a,2 ; current gfx viewport
0488A1 2E 02       0021*       ld l,2 ; direction=down
0488A3 26 01       0022*       ld h,1 ; speed=1 px
0488A5 CD B8 12 04 0023*       call vdu_scroll_down
0488A9             0024*   ; set gfx viewport to one scanline to optimise plotting tiles
0488A9 01 00 00 00 0025*       ld bc,0 ; leftmost x-coord
0488AD 11 00 00 00 0026*       ld de,0 ; topmost y-coord
0488B1 DD 21 FF 00 0027*       ld ix,255 ; rightmost x-coord
       00          
0488B6 FD 21 00 00 0028*       ld iy,0 ; bottommost y-coord
       00          
0488BB CD 40 13 04 0029*       call vdu_set_gfx_viewport
0488BF             0030*   ; plot the background
0488BF CD 83 89 04 0031*       call bg_plot
0488C3             0032*   ; initialize tiles loop
0488C3 21 00 00 00 0033*       ld hl,0 ; init plotting x-coordinate
0488C7 22 88 88 04 0034*       ld (tiles_x_plot),hl
0488CB 2A 7D 88 04 0035*       ld hl,(tiles_row_defs)
0488CF 3A 83 88 04 0036*       ld a,(tiles_cols)
0488D3 47          0037*       ld b,a ; column loop counter
0488D4             0038*   @loop:
0488D4 C5          0039*       push bc ; save the loop counter
0488D5             0040*   ; read the tile defintion for the current column
0488D5 7E          0041*       ld a,(hl) ; a has tile definition
0488D6 E5          0042*       push hl ; save pointer to tile definition
0488D7 2A 84 88 04 0043*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
0488DB 6F          0044*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
0488DC CD 95 13 04 0045*       call vdu_buff_select ; tile bitmap buffer is now active
0488E0             0046*   ; plot the active bitmap
0488E0 ED 4B 88 88 0047*       ld bc,(tiles_x_plot)
       04          
0488E5 ED 5B 8C 88 0048*       ld de,(tiles_y_plot)
       04          
0488EA CD F1 16 04 0049*       call vdu_plot_bmp
0488EE             0050*   ; bump x-coords the width of one tile and save it
0488EE 2A 88 88 04 0051*       ld hl,(tiles_x_plot)
0488F2 01 10 00 00 0052*       ld bc,16
0488F6 09          0053*       add hl,bc
0488F7 22 88 88 04 0054*       ld (tiles_x_plot),hl
0488FB             0055*   ; prepare to loop to next column
0488FB E1          0056*       pop hl ; get back pointer to tile def
0488FC 23          0057*       inc hl ; bump it to the next column
0488FD C1          0058*       pop bc ; snag our loop counter
0488FE 10 D4       0059*       djnz @loop
048900             0060*   ; increment tiles plotting y-coordinate
048900             0061*   ; (we use ix b/c we want to preserve hl for the next step)
048900 DD 2A 8C 88 0062*       ld ix,(tiles_y_plot)
       04          
048905 11 01 00 00 0063*       ld de,1
048909 DD 19       0064*       add ix,de
04890B DD 22 8C 88 0065*       ld (tiles_y_plot),ix
       04          
048910 DD 7D       0066*       ld a,ixl
048912 FE 01       0067*       cp 1
048914 C0          0068*       ret nz
048915             0069*   ; do active tiles
048915 E5          0070*       push hl ; save pointer to next row tile def
048916 CD 39 89 04 0071*       call do_active_tiles
04891A E1          0072*       pop hl ; get back pointer to next row tile def
04891B             0073*   ; time to bump tiles_row_defs to next row
04891B             0074*   ; (hl was already there at the end of the loop)
04891B 22 7D 88 04 0075*       ld (tiles_row_defs),hl
04891F             0076*   ; reset coords to plot next row of tiles
04891F 21 00 00 00 0077*       ld hl,0
048923 22 88 88 04 0078*       ld (tiles_x_plot),hl
048927 21 F1 FF FF 0079*       ld hl,-15
04892B 22 8C 88 04 0080*       ld (tiles_y_plot),hl
04892F             0081*   ; decrement tiles row counter
04892F 21 80 88 04 0082*       ld hl,tiles_row
048933 35          0083*       dec (hl)
048934 C0          0084*       ret nz
048935             0085*   @inc_level:
048935 C3 EE 64 04 0086*       jp next_level
048939             0087*   ; end tiles_plot
048939             0088*   
048939             0089*   do_active_tiles:
048939             0090*   ; initialize tiles loop
048939 21 00 00 00 0091*       ld hl,0 ; init plotting x-coordinate
04893D 22 88 88 04 0092*       ld (tiles_x_plot),hl
048941 2A 7D 88 04 0093*       ld hl,(tiles_row_defs)
048945 3A 83 88 04 0094*       ld a,(tiles_cols)
048949 47          0095*       ld b,a ; column loop counter
04894A             0096*   @loop:
04894A C5          0097*       push bc ; save the loop counter
04894B             0098*   ; read the tile defintion for the current column
04894B 7E          0099*       ld a,(hl) ; a has tile definition
04894C E5          0100*       push hl ; save pointer to tile definition
04894D B7          0101*       or a ; check for null tile
04894E CA 6A 89 04 0102*       jp z,@next_tile ; skip to next tile if null
048952 FE 11       0103*       cp 17 ; carry reset if active tile
048954 D2 6A 89 04 0104*       jp nc,@next_tile ; skip to next tile if not active
048958             0105*   ; call the tile activation routine
048958 21 BB 89 04 0106*       ld hl,tile_activation_routines
04895C 16 03       0107*       ld d,3 ; three bytes per table entry
04895E 5F          0108*       ld e,a ; a is the tile type
04895F ED 5C       0109*       mlt de ; de is now the offset to the table entry
048961 19          0110*       add hl,de ; hl is now the address of the table entry
048962 ED 27       0111*       ld hl,(hl) ; hl is now the activation routine address
048964             0112*       CALL_HL ; call the activation routine
048964 01 6A 89 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048968 C5          0002*M1     push bc ; which constitutes the return address
048969 E9          0003*M1     jp (hl) ; Jump to the address in HL
04896A             0113*   @next_tile:
04896A             0114*   ; bump x-coords the width of one tile and save it
04896A 2A 88 88 04 0115*       ld hl,(tiles_x_plot)
04896E 01 10 00 00 0116*       ld bc,16
048972 09          0117*       add hl,bc
048973 22 88 88 04 0118*       ld (tiles_x_plot),hl
048977             0119*   ; prepare to loop to next column
048977 E1          0120*       pop hl ; get back pointer to tile def
048978 23          0121*       inc hl ; bump it to the next column
048979 C1          0122*       pop bc ; snag our loop counter
04897A 10 CE       0123*       djnz @loop
04897C C9          0124*       ret ; done
04897D             0125*   ; end do_active_tiles
04897D             0126*   
04897D FF FF FF    0127*   bg_y_plot: dl -1
048980 00 04 00    0128*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
048983             0129*   
048983             0130*   bg_plot:
048983             0131*   ; load current bg tile bufferId as default
048983 2A 80 89 04 0132*       ld hl,(bg_bufferId)
048987             0133*   ; check whether it is time for a new background tile
048987 3A 7D 89 04 0134*       ld a,(bg_y_plot)
04898B 3C          0135*       inc a
04898C 32 7D 89 04 0136*       ld (bg_y_plot),a
048990 C2 A8 89 04 0137*       jp nz,@F ; not time for a new tile so draw current one
048994             0138*   ; load the next background tile
048994 21 00 04 00 0139*       ld hl,BUF_BG_STARS_0
048998 CD 14 05 04 0140*       call rand_8
04899C E6 03       0141*       and %0000011
04899E 85          0142*       add a,l
04899F 6F          0143*       ld l,a
0489A0 3E 00       0144*       ld a,0
0489A2 8C          0145*       adc a,h
0489A3 67          0146*       ld h,a
0489A4 22 80 89 04 0147*       ld (bg_bufferId),hl
0489A8             0148*   @@:
0489A8 CD 95 13 04 0149*       call vdu_buff_select
0489AC 01 00 00 00 0150*       ld bc,0
0489B0 ED 5B 7D 89 0151*       ld de,(bg_y_plot)
       04          
0489B5 13          0152*       inc de
0489B6 CD F1 16 04 0153*       call vdu_plot_bmp
0489BA C9          0154*       ret
0489BB             0155*   ; end bg_plot
0489BB             0073        include "tiles_active.inc"
0489BB             0001*   
0489BB             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
0489BB             0003*   tile_pad_small: equ 1
0489BB             0004*   tile_pad_med: equ 2
0489BB             0005*   tile_pad_large: equ 3
0489BB             0006*   tile_charge_shields: equ 4
0489BB             0007*   tile_turret_fireball: equ 5
0489BB             0008*   tile_laser_turret: equ 6
0489BB             0009*   tile_twin_laser_turret: equ 7
0489BB             0010*   tile_charge_fuel: equ 8
0489BB             0011*   tile_electrode: equ 9
0489BB             0012*   tile_lightning: equ 10
0489BB             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
0489BB             0014*   tile_12: equ 12
0489BB             0015*   tile_13: equ 13
0489BB             0016*   tile_14: equ 14
0489BB             0017*   tile_15: equ 15
0489BB             0018*   tile_crater: equ 16
0489BB             0019*   
0489BB             0020*   tile_activation_routines:
0489BB EB 89 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
0489BE 69 8C 04    0022*       dl activate_pad_small
0489C1 EB 89 04    0023*       dl activate_null_tile
0489C4 EB 89 04    0024*       dl activate_null_tile
0489C7 EB 89 04    0025*       dl activate_null_tile
0489CA DE 8C 04    0026*       dl activate_turret_fireball
0489CD EB 89 04    0027*       dl activate_null_tile
0489D0 EB 89 04    0028*       dl activate_null_tile
0489D3 EB 89 04    0029*       dl activate_null_tile
0489D6 05 8B 04    0030*       dl activate_electrode
0489D9 10 8C 04    0031*       dl activate_lightning
0489DC 05 8B 04    0032*       dl activate_electrode
0489DF EB 89 04    0033*       dl activate_null_tile
0489E2 EB 89 04    0034*       dl activate_null_tile
0489E5 EB 89 04    0035*       dl activate_null_tile
0489E8 B7 8A 04    0036*       dl activate_crater
0489EB             0037*   ; end tile_activation_routines
0489EB             0038*   
0489EB             0039*   activate_null_tile:
0489EB C9          0040*       ret ; dummy routine, do nothing
0489EC             0041*   move_active_tile:
0489EC             0042*   ; y-axis movement
0489EC FD 27 04    0043*       ld hl,(iy+tile_y)
0489EF FD 17 0A    0044*       ld de,(iy+tile_yvel)
0489F2 19          0045*       add hl,de
0489F3 FD 2F 04    0046*       ld (iy+tile_y),hl
0489F6             0047*   ; detect screen edge collisions
0489F6             0048*   ; y-axis bottom is all we need to test
0489F6 11 00 80 FE 0049*       ld de,-tile_bottom*256
0489FA ED 5A       0050*       adc hl,de
0489FC F8          0051*       ret m ; still on screen so do nothing further
0489FD AF          0052*       xor a ; signal caller that tile has scrolled off screen
0489FE C9          0053*       ret
0489FF             0054*   ; end move_active_tile
0489FF             0055*   
0489FF             0056*   move_tiles:
0489FF             0057*   ; initialize pointers and loop counter
0489FF FD 21 09 84 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
048A04             0059*   @move_loop:
048A04 FD 22 0C 87 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048A09 FD 7E 02    0061*       ld a,(iy+2)
048A0C B7          0062*       or a ; will be zero if at end of stack
048A0D C8          0063*       ret z ; end of stack so we're done
048A0E             0064*   ; point iy to tile record
048A0E FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
048A11 FD 22 0F 87 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
048A16             0067*   ; check top bit of tile_type to see if tile is just spawned
048A16 FD CB 16 7E 0068*       bit 7,(iy+tile_type)
048A1A C2 38 8A 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
048A1E             0070*   ; check sprite_alive bit to see if tile is active
048A1E FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
048A22 C8          0072*       ret z ; end of stack so we're done
048A23             0073*   ; otherwise we prepare to move the tile
048A23 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
048A26             0075*       CALL_HL
048A26 01 2C 8A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048A2A C5          0002*M1     push bc ; which constitutes the return address
048A2B E9          0003*M1     jp (hl) ; Jump to the address in HL
048A2C             0076*    ; get back stack pointer and loop
048A2C             0077*   @next_record:
048A2C FD 2A 0C 87 0078*       ld iy,(tile_stack_pointer)
       04          
048A31 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
048A34 C3 04 8A 04 0080*       jp @move_loop ; loop until we've checked all the records
048A38             0081*   @just_spawned:
048A38 FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
048A3C C3 2C 8A 04 0083*       jp @next_record
048A40             0084*   ; end move_tiles
048A40             0085*   
048A40             0086*   draw_active_tile:
048A40 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
048A43 FD 7E 28    0088*       ld a,(iy+tile_frame)
048A46 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
048A47 6F          0090*       ld l,a
048A48 3E 00       0091*       ld a,0 ; preserve carry
048A4A 8C          0092*       adc a,h
048A4B 67          0093*       ld h,a
048A4C CD 95 13 04 0094*       call vdu_buff_select ; buffer id of animation frame
048A50 FD 07 01    0095*       ld bc,(iy+tile_x)
048A53 FD 17 04    0096*       ld de,(iy+tile_y)
048A56 CD 0D 17 04 0097*       call vdu_plot_bmp168
048A5A C9          0098*       ret
048A5B             0099*   ; end draw_active_tile
048A5B             0100*   
048A5B             0101*   ; create a new sprite at the same location as the current tile
048A5B             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
048A5B             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
048A5B             0104*   spawn_sprite_from_tile:
048A5B E5          0105*       push hl ; back up pointer to new sprite defaults
048A5C CD 41 7E 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048A60 E1          0107*       pop hl ; restore pointer to new sprite defaults
048A61 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
048A62             0109*   ; copy default settings to new sprite
048A62 DD E5       0110*       push ix ; back up pointer to new sprite record
048A64 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048A67 DD E5       0112*       push ix ; pointer to default sprite settings
048A69 D1          0113*       pop de ; address to copy to
048A6A 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
048A6E ED B0       0115*       ldir ; copies defaults to new sprite record
048A70 DD E1       0116*       pop ix ; restore pointer to new sprite record
048A72             0117*   ; copy sprite position from existing tile
048A72 FD 2A 0F 87 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
048A77 FD 27 01    0119*       ld hl,(iy+tile_x)
048A7A DD 2F 01    0120*       ld (ix+sprite_x),hl
048A7D FD 27 04    0121*       ld hl,(iy+tile_y)
048A80 DD 2F 04    0122*       ld (ix+sprite_y),hl
048A83             0123*   ; return to caller
048A83 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
048A87 DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048A8B 37          0126*       scf ; set carry flag to indicate success
048A8C C9          0127*       ret
048A8D             0128*   ; end spawn_sprite_from_tile
048A8D             0129*   
048A8D             0130*   ; create a new tile at the same location as the current tile
048A8D             0131*   ; inputs: tile_table_pointer = current tile
048A8D             0132*   spawn_active_tile_from_tile:
048A8D             0133*   ; copy default settings to new tile
048A8D DD 2A 0F 87 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
048A92 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
048A95 DD E5       0136*       push ix ; pointer to default tile settings
048A97 D1          0137*       pop de ; address to copy to
048A98 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048A9C ED B0       0139*       ldir ; copies defaults to new tile record
048A9E DD 2A 0F 87 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
048AA3 C9          0141*       ret
048AA4             0142*   ; end spawn_active_tile_from_tile
048AA4             0074        include "tile_crater.inc"
048AA4             0001*   crater_defaults:
048AA4 10          0002*       db tile_crater          ; type
048AA5 07 01 00    0003*       dl BUF_CRATER_A      ; base_bufferId
048AA8 C0 8A 04    0004*       dl move_crater          ; move_program
048AAB 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048AAC 10          0006*       db 16                   ; dim_x
048AAD 10          0007*       db 16                   ; dim_y
048AAE 01          0008*       db 1                    ; num_orientations
048AAF 04          0009*       db 4                    ; num_animations
048AB0 05          0010*       db 5	                ; animation
048AB1 08          0011*       db 8                    ; animation_timer
048AB2 00          0012*       db 0                    ; move_timer
048AB3 00          0013*       db 0                    ; move_step
048AB4 00          0014*       db 0                    ; points
048AB5 00          0015*       db 0                    ; shield_damage
048AB6 00          0016*       db 0                    ; frame
048AB7             0017*   
048AB7             0018*   activate_crater:
048AB7 21 A4 8A 04 0019*       ld hl,crater_defaults
048ABB CD 8D 8A 04 0020*       call spawn_active_tile_from_tile
048ABF             0021*   ; other specific initialization
048ABF C9          0022*       ret
048AC0             0023*   ; end activate_crater
048AC0             0024*   
048AC0             0025*   move_crater:
048AC0 CD EC 89 04 0026*       call move_active_tile
048AC4 CA 99 87 04 0027*       jp z,table_deactivate_tile
048AC8             0028*   ; do animation
048AC8 FD 35 23    0029*       dec (iy+tile_animation_timer)
048ACB C0          0030*       ret nz ; not time to animate
048ACC FD 35 22    0031*       dec (iy+sprite_animation) ; check whether time to transition to crater
048ACF CC E5 8A 04 0032*       call z,@make_crater
048AD3 3E 08       0033*       ld a,8
048AD5 FD 77 23    0034*       ld (iy+tile_animation_timer),a
048AD8 FD 7E 28    0035*       ld a,(iy+tile_frame)
048ADB 3C          0036*       inc a
048ADC E6 03       0037*       and %00000011 ; modulo 4
048ADE FD 77 28    0038*       ld (iy+tile_frame),a
048AE1 C3 40 8A 04 0039*       jp draw_active_tile
048AE5             0040*   @make_crater:
048AE5 21 02 01 00 0041*       ld hl,BUF_CRATER_0
048AE9 FD 2F 17    0042*       ld (iy+tile_base_bufferId),hl
048AEC 3E FF       0043*       ld a,-1 ; will wrap to zero on return
048AEE FD 77 28    0044*       ld (iy+tile_frame),a
048AF1 C9          0045*       ret
048AF2             0046*   ; end move_crater
048AF2             0075        include "tile_electrode.inc"
048AF2             0001*   electrode_defaults:
048AF2 09          0002*       db 9                    ; type
048AF3 7A 01 00    0003*       dl BUF_TILE_BLANK       ; base_bufferId
048AF6 0E 8B 04    0004*       dl move_electrode       ; move_program
048AF9 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048AFA 10          0006*       db 16                   ; dim_x
048AFB 10          0007*       db 16                   ; dim_y
048AFC 01          0008*       db 1                    ; num_orientations
048AFD 01          0009*       db 1                    ; num_animations
048AFE 00          0010*       db 0                    ; animation
048AFF 00          0011*       db 0                    ; animation_timer
048B00 00          0012*       db 0                    ; move_timer
048B01 00          0013*       db 0                    ; move_step
048B02 05          0014*       db 5                    ; points
048B03 FC          0015*       db -4                   ; shield_damage
048B04 00          0016*       db 0                    ; frame
048B05             0017*   
048B05             0018*   activate_electrode:
048B05 21 F2 8A 04 0019*       ld hl,electrode_defaults
048B09             0020*   ; get next available active tile id
048B09 CD D2 87 04 0021*       call spawn_active_tile
048B0D             0022*       ; ret nc ; no carry means no free active tile slots, so we go home
048B0D             0023*   ; other specific initialization
048B0D C9          0024*       ret
048B0E             0025*   ; end activate_electrode
048B0E             0026*   
048B0E             0027*   move_electrode:
048B0E CD EC 89 04 0028*       call move_active_tile
048B12 CA 99 87 04 0029*       jp z,table_deactivate_tile
048B16 DD 21 67 99 0030*       ld ix,player_begin
       04          
048B1B DD CB 1D 76 0031*       bit sprite_alive,(ix+sprite_collisions)
048B1F CA 33 8B 04 0032*       jp z,@laser ; player is dead so don't check for collisions
048B23 CD CB 1E 04 0033*       call check_enemy_collision_player
048B27 C2 33 8B 04 0034*       jp nz,@laser ; no collision so check laser collision
048B2B CD 44 7D 04 0035*       call update_shields
048B2F C3 40 8B 04 0036*       jp kill_electrode
048B33             0037*   @laser:
048B33 CD BF 1E 04 0038*       call check_enemy_collision_laser
048B37 C0          0039*       ret nz ; no collision so we're done
048B38 CD DE 7C 04 0040*       call update_score
048B3C C3 40 8B 04 0041*       jp kill_electrode
048B40             0042*   ; end move_electrode
048B40             0043*   
048B40             0044*   kill_electrode:
048B40             0045*   ; activate blank tile bitmap
048B40 21 7A 01 00 0046*       ld hl,BUF_TILE_BLANK
048B44 CD 95 13 04 0047*       call vdu_buff_select
048B48             0048*   ; save y-coordinate of collision tile
048B48 FD 27 04    0049*       ld hl,(iy+tile_y)
048B4B 22 FA 8B 04 0050*       ld (@tile_y),hl
048B4F             0051*   ; initialize pointers
048B4F 2A 0C 87 04 0052*       ld hl,(tile_stack_pointer)
048B53 ED 27       0053*       ld hl,(hl) ; pointer to this tile table record
048B55 E5          0054*       push hl ; save pointer to this tile table record
048B56 DD 21 09 84 0055*       ld ix,tile_stack ; set ix to first record in table
       04          
048B5B             0056*   @check_loop:
048B5B DD 22 F7 8B 0057*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
048B60 DD 7E 02    0058*       ld a,(ix+2)
048B63 B7          0059*       or a ; will be zero if at end of stack
048B64 CA D0 8B 04 0060*       jp z,@done ; end of stack so we're done
048B68             0061*   ; point ix to tile record
048B68 DD 37 00    0062*       ld ix,(ix) ; ix points to the tile record being checked
048B6B             0063*   ; check top bit of tile_type to see if tile is just spawned
048B6B DD CB 16 7E 0064*       bit 7,(ix+tile_type)
048B6F C2 C4 8B 04 0065*       jp nz,@next_record ; if just spawned, skip to next record
048B73             0066*   ; check sprite_alive bit to see if tile is active
048B73 DD CB 1D 76 0067*       bit sprite_alive,(ix+sprite_collisions)
048B77 C8          0068*       ret z ; end of stack so we're done
048B78             0069*   ; check tile type
048B78 DD 7E 16    0070*       ld a,(ix+tile_type)
048B7B FE 0A       0071*       cp tile_lightning ; check if tile is lightning
048B7D C2 C4 8B 04 0072*       jp nz,@next_record ; if not an electrode, skip to next record
048B81             0073*   ; check tile position
048B81 FD 2A F7 8B 0074*       ld iy,(@tile_stack_pointer)
       04          
048B86 FD 22 0C 87 0075*       ld (tile_stack_pointer),iy
       04          
048B8B FD 37 00    0076*       ld iy,(iy) ; pointer to tile record to kill
048B8E FD 22 0F 87 0077*       ld (tile_table_pointer),iy
       04          
048B93 DD 27 04    0078*       ld hl,(ix+tile_y)
048B96 ED 5B FA 8B 0079*       ld de,(@tile_y)
       04          
048B9B B7          0080*       or a ; clear carry
048B9C E5          0081*       push hl
048B9D ED 52       0082*       sbc hl,de
048B9F E1          0083*       pop hl
048BA0 CA B0 8B 04 0084*       jp z,@kill_it
048BA4 01 00 01 00 0085*       ld bc,1*256
048BA8 09          0086*       add hl,bc
048BA9 B7          0087*       or a
048BAA ED 52       0088*       sbc hl,de
048BAC C2 C4 8B 04 0089*       jp nz,@next_record
048BB0             0090*   @kill_it: ; deactivate tile and replace with inactive blank tile
048BB0 FD 07 01    0091*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
048BB3 CD 0D 17 04 0092*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
048BB7 CD 99 87 04 0093*       call table_deactivate_tile
048BBB DD 2A F7 8B 0094*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
048BC0 C3 5B 8B 04 0095*       jp @check_loop ; deactivate tile naturally advances to next record
048BC4             0096*    ; get back stack pointer and loop
048BC4             0097*   @next_record:
048BC4 DD 2A F7 8B 0098*       ld ix,(@tile_stack_pointer)
       04          
048BC9 ED 32 03    0099*       lea ix,ix+3 ; next tile stack record
048BCC C3 5B 8B 04 0100*       jp @check_loop ; loop until we've checked all the records
048BD0             0101*   @done:
048BD0             0102*   ; find this tile record in the tile stack
048BD0 D1          0103*       pop de ; restore pointer to this tile table record (was hl)
048BD1 FD 21 09 84 0104*       ld iy,tile_stack ; set ix to first record in table
       04          
048BD6             0105*   @find_loop:
048BD6 FD 27 00    0106*       ld hl,(iy)
048BD9 ED 33 03    0107*       lea iy,iy+3 ; next tile stack record
048BDC B7          0108*       or a ; clear carry
048BDD ED 52       0109*       sbc hl,de ; if not the same address, loop
048BDF C2 D6 8B 04 0110*       jp nz,@find_loop
048BE3 ED 33 FD    0111*       lea iy,iy-3 ; back up to the record we want
048BE6 FD 22 0C 87 0112*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048BEB FD 37 00    0113*       ld iy,(iy) ; iy points to the tile stack record
048BEE FD 22 0F 87 0114*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
048BF3 C3 B7 8A 04 0115*       jp activate_crater
048BF7 09 84 04    0116*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
048BFA 00 00 00    0117*   @tile_y: dl 0 ; y position of tiles to kill
048BFD             0118*   ; end move_electrode
048BFD             0076        include "tile_lightning.inc"
048BFD             0001*   lightning_defaults:
048BFD 0A          0002*       db tile_lightning       ; type
048BFE 53 01 00    0003*       dl BUF_LIGHTNING_H_0    ; base_bufferId
048C01 1A 8C 04    0004*       dl move_lightning       ; move_program
048C04 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048C05 10          0006*       db 16                   ; dim_x
048C06 10          0007*       db 16                   ; dim_y
048C07 01          0008*       db 1                    ; num_orientations
048C08 02          0009*       db 2                    ; num_animations
048C09 00          0010*       db 0                    ; animation
048C0A 08          0011*       db 8                    ; animation_timer
048C0B 00          0012*       db 0                    ; move_timer
048C0C 00          0013*       db 0                    ; move_step
048C0D 00          0014*       db 0                    ; points
048C0E FF          0015*       db -1                    ; shield_damage
048C0F 00          0016*       db 0                    ; frame
048C10             0017*   
048C10             0018*   activate_lightning:
048C10 21 FD 8B 04 0019*       ld hl,lightning_defaults
048C14             0020*   ; get next available active tile id
048C14 CD D2 87 04 0021*       call spawn_active_tile
048C18 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048C19             0023*   ; other specific initialization
048C19 C9          0024*       ret
048C1A             0025*   ; end activate_lightning
048C1A             0026*   
048C1A             0027*   move_lightning:
048C1A CD EC 89 04 0028*       call move_active_tile
048C1E CA 99 87 04 0029*       jp z,table_deactivate_tile
048C22 CD BF 1E 04 0030*       call check_enemy_collision_laser ; kills laser on collision but does not die
048C26 DD 21 67 99 0031*       ld ix,player_begin
       04          
048C2B DD CB 1D 76 0032*       bit sprite_alive,(ix+sprite_collisions)
048C2F CA 3F 8C 04 0033*       jp z,@animate ; player is dead so don't check for collisions
048C33 CD CB 1E 04 0034*       call check_enemy_collision_player
048C37 C2 3F 8C 04 0035*       jp nz,@animate ; no collision so do animation
048C3B CD 44 7D 04 0036*       call update_shields
048C3F             0037*   @animate:
048C3F FD 35 23    0038*       dec (iy+tile_animation_timer)
048C42 C0          0039*       ret nz ; not time to animate
048C43             0040*   ; reset the animation timer and bump animation
048C43 3E 08       0041*       ld a,8
048C45 FD 77 23    0042*       ld (iy+tile_animation_timer),a
048C48 FD 7E 28    0043*       ld a,(iy+tile_frame)
048C4B 3C          0044*       inc a
048C4C E6 01       0045*       and %00000001 ; modulo 1
048C4E FD 77 28    0046*       ld (iy+tile_frame),a
048C51 C3 40 8A 04 0047*       jp draw_active_tile
048C55 C9          0048*       ret
048C56             0077        include "tile_pad_small.inc"
048C56             0001*   pad_small_defaults:
048C56 01          0002*       db tile_pad_small       ; type
048C57 7B 01 00    0003*       dl BUF_TILE_PAD_0       ; base_bufferId
048C5A 7C 8C 04    0004*       dl move_pad_small       ; move_program
048C5D 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048C5E 10          0006*       db 16                   ; dim_x
048C5F 10          0007*       db 16                   ; dim_y
048C60 01          0008*       db 1                    ; num_orientations
048C61 01          0009*       db 1                    ; num_animations
048C62 00          0010*       db 0                    ; animation
048C63 10          0011*       db 16                   ; animation_timer
048C64 00          0012*       db 0                    ; move_timer
048C65 00          0013*       db 0                    ; move_step
048C66 05          0014*       db 5                    ; points
048C67 00          0015*       db 0                    ; shield_damage
048C68 00          0016*       db 0                    ; frame
048C69             0017*   
048C69             0018*   activate_pad_small:
048C69 21 56 8C 04 0019*       ld hl,pad_small_defaults
048C6D             0020*   ; get next available active tile id
048C6D CD D2 87 04 0021*       call spawn_active_tile
048C71 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048C72             0023*   ; other specific initialization
048C72 CD 14 05 04 0024*       call rand_8     ; snag a random number
048C76 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048C78 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a seeker
048C7B C9          0027*       ret
048C7C             0028*   ; end activate_pad_small
048C7C             0029*   
048C7C             0030*   move_pad_small:
048C7C CD EC 89 04 0031*       call move_active_tile
048C80 CA 99 87 04 0032*       jp z,table_deactivate_tile
048C84 CD BF 1E 04 0033*       call check_enemy_collision_laser
048C88 CA C3 8C 04 0034*       jp z,kill_pad_small
048C8C             0035*   ; do animation
048C8C FD 35 23    0036*       dec (iy+tile_animation_timer)
048C8F C2 A5 8C 04 0037*       jp nz,@F
048C93 3E 10       0038*       ld a,16
048C95 FD 77 23    0039*       ld (iy+tile_animation_timer),a
048C98 FD 7E 28    0040*       ld a,(iy+tile_frame)
048C9B 3C          0041*       inc a
048C9C E6 07       0042*       and %00000111 ; modulo 8
048C9E FD 77 28    0043*       ld (iy+tile_frame),a
048CA1 CD 40 8A 04 0044*       call draw_active_tile
048CA5             0045*   @@: ; check player alive
048CA5 DD 21 67 99 0046*       ld ix,player_begin
       04          
048CAA DD CB 1D 76 0047*       bit sprite_alive,(ix+sprite_collisions)
048CAE C8          0048*       ret z ; player dead so nothing more to do
048CAF             0049*   ; check whether it is time to spawn a seeker
048CAF FD 35 24    0050*       dec (iy+tile_move_timer)
048CB2 C0          0051*       ret nz
048CB3             0052*   ; spwan a seeker
048CB3 CD D5 1F 04 0053*       call enemy_spawn_seeker
048CB7             0054*       ; ret ; DEBUG
048CB7             0055*       ; fall through to reset move timer
048CB7             0056*   pad_small_reset_move_timer:
048CB7 CD 14 05 04 0057*       call rand_8     ; snag a random number
048CBB E6 1F       0058*       and %00011111   ; keep only 5 lowest bits (max 31)
048CBD C6 40       0059*       add a,64 ; range is now 64-127
048CBF FD 77 24    0060*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048CC2 C9          0061*       ret
048CC3             0062*   
048CC3             0063*   kill_pad_small:
048CC3 CD DE 7C 04 0064*       call update_score
048CC7 C3 B7 8A 04 0065*       jp activate_crater
048CCB             0066*   ; end move_pad_small
048CCB             0078        include "tile_turret_fireball.inc"
048CCB             0001*   turret_fireball_defaults:
048CCB 02          0002*       db enemy_ground         ; type
048CCC 83 01 00    0003*       dl BUF_TURRET_000       ; base_bufferId
048CCF F1 8C 04    0004*       dl move_turret_fireball ; move_program
048CD2 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048CD3 10          0006*       db 16                   ; dim_x
048CD4 10          0007*       db 16                   ; dim_y
048CD5 20          0008*       db 32                   ; num_orientations
048CD6 01          0009*       db 1                    ; num_animations
048CD7 00          0010*       db 0                    ; animation
048CD8 00          0011*       db 0                    ; animation_timer
048CD9 00          0012*       db 0                    ; move_timer
048CDA 00          0013*       db 0                    ; move_step
048CDB 05          0014*       db 5                    ; points
048CDC 00          0015*       db 0                    ; shield_damage
048CDD 00          0016*       db 0                    ; frame
048CDE             0017*   
048CDE             0018*   activate_turret_fireball:
048CDE 21 CB 8C 04 0019*       ld hl,turret_fireball_defaults
048CE2             0020*   ; get next available active tile id
048CE2 CD D2 87 04 0021*       call spawn_active_tile
048CE6 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048CE7             0023*   ; other specific initialization
048CE7 CD 14 05 04 0024*       call rand_8     ; snag a random number
048CEB E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048CED DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a fireball
048CF0 C9          0027*       ret
048CF1             0028*   ; end activate_turret_fireball
048CF1             0029*   
048CF1             0030*   move_turret_fireball:
048CF1 CD EC 89 04 0031*       call move_active_tile
048CF5 CA 99 87 04 0032*       jp z,table_deactivate_tile
048CF9 CD BF 1E 04 0033*       call check_enemy_collision_laser
048CFD CA 3A 8D 04 0034*       jp z,kill_turret_fireball
048D01             0035*   ; target player
048D01 CD 21 83 04 0036*       call tile_orientation_to_player
048D05 21 00 04 00 0037*       ld hl,speed_fireball
048D09 22 71 83 04 0038*       ld (Vp),hl ; param for targeting_computer
048D0D CD 89 83 04 0039*       call targeting_computer
048D11 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
048D14 CD 70 88 04 0041*       call tile_frame_heading
048D18 CD 40 8A 04 0042*       call draw_active_tile
048D1C             0043*   ; check player alive
048D1C DD 21 67 99 0044*       ld ix,player_begin
       04          
048D21 DD CB 1D 76 0045*       bit sprite_alive,(ix+sprite_collisions)
048D25 C8          0046*       ret z ; player dead so nothing more to do
048D26             0047*   ; check whether it is time to spawn a fireball
048D26 FD 35 24    0048*       dec (iy+tile_move_timer)
048D29 C0          0049*       ret nz
048D2A             0050*   ; spwan a fireball
048D2A CD 0F 1F 04 0051*       call enemy_spawn_fireball
048D2E             0052*       ; fall through to reset move timer
048D2E             0053*   turret_fireball_reset_move_timer:
048D2E CD 14 05 04 0054*       call rand_8     ; snag a random number
048D32 E6 1F       0055*       and %00011111   ; keep only 5 lowest bits (max 31)
048D34 C6 18       0056*       add a,24 ; range is now 24-55
048D36 FD 77 24    0057*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048D39 C9          0058*       ret
048D3A             0059*   
048D3A             0060*   kill_turret_fireball:
048D3A CD DE 7C 04 0061*       call update_score
048D3E C3 B7 8A 04 0062*       jp activate_crater
048D42             0063*   ; end move_turret_fireball
048D42             0079        include "debug.inc"
048D42             0001*   printHexA:
048D42 F5          0002*       push af
048D43 C5          0003*       push bc
048D44 CD AA 00 04 0004*       call printHex8
048D48 3E 20       0005*       ld a,' '
048D4A 5B D7       0006*       rst.lil 10h
048D4C C1          0007*       pop bc
048D4D F1          0008*       pop af
048D4E C9          0009*       ret
048D4F             0010*   
048D4F             0011*   printHexHL:
048D4F F5          0012*       push af
048D50 C5          0013*       push bc
048D51 CD A4 00 04 0014*       call printHex16
048D55 3E 20       0015*       ld a,' '
048D57 5B D7       0016*       rst.lil 10h
048D59 C1          0017*       pop bc
048D5A F1          0018*       pop af
048D5B C9          0019*       ret
048D5C             0020*   
048D5C             0021*   printHexUHL:
048D5C F5          0022*       push af
048D5D C5          0023*       push bc
048D5E CD 9C 00 04 0024*       call printHex24
048D62 3E 20       0025*       ld a,' '
048D64 5B D7       0026*       rst.lil 10h
048D66 C1          0027*       pop bc
048D67 F1          0028*       pop af
048D68 C9          0029*       ret
048D69             0030*   
048D69             0031*   printHexAUHL:
048D69 F5          0032*       push af
048D6A C5          0033*       push bc
048D6B CD AA 00 04 0034*       call printHex8
048D6F 3E 2E       0035*       ld a,'.'
048D71 5B D7       0036*       rst.lil 10h
048D73 CD 9C 00 04 0037*       call printHex24
048D77 3E 20       0038*       ld a,' '
048D79 5B D7       0039*       rst.lil 10h
048D7B C1          0040*       pop bc
048D7C F1          0041*       pop af
048D7D C9          0042*       ret
048D7E             0043*   
048D7E             0044*   printHexABHL:
048D7E             0045*   ; preserve registers
048D7E C5          0046*       push bc ; b will be ok c will not
048D7F F5          0047*       push af ; will get totally destroyed
048D80             0048*   ; print a
048D80 CD AA 00 04 0049*       call printHex8
048D84             0050*   ; print b
048D84 78          0051*       ld a,b
048D85 CD AA 00 04 0052*       call printHex8
048D89             0053*   ; print hl
048D89 CD A4 00 04 0054*       call printHex16
048D8D             0055*   ; restore registers
048D8D F1          0056*       pop af
048D8E C1          0057*       pop bc
048D8F C9          0058*       ret
048D90             0059*   
048D90             0060*   printHexBHL:
048D90             0061*   ; preserve registers
048D90 C5          0062*       push bc ; b will be ok c will not
048D91 F5          0063*       push af ; will get totally destroyed
048D92             0064*   ; print b
048D92 78          0065*       ld a,b
048D93 CD AA 00 04 0066*       call printHex8
048D97             0067*   ; print hl
048D97 CD A4 00 04 0068*       call printHex16
048D9B             0069*   ; restore registers
048D9B F1          0070*       pop af
048D9C C1          0071*       pop bc
048D9D C9          0072*       ret
048D9E             0073*   
048D9E             0074*   printHexCDE:
048D9E             0075*   ; preserve registers
048D9E C5          0076*       push bc ; b will be ok c will not
048D9F F5          0077*       push af ; will get totally destroyed
048DA0             0078*   ; print c
048DA0 79          0079*       ld a,c
048DA1 CD AA 00 04 0080*       call printHex8
048DA5             0081*   ; print de
048DA5 EB          0082*       ex de,hl
048DA6 CD A4 00 04 0083*       call printHex16
048DAA EB          0084*       ex de,hl
048DAB             0085*   ; restore registers
048DAB F1          0086*       pop af
048DAC C1          0087*       pop bc
048DAD C9          0088*       ret
048DAE             0089*   
048DAE             0090*   printHexUIX:
048DAE             0091*   ; store everything in scratch
048DAE 22 31 03 04 0092*       ld (uhl),hl
048DB2 ED 43 34 03 0093*       ld (ubc),bc
       04          
048DB7 ED 53 37 03 0094*       ld (ude),de
       04          
048DBC DD 22 3A 03 0095*       ld (uix),ix
       04          
048DC1 FD 22 3D 03 0096*       ld (uiy),iy
       04          
048DC6 F5          0097*       push af ; fml
048DC7             0098*   
048DC7 21 C8 02 04 0099*       ld hl,str_ixu
048DCB CD 63 00 04 0100*       call printString
048DCF 2A 3A 03 04 0101*       ld hl,(uix)
048DD3 CD 9C 00 04 0102*       call printHex24
048DD7 CD 78 00 04 0103*       call printNewLine
048DDB             0104*   
048DDB             0105*   ; restore everything
048DDB 2A 31 03 04 0106*       ld hl, (uhl)
048DDF ED 4B 34 03 0107*       ld bc, (ubc)
       04          
048DE4 ED 5B 37 03 0108*       ld de, (ude)
       04          
048DE9 DD 2A 3A 03 0109*       ld ix, (uix)
       04          
048DEE FD 2A 3D 03 0110*       ld iy, (uiy)
       04          
048DF3 F1          0111*       pop af
048DF4             0112*   ; all done
048DF4 C9          0113*       ret
048DF5             0114*   
048DF5             0115*   
048DF5             0116*   ; print registers to screen in hexidecimal format
048DF5             0117*   ; inputs: none
048DF5             0118*   ; outputs: values of every register printed to screen
048DF5             0119*   ;    values of each register in global scratch memory
048DF5             0120*   ; destroys: nothing
048DF5             0121*   stepRegistersHex:
048DF5             0122*   ; store everything in scratch
048DF5 22 31 03 04 0123*       ld (uhl),hl
048DF9 ED 43 34 03 0124*       ld (ubc),bc
       04          
048DFE ED 53 37 03 0125*       ld (ude),de
       04          
048E03 DD 22 3A 03 0126*       ld (uix),ix
       04          
048E08 FD 22 3D 03 0127*       ld (uiy),iy
       04          
048E0D F5          0128*       push af ; fml
048E0E E1          0129*       pop hl ; thanks, zilog
048E0F 22 2E 03 04 0130*       ld (uaf),hl
048E13 F5          0131*       push af ; dammit
048E14             0132*   
048E14             0133*   ; home the cursor
048E14             0134*       ; call vdu_home_cursor
048E14             0135*   
048E14             0136*   ; print each register
048E14 21 B4 02 04 0137*       ld hl,str_afu
048E18 CD 63 00 04 0138*       call printString
048E1C 2A 2E 03 04 0139*       ld hl,(uaf)
048E20 CD 9C 00 04 0140*       call printHex24
048E24 CD 78 00 04 0141*       call printNewLine
048E28             0142*   
048E28 21 B9 02 04 0143*       ld hl,str_hlu
048E2C CD 63 00 04 0144*       call printString
048E30 2A 31 03 04 0145*       ld hl,(uhl)
048E34 CD 9C 00 04 0146*       call printHex24
048E38 CD 78 00 04 0147*       call printNewLine
048E3C             0148*   
048E3C 21 BE 02 04 0149*       ld hl,str_bcu
048E40 CD 63 00 04 0150*       call printString
048E44 2A 34 03 04 0151*       ld hl,(ubc)
048E48 CD 9C 00 04 0152*       call printHex24
048E4C CD 78 00 04 0153*       call printNewLine
048E50             0154*   
048E50 21 C3 02 04 0155*       ld hl,str_deu
048E54 CD 63 00 04 0156*       call printString
048E58 2A 37 03 04 0157*       ld hl,(ude)
048E5C CD 9C 00 04 0158*       call printHex24
048E60 CD 78 00 04 0159*       call printNewLine
048E64             0160*   
048E64 21 C8 02 04 0161*       ld hl,str_ixu
048E68 CD 63 00 04 0162*       call printString
048E6C 2A 3A 03 04 0163*       ld hl,(uix)
048E70 CD 9C 00 04 0164*       call printHex24
048E74 CD 78 00 04 0165*       call printNewLine
048E78             0166*   
048E78 21 CD 02 04 0167*       ld hl,str_iyu
048E7C CD 63 00 04 0168*       call printString
048E80 2A 3D 03 04 0169*       ld hl,(uiy)
048E84 CD 9C 00 04 0170*       call printHex24
048E88 CD 78 00 04 0171*       call printNewLine
048E8C             0172*   
048E8C             0173*       ; call vsync
048E8C             0174*   
048E8C CD 78 00 04 0175*       call printNewLine
048E90             0176*   
048E90             0177*   ; check for right shift key and quit if pressed
048E90             0178*       MOSCALL mos_getkbmap
048E90 3E 1E       0001*M1 			LD	A, function
048E92 5B CF       0002*M1 			RST.LIL	08h
048E94             0179*   @stayhere:
048E94             0180*   ; 7 RightShift
048E94 DD CB 00 76 0181*       bit 6,(ix+0)
048E98 20 02       0182*       jr nz,@RightShift
048E9A 18 F8       0183*       jr @stayhere
048E9C             0184*   @RightShift:
048E9C DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
048EA0 3E 80       0186*       ld a,%10000000
048EA2             0187*       ; call multiPurposeDelay
048EA2             0188*   
048EA2             0189*   ; restore everything
048EA2 2A 31 03 04 0190*       ld hl, (uhl)
048EA6 ED 4B 34 03 0191*       ld bc, (ubc)
       04          
048EAB ED 5B 37 03 0192*       ld de, (ude)
       04          
048EB0 DD 2A 3A 03 0193*       ld ix, (uix)
       04          
048EB5 FD 2A 3D 03 0194*       ld iy, (uiy)
       04          
048EBA F1          0195*       pop af
048EBB             0196*   ; all done
048EBB C9          0197*       ret
048EBC             0198*   
048EBC             0199*   ; print registers to screen in hexidecimal format
048EBC             0200*   ; inputs: none
048EBC             0201*   ; outputs: values of every register printed to screen
048EBC             0202*   ;    values of each register in global scratch memory
048EBC             0203*   ; destroys: nothing
048EBC             0204*   dumpRegistersHex:
048EBC             0205*   ; store everything in scratch
048EBC 22 31 03 04 0206*       ld (uhl),hl
048EC0 ED 43 34 03 0207*       ld (ubc),bc
       04          
048EC5 ED 53 37 03 0208*       ld (ude),de
       04          
048ECA DD 22 3A 03 0209*       ld (uix),ix
       04          
048ECF FD 22 3D 03 0210*       ld (uiy),iy
       04          
048ED4 F5          0211*       push af ; fml
048ED5 E1          0212*       pop hl ; thanks, zilog
048ED6 22 2E 03 04 0213*       ld (uaf),hl
048EDA F5          0214*       push af ; dammit
048EDB             0215*   
048EDB             0216*   ; home the cursor
048EDB             0217*       ; call vdu_home_cursor
048EDB             0218*       ; call printNewLine
048EDB             0219*   
048EDB             0220*   ; print each register
048EDB 21 B4 02 04 0221*       ld hl,str_afu
048EDF CD 63 00 04 0222*       call printString
048EE3 2A 2E 03 04 0223*       ld hl,(uaf)
048EE7 CD 9C 00 04 0224*       call printHex24
048EEB CD 78 00 04 0225*       call printNewLine
048EEF             0226*   
048EEF 21 B9 02 04 0227*       ld hl,str_hlu
048EF3 CD 63 00 04 0228*       call printString
048EF7 2A 31 03 04 0229*       ld hl,(uhl)
048EFB CD 9C 00 04 0230*       call printHex24
048EFF CD 78 00 04 0231*       call printNewLine
048F03             0232*   
048F03 21 BE 02 04 0233*       ld hl,str_bcu
048F07 CD 63 00 04 0234*       call printString
048F0B 2A 34 03 04 0235*       ld hl,(ubc)
048F0F CD 9C 00 04 0236*       call printHex24
048F13 CD 78 00 04 0237*       call printNewLine
048F17             0238*   
048F17 21 C3 02 04 0239*       ld hl,str_deu
048F1B CD 63 00 04 0240*       call printString
048F1F 2A 37 03 04 0241*       ld hl,(ude)
048F23 CD 9C 00 04 0242*       call printHex24
048F27 CD 78 00 04 0243*       call printNewLine
048F2B             0244*   
048F2B 21 C8 02 04 0245*       ld hl,str_ixu
048F2F CD 63 00 04 0246*       call printString
048F33 2A 3A 03 04 0247*       ld hl,(uix)
048F37 CD 9C 00 04 0248*       call printHex24
048F3B CD 78 00 04 0249*       call printNewLine
048F3F             0250*   
048F3F 21 CD 02 04 0251*       ld hl,str_iyu
048F43 CD 63 00 04 0252*       call printString
048F47 2A 3D 03 04 0253*       ld hl,(uiy)
048F4B CD 9C 00 04 0254*       call printHex24
048F4F             0255*   
048F4F CD 78 00 04 0256*       call printNewLine
048F53 CD 78 00 04 0257*       call printNewLine
048F57             0258*   ; restore everything
048F57 2A 31 03 04 0259*       ld hl, (uhl)
048F5B ED 4B 34 03 0260*       ld bc, (ubc)
       04          
048F60 ED 5B 37 03 0261*       ld de, (ude)
       04          
048F65 DD 2A 3A 03 0262*       ld ix, (uix)
       04          
048F6A FD 2A 3D 03 0263*       ld iy, (uiy)
       04          
048F6F F1          0264*       pop af
048F70             0265*   ; all done
048F70 C9          0266*       ret
048F71             0267*   
048F71             0268*   dumpRegistersHexPrime:
048F71 D9          0269*       exx
048F72 08          0270*       ex af,af'
048F73 CD BC 8E 04 0271*       call dumpRegistersHex
048F77 08          0272*       ex af,af'
048F78 D9          0273*       exx
048F79 C9          0274*       ret
048F7A             0275*   
048F7A             0276*   ; additionally dump prime registers
048F7A             0277*   ; inputs: none
048F7A             0278*   ; outputs: values of every register printed to screen
048F7A             0279*   ; destroys: nothing
048F7A             0280*   dumpRegistersHexAll:
048F7A CD BC 8E 04 0281*       call dumpRegistersHex
048F7E 08          0282*       ex af,af'
048F7F D9          0283*       exx
048F80 CD BC 8E 04 0284*       call dumpRegistersHex
048F84 08          0285*       ex af,af'
048F85 D9          0286*       exx
048F86 C9          0287*       ret
048F87             0288*   
048F87             0289*   ; print hlu to screen in hexidecimal format
048F87             0290*   ; inputs: none
048F87             0291*   ; destroys: nothing
048F87             0292*   print_hex_hl:
048F87 F5          0293*       push af
048F88 E5          0294*       push hl
048F89 21 B9 02 04 0295*       ld hl,str_hlu
048F8D CD 63 00 04 0296*       call printString
048F91 E1          0297*       pop hl
048F92 E5          0298*       push hl
048F93 CD 9C 00 04 0299*       call printHex24
048F97 3E 20       0300*       ld a,' '
048F99 5B D7       0301*       rst.lil 10h
048F9B E1          0302*       pop hl
048F9C F1          0303*       pop af
048F9D C9          0304*       ret
048F9E             0305*   
048F9E             0306*   ; print bcu to screen in hexidecimal format
048F9E             0307*   ; inputs: none
048F9E             0308*   ; destroys: nothing
048F9E             0309*   print_hex_bc:
048F9E F5          0310*       push af
048F9F E5          0311*       push hl
048FA0 C5          0312*       push bc
048FA1 21 BE 02 04 0313*       ld hl,str_bcu
048FA5 CD 63 00 04 0314*       call printString
048FA9 E1          0315*       pop hl
048FAA E5          0316*       push hl
048FAB CD 9C 00 04 0317*       call printHex24
048FAF 3E 20       0318*       ld a,' '
048FB1 5B D7       0319*       rst.lil 10h
048FB3 C1          0320*       pop bc
048FB4 E1          0321*       pop hl
048FB5 F1          0322*       pop af
048FB6 C9          0323*       ret
048FB7             0324*   
048FB7             0325*   ; print deu to screen in hexidecimal format
048FB7             0326*   ; inputs: none
048FB7             0327*   ; destroys: nothing
048FB7             0328*   print_hex_de:
048FB7 F5          0329*       push af
048FB8 E5          0330*       push hl
048FB9 D5          0331*       push de
048FBA 21 C3 02 04 0332*       ld hl,str_deu
048FBE CD 63 00 04 0333*       call printString
048FC2 E1          0334*       pop hl
048FC3 E5          0335*       push hl
048FC4 CD 9C 00 04 0336*       call printHex24
048FC8 3E 20       0337*       ld a,' '
048FCA 5B D7       0338*       rst.lil 10h
048FCC D1          0339*       pop de
048FCD E1          0340*       pop hl
048FCE F1          0341*       pop af
048FCF C9          0342*       ret
048FD0             0343*   
048FD0             0344*   
048FD0             0345*   ; inputs: whatever is in the flags register
048FD0             0346*   ; outputs: binary representation of flags
048FD0             0347*   ;          with a header so we know which is what
048FD0             0348*   ; destroys: nothing
048FD0             0349*   ; preserves: everything
048FD0             0350*   dumpFlags:
048FD0             0351*   ; first we curse zilog for not giving direct access to flags
048FD0 F5          0352*       push af ; this is so we can send it back unharmed
048FD1 F5          0353*       push af ; this is so we can pop it to hl
048FD2             0354*   ; store everything in scratch
048FD2 22 31 03 04 0355*       ld (uhl),hl
048FD6 ED 43 34 03 0356*       ld (ubc),bc
       04          
048FDB ED 53 37 03 0357*       ld (ude),de
       04          
048FE0 DD 22 3A 03 0358*       ld (uix),ix
       04          
048FE5 FD 22 3D 03 0359*       ld (uiy),iy
       04          
048FEA             0360*   ; next we print the header
048FEA 21 16 90 04 0361*       ld hl,@header
048FEE CD 63 00 04 0362*       call printString
048FF2 E1          0363*       pop hl ; flags are now in l
048FF3 7D          0364*       ld a,l ; flags are now in a
048FF4 CD 6A 02 04 0365*       call printBin8
048FF8 CD 78 00 04 0366*       call printNewLine
048FFC             0367*   ; restore everything
048FFC 2A 31 03 04 0368*       ld hl, (uhl)
049000 ED 4B 34 03 0369*       ld bc, (ubc)
       04          
049005 ED 5B 37 03 0370*       ld de, (ude)
       04          
04900A DD 2A 3A 03 0371*       ld ix, (uix)
       04          
04900F FD 2A 3D 03 0372*       ld iy, (uiy)
       04          
049014 F1          0373*       pop af ; send her home the way she came
049015 C9          0374*       ret
049016             0375*   ; Bit 7 (S): Sign flag
049016             0376*   ; Bit 6 (Z): Zero flag
049016             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
049016             0378*   ; Bit 4 (H): Half Carry flag
049016             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
049016             0380*   ; Bit 2 (PV): Parity/Overflow flag
049016             0381*   ; Bit 1 (N): Subtract flag
049016             0382*   ; Bit 0 (C): Carry flag
049016 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
049021             0384*   
049021             0385*   
049021             0386*   ; print bytes from an address to the screen in hexidecimal format
049021             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
049021             0388*   ; outputs: values of each byte printed to screen separated by spaces
049021             0389*   ; destroys: nothing
049021             0390*   dumpMemoryHex:
049021             0391*   ; save registers to the stack
049021 C5          0392*       push bc
049022 E5          0393*       push hl
049023 F5          0394*       push af
049024             0395*   
049024             0396*   ; print the address and separator
049024 CD 9C 00 04 0397*       call printHex24
049028 3E 3A       0398*       ld a,':'
04902A 5B D7       0399*       rst.lil 10h
04902C 3E 20       0400*       ld a,' '
04902E 5B D7       0401*       rst.lil 10h
049030             0402*   
049030             0403*   ; set b to be our loop counter
049030 F1          0404*       pop af
049031 47          0405*       ld b,a
049032 E1          0406*       pop hl
049033 E5          0407*       push hl
049034 F5          0408*       push af
049035             0409*   @loop:
049035             0410*   ; print the byte
049035 7E          0411*       ld a,(hl)
049036 CD AA 00 04 0412*       call printHex8
04903A             0413*   ; print a space
04903A 3E 20       0414*       ld a,' '
04903C 5B D7       0415*       rst.lil 10h
04903E 23          0416*       inc hl
04903F 10 F4       0417*       djnz @loop
049041 CD 78 00 04 0418*       call printNewLine
049045             0419*   
049045             0420*   ; restore everything
049045 F1          0421*       pop af
049046 E1          0422*       pop hl
049047 C1          0423*       pop bc
049048             0424*   
049048             0425*   ; all done
049048 C9          0426*       ret
049049             0427*   
049049             0428*   
049049             0429*   ; print bytes from an address to the screen in binary format
049049             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
049049             0431*   ; outputs: values of each byte printed to screen separated by spaces
049049             0432*   ; destroys: nothing
049049             0433*   dumpMemoryBin:
049049             0434*   ; save all registers to the stack
049049 F5          0435*       push af
04904A C5          0436*       push bc
04904B D5          0437*       push de
04904C E5          0438*       push hl
04904D DD E5       0439*       push ix
04904F FD E5       0440*       push iy
049051             0441*   
049051             0442*   ; set b to be our loop counter
049051 47          0443*       ld b,a
049052             0444*   @loop:
049052             0445*   ; print the byte
049052 7E          0446*       ld a,(hl)
049053 E5          0447*       push hl
049054 C5          0448*       push bc
049055 CD 6A 02 04 0449*       call printBin8
049059 C1          0450*       pop bc
04905A             0451*   ; print a space
04905A 3E 20       0452*       ld a,' '
04905C 5B D7       0453*       rst.lil 10h
04905E E1          0454*       pop hl
04905F 23          0455*       inc hl
049060 10 F0       0456*       djnz @loop
049062 CD 78 00 04 0457*       call printNewLine
049066             0458*   
049066             0459*   ; restore everything
049066 FD E1       0460*       pop iy
049068 DD E1       0461*       pop ix
04906A E1          0462*       pop hl
04906B D1          0463*       pop de
04906C C1          0464*       pop bc
04906D F1          0465*       pop af
04906E             0466*   ; all done
04906E C9          0467*       ret
04906F             0468*   
04906F             0469*   ; print bytes from an address to the screen in binary format
04906F             0470*   ; with the bits of each byte in reverse order (lsb first)
04906F             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04906F             0472*   ; outputs: values of each byte printed to screen separated by spaces
04906F             0473*   ; destroys: nothing
04906F             0474*   dumpMemoryBinRev:
04906F             0475*   ; save all registers to the stack
04906F F5          0476*       push af
049070 C5          0477*       push bc
049071 D5          0478*       push de
049072 E5          0479*       push hl
049073 DD E5       0480*       push ix
049075 FD E5       0481*       push iy
049077             0482*   
049077             0483*   ; set b to be our loop counter
049077 47          0484*       ld b,a
049078             0485*   @loop:
049078             0486*   ; print the byte
049078 7E          0487*       ld a,(hl)
049079 E5          0488*       push hl
04907A C5          0489*       push bc
04907B CD 8F 02 04 0490*       call printBin8Rev
04907F C1          0491*       pop bc
049080             0492*   ; print a space
049080 3E 20       0493*       ld a,' '
049082 5B D7       0494*       rst.lil 10h
049084 E1          0495*       pop hl
049085 23          0496*       inc hl
049086 10 F0       0497*       djnz @loop
049088 CD 78 00 04 0498*       call printNewLine
04908C             0499*   
04908C             0500*   ; restore everything
04908C FD E1       0501*       pop iy
04908E DD E1       0502*       pop ix
049090 E1          0503*       pop hl
049091 D1          0504*       pop de
049092 C1          0505*       pop bc
049093 F1          0506*       pop af
049094             0507*   ; all done
049094 C9          0508*       ret
049095             0509*   
049095             0510*   DEBUG_PRINT:
049095             0511*       PUSH_ALL
049095 08          0001*M1     ex af,af'
049096 D9          0002*M1     exx
049097 F5          0003*M1     push af
049098 E5          0004*M1     push hl
049099 C5          0005*M1     push bc
04909A D5          0006*M1     push de
04909B             0007*M1 
04909B 08          0008*M1     ex af,af'
04909C D9          0009*M1     exx
04909D F5          0010*M1     push af
04909E E5          0011*M1     push hl
04909F C5          0012*M1     push bc
0490A0 D5          0013*M1     push de
0490A1 DD E5       0014*M1     push ix
0490A3 FD E5       0015*M1     push iy
0490A5 0E 00       0512*       ld c,0 ; X
0490A7 06 00       0513*       ld b,0 ; Y
0490A9 CD 8C 12 04 0514*       call vdu_move_cursor
0490AD             0515*       POP_ALL
0490AD FD E1       0001*M1     pop iy
0490AF DD E1       0002*M1     pop ix
0490B1 D1          0003*M1     pop de
0490B2 C1          0004*M1     pop bc
0490B3 E1          0005*M1     pop hl
0490B4 F1          0006*M1     pop af
0490B5 08          0007*M1     ex af,af'
0490B6 D9          0008*M1     exx
0490B7             0009*M1 
0490B7 D1          0010*M1     pop de
0490B8 C1          0011*M1     pop bc
0490B9 E1          0012*M1     pop hl
0490BA F1          0013*M1     pop af
0490BB 08          0014*M1     ex af,af'
0490BC D9          0015*M1     exx
0490BD             0516*       PUSH_ALL
0490BD 08          0001*M1     ex af,af'
0490BE D9          0002*M1     exx
0490BF F5          0003*M1     push af
0490C0 E5          0004*M1     push hl
0490C1 C5          0005*M1     push bc
0490C2 D5          0006*M1     push de
0490C3             0007*M1 
0490C3 08          0008*M1     ex af,af'
0490C4 D9          0009*M1     exx
0490C5 F5          0010*M1     push af
0490C6 E5          0011*M1     push hl
0490C7 C5          0012*M1     push bc
0490C8 D5          0013*M1     push de
0490C9 DD E5       0014*M1     push ix
0490CB FD E5       0015*M1     push iy
0490CD CD D0 8F 04 0517*       call dumpFlags
0490D1             0518*       POP_ALL
0490D1 FD E1       0001*M1     pop iy
0490D3 DD E1       0002*M1     pop ix
0490D5 D1          0003*M1     pop de
0490D6 C1          0004*M1     pop bc
0490D7 E1          0005*M1     pop hl
0490D8 F1          0006*M1     pop af
0490D9 08          0007*M1     ex af,af'
0490DA D9          0008*M1     exx
0490DB             0009*M1 
0490DB D1          0010*M1     pop de
0490DC C1          0011*M1     pop bc
0490DD E1          0012*M1     pop hl
0490DE F1          0013*M1     pop af
0490DF 08          0014*M1     ex af,af'
0490E0 D9          0015*M1     exx
0490E1             0519*       PUSH_ALL
0490E1 08          0001*M1     ex af,af'
0490E2 D9          0002*M1     exx
0490E3 F5          0003*M1     push af
0490E4 E5          0004*M1     push hl
0490E5 C5          0005*M1     push bc
0490E6 D5          0006*M1     push de
0490E7             0007*M1 
0490E7 08          0008*M1     ex af,af'
0490E8 D9          0009*M1     exx
0490E9 F5          0010*M1     push af
0490EA E5          0011*M1     push hl
0490EB C5          0012*M1     push bc
0490EC D5          0013*M1     push de
0490ED DD E5       0014*M1     push ix
0490EF FD E5       0015*M1     push iy
0490F1 CD BC 8E 04 0520*       call dumpRegistersHex
0490F5             0521*       ; call waitKeypress
0490F5             0522*       POP_ALL
0490F5 FD E1       0001*M1     pop iy
0490F7 DD E1       0002*M1     pop ix
0490F9 D1          0003*M1     pop de
0490FA C1          0004*M1     pop bc
0490FB E1          0005*M1     pop hl
0490FC F1          0006*M1     pop af
0490FD 08          0007*M1     ex af,af'
0490FE D9          0008*M1     exx
0490FF             0009*M1 
0490FF D1          0010*M1     pop de
049100 C1          0011*M1     pop bc
049101 E1          0012*M1     pop hl
049102 F1          0013*M1     pop af
049103 08          0014*M1     ex af,af'
049104 D9          0015*M1     exx
049105 C9          0523*       ret
049106             0524*   
049106             0525*   DEBUG_PRINT_TILE_TABLE:
049106             0526*       PUSH_ALL
049106 08          0001*M1     ex af,af'
049107 D9          0002*M1     exx
049108 F5          0003*M1     push af
049109 E5          0004*M1     push hl
04910A C5          0005*M1     push bc
04910B D5          0006*M1     push de
04910C             0007*M1 
04910C 08          0008*M1     ex af,af'
04910D D9          0009*M1     exx
04910E F5          0010*M1     push af
04910F E5          0011*M1     push hl
049110 C5          0012*M1     push bc
049111 D5          0013*M1     push de
049112 DD E5       0014*M1     push ix
049114 FD E5       0015*M1     push iy
049116 CD 78 00 04 0527*       call printNewLine
04911A DD 21 09 84 0528*       ld ix,tile_stack
       04          
04911F DD 37 00    0529*       ld ix,(ix)
049122 CD BB 95 04 0530*       call dump_tile_record
049126 CD 78 00 04 0531*       call printNewLine
04912A             0532*       POP_ALL
04912A FD E1       0001*M1     pop iy
04912C DD E1       0002*M1     pop ix
04912E D1          0003*M1     pop de
04912F C1          0004*M1     pop bc
049130 E1          0005*M1     pop hl
049131 F1          0006*M1     pop af
049132 08          0007*M1     ex af,af'
049133 D9          0008*M1     exx
049134             0009*M1 
049134 D1          0010*M1     pop de
049135 C1          0011*M1     pop bc
049136 E1          0012*M1     pop hl
049137 F1          0013*M1     pop af
049138 08          0014*M1     ex af,af'
049139 D9          0015*M1     exx
04913A C9          0533*       ret
04913B             0534*   ; end DEBUG_PRINT_TILE_TABLE
04913B             0535*   
04913B             0536*   DEBUG_PRINT_TABLE:
04913B             0537*       PUSH_ALL
04913B 08          0001*M1     ex af,af'
04913C D9          0002*M1     exx
04913D F5          0003*M1     push af
04913E E5          0004*M1     push hl
04913F C5          0005*M1     push bc
049140 D5          0006*M1     push de
049141             0007*M1 
049141 08          0008*M1     ex af,af'
049142 D9          0009*M1     exx
049143 F5          0010*M1     push af
049144 E5          0011*M1     push hl
049145 C5          0012*M1     push bc
049146 D5          0013*M1     push de
049147 DD E5       0014*M1     push ix
049149 FD E5       0015*M1     push iy
04914B CD 78 00 04 0538*       call printNewLine
04914F CD F3 93 04 0539*       call dump_sprite_record
049153 CD 78 00 04 0540*       call printNewLine
049157 CD 78 00 04 0541*       call printNewLine
04915B             0542*   
04915B FD E5       0543*       push iy
04915D DD E1       0544*       pop ix
04915F CD F3 93 04 0545*       call dump_sprite_record
049163 CD 78 00 04 0546*       call printNewLine
049167 CD 78 00 04 0547*       call printNewLine
04916B             0548*       POP_ALL
04916B FD E1       0001*M1     pop iy
04916D DD E1       0002*M1     pop ix
04916F D1          0003*M1     pop de
049170 C1          0004*M1     pop bc
049171 E1          0005*M1     pop hl
049172 F1          0006*M1     pop af
049173 08          0007*M1     ex af,af'
049174 D9          0008*M1     exx
049175             0009*M1 
049175 D1          0010*M1     pop de
049176 C1          0011*M1     pop bc
049177 E1          0012*M1     pop hl
049178 F1          0013*M1     pop af
049179 08          0014*M1     ex af,af'
04917A D9          0015*M1     exx
04917B C9          0549*       RET
04917C             0550*   
04917C             0551*   DEBUG_WAITKEYPRESS:
04917C             0552*       PUSH_ALL
04917C 08          0001*M1     ex af,af'
04917D D9          0002*M1     exx
04917E F5          0003*M1     push af
04917F E5          0004*M1     push hl
049180 C5          0005*M1     push bc
049181 D5          0006*M1     push de
049182             0007*M1 
049182 08          0008*M1     ex af,af'
049183 D9          0009*M1     exx
049184 F5          0010*M1     push af
049185 E5          0011*M1     push hl
049186 C5          0012*M1     push bc
049187 D5          0013*M1     push de
049188 DD E5       0014*M1     push ix
04918A FD E5       0015*M1     push iy
04918C CD 56 03 04 0553*       call waitKeypress
049190             0554*       POP_ALL
049190 FD E1       0001*M1     pop iy
049192 DD E1       0002*M1     pop ix
049194 D1          0003*M1     pop de
049195 C1          0004*M1     pop bc
049196 E1          0005*M1     pop hl
049197 F1          0006*M1     pop af
049198 08          0007*M1     ex af,af'
049199 D9          0008*M1     exx
04919A             0009*M1 
04919A D1          0010*M1     pop de
04919B C1          0011*M1     pop bc
04919C E1          0012*M1     pop hl
04919D F1          0013*M1     pop af
04919E 08          0014*M1     ex af,af'
04919F D9          0015*M1     exx
0491A0 C9          0555*       RET
0491A1             0556*   
0491A1             0557*   DEBUG_PRINT_FIELDS:
0491A1             0558*       ; PUSH_ALL
0491A1 01 00 00 00 0559*       ld bc,0
0491A5 4F          0560*       ld c,a
0491A6 DD 21 67 98 0561*       ld ix,table_base
       04          
0491AB DD 09       0562*       add ix,bc
0491AD 06 14       0563*       ld b,table_num_records
0491AF             0564*   @@:
0491AF DD E5       0565*       push ix
0491B1 E1          0566*       pop hl
0491B2 C5          0567*       push bc ; save loop counter
0491B3 3E 01       0568*       ld a,1 ; print one byte
0491B5 CD 21 90 04 0569*       call dumpMemoryHex
0491B9 ED 32 40    0570*       lea ix,ix+table_record_size
0491BC C1          0571*       pop bc ; restore loop counter
0491BD 10 F0       0572*       djnz @b
0491BF             0573*       ; POP_ALL
0491BF C9          0574*       ret
0491C0             0575*   
0491C0             0576*   DEBUG_PRINT_TILE_STACK:
0491C0             0577*       PUSH_ALL
0491C0 08          0001*M1     ex af,af'
0491C1 D9          0002*M1     exx
0491C2 F5          0003*M1     push af
0491C3 E5          0004*M1     push hl
0491C4 C5          0005*M1     push bc
0491C5 D5          0006*M1     push de
0491C6             0007*M1 
0491C6 08          0008*M1     ex af,af'
0491C7 D9          0009*M1     exx
0491C8 F5          0010*M1     push af
0491C9 E5          0011*M1     push hl
0491CA C5          0012*M1     push bc
0491CB D5          0013*M1     push de
0491CC DD E5       0014*M1     push ix
0491CE FD E5       0015*M1     push iy
0491D0 01 00 00 00 0578*       ld bc,0
0491D4 11 00 00 00 0579*       ld de,0
0491D8 CD 25 13 04 0580*       call vdu_set_gfx_origin
0491DC 01 00 00 00 0581*       ld bc,0
0491E0 11 00 00 00 0582*       ld de,0
0491E4 DD 21 7F 00 0583*       ld ix,127
       00          
0491E9 FD 21 F0 00 0584*       ld iy,240
       00          
0491EE CD 40 13 04 0585*       call vdu_set_gfx_viewport
0491F2 CD B3 12 04 0586*       call vdu_clg
0491F6 CD 55 12 04 0587*       call vdu_home_cursor
0491FA CD 78 00 04 0588*       call printNewLine
0491FE CD 78 00 04 0589*       call printNewLine
049202 2A 0C 87 04 0590*       ld hl,(tile_stack_pointer)
049206 CD 5C 8D 04 0591*       call printHexUHL
04920A CD 78 00 04 0592*       call printNewLine
04920E 3A 12 87 04 0593*       ld a,(num_active_tiles)
049212 CD 42 8D 04 0594*       call printHexA
049216 CD 78 00 04 0595*       call printNewLine
04921A A7          0596*       and a
04921B CA 49 92 04 0597*       jp z,@done
04921F DD 21 09 84 0598*       ld ix,tile_stack
       04          
049224 3A 12 87 04 0599*       ld a,(num_active_tiles)
049228 47          0600*       ld b,a
049229             0601*   @loop:
049229 C5          0602*       push bc
04922A DD E5       0603*       push ix
04922C DD 37 00    0604*       ld ix,(ix)
04922F DD 7E 00    0605*       ld a,(ix+tile_id)
049232 CD 42 8D 04 0606*       call printHexA
049236 DD 7E 16    0607*       ld a,(ix+tile_type)
049239 CD 42 8D 04 0608*       call printHexA
04923D CD 78 00 04 0609*       call printNewLine
049241 DD E1       0610*       pop ix
049243 ED 32 03    0611*       lea ix,ix+3
049246 C1          0612*       pop bc
049247 10 E0       0613*       djnz @loop
049249             0614*   @done:
049249             0615*       POP_ALL
049249 FD E1       0001*M1     pop iy
04924B DD E1       0002*M1     pop ix
04924D D1          0003*M1     pop de
04924E C1          0004*M1     pop bc
04924F E1          0005*M1     pop hl
049250 F1          0006*M1     pop af
049251 08          0007*M1     ex af,af'
049252 D9          0008*M1     exx
049253             0009*M1 
049253 D1          0010*M1     pop de
049254 C1          0011*M1     pop bc
049255 E1          0012*M1     pop hl
049256 F1          0013*M1     pop af
049257 08          0014*M1     ex af,af'
049258 D9          0015*M1     exx
049259 C9          0616*       ret
04925A             0617*   
04925A             0618*   DEBUG_DUMP_PLAYER_RECORD:
04925A             0619*       PUSH_ALL
04925A 08          0001*M1     ex af,af'
04925B D9          0002*M1     exx
04925C F5          0003*M1     push af
04925D E5          0004*M1     push hl
04925E C5          0005*M1     push bc
04925F D5          0006*M1     push de
049260             0007*M1 
049260 08          0008*M1     ex af,af'
049261 D9          0009*M1     exx
049262 F5          0010*M1     push af
049263 E5          0011*M1     push hl
049264 C5          0012*M1     push bc
049265 D5          0013*M1     push de
049266 DD E5       0014*M1     push ix
049268 FD E5       0015*M1     push iy
04926A CD 78 00 04 0620*       call printNewLine
04926E CD 28 97 04 0621*       CALL dump_player_record
049272 CD 78 00 04 0622*       call printNewLine
049276             0623*       POP_ALL
049276 FD E1       0001*M1     pop iy
049278 DD E1       0002*M1     pop ix
04927A D1          0003*M1     pop de
04927B C1          0004*M1     pop bc
04927C E1          0005*M1     pop hl
04927D F1          0006*M1     pop af
04927E 08          0007*M1     ex af,af'
04927F D9          0008*M1     exx
049280             0009*M1 
049280 D1          0010*M1     pop de
049281 C1          0011*M1     pop bc
049282 E1          0012*M1     pop hl
049283 F1          0013*M1     pop af
049284 08          0014*M1     ex af,af'
049285 D9          0015*M1     exx
049286 C9          0624*       RET
049287             0625*   
049287             0626*   DEBUG_PRINT_SHIELDS:
049287             0627*       PUSH_ALL
049287 08          0001*M1     ex af,af'
049288 D9          0002*M1     exx
049289 F5          0003*M1     push af
04928A E5          0004*M1     push hl
04928B C5          0005*M1     push bc
04928C D5          0006*M1     push de
04928D             0007*M1 
04928D 08          0008*M1     ex af,af'
04928E D9          0009*M1     exx
04928F F5          0010*M1     push af
049290 E5          0011*M1     push hl
049291 C5          0012*M1     push bc
049292 D5          0013*M1     push de
049293 DD E5       0014*M1     push ix
049295 FD E5       0015*M1     push iy
049297 0E 00       0628*       ld c,0 ; X
049299 06 00       0629*       ld b,0 ; Y
04929B CD 8C 12 04 0630*       call vdu_move_cursor
04929F             0631*   
04929F CD D0 8F 04 0632*       call dumpFlags
0492A3 CD BC 8E 04 0633*       call dumpRegistersHex
0492A7             0634*   
0492A7 DD 21 21 7D 0635*       ld ix,bar_shields
       04          
0492AC             0636*   
0492AC CD 5C 00 04 0637*       call printInline
0492B0 76 61 6C 3A 0638*       asciz "val:"
       00          
0492B5 DD 27 00    0639*       ld hl,(ix+bar_val)
0492B8 CD C8 00 04 0640*       call printDec
0492BC CD 78 00 04 0641*       call printNewLine
0492C0             0642*   
0492C0 CD 5C 00 04 0643*       call printInline
0492C4 78 30 20 3A 0644*       asciz "x0 :"
       00          
0492C9 DD 27 03    0645*       ld hl,(ix+bar_x0)
0492CC CD C8 00 04 0646*       call printDec
0492D0 CD 78 00 04 0647*       call printNewLine
0492D4             0648*   
0492D4 CD 5C 00 04 0649*       call printInline
0492D8 79 30 20 3A 0650*       asciz "y0 :"
       00          
0492DD DD 27 06    0651*       ld hl,(ix+bar_y0)
0492E0 CD C8 00 04 0652*       call printDec
0492E4 CD 78 00 04 0653*       call printNewLine
0492E8             0654*   
0492E8 CD 5C 00 04 0655*       call printInline
0492EC 78 31 20 3A 0656*       asciz "x1 :"
       00          
0492F1 DD 27 09    0657*       ld hl,(ix+bar_x1)
0492F4 CD C8 00 04 0658*       call printDec
0492F8 CD 78 00 04 0659*       call printNewLine
0492FC             0660*   
0492FC CD 5C 00 04 0661*       call printInline
049300 79 31 20 3A 0662*       asciz "y1 :"
       00          
049305 DD 27 0C    0663*       ld hl,(ix+bar_y1)
049308 CD C8 00 04 0664*       call printDec
04930C CD 78 00 04 0665*       call printNewLine
049310             0666*   
049310 CD 5C 00 04 0667*       call printInline
049314 79 20 20 3A 0668*       asciz "y  :"
       00          
049319 DD 27 0F    0669*       ld hl,(ix+bar_y)
04931C CD C8 00 04 0670*       call printDec
049320 CD 78 00 04 0671*       call printNewLine
049324             0672*   
049324             0673*       POP_ALL
049324 FD E1       0001*M1     pop iy
049326 DD E1       0002*M1     pop ix
049328 D1          0003*M1     pop de
049329 C1          0004*M1     pop bc
04932A E1          0005*M1     pop hl
04932B F1          0006*M1     pop af
04932C 08          0007*M1     ex af,af'
04932D D9          0008*M1     exx
04932E             0009*M1 
04932E D1          0010*M1     pop de
04932F C1          0011*M1     pop bc
049330 E1          0012*M1     pop hl
049331 F1          0013*M1     pop af
049332 08          0014*M1     ex af,af'
049333 D9          0015*M1     exx
049334             0674*       ; call waitKeypress
049334 C9          0675*       ret
049335             0676*   ; end DEBUG_PRINT_SHIELDS
049335             0677*   
049335             0678*   DEBUG_PRINT_BAR_UPDATE:
049335 0E 00       0679*       ld c,0 ; X
049337 06 00       0680*       ld b,0 ; Y
049339 CD 8C 12 04 0681*       call vdu_move_cursor
04933D             0682*   
04933D CD 5C 00 04 0683*       call printInline
049341 78 30 20 20 0684*       asciz "x0  :"
       3A 00       
049347 21 00 00 00 0685*       ld hl,0 ; clear hlu
04934B DD 6E 01    0686*       ld l,(ix+@x0-@cmd0+0)
04934E DD 66 02    0687*       ld h,(ix+@x0-@cmd0+1)
049351 CD C8 00 04 0688*       call printDec
049355 CD 78 00 04 0689*       call printNewLine
049359             0690*   
049359 CD 5C 00 04 0691*       call printInline
04935D 79 30 20 20 0692*       asciz "y0  :"
       3A 00       
049363 21 00 00 00 0693*       ld hl,0 ; clear hlu
049367 DD 6E 07    0694*       ld l,(ix+@y0-@cmd0+0)
04936A DD 66 08    0695*       ld h,(ix+@y0-@cmd0+1)
04936D CD C8 00 04 0696*       call printDec
049371 CD 78 00 04 0697*       call printNewLine
049375             0698*   
049375 CD 5C 00 04 0699*       call printInline
049379 78 31 20 20 0700*       asciz "x1  :"
       3A 00       
04937F 21 00 00 00 0701*       ld hl,0 ; clear hlu
049383 DD 6E 05    0702*       ld l,(ix+@x1-@cmd0+0)
049386 DD 66 06    0703*       ld h,(ix+@x1-@cmd0+1)
049389 CD C8 00 04 0704*       call printDec
04938D CD 78 00 04 0705*       call printNewLine
049391             0706*   
049391 CD 5C 00 04 0707*       call printInline
049395 79 31 20 20 0708*       asciz "y1  :"
       3A 00       
04939B 21 00 00 00 0709*       ld hl,0 ; clear hlu
04939F DD 6E 03    0710*       ld l,(ix+@y1-@cmd0+0)
0493A2 DD 66 04    0711*       ld h,(ix+@y1-@cmd0+1)
0493A5 CD C8 00 04 0712*       call printDec
0493A9 CD 78 00 04 0713*       call printNewLine
0493AD             0714*   
0493AD CD 5C 00 04 0715*       call printInline
0493B1 78 32 20 20 0716*       asciz "x2  :"
       3A 00       
0493B7 21 00 00 00 0717*       ld hl,0 ; clear hlu
0493BB DD 6E 0B    0718*       ld l,(ix+@x2-@cmd0+0)
0493BE DD 66 0C    0719*       ld h,(ix+@x2-@cmd0+1)
0493C1 CD C8 00 04 0720*       call printDec
0493C5 CD 78 00 04 0721*       call printNewLine
0493C9             0722*   
0493C9 CD 5C 00 04 0723*       call printInline
0493CD 58 32 20 79 0724*       asciz "X2 y2:"
       32 3A 00    
0493D4 21 00 00 00 0725*       ld hl,0 ; clear hlu
0493D8 DD 6E 0D    0726*       ld l,(ix+@y2-@cmd0+0)
0493DB DD 66 0E    0727*       ld h,(ix+@y2-@cmd0+1)
0493DE CD C8 00 04 0728*       call printDec
0493E2 C9          0729*       ret
0493E3 18          0730*   @cmd0:   db 24
0493E4 00 00       0731*   @x0: 	dw 0x0000
0493E6 00 00       0732*   @y1: 	dw 0x0000
0493E8 00 00       0733*   @x1: 	dw 0x0000
0493EA 00 00       0734*   @y0: 	dw 0x0000
0493EC             0735*   ; plot bitmap command
0493EC 19          0736*   @cmd1:   db 25 ; stomped on by @y0 load
0493ED ED          0737*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
0493EE 00 00       0738*   @x2: 	dw 0x0000
0493F0 00 00       0739*   @y2: 	dw 0x0000
0493F2 00          0740*   @end:  db 0x00 ; padding
0493F3             0741*   ; end DEBUG_PRINT_BAR_UPDATE
0493F3             0742*   
0493F3             0743*   
0493F3             0744*   dump_sprite_record:
0493F3             0745*       ; call vdu_home_cursor
0493F3 CD 5C 00 04 0746*       call printInline
0493F7 69 64 20 20 0747*       asciz "id  : "
       3A 20 00    
0493FE DD 7E 00    0748*       ld a,(ix+sprite_id)
049401 CD 42 8D 04 0749*       call printHexA
049405             0750*   
049405 CD 5C 00 04 0751*       call printInline
049409 0D 0A 78 20 0752*       asciz "\r\nx   :"
       20 20 3A 00 
049411 DD 27 01    0753*       ld hl,(ix+sprite_x)
049414 CD ED 01 04 0754*       call print_s168_hl
049418             0755*   
049418 CD 5C 00 04 0756*       call printInline
04941C 0D 0A 79 20 0757*       asciz "\r\ny   :"
       20 20 3A 00 
049424 DD 27 04    0758*       ld hl,(ix+sprite_y)
049427 CD ED 01 04 0759*       call print_s168_hl
04942B             0760*   
04942B CD 5C 00 04 0761*       call printInline
04942F 0D 0A 78 76 0762*       asciz "\r\nxv  :"
       20 20 3A 00 
049437 DD 27 07    0763*       ld hl,(ix+sprite_xvel)
04943A CD ED 01 04 0764*       call print_s168_hl
04943E             0765*   
04943E CD 5C 00 04 0766*       call printInline
049442 0D 0A 79 76 0767*       asciz "\r\nyv  :"
       20 20 3A 00 
04944A DD 27 0A    0768*       ld hl,(ix+sprite_yvel)
04944D CD ED 01 04 0769*       call print_s168_hl
049451             0770*   
049451 CD 5C 00 04 0771*       call printInline
049455 0D 0A 76 20 0772*       asciz "\r\nv   :"
       20 20 3A 00 
04945D DD 27 0D    0773*       ld hl,(ix+sprite_vel)
049460 CD ED 01 04 0774*       call print_s168_hl
049464             0775*   
049464 CD 5C 00 04 0776*       call printInline
049468 0D 0A 68 64 0777*       asciz "\r\nhdg :"
       67 20 3A 00 
049470 DD 27 10    0778*       ld hl,(ix+sprite_heading)
049473 CD ED 01 04 0779*       call print_s168_hl
049477             0780*   
049477 CD 5C 00 04 0781*       call printInline
04947B 0D 0A 6F 72 0782*       asciz "\r\nori :"
       69 20 3A 00 
049483 DD 27 13    0783*       ld hl,(ix+sprite_orientation)
049486 CD ED 01 04 0784*       call print_s168_hl
04948A             0785*   
04948A CD 5C 00 04 0786*       call printInline
04948E 0D 0A 74 79 0787*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049497 DD 7E 16    0788*       ld a,(ix+sprite_type)
04949A CD 42 8D 04 0789*       call printHexA
04949E             0790*   
04949E CD 5C 00 04 0791*       call printInline
0494A2 0D 0A 42 49 0792*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0494AB DD 27 17    0793*       ld hl,(ix+sprite_base_bufferId)
0494AE CD 9C 00 04 0794*       call printHex24
0494B2             0795*   
0494B2 CD 5C 00 04 0796*       call printInline
0494B6 0D 0A 6D 50 0797*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0494BF DD 27 1A    0798*       ld hl,(ix+sprite_move_program)
0494C2 CD 9C 00 04 0799*       call printHex24
0494C6             0800*   
0494C6 CD 5C 00 04 0801*       call printInline
0494CA 0D 0A 63 6F 0802*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0494D3 DD 7E 1D    0803*       ld a,(ix+sprite_collisions)
0494D6 CD 6A 02 04 0804*       call printBin8
0494DA             0805*   
0494DA CD 5C 00 04 0806*       call printInline
0494DE 0D 0A 73 7A 0807*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0494E7 DD 7E 1E    0808*       ld a,(ix+sprite_dim_x)
0494EA CD 42 8D 04 0809*       call printHexA
0494EE             0810*   
0494EE CD 5C 00 04 0811*       call printInline
0494F2 0D 0A 73 7A 0812*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0494FB DD 7E 1F    0813*       ld a,(ix+sprite_dim_y)
0494FE CD 42 8D 04 0814*       call printHexA
049502             0815*   
049502 CD 5C 00 04 0816*       call printInline
049506 0D 0A 23 6F 0817*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
04950F DD 7E 20    0818*       ld a,(ix+sprite_num_orientations)
049512 CD 42 8D 04 0819*       call printHexA
049516             0820*   
049516 CD 5C 00 04 0821*       call printInline
04951A 0D 0A 23 61 0822*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049523 DD 7E 21    0823*       ld a,(ix+sprite_num_animations)
049526 CD 42 8D 04 0824*       call printHexA
04952A             0825*   
04952A CD 5C 00 04 0826*       call printInline
04952E 0D 0A 61 6E 0827*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049537 DD 7E 22    0828*       ld a,(ix+sprite_animation)
04953A CD 42 8D 04 0829*       call printHexA
04953E             0830*   
04953E CD 5C 00 04 0831*       call printInline
049542 0D 0A 61 6E 0832*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
04954B DD 7E 23    0833*       ld a,(ix+sprite_animation_timer)
04954E CD 42 8D 04 0834*       call printHexA
049552             0835*   
049552 CD 5C 00 04 0836*       call printInline
049556 0D 0A 6D 76 0837*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
04955F DD 7E 24    0838*       ld a,(ix+sprite_move_timer)
049562 CD 42 8D 04 0839*       call printHexA
049566             0840*   
049566 CD 5C 00 04 0841*       call printInline
04956A 0D 0A 6D 76 0842*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
049573 DD 7E 25    0843*       ld a,(ix+sprite_move_step)
049576 CD 42 8D 04 0844*       call printHexA
04957A             0845*   
04957A CD 5C 00 04 0846*       call printInline
04957E 0D 0A 70 74 0847*       asciz "\r\npts : "
       73 20 3A 20 
       00          
049587 DD 7E 26    0848*       ld a,(ix+sprite_points)
04958A CD 42 8D 04 0849*       call printHexA
04958E             0850*   
04958E CD 5C 00 04 0851*       call printInline
049592 0D 0A 64 6D 0852*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
04959B DD 7E 27    0853*       ld a,(ix+sprite_shield_damage)
04959E CD 42 8D 04 0854*       call printHexA
0495A2             0855*   
0495A2 CD 5C 00 04 0856*       call printInline
0495A6 0D 0A 66 72 0857*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
0495AF DD 7E 28    0858*       ld a,(ix+sprite_frame)
0495B2 CD 42 8D 04 0859*       call printHexA
0495B6             0860*   
0495B6 CD 78 00 04 0861*       call printNewLine
0495BA             0862*   
0495BA             0863*       ; call waitKeypress
0495BA C9          0864*       ret
0495BB             0865*   
0495BB             0866*   dump_tile_record:
0495BB CD 5C 00 04 0867*       call printInline
0495BF 69 64 20 20 0868*       asciz "id  : "
       3A 20 00    
0495C6 DD 7E 00    0869*       ld a,(ix+tile_id)
0495C9 CD 42 8D 04 0870*       call printHexA
0495CD             0871*   
0495CD CD 5C 00 04 0872*       call printInline
0495D1 0D 0A 78 20 0873*       asciz "\r\nx   :"
       20 20 3A 00 
0495D9 DD 27 01    0874*       ld hl,(ix+tile_x)
0495DC CD ED 01 04 0875*       call print_s168_hl
0495E0             0876*   
0495E0 CD 5C 00 04 0877*       call printInline
0495E4 0D 0A 79 20 0878*       asciz "\r\ny   :"
       20 20 3A 00 
0495EC DD 27 04    0879*       ld hl,(ix+tile_y)
0495EF CD ED 01 04 0880*       call print_s168_hl
0495F3             0881*   
0495F3             0882*       ; call printInline
0495F3             0883*       ; asciz "\r\nxv  :"
0495F3             0884*       ; ld hl,(ix+tile_xvel)
0495F3             0885*       ; call print_s168_hl
0495F3             0886*   
0495F3             0887*       ; call printInline
0495F3             0888*       ; asciz "\r\nyv  :"
0495F3             0889*       ; ld hl,(ix+tile_yvel)
0495F3             0890*       ; call print_s168_hl
0495F3             0891*   
0495F3             0892*       ; call printInline
0495F3             0893*       ; asciz "\r\nv   :"
0495F3             0894*       ; ld hl,(ix+tile_vel)
0495F3             0895*       ; call print_s168_hl
0495F3             0896*   
0495F3             0897*       ; call printInline
0495F3             0898*       ; asciz "\r\nhdg :"
0495F3             0899*       ; ld hl,(ix+tile_heading)
0495F3             0900*       ; call print_s168_hl
0495F3             0901*   
0495F3             0902*       ; call printInline
0495F3             0903*       ; asciz "\r\nori :"
0495F3             0904*       ; ld hl,(ix+tile_orientation)
0495F3             0905*       ; call print_s168_hl
0495F3             0906*   
0495F3 CD 5C 00 04 0907*       call printInline
0495F7 0D 0A 74 79 0908*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049600 DD 7E 16    0909*       ld a,(ix+tile_type)
049603 CD 42 8D 04 0910*       call printHexA
049607             0911*   
049607 CD 5C 00 04 0912*       call printInline
04960B 0D 0A 42 49 0913*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049614 DD 27 17    0914*       ld hl,(ix+tile_base_bufferId)
049617 CD 9C 00 04 0915*       call printHex24
04961B             0916*   
04961B CD 5C 00 04 0917*       call printInline
04961F 0D 0A 6D 50 0918*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049628 DD 27 1A    0919*       ld hl,(ix+tile_move_program)
04962B CD 9C 00 04 0920*       call printHex24
04962F             0921*   
04962F CD 5C 00 04 0922*       call printInline
049633 0D 0A 63 6F 0923*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04963C DD 7E 1D    0924*       ld a,(ix+tile_collisions)
04963F CD 6A 02 04 0925*       call printBin8
049643             0926*   
049643 CD 5C 00 04 0927*       call printInline
049647 0D 0A 73 7A 0928*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049650 DD 7E 1E    0929*       ld a,(ix+tile_dim_x)
049653 CD 42 8D 04 0930*       call printHexA
049657             0931*   
049657 CD 5C 00 04 0932*       call printInline
04965B 0D 0A 73 7A 0933*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
049664 DD 7E 1F    0934*       ld a,(ix+tile_dim_y)
049667 CD 42 8D 04 0935*       call printHexA
04966B             0936*   
04966B CD 5C 00 04 0937*       call printInline
04966F 0D 0A 23 6F 0938*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
049678 DD 7E 20    0939*       ld a,(ix+tile_num_orientations)
04967B CD 42 8D 04 0940*       call printHexA
04967F             0941*   
04967F CD 5C 00 04 0942*       call printInline
049683 0D 0A 23 61 0943*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
04968C DD 7E 21    0944*       ld a,(ix+tile_num_animations)
04968F CD 42 8D 04 0945*       call printHexA
049693             0946*   
049693 CD 5C 00 04 0947*       call printInline
049697 0D 0A 61 6E 0948*       asciz "\r\nani : "
       69 20 3A 20 
       00          
0496A0 DD 7E 22    0949*       ld a,(ix+tile_animation)
0496A3 CD 42 8D 04 0950*       call printHexA
0496A7             0951*   
0496A7 CD 5C 00 04 0952*       call printInline
0496AB 0D 0A 61 6E 0953*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
0496B4 DD 7E 23    0954*       ld a,(ix+tile_animation_timer)
0496B7 CD 42 8D 04 0955*       call printHexA
0496BB             0956*   
0496BB CD 5C 00 04 0957*       call printInline
0496BF 0D 0A 6D 76 0958*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
0496C8 DD 7E 24    0959*       ld a,(ix+tile_move_timer)
0496CB CD 42 8D 04 0960*       call printHexA
0496CF             0961*   
0496CF CD 5C 00 04 0962*       call printInline
0496D3 0D 0A 6D 76 0963*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
0496DC DD 7E 25    0964*       ld a,(ix+tile_move_step)
0496DF CD 42 8D 04 0965*       call printHexA
0496E3             0966*   
0496E3 CD 5C 00 04 0967*       call printInline
0496E7 0D 0A 70 74 0968*       asciz "\r\npts : "
       73 20 3A 20 
       00          
0496F0 DD 7E 26    0969*       ld a,(ix+tile_points)
0496F3 CD 42 8D 04 0970*       call printHexA
0496F7             0971*   
0496F7 CD 5C 00 04 0972*       call printInline
0496FB 0D 0A 64 6D 0973*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049704 DD 7E 27    0974*       ld a,(ix+tile_shield_damage)
049707 CD 42 8D 04 0975*       call printHexA
04970B             0976*   
04970B CD 5C 00 04 0977*       call printInline
04970F 0D 0A 66 72 0978*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049718 DD 7E 28    0979*       ld a,(ix+tile_frame)
04971B CD 42 8D 04 0980*       call printHexA
04971F             0981*   
04971F CD 78 00 04 0982*       call printNewLine
049723 CD 78 00 04 0983*       call printNewLine
049727             0984*   
049727             0985*       ; call waitKeypress
049727 C9          0986*       ret
049728             0987*   
049728             0988*   dump_player_record:
049728 DD 21 67 99 0989*       ld ix,player_begin
       04          
04972D             0990*   
04972D CD 5C 00 04 0991*       call printInline
049731 69 64 20 20 0992*       asciz "id  : "
       3A 20 00    
049738 DD 7E 00    0993*       ld a,(ix+sprite_id)
04973B CD 42 8D 04 0994*       call printHexA
04973F             0995*   
04973F CD 5C 00 04 0996*       call printInline
049743 0D 0A 78 20 0997*       asciz "\r\nx   :"
       20 20 3A 00 
04974B DD 27 01    0998*       ld hl,(ix+sprite_x)
04974E CD ED 01 04 0999*       call print_s168_hl
049752             1000*   
049752 CD 5C 00 04 1001*       call printInline
049756 0D 0A 79 20 1002*       asciz "\r\ny   :"
       20 20 3A 00 
04975E DD 27 04    1003*       ld hl,(ix+sprite_y)
049761 CD ED 01 04 1004*       call print_s168_hl
049765             1005*   
049765 CD 5C 00 04 1006*       call printInline
049769 0D 0A 78 76 1007*       asciz "\r\nxv  :"
       20 20 3A 00 
049771 DD 27 07    1008*       ld hl,(ix+sprite_xvel)
049774 CD ED 01 04 1009*       call print_s168_hl
049778             1010*   
049778 CD 5C 00 04 1011*       call printInline
04977C 0D 0A 79 76 1012*       asciz "\r\nyv  :"
       20 20 3A 00 
049784 DD 27 0A    1013*       ld hl,(ix+sprite_yvel)
049787 CD ED 01 04 1014*       call print_s168_hl
04978B             1015*   
04978B CD 5C 00 04 1016*       call printInline
04978F 0D 0A 76 20 1017*       asciz "\r\nv   :"
       20 20 3A 00 
049797 DD 27 0D    1018*       ld hl,(ix+sprite_vel)
04979A CD ED 01 04 1019*       call print_s168_hl
04979E             1020*   
04979E CD 5C 00 04 1021*       call printInline
0497A2 0D 0A 68 64 1022*       asciz "\r\nhdg :"
       67 20 3A 00 
0497AA DD 27 10    1023*       ld hl,(ix+sprite_heading)
0497AD CD ED 01 04 1024*       call print_s168_hl
0497B1             1025*   
0497B1 CD 5C 00 04 1026*       call printInline
0497B5 0D 0A 6F 72 1027*       asciz "\r\nori :"
       69 20 3A 00 
0497BD DD 27 13    1028*       ld hl,(ix+sprite_orientation)
0497C0 CD ED 01 04 1029*       call print_s168_hl
0497C4             1030*   
0497C4 CD 5C 00 04 1031*       call printInline
0497C8 0D 0A 74 79 1032*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0497D1 DD 7E 16    1033*       ld a,(ix+sprite_type)
0497D4 CD 42 8D 04 1034*       call printHexA
0497D8             1035*   
0497D8 CD 5C 00 04 1036*       call printInline
0497DC 0D 0A 42 49 1037*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0497E5 DD 27 17    1038*       ld hl,(ix+sprite_base_bufferId)
0497E8 CD 9C 00 04 1039*       call printHex24
0497EC             1040*   
0497EC CD 5C 00 04 1041*       call printInline
0497F0 0D 0A 6D 50 1042*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0497F9 DD 27 1A    1043*       ld hl,(ix+sprite_move_program)
0497FC CD 9C 00 04 1044*       call printHex24
049800             1045*   
049800 CD 5C 00 04 1046*       call printInline
049804 0D 0A 63 6F 1047*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04980D DD 7E 1D    1048*       ld a,(ix+sprite_collisions)
049810 CD 6A 02 04 1049*       call printBin8
049814             1050*   
049814             1051*       ; call printInline
049814             1052*       ; asciz "\r\nszx : "
049814             1053*       ; ld a,(ix+sprite_dim_x)
049814             1054*       ; call printHexA
049814             1055*   
049814             1056*       ; call printInline
049814             1057*       ; asciz "\r\nszy : "
049814             1058*       ; ld a,(ix+sprite_dim_y)
049814             1059*       ; call printHexA
049814             1060*   
049814             1061*       ; call printInline
049814             1062*       ; asciz "\r\n#ori: "
049814             1063*       ; ld a,(ix+sprite_num_orientations)
049814             1064*       ; call printHexA
049814             1065*   
049814             1066*       ; call printInline
049814             1067*       ; asciz "\r\n#ani: "
049814             1068*       ; ld a,(ix+sprite_num_animations)
049814             1069*       ; call printHexA
049814             1070*   
049814             1071*       ; call printInline
049814             1072*       ; asciz "\r\nani : "
049814             1073*       ; ld a,(ix+sprite_animation)
049814             1074*       ; call printHexA
049814             1075*   
049814             1076*       ; call printInline
049814             1077*       ; asciz "\r\nanit: "
049814             1078*       ; ld a,(ix+sprite_animation_timer)
049814             1079*       ; call printHexA
049814             1080*   
049814             1081*       ; call printInline
049814             1082*       ; asciz "\r\nmvt : "
049814             1083*       ; ld a,(ix+sprite_move_timer)
049814             1084*       ; call printHexA
049814             1085*   
049814             1086*       ; call printInline
049814             1087*       ; asciz "\r\nmvs : "
049814             1088*       ; ld a,(ix+sprite_move_step)
049814             1089*       ; call printHexA
049814             1090*   
049814             1091*       ; call printInline
049814             1092*       ; asciz "\r\npts : "
049814             1093*       ; ld a,(ix+sprite_points)
049814             1094*       ; call printHexA
049814             1095*   
049814             1096*       ; call printInline
049814             1097*       ; asciz "\r\ndmg : "
049814             1098*       ; ld a,(ix+sprite_shield_damage)
049814             1099*       ; call printHexA
049814             1100*   
049814             1101*       ; call printInline
049814             1102*       ; asciz "\r\nfrm : "
049814             1103*       ; ld a,(ix+sprite_frame)
049814             1104*       ; call printHexA
049814             1105*   
049814             1106*       ; call printNewLine
049814             1107*       ; call printNewLine
049814             1108*   
049814             1109*       ; call waitKeypress
049814 C9          1110*       ret
049815             0080    
049815             0081    ; --- MAIN PROGRAM FILE ---
049815             0082    main:
049815             0083        ; jp main_end ; DEBUG
049815             0084    
049815             0085    ; start a new game
049815 21 45 81 04 0086        ld hl,game_init
049819 22 53 80 04 0087        ld (game_state),hl
04981D             0088    main_loop:
04981D             0089    ; update the global timestamp
04981D CD DC 11 04 0090        call timestamp_tick
049821             0091    ; do gamestate logic
049821 CD 56 80 04 0092        call do_game
049825             0093    ; wait for the next vblank mitigate flicker and for loop timing
049825 CD 14 13 04 0094        call vdu_vblank
049829             0095    ; poll keyboard for escape keypress
049829 3E 08       0096        ld a, $08 ; code to send to MOS
04982B 5B CF       0097        rst.lil $08 ; get IX pointer to System Variables
04982D DD 7E 05    0098        ld a, (ix + $05) ; get ASCII code of key pressed
049830 FE 1B       0099        cp 27 ; check if 27 (ascii code for ESC)
049832 CA 3A 98 04 0100        jp z, main_end ; if pressed, jump to exit
049836             0101    ; escape not pressed so loop
049836 C3 1D 98 04 0102        jp main_loop
04983A             0103    
04983A             0104    main_end:
04983A             0105    ; restore original screen mode
04983A 3A 44 81 04 0106        ld a,(original_screen_mode)
04983E CD 69 13 04 0107        call vdu_set_screen_mode
049842             0108    ; print thanks for playing message
049842 CD 5C 00 04 0109        call printInline
049846 54 68 61 6E 0110        asciz "Thank you for playing\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 70 6C 
       61 79 69 6E 
       67 0D 0A 00 
04985E 21 FC 18 04 0111        ld hl,purple_nurples_ascii
049862 CD 63 00 04 0112        call printString
049866 C9          0113        ret
049867             0114    ; end main
049867             0115    
049867             0116    ; needs to be the final include to leave room for the sprite and tile tables
049867             0117        include "tables.inc"
049867             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
049867             0002*   table_base: equ $
049867             0003*   player_weapons_begin: equ table_base
049867             0004*   player_lasers_begin: equ player_weapons_begin
049867             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
049867             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
049867             0007*   player_begin: equ player_weapons_end
049867             0008*   player_end: equ table_record_size+player_begin
049867             0009*   enemy_sprites_begin: equ player_end
049867             0010*   seekers_base: equ enemy_sprites_begin
049867             0011*   seeker_min_sprite_id: equ [seekers_base-table_base]/table_record_size
049867             0012*   seekers_end: equ table_record_size*seekers_max+seekers_base
049867             0013*   fireballs_base: equ seekers_end
049867             0014*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
049867             0015*   enemy_sprites_end: equ fireballs_end
049867             0016*   explosions_base: equ enemy_sprites_end
049867             0017*   explosions_end: equ table_record_size*explosions_max+explosions_base
049867             0018*   table_end: equ explosions_end
049867             0019*   
049867             0020*   table_num_records: equ table_end-table_base/table_record_size
049867             0021*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
049867             0022*   
049867             0023*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
049867             0024*   tile_table_base: equ table_end
049867             0025*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

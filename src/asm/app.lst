PC     Output      Line
040000             0001   	.assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 45 00 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   start:
040045 F5          0012       push af
040046 C5          0013       push bc
040047 D5          0014       push de
040048 DD E5       0015       push ix
04004A FD E5       0016       push iy
04004C             0017   
04004C             0018   ; ###############################################
04004C CD BA 27 04 0019   	call	init			; Initialization code
040050 CD 43 28 04 0020   	call 	main			; Call the main function
040054             0021   ; ###############################################
040054             0022   
040054             0023   exit:
040054 FD E1       0024       pop iy
040056 DD E1       0025       pop ix
040058 D1          0026       pop de
040059 C1          0027       pop bc
04005A F1          0028       pop af
04005B 21 00 00 00 0029       ld hl,0
04005F C9          0030       ret
040060             0031   
040060             0032   ; API includes
040060             0033       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ;
040060             0003*  ; Title:	AGON MOS - API for user projects
040060             0004*  ; Author:	Dean Belfield
040060             0005*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0006*  ;			Added MOS error codes for return in HL
040060             0007*  ; Created:	03/08/2022
040060             0008*  ; Last Updated:	10/08/2023
040060             0009*  ;
040060             0010*  ; Modinfo:
040060             0011*  ; 05/08/2022:	Added mos_feof
040060             0012*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0013*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0014*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0015*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0016*  ; 13/10/2022:	Added mos_oscli
040060             0017*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0018*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0019*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0020*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0021*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0022*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0023*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0024*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0025*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0026*  ; 19/05/2023:	Added sysvar_scrMode
040060             0027*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0028*  ; 03/08/2023:	Added mos_setkbvector
040060             0029*  ; 10/08/2023:	Added mos_getkbmap
040060             0030*  
040060             0031*  ; VDP control (VDU 23, 0, n)
040060             0032*  ;
040060             0033*  vdp_gp:				EQU 80h
040060             0034*  vdp_keycode:		EQU 81h
040060             0035*  vdp_cursor:			EQU	82h
040060             0036*  vdp_scrchar:		EQU	83h
040060             0037*  vdp_scrpixel:		EQU	84h
040060             0038*  vdp_audio:			EQU	85h
040060             0039*  vdp_mode:			EQU	86h
040060             0040*  vdp_rtc:			EQU	87h
040060             0041*  vdp_keystate:		EQU	88h
040060             0042*  vdp_logicalcoords:	EQU	C0h
040060             0043*  vdp_terminalmode:	EQU	FFh
040060             0044*  
040060             0045*  ;
040060             0046*  ; Macro for calling the API
040060             0047*  ; Parameters:
040060             0048*  ; - function: One of the function numbers listed below
040060             0049*  ;
040060             0050*  	MACRO	MOSCALL	function
040060             0051*  			LD	A, function
040060             0052*  			RST.LIL	08h
040060             0053*  	ENDMACRO
040060             0054*  
040060             0055*  ; MOS high level functions
040060             0056*  ;
040060             0057*  ; Get keycode
040060             0058*  ; Returns:
040060             0059*  ;  A: ASCII code of key pressed, or 0 if no key pressed
040060             0060*  mos_getkey:			EQU	00h
040060             0061*  
040060             0062*  ; Load an area of memory from a file.
040060             0063*  ; HLU: Address of filename (zero terminated)
040060             0064*  ; DEU: Address at which to load
040060             0065*  ; BCU: Maximum allowed size (bytes)
040060             0066*  ; Returns:
040060             0067*  ; - A: File error, or 0 if OK
040060             0068*  ; - F: Carry reset indicates no room for file.
040060             0069*  mos_load:			EQU	01h
040060             0070*  
040060             0071*  ; Save a file to the SD card from RAM
040060             0072*  ; HLU: Address of filename (zero terminated)
040060             0073*  ; DEU: Address to save from
040060             0074*  ; BCU: Number of bytes to save
040060             0075*  ; Returns:
040060             0076*  ; - A: File error, or 0 if OK
040060             0077*  ; - F: Carry reset indicates no room for file
040060             0078*  mos_save:			EQU	02h
040060             0079*  
040060             0080*  ; Change directory
040060             0081*  ; HLU: Address of path (zero terminated)
040060             0082*  ; Returns:
040060             0083*  ; - A: File error, or 0 if OK
040060             0084*  mos_cd:				EQU	03h
040060             0085*  
040060             0086*  ; Directory listing
040060             0087*  ; HLU: Address of path (zero terminated)
040060             0088*  ; Returns:
040060             0089*  ; - A: File error, or 0 if OK
040060             0090*  mos_dir:			EQU	04h
040060             0091*  
040060             0092*  ; Delete a file from the SD card
040060             0093*  ; HLU: Address of filename (zero terminated)
040060             0094*  ; Returns:
040060             0095*  ; - A: File error, or 0 if OK
040060             0096*  mos_del:			EQU	05h
040060             0097*  
040060             0098*  ; Rename a file on the SD card
040060             0099*  ; HLU: Address of filename1 (zero terminated)
040060             0100*  ; DEU: Address of filename2 (zero terminated)
040060             0101*  ; Returns:
040060             0102*  ; - A: File error, or 0 if OK
040060             0103*  mos_ren:			EQU	06h
040060             0104*  
040060             0105*  ; Make a folder on the SD card
040060             0106*  ; HLU: Address of filename (zero terminated)
040060             0107*  ; Returns:
040060             0108*  ; - A: File error, or 0 if OK
040060             0109*  mos_mkdir:			EQU	07h
040060             0110*  
040060             0111*  ; Get a pointer to a system variable
040060             0112*  ; Returns:
040060             0113*  ; IXU: Pointer to system variables (see mos_api.asm for more details)
040060             0114*  mos_sysvars:		EQU	08h
040060             0115*  
040060             0116*  ; Invoke the line editor
040060             0117*  ; HLU: Address of the buffer
040060             0118*  ; BCU: Buffer length
040060             0119*  ;   E: 0 to not clear buffer, 1 to clear
040060             0120*  ; Returns:
040060             0121*  ;   A: Key that was used to exit the input loop (CR=13, ESC=27)
040060             0122*  mos_editline:		EQU	09h
040060             0123*  
040060             0124*  ; Open a file
040060             0125*  ; HLU: Filename
040060             0126*  ;   C: Mode
040060             0127*  ; Returns:
040060             0128*  ;   A: Filehandle, or 0 if couldn't open
040060             0129*  mos_fopen:			EQU	0Ah
040060             0130*  
040060             0131*  ; Close a file
040060             0132*  ;   C: Filehandle
040060             0133*  ; Returns
040060             0134*  ;   A: Number of files still open
040060             0135*  mos_fclose:			EQU	0Bh
040060             0136*  
040060             0137*  ; Get a character from a file
040060             0138*  ;   C: Filehandle
040060             0139*  ; Returns:
040060             0140*  ;   A: Character read
040060             0141*  ;   F: C set if last character in file, otherwise NC
040060             0142*  mos_fgetc:			EQU	0Ch
040060             0143*  
040060             0144*  ; Write a character to a file
040060             0145*  ;   C: Filehandle
040060             0146*  ;   B: Character to write
040060             0147*  mos_fputc:			EQU	0Dh
040060             0148*  
040060             0149*  ; Check whether we're at the end of the file
040060             0150*  ;   C: Filehandle
040060             0151*  ; Returns:
040060             0152*  ;   A: 1 if at end of file, otherwise 0
040060             0153*  mos_feof:			EQU	0Eh
040060             0154*  
040060             0155*  ; Copy an error message
040060             0156*  ;   E: The error code
040060             0157*  ; HLU: Address of buffer to copy message into
040060             0158*  ; BCU: Size of buffer
040060             0159*  mos_getError:		EQU	0Fh
040060             0160*  
040060             0161*  ; Execute a MOS command
040060             0162*  ; HLU: Pointer the the MOS command string
040060             0163*  ; DEU: Pointer to additional command structure
040060             0164*  ; BCU: Number of additional commands
040060             0165*  ; Returns:
040060             0166*  ;   A: MOS error code
040060             0167*  mos_oscli:			EQU	10h
040060             0168*  
040060             0169*  ; Copy a file on the SD card
040060             0170*  ; HLU: Address of filename1 (zero terminated)
040060             0171*  ; DEU: Address of filename2 (zero terminated)
040060             0172*  ; Returns:
040060             0173*  ; - A: File error, or 0 if OK
040060             0174*  mos_copy:			EQU	11h
040060             0175*  
040060             0176*  ; Fetch a RTC string
040060             0177*  ; HLU: Pointer to a buffer to copy the string to
040060             0178*  ; Returns:
040060             0179*  ;   A: Length of time
040060             0180*  mos_getrtc:			EQU	12h
040060             0181*  
040060             0182*  ; Set the RTC
040060             0183*  ; HLU: Pointer to a buffer with the time data in
040060             0184*  mos_setrtc:			EQU	13h
040060             0185*  
040060             0186*  ; Set an interrupt vector
040060             0187*  ; HLU: Pointer to the interrupt vector (24-bit pointer)
040060             0188*  ;   E: Vector # to set
040060             0189*  ; Returns:
040060             0190*  ; HLU: Pointer to the previous vector
040060             0191*  mos_setintvector:	EQU	14h
040060             0192*  
040060             0193*  ; Open UART1
040060             0194*  ; IXU: Pointer to UART struct
040060             0195*  ;	+0: Baud rate (24-bit, little endian)
040060             0196*  ;	+3: Data bits
040060             0197*  ;	+4: Stop bits
040060             0198*  ;	+5: Parity bits
040060             0199*  ;	+6: Flow control (0: None, 1: Hardware)
040060             0200*  ;	+7: Enabled interrupts
040060             0201*  ; Returns:
040060             0202*  ;   A: Error code (0 = no error)
040060             0203*  mos_uopen:			EQU	15h
040060             0204*  
040060             0205*  ; Close UART1
040060             0206*  mos_uclose:			EQU	16h
040060             0207*  
040060             0208*  ; Get a character from UART1
040060             0209*  ; Returns:
040060             0210*  ;   A: Character read
040060             0211*  ;   F: C if successful
040060             0212*  ;   F: NC if the UART is not open
040060             0213*  mos_ugetc:			EQU	17h
040060             0214*  
040060             0215*  ; Write a character to UART1
040060             0216*  ;   C: Character to write
040060             0217*  ; Returns:
040060             0218*  ;   F: C if successful
040060             0219*  ;   F: NC if the UART is not open
040060             0220*  mos_uputc:			EQU	18h
040060             0221*  
040060             0222*  ; Convert a file handle to a FIL structure pointer
040060             0223*  ;   C: Filehandle
040060             0224*  ; Returns:
040060             0225*  ; HLU: Pointer to a FIL struct
040060             0226*  mos_getfil:			EQU	19h
040060             0227*  
040060             0228*  ; Read a block of data from a file
040060             0229*  ;   C: Filehandle
040060             0230*  ; HLU: Pointer to where to write the data to
040060             0231*  ; DEU: Number of bytes to read
040060             0232*  ; Returns:
040060             0233*  ; DEU: Number of bytes read
040060             0234*  mos_fread:			EQU	1Ah
040060             0235*  
040060             0236*  ; Write a block of data to a file
040060             0237*  ;  C: Filehandle
040060             0238*  ; HLU: Pointer to where the data is
040060             0239*  ; DEU: Number of bytes to write
040060             0240*  ; Returns:
040060             0241*  ; DEU: Number of bytes read
040060             0242*  mos_fwrite:			EQU	1Bh
040060             0243*  
040060             0244*  ; Move the read/write pointer in a file
040060             0245*  ;   C: Filehandle
040060             0246*  ; HLU: Least significant 3 bytes of the offset from the start of the file (DWORD)
040060             0247*  ;   E: Most significant byte of the offset
040060             0248*  ; Returns:
040060             0249*  ;   A: FRESULT
040060             0250*  mos_flseek:			EQU	1Ch
040060             0251*  
040060             0252*  ; Move the read/write pointer in a file relative to the current position
040060             0253*  ;   C: Filehandle
040060             0254*  ; DEU: Signed 24-bit offset
040060             0255*  ; Returns:
040060             0256*  ;   A: FRESULT
040060             0257*  mos_api_flseek_rel:
040060 C5          0258*  	push bc ; back up file handle in c
040061 D5          0259*  	push de ; save offset
040062             0260*  	MOSCALL mos_getfil
040062 3E 19       0001*M 			LD	A, function
040064 5B CF       0002*M 			RST.LIL	08h
040066 E5          0261*  	push hl
040067 FD E1       0262*  	pop iy ; iy points to FIL struct
040069 FD 27 11    0263*  	ld hl,(iy+fil_fptr) ; get lowest 3 bytes of current position
04006C AF          0264*  	xor a ; clear carry
04006D D1          0265*  	pop de ; restore offset
04006E ED 5A       0266*  	adc hl,de ; adc the offset because we need sign flag
040070 F2 78 00 04 0267*  	jp p,@not_neg
040074 21 00 00 00 0268*  	ld hl,0 ; seek to beginning of file
040078             0269*  @not_neg:
040078 C1          0270*  	pop bc ; restore file handle to c
040079 1E 00       0271*  	ld e,0 ; highest byte of offset
04007B             0272*  	MOSCALL mos_flseek
04007B 3E 1C       0001*M 			LD	A, function
04007D 5B CF       0002*M 			RST.LIL	08h
04007F C9          0273*  	ret
040080             0274*  
040080             0275*  ; Set a VDP keyboard packet receiver callback
040080             0276*  ;   C: If non-zero then set the top byte of HLU(callback address)  to MB (for ADL=0 callers)
040080             0277*  ; HLU: Pointer to callback
040080             0278*  mos_setkbvector:	EQU	1Dh
040080             0279*  
040080             0280*  ; Get the address of the keyboard map
040080             0281*  ; Returns:
040080             0282*  ; IXU: Base address of the keymap
040080             0283*  mos_getkbmap:		EQU	1Eh
040080             0284*  
040080             0285*  ; MOS program exit codes
040080             0286*  ;
040080             0287*  EXIT_OK:				EQU  0;	"OK",
040080             0288*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040080             0289*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040080             0290*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040080             0291*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040080             0292*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040080             0293*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040080             0294*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040080             0295*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040080             0296*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040080             0297*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040080             0298*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040080             0299*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040080             0300*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040080             0301*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040080             0302*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040080             0303*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040080             0304*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040080             0305*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040080             0306*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040080             0307*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040080             0308*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040080             0309*  
040080             0310*  ; FatFS file access functions
040080             0311*  ;
040080             0312*  ; Open a file
040080             0313*  ; HLU: Pointer to a blank FIL struct
040080             0314*  ; DEU: Pointer to the filename (0 terminated)
040080             0315*  ;   C: File mode
040080             0316*  ; Returns:
040080             0317*  ;   A: FRESULT
040080             0318*  ffs_fopen:			EQU	80h
040080             0319*  
040080             0320*  ; Close a file
040080             0321*  ; HLU: Pointer to a blank FIL struct
040080             0322*  ; Returns:
040080             0323*  ;   A: FRESULT
040080             0324*  ffs_fclose:			EQU	81h
040080             0325*  
040080             0326*  ; Read data from a file
040080             0327*  ; HLU: Pointer to a FIL struct
040080             0328*  ; DEU: Pointer to where to write the file out
040080             0329*  ; BCU: Number of bytes to read
040080             0330*  ; Returns:
040080             0331*  ;   A: FRESULT
040080             0332*  ; BCU: Number of bytes read
040080             0333*  ffs_fread:			EQU	82h
040080             0334*  
040080             0335*  ; Write data to a file
040080             0336*  ; HLU: Pointer to a FIL struct
040080             0337*  ; DEU: Pointer to the data to write out
040080             0338*  ; BCU: Number of bytes to write
040080             0339*  ; Returns:
040080             0340*  ;   A: FRESULT
040080             0341*  ; BCU: Number of bytes written
040080             0342*  ffs_fwrite:			EQU	83h
040080             0343*  
040080             0344*  ; Move the read/write pointer in a file
040080             0345*  ; HLU: Pointer to a FIL struct
040080             0346*  ; DEU: Least significant 3 bytes of the offset from the start of the file (DWORD)
040080             0347*  ;   C: Most significant byte of the offset
040080             0348*  ; Returns:
040080             0349*  ;   A: FRESULT
040080             0350*  ffs_flseek:			EQU	84h
040080             0351*  
040080             0352*  ; not implemented
040080             0353*  ffs_ftruncate:		EQU	85h
040080             0354*  
040080             0355*  ; not implemented
040080             0356*  ffs_fsync:			EQU	86h
040080             0357*  
040080             0358*  ; not implemented
040080             0359*  ffs_fforward:		EQU	87h
040080             0360*  
040080             0361*  ; not implemented
040080             0362*  ffs_fexpand:		EQU	88h
040080             0363*  
040080             0364*  ; not implemented
040080             0365*  ffs_fgets:			EQU	89h
040080             0366*  
040080             0367*  ; not implemented
040080             0368*  ffs_fputc:			EQU	8Ah
040080             0369*  
040080             0370*  ; not implemented
040080             0371*  ffs_fputs:			EQU	8Bh
040080             0372*  
040080             0373*  ; not implemented
040080             0374*  ffs_fprintf:		EQU	8Ch
040080             0375*  
040080             0376*  ; not implemented
040080             0377*  ffs_ftell:			EQU	8Dh
040080             0378*  
040080             0379*  ; Check for EOF
040080             0380*  ; HLU: Pointer to a FILINFO struct
040080             0381*  ; Returns:
040080             0382*  ;   A: 1 if end of file, otherwise 0
040080             0383*  ffs_feof:			EQU	8Eh
040080             0384*  
040080             0385*  ; not implemented
040080             0386*  ffs_fsize:			EQU	8Fh
040080             0387*  
040080             0388*  ; not implemented
040080             0389*  ffs_ferror:			EQU	90h
040080             0390*  
040080             0391*  ; FatFS directory access functions
040080             0392*  ;
040080             0393*  ; Open a directory
040080             0394*  ; HLU: Pointer to a blank DIR struct
040080             0395*  ; DEU: Pointer to the directory path
040080             0396*  ; Returns:
040080             0397*  ; A: FRESULT
040080             0398*  ffs_dopen:			EQU	91h
040080             0399*  
040080             0400*  ; Close a directory
040080             0401*  ; HLU: Pointer to an open DIR struct
040080             0402*  ; Returns:
040080             0403*  ; A: FRESULT
040080             0404*  ffs_dclose:			EQU	92h
040080             0405*  
040080             0406*  ; Read the next FILINFO from an open DIR
040080             0407*  ; HLU: Pointer to an open DIR struct
040080             0408*  ; DEU: Pointer to an empty FILINFO struct
040080             0409*  ; Returns:
040080             0410*  ; A: FRESULT
040080             0411*  ffs_dread:			EQU	93h
040080             0412*  
040080             0413*  ; not implemented
040080             0414*  ffs_dfindfirst:		EQU	94h
040080             0415*  
040080             0416*  ; not implemented
040080             0417*  ffs_dfindnext:		EQU	95h
040080             0418*  
040080             0419*  ; FatFS file and directory management functions
040080             0420*  ;
040080             0421*  ; Check file exists
040080             0422*  ; HLU: Pointer to a FILINFO struct
040080             0423*  ; DEU: Pointer to the filename (0 terminated)
040080             0424*  ; Returns:
040080             0425*  ;   A: FRESULT
040080             0426*  ffs_stat:			EQU	96h
040080             0427*  
040080             0428*  ; not implemented
040080             0429*  ffs_unlink:			EQU	97h
040080             0430*  
040080             0431*  ; not implemented
040080             0432*  ffs_rename:			EQU	98h
040080             0433*  
040080             0434*  ; not implemented
040080             0435*  ffs_chmod:			EQU	99h
040080             0436*  
040080             0437*  ; not implemented
040080             0438*  ffs_utime:			EQU	9Ah
040080             0439*  
040080             0440*  ; not implemented
040080             0441*  ffs_mkdir:			EQU	9Bh
040080             0442*  
040080             0443*  ; not implemented
040080             0444*  ffs_chdir:			EQU	9Ch
040080             0445*  
040080             0446*  ; not implemented
040080             0447*  ffs_chdrive:		EQU	9Dh
040080             0448*  
040080             0449*  ; Copy the current directory (string) into buffer (hl)
040080             0450*  ; HLU: Pointer to a buffer
040080             0451*  ; BCU: Maximum length of buffer
040080             0452*  ; Returns:
040080             0453*  ; A: FRESULT
040080             0454*  ffs_getcwd:			EQU	9Eh
040080             0455*  
040080             0456*  ; FatFS volume management and system configuration functions
040080             0457*  ;
040080             0458*  ; not implemented
040080             0459*  ffs_mount:			EQU	9Fh
040080             0460*  
040080             0461*  ; not implemented
040080             0462*  ffs_mkfs:			EQU	A0h
040080             0463*  
040080             0464*  ; not implemented
040080             0465*  ffs_fdisk:			EQU	A1h
040080             0466*  
040080             0467*  ; not implemented
040080             0468*  ffs_getfree:		EQU	A2h
040080             0469*  
040080             0470*  ; not implemented
040080             0471*  ffs_getlabel:		EQU	A3h
040080             0472*  
040080             0473*  ; not implemented
040080             0474*  ffs_setlabel:		EQU	A4h
040080             0475*  
040080             0476*  ; not implemented
040080             0477*  ffs_setcp:			EQU	A5h
040080             0478*  
040080             0479*  ; File access modes
040080             0480*  ;
040080             0481*  fa_read:			EQU	01h
040080             0482*  fa_write:			EQU	02h
040080             0483*  fa_open_existing:	EQU	00h
040080             0484*  fa_create_new:		EQU	04h
040080             0485*  fa_create_always:	EQU	08h
040080             0486*  fa_open_always:		EQU	10h
040080             0487*  fa_open_append:		EQU	30h
040080             0488*  
040080             0489*  ; System variable indexes for api_sysvars
040080             0490*  ; Index into _sysvars in globals.asm
040080             0491*  ;
040080             0492*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040080             0493*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040080             0494*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040080             0495*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040080             0496*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040080             0497*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040080             0498*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040080             0499*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040080             0500*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040080             0501*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040080             0502*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040080             0503*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040080             0504*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040080             0505*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040080             0506*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040080             0507*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040080             0508*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040080             0509*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040080             0510*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040080             0511*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040080             0512*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040080             0513*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040080             0514*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040080             0515*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040080             0516*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040080             0517*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040080             0518*  
040080             0519*  ; Flags for the VPD protocol
040080             0520*  ;
040080             0521*  vdp_pflag_cursor:		EQU	00000001b
040080             0522*  vdp_pflag_scrchar:		EQU	00000010b
040080             0523*  vdp_pflag_point:		EQU	00000100b
040080             0524*  vdp_pflag_audio:		EQU	00001000b
040080             0525*  vdp_pflag_mode:			EQU	00010000b
040080             0526*  vdp_pflag_rtc:			EQU	00100000b
040080             0527*  
040080             0528*  ;
040080             0529*  ; FatFS structures
040080             0530*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040080             0531*  ;
040080             0532*  ; Object ID and allocation information (FFOBJID)
040080             0533*  ;
040080             0534*  ; Indexes into FFOBJID structure
040080             0535*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040080             0536*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040080             0537*  ffobjid_attr:		EQU	5	; 1: Object attribute
040080             0538*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040080             0539*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040080             0540*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040080             0541*  ;
040080             0542*  ; File object structure (FIL)
040080             0543*  ;
040080             0544*  ; Indexes into FIL structure
040080             0545*  fil_obj:		EQU 0	; 15: Object identifier
040080             0546*  fil_flag:		EQU	15 	;  1: File status flags
040080             0547*  fil_err:		EQU	16	;  1: Abort flag (error code)
040080             0548*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040080             0549*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040080             0550*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040080             0551*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040080             0552*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040080             0553*  ;
040080             0554*  ; Directory object structure (DIR)
040080             0555*  ; Indexes into DIR structure
040080             0556*  dir_obj:		EQU  0	; 15: Object identifier
040080             0557*  dir_dptr:		EQU	15	;  4: Current read/write offset
040080             0558*  dir_clust:		EQU	19	;  4: Current cluster
040080             0559*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040080             0560*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040080             0561*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040080             0562*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040080             0563*  ;
040080             0564*  ; File information structure (FILINFO)
040080             0565*  ;
040080             0566*  ; Indexes into FILINFO structure
040080             0567*  filinfo_fsize:		EQU 0	;   4: File size
040080             0568*  filinfo_fdate:		EQU	4	;   2: Modified date
040080             0569*  filinfo_ftime:		EQU	6	;   2: Modified time
040080             0570*  filinfo_fattrib:	EQU	8	;   1: File attribute
040080             0571*  filinfo_altname:	EQU	9	;  13: Alternative file name
040080             0572*  filinfo_fname:		EQU	22	; 256: Primary file name
040080             0034       include "functions.inc"
040080             0001*      MACRO printChar char
040080             0002*          LD A, char
040080             0003*          RST.LIL 10h
040080             0004*      ENDMACRO
040080             0005*  
040080             0006*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040080             0007*  ; Print a zero-terminated string
040080             0008*  ; HL: Pointer to string
040080             0009*  printString:
040080 C5          0010*  	PUSH	BC
040081 01 00 00 00 0011*  	LD		BC,0
040085 3E 00       0012*  	LD 	 	A,0
040087 5B DF       0013*  	RST.LIL 18h
040089 C1          0014*  	POP		BC
04008A C9          0015*  	RET
04008B             0016*  ; print a VDU sequence
04008B             0017*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04008B             0018*  sendVDUsequence:
04008B C5          0019*  	PUSH	BC
04008C 01 00 00 00 0020*  	LD		BC, 0
040090 4E          0021*  	LD		C, (HL)
040091 5B DF       0022*  	RST.LIL	18h
040093 C1          0023*  	POP		BC
040094 C9          0024*  	RET
040095             0025*  ; Print Newline sequence to VDP
040095             0026*  printNewLine:
040095 F5          0027*      push af ; for some reason rst.lil 10h sets carry flag
040096 3E 0D       0028*  	LD	A, '\r'
040098 5B D7       0029*  	RST.LIL 10h
04009A 3E 0A       0030*  	LD	A, '\n'
04009C 5B D7       0031*  	RST.LIL 10h
04009E F1          0032*      pop af
04009F C9          0033*  	RET
0400A0             0034*  ; Print a 24-bit HEX number
0400A0             0035*  ; HLU: Number to print
0400A0             0036*  printHex24:
0400A0 E5          0037*  	PUSH	HL
0400A1 21 02 00 00 0038*  	LD		HL, 2
0400A5 39          0039*  	ADD		HL, SP
0400A6 7E          0040*  	LD		A, (HL)
0400A7 E1          0041*  	POP		HL
0400A8 CD B2 00 04 0042*  	CALL	printHex8
0400AC             0043*  ; Print a 16-bit HEX number
0400AC             0044*  ; HL: Number to print
0400AC             0045*  printHex16:
0400AC 7C          0046*  	LD		A,H
0400AD CD B2 00 04 0047*  	CALL	printHex8
0400B1 7D          0048*  	LD		A,L
0400B2             0049*  ; Print an 8-bit HEX number
0400B2             0050*  ; A: Number to print
0400B2             0051*  printHex8:
0400B2 4F          0052*  	LD		C,A
0400B3 1F          0053*  	RRA
0400B4 1F          0054*  	RRA
0400B5 1F          0055*  	RRA
0400B6 1F          0056*  	RRA
0400B7 CD BC 00 04 0057*  	CALL	@F
0400BB 79          0058*  	LD		A,C
0400BC             0059*  @@:
0400BC E6 0F       0060*  	AND		0Fh
0400BE C6 90       0061*  	ADD		A,90h
0400C0 27          0062*  	DAA
0400C1 CE 40       0063*  	ADC		A,40h
0400C3 27          0064*  	DAA
0400C4 5B D7       0065*  	RST.LIL	10h
0400C6 C9          0066*  	RET
0400C7             0067*  
0400C7             0068*  ; Print a 0x HEX prefix
0400C7             0069*  DisplayHexPrefix:
0400C7 3E 30       0070*  	LD	A, '0'
0400C9 5B D7       0071*  	RST.LIL 10h
0400CB 3E 78       0072*  	LD	A, 'x'
0400CD 5B D7       0073*  	RST.LIL 10h
0400CF C9          0074*  	RET
0400D0             0075*  
0400D0             0076*      MACRO printDecBC
0400D0             0077*          push hl
0400D0             0078*          push bc
0400D0             0079*          pop hl
0400D0             0080*          call printDec
0400D0             0081*          pop hl
0400D0             0082*      ENDMACRO
0400D0             0083*  
0400D0             0084*      MACRO printDecDE
0400D0             0085*          push hl
0400D0             0086*          push de
0400D0             0087*          pop hl
0400D0             0088*          call printDec
0400D0             0089*          pop hl
0400D0             0090*      ENDMACRO
0400D0             0091*  
0400D0             0092*      MACRO printDecHL
0400D0             0093*          call printDec
0400D0             0094*      ENDMACRO
0400D0             0095*  
0400D0             0096*      MACRO printDecIX
0400D0             0097*          push hl
0400D0             0098*          push ix
0400D0             0099*          pop hl
0400D0             0100*          call printDec
0400D0             0101*          pop hl
0400D0             0102*      ENDMACRO
0400D0             0103*  
0400D0             0104*      MACRO printDecIY
0400D0             0105*          push hl
0400D0             0106*          push iy
0400D0             0107*          pop hl
0400D0             0108*          call printDec
0400D0             0109*          pop hl
0400D0             0110*      ENDMACRO
0400D0             0111*  
0400D0             0112*  ; Prints the right justified decimal value in HL without leading zeroes
0400D0             0113*  ; HL : Value to print
0400D0             0114*  printDec:
0400D0             0115*  ; BEGIN MY CODE
0400D0             0116*  ; back up all the things
0400D0 F5          0117*      push af
0400D1 C5          0118*      push bc
0400D2 D5          0119*      push de
0400D3 E5          0120*      push hl
0400D4             0121*  ; END MY CODE
0400D4 11 FC 00 04 0122*  	LD	 DE, _printDecBuffer
0400D8 CD 05 01 04 0123*  	CALL Num2String
0400DC             0124*  ; BEGIN MY CODE
0400DC             0125*  ; replace leading zeroes with spaces
0400DC 21 FC 00 04 0126*      LD	 HL, _printDecBuffer
0400E0 06 07       0127*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0400E2             0128*  @loop:
0400E2 7E          0129*      LD	 A, (HL)
0400E3 FE 30       0130*      CP	 '0'
0400E5 C2 F3 00 04 0131*      JP	 NZ, @done
0400E9 3E 20       0132*      LD   A, ' '
0400EB 77          0133*      LD	 (HL), A
0400EC 23          0134*      INC	 HL
0400ED CD 7C 06 04 0135*      CALL vdu_cursor_forward
0400F1 10 EF       0136*      DJNZ @loop
0400F3             0137*  @done:
0400F3             0138*  ; END MY CODE
0400F3             0139*  	; LD	 HL, _printDecBuffer
0400F3 CD 80 00 04 0140*  	CALL printString
0400F7             0141*  ; BEGIN MY CODE
0400F7             0142*  ; restore all the things
0400F7 E1          0143*      pop hl
0400F8 D1          0144*      pop de
0400F9 C1          0145*      pop bc
0400FA F1          0146*      pop af
0400FB             0147*  ; END MY CODE
0400FB C9          0148*  	RET
0400FC 00 00 00 00 0149*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
040105             0150*  
040105             0151*  ; This routine converts the value from HL into it's ASCII representation,
040105             0152*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040105             0153*  ; so it will allways be 8 characters length
040105             0154*  ; HL : Value to convert to string
040105             0155*  ; DE : pointer to buffer, at least 8 byte + 0
040105             0156*  Num2String:
040105 01 80 69 67 0157*  	LD	 BC,-10000000
040109 CD 3C 01 04 0158*  	CALL OneDigit
04010D 01 C0 BD F0 0159*  	LD	 BC,-1000000
040111 CD 3C 01 04 0160*  	CALL OneDigit
040115 01 60 79 FE 0161*  	LD	 BC,-100000
040119 CD 3C 01 04 0162*  	CALL OneDigit
04011D 01 F0 D8 FF 0163*  	LD   BC,-10000
040121 CD 3C 01 04 0164*  	CALL OneDigit
040125 01 18 FC FF 0165*  	LD   BC,-1000
040129 CD 3C 01 04 0166*  	CALL OneDigit
04012D 01 9C FF FF 0167*  	LD   BC,-100
040131 CD 3C 01 04 0168*  	CALL OneDigit
040135 0E F6       0169*  	LD   C,-10
040137 CD 3C 01 04 0170*  	CALL OneDigit
04013B 48          0171*  	LD   C,B
04013C             0172*  OneDigit:
04013C 3E 2F       0173*  	LD   A,'0'-1
04013E             0174*  DivideMe:
04013E 3C          0175*  	INC  A
04013F 09          0176*  	ADD  HL,BC
040140 38 FC       0177*  	JR   C,DivideMe
040142 ED 42       0178*  	SBC  HL,BC
040144 12          0179*  	LD   (DE),A
040145 13          0180*  	INC  DE
040146 C9          0181*  	RET
040147             0182*  
040147             0183*  
040147             0184*  ; #### new functions added by Brandon R. Gates ####
040147             0185*  
040147             0186*  ; print the binary representation of the 8-bit value in a
040147             0187*  ; destroys a, hl, bc
040147             0188*  printBin8:
040147 06 08       0189*      ld b,8      ; loop counter for 8 bits
040149 21 64 01 04 0190*      ld hl,@cmd  ; set hl to the low byte of the output string
04014D             0191*                  ; (which will be the high bit of the value in a)
04014D             0192*  @loop:
04014D 07          0193*      rlca ; put the next highest bit into carry
04014E 38 04       0194*      jr c,@one
040150 36 30       0195*      ld (hl),'0'
040152 18 02       0196*      jr @next_bit
040154             0197*  @one:
040154 36 31       0198*      ld (hl),'1'
040156             0199*  @next_bit:
040156 23          0200*      inc hl
040157 10 F4       0201*      djnz @loop
040159             0202*  ; print it
040159 21 64 01 04 0203*  	ld hl,@cmd
04015D 01 08 00 00 0204*  	ld bc,@end-@cmd
040161 5B DF       0205*  	rst.lil $18
040163 C9          0206*  	ret
040164             0207*  @cmd: ds 8 ; eight bytes for eight bits
04016C             0208*  @end:
04016C             0209*  
04016C             0210*  ; print the binary representation of the 8-bit value in a
04016C             0211*  ; in reverse order (lsb first)
04016C             0212*  ; destroys a, hl, bc
04016C             0213*  printBin8Rev:
04016C 06 08       0214*      ld b,8      ; loop counter for 8 bits
04016E 21 89 01 04 0215*      ld hl,@cmd  ; set hl to the low byte of the output string
040172             0216*                  ; (which will be the high bit of the value in a)
040172             0217*  @loop:
040172 0F          0218*      rrca ; put the next lowest bit into carry
040173 38 04       0219*      jr c,@one
040175 36 30       0220*      ld (hl),'0'
040177 18 02       0221*      jr @next_bit
040179             0222*  @one:
040179 36 31       0223*      ld (hl),'1'
04017B             0224*  @next_bit:
04017B 23          0225*      inc hl
04017C 10 F4       0226*      djnz @loop
04017E             0227*  ; print it
04017E 21 89 01 04 0228*  	ld hl,@cmd
040182 01 08 00 00 0229*  	ld bc,@end-@cmd
040186 5B DF       0230*  	rst.lil $18
040188 C9          0231*  	ret
040189             0232*  @cmd: ds 8 ; eight bytes for eight bits
040191             0233*  @end:
040191             0234*  
040191             0235*  ; print registers to screen in hexidecimal format
040191             0236*  ; inputs: none
040191             0237*  ; outputs: values of every register printed to screen
040191             0238*  ;    values of each register in global scratch memory
040191             0239*  ; destroys: nothing
040191             0240*  stepRegistersHex:
040191             0241*  ; store everything in scratch
040191 22 94 03 04 0242*      ld (uhl),hl
040195 ED 43 97 03 0243*      ld (ubc),bc
       04          
04019A ED 53 9A 03 0244*      ld (ude),de
       04          
04019F DD 22 9D 03 0245*      ld (uix),ix
       04          
0401A4 FD 22 A0 03 0246*      ld (uiy),iy
       04          
0401A9 F5          0247*      push af ; fml
0401AA E1          0248*      pop hl  ; thanks, zilog
0401AB 22 91 03 04 0249*      ld (uaf),hl
0401AF F5          0250*      push af ; dammit
0401B0             0251*  
0401B0             0252*  ; home the cursor
0401B0 CD 5B 06 04 0253*      call vdu_home_cursor
0401B4             0254*  
0401B4             0255*  ; print each register
0401B4 21 1D 03 04 0256*      ld hl,str_afu
0401B8 CD 80 00 04 0257*      call printString
0401BC 2A 91 03 04 0258*      ld hl,(uaf)
0401C0 CD A0 00 04 0259*      call printHex24
0401C4 CD 95 00 04 0260*      call printNewLine
0401C8             0261*  
0401C8 21 21 03 04 0262*      ld hl,str_hlu
0401CC CD 80 00 04 0263*      call printString
0401D0 2A 94 03 04 0264*      ld hl,(uhl)
0401D4 CD A0 00 04 0265*      call printHex24
0401D8 CD 95 00 04 0266*      call printNewLine
0401DC             0267*  
0401DC 21 25 03 04 0268*      ld hl,str_bcu
0401E0 CD 80 00 04 0269*      call printString
0401E4 2A 97 03 04 0270*      ld hl,(ubc)
0401E8 CD A0 00 04 0271*      call printHex24
0401EC CD 95 00 04 0272*      call printNewLine
0401F0             0273*  
0401F0 21 29 03 04 0274*      ld hl,str_deu
0401F4 CD 80 00 04 0275*      call printString
0401F8 2A 9A 03 04 0276*      ld hl,(ude)
0401FC CD A0 00 04 0277*      call printHex24
040200 CD 95 00 04 0278*      call printNewLine
040204             0279*  
040204 21 2D 03 04 0280*      ld hl,str_ixu
040208 CD 80 00 04 0281*      call printString
04020C 2A 9D 03 04 0282*      ld hl,(uix)
040210 CD A0 00 04 0283*      call printHex24
040214 CD 95 00 04 0284*      call printNewLine
040218             0285*  
040218 21 31 03 04 0286*      ld hl,str_iyu
04021C CD 80 00 04 0287*      call printString
040220 2A A0 03 04 0288*      ld hl,(uiy)
040224 CD A0 00 04 0289*      call printHex24
040228 CD 95 00 04 0290*      call printNewLine
04022C             0291*  
04022C             0292*      ; call vsync
04022C             0293*  
04022C CD 95 00 04 0294*      call printNewLine
040230             0295*  
040230             0296*  ; check for right shift key and quit if pressed
040230             0297*  	MOSCALL mos_getkbmap
040230 3E 1E       0001*M 			LD	A, function
040232 5B CF       0002*M 			RST.LIL	08h
040234             0298*  @stayhere:
040234             0299*  ; 7 RightShift
040234 DD CB 00 76 0300*      bit 6,(ix+0)
040238 20 02       0301*      jr nz,@RightShift
04023A 18 F8       0302*      jr @stayhere
04023C             0303*  @RightShift:
04023C DD CB 0E 86 0304*      res 0,(ix+14) ; debounce the key (hopefully)
040240 3E 80       0305*      ld a,%10000000
040242 CD 3B 06 04 0306*      call multiPurposeDelay
040246             0307*  
040246             0308*  ; restore everything
040246 2A 94 03 04 0309*      ld hl, (uhl)
04024A ED 4B 97 03 0310*      ld bc, (ubc)
       04          
04024F ED 5B 9A 03 0311*      ld de, (ude)
       04          
040254 DD 2A 9D 03 0312*      ld ix, (uix)
       04          
040259 FD 2A A0 03 0313*      ld iy, (uiy)
       04          
04025E F1          0314*      pop af
04025F             0315*  ; all done
04025F C9          0316*      ret
040260             0317*  
040260             0318*  ; print registers to screen in hexidecimal format
040260             0319*  ; inputs: none
040260             0320*  ; outputs: values of every register printed to screen
040260             0321*  ;    values of each register in global scratch memory
040260             0322*  ; destroys: nothing
040260             0323*  dumpRegistersHex:
040260             0324*  ; store everything in scratch
040260 22 94 03 04 0325*      ld (uhl),hl
040264 ED 43 97 03 0326*      ld (ubc),bc
       04          
040269 ED 53 9A 03 0327*      ld (ude),de
       04          
04026E DD 22 9D 03 0328*      ld (uix),ix
       04          
040273 FD 22 A0 03 0329*      ld (uiy),iy
       04          
040278 F5          0330*      push af ; fml
040279 E1          0331*      pop hl  ; thanks, zilog
04027A 22 91 03 04 0332*      ld (uaf),hl
04027E F5          0333*      push af ; dammit
04027F             0334*  
04027F             0335*  ; home the cursor
04027F             0336*      ; call vdu_home_cursor
04027F CD 95 00 04 0337*      call printNewLine
040283             0338*  
040283             0339*  ; print each register
040283 21 1D 03 04 0340*      ld hl,str_afu
040287 CD 80 00 04 0341*      call printString
04028B 2A 91 03 04 0342*      ld hl,(uaf)
04028F CD A0 00 04 0343*      call printHex24
040293 CD 95 00 04 0344*      call printNewLine
040297             0345*  
040297 21 21 03 04 0346*      ld hl,str_hlu
04029B CD 80 00 04 0347*      call printString
04029F 2A 94 03 04 0348*      ld hl,(uhl)
0402A3 CD A0 00 04 0349*      call printHex24
0402A7 CD 95 00 04 0350*      call printNewLine
0402AB             0351*  
0402AB 21 25 03 04 0352*      ld hl,str_bcu
0402AF CD 80 00 04 0353*      call printString
0402B3 2A 97 03 04 0354*      ld hl,(ubc)
0402B7 CD A0 00 04 0355*      call printHex24
0402BB CD 95 00 04 0356*      call printNewLine
0402BF             0357*  
0402BF 21 29 03 04 0358*      ld hl,str_deu
0402C3 CD 80 00 04 0359*      call printString
0402C7 2A 9A 03 04 0360*      ld hl,(ude)
0402CB CD A0 00 04 0361*      call printHex24
0402CF CD 95 00 04 0362*      call printNewLine
0402D3             0363*  
0402D3 21 2D 03 04 0364*      ld hl,str_ixu
0402D7 CD 80 00 04 0365*      call printString
0402DB 2A 9D 03 04 0366*      ld hl,(uix)
0402DF CD A0 00 04 0367*      call printHex24
0402E3 CD 95 00 04 0368*      call printNewLine
0402E7             0369*  
0402E7 21 31 03 04 0370*      ld hl,str_iyu
0402EB CD 80 00 04 0371*      call printString
0402EF 2A A0 03 04 0372*      ld hl,(uiy)
0402F3 CD A0 00 04 0373*      call printHex24
0402F7 CD 95 00 04 0374*      call printNewLine
0402FB             0375*  
0402FB CD F2 06 04 0376*      call vdu_vblank
0402FF             0377*  
0402FF CD 95 00 04 0378*      call printNewLine
040303             0379*  ; restore everything
040303 2A 94 03 04 0380*      ld hl, (uhl)
040307 ED 4B 97 03 0381*      ld bc, (ubc)
       04          
04030C ED 5B 9A 03 0382*      ld de, (ude)
       04          
040311 DD 2A 9D 03 0383*      ld ix, (uix)
       04          
040316 FD 2A A0 03 0384*      ld iy, (uiy)
       04          
04031B F1          0385*      pop af
04031C             0386*  ; all done
04031C C9          0387*      ret
04031D             0388*  
04031D 61 66 3D 00 0389*  str_afu: db "af=",0
040321 68 6C 3D 00 0390*  str_hlu: db "hl=",0
040325 62 63 3D 00 0391*  str_bcu: db "bc=",0
040329 64 65 3D 00 0392*  str_deu: db "de=",0
04032D 69 78 3D 00 0393*  str_ixu: db "ix=",0
040331 69 79 3D 00 0394*  str_iyu: db "iy=",0
040335             0395*  
040335             0396*  ; print udeuhl to screen in hexidecimal format
040335             0397*  ; inputs: none
040335             0398*  ; outputs: concatenated hexidecimal udeuhl
040335             0399*  ; destroys: nothing
040335             0400*  dumpUDEUHLHex:
040335             0401*  ; store everything in scratch
040335 22 94 03 04 0402*      ld (uhl),hl
040339 ED 43 97 03 0403*      ld (ubc),bc
       04          
04033E ED 53 9A 03 0404*      ld (ude),de
       04          
040343 DD 22 9D 03 0405*      ld (uix),ix
       04          
040348 FD 22 A0 03 0406*      ld (uiy),iy
       04          
04034D F5          0407*      push af
04034E             0408*  
04034E             0409*  ; print each register
04034E             0410*  
04034E 21 88 03 04 0411*      ld hl,str_udeuhl
040352 CD 80 00 04 0412*      call printString
040356 2A 9A 03 04 0413*      ld hl,(ude)
04035A CD A0 00 04 0414*      call printHex24
04035E 3E 2E       0415*  	ld a,'.'	; print a dot to separate the values
040360 5B D7       0416*  	rst.lil 10h
040362 2A 94 03 04 0417*      ld hl,(uhl)
040366 CD A0 00 04 0418*      call printHex24
04036A CD 95 00 04 0419*      call printNewLine
04036E             0420*  
04036E             0421*  ; restore everything
04036E 2A 94 03 04 0422*      ld hl, (uhl)
040372 ED 4B 97 03 0423*      ld bc, (ubc)
       04          
040377 ED 5B 9A 03 0424*      ld de, (ude)
       04          
04037C DD 2A 9D 03 0425*      ld ix, (uix)
       04          
040381 FD 2A A0 03 0426*      ld iy, (uiy)
       04          
040386 F1          0427*      pop af
040387             0428*  ; all done
040387 C9          0429*      ret
040388             0430*  
040388 75 64 65 2E 0431*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040391             0432*  
040391             0433*  ; global scratch memory for registers
040391 00 00 00    0434*  uaf: dl 0
040394 00 00 00    0435*  uhl: dl 0
040397 00 00 00    0436*  ubc: dl 0
04039A 00 00 00    0437*  ude: dl 0
04039D 00 00 00    0438*  uix: dl 0
0403A0 00 00 00    0439*  uiy: dl 0
0403A3 00 00 00    0440*  usp: dl 0
0403A6 00 00 00    0441*  upc: dl 0
0403A9             0442*  
0403A9             0443*  ; inputs: whatever is in the flags register
0403A9             0444*  ; outputs: binary representation of flags
0403A9             0445*  ;          with a header so we know which is what
0403A9             0446*  ; destroys: nothing
0403A9             0447*  ; preserves: everything
0403A9             0448*  dumpFlags:
0403A9             0449*  ; first we curse zilog for not giving direct access to flags
0403A9 F5          0450*      push af ; this is so we can send it back unharmed
0403AA F5          0451*      push af ; this is so we can pop it to hl
0403AB             0452*  ; store everything in scratch
0403AB 22 94 03 04 0453*      ld (uhl),hl
0403AF ED 43 97 03 0454*      ld (ubc),bc
       04          
0403B4 ED 53 9A 03 0455*      ld (ude),de
       04          
0403B9 DD 22 9D 03 0456*      ld (uix),ix
       04          
0403BE FD 22 A0 03 0457*      ld (uiy),iy
       04          
0403C3             0458*  ; next we print the header
0403C3 21 EF 03 04 0459*      ld hl,@header
0403C7 CD 80 00 04 0460*      call printString
0403CB E1          0461*      pop hl ; flags are now in l
0403CC 7D          0462*      ld a,l ; flags are now in a
0403CD CD 47 01 04 0463*      call printBin8
0403D1 CD 95 00 04 0464*  	call printNewLine
0403D5             0465*  ; restore everything
0403D5 2A 94 03 04 0466*      ld hl, (uhl)
0403D9 ED 4B 97 03 0467*      ld bc, (ubc)
       04          
0403DE ED 5B 9A 03 0468*      ld de, (ude)
       04          
0403E3 DD 2A 9D 03 0469*      ld ix, (uix)
       04          
0403E8 FD 2A A0 03 0470*      ld iy, (uiy)
       04          
0403ED F1          0471*      pop af ; send her home the way she came
0403EE C9          0472*      ret
0403EF             0473*  ; Bit 7 (S): Sign flag
0403EF             0474*  ; Bit 6 (Z): Zero flag
0403EF             0475*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0403EF             0476*  ; Bit 4 (H): Half Carry flag
0403EF             0477*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0403EF             0478*  ; Bit 2 (PV): Parity/Overflow flag
0403EF             0479*  ; Bit 1 (N): Subtract flag
0403EF             0480*  ; Bit 0 (C): Carry flag
0403EF 53 5A 78 48 0481*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0403FA             0482*  
0403FA             0483*  ; set all the bits in the flag register
0403FA             0484*  ; more of an academic exercise than anything useful
0403FA             0485*  ; inputs; none
0403FA             0486*  ; outputs; a=0,f=255
0403FA             0487*  ; destroys: flags, hl
0403FA             0488*  ; preserves: a, because why not
0403FA             0489*  setAllFlags:
0403FA 21 FF 00 00 0490*      ld hl,255
0403FE 67          0491*      ld h,a ; four cycles to preserve a is cheap
0403FF E5          0492*      push hl
040400 F1          0493*      pop af
040401 C9          0494*      ret
040402             0495*  
040402             0496*  ; reset all the bits in the flag register
040402             0497*  ; unlike its inverse counterpart, this may actually be useful
040402             0498*  ; inputs; none
040402             0499*  ; outputs; a=0,f=0
040402             0500*  ; destroys: flags, hl
040402             0501*  ; preserves: a, because why not
040402             0502*  resetAllFlags:
040402 21 00 00 00 0503*      ld hl,0
040406 67          0504*      ld h,a ; four cycles to preserve a is cheap
040407 E5          0505*      push hl
040408 F1          0506*      pop af
040409 C9          0507*      ret
04040A             0508*  
04040A             0509*  ; wait until user presses a key
04040A             0510*  ; inputs: none
04040A             0511*  ; outputs: none
04040A             0512*  ; destroys: af,ix
04040A             0513*  waitKeypress:
04040A             0514*      MOSCALL mos_sysvars
04040A 3E 08       0001*M 			LD	A, function
04040C 5B CF       0002*M 			RST.LIL	08h
04040E AF          0515*      xor a ; zero out any prior keypresses
04040F DD 77 05    0516*      ld (ix+sysvar_keyascii),a
040412             0517*  @loop:
040412 DD 7E 05    0518*      ld a,(ix+sysvar_keyascii)
040415 A7          0519*      and a
040416 C0          0520*      ret nz
040417 18 F9       0521*      jr @loop
040419             0522*  
040419             0523*  
040419             0524*  ; print bytes from an address to the screen in hexidecimal format
040419             0525*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040419             0526*  ; outputs: values of each byte printed to screen separated by spaces
040419             0527*  ; destroys: nothing
040419             0528*  dumpMemoryHex:
040419             0529*  ; save all registers to the stack
040419 F5          0530*      push af
04041A C5          0531*      push bc
04041B D5          0532*      push de
04041C E5          0533*      push hl
04041D DD E5       0534*      push ix
04041F FD E5       0535*      push iy
040421             0536*  
040421             0537*  ; set b to be our loop counter
040421 47          0538*      ld b,a
040422             0539*  @loop:
040422             0540*  ; print the byte
040422 7E          0541*      ld a,(hl)
040423 CD B2 00 04 0542*      call printHex8
040427             0543*  ; print a space
040427 3E 20       0544*      ld a,' '
040429 5B D7       0545*      rst.lil 10h
04042B 23          0546*      inc hl
04042C 10 F4       0547*      djnz @loop
04042E             0548*      ; call printNewLine
04042E             0549*  
04042E             0550*  ; restore everything
04042E FD E1       0551*      pop iy
040430 DD E1       0552*      pop ix
040432 E1          0553*      pop hl
040433 D1          0554*      pop de
040434 C1          0555*      pop bc
040435 F1          0556*      pop af
040436             0557*  ; all done
040436 C9          0558*      ret
040437             0559*  
040437             0560*  
040437             0561*  ; print bytes from an address to the screen in binary format
040437             0562*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040437             0563*  ; outputs: values of each byte printed to screen separated by spaces
040437             0564*  ; destroys: nothing
040437             0565*  dumpMemoryBin:
040437             0566*  ; save all registers to the stack
040437 F5          0567*      push af
040438 C5          0568*      push bc
040439 D5          0569*      push de
04043A E5          0570*      push hl
04043B DD E5       0571*      push ix
04043D FD E5       0572*      push iy
04043F             0573*  
04043F             0574*  ; set b to be our loop counter
04043F 47          0575*      ld b,a
040440             0576*  @loop:
040440             0577*  ; print the byte
040440 7E          0578*      ld a,(hl)
040441 E5          0579*      push hl
040442 C5          0580*      push bc
040443 CD 47 01 04 0581*      call printBin8
040447 C1          0582*      pop bc
040448             0583*  ; print a space
040448 3E 20       0584*      ld a,' '
04044A 5B D7       0585*      rst.lil 10h
04044C E1          0586*      pop hl
04044D 23          0587*      inc hl
04044E 10 F0       0588*      djnz @loop
040450 CD 95 00 04 0589*      call printNewLine
040454             0590*  
040454             0591*  ; restore everything
040454 FD E1       0592*      pop iy
040456 DD E1       0593*      pop ix
040458 E1          0594*      pop hl
040459 D1          0595*      pop de
04045A C1          0596*      pop bc
04045B F1          0597*      pop af
04045C             0598*  ; all done
04045C C9          0599*      ret
04045D             0600*  
04045D             0601*  ; print bytes from an address to the screen in binary format
04045D             0602*  ; with the bits of each byte in reverse order (lsb first)
04045D             0603*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04045D             0604*  ; outputs: values of each byte printed to screen separated by spaces
04045D             0605*  ; destroys: nothing
04045D             0606*  dumpMemoryBinRev:
04045D             0607*  ; save all registers to the stack
04045D F5          0608*      push af
04045E C5          0609*      push bc
04045F D5          0610*      push de
040460 E5          0611*      push hl
040461 DD E5       0612*      push ix
040463 FD E5       0613*      push iy
040465             0614*  
040465             0615*  ; set b to be our loop counter
040465 47          0616*      ld b,a
040466             0617*  @loop:
040466             0618*  ; print the byte
040466 7E          0619*      ld a,(hl)
040467 E5          0620*      push hl
040468 C5          0621*      push bc
040469 CD 6C 01 04 0622*      call printBin8Rev
04046D C1          0623*      pop bc
04046E             0624*  ; print a space
04046E 3E 20       0625*      ld a,' '
040470 5B D7       0626*      rst.lil 10h
040472 E1          0627*      pop hl
040473 23          0628*      inc hl
040474 10 F0       0629*      djnz @loop
040476 CD 95 00 04 0630*      call printNewLine
04047A             0631*  
04047A             0632*  ; restore everything
04047A FD E1       0633*      pop iy
04047C DD E1       0634*      pop ix
04047E E1          0635*      pop hl
04047F D1          0636*      pop de
040480 C1          0637*      pop bc
040481 F1          0638*      pop af
040482             0639*  ; all done
040482 C9          0640*      ret
040483             0035   	include "files.inc"
040483             0001*  ; load to onboard 8k sram
040483             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040483             0036   	include "fonts_bmp.inc"
040483             0001*  ; plots a bitmap character to the screen
040483             0002*  ; inputs: a; ascii character to plot
040483             0003*  ;      bc,de = x,y screen coordinates in pixels
040483             0004*  ;      ix pointed at the font definition lut
040483             0005*  ; returns: bc as the next x coordinate to plot
040483             0006*  ;          pretty pixels which hopefully resemble readable text
040483             0007*  ; destroys: lotsa stuff
040483             0008*  font_bmp_plot:
040483             0009*  ; back up bc,de
040483 C5          0010*      push bc
040484 D5          0011*      push de
040485             0012*  ; get the buffer id of the character
040485 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040487 06 06       0014*      ld b,6 ; six bytes per lookup record
040489 4F          0015*      ld c,a
04048A ED 4C       0016*      mlt bc
04048C DD 09       0017*      add ix,bc ; now ix points to the character definition
04048E DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
040491 CD 50 07 04 0019*      call vdu_buff_select
040495             0020*  ; plot the character
040495 D1          0021*      pop de
040496 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
040499 83          0023*      add a,e ; add the y-coordinate
04049A 5F          0024*      ld e,a
04049B 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04049D 8A          0026*      adc a,d
04049E 57          0027*      ld d,a ; plot_y now correct for the character
04049F C1          0028*      pop bc ; plot_x
0404A0 C5          0029*      push bc ; we want it back after the plot
0404A1 CD 86 07 04 0030*      call vdu_plot_bmp
0404A5             0031*  ; now set bc to the next x coordinate
0404A5 C1          0032*      pop bc
0404A6 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0404A9 C6 02       0034*      add a,2 ; add a little padding between characters
0404AB 81          0035*      add a,c ; bump the original x-coordinate
0404AC 4F          0036*      ld c,a
0404AD 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0404AF 88          0038*      adc a,b
0404B0 47          0039*      ld b,a ; plot_x now correct for the next character
0404B1 C9          0040*      ret
0404B2             0041*  
0404B2             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0404B2             0043*  ; inputs: hl; pointer to the string
0404B2             0044*  ;       bc,de = x,y screen coordinates in pixels
0404B2             0045*  ;       ix pointed at the font definition lut
0404B2             0046*  ; returns: bc as the next x coordinate to plot
0404B2             0047*  ;          de as the next y coordinate to plot
0404B2             0048*  ;          pretty pixels which hopefully resemble readable text
0404B2             0049*  font_bmp_print:
0404B2             0050*  @next_char:
0404B2             0051*  ; fetch the next character in the string
0404B2 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0404B3 FE 00       0053*      cp 0 ; is it zero?
0404B5 C8          0054*      ret z ; if so, we're done
0404B6 23          0055*      inc hl ; point to the next character
0404B7 E5          0056*      push hl ; save the pointer
0404B8 D5          0057*      push de ; save our y-coordinate
0404B9 DD E5       0058*      push ix ; save the font lut pointer
0404BB CD 83 04 04 0059*      call font_bmp_plot ; plot the character
0404BF DD E1       0060*      pop ix ; restore the font lut pointer
0404C1 D1          0061*      pop de ; restore our y-coordinate
0404C2 E1          0062*      pop hl ; restore the pointer
0404C3 C3 B2 04 04 0063*      jp @next_char ; loop
0404C7             0037       include "timer.inc"
0404C7             0001*  ; Table 32. Timer Control Registers
0404C7             0002*  ; this constant is the base address of the timer control registers
0404C7             0003*  ; each timer takes three bytes:
0404C7             0004*  ;   0: control register
0404C7             0005*  ;   1: low byte of timer reset value
0404C7             0006*  ;   2: high byte of timer reset value
0404C7             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0404C7             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0404C7             0009*  TMR_CTL:     equ 80h
0404C7             0010*  
0404C7             0011*  ; Timer Control Register Bit Definitions
0404C7             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0404C7             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0404C7             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0404C7             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0404C7             0016*                              ; the TMRx_CTL register is read.
0404C7             0017*  
0404C7             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0404C7             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0404C7             0020*  
0404C7             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0404C7             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0404C7             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0404C7             0024*                              ; written to the counter when the end-of-count value is reached.
0404C7             0025*  
0404C7             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0404C7             0027*  CLK_DIV_256:  equ %00001100 ;
0404C7             0028*  CLK_DIV_64:   equ %00001000 ;
0404C7             0029*  CLK_DIV_16:   equ %00000100 ;
0404C7             0030*  CLK_DIV_4:    equ %00000000 ;
0404C7             0031*  
0404C7             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0404C7             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0404C7             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0404C7             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0404C7             0036*                              ; programmer must ensure that this bit is set to 1 each time
0404C7             0037*                              ; SINGLE-PASS mode is used.
0404C7             0038*  
0404C7             0039*  ; disable/enable the programmable reload timer
0404C7             0040*  PRT_EN_0:     equ %00000000 ;
0404C7             0041*  PRT_EN_1:     equ %00000001 ;
0404C7             0042*  
0404C7             0043*  ; Table 37. Timer Input Source Select Register
0404C7             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0404C7             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0404C7             0046*  ;   00: System clock / CLK_DIV
0404C7             0047*  ;   01: RTC / CLK_DIV
0404C7             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0404C7             0049*  ;   10: GPIO port B pin 1.
0404C7             0050*  ;   11: GPIO port B pin 1.
0404C7             0051*  TMR_ISS:   equ 92h ; register address
0404C7             0052*  
0404C7             0053*  ; Table 51. Real-Time Clock Control Register
0404C7             0054*  RTC_CTRL: equ EDh ; register address
0404C7             0055*  
0404C7             0056*  ; alarm interrupt disable/enable
0404C7             0057*  RTC_ALARM_0:    equ %00000000
0404C7             0058*  RTC_ALARM_1:    equ %10000000
0404C7             0059*  
0404C7             0060*  ; interrupt on alarm disable/enable
0404C7             0061*  RTC_INT_ENT_0:  equ %00000000
0404C7             0062*  RTC_INT_ENT_1:  equ %01000000
0404C7             0063*  
0404C7             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0404C7             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0404C7             0066*  
0404C7             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0404C7             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0404C7             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0404C7             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0404C7             0071*  
0404C7             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0404C7             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0404C7             0074*  
0404C7             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0404C7             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0404C7             0077*  
0404C7             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0404C7             0079*                                  ; RTC counter is enabled.
0404C7             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0404C7             0081*                                  ; RTC counter is disabled.
0404C7             0082*  
0404C7             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0404C7             0084*  
0404C7             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0404C7             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0404C7 00 00 00    0087*  prt_reload: dl 0x000000
0404CA             0088*  
0404CA             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0404CA             0090*  ; ;          de = number PRT interrupts during test interval
0404CA             0091*  ; prt_calibrate:
0404CA             0092*  ;     call vdu_vblank
0404CA             0093*  ; ; set a MOS timer
0404CA             0094*  ;     ld hl,120*1 ; 1 second
0404CA             0095*  ;     ld iy,tmr_test
0404CA             0096*  ;     call tmr_set
0404CA             0097*  ; ; set a PRT timer
0404CA             0098*  ;     ; ld hl,prt_reload_hardware
0404CA             0099*  ;     ; ld hl,prt_reload_emulator
0404CA             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0404CA             0101*  ;     ld (prt_reload),hl
0404CA             0102*  ;     call prt_set
0404CA             0103*  ; @loop:
0404CA             0104*  ; ; check time remaining on MOS timer
0404CA             0105*  ;     call tmr_get
0404CA             0106*  ;     jp z,@done ; time expired,so quit
0404CA             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0404CA             0108*  ;     jr @loop
0404CA             0109*  ; @done:
0404CA             0110*  ;     ld de,(prt_irq_counter)
0404CA             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0404CA             0112*  ;     ld (prt_reload),bc
0404CA             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0404CA             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0404CA             0115*  ;     ld (is_emulator),a
0404CA             0116*  ;     sbc hl,de
0404CA             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0404CA             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0404CA             0119*  ;     ret m ; negative result means we're on hardware
0404CA             0120*  ;     inc a ; we're on emulator
0404CA             0121*  ;     ld (is_emulator),a
0404CA             0122*  ;     ld bc,prt_reload_emulator
0404CA             0123*  ;     ld (prt_reload),bc
0404CA             0124*  ;     ld hl,on_emulator
0404CA             0125*  ;     ret
0404CA             0126*  
0404CA             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0404CA             0128*  
0404CA             0129*  ; set PRT timer
0404CA             0130*  prt_set:
0404CA 21 00 00 00 0131*      ld hl,0
0404CE 22 18 05 04 0132*      ld (prt_irq_counter),hl
0404D2 2A C7 04 04 0133*      ld hl,(prt_reload)
0404D6 ED 29 84    0134*      out0 ($84),l
0404D9 ED 21 85    0135*  	out0 ($85),h
0404DC             0136*  ; disable timer
0404DC 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0404DE ED 39 83    0138*  	out0 ($83),a
0404E1             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0404E1 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0404E3 ED 39 83    0141*  	out0 ($83),a
0404E6 C9          0142*      ret
0404E7             0143*  
0404E7             0144*  ; ===============================================
0404E7             0145*  ; PRT Timer Interrupt Handling
0404E7             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0404E7             0147*  ; -----------------------------------------------
0404E7             0148*  prt_irq_init:
0404E7             0149*      ; set up interrupt vector table 2
0404E7 21 00 00 00 0150*  	ld hl,0
0404EB 3A 0C 01 00 0151*  	ld a,($10c)
0404EF 6F          0152*  	ld l,a
0404F0 3A 0D 01 00 0153*  	ld a,($10d)
0404F4 67          0154*  	ld h,a
0404F5             0155*  
0404F5             0156*  	; skip over CALL ($c3)
0404F5 23          0157*  	inc hl
0404F6             0158*  	; load address of jump into vector table 2 (in ram)
0404F6 ED 27       0159*  	ld hl,(hl)
0404F8             0160*  
0404F8             0161*  	; write CALL prt_irq_handler to vector table 2
0404F8 3E C3       0162*  	ld a,$c3
0404FA 77          0163*  	ld (hl),a
0404FB 23          0164*  	inc hl
0404FC 11 03 05 04 0165*  	ld de,prt_irq_handler
040500 ED 1F       0166*  	ld (hl),de
040502             0167*  
040502 C9          0168*      ret
040503             0169*  
040503             0170*  prt_irq_handler:
040503 F3          0171*  	di
040504 F5          0172*  	push af
040505 E5          0173*      push hl
040506 ED 38 83    0174*  	in0 a,($83)
040509 2A 18 05 04 0175*  	ld hl,(prt_irq_counter)
04050D 23          0176*  	inc hl
04050E 22 18 05 04 0177*  	ld (prt_irq_counter),hl
040512 E1          0178*      pop hl
040513 F1          0179*  	pop af
040514 FB          0180*  	ei
040515 5B ED 4D    0181*  	reti.l
040518             0182*  
040518             0183*  prt_irq_counter:
040518 00 00 00    0184*  	.dl 0
04051B             0185*  prt_irq_counter_saved:
04051B 00 00 00    0186*      .dl 0
04051E             0187*  
04051E             0188*  prt_loop_reset:
04051E E5          0189*      push hl
04051F 21 00 00 00 0190*  	ld hl,0
040523 22 18 05 04 0191*  	ld (prt_irq_counter),hl
040527 22 89 05 04 0192*      ld (prt_loop_counter),hl
04052B 22 8C 05 04 0193*      ld (prt_loops),hl
04052F CD CA 04 04 0194*      call prt_set
040533 E1          0195*      pop hl
040534 C9          0196*      ret
040535             0197*  
040535             0198*  prt_loop_start:
040535 E5          0199*      push hl
040536 21 00 00 00 0200*  	ld hl,0
04053A 22 18 05 04 0201*  	ld (prt_irq_counter),hl
04053E E1          0202*      pop hl
04053F C9          0203*      ret
040540             0204*  
040540             0205*  prt_loop_stop:
040540 E5          0206*      push hl
040541 D5          0207*      push de
040542 2A 18 05 04 0208*      ld hl,(prt_irq_counter)
040546 ED 5B 89 05 0209*      ld de,(prt_loop_counter)
       04          
04054B 19          0210*      add hl,de
04054C 22 89 05 04 0211*      ld (prt_loop_counter),hl
040550 21 00 00 00 0212*      ld hl,0
040554 22 18 05 04 0213*      ld (prt_irq_counter),hl
040558 2A 8C 05 04 0214*      ld hl,(prt_loops)
04055C 23          0215*      inc hl
04055D 22 8C 05 04 0216*      ld (prt_loops),hl
040561 D1          0217*      pop de
040562 E1          0218*      pop hl
040563 C9          0219*      ret
040564             0220*  
040564             0221*  ; inputs: bc = y,x text coordinates to print
040564             0222*  prt_loop_print:
040564 F5          0223*      push af
040565 E5          0224*      push hl
040566 C5          0225*      push bc
040567 D5          0226*      push de
040568 DD E5       0227*      push ix
04056A FD E5       0228*      push iy
04056C CD 81 06 04 0229*      call vdu_move_cursor
040570             0230*  
040570 2A 89 05 04 0231*      ld hl,(prt_loop_counter)
040574 CD D0 00 04 0232*      call printDec
040578             0233*  
040578 2A 8C 05 04 0234*      ld hl,(prt_loops)
04057C CD D0 00 04 0235*      call printDec
040580             0236*  
040580 FD E1       0237*      pop iy
040582 DD E1       0238*      pop ix
040584 D1          0239*      pop de
040585 C1          0240*      pop bc
040586 E1          0241*      pop hl
040587 F1          0242*      pop af
040588 C9          0243*      ret
040589             0244*  
040589             0245*  prt_loop_counter:
040589 00 00 00    0246*      .dl 0
04058C             0247*  prt_loops:
04058C 00 00 00    0248*      .dl 0
04058F             0249*  
04058F             0250*  ; ===============================================
04058F             0251*  ; Timer functions
04058F             0252*  ; -----------------------------------------------
04058F             0253*  ; set a countdown timer
04058F             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04058F             0255*  ; returns: hl = current time
04058F             0256*  tmr_set:
04058F FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
040592             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
040592 3E 08       0001*M 			LD	A, function
040594 5B CF       0002*M 			RST.LIL	08h
040596 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
040599 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04059C C9          0261*      ret
04059D             0262*  
04059D             0263*  ; gets time remaining on a countdown timer
04059D             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04059D             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04059D             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04059D             0267*  tmr_get:
04059D             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04059D 3E 08       0001*M 			LD	A, function
04059F 5B CF       0002*M 			RST.LIL	08h
0405A1 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0405A4 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0405A7 AF          0271*      xor a                   ; clear carry
0405A8 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0405AA FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0405AD AF          0274*      xor a                   ; clear carry
0405AE ED 5A       0275*      adc hl,de               ; hl = time remaining
0405B0             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0405B0 C9          0277*      ret
0405B1             0278*  
0405B1 00 00 00    0279*  timestamp_now: dl 0
0405B4 00 00 00    0280*  timestamp_old: dl 0
0405B7 00 00 00    0281*  timestamp_chg: dl 0
0405BA             0282*  
0405BA             0283*  ; update the global timestamp from the system clock
0405BA             0284*  ; inputs: none
0405BA             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0405BA             0286*  ;          de = current time
0405BA             0287*  ;          ix = pointer to syvars table
0405BA             0288*  ; destroys: af,hl,de,ix
0405BA             0289*  timestamp_tick:
0405BA ED 5B B1 05 0290*      ld de,(timestamp_now)   ; get previous time
       04          
0405BF ED 53 B4 05 0291*      ld (timestamp_old),de   ; save previous time
       04          
0405C4             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0405C4 3E 08       0001*M 			LD	A, function
0405C6 5B CF       0002*M 			RST.LIL	08h
0405C8 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0405CB 22 B1 05 04 0294*      ld (timestamp_now),hl   ; save current time
0405CF AF          0295*      xor a                   ; clear carry
0405D0 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0405D2 22 B7 05 04 0297*      ld (timestamp_chg),hl   ; save elapsed time
0405D6 C9          0298*      ret
0405D7             0299*  
0405D7             0300*  ; set a countdown timer
0405D7             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0405D7             0302*  ; requires: timestamp_tick to be called at least once before this function
0405D7             0303*  ; returns: hl = current time
0405D7             0304*  ; destroys: hl
0405D7             0305*  timestamp_tmr_set:
0405D7 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0405DA 2A B1 05 04 0307*      ld hl,(timestamp_now)   ; get current timestamp
0405DE FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0405E1 C9          0309*      ret
0405E2             0310*  
0405E2             0311*  ; gets time remaining on a countdown timer following the global timestamp
0405E2             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0405E2             0313*  ; requires: timestamp_tick to be called at least once before this function
0405E2             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0405E2             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0405E2             0316*  ; destroys: af,hl,de
0405E2             0317*  timestamp_tmr_get:
0405E2 ED 5B B1 05 0318*      ld de,(timestamp_now)   ; get current timestamp
       04          
0405E7 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0405EA AF          0320*      xor a                   ; clear carry
0405EB ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0405ED FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0405F0 AF          0323*      xor a                   ; clear carry
0405F1 ED 5A       0324*      adc hl,de               ; hl = time remaining
0405F3             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0405F3 C9          0326*      ret
0405F4             0327*  
0405F4             0328*  ; main loop timer functions
0405F4             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0405FA             0330*  
0405FA             0331*  ; set a countdown timer for the main loop using the timestamp timer
0405FA             0332*  ; inputs: hl = time to set in 1/120ths of a second
0405FA             0333*  ; returns: hl = current time
0405FA             0334*  ; destroys: af,hl,de,ix,iy
0405FA             0335*  tmr_main_loop_set:
0405FA FD 21 F4 05 0336*      ld iy,tmr_main_loop
       04          
0405FF FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
040602 CD BA 05 04 0338*      call timestamp_tick
040606 2A B1 05 04 0339*      ld hl,(timestamp_now)   ; get current timestamp
04060A FD 2F 00    0340*      ld (iy+0),hl ; set start time
04060D C9          0341*      ret
04060E             0342*  
04060E             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
04060E             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04060E             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
04060E             0346*  ; destroys: af,hl,de,ix,iy
04060E             0347*  tmr_main_loop_get:
04060E CD BA 05 04 0348*      call timestamp_tick
040612 FD 21 F4 05 0349*      ld iy,tmr_main_loop
       04          
040617 CD E2 05 04 0350*      call timestamp_tmr_get
04061B C9          0351*      ret
04061C             0352*  
04061C             0353*  ; set a stopwatch
04061C             0354*  ; returns: hl = start time
04061C             0355*  ; destroys: hl,ix
04061C             0356*  stopwatch_set:
04061C             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
04061C 3E 08       0001*M 			LD	A, function
04061E 5B CF       0002*M 			RST.LIL	08h
040620 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
040623 22 38 06 04 0359*      ld (stopwatch_started),hl            ; set start time
040627 C9          0360*      ret
040628             0361*  
040628             0362*  ; gets time elapsed on a stopwatch
040628             0363*  ; returns: hl = time elapsed in 1/120ths of a second
040628             0364*  ; destroys: af,hl,de,ix
040628             0365*  stopwatch_get:
040628             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
040628 3E 08       0001*M 			LD	A, function
04062A 5B CF       0002*M 			RST.LIL	08h
04062C DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
04062F ED 5B 38 06 0368*      ld de,(stopwatch_started)            ; get start time
       04          
040634 AF          0369*      xor a                   ; clear carry
040635 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
040637 C9          0371*      ret
040638             0372*  
040638             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04063B             0374*  
04063B             0375*  ; ------------------
04063B             0376*  ; delay routine
04063B             0377*  ; Author: Richard Turrnidge
04063B             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04063B             0379*  ; routine waits a fixed time,then returns
04063B             0380*  ; arrive with A =  the delay byte. One bit to be set only.
04063B             0381*  ; eg. ld A,00000100b
04063B             0382*  
04063B             0383*  multiPurposeDelay:
04063B F5          0384*      push af
04063C C5          0385*      push bc
04063D DD E5       0386*      push ix
04063F 47          0387*      ld b,a
040640 3E 08       0388*      ld a,$08
040642 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
040644             0390*  
040644             0391*  waitLoop:
040644             0392*  
040644 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
040647             0394*  
040647             0395*                                  ;   we check if bit set is same as last time we checked.
040647             0396*                                  ;   bit 0 - don't use
040647             0397*                                  ;   bit 1 - changes 64 times per second
040647             0398*                                  ;   bit 2 - changes 32 times per second
040647             0399*                                  ;   bit 3 - changes 16 times per second
040647             0400*  
040647             0401*                                  ;   bit 4 - changes 8 times per second
040647             0402*                                  ;   bit 5 - changes 4 times per second
040647             0403*                                  ;   bit 6 - changes 2 times per second
040647             0404*                                  ;   bit 7 - changes 1 times per second
040647 A0          0405*      and b
040648 4F          0406*      ld c,a
040649 3A 5A 06 04 0407*      ld a,(oldTimeStamp)
04064D B9          0408*      cp c                        ; is A same as last value?
04064E 28 F4       0409*      jr z,waitLoop              ; loop here if it is
040650 79          0410*      ld a,c
040651 32 5A 06 04 0411*      ld (oldTimeStamp),a        ; set new value
040655             0412*  
040655 DD E1       0413*      pop ix
040657 C1          0414*      pop bc
040658 F1          0415*      pop af
040659 C9          0416*      ret
04065A             0417*  
04065A 00          0418*  oldTimeStamp:   .db 00h
04065B             0038       include "vdu.inc"
04065B             0001*  ; &E8-&EF 	232-239 	Bitmap plot §
04065B             0002*  plot_bmp: equ 0xE8
04065B             0003*  ; 5 	Plot absolute in current foreground colour
04065B             0004*  dr_abs_fg: equ 5
04065B             0005*  
04065B             0006*  ; VDU 30: Home cursor
04065B             0007*  vdu_home_cursor:
04065B 3E 1E       0008*      ld a,30
04065D 5B D7       0009*  	rst.lil $10
04065F C9          0010*  	ret
040660             0011*  
040660             0012*  cursor_on:
040660 21 6B 06 04 0013*  	ld hl,@cmd
040664 01 03 00 00 0014*  	ld bc,@end-@cmd
040668 5B DF       0015*  	rst.lil $18
04066A C9          0016*  	ret
04066B             0017*  @cmd:
04066B 17 01 01    0018*  	db 23,1,1
04066E             0019*  @end:
04066E             0020*  
04066E             0021*  cursor_off:
04066E 21 79 06 04 0022*  	ld hl,@cmd
040672 01 03 00 00 0023*  	ld bc,@end-@cmd
040676 5B DF       0024*  	rst.lil $18
040678 C9          0025*  	ret
040679             0026*  @cmd:
040679 17 01 00    0027*  	db 23,1,0
04067C             0028*  @end:
04067C             0029*  
04067C             0030*  ; VDU 9: Move cursor forward one character
04067C             0031*  vdu_cursor_forward:
04067C 3E 09       0032*      ld a,9
04067E 5B D7       0033*  	rst.lil $10
040680 C9          0034*  	ret
040681             0035*  
040681             0036*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
040681             0037*  ; inputs: c=x, b=y 8-bit unsigned integers
040681             0038*  vdu_move_cursor:
040681 ED 43 92 06 0039*      ld (@x0),bc
       04          
040686 21 91 06 04 0040*  	ld hl,@cmd
04068A 01 03 00 00 0041*  	ld bc,@end-@cmd
04068E 5B DF       0042*  	rst.lil $18
040690 C9          0043*  	ret
040691 1F          0044*  @cmd: 	db 31
040692 00          0045*  @x0:	db 0
040693 00          0046*  @y0: 	db 0
040694 00          0047*  @end: 	db 0 ; padding
040695             0048*  
040695             0049*  ; VDU 12: Clear text area (CLS)
040695             0050*  vdu_cls:
040695 3E 0C       0051*      ld a,12
040697 5B D7       0052*  	rst.lil $10
040699 C9          0053*  	ret
04069A             0054*  
04069A             0055*  vdu_flip:
04069A 21 A5 06 04 0056*  	ld hl,@cmd
04069E 01 03 00 00 0057*  	ld bc,@end-@cmd
0406A2 5B DF       0058*  	rst.lil $18
0406A4 C9          0059*  	ret
0406A5 17 00 C3    0060*  @cmd: db 23,0,0xC3
0406A8             0061*  @end:
0406A8             0062*  
0406A8             0063*  ; VDU 16: Clear graphics area (CLG)
0406A8             0064*  vdu_clg:
0406A8 3E 10       0065*      ld a,16
0406AA 5B D7       0066*  	rst.lil $10
0406AC C9          0067*  	ret
0406AD             0068*  
0406AD             0069*  ; VDU 17, colour: Define text colour (COLOUR)
0406AD             0070*  vdu_colour_text:
0406AD 32 BD 06 04 0071*  	ld (@arg),a
0406B1 21 BC 06 04 0072*  	ld hl,@cmd
0406B5 01 02 00 00 0073*  	ld bc,@end-@cmd
0406B9 5B DF       0074*  	rst.lil $18
0406BB C9          0075*  	ret
0406BC 11          0076*  @cmd: db 17
0406BD 00          0077*  @arg: db 0
0406BE             0078*  @end:
0406BE             0079*  
0406BE             0080*  
0406BE             0081*  vdu_gcol_bg:
0406BE 32 D5 06 04 0082*  	ld (@mode),a
0406C2 79          0083*      ld a,c
0406C3 C6 80       0084*      add a,128
0406C5 32 D6 06 04 0085*      ld (@col),a
0406C9 21 D4 06 04 0086*  	ld hl,@cmd
0406CD 01 03 00 00 0087*  	ld bc,@end-@cmd
0406D1 5B DF       0088*  	rst.lil $18
0406D3 C9          0089*  	ret
0406D4 12          0090*  @cmd:  db 18
0406D5 00          0091*  @mode: db 0
0406D6 00          0092*  @col:  db 0
0406D7             0093*  @end:
0406D7             0094*  
0406D7             0095*  
0406D7             0096*  ; VDU 28, left, bottom, right, top: Set text viewport **
0406D7             0097*  ; MIND THE LITTLE-ENDIANESS
0406D7             0098*  ; inputs: c=left,b=bottom,e=right,d=top
0406D7             0099*  ; outputs; nothing
0406D7             0100*  ; destroys: a might make it out alive
0406D7             0101*  vdu_set_txt_viewport:
0406D7 ED 43 ED 06 0102*      ld (@lb),bc
       04          
0406DC ED 53 EF 06 0103*  	ld (@rt),de
       04          
0406E1 21 EC 06 04 0104*  	ld hl,@cmd
0406E5 01 05 00 00 0105*  	ld bc,@end-@cmd
0406E9 5B DF       0106*  	rst.lil $18
0406EB C9          0107*  	ret
0406EC 1C          0108*  @cmd:   db 28 ; set text viewport command
0406ED 00 00       0109*  @lb: 	dw 0x0000 ; set by bc
0406EF 00 00       0110*  @rt: 	dw 0x0000 ; set by de
0406F1 00          0111*  @end:   db 0x00	  ; padding
0406F2             0112*  
0406F2             0113*  ; Wait for VBLANK interrupt
0406F2             0114*  vdu_vblank:
0406F2 DD E5       0115*      PUSH 	IX
0406F4             0116*  	MOSCALL	mos_sysvars
0406F4 3E 08       0001*M 			LD	A, function
0406F6 5B CF       0002*M 			RST.LIL	08h
0406F8 DD 7E 00    0117*  	LD	A, (IX + sysvar_time + 0)
0406FB             0118*  @wait:
0406FB DD BE 00    0119*      CP 	A, (IX + sysvar_time + 0)
0406FE 28 FB       0120*      JR	Z, @wait
040700 DD E1       0121*      POP	IX
040702 C9          0122*      RET
040703             0123*  
040703             0124*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040703             0125*  ; NOTE: the order of the y-coordinate parameters are inverted
040703             0126*  ; 	because we have turned off logical screen scaling
040703             0127*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040703             0128*  ; outputs; nothing
040703             0129*  ; destroys: a might make it out alive
040703             0130*  vdu_set_gfx_viewport:
040703 ED 43 23 07 0131*      ld (@x0),bc
       04          
040708 FD 22 25 07 0132*      ld (@y1),iy
       04          
04070D DD 22 27 07 0133*  	ld (@x1),ix
       04          
040712 ED 53 29 07 0134*  	ld (@y0),de
       04          
040717 21 22 07 04 0135*  	ld hl,@cmd
04071B 01 09 00 00 0136*  	ld bc,@end-@cmd
04071F 5B DF       0137*  	rst.lil $18
040721 C9          0138*  	ret
040722 18          0139*  @cmd:   db 24 ; set graphics viewport command
040723 00 00       0140*  @x0: 	dw 0x0000 ; set by bc
040725 00 00       0141*  @y1: 	dw 0x0000 ; set by iy
040727 00 00       0142*  @x1: 	dw 0x0000 ; set by ix
040729 00 00       0143*  @y0: 	dw 0x0000 ; set by de
04072B 00          0144*  @end:   db 0x00	  ; padding
04072C             0145*  
04072C             0146*  ; SCREEN MODES
04072C             0147*  ; ===============================
04072C             0148*  ; Mode  Horz  Vert  Cols  Refresh
04072C             0149*  ; ---   ----  ----  ----  -------
04072C             0150*  ; 11    320   240   2     60hz
04072C             0151*  ; 139   320   240   2     60hz
04072C             0152*  ; 23    512   384   2     60hz
04072C             0153*  ; 151   512   384   2     60hz
04072C             0154*  ; 6     640   240   2     60hz
04072C             0155*  ; 134   640   240   2     60hz
04072C             0156*  ; 2     640   480   2     60hz
04072C             0157*  ; 130   640   480   2     60hz
04072C             0158*  ; 17    800   600   2     60hz
04072C             0159*  ; 145   800   600   2     60hz
04072C             0160*  ; 18    1024  768   2     60hz
04072C             0161*  ; 146   1024  768   2     60hz
04072C             0162*  ; ---   ----  ----  ----  -------
04072C             0163*  ; 10    320   240   4     60hz
04072C             0164*  ; 138   320   240   4     60hz
04072C             0165*  ; 22    512   384   4     60hz
04072C             0166*  ; 150   512   384   4     60hz
04072C             0167*  ; 5     640   240   4     60hz
04072C             0168*  ; 133   640   240   4     60hz
04072C             0169*  ; 1     640   480   4     60hz
04072C             0170*  ; 129   640   480   4     60hz
04072C             0171*  ; 16    800   600   4     60hz
04072C             0172*  ; 19    1024  768   4     60hz
04072C             0173*  ; ---   ----  ----  ----  -------
04072C             0174*  ; 9     320   240   16    60hz
04072C             0175*  ; 137   320   240   16    60hz
04072C             0176*  ; 21    512   384   16    60hz
04072C             0177*  ; 149   512   384   16    60hz
04072C             0178*  ; 4     640   240   16    60hz
04072C             0179*  ; 132   640   240   16    60hz
04072C             0180*  ; 0     640   480   16    60hz
04072C             0181*  ; 7     n/a   n/a   16    60hz
04072C             0182*  ; ---   ----  ----  ----  -------
04072C             0183*  ; 8     320   240   64    60hz
04072C             0184*  ; 136   320   240   64    60hz
04072C             0185*  ; 20    512   384   64    60hz
04072C             0186*  ; 3     640   240   64    60hz
04072C             0187*  ; ---   ----  ----  ----  -------
04072C             0188*  vdu_set_screen_mode:
04072C 32 3C 07 04 0189*  	ld (@arg),a
040730 21 3B 07 04 0190*  	ld hl,@cmd
040734 01 02 00 00 0191*  	ld bc,@end-@cmd
040738 5B DF       0192*  	rst.lil $18
04073A C9          0193*  	ret
04073B 16          0194*  @cmd: db 22 ; set screen mode
04073C 00          0195*  @arg: db 0  ; screen mode parameter
04073D             0196*  @end:
04073D             0197*  
04073D             0198*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04073D             0199*  ; inputs: a is scaling mode, 1=on, 0=off
04073D             0200*  ; note: default setting on boot is scaling ON
04073D             0201*  vdu_set_scaling:
04073D 32 4F 07 04 0202*  	ld (@arg),a
040741 21 4C 07 04 0203*  	ld hl,@cmd
040745 01 04 00 00 0204*  	ld bc,@end-@cmd
040749 5B DF       0205*  	rst.lil $18
04074B C9          0206*  	ret
04074C 17 00 C0    0207*  @cmd: db 23,0,0xC0
04074F 00          0208*  @arg: db 0  ; scaling on/off
040750             0209*  @end:
040750             0210*  
040750             0211*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
040750             0212*  ; inputs: hl=bufferId
040750             0213*  vdu_buff_select:
040750 22 62 07 04 0214*  	ld (@bufferId),hl
040754 21 5F 07 04 0215*  	ld hl,@cmd
040758 01 05 00 00 0216*  	ld bc,@end-@cmd
04075C 5B DF       0217*  	rst.lil $18
04075E C9          0218*  	ret
04075F 17 1B 20    0219*  @cmd: db 23,27,0x20
040762 00 00       0220*  @bufferId: dw 0x0000
040764 00          0221*  @end: db 0x00 ; padding
040765             0222*  
040765             0223*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
040765             0224*  ; inputs: a=format; bc=width; de=height
040765             0225*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
040765             0226*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
040765             0227*  ; 0 	RGBA8888 (4-bytes per pixel)
040765             0228*  ; 1 	RGBA2222 (1-bytes per pixel)
040765             0229*  ; 2 	Mono/Mask (1-bit per pixel)
040765             0230*  ; 3 	Reserved for internal use by VDP (“native” format)
040765             0231*  vdu_bmp_create:
040765 ED 43 81 07 0232*      ld (@width),bc
       04          
04076A ED 53 83 07 0233*      ld (@height),de
       04          
04076F 32 85 07 04 0234*      ld (@fmt),a
040773 21 7E 07 04 0235*  	ld hl,@cmd
040777 01 08 00 00 0236*  	ld bc,@end-@cmd
04077B 5B DF       0237*  	rst.lil $18
04077D C9          0238*  	ret
04077E 17 1B 21    0239*  @cmd:       db 23,27,0x21
040781 00 00       0240*  @width:     dw 0x0000
040783 00 00       0241*  @height:    dw 0x0000
040785 00          0242*  @fmt:       db 0x00
040786             0243*  @end:
040786             0244*  
040786             0245*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040786             0246*  ; &E8-&EF 	232-239 	Bitmap plot §
040786             0247*  ; VDU 25, mode, x; y;: PLOT command
040786             0248*  ; inputs: bc=x0, de=y0
040786             0249*  ; prerequisites: vdu_buff_select
040786             0250*  vdu_plot_bmp:
040786 ED 43 9D 07 0251*      ld (@x0),bc
       04          
04078B ED 53 9F 07 0252*      ld (@y0),de
       04          
040790 21 9B 07 04 0253*  	ld hl,@cmd
040794 01 06 00 00 0254*  	ld bc,@end-@cmd
040798 5B DF       0255*  	rst.lil $18
04079A C9          0256*  	ret
04079B 19          0257*  @cmd:   db 25
04079C ED          0258*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04079D 00 00       0259*  @x0: 	dw 0x0000
04079F 00 00       0260*  @y0: 	dw 0x0000
0407A1 00          0261*  @end:   db 0x00 ; padding
0407A2             0262*  
0407A2             0263*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0407A2             0264*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0407A2             0265*  vdu_load_img_rgba2_to_8:
0407A2             0266*  ; backup the target buffer id and image dimensions
0407A2 E5          0267*      push hl
0407A3 D5          0268*      push de
0407A4 C5          0269*      push bc
0407A5             0270*  ; load the rgba2 image to working buffer 65534
0407A5 21 FE FF 00 0271*      ld hl,65534 ; temporary working buffer id
0407A9 CD AC 08 04 0272*  	call vdu_load_buffer_from_file
0407AD             0273*  ; restore the image dimensions and target buffer id
0407AD C1          0274*      pop bc
0407AE D1          0275*      pop de
0407AF E1          0276*      pop hl
0407B0             0277*  ; fall through to vdu_rgba2_to_8
0407B0             0278*  
0407B0             0279*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0407B0             0280*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0407B0             0281*  ; the "expand bitmap" command is:
0407B0             0282*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0407B0             0283*  ; and then to reverse the byte order to fix endian-ness:
0407B0             0284*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0407B0             0285*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0407B0             0286*  ; VDU 23,27,&20,targetBufferID%;
0407B0             0287*  ; VDU 23,27,&21,width%;height%;0
0407B0             0288*  ; -------------------------------------------------------------------
0407B0             0289*  ; inputs: bc,de image width,height ; hl = targetBufferId
0407B0             0290*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0407B0             0291*  vdu_rgba2_to_8:
0407B0             0292*  ; load the image dimensions and buffer id parameters
0407B0 ED 43 0C 08 0293*      ld (@width),bc
       04          
0407B5 ED 53 0E 08 0294*      ld (@height),de
       04          
0407BA 22 F1 07 04 0295*      ld (@bufferId0),hl
0407BE 22 FE 07 04 0296*      ld (@bufferId2),hl
0407C2 22 07 08 04 0297*      ld (@bufferId1),hl
0407C6             0298*  ; clean up bytes that got stomped on by the ID loads
0407C6 3E 48       0299*      ld a,0x48
0407C8 32 F3 07 04 0300*      ld (@bufferId0+2),a
0407CC 3E 17       0301*      ld a,23
0407CE 32 09 08 04 0302*      ld (@bufferId1+2),a
0407D2 3E 18       0303*      ld a,24
0407D4 32 00 08 04 0304*      ld (@bufferId2+2),a
0407D8 AF          0305*      xor a
0407D9 32 10 08 04 0306*      ld (@height+2),a
0407DD             0307*  ; send the vdu command strings
0407DD 21 E8 07 04 0308*      ld hl,@beg
0407E1 01 29 00 00 0309*      ld bc,@end-@beg
0407E5 5B DF       0310*      rst.lil $18
0407E7 C9          0311*      ret
0407E8             0312*  @beg:
0407E8             0313*  ; Command 14: Consolidate blocks in a buffer
0407E8             0314*  ; VDU 23, 0, &A0, bufferId; 14
0407E8 17 00 A0    0315*      db 23,0,0xA0
0407EB FE FF       0316*      dw 65534 ; workingBufferId
0407ED 0E          0317*      db 14 ; consolidate blocks
0407EE             0318*  ; the "expand bitmap" command is:
0407EE             0319*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0407EE 17 00 A0    0320*      db 23,0,0xA0
0407F1 00 00       0321*  @bufferId0: dw 0x0000 ; targetBufferId
0407F3 48          0322*      db 0x48 ; given as decimal command 72 in the docs
0407F4 02          0323*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0407F5 FE FF       0324*      dw 65534 ; sourceBufferId
0407F7 00 7F BF FF 0325*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0407FB             0326*  ; reverse the byte order to fix endian-ness:
0407FB             0327*  ; Command 24: Reverse the order of data of blocks within a buffer
0407FB             0328*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0407FB             0329*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0407FB 17 00 A0    0330*      db 23,0,0xA0
0407FE 00 00       0331*  @bufferId2:    dw 0x0000 ; targetBufferId
040800 18          0332*      db 24 ; reverse byte order
040801 04          0333*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
040802 04 00       0334*      dw 4 ; size (4 bytes)
040804             0335*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
040804             0336*  ; VDU 23,27,&20,targetBufferID%;
040804 17 1B 20    0337*      db 23,27,0x20 ; select bitmap
040807 00 00       0338*  @bufferId1: dw 0x0000 ; targetBufferId
040809             0339*  ; VDU 23,27,&21,width%;height%;0
040809 17 1B 21    0340*      db 23,27,0x21 ; create bitmap from buffer
04080C 00 00       0341*  @width: dw 0x0000
04080E 00 00       0342*  @height: dw 0x0000
040810 00          0343*      db 0x00 ; rgba8888 format
040811             0344*  @end:
040811             0345*  
040811             0346*  ; scratch variables
040811 00 00 00    0347*  bufferId0: dl 0x000000
040814 00 00 00    0348*  bufferId1: dl 0x000000
040817             0349*  
040817             0350*  ; load a vdu buffer from local memory
040817             0351*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040817             0352*  vdu_load_buffer:
040817 ED 43 40 08 0353*      ld (@length),bc
       04          
04081C D5          0354*      push de ; save data pointer
04081D             0355*  ; send the vdu command string
04081D 7D          0356*      ld a,l
04081E 32 3D 08 04 0357*      ld (@bufferId),a
040822 7C          0358*      ld a,h
040823 32 3E 08 04 0359*      ld (@bufferId+1),a
040827 21 3A 08 04 0360*      ld hl,@cmd
04082B 01 08 00 00 0361*      ld bc,@end-@cmd
04082F 5B DF       0362*      rst.lil $18
040831             0363*  ; send the buffer data
040831 E1          0364*      pop hl ; pointer to data
040832 ED 4B 40 08 0365*      ld bc,(@length)
       04          
040837 5B DF       0366*      rst.lil $18 ; send it
040839 C9          0367*      ret
04083A             0368*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04083A 17 00 A0    0369*  @cmd:       db 23,0,0xA0
04083D 00 00       0370*  @bufferId:	dw 0x0000
04083F 00          0371*  		    db 0 ; load buffer
040840 00 00       0372*  @length:	dw 0x0000
040842 00          0373*  @end: db 0 ; padding
040843             0374*  
040843             0375*  ; clear a buffer
040843             0376*  ; inputs: hl = bufferId
040843             0377*  vdu_clear_buffer:
040843 7D          0378*      ld a,l
040844 32 5B 08 04 0379*      ld (@bufferId),a
040848 7C          0380*      ld a,h
040849 32 5C 08 04 0381*      ld (@bufferId+1),a
04084D 21 58 08 04 0382*      ld hl,@cmd
040851 01 06 00 00 0383*      ld bc,@end-@cmd
040855 5B DF       0384*      rst.lil $18
040857 C9          0385*      ret
040858 17 00 A0    0386*  @cmd:       db 23,0,0xA0
04085B 00 00       0387*  @bufferId:	dw 0x0000
04085D 02          0388*  		    db 2 ; clear buffer
04085E             0389*  @end:
04085E             0390*  
04085E             0391*  vdu_clear_all_buffers:
04085E             0392*  ; clear all buffers
04085E 21 69 08 04 0393*      ld hl,@beg
040862 01 06 00 00 0394*      ld bc,@end-@beg
040866 5B DF       0395*      rst.lil $18
040868 C9          0396*      ret
040869 17 00 A0    0397*  @beg: db 23,0,$A0
04086C FF FF       0398*        dw -1 ; clear all buffers
04086E 02          0399*        db 2  ; command 2: clear a buffer
04086F             0400*  @end:
04086F             0401*  
04086F             0402*  ; Command 14: Consolidate blocks in a buffer
04086F             0403*  vdu_consolidate_buffer:
04086F             0404*  ; set parameters for vdu call
04086F 7D          0405*      ld a,l
040870 32 87 08 04 0406*      ld (@bufferId),a
040874 7C          0407*      ld a,h
040875 32 88 08 04 0408*      ld (@bufferId+1),a
040879 21 84 08 04 0409*      ld hl,@beg
04087D 01 06 00 00 0410*      ld bc,@end-@beg
040881 5B DF       0411*      rst.lil $18
040883 C9          0412*      ret
040884             0413*  ; VDU 23, 0, &A0, bufferId; 14
040884 17 00 A0    0414*  @beg: db 23,0,0xA0
040887 00 00       0415*  @bufferId: dw 0x0000
040889 0E          0416*             db 14
04088A             0417*  @end:
04088A             0418*  
04088A             0419*  ; load an image file to a buffer and make it a bitmap
04088A             0420*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
04088A             0421*  vdu_load_img:
04088A             0422*  ; back up image type and dimension parameters
04088A 22 11 08 04 0423*      ld (bufferId0),hl
04088E F5          0424*      push af
04088F C5          0425*  	push bc
040890 D5          0426*  	push de
040891             0427*  ; load the image
040891 CD AC 08 04 0428*  	call vdu_load_buffer_from_file
040895             0429*  ; now make it a bitmap
040895 2A 11 08 04 0430*      ld hl,(bufferId0)
040899 CD 6F 08 04 0431*      call vdu_consolidate_buffer
04089D 2A 11 08 04 0432*      ld hl,(bufferId0)
0408A1 CD 50 07 04 0433*      call vdu_buff_select
0408A5 D1          0434*  	pop de ; image height
0408A6 C1          0435*  	pop bc ; image width
0408A7 F1          0436*  	pop af ; image type
0408A8 C3 65 07 04 0437*  	jp vdu_bmp_create ; will return to caller from there
0408AC             0438*  
0408AC             0439*  ; inputs: hl = bufferId; iy = pointer to filename
0408AC             0440*  vdu_load_buffer_from_file:
0408AC 22 11 08 04 0441*      ld (bufferId0),hl
0408B0             0442*  
0408B0             0443*  ; clear target buffer
0408B0 CD 43 08 04 0444*      call vdu_clear_buffer
0408B4             0445*  
0408B4             0446*  ; open the file in read mode
0408B4             0447*  ; Open a file
0408B4             0448*  ; HLU: Filename
0408B4             0449*  ;   C: Mode
0408B4             0450*  ; Returns:
0408B4             0451*  ;   A: Filehandle, or 0 if couldn't open
0408B4 FD E5       0452*  	push iy ; pointer to filename
0408B6 E1          0453*  	pop hl
0408B7 0E 01       0454*  	ld c,fa_read
0408B9             0455*      MOSCALL mos_fopen
0408B9 3E 0A       0001*M 			LD	A, function
0408BB 5B CF       0002*M 			RST.LIL	08h
0408BD 32 FC 08 04 0456*      ld (@filehandle),a
0408C1             0457*  
0408C1             0458*  @read_file:
0408C1             0459*  ; Read a block of data from a file
0408C1             0460*  ;   C: Filehandle
0408C1             0461*  ; HLU: Pointer to where to write the data to
0408C1             0462*  ; DEU: Number of bytes to read
0408C1             0463*  ; Returns:
0408C1             0464*  ; DEU: Number of bytes read
0408C1 3A FC 08 04 0465*      ld a,(@filehandle)
0408C5 4F          0466*      ld c,a
0408C6 21 00 E0 B7 0467*      ld hl,filedata
0408CA 11 00 20 00 0468*      ld de,8192 ; max we can read into onboard sram at one time
0408CE             0469*      MOSCALL mos_fread
0408CE 3E 1A       0001*M 			LD	A, function
0408D0 5B CF       0002*M 			RST.LIL	08h
0408D2             0470*  
0408D2             0471*  ; test de for zero bytes read
0408D2 21 00 00 00 0472*      ld hl,0
0408D6 AF          0473*      xor a ; clear carry
0408D7 ED 52       0474*      sbc hl,de
0408D9 CA F3 08 04 0475*      jp z,@close_file
0408DD             0476*  
0408DD             0477*  ; load a vdu buffer from local memory
0408DD             0478*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0408DD 2A 11 08 04 0479*      ld hl,(bufferId0)
0408E1 D5          0480*      push de ; chunksize
0408E2 C1          0481*      pop bc
0408E3 11 00 E0 B7 0482*      ld de,filedata
0408E7 CD 17 08 04 0483*      call vdu_load_buffer
0408EB             0484*  
0408EB             0485*  ; print progress breadcrumbs
0408EB 3E 2E       0486*      ld a,'.'
0408ED 5B D7       0487*      rst.lil 10h
0408EF             0488*  
0408EF             0489*  ; read the next block
0408EF C3 C1 08 04 0490*      jp @read_file
0408F3             0491*  
0408F3             0492*  ; close the file
0408F3             0493*  @close_file:
0408F3 3A FC 08 04 0494*      ld a,(@filehandle)
0408F7             0495*      MOSCALL mos_fclose
0408F7 3E 0B       0001*M 			LD	A, function
0408F9 5B CF       0002*M 			RST.LIL	08h
0408FB C9          0496*      ret ; vdu_load_buffer_from_file
0408FC             0497*  
0408FC 00          0498*  @filehandle: db 0 ; file handle
0408FD 00 00 00    0499*  @fil: dl 0 ; pointer to FIL struct
040900             0500*  
040900 00 00 00    0501*  @chunkpointer: dl 0 ; pointer to current chunk
040903             0502*  
040903             0503*  ; File information structure (FILINFO)
040903             0504*  @filinfo:
040903 00 00 00 00 0505*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040907 00 00       0506*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040909 00 00       0507*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04090B 00          0508*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
04090C 00 00 00 00 0509*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040919 00 00 00 00 0510*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040A19             0039       include "vdu_sound.inc"
040A19 00          0001*  last_channel: db 0
040A1A             0002*  max_channels: equ 6
040A1A             0003*  
040A1A             0004*  vdu_play_sfx:
040A1A C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040A1B 22 53 0A 04 0006*      ld (@bufferId),hl
040A1F ED 43 5D 0A 0007*      ld (@duration),bc
       04          
040A24 3E 17       0008*      ld a,23
040A26 32 55 0A 04 0009*      ld (@bufferId+2),a
040A2A 3A 19 0A 04 0010*      ld a,(last_channel)
040A2E 3C          0011*      inc a
040A2F             0012*      ; and 31 ; modulo 32
040A2F FE 06       0013*      cp max_channels
040A31 C2 36 0A 04 0014*      jp nz,@load_channel
040A35 AF          0015*      xor a
040A36             0016*  @load_channel:
040A36 32 19 0A 04 0017*      ld (last_channel),a
040A3A 32 50 0A 04 0018*      ld (@channel0),a
040A3E 32 58 0A 04 0019*      ld (@channel1),a
040A42 21 4D 0A 04 0020*      ld hl, @sample
040A46 01 12 00 00 0021*      ld bc, @sample_end - @sample
040A4A 5B DF       0022*      rst.lil $18
040A4C C9          0023*      ret
040A4D             0024*  @sample:
040A4D             0025*  ; Command 4: Set waveform
040A4D             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040A4D 17 00 85    0027*      .db 23,0,$85                        ; do sound
040A50             0028*  @channel0:
040A50 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
040A53             0030*  @bufferId:
040A53 00 00       0031*      .dw 0x0000
040A55             0032*  ; Command 0: Play note
040A55             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040A55 17 00 85    0034*      .db 23,0,$85                        ; do sound
040A58             0035*  @channel1:
040A58 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040A5B 00 00       0037*      .dw 0
040A5D             0038*  @duration:                              ; freq (tuneable samples only)
040A5D 00 00       0039*      .dw 0x0000                        ; duration
040A5F             0040*  @sample_end:
040A5F 00          0041*      .db 0x00 ; padding
040A60             0042*  
040A60             0043*  ; enable enough additional channels so that total enabled = max_channels
040A60             0044*  ; inputs: max_channels set
040A60             0045*  ; returns: nothing
040A60             0046*  ; destroys: af, bc, hl
040A60             0047*  vdu_enable_channels:
040A60 3E 06       0048*      ld a,max_channels
040A62 D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040A64 F2 6B 0A 04 0050*      jp p,@loop
040A68 C9          0051*      ret
040A69 3E 03       0052*      ld a,3 ; first non-default channel
040A6B             0053*  @loop:
040A6B 32 86 0A 04 0054*      ld (@channel),a
040A6F 21 83 0A 04 0055*      ld hl,@beg
040A73 01 05 00 00 0056*      ld bc,@end-@beg
040A77 F5          0057*      push af
040A78 5B DF       0058*      rst.lil $18
040A7A F1          0059*      pop af
040A7B 3C          0060*      inc a
040A7C FE 06       0061*      cp max_channels
040A7E C2 6B 0A 04 0062*      jp nz,@loop
040A82 C9          0063*      ret
040A83             0064*  @beg:
040A83 17 00 85    0065*              db 23, 0, $85
040A86 00          0066*  @channel:   db 0
040A87 08          0067*              db 8 ; command 8: enable channel
040A88             0068*  @end:
040A88             0069*  
040A88             0070*  ; disable all but the three default sound channels
040A88             0071*  ; inputs: max_channels set
040A88             0072*  ; outputs: none
040A88             0073*  ; destroys: ah,hl,bc
040A88             0074*  vdu_disable_channels:
040A88 3E 06       0075*      ld a,max_channels
040A8A D6 03       0076*      sub 3 ; subtract number of default channels already enabled
040A8C F2 93 0A 04 0077*      jp p,@loop
040A90 C9          0078*      ret
040A91 3E 03       0079*      ld a,3 ; first non-default channel
040A93             0080*  @loop:
040A93 32 AE 0A 04 0081*      ld (@channel),a
040A97 21 AB 0A 04 0082*      ld hl,@beg
040A9B 01 05 00 00 0083*      ld bc,@end-@beg
040A9F F5          0084*      push af
040AA0 5B DF       0085*      rst.lil $18
040AA2 F1          0086*      pop af
040AA3 3C          0087*      inc a
040AA4 FE 06       0088*      cp max_channels
040AA6 C2 93 0A 04 0089*      jp nz,@loop
040AAA C9          0090*      ret
040AAB             0091*  @beg:
040AAB 17 00 85    0092*      db 23, 0, $85
040AAE 00          0093*  @channel: db 0
040AAF 09          0094*      db 9 ; command 9: disable channel
040AB0             0095*  @end:
040AB0             0096*  
040AB0             0097*  
040AB0             0098*  ; ############################################################
040AB0             0099*  ; VDU SOUND API
040AB0             0100*  ; ############################################################
040AB0             0101*  ; Command 0: Play note
040AB0             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040AB0             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
040AB0             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
040AB0             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
040AB0             0106*      rst.lil $18
040AB0             0107*      jr @PLAY_NOTE_END
040AB0             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
040AB0             0109*                   db channel                  ; Channel, 0 (commented out)
040AB0             0110*                   db 0                        ; Play note command
040AB0             0111*                   db volume                   ; Volume
040AB0             0112*                   dw frequency                ; Frequency
040AB0             0113*                   dw duration                 ; Duration
040AB0             0114*  @PLAY_NOTE_END:
040AB0             0115*      ENDMACRO
040AB0             0116*  
040AB0             0117*      MACRO MUTE_CHANNEL channel
040AB0             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
040AB0             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
040AB0             0120*      rst.lil $18
040AB0             0121*      jr @MUTE_CHANNEL_END
040AB0             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
040AB0             0123*                     db channel                ; Channel, 0 (commented out)
040AB0             0124*                     db 2                      ; Set volume command
040AB0             0125*                     db 0                      ; Volume (mute)
040AB0             0126*  @MUTE_CHANNEL_END:
040AB0             0127*      ENDMACRO
040AB0             0128*  
040AB0             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
040AB0             0130*  vdu_play_note:
040AB0 79          0131*      ld a,c
040AB1 32 D1 0A 04 0132*      ld (@channel),a
040AB5 78          0133*      ld a,b
040AB6 32 D3 0A 04 0134*      ld (@volume),a
040ABA 22 D4 0A 04 0135*      ld (@frequency),hl
040ABE ED 53 D6 0A 0136*      ld (@duration),de
       04          
040AC3 21 CE 0A 04 0137*      ld hl,@cmd
040AC7 01 0A 00 00 0138*      ld bc,@end-@cmd
040ACB 5B DF       0139*      rst.lil $18
040ACD C9          0140*      ret
040ACE 17 00 85    0141*  @cmd:       db 23, 0, 0x85
040AD1 00          0142*  @channel:   db 0x00
040AD2 00          0143*              db 0x00 ; play note command
040AD3 00          0144*  @volume:    db 0x00
040AD4 00 00       0145*  @frequency: dw 0x0000
040AD6 00 00       0146*  @duration:  dw 0x0000
040AD8 00          0147*  @end:       db 0x00 ; padding
040AD9             0148*  
040AD9             0149*  ; Command 1: Status
040AD9             0150*  ; VDU 23, 0, &85, channel, 1
040AD9             0151*  ; inputs: a = channel
040AD9             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040AD9             0153*  ; Bit 	Name 	Meaning
040AD9             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040AD9             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040AD9             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040AD9             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040AD9             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040AD9             0159*  
040AD9             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040AD9             0161*  vdu_channel_status:
040AD9 32 EB 0A 04 0162*      ld (@channel),a
040ADD 21 E8 0A 04 0163*      ld hl,@cmd
040AE1 01 05 00 00 0164*      ld bc,@end-@cmd
040AE5 5B DF       0165*      rst.lil $18
040AE7 C9          0166*      ret
040AE8 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040AEB 00          0168*  @channel:   db 0x00
040AEC 01          0169*              db 0x01 ; get channel status command
040AED             0170*  @end:
040AED             0171*  
040AED             0172*  ; VDU 23, 0, &85, channel, 2, volume
040AED             0173*  ; inputs: c = channel, b = volume
040AED             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040AED             0175*  
040AED             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040AED             0177*  
040AED             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040AED             0179*  vdu_channel_volume:
040AED 79          0180*      ld a,c
040AEE 32 05 0B 04 0181*      ld (@channel),a
040AF2 78          0182*      ld a,b
040AF3 32 07 0B 04 0183*      ld (@volume),a
040AF7 21 02 0B 04 0184*      ld hl,@cmd
040AFB 01 06 00 00 0185*      ld bc,@end-@cmd
040AFF 5B DF       0186*      rst.lil $18
040B01 C9          0187*      ret
040B02 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040B05 00          0189*  @channel:   db 0x00
040B06 02          0190*              db 0x02 ; set volume command
040B07 00          0191*  @volume:    db 0x00
040B08             0192*  @end:
040B08             0193*  
040B08             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040B08             0195*  
040B08             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040B08             0197*  
040B08             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040B08             0199*  
040B08             0200*  ; Returns 1 on success, 0 for failure.
040B08             0201*  vdu_channel_frequency:
040B08 79          0202*      ld a,c
040B09 32 20 0B 04 0203*      ld (@channel),a
040B0D ED 53 22 0B 0204*      ld (@frequency),de
       04          
040B12 21 1D 0B 04 0205*      ld hl,@cmd
040B16 01 07 00 00 0206*      ld bc,@end-@cmd
040B1A 5B DF       0207*      rst.lil $18
040B1C C9          0208*      ret
040B1D 17 00 85    0209*  @cmd:       db 23, 0, 0x85
040B20 00          0210*  @channel:   db 0x00
040B21 03          0211*              db 0x03 ; set frequency command
040B22 00 00       0212*  @frequency: dw 0x0000
040B24 00          0213*  @end:       db 0x00 ; padding
040B25             0214*  
040B25             0215*  
040B25             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040B25             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040B25             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040B25             0219*  
040B25             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040B25             0221*  
040B25             0222*  ; By default a channel is set to use waveform 0 (square wave).
040B25             0223*  
040B25             0224*  ; Valid waveform values are as follows:
040B25             0225*  ; Value 	Waveform
040B25             0226*  ; 0 	Square wave
040B25             0227*  ; 1 	Triangle wave
040B25             0228*  ; 2 	Sawtooth wave
040B25             0229*  ; 3 	Sine wave
040B25             0230*  ; 4 	Noise (simple white noise with no frequency support)
040B25             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040B25             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040B25             0233*  
040B25             0234*  vdu_channel_waveform:
040B25 79          0235*      ld a,c
040B26 32 4B 0B 04 0236*      ld (@channel),a
040B2A 78          0237*      ld a,b
040B2B 32 4D 0B 04 0238*      ld (@waveform),a
040B2F FE 08       0239*      cp 8 ; check if the waveform is a sample
040B31 28 06       0240*      jr z, @sample
040B33 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040B37 18 08       0242*      jr @sendToVdu
040B39             0243*  @sample:
040B39 22 4E 0B 04 0244*      ld (@bufferId),hl
040B3D 01 08 00 00 0245*      ld bc,@end-@cmd
040B41             0246*  @sendToVdu:
040B41 21 48 0B 04 0247*      ld hl,@cmd
040B45 5B DF       0248*      rst.lil $18
040B47 C9          0249*      ret
040B48 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040B4B 00          0251*  @channel:   db 0x00
040B4C 04          0252*              db 0x04 ; set waveform command
040B4D 00          0253*  @waveform:  db 0x00
040B4E 00 00       0254*  @bufferId:  dw 0x0000
040B50 00          0255*  @end:       db 0x00 ; padding
040B51             0256*  
040B51             0257*  
040B51             0258*  
040B51             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
040B51             0260*  ; inputs: hl = bufferId; a = format
040B51             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
040B51             0262*  ; Value 	Description
040B51             0263*  ; 0 	8-bit signed, 16KHz
040B51             0264*  ; 1 	8-bit unsigned, 16KHz
040B51             0265*  vdu_buffer_to_sound:
040B51 22 6A 0B 04 0266*      ld (@bufferId),hl
040B55 32 6C 0B 04 0267*      ld (@format),a
040B59 21 64 0B 04 0268*      ld hl,@cmd
040B5D 01 09 00 00 0269*      ld bc,@end-@cmd
040B61 5B DF       0270*      rst.lil $18
040B63 C9          0271*      ret
040B64 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040B67 00          0273*              db 0x00 ; a magic number that is always 0
040B68 05          0274*              db 0x05 ; buffer to sound command
040B69 02          0275*              db 0x02 ; a magic number that is always 2
040B6A 00 00       0276*  @bufferId:  dw 0x0000
040B6C 00          0277*  @format:    db 0x00
040B6D             0278*  @end:
040B6D             0279*  
040B6D             0280*  
040B6D             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040B6D             0282*  vdu_play_sample:
040B6D             0283*      ; populate input parameters
040B6D 79          0284*      ld a,c
040B6E 32 98 0B 04 0285*      ld (@channel0),a
040B72 32 A0 0B 04 0286*      ld (@channel1),a
040B76 78          0287*      ld a,b
040B77 32 A2 0B 04 0288*      ld (@volume),a
040B7B ED 53 A3 0B 0289*      ld (@frequency),de
       04          
040B80 22 9B 0B 04 0290*      ld (@bufferId),hl
040B84             0291*      ; clean up byte that got stomped on by bufferId load from hl
040B84 3E 17       0292*      ld a,23
040B86 32 9D 0B 04 0293*      ld (@cmd1),a
040B8A             0294*      ; prep the vdu command string
040B8A 21 95 0B 04 0295*      ld hl, @cmd0
040B8E 01 12 00 00 0296*      ld bc, @end - @cmd0
040B92 5B DF       0297*      rst.lil $18
040B94 C9          0298*      ret
040B95 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
040B98 00          0300*  @channel0:   db 0x00
040B99 04          0301*               db 0x04 ; set waveform command
040B9A 08          0302*  @waveform:   db 0x08 ; sample
040B9B 00 00       0303*  @bufferId:   dw 0x0000
040B9D 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
040BA0 00          0305*  @channel1:   db 0x00
040BA1 00          0306*               db 0x00 ; play note command
040BA2 00          0307*  @volume:     db 0x00
040BA3 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040BA5 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
040BA7 00          0310*  @end:        db 0x00 ; padding
040BA8             0040   
040BA8             0041   ; Application includes
040BA8             0042   	include "font_rc.inc"
040BA8             0001*  ; Bitmap indices:
040BA8             0002*  BUF_0032: equ 0x0020 ; 32
040BA8             0003*  BUF_0033: equ 0x0021 ; 33 !
040BA8             0004*  ; Missing character 34 "
040BA8             0005*  ; Missing character 35 #
040BA8             0006*  ; Missing character 36 $
040BA8             0007*  ; Missing character 37 %
040BA8             0008*  ; Missing character 38 &
040BA8             0009*  ; Missing character 39 '
040BA8             0010*  ; Missing character 40 (
040BA8             0011*  ; Missing character 41 )
040BA8             0012*  ; Missing character 42 *
040BA8             0013*  ; Missing character 43 +
040BA8             0014*  ; Missing character 44 ,
040BA8             0015*  ; Missing character 45 -
040BA8             0016*  ; Missing character 46 .
040BA8             0017*  ; Missing character 47 /
040BA8             0018*  BUF_0048: equ 0x0030 ; 48 0
040BA8             0019*  BUF_0049: equ 0x0031 ; 49 1
040BA8             0020*  BUF_0050: equ 0x0032 ; 50 2
040BA8             0021*  BUF_0051: equ 0x0033 ; 51 3
040BA8             0022*  BUF_0052: equ 0x0034 ; 52 4
040BA8             0023*  BUF_0053: equ 0x0035 ; 53 5
040BA8             0024*  BUF_0054: equ 0x0036 ; 54 6
040BA8             0025*  BUF_0055: equ 0x0037 ; 55 7
040BA8             0026*  BUF_0056: equ 0x0038 ; 56 8
040BA8             0027*  BUF_0057: equ 0x0039 ; 57 9
040BA8             0028*  ; Missing character 58 :
040BA8             0029*  ; Missing character 59 ;
040BA8             0030*  ; Missing character 60 <
040BA8             0031*  ; Missing character 61 =
040BA8             0032*  ; Missing character 62 >
040BA8             0033*  BUF_0063: equ 0x003F ; 63 ?
040BA8             0034*  ; Missing character 64 @
040BA8             0035*  BUF_0065: equ 0x0041 ; 65 A
040BA8             0036*  BUF_0066: equ 0x0042 ; 66 B
040BA8             0037*  BUF_0067: equ 0x0043 ; 67 C
040BA8             0038*  BUF_0068: equ 0x0044 ; 68 D
040BA8             0039*  BUF_0069: equ 0x0045 ; 69 E
040BA8             0040*  BUF_0070: equ 0x0046 ; 70 F
040BA8             0041*  BUF_0071: equ 0x0047 ; 71 G
040BA8             0042*  BUF_0072: equ 0x0048 ; 72 H
040BA8             0043*  BUF_0073: equ 0x0049 ; 73 I
040BA8             0044*  BUF_0074: equ 0x004A ; 74 J
040BA8             0045*  BUF_0075: equ 0x004B ; 75 K
040BA8             0046*  BUF_0076: equ 0x004C ; 76 L
040BA8             0047*  BUF_0077: equ 0x004D ; 77 M
040BA8             0048*  BUF_0078: equ 0x004E ; 78 N
040BA8             0049*  BUF_0079: equ 0x004F ; 79 O
040BA8             0050*  BUF_0080: equ 0x0050 ; 80 P
040BA8             0051*  BUF_0081: equ 0x0051 ; 81 Q
040BA8             0052*  BUF_0082: equ 0x0052 ; 82 R
040BA8             0053*  BUF_0083: equ 0x0053 ; 83 S
040BA8             0054*  BUF_0084: equ 0x0054 ; 84 T
040BA8             0055*  BUF_0085: equ 0x0055 ; 85 U
040BA8             0056*  BUF_0086: equ 0x0056 ; 86 V
040BA8             0057*  BUF_0087: equ 0x0057 ; 87 W
040BA8             0058*  BUF_0088: equ 0x0058 ; 88 X
040BA8             0059*  BUF_0089: equ 0x0059 ; 89 Y
040BA8             0060*  BUF_0090: equ 0x005A ; 90 Z
040BA8             0061*  ; Missing character 91 [
040BA8             0062*  ; Missing character 92 \
040BA8             0063*  ; Missing character 93 ]
040BA8             0064*  ; Missing character 94 ^
040BA8             0065*  ; Missing character 95 _
040BA8             0066*  ; Missing character 96 `
040BA8             0067*  ; Missing character 97 a
040BA8             0068*  ; Missing character 98 b
040BA8             0069*  ; Missing character 99 c
040BA8             0070*  ; Missing character 100 d
040BA8             0071*  ; Missing character 101 e
040BA8             0072*  ; Missing character 102 f
040BA8             0073*  ; Missing character 103 g
040BA8             0074*  ; Missing character 104 h
040BA8             0075*  ; Missing character 105 i
040BA8             0076*  ; Missing character 106 j
040BA8             0077*  ; Missing character 107 k
040BA8             0078*  ; Missing character 108 l
040BA8             0079*  ; Missing character 109 m
040BA8             0080*  ; Missing character 110 n
040BA8             0081*  ; Missing character 111 o
040BA8             0082*  ; Missing character 112 p
040BA8             0083*  ; Missing character 113 q
040BA8             0084*  ; Missing character 114 r
040BA8             0085*  ; Missing character 115 s
040BA8             0086*  ; Missing character 116 t
040BA8             0087*  ; Missing character 117 u
040BA8             0088*  ; Missing character 118 v
040BA8             0089*  ; Missing character 119 w
040BA8             0090*  ; Missing character 120 x
040BA8             0091*  ; Missing character 121 y
040BA8             0092*  ; Missing character 122 z
040BA8             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
040BA8             0094*  font_rc:
040BA8 06 01 00 20 0095*  	dl 0x000106,BUF_0032
       00 00       
040BAE 03 0E 00 21 0096*  	dl 0x000E03,BUF_0033
       00 00       
040BB4 06 01 00 20 0097*  	dl 0x000106,BUF_0032 ; Missing character 34
       00 00       
040BBA 06 01 00 20 0098*  	dl 0x000106,BUF_0032 ; Missing character 35
       00 00       
040BC0 06 01 00 20 0099*  	dl 0x000106,BUF_0032 ; Missing character 36
       00 00       
040BC6 06 01 00 20 0100*  	dl 0x000106,BUF_0032 ; Missing character 37
       00 00       
040BCC 06 01 00 20 0101*  	dl 0x000106,BUF_0032 ; Missing character 38
       00 00       
040BD2 06 01 00 20 0102*  	dl 0x000106,BUF_0032 ; Missing character 39
       00 00       
040BD8 06 01 00 20 0103*  	dl 0x000106,BUF_0032 ; Missing character 40
       00 00       
040BDE 06 01 00 20 0104*  	dl 0x000106,BUF_0032 ; Missing character 41
       00 00       
040BE4 06 01 00 20 0105*  	dl 0x000106,BUF_0032 ; Missing character 42
       00 00       
040BEA 06 01 00 20 0106*  	dl 0x000106,BUF_0032 ; Missing character 43
       00 00       
040BF0 06 01 00 20 0107*  	dl 0x000106,BUF_0032 ; Missing character 44
       00 00       
040BF6 06 01 00 20 0108*  	dl 0x000106,BUF_0032 ; Missing character 45
       00 00       
040BFC 06 01 00 20 0109*  	dl 0x000106,BUF_0032 ; Missing character 46
       00 00       
040C02 06 01 00 20 0110*  	dl 0x000106,BUF_0032 ; Missing character 47
       00 00       
040C08 08 0E 00 30 0111*  	dl 0x000E08,BUF_0048
       00 00       
040C0E 08 0E 00 31 0112*  	dl 0x000E08,BUF_0049
       00 00       
040C14 08 0E 00 32 0113*  	dl 0x000E08,BUF_0050
       00 00       
040C1A 08 0E 00 33 0114*  	dl 0x000E08,BUF_0051
       00 00       
040C20 08 0E 00 34 0115*  	dl 0x000E08,BUF_0052
       00 00       
040C26 08 0E 00 35 0116*  	dl 0x000E08,BUF_0053
       00 00       
040C2C 08 0E 00 36 0117*  	dl 0x000E08,BUF_0054
       00 00       
040C32 08 0E 00 37 0118*  	dl 0x000E08,BUF_0055
       00 00       
040C38 08 0E 00 38 0119*  	dl 0x000E08,BUF_0056
       00 00       
040C3E 08 0E 00 39 0120*  	dl 0x000E08,BUF_0057
       00 00       
040C44 06 01 00 20 0121*  	dl 0x000106,BUF_0032 ; Missing character 58
       00 00       
040C4A 06 01 00 20 0122*  	dl 0x000106,BUF_0032 ; Missing character 59
       00 00       
040C50 06 01 00 20 0123*  	dl 0x000106,BUF_0032 ; Missing character 60
       00 00       
040C56 06 01 00 20 0124*  	dl 0x000106,BUF_0032 ; Missing character 61
       00 00       
040C5C 06 01 00 20 0125*  	dl 0x000106,BUF_0032 ; Missing character 62
       00 00       
040C62 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0063
       00 00       
040C68 06 01 00 20 0127*  	dl 0x000106,BUF_0032 ; Missing character 64
       00 00       
040C6E 07 0E 00 41 0128*  	dl 0x000E07,BUF_0065
       00 00       
040C74 08 0E 00 42 0129*  	dl 0x000E08,BUF_0066
       00 00       
040C7A 07 0E 00 43 0130*  	dl 0x000E07,BUF_0067
       00 00       
040C80 08 0E 00 44 0131*  	dl 0x000E08,BUF_0068
       00 00       
040C86 08 0E 00 45 0132*  	dl 0x000E08,BUF_0069
       00 00       
040C8C 07 0E 00 46 0133*  	dl 0x000E07,BUF_0070
       00 00       
040C92 08 0E 00 47 0134*  	dl 0x000E08,BUF_0071
       00 00       
040C98 07 0E 00 48 0135*  	dl 0x000E07,BUF_0072
       00 00       
040C9E 07 0E 00 49 0136*  	dl 0x000E07,BUF_0073
       00 00       
040CA4 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0074
       00 00       
040CAA 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0075
       00 00       
040CB0 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0076
       00 00       
040CB6 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0077
       00 00       
040CBC 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0078
       00 00       
040CC2 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0079
       00 00       
040CC8 07 0E 00 50 0143*  	dl 0x000E07,BUF_0080
       00 00       
040CCE 08 0F 00 51 0144*  	dl 0x000F08,BUF_0081
       00 00       
040CD4 08 0E 00 52 0145*  	dl 0x000E08,BUF_0082
       00 00       
040CDA 08 0E 00 53 0146*  	dl 0x000E08,BUF_0083
       00 00       
040CE0 07 0E 00 54 0147*  	dl 0x000E07,BUF_0084
       00 00       
040CE6 08 0E 00 55 0148*  	dl 0x000E08,BUF_0085
       00 00       
040CEC 07 0E 00 56 0149*  	dl 0x000E07,BUF_0086
       00 00       
040CF2 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0087
       00 00       
040CF8 07 0E 00 58 0151*  	dl 0x000E07,BUF_0088
       00 00       
040CFE 08 0E 00 59 0152*  	dl 0x000E08,BUF_0089
       00 00       
040D04 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0090
       00 00       
040D0A 06 01 00 20 0154*  	dl 0x000106,BUF_0032 ; Missing character 91
       00 00       
040D10 06 01 00 20 0155*  	dl 0x000106,BUF_0032 ; Missing character 92
       00 00       
040D16 06 01 00 20 0156*  	dl 0x000106,BUF_0032 ; Missing character 93
       00 00       
040D1C 06 01 00 20 0157*  	dl 0x000106,BUF_0032 ; Missing character 94
       00 00       
040D22 06 01 00 20 0158*  	dl 0x000106,BUF_0032 ; Missing character 95
       00 00       
040D28 06 01 00 20 0159*  	dl 0x000106,BUF_0032 ; Missing character 96
       00 00       
040D2E 06 01 00 20 0160*  	dl 0x000106,BUF_0032 ; Missing character 97
       00 00       
040D34 06 01 00 20 0161*  	dl 0x000106,BUF_0032 ; Missing character 98
       00 00       
040D3A 06 01 00 20 0162*  	dl 0x000106,BUF_0032 ; Missing character 99
       00 00       
040D40 06 01 00 20 0163*  	dl 0x000106,BUF_0032 ; Missing character 100
       00 00       
040D46 06 01 00 20 0164*  	dl 0x000106,BUF_0032 ; Missing character 101
       00 00       
040D4C 06 01 00 20 0165*  	dl 0x000106,BUF_0032 ; Missing character 102
       00 00       
040D52 06 01 00 20 0166*  	dl 0x000106,BUF_0032 ; Missing character 103
       00 00       
040D58 06 01 00 20 0167*  	dl 0x000106,BUF_0032 ; Missing character 104
       00 00       
040D5E 06 01 00 20 0168*  	dl 0x000106,BUF_0032 ; Missing character 105
       00 00       
040D64 06 01 00 20 0169*  	dl 0x000106,BUF_0032 ; Missing character 106
       00 00       
040D6A 06 01 00 20 0170*  	dl 0x000106,BUF_0032 ; Missing character 107
       00 00       
040D70 06 01 00 20 0171*  	dl 0x000106,BUF_0032 ; Missing character 108
       00 00       
040D76 06 01 00 20 0172*  	dl 0x000106,BUF_0032 ; Missing character 109
       00 00       
040D7C 06 01 00 20 0173*  	dl 0x000106,BUF_0032 ; Missing character 110
       00 00       
040D82 06 01 00 20 0174*  	dl 0x000106,BUF_0032 ; Missing character 111
       00 00       
040D88 06 01 00 20 0175*  	dl 0x000106,BUF_0032 ; Missing character 112
       00 00       
040D8E 06 01 00 20 0176*  	dl 0x000106,BUF_0032 ; Missing character 113
       00 00       
040D94 06 01 00 20 0177*  	dl 0x000106,BUF_0032 ; Missing character 114
       00 00       
040D9A 06 01 00 20 0178*  	dl 0x000106,BUF_0032 ; Missing character 115
       00 00       
040DA0 06 01 00 20 0179*  	dl 0x000106,BUF_0032 ; Missing character 116
       00 00       
040DA6 06 01 00 20 0180*  	dl 0x000106,BUF_0032 ; Missing character 117
       00 00       
040DAC 06 01 00 20 0181*  	dl 0x000106,BUF_0032 ; Missing character 118
       00 00       
040DB2 06 01 00 20 0182*  	dl 0x000106,BUF_0032 ; Missing character 119
       00 00       
040DB8 06 01 00 20 0183*  	dl 0x000106,BUF_0032 ; Missing character 120
       00 00       
040DBE 06 01 00 20 0184*  	dl 0x000106,BUF_0032 ; Missing character 121
       00 00       
040DC4 06 01 00 20 0185*  	dl 0x000106,BUF_0032 ; Missing character 122
       00 00       
040DCA             0186*  
040DCA             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040DCA             0188*  load_font_rc:
040DCA             0189*  
040DCA 21 6E 13 04 0190*  	ld hl,Frc032
040DCE 11 00 E0 B7 0191*  	ld de,filedata
040DD2 01 00 00 01 0192*  	ld bc,65536
040DD6 3E 01       0193*  	ld a,mos_load
040DD8 5B CF       0194*  	RST.LIL 08h
040DDA 21 20 00 00 0195*  	ld hl,BUF_0032
040DDE 01 06 00 00 0196*  	ld bc,6
040DE2 11 01 00 00 0197*  	ld de,1
040DE6 DD 21 06 00 0198*  	ld ix,6
       00          
040DEB CD 8A 08 04 0199*  	call vdu_load_img
040DEF             0200*  
040DEF 21 81 13 04 0201*  	ld hl,Frc033
040DF3 11 00 E0 B7 0202*  	ld de,filedata
040DF7 01 00 00 01 0203*  	ld bc,65536
040DFB 3E 01       0204*  	ld a,mos_load
040DFD 5B CF       0205*  	RST.LIL 08h
040DFF 21 21 00 00 0206*  	ld hl,BUF_0033
040E03 01 03 00 00 0207*  	ld bc,3
040E07 11 0E 00 00 0208*  	ld de,14
040E0B DD 21 2A 00 0209*  	ld ix,42
       00          
040E10 CD 8A 08 04 0210*  	call vdu_load_img
040E14             0211*  ; Missing character 34
040E14             0212*  ; Missing character 35
040E14             0213*  ; Missing character 36
040E14             0214*  ; Missing character 37
040E14             0215*  ; Missing character 38
040E14             0216*  ; Missing character 39
040E14             0217*  ; Missing character 40
040E14             0218*  ; Missing character 41
040E14             0219*  ; Missing character 42
040E14             0220*  ; Missing character 43
040E14             0221*  ; Missing character 44
040E14             0222*  ; Missing character 45
040E14             0223*  ; Missing character 46
040E14             0224*  ; Missing character 47
040E14             0225*  
040E14 21 94 13 04 0226*  	ld hl,Frc048
040E18 11 00 E0 B7 0227*  	ld de,filedata
040E1C 01 00 00 01 0228*  	ld bc,65536
040E20 3E 01       0229*  	ld a,mos_load
040E22 5B CF       0230*  	RST.LIL 08h
040E24 21 30 00 00 0231*  	ld hl,BUF_0048
040E28 01 08 00 00 0232*  	ld bc,8
040E2C 11 0E 00 00 0233*  	ld de,14
040E30 DD 21 70 00 0234*  	ld ix,112
       00          
040E35 CD 8A 08 04 0235*  	call vdu_load_img
040E39             0236*  
040E39 21 A7 13 04 0237*  	ld hl,Frc049
040E3D 11 00 E0 B7 0238*  	ld de,filedata
040E41 01 00 00 01 0239*  	ld bc,65536
040E45 3E 01       0240*  	ld a,mos_load
040E47 5B CF       0241*  	RST.LIL 08h
040E49 21 31 00 00 0242*  	ld hl,BUF_0049
040E4D 01 08 00 00 0243*  	ld bc,8
040E51 11 0E 00 00 0244*  	ld de,14
040E55 DD 21 70 00 0245*  	ld ix,112
       00          
040E5A CD 8A 08 04 0246*  	call vdu_load_img
040E5E             0247*  
040E5E 21 BA 13 04 0248*  	ld hl,Frc050
040E62 11 00 E0 B7 0249*  	ld de,filedata
040E66 01 00 00 01 0250*  	ld bc,65536
040E6A 3E 01       0251*  	ld a,mos_load
040E6C 5B CF       0252*  	RST.LIL 08h
040E6E 21 32 00 00 0253*  	ld hl,BUF_0050
040E72 01 08 00 00 0254*  	ld bc,8
040E76 11 0E 00 00 0255*  	ld de,14
040E7A DD 21 70 00 0256*  	ld ix,112
       00          
040E7F CD 8A 08 04 0257*  	call vdu_load_img
040E83             0258*  
040E83 21 CD 13 04 0259*  	ld hl,Frc051
040E87 11 00 E0 B7 0260*  	ld de,filedata
040E8B 01 00 00 01 0261*  	ld bc,65536
040E8F 3E 01       0262*  	ld a,mos_load
040E91 5B CF       0263*  	RST.LIL 08h
040E93 21 33 00 00 0264*  	ld hl,BUF_0051
040E97 01 08 00 00 0265*  	ld bc,8
040E9B 11 0E 00 00 0266*  	ld de,14
040E9F DD 21 70 00 0267*  	ld ix,112
       00          
040EA4 CD 8A 08 04 0268*  	call vdu_load_img
040EA8             0269*  
040EA8 21 E0 13 04 0270*  	ld hl,Frc052
040EAC 11 00 E0 B7 0271*  	ld de,filedata
040EB0 01 00 00 01 0272*  	ld bc,65536
040EB4 3E 01       0273*  	ld a,mos_load
040EB6 5B CF       0274*  	RST.LIL 08h
040EB8 21 34 00 00 0275*  	ld hl,BUF_0052
040EBC 01 08 00 00 0276*  	ld bc,8
040EC0 11 0E 00 00 0277*  	ld de,14
040EC4 DD 21 70 00 0278*  	ld ix,112
       00          
040EC9 CD 8A 08 04 0279*  	call vdu_load_img
040ECD             0280*  
040ECD 21 F3 13 04 0281*  	ld hl,Frc053
040ED1 11 00 E0 B7 0282*  	ld de,filedata
040ED5 01 00 00 01 0283*  	ld bc,65536
040ED9 3E 01       0284*  	ld a,mos_load
040EDB 5B CF       0285*  	RST.LIL 08h
040EDD 21 35 00 00 0286*  	ld hl,BUF_0053
040EE1 01 08 00 00 0287*  	ld bc,8
040EE5 11 0E 00 00 0288*  	ld de,14
040EE9 DD 21 70 00 0289*  	ld ix,112
       00          
040EEE CD 8A 08 04 0290*  	call vdu_load_img
040EF2             0291*  
040EF2 21 06 14 04 0292*  	ld hl,Frc054
040EF6 11 00 E0 B7 0293*  	ld de,filedata
040EFA 01 00 00 01 0294*  	ld bc,65536
040EFE 3E 01       0295*  	ld a,mos_load
040F00 5B CF       0296*  	RST.LIL 08h
040F02 21 36 00 00 0297*  	ld hl,BUF_0054
040F06 01 08 00 00 0298*  	ld bc,8
040F0A 11 0E 00 00 0299*  	ld de,14
040F0E DD 21 70 00 0300*  	ld ix,112
       00          
040F13 CD 8A 08 04 0301*  	call vdu_load_img
040F17             0302*  
040F17 21 19 14 04 0303*  	ld hl,Frc055
040F1B 11 00 E0 B7 0304*  	ld de,filedata
040F1F 01 00 00 01 0305*  	ld bc,65536
040F23 3E 01       0306*  	ld a,mos_load
040F25 5B CF       0307*  	RST.LIL 08h
040F27 21 37 00 00 0308*  	ld hl,BUF_0055
040F2B 01 08 00 00 0309*  	ld bc,8
040F2F 11 0E 00 00 0310*  	ld de,14
040F33 DD 21 70 00 0311*  	ld ix,112
       00          
040F38 CD 8A 08 04 0312*  	call vdu_load_img
040F3C             0313*  
040F3C 21 2C 14 04 0314*  	ld hl,Frc056
040F40 11 00 E0 B7 0315*  	ld de,filedata
040F44 01 00 00 01 0316*  	ld bc,65536
040F48 3E 01       0317*  	ld a,mos_load
040F4A 5B CF       0318*  	RST.LIL 08h
040F4C 21 38 00 00 0319*  	ld hl,BUF_0056
040F50 01 08 00 00 0320*  	ld bc,8
040F54 11 0E 00 00 0321*  	ld de,14
040F58 DD 21 70 00 0322*  	ld ix,112
       00          
040F5D CD 8A 08 04 0323*  	call vdu_load_img
040F61             0324*  
040F61 21 3F 14 04 0325*  	ld hl,Frc057
040F65 11 00 E0 B7 0326*  	ld de,filedata
040F69 01 00 00 01 0327*  	ld bc,65536
040F6D 3E 01       0328*  	ld a,mos_load
040F6F 5B CF       0329*  	RST.LIL 08h
040F71 21 39 00 00 0330*  	ld hl,BUF_0057
040F75 01 08 00 00 0331*  	ld bc,8
040F79 11 0E 00 00 0332*  	ld de,14
040F7D DD 21 70 00 0333*  	ld ix,112
       00          
040F82 CD 8A 08 04 0334*  	call vdu_load_img
040F86             0335*  ; Missing character 58
040F86             0336*  ; Missing character 59
040F86             0337*  ; Missing character 60
040F86             0338*  ; Missing character 61
040F86             0339*  ; Missing character 62
040F86             0340*  
040F86 21 52 14 04 0341*  	ld hl,Frc063
040F8A 11 00 E0 B7 0342*  	ld de,filedata
040F8E 01 00 00 01 0343*  	ld bc,65536
040F92 3E 01       0344*  	ld a,mos_load
040F94 5B CF       0345*  	RST.LIL 08h
040F96 21 3F 00 00 0346*  	ld hl,BUF_0063
040F9A 01 08 00 00 0347*  	ld bc,8
040F9E 11 0E 00 00 0348*  	ld de,14
040FA2 DD 21 70 00 0349*  	ld ix,112
       00          
040FA7 CD 8A 08 04 0350*  	call vdu_load_img
040FAB             0351*  ; Missing character 64
040FAB             0352*  
040FAB 21 65 14 04 0353*  	ld hl,Frc065
040FAF 11 00 E0 B7 0354*  	ld de,filedata
040FB3 01 00 00 01 0355*  	ld bc,65536
040FB7 3E 01       0356*  	ld a,mos_load
040FB9 5B CF       0357*  	RST.LIL 08h
040FBB 21 41 00 00 0358*  	ld hl,BUF_0065
040FBF 01 07 00 00 0359*  	ld bc,7
040FC3 11 0E 00 00 0360*  	ld de,14
040FC7 DD 21 62 00 0361*  	ld ix,98
       00          
040FCC CD 8A 08 04 0362*  	call vdu_load_img
040FD0             0363*  
040FD0 21 78 14 04 0364*  	ld hl,Frc066
040FD4 11 00 E0 B7 0365*  	ld de,filedata
040FD8 01 00 00 01 0366*  	ld bc,65536
040FDC 3E 01       0367*  	ld a,mos_load
040FDE 5B CF       0368*  	RST.LIL 08h
040FE0 21 42 00 00 0369*  	ld hl,BUF_0066
040FE4 01 08 00 00 0370*  	ld bc,8
040FE8 11 0E 00 00 0371*  	ld de,14
040FEC DD 21 70 00 0372*  	ld ix,112
       00          
040FF1 CD 8A 08 04 0373*  	call vdu_load_img
040FF5             0374*  
040FF5 21 8B 14 04 0375*  	ld hl,Frc067
040FF9 11 00 E0 B7 0376*  	ld de,filedata
040FFD 01 00 00 01 0377*  	ld bc,65536
041001 3E 01       0378*  	ld a,mos_load
041003 5B CF       0379*  	RST.LIL 08h
041005 21 43 00 00 0380*  	ld hl,BUF_0067
041009 01 07 00 00 0381*  	ld bc,7
04100D 11 0E 00 00 0382*  	ld de,14
041011 DD 21 62 00 0383*  	ld ix,98
       00          
041016 CD 8A 08 04 0384*  	call vdu_load_img
04101A             0385*  
04101A 21 9E 14 04 0386*  	ld hl,Frc068
04101E 11 00 E0 B7 0387*  	ld de,filedata
041022 01 00 00 01 0388*  	ld bc,65536
041026 3E 01       0389*  	ld a,mos_load
041028 5B CF       0390*  	RST.LIL 08h
04102A 21 44 00 00 0391*  	ld hl,BUF_0068
04102E 01 08 00 00 0392*  	ld bc,8
041032 11 0E 00 00 0393*  	ld de,14
041036 DD 21 70 00 0394*  	ld ix,112
       00          
04103B CD 8A 08 04 0395*  	call vdu_load_img
04103F             0396*  
04103F 21 B1 14 04 0397*  	ld hl,Frc069
041043 11 00 E0 B7 0398*  	ld de,filedata
041047 01 00 00 01 0399*  	ld bc,65536
04104B 3E 01       0400*  	ld a,mos_load
04104D 5B CF       0401*  	RST.LIL 08h
04104F 21 45 00 00 0402*  	ld hl,BUF_0069
041053 01 08 00 00 0403*  	ld bc,8
041057 11 0E 00 00 0404*  	ld de,14
04105B DD 21 70 00 0405*  	ld ix,112
       00          
041060 CD 8A 08 04 0406*  	call vdu_load_img
041064             0407*  
041064 21 C4 14 04 0408*  	ld hl,Frc070
041068 11 00 E0 B7 0409*  	ld de,filedata
04106C 01 00 00 01 0410*  	ld bc,65536
041070 3E 01       0411*  	ld a,mos_load
041072 5B CF       0412*  	RST.LIL 08h
041074 21 46 00 00 0413*  	ld hl,BUF_0070
041078 01 07 00 00 0414*  	ld bc,7
04107C 11 0E 00 00 0415*  	ld de,14
041080 DD 21 62 00 0416*  	ld ix,98
       00          
041085 CD 8A 08 04 0417*  	call vdu_load_img
041089             0418*  
041089 21 D7 14 04 0419*  	ld hl,Frc071
04108D 11 00 E0 B7 0420*  	ld de,filedata
041091 01 00 00 01 0421*  	ld bc,65536
041095 3E 01       0422*  	ld a,mos_load
041097 5B CF       0423*  	RST.LIL 08h
041099 21 47 00 00 0424*  	ld hl,BUF_0071
04109D 01 08 00 00 0425*  	ld bc,8
0410A1 11 0E 00 00 0426*  	ld de,14
0410A5 DD 21 70 00 0427*  	ld ix,112
       00          
0410AA CD 8A 08 04 0428*  	call vdu_load_img
0410AE             0429*  
0410AE 21 EA 14 04 0430*  	ld hl,Frc072
0410B2 11 00 E0 B7 0431*  	ld de,filedata
0410B6 01 00 00 01 0432*  	ld bc,65536
0410BA 3E 01       0433*  	ld a,mos_load
0410BC 5B CF       0434*  	RST.LIL 08h
0410BE 21 48 00 00 0435*  	ld hl,BUF_0072
0410C2 01 07 00 00 0436*  	ld bc,7
0410C6 11 0E 00 00 0437*  	ld de,14
0410CA DD 21 62 00 0438*  	ld ix,98
       00          
0410CF CD 8A 08 04 0439*  	call vdu_load_img
0410D3             0440*  
0410D3 21 FD 14 04 0441*  	ld hl,Frc073
0410D7 11 00 E0 B7 0442*  	ld de,filedata
0410DB 01 00 00 01 0443*  	ld bc,65536
0410DF 3E 01       0444*  	ld a,mos_load
0410E1 5B CF       0445*  	RST.LIL 08h
0410E3 21 49 00 00 0446*  	ld hl,BUF_0073
0410E7 01 07 00 00 0447*  	ld bc,7
0410EB 11 0E 00 00 0448*  	ld de,14
0410EF DD 21 62 00 0449*  	ld ix,98
       00          
0410F4 CD 8A 08 04 0450*  	call vdu_load_img
0410F8             0451*  
0410F8 21 10 15 04 0452*  	ld hl,Frc074
0410FC 11 00 E0 B7 0453*  	ld de,filedata
041100 01 00 00 01 0454*  	ld bc,65536
041104 3E 01       0455*  	ld a,mos_load
041106 5B CF       0456*  	RST.LIL 08h
041108 21 4A 00 00 0457*  	ld hl,BUF_0074
04110C 01 08 00 00 0458*  	ld bc,8
041110 11 0E 00 00 0459*  	ld de,14
041114 DD 21 70 00 0460*  	ld ix,112
       00          
041119 CD 8A 08 04 0461*  	call vdu_load_img
04111D             0462*  
04111D 21 23 15 04 0463*  	ld hl,Frc075
041121 11 00 E0 B7 0464*  	ld de,filedata
041125 01 00 00 01 0465*  	ld bc,65536
041129 3E 01       0466*  	ld a,mos_load
04112B 5B CF       0467*  	RST.LIL 08h
04112D 21 4B 00 00 0468*  	ld hl,BUF_0075
041131 01 07 00 00 0469*  	ld bc,7
041135 11 0E 00 00 0470*  	ld de,14
041139 DD 21 62 00 0471*  	ld ix,98
       00          
04113E CD 8A 08 04 0472*  	call vdu_load_img
041142             0473*  
041142 21 36 15 04 0474*  	ld hl,Frc076
041146 11 00 E0 B7 0475*  	ld de,filedata
04114A 01 00 00 01 0476*  	ld bc,65536
04114E 3E 01       0477*  	ld a,mos_load
041150 5B CF       0478*  	RST.LIL 08h
041152 21 4C 00 00 0479*  	ld hl,BUF_0076
041156 01 08 00 00 0480*  	ld bc,8
04115A 11 0E 00 00 0481*  	ld de,14
04115E DD 21 70 00 0482*  	ld ix,112
       00          
041163 CD 8A 08 04 0483*  	call vdu_load_img
041167             0484*  
041167 21 49 15 04 0485*  	ld hl,Frc077
04116B 11 00 E0 B7 0486*  	ld de,filedata
04116F 01 00 00 01 0487*  	ld bc,65536
041173 3E 01       0488*  	ld a,mos_load
041175 5B CF       0489*  	RST.LIL 08h
041177 21 4D 00 00 0490*  	ld hl,BUF_0077
04117B 01 09 00 00 0491*  	ld bc,9
04117F 11 0E 00 00 0492*  	ld de,14
041183 DD 21 7E 00 0493*  	ld ix,126
       00          
041188 CD 8A 08 04 0494*  	call vdu_load_img
04118C             0495*  
04118C 21 5C 15 04 0496*  	ld hl,Frc078
041190 11 00 E0 B7 0497*  	ld de,filedata
041194 01 00 00 01 0498*  	ld bc,65536
041198 3E 01       0499*  	ld a,mos_load
04119A 5B CF       0500*  	RST.LIL 08h
04119C 21 4E 00 00 0501*  	ld hl,BUF_0078
0411A0 01 07 00 00 0502*  	ld bc,7
0411A4 11 0E 00 00 0503*  	ld de,14
0411A8 DD 21 62 00 0504*  	ld ix,98
       00          
0411AD CD 8A 08 04 0505*  	call vdu_load_img
0411B1             0506*  
0411B1 21 6F 15 04 0507*  	ld hl,Frc079
0411B5 11 00 E0 B7 0508*  	ld de,filedata
0411B9 01 00 00 01 0509*  	ld bc,65536
0411BD 3E 01       0510*  	ld a,mos_load
0411BF 5B CF       0511*  	RST.LIL 08h
0411C1 21 4F 00 00 0512*  	ld hl,BUF_0079
0411C5 01 08 00 00 0513*  	ld bc,8
0411C9 11 0E 00 00 0514*  	ld de,14
0411CD DD 21 70 00 0515*  	ld ix,112
       00          
0411D2 CD 8A 08 04 0516*  	call vdu_load_img
0411D6             0517*  
0411D6 21 82 15 04 0518*  	ld hl,Frc080
0411DA 11 00 E0 B7 0519*  	ld de,filedata
0411DE 01 00 00 01 0520*  	ld bc,65536
0411E2 3E 01       0521*  	ld a,mos_load
0411E4 5B CF       0522*  	RST.LIL 08h
0411E6 21 50 00 00 0523*  	ld hl,BUF_0080
0411EA 01 07 00 00 0524*  	ld bc,7
0411EE 11 0E 00 00 0525*  	ld de,14
0411F2 DD 21 62 00 0526*  	ld ix,98
       00          
0411F7 CD 8A 08 04 0527*  	call vdu_load_img
0411FB             0528*  
0411FB 21 95 15 04 0529*  	ld hl,Frc081
0411FF 11 00 E0 B7 0530*  	ld de,filedata
041203 01 00 00 01 0531*  	ld bc,65536
041207 3E 01       0532*  	ld a,mos_load
041209 5B CF       0533*  	RST.LIL 08h
04120B 21 51 00 00 0534*  	ld hl,BUF_0081
04120F 01 08 00 00 0535*  	ld bc,8
041213 11 0F 00 00 0536*  	ld de,15
041217 DD 21 78 00 0537*  	ld ix,120
       00          
04121C CD 8A 08 04 0538*  	call vdu_load_img
041220             0539*  
041220 21 A8 15 04 0540*  	ld hl,Frc082
041224 11 00 E0 B7 0541*  	ld de,filedata
041228 01 00 00 01 0542*  	ld bc,65536
04122C 3E 01       0543*  	ld a,mos_load
04122E 5B CF       0544*  	RST.LIL 08h
041230 21 52 00 00 0545*  	ld hl,BUF_0082
041234 01 08 00 00 0546*  	ld bc,8
041238 11 0E 00 00 0547*  	ld de,14
04123C DD 21 70 00 0548*  	ld ix,112
       00          
041241 CD 8A 08 04 0549*  	call vdu_load_img
041245             0550*  
041245 21 BB 15 04 0551*  	ld hl,Frc083
041249 11 00 E0 B7 0552*  	ld de,filedata
04124D 01 00 00 01 0553*  	ld bc,65536
041251 3E 01       0554*  	ld a,mos_load
041253 5B CF       0555*  	RST.LIL 08h
041255 21 53 00 00 0556*  	ld hl,BUF_0083
041259 01 08 00 00 0557*  	ld bc,8
04125D 11 0E 00 00 0558*  	ld de,14
041261 DD 21 70 00 0559*  	ld ix,112
       00          
041266 CD 8A 08 04 0560*  	call vdu_load_img
04126A             0561*  
04126A 21 CE 15 04 0562*  	ld hl,Frc084
04126E 11 00 E0 B7 0563*  	ld de,filedata
041272 01 00 00 01 0564*  	ld bc,65536
041276 3E 01       0565*  	ld a,mos_load
041278 5B CF       0566*  	RST.LIL 08h
04127A 21 54 00 00 0567*  	ld hl,BUF_0084
04127E 01 07 00 00 0568*  	ld bc,7
041282 11 0E 00 00 0569*  	ld de,14
041286 DD 21 62 00 0570*  	ld ix,98
       00          
04128B CD 8A 08 04 0571*  	call vdu_load_img
04128F             0572*  
04128F 21 E1 15 04 0573*  	ld hl,Frc085
041293 11 00 E0 B7 0574*  	ld de,filedata
041297 01 00 00 01 0575*  	ld bc,65536
04129B 3E 01       0576*  	ld a,mos_load
04129D 5B CF       0577*  	RST.LIL 08h
04129F 21 55 00 00 0578*  	ld hl,BUF_0085
0412A3 01 08 00 00 0579*  	ld bc,8
0412A7 11 0E 00 00 0580*  	ld de,14
0412AB DD 21 70 00 0581*  	ld ix,112
       00          
0412B0 CD 8A 08 04 0582*  	call vdu_load_img
0412B4             0583*  
0412B4 21 F4 15 04 0584*  	ld hl,Frc086
0412B8 11 00 E0 B7 0585*  	ld de,filedata
0412BC 01 00 00 01 0586*  	ld bc,65536
0412C0 3E 01       0587*  	ld a,mos_load
0412C2 5B CF       0588*  	RST.LIL 08h
0412C4 21 56 00 00 0589*  	ld hl,BUF_0086
0412C8 01 07 00 00 0590*  	ld bc,7
0412CC 11 0E 00 00 0591*  	ld de,14
0412D0 DD 21 62 00 0592*  	ld ix,98
       00          
0412D5 CD 8A 08 04 0593*  	call vdu_load_img
0412D9             0594*  
0412D9 21 07 16 04 0595*  	ld hl,Frc087
0412DD 11 00 E0 B7 0596*  	ld de,filedata
0412E1 01 00 00 01 0597*  	ld bc,65536
0412E5 3E 01       0598*  	ld a,mos_load
0412E7 5B CF       0599*  	RST.LIL 08h
0412E9 21 57 00 00 0600*  	ld hl,BUF_0087
0412ED 01 0B 00 00 0601*  	ld bc,11
0412F1 11 0E 00 00 0602*  	ld de,14
0412F5 DD 21 9A 00 0603*  	ld ix,154
       00          
0412FA CD 8A 08 04 0604*  	call vdu_load_img
0412FE             0605*  
0412FE 21 1A 16 04 0606*  	ld hl,Frc088
041302 11 00 E0 B7 0607*  	ld de,filedata
041306 01 00 00 01 0608*  	ld bc,65536
04130A 3E 01       0609*  	ld a,mos_load
04130C 5B CF       0610*  	RST.LIL 08h
04130E 21 58 00 00 0611*  	ld hl,BUF_0088
041312 01 07 00 00 0612*  	ld bc,7
041316 11 0E 00 00 0613*  	ld de,14
04131A DD 21 62 00 0614*  	ld ix,98
       00          
04131F CD 8A 08 04 0615*  	call vdu_load_img
041323             0616*  
041323 21 2D 16 04 0617*  	ld hl,Frc089
041327 11 00 E0 B7 0618*  	ld de,filedata
04132B 01 00 00 01 0619*  	ld bc,65536
04132F 3E 01       0620*  	ld a,mos_load
041331 5B CF       0621*  	RST.LIL 08h
041333 21 59 00 00 0622*  	ld hl,BUF_0089
041337 01 08 00 00 0623*  	ld bc,8
04133B 11 0E 00 00 0624*  	ld de,14
04133F DD 21 70 00 0625*  	ld ix,112
       00          
041344 CD 8A 08 04 0626*  	call vdu_load_img
041348             0627*  
041348 21 40 16 04 0628*  	ld hl,Frc090
04134C 11 00 E0 B7 0629*  	ld de,filedata
041350 01 00 00 01 0630*  	ld bc,65536
041354 3E 01       0631*  	ld a,mos_load
041356 5B CF       0632*  	RST.LIL 08h
041358 21 5A 00 00 0633*  	ld hl,BUF_0090
04135C 01 07 00 00 0634*  	ld bc,7
041360 11 0E 00 00 0635*  	ld de,14
041364 DD 21 62 00 0636*  	ld ix,98
       00          
041369 CD 8A 08 04 0637*  	call vdu_load_img
04136D             0638*  ; Missing character 91
04136D             0639*  ; Missing character 92
04136D             0640*  ; Missing character 93
04136D             0641*  ; Missing character 94
04136D             0642*  ; Missing character 95
04136D             0643*  ; Missing character 96
04136D             0644*  ; Missing character 97
04136D             0645*  ; Missing character 98
04136D             0646*  ; Missing character 99
04136D             0647*  ; Missing character 100
04136D             0648*  ; Missing character 101
04136D             0649*  ; Missing character 102
04136D             0650*  ; Missing character 103
04136D             0651*  ; Missing character 104
04136D             0652*  ; Missing character 105
04136D             0653*  ; Missing character 106
04136D             0654*  ; Missing character 107
04136D             0655*  ; Missing character 108
04136D             0656*  ; Missing character 109
04136D             0657*  ; Missing character 110
04136D             0658*  ; Missing character 111
04136D             0659*  ; Missing character 112
04136D             0660*  ; Missing character 113
04136D             0661*  ; Missing character 114
04136D             0662*  ; Missing character 115
04136D             0663*  ; Missing character 116
04136D             0664*  ; Missing character 117
04136D             0665*  ; Missing character 118
04136D             0666*  ; Missing character 119
04136D             0667*  ; Missing character 120
04136D             0668*  ; Missing character 121
04136D             0669*  ; Missing character 122
04136D             0670*  
04136D C9          0671*  	ret
04136E             0672*  
04136E 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
041381 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
041394 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
0413A7 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
0413BA 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
0413CD 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
0413E0 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0413F3 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
041406 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
041419 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
04142C 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
04143F 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
041452 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
041465 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
041478 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04148B 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
04149E 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
0414B1 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
0414C4 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
0414D7 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
0414EA 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0414FD 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
041510 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
041523 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
041536 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
041549 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
04155C 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
04156F 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
041582 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
041595 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
0415A8 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
0415BB 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
0415CE 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
0415E1 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0415F4 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
041607 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
04161A 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
04162D 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
041640 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
041653             0043   	include "input.inc"
041653             0001*  keyboard_masks: ds 16 ; 16 bytes for the keyboard masks
041663             0002*  
041663             0003*  ; reset the local keyboard masks to zero
041663             0004*  ; inputs: none
041663             0005*  ; outputs: none
041663             0006*  ; clobbers: a, b, iy
041663             0007*  reset_keys:
041663 FD 21 53 16 0008*      ld iy,keyboard_masks
       04          
041668 AF          0009*      xor a
041669 06 10       0010*      ld b,16 ; loop counter
04166B             0011*  @loop:
04166B FD 77 00    0012*      ld (iy),a
04166E FD 23       0013*      inc iy
041670 10 F9       0014*      djnz @loop
041672 C9          0015*      ret
041673             0016*  
041673             0017*  ; check system virtual keyboard map for keys down and or them with local keyboard masks
041673             0018*  ; inputs: none
041673             0019*  ; outputs: none
041673             0020*  ; clobbers: a, b, ix, iy
041673             0021*  set_keys:
041673             0022*      MOSCALL mos_getkbmap ; ix points to the virtual keyboard map
041673 3E 1E       0001*M 			LD	A, function
041675 5B CF       0002*M 			RST.LIL	08h
041677 FD 21 53 16 0023*      ld iy,keyboard_masks
       04          
04167C 06 10       0024*      ld b,16 ; loop counter
04167E             0025*  @loop:
04167E DD 7E 00    0026*      ld a,(ix)
041681 FD B6 00    0027*      or (iy)
041684 FD 77 00    0028*      ld (iy),a
041687 DD 23       0029*      inc ix
041689 FD 23       0030*      inc iy
04168B 10 F1       0031*      djnz @loop
04168D C9          0032*      ret
04168E             0033*  
04168E             0034*  ; ============ KEYBOARD INPUT ============
04168E             0035*  do_input:
04168E             0036*  ; get user keyboard input
04168E DD 21 53 16 0037*      ld ix,keyboard_masks
       04          
041693 3E FF       0038*      ld a,-1 ; anything non-zero to indicates no ship movement key pressed
041695             0039*  
041695             0040*  ; ------ QUIT ------
041695             0041*  ; 113 Escape
041695 DD CB 0E 46 0042*      bit 0,(ix+14)
041699 C2 79 28 04 0043*  	jp nz,main_end
04169D             0044*  
04169D             0045*  ; 99 Space fire zee missiles
04169D DD CB 0C 56 0046*      bit 2,(ix+12)
0416A1 CA A5 16 04 0047*      jp z,@Space
0416A5             0048*  @Space:
0416A5             0049*  
0416A5             0050*  ; 26 Left
0416A5 DD CB 03 4E 0051*      bit 1,(ix+3)
0416A9 CA AE 16 04 0052*      jp z,@Left
0416AD             0053*  
0416AD AF          0054*      xor a
0416AE             0055*  @Left:
0416AE             0056*  
0416AE             0057*  ; 122 Right
0416AE DD CB 0F 4E 0058*      bit 1,(ix+15)
0416B2 CA B6 16 04 0059*      jp z,@Right
0416B6             0060*  
0416B6             0061*  @Right:
0416B6             0062*  
0416B6             0063*  ; check keypress flag and branch accordingly
0416B6 A7          0064*      and a
0416B7             0065*  
0416B7 C9          0066*      ret
0416B8             0044       include "images.inc"
0416B8             0001*  image_type: equ 0
0416B8             0002*  image_width: equ image_type+3
0416B8             0003*  image_height: equ image_width+3
0416B8             0004*  image_filesize: equ image_height+3
0416B8             0005*  image_filename: equ image_filesize+3
0416B8             0006*  image_bufferId: equ image_filename+3
0416B8             0007*  image_record_size: equ image_bufferId+3
0416B8             0008*  
0416B8 00 00 00    0009*  cur_image_list: dl 0
0416BB 00 00 00    0010*  cur_file_idx: dl 0
0416BE 00 00 00    0011*  cur_filename: dl 0
0416C1 00 00 00    0012*  cur_buffer_id: dl 0
0416C4             0013*  
0416C4             0014*  load_ui_images:
0416C4             0015*  ; initialize image loading variables
0416C4 21 00 00 00 0016*  	ld hl,0
0416C8 22 BB 16 04 0017*  	ld (cur_file_idx),hl
0416CC 21 1D 27 04 0018*  	ld hl,ui_image_list
0416D0 22 B8 16 04 0019*  	ld (cur_image_list),hl
0416D4             0020*  ; load images
0416D4 06 02       0021*  	ld b,ui_num_images
0416D6             0022*  @loop:
0416D6 C5          0023*  	push bc
0416D7 CD DF 16 04 0024*  	call load_next_image
0416DB C1          0025*  	pop bc
0416DC 10 F8       0026*  	djnz @loop
0416DE C9          0027*  	ret
0416DF             0028*  
0416DF             0029*  load_next_image:
0416DF ED 53 BB 16 0030*      ld (cur_file_idx),de
       04          
0416E4 16 12       0031*      ld d,image_record_size
0416E6 ED 5C       0032*      mlt de
0416E8 FD 2A B8 16 0033*      ld iy,(cur_image_list)
       04          
0416ED FD 19       0034*      add iy,de
0416EF FD 7E 00    0035*      ld a,(iy+image_type) ; get image type
0416F2 FD 07 03    0036*      ld bc,(iy+image_width) ; get image width
0416F5 FD 17 06    0037*      ld de,(iy+image_height) ; get image height
0416F8 FD 31 09    0038*      ld ix,(iy+image_filesize) ; get image file size
0416FB FD 27 0F    0039*  	ld hl,(iy+image_bufferId) ; get image bufferId
0416FE FD 37 0C    0040*      ld iy,(iy+image_filename) ; get image filename
041701 CD 8A 08 04 0041*      call vdu_load_img
041705 FD 21 BB 16 0042*      ld iy,cur_file_idx
       04          
04170A FD 34 00    0043*  	inc (iy)
04170D C9          0044*  	ret
04170E             0045*  img_load_init:
04170E             0046*  ; initialize logo's position parameters
04170E 21 00 00 00 0047*  	ld hl,0
041712 22 20 18 04 0048*  	ld (logo_yvel),hl
041716             0049*  
041716 21 2D 00 00 0050*      ld hl,45
04171A 22 23 18 04 0051*  	ld (logo_y_cur),hl
04171E 22 26 18 04 0052*  	ld (logo_y_min),hl
041722 22 29 18 04 0053*      ld (logo_y_max),hl
041726             0054*  
041726 21 01 00 00 0055*  	ld hl,1
04172A 22 14 18 04 0056*  	ld (logo_xvel),hl
04172E             0057*  
04172E 21 0A 00 00 0058*  	ld hl,10
041732 22 17 18 04 0059*  	ld (logo_x_cur),hl
041736 22 1A 18 04 0060*  	ld (logo_x_min),hl
04173A             0061*  
04173A 21 C8 00 00 0062*  	ld hl,320-120
04173E 22 1D 18 04 0063*  	ld (logo_x_max),hl
041742             0064*  
041742 C9          0065*      ret
041743             0066*  
041743             0067*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
041743             0068*  img_load_main:
041743 21 00 00 00 0069*      ld hl,0
041747 22 BB 16 04 0070*      ld (cur_file_idx),hl
04174B             0071*  img_load_main_loop:
04174B             0072*  ; back up loop counter
04174B C5          0073*      push bc
04174C             0074*  ; load the next image
04174C CD DF 16 04 0075*      call load_next_image
041750             0076*  ; draw all the things
041750 CD 2C 18 04 0077*      call draw_all_the_things
041754             0078*  ; draw the most recently loaded image
041754 2A C1 16 04 0079*  	ld hl,(cur_buffer_id)
041758 CD 50 07 04 0080*  	call vdu_buff_select
04175C 01 00 00 00 0081*  	ld bc,0
041760 11 00 00 00 0082*  	ld de,0
041764 CD 86 07 04 0083*  	call vdu_plot_bmp
041768             0084*  ; move logo
041768 CD B4 17 04 0085*  	call move_logo
04176C             0086*  ; print welcome message
04176C DD 21 A8 0B 0087*  	ld ix,font_rc
       04          
041771 21 69 27 04 0088*  	ld hl,hello_world
041775 01 20 00 00 0089*  	ld bc,32
041779 11 02 00 00 0090*  	ld de,2
04177D CD B2 04 04 0091*  	call font_bmp_print
041781             0092*  ; print current filename
041781 CD 95 06 04 0093*  	call vdu_cls
041785 2A BE 16 04 0094*  	ld hl,(cur_filename)
041789 CD 80 00 04 0095*  	call printString
04178D CD 95 00 04 0096*  	call printNewLine
041791             0097*  
041791             0098*  ; print current load stopwatch
041791 21 8F 27 04 0099*  	ld hl,loading_time
041795 CD 80 00 04 0100*  	call printString
041799 CD 28 06 04 0101*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04179D CD D0 00 04 0102*  	call printDec
0417A1             0103*  
0417A1             0104*  ; flip screen
0417A1 CD 9A 06 04 0105*      call vdu_flip
0417A5             0106*  ; decrement loop counter
0417A5 C1          0107*      pop bc
0417A6 0B          0108*  	dec bc
0417A7 79          0109*      ld a,c
0417A8 B7          0110*      or a
0417A9 C2 4B 17 04 0111*      jp nz,img_load_main_loop
0417AD 78          0112*      ld a,b
0417AE B7          0113*      or a
0417AF C2 4B 17 04 0114*      jp nz,img_load_main_loop
0417B3 C9          0115*      ret
0417B4             0116*  
0417B4             0117*  move_logo:
0417B4             0118*  ; activate logo bitmap
0417B4 21 01 00 00 0119*  	ld hl, BUF_SPLASH_LOGO
0417B8 CD 50 07 04 0120*  	call vdu_buff_select
0417BC             0121*  ; update position based on velocity parameters
0417BC 2A 17 18 04 0122*  	ld hl, (logo_x_cur)
0417C0 ED 5B 14 18 0123*  	ld de, (logo_xvel)
       04          
0417C5 19          0124*  	add hl, de
0417C6 22 17 18 04 0125*  	ld (logo_x_cur), hl
0417CA EB          0126*  	ex de,hl ; store x_cur in de
0417CB             0127*  ; check if we're < x_min
0417CB 2A 1A 18 04 0128*  	ld hl,(logo_x_min)
0417CF AF          0129*  	xor a ; clear carry
0417D0 ED 52       0130*  	sbc hl,de ; x_min - x_cur
0417D2 F2 F0 17 04 0131*  	jp p, move_logo_x_min
0417D6             0132*  ; check if we're > x_max
0417D6 2A 1D 18 04 0133*  	ld hl,(logo_x_max)
0417DA AF          0134*  	xor a ; clear carry
0417DB ED 52       0135*  	sbc hl,de ; x_max - x_cur
0417DD FA 02 18 04 0136*  	jp m, move_logo_x_max
0417E1             0137*  ; if not at either boundary, fall through to draw logo's
0417E1             0138*  draw_logo:
0417E1 ED 4B 17 18 0139*  	ld bc,(logo_x_cur)
       04          
0417E6 ED 5B 23 18 0140*  	ld de,(logo_y_cur)
       04          
0417EB CD 86 07 04 0141*  	call vdu_plot_bmp
0417EF C9          0142*  	ret
0417F0             0143*  move_logo_x_min:
0417F0 21 01 00 00 0144*  	ld hl,1
0417F4 22 14 18 04 0145*  	ld (logo_xvel),hl
0417F8 2A 1A 18 04 0146*  	ld hl,(logo_x_min)
0417FC 22 17 18 04 0147*  	ld (logo_x_cur),hl
041800 18 DF       0148*  	jr draw_logo
041802             0149*  move_logo_x_max:
041802 21 FF FF FF 0150*  	ld hl,-1
041806 22 14 18 04 0151*  	ld (logo_xvel),hl
04180A 2A 1D 18 04 0152*  	ld hl,(logo_x_max)
04180E 22 17 18 04 0153*  	ld (logo_x_cur),hl
041812 18 CD       0154*  	jr draw_logo
041814 00 00 00    0155*  logo_xvel: dl 0
041817 00 00 00    0156*  logo_x_cur: dl 0
04181A 00 00 00    0157*  logo_x_min: dl 0
04181D 00 00 00    0158*  logo_x_max: dl 0
041820             0159*  
041820 00 00 00    0160*  logo_yvel: dl 0
041823 00 00 00    0161*  logo_y_cur: dl 0
041826 00 00 00    0162*  logo_y_min: dl 0
041829 00 00 00    0163*  logo_y_max: dl 0
04182C             0164*  
04182C             0165*  draw_all_the_things:
04182C 21 00 00 00 0166*      ld hl,BUF_SPLASH_BG
041830 CD 50 07 04 0167*      call vdu_buff_select
041834 01 00 00 00 0168*      ld bc,0
041838 11 00 00 00 0169*      ld de,0
04183C CD 86 07 04 0170*      call vdu_plot_bmp
041840 C9          0171*  	ret
041841             0045       include "images_sprites.inc"
041841             0001*  ; Generated by make_images.py
041841             0002*  
041841             0003*  sprites_num_images: equ 89
041841             0004*  
041841             0005*  ; buffer_ids:
041841             0006*  BUF_0TILE_EMPTY: equ 256
041841             0007*  BUF_1TILE_CROSS: equ 257
041841             0008*  BUF_2TILE_HORIZ: equ 258
041841             0009*  BUF_3TILE_VERT: equ 259
041841             0010*  BUF_4TILE_SQUARE: equ 260
041841             0011*  BUF_5TILE_CIRCLE: equ 261
041841             0012*  BUF_6TILE_PAD: equ 262
041841             0013*  BUF_7TILE_TURRET: equ 263
041841             0014*  BUF_CIRCLE: equ 264
041841             0015*  BUF_CRATER: equ 265
041841             0016*  BUF_EXPLOSION_A: equ 266
041841             0017*  BUF_EXPLOSION_B: equ 267
041841             0018*  BUF_EXPLOSION_C: equ 268
041841             0019*  BUF_EXPLOSION_D: equ 269
041841             0020*  BUF_EXPLOSION_E: equ 270
041841             0021*  BUF_FIREBALL_A: equ 271
041841             0022*  BUF_FIREBALL_B: equ 272
041841             0023*  BUF_LASER_A: equ 273
041841             0024*  BUF_LASER_B: equ 274
041841             0025*  BUF_PAD: equ 275
041841             0026*  BUF_SEEKER_000: equ 276
041841             0027*  BUF_SEEKER_008: equ 277
041841             0028*  BUF_SEEKER_016: equ 278
041841             0029*  BUF_SEEKER_024: equ 279
041841             0030*  BUF_SEEKER_032: equ 280
041841             0031*  BUF_SEEKER_040: equ 281
041841             0032*  BUF_SEEKER_048: equ 282
041841             0033*  BUF_SEEKER_056: equ 283
041841             0034*  BUF_SEEKER_064: equ 284
041841             0035*  BUF_SEEKER_072: equ 285
041841             0036*  BUF_SEEKER_080: equ 286
041841             0037*  BUF_SEEKER_088: equ 287
041841             0038*  BUF_SEEKER_096: equ 288
041841             0039*  BUF_SEEKER_104: equ 289
041841             0040*  BUF_SEEKER_112: equ 290
041841             0041*  BUF_SEEKER_120: equ 291
041841             0042*  BUF_SEEKER_128: equ 292
041841             0043*  BUF_SEEKER_136: equ 293
041841             0044*  BUF_SEEKER_144: equ 294
041841             0045*  BUF_SEEKER_152: equ 295
041841             0046*  BUF_SEEKER_160: equ 296
041841             0047*  BUF_SEEKER_168: equ 297
041841             0048*  BUF_SEEKER_176: equ 298
041841             0049*  BUF_SEEKER_184: equ 299
041841             0050*  BUF_SEEKER_192: equ 300
041841             0051*  BUF_SEEKER_200: equ 301
041841             0052*  BUF_SEEKER_208: equ 302
041841             0053*  BUF_SEEKER_216: equ 303
041841             0054*  BUF_SEEKER_224: equ 304
041841             0055*  BUF_SEEKER_232: equ 305
041841             0056*  BUF_SEEKER_240: equ 306
041841             0057*  BUF_SEEKER_248: equ 307
041841             0058*  BUF_SHIP_0L: equ 308
041841             0059*  BUF_SHIP_1C: equ 309
041841             0060*  BUF_SHIP_2R: equ 310
041841             0061*  BUF_SHIP_SMALL: equ 311
041841             0062*  BUF_STAR: equ 312
041841             0063*  BUF_TURRET_000: equ 313
041841             0064*  BUF_TURRET_008: equ 314
041841             0065*  BUF_TURRET_016: equ 315
041841             0066*  BUF_TURRET_024: equ 316
041841             0067*  BUF_TURRET_032: equ 317
041841             0068*  BUF_TURRET_040: equ 318
041841             0069*  BUF_TURRET_048: equ 319
041841             0070*  BUF_TURRET_056: equ 320
041841             0071*  BUF_TURRET_064: equ 321
041841             0072*  BUF_TURRET_072: equ 322
041841             0073*  BUF_TURRET_080: equ 323
041841             0074*  BUF_TURRET_088: equ 324
041841             0075*  BUF_TURRET_096: equ 325
041841             0076*  BUF_TURRET_104: equ 326
041841             0077*  BUF_TURRET_112: equ 327
041841             0078*  BUF_TURRET_120: equ 328
041841             0079*  BUF_TURRET_128: equ 329
041841             0080*  BUF_TURRET_136: equ 330
041841             0081*  BUF_TURRET_144: equ 331
041841             0082*  BUF_TURRET_152: equ 332
041841             0083*  BUF_TURRET_160: equ 333
041841             0084*  BUF_TURRET_168: equ 334
041841             0085*  BUF_TURRET_176: equ 335
041841             0086*  BUF_TURRET_184: equ 336
041841             0087*  BUF_TURRET_192: equ 337
041841             0088*  BUF_TURRET_200: equ 338
041841             0089*  BUF_TURRET_208: equ 339
041841             0090*  BUF_TURRET_216: equ 340
041841             0091*  BUF_TURRET_224: equ 341
041841             0092*  BUF_TURRET_232: equ 342
041841             0093*  BUF_TURRET_240: equ 343
041841             0094*  BUF_TURRET_248: equ 344
041841             0095*  
041841             0096*  sprites_image_list: ; type; width; height; filename; bufferId:
041841 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_0tile_empty, 256
       00 00 10 00 
       00 00 01 00 
       83 1E 04 00 
       01 00       
041853 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_1tile_cross, 257
       00 00 10 00 
       00 00 01 00 
       9D 1E 04 01 
       01 00       
041865 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_2tile_horiz, 258
       00 00 10 00 
       00 00 01 00 
       B7 1E 04 02 
       01 00       
041877 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_3tile_vert, 259
       00 00 10 00 
       00 00 01 00 
       D1 1E 04 03 
       01 00       
041889 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_4tile_square, 260
       00 00 10 00 
       00 00 01 00 
       EA 1E 04 04 
       01 00       
04189B 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_5tile_circle, 261
       00 00 10 00 
       00 00 01 00 
       05 1F 04 05 
       01 00       
0418AD 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_6tile_pad, 262
       00 00 10 00 
       00 00 01 00 
       20 1F 04 06 
       01 00       
0418BF 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_7tile_turret, 263
       00 00 10 00 
       00 00 01 00 
       38 1F 04 07 
       01 00       
0418D1 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_circle, 264
       00 00 10 00 
       00 00 01 00 
       53 1F 04 08 
       01 00       
0418E3 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_crater, 265
       00 00 10 00 
       00 00 01 00 
       68 1F 04 09 
       01 00       
0418F5 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_explosion_a, 266
       00 00 10 00 
       00 00 01 00 
       7D 1F 04 0A 
       01 00       
041907 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_explosion_b, 267
       00 00 10 00 
       00 00 01 00 
       97 1F 04 0B 
       01 00       
041919 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_explosion_c, 268
       00 00 10 00 
       00 00 01 00 
       B1 1F 04 0C 
       01 00       
04192B 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_explosion_d, 269
       00 00 10 00 
       00 00 01 00 
       CB 1F 04 0D 
       01 00       
04193D 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_explosion_e, 270
       00 00 10 00 
       00 00 01 00 
       E5 1F 04 0E 
       01 00       
04194F 01 00 00 07 0112*  	dl 1, 7, 7, 49, fn_fireball_a, 271
       00 00 07 00 
       00 31 00 00 
       FF 1F 04 0F 
       01 00       
041961 01 00 00 07 0113*  	dl 1, 7, 7, 49, fn_fireball_b, 272
       00 00 07 00 
       00 31 00 00 
       18 20 04 10 
       01 00       
041973 01 00 00 05 0114*  	dl 1, 5, 13, 65, fn_laser_a, 273
       00 00 0D 00 
       00 41 00 00 
       31 20 04 11 
       01 00       
041985 01 00 00 05 0115*  	dl 1, 5, 13, 65, fn_laser_b, 274
       00 00 0D 00 
       00 41 00 00 
       47 20 04 12 
       01 00       
041997 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_pad, 275
       00 00 10 00 
       00 00 01 00 
       5D 20 04 13 
       01 00       
0419A9 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_000, 276
       00 00 10 00 
       00 00 01 00 
       6F 20 04 14 
       01 00       
0419BB 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_008, 277
       00 00 10 00 
       00 00 01 00 
       88 20 04 15 
       01 00       
0419CD 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_016, 278
       00 00 10 00 
       00 00 01 00 
       A1 20 04 16 
       01 00       
0419DF 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_024, 279
       00 00 10 00 
       00 00 01 00 
       BA 20 04 17 
       01 00       
0419F1 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_032, 280
       00 00 10 00 
       00 00 01 00 
       D3 20 04 18 
       01 00       
041A03 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_040, 281
       00 00 10 00 
       00 00 01 00 
       EC 20 04 19 
       01 00       
041A15 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_048, 282
       00 00 10 00 
       00 00 01 00 
       05 21 04 1A 
       01 00       
041A27 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_056, 283
       00 00 10 00 
       00 00 01 00 
       1E 21 04 1B 
       01 00       
041A39 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_064, 284
       00 00 10 00 
       00 00 01 00 
       37 21 04 1C 
       01 00       
041A4B 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_072, 285
       00 00 10 00 
       00 00 01 00 
       50 21 04 1D 
       01 00       
041A5D 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_080, 286
       00 00 10 00 
       00 00 01 00 
       69 21 04 1E 
       01 00       
041A6F 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_088, 287
       00 00 10 00 
       00 00 01 00 
       82 21 04 1F 
       01 00       
041A81 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_096, 288
       00 00 10 00 
       00 00 01 00 
       9B 21 04 20 
       01 00       
041A93 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_seeker_104, 289
       00 00 10 00 
       00 00 01 00 
       B4 21 04 21 
       01 00       
041AA5 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_seeker_112, 290
       00 00 10 00 
       00 00 01 00 
       CD 21 04 22 
       01 00       
041AB7 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_seeker_120, 291
       00 00 10 00 
       00 00 01 00 
       E6 21 04 23 
       01 00       
041AC9 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_seeker_128, 292
       00 00 10 00 
       00 00 01 00 
       FF 21 04 24 
       01 00       
041ADB 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_seeker_136, 293
       00 00 10 00 
       00 00 01 00 
       18 22 04 25 
       01 00       
041AED 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_seeker_144, 294
       00 00 10 00 
       00 00 01 00 
       31 22 04 26 
       01 00       
041AFF 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_seeker_152, 295
       00 00 10 00 
       00 00 01 00 
       4A 22 04 27 
       01 00       
041B11 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_seeker_160, 296
       00 00 10 00 
       00 00 01 00 
       63 22 04 28 
       01 00       
041B23 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_seeker_168, 297
       00 00 10 00 
       00 00 01 00 
       7C 22 04 29 
       01 00       
041B35 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_seeker_176, 298
       00 00 10 00 
       00 00 01 00 
       95 22 04 2A 
       01 00       
041B47 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_seeker_184, 299
       00 00 10 00 
       00 00 01 00 
       AE 22 04 2B 
       01 00       
041B59 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_seeker_192, 300
       00 00 10 00 
       00 00 01 00 
       C7 22 04 2C 
       01 00       
041B6B 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_seeker_200, 301
       00 00 10 00 
       00 00 01 00 
       E0 22 04 2D 
       01 00       
041B7D 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_seeker_208, 302
       00 00 10 00 
       00 00 01 00 
       F9 22 04 2E 
       01 00       
041B8F 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_seeker_216, 303
       00 00 10 00 
       00 00 01 00 
       12 23 04 2F 
       01 00       
041BA1 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_seeker_224, 304
       00 00 10 00 
       00 00 01 00 
       2B 23 04 30 
       01 00       
041BB3 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_seeker_232, 305
       00 00 10 00 
       00 00 01 00 
       44 23 04 31 
       01 00       
041BC5 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_seeker_240, 306
       00 00 10 00 
       00 00 01 00 
       5D 23 04 32 
       01 00       
041BD7 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_seeker_248, 307
       00 00 10 00 
       00 00 01 00 
       76 23 04 33 
       01 00       
041BE9 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_ship_0l, 308
       00 00 10 00 
       00 00 01 00 
       8F 23 04 34 
       01 00       
041BFB 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_ship_1c, 309
       00 00 10 00 
       00 00 01 00 
       A5 23 04 35 
       01 00       
041C0D 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_ship_2r, 310
       00 00 10 00 
       00 00 01 00 
       BB 23 04 36 
       01 00       
041C1F 01 00 00 08 0152*  	dl 1, 8, 8, 64, fn_ship_small, 311
       00 00 08 00 
       00 40 00 00 
       D1 23 04 37 
       01 00       
041C31 01 00 00 05 0153*  	dl 1, 5, 5, 25, fn_star, 312
       00 00 05 00 
       00 19 00 00 
       EA 23 04 38 
       01 00       
041C43 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_000, 313
       00 00 10 00 
       00 00 01 00 
       FD 23 04 39 
       01 00       
041C55 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_008, 314
       00 00 10 00 
       00 00 01 00 
       16 24 04 3A 
       01 00       
041C67 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_016, 315
       00 00 10 00 
       00 00 01 00 
       2F 24 04 3B 
       01 00       
041C79 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_024, 316
       00 00 10 00 
       00 00 01 00 
       48 24 04 3C 
       01 00       
041C8B 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_032, 317
       00 00 10 00 
       00 00 01 00 
       61 24 04 3D 
       01 00       
041C9D 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_040, 318
       00 00 10 00 
       00 00 01 00 
       7A 24 04 3E 
       01 00       
041CAF 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_048, 319
       00 00 10 00 
       00 00 01 00 
       93 24 04 3F 
       01 00       
041CC1 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_056, 320
       00 00 10 00 
       00 00 01 00 
       AC 24 04 40 
       01 00       
041CD3 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_064, 321
       00 00 10 00 
       00 00 01 00 
       C5 24 04 41 
       01 00       
041CE5 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_072, 322
       00 00 10 00 
       00 00 01 00 
       DE 24 04 42 
       01 00       
041CF7 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_080, 323
       00 00 10 00 
       00 00 01 00 
       F7 24 04 43 
       01 00       
041D09 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_088, 324
       00 00 10 00 
       00 00 01 00 
       10 25 04 44 
       01 00       
041D1B 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_turret_096, 325
       00 00 10 00 
       00 00 01 00 
       29 25 04 45 
       01 00       
041D2D 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_turret_104, 326
       00 00 10 00 
       00 00 01 00 
       42 25 04 46 
       01 00       
041D3F 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_turret_112, 327
       00 00 10 00 
       00 00 01 00 
       5B 25 04 47 
       01 00       
041D51 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_turret_120, 328
       00 00 10 00 
       00 00 01 00 
       74 25 04 48 
       01 00       
041D63 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_turret_128, 329
       00 00 10 00 
       00 00 01 00 
       8D 25 04 49 
       01 00       
041D75 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_turret_136, 330
       00 00 10 00 
       00 00 01 00 
       A6 25 04 4A 
       01 00       
041D87 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_turret_144, 331
       00 00 10 00 
       00 00 01 00 
       BF 25 04 4B 
       01 00       
041D99 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_turret_152, 332
       00 00 10 00 
       00 00 01 00 
       D8 25 04 4C 
       01 00       
041DAB 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_turret_160, 333
       00 00 10 00 
       00 00 01 00 
       F1 25 04 4D 
       01 00       
041DBD 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_turret_168, 334
       00 00 10 00 
       00 00 01 00 
       0A 26 04 4E 
       01 00       
041DCF 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_turret_176, 335
       00 00 10 00 
       00 00 01 00 
       23 26 04 4F 
       01 00       
041DE1 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_turret_184, 336
       00 00 10 00 
       00 00 01 00 
       3C 26 04 50 
       01 00       
041DF3 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_turret_192, 337
       00 00 10 00 
       00 00 01 00 
       55 26 04 51 
       01 00       
041E05 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_turret_200, 338
       00 00 10 00 
       00 00 01 00 
       6E 26 04 52 
       01 00       
041E17 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_turret_208, 339
       00 00 10 00 
       00 00 01 00 
       87 26 04 53 
       01 00       
041E29 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_turret_216, 340
       00 00 10 00 
       00 00 01 00 
       A0 26 04 54 
       01 00       
041E3B 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_turret_224, 341
       00 00 10 00 
       00 00 01 00 
       B9 26 04 55 
       01 00       
041E4D 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_turret_232, 342
       00 00 10 00 
       00 00 01 00 
       D2 26 04 56 
       01 00       
041E5F 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_turret_240, 343
       00 00 10 00 
       00 00 01 00 
       EB 26 04 57 
       01 00       
041E71 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_turret_248, 344
       00 00 10 00 
       00 00 01 00 
       04 27 04 58 
       01 00       
041E83             0186*  
041E83             0187*  ; files_list: ; filename:
041E83 73 70 72 69 0188*  fn_0tile_empty: db "sprites/0tile_empty.rgba2",0
       74 65 73 2F 
       30 74 69 6C 
       65 5F 65 6D 
       70 74 79 2E 
       72 67 62 61 
       32 00       
041E9D 73 70 72 69 0189*  fn_1tile_cross: db "sprites/1tile_cross.rgba2",0
       74 65 73 2F 
       31 74 69 6C 
       65 5F 63 72 
       6F 73 73 2E 
       72 67 62 61 
       32 00       
041EB7 73 70 72 69 0190*  fn_2tile_horiz: db "sprites/2tile_horiz.rgba2",0
       74 65 73 2F 
       32 74 69 6C 
       65 5F 68 6F 
       72 69 7A 2E 
       72 67 62 61 
       32 00       
041ED1 73 70 72 69 0191*  fn_3tile_vert: db "sprites/3tile_vert.rgba2",0
       74 65 73 2F 
       33 74 69 6C 
       65 5F 76 65 
       72 74 2E 72 
       67 62 61 32 
       00          
041EEA 73 70 72 69 0192*  fn_4tile_square: db "sprites/4tile_square.rgba2",0
       74 65 73 2F 
       34 74 69 6C 
       65 5F 73 71 
       75 61 72 65 
       2E 72 67 62 
       61 32 00    
041F05 73 70 72 69 0193*  fn_5tile_circle: db "sprites/5tile_circle.rgba2",0
       74 65 73 2F 
       35 74 69 6C 
       65 5F 63 69 
       72 63 6C 65 
       2E 72 67 62 
       61 32 00    
041F20 73 70 72 69 0194*  fn_6tile_pad: db "sprites/6tile_pad.rgba2",0
       74 65 73 2F 
       36 74 69 6C 
       65 5F 70 61 
       64 2E 72 67 
       62 61 32 00 
041F38 73 70 72 69 0195*  fn_7tile_turret: db "sprites/7tile_turret.rgba2",0
       74 65 73 2F 
       37 74 69 6C 
       65 5F 74 75 
       72 72 65 74 
       2E 72 67 62 
       61 32 00    
041F53 73 70 72 69 0196*  fn_circle: db "sprites/circle.rgba2",0
       74 65 73 2F 
       63 69 72 63 
       6C 65 2E 72 
       67 62 61 32 
       00          
041F68 73 70 72 69 0197*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
041F7D 73 70 72 69 0198*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
041F97 73 70 72 69 0199*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
041FB1 73 70 72 69 0200*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
041FCB 73 70 72 69 0201*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
041FE5 73 70 72 69 0202*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
041FFF 73 70 72 69 0203*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
042018 73 70 72 69 0204*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
042031 73 70 72 69 0205*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
042047 73 70 72 69 0206*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04205D 73 70 72 69 0207*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04206F 73 70 72 69 0208*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042088 73 70 72 69 0209*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0420A1 73 70 72 69 0210*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0420BA 73 70 72 69 0211*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0420D3 73 70 72 69 0212*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0420EC 73 70 72 69 0213*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042105 73 70 72 69 0214*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04211E 73 70 72 69 0215*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042137 73 70 72 69 0216*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
042150 73 70 72 69 0217*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
042169 73 70 72 69 0218*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
042182 73 70 72 69 0219*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04219B 73 70 72 69 0220*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0421B4 73 70 72 69 0221*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0421CD 73 70 72 69 0222*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0421E6 73 70 72 69 0223*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0421FF 73 70 72 69 0224*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
042218 73 70 72 69 0225*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
042231 73 70 72 69 0226*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04224A 73 70 72 69 0227*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
042263 73 70 72 69 0228*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04227C 73 70 72 69 0229*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
042295 73 70 72 69 0230*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0422AE 73 70 72 69 0231*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0422C7 73 70 72 69 0232*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0422E0 73 70 72 69 0233*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0422F9 73 70 72 69 0234*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
042312 73 70 72 69 0235*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04232B 73 70 72 69 0236*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
042344 73 70 72 69 0237*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04235D 73 70 72 69 0238*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042376 73 70 72 69 0239*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04238F 73 70 72 69 0240*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0423A5 73 70 72 69 0241*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0423BB 73 70 72 69 0242*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0423D1 73 70 72 69 0243*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0423EA 73 70 72 69 0244*  fn_star: db "sprites/star.rgba2",0
       74 65 73 2F 
       73 74 61 72 
       2E 72 67 62 
       61 32 00    
0423FD 73 70 72 69 0245*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042416 73 70 72 69 0246*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04242F 73 70 72 69 0247*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042448 73 70 72 69 0248*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
042461 73 70 72 69 0249*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04247A 73 70 72 69 0250*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042493 73 70 72 69 0251*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0424AC 73 70 72 69 0252*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0424C5 73 70 72 69 0253*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0424DE 73 70 72 69 0254*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0424F7 73 70 72 69 0255*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
042510 73 70 72 69 0256*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
042529 73 70 72 69 0257*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
042542 73 70 72 69 0258*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04255B 73 70 72 69 0259*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
042574 73 70 72 69 0260*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04258D 73 70 72 69 0261*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0425A6 73 70 72 69 0262*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0425BF 73 70 72 69 0263*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0425D8 73 70 72 69 0264*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0425F1 73 70 72 69 0265*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04260A 73 70 72 69 0266*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
042623 73 70 72 69 0267*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04263C 73 70 72 69 0268*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
042655 73 70 72 69 0269*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04266E 73 70 72 69 0270*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
042687 73 70 72 69 0271*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0426A0 73 70 72 69 0272*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0426B9 73 70 72 69 0273*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0426D2 73 70 72 69 0274*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0426EB 73 70 72 69 0275*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042704 73 70 72 69 0276*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04271D             0046   	include "images_ui.inc"
04271D             0001*  ; Generated by make_images.py
04271D             0002*  
04271D             0003*  ui_num_images: equ 2
04271D             0004*  
04271D             0005*  ; buffer_ids:
04271D             0006*  BUF_SPLASH_BG: equ 0
04271D             0007*  BUF_SPLASH_LOGO: equ 1
04271D             0008*  
04271D             0009*  ui_image_list: ; type; width; height; filename; bufferId:
04271D 01 00 00 40 0010*  	dl 1, 320, 240, 76800, fn_splash_bg, 0
       01 00 F0 00 
       00 00 2C 01 
       41 27 04 00 
       00 00       
04272F 01 00 00 40 0011*  	dl 1, 320, 212, 67840, fn_splash_logo, 1
       01 00 D4 00 
       00 00 09 01 
       54 27 04 01 
       00 00       
042741             0012*  
042741             0013*  ; files_list: ; filename:
042741 75 69 2F 73 0014*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
042754 75 69 2F 73 0015*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
042769             0047   
042769 57 65 6C 63 0048   hello_world: defb "Welcome to Purple Nurples!",0
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
042784 4C 6F 61 64 0049   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04278F 4C 6F 61 64 0050   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04279D 50 72 65 73 0051   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
0427BA             0052   
0427BA             0053   init:
0427BA             0054   ; clear all buffers
0427BA CD 5E 08 04 0055       call vdu_clear_all_buffers
0427BE             0056   
0427BE             0057   ; set up the display
0427BE 3E 08       0058       ld a,8 ; 320x240x64 single-buffered
0427C0 CD 2C 07 04 0059       call vdu_set_screen_mode
0427C4 AF          0060       xor a
0427C5 CD 3D 07 04 0061       call vdu_set_scaling
0427C9             0062   
0427C9             0063   ; start generic stopwatch to time setup loop
0427C9             0064   ; so we can determine if we're running on emulator or hardware
0427C9 CD 1C 06 04 0065   	call stopwatch_set
0427CD             0066   
0427CD             0067   ; initialize global timestamp
0427CD DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
0427D0 22 B1 05 04 0069       ld (timestamp_now),hl
0427D4             0070   
0427D4             0071   ; enable additional audio channels
0427D4 CD 60 0A 04 0072   	call vdu_enable_channels
0427D8             0073   
0427D8             0074   ; set the cursor off
0427D8 CD 6E 06 04 0075   	call cursor_off
0427DC             0076   
0427DC             0077   ; set text background color
0427DC 3E 84       0078   	ld a,4 + 128
0427DE CD AD 06 04 0079   	call vdu_colour_text
0427E2             0080   
0427E2             0081   ; set text foreground color
0427E2 3E 2F       0082   	ld a,47 ; aaaaff lavenderish
0427E4 CD AD 06 04 0083   	call vdu_colour_text
0427E8             0084   
0427E8             0085   ; set gfx bg color
0427E8 AF          0086   	xor a ; plotting mode 0
0427E9 0E 04       0087   	ld c,4 ; dark blue
0427EB CD BE 06 04 0088   	call vdu_gcol_bg
0427EF CD A8 06 04 0089   	call vdu_clg
0427F3             0090   
0427F3             0091   ; set the cursor off again since we changed screen modes
0427F3 CD 6E 06 04 0092   	call cursor_off
0427F7             0093   
0427F7             0094   ; print loading ui message
0427F7 21 84 27 04 0095   	ld hl,loading_ui
0427FB CD 80 00 04 0096   	call printString
0427FF             0097   
0427FF             0098   ; load UI images
0427FF CD C4 16 04 0099   	call load_ui_images
042803             0100   
042803             0101   ; ; VDU 28, left, bottom, right, top: Set text viewport **
042803             0102   ; ; MIND THE LITTLE-ENDIANESS
042803             0103   ; ; inputs: c=left,b=bottom,e=right,d=top
042803             0104   ; 	ld c,0 ; left
042803             0105   ; 	ld d,20 ; top
042803             0106   ; 	ld e,39 ; right
042803             0107   ; 	ld b,29; bottom
042803             0108   ; 	call vdu_set_txt_viewport
042803             0109   
042803             0110   ; ; load fonts ; TODO
042803             0111   ; 	call load_font_rc
042803             0112   
042803             0113   ; ; load images ; TODO
042803             0114   ; 	call img_load_init
042803             0115   
042803             0116   ; ; load sprites
042803             0117   ; 	ld bc,sprites_num_images
042803             0118   ; 	ld hl,sprites_image_list
042803             0119   ; 	ld (cur_image_list),hl
042803             0120   ; 	call img_load_main
042803             0121   
042803             0122   ; ; load sound effects ; TODO
042803             0123   ; 	ld bc,SFX_num_buffers
042803             0124   ; 	ld hl,SFX_buffer_id_lut
042803             0125   ; 	ld (cur_buffer_id_lut),hl
042803             0126   ; 	ld hl,SFX_load_routines_table
042803             0127   ; 	ld (cur_load_jump_table),hl
042803             0128   ; 	call sfx_load_main
042803             0129   
042803             0130   ; DEBUG: plot ui images
042803 21 00 00 00 0131   	ld hl,BUF_SPLASH_BG
042807 CD 50 07 04 0132   	call vdu_buff_select
04280B 01 00 00 00 0133   	ld bc,0
04280F 11 00 00 00 0134   	ld de,0
042813 CD 86 07 04 0135   	call vdu_plot_bmp
042817             0136   
042817 21 01 00 00 0137   	ld hl,BUF_SPLASH_LOGO
04281B CD 50 07 04 0138   	call vdu_buff_select
04281F 01 00 00 00 0139   	ld bc,0
042823 11 00 00 00 0140   	ld de,0
042827 CD 86 07 04 0141   	call vdu_plot_bmp
04282B             0142   
04282B             0143   ; print loading complete message and wait for user keypress
04282B 21 9D 27 04 0144   	ld hl,loading_complete
04282F CD 80 00 04 0145   	call printString
042833 CD 9A 06 04 0146   	call vdu_flip
042837 CD 0A 04 04 0147   	call waitKeypress
04283B             0148   
04283B             0149   ; initialization done
04283B C9          0150   	ret
04283C             0151   
04283C             0152   main_loop_tmr: ds 6
042842             0153   framerate: equ 30
042842             0154   
042842             0155   new_game:
042842             0156   
042842 C9          0157   	ret
042843             0158   
042843             0159   main:
042843             0160   
042843             0161   
042843             0162   main_loop:
042843             0163   ; update global timestamp
042843 CD BA 05 04 0164       call timestamp_tick
042847             0165   
042847             0166   ; move player
042847             0167   
042847             0168   
042847             0169   ; move enemies
042847             0170   
042847             0171   
042847             0172   ; render frame
042847             0173   
042847             0174   @wait:
042847 CD 73 16 04 0175   	call set_keys
04284B FD 21 3C 28 0176   	ld iy,main_loop_tmr
       04          
042850 CD 9D 05 04 0177   	call tmr_get
042854 CA 60 28 04 0178   	jp z,@continue
042858 FA 60 28 04 0179   	jp m,@continue
04285C C3 47 28 04 0180   	jp @wait
042860             0181   @continue:
042860             0182   
042860             0183   ; reset main loop timer
042860 FD 21 3C 28 0184   	ld iy,main_loop_tmr
       04          
042865 21 04 00 00 0185   	ld hl,120/framerate
042869 CD 8F 05 04 0186   	call tmr_set
04286D             0187   
04286D             0188   ; check for escape key and quit if pressed
04286D             0189   	MOSCALL mos_getkbmap
04286D 3E 1E       0001M  			LD	A, function
04286F 5B CF       0002M  			RST.LIL	08h
042871             0190   ; 113 Escape
042871 DD CB 0E 46 0191       bit 0,(ix+14)
042875 20 02       0192   	jr nz,main_end
042877             0193   @Escape:
042877 18 CA       0194   	jr main_loop
042879             0195   
042879             0196   main_end:
042879             0197   	; call do_outro
042879             0198   
042879 CD 5E 08 04 0199       call vdu_clear_all_buffers
04287D CD 88 0A 04 0200   	call vdu_disable_channels
042881             0201   
042881             0202   ; restore screen to something normalish
042881 AF          0203   	xor a
042882 CD 2C 07 04 0204   	call vdu_set_screen_mode
042886 CD 60 06 04 0205   	call cursor_on
04288A C9          0206   	ret

PC     Output      Line
040000             0001   	.assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 45 00 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   start:
040045 F5          0012       push af
040046 C5          0013       push bc
040047 D5          0014       push de
040048 DD E5       0015       push ix
04004A FD E5       0016       push iy
04004C             0017   
04004C             0018   ; ###############################################
04004C CD 6C 83 04 0019   	call	init			; Initialization code
040050 CD 0A 84 04 0020   	call 	main			; Call the main function
040054             0021   ; ###############################################
040054             0022   
040054             0023   exit:
040054 FD E1       0024       pop iy
040056 DD E1       0025       pop ix
040058 D1          0026       pop de
040059 C1          0027       pop bc
04005A F1          0028       pop af
04005B 21 00 00 00 0029       ld hl,0
04005F C9          0030       ret
040060             0031   
040060             0032   ; API includes
040060             0033       include "mos_api.inc"
040060             0001*  ;
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ; Created:	03/08/2022
040060             0005*  ; Last Updated:	11/11/2023
040060             0006*  ;
040060             0007*  ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040060             0030*  ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040060             0031*  ;
040060             0032*  ; VDP control (VDU 23, 0, n)
040060             0033*  ;
040060             0034*  vdp_gp:			EQU 	80h
040060             0035*  vdp_keycode:		EQU 	81h
040060             0036*  vdp_cursor:		EQU	82h
040060             0037*  vdp_scrchar:		EQU	83h
040060             0038*  vdp_scrpixel:		EQU	84h
040060             0039*  vdp_audio:		EQU	85h
040060             0040*  vdp_mode:		EQU	86h
040060             0041*  vdp_rtc:		EQU	87h
040060             0042*  vdp_keystate:		EQU	88h
040060             0043*  vdp_logicalcoords:	EQU	C0h
040060             0044*  vdp_terminalmode:	EQU	FFh
040060             0045*  
040060             0046*  ; MOS high level functions
040060             0047*  ;
040060             0048*  mos_getkey:		EQU	00h
040060             0049*  mos_load:		EQU	01h
040060             0050*  mos_save:		EQU	02h
040060             0051*  mos_cd:			EQU	03h
040060             0052*  mos_dir:		EQU	04h
040060             0053*  mos_del:		EQU	05h
040060             0054*  mos_ren:		EQU	06h
040060             0055*  mos_mkdir:		EQU	07h
040060             0056*  mos_sysvars:		EQU	08h
040060             0057*  mos_editline:		EQU	09h
040060             0058*  mos_fopen:		EQU	0Ah
040060             0059*  mos_fclose:		EQU	0Bh
040060             0060*  mos_fgetc:		EQU	0Ch
040060             0061*  mos_fputc:		EQU	0Dh
040060             0062*  mos_feof:		EQU	0Eh
040060             0063*  mos_getError:		EQU	0Fh
040060             0064*  mos_oscli:		EQU	10h
040060             0065*  mos_copy:		EQU	11h
040060             0066*  mos_getrtc:		EQU	12h
040060             0067*  mos_setrtc:		EQU	13h
040060             0068*  mos_setintvector:	EQU	14h
040060             0069*  mos_uopen:		EQU	15h
040060             0070*  mos_uclose:		EQU	16h
040060             0071*  mos_ugetc:		EQU	17h
040060             0072*  mos_uputc:		EQU 	18h
040060             0073*  mos_getfil:		EQU	19h
040060             0074*  mos_fread:		EQU	1Ah
040060             0075*  mos_fwrite:		EQU	1Bh
040060             0076*  mos_flseek:		EQU	1Ch
040060             0077*  mos_setkbvector:	EQU	1Dh
040060             0078*  mos_getkbmap:		EQU	1Eh
040060             0079*  mos_i2c_open:		EQU	1Fh
040060             0080*  mos_i2c_close:		EQU	20h
040060             0081*  mos_i2c_write:		EQU	21h
040060             0082*  mos_i2c_read:		EQU	22h
040060             0083*  
040060             0084*  
040060             0085*  ; FatFS file access functions
040060             0086*  ;
040060             0087*  ffs_fopen:		EQU	80h
040060             0088*  ffs_fclose:		EQU	81h
040060             0089*  ffs_fread:		EQU	82h
040060             0090*  ffs_fwrite:		EQU	83h
040060             0091*  ffs_flseek:		EQU	84h
040060             0092*  ffs_ftruncate:		EQU	85h
040060             0093*  ffs_fsync:		EQU	86h
040060             0094*  ffs_fforward:		EQU	87h
040060             0095*  ffs_fexpand:		EQU	88h
040060             0096*  ffs_fgets:		EQU	89h
040060             0097*  ffs_fputc:		EQU	8Ah
040060             0098*  ffs_fputs:		EQU	8Bh
040060             0099*  ffs_fprintf:		EQU	8Ch
040060             0100*  ffs_ftell:		EQU	8Dh
040060             0101*  ffs_feof:		EQU	8Eh
040060             0102*  ffs_fsize:		EQU	8Fh
040060             0103*  ffs_ferror:		EQU	90h
040060             0104*  
040060             0105*  ; FatFS directory access functions
040060             0106*  ;
040060             0107*  ffs_dopen:		EQU	91h
040060             0108*  ffs_dclose:		EQU	92h
040060             0109*  ffs_dread:		EQU	93h
040060             0110*  ffs_dfindfirst:		EQU	94h
040060             0111*  ffs_dfindnext:		EQU	95h
040060             0112*  
040060             0113*  ; FatFS file and directory management functions
040060             0114*  ;
040060             0115*  ffs_stat:		EQU	96h
040060             0116*  ffs_unlink:		EQU	97h
040060             0117*  ffs_rename:		EQU	98h
040060             0118*  ffs_chmod:		EQU	99h
040060             0119*  ffs_utime:		EQU	9Ah
040060             0120*  ffs_mkdir:		EQU	9Bh
040060             0121*  ffs_chdir:		EQU	9Ch
040060             0122*  ffs_chdrive:		EQU	9Dh
040060             0123*  ffs_getcwd:		EQU	9Eh
040060             0124*  
040060             0125*  ; FatFS volume management and system configuration functions
040060             0126*  ;
040060             0127*  ffs_mount:		EQU	9Fh
040060             0128*  ffs_mkfs:		EQU	A0h
040060             0129*  ffs_fdisk:		EQU	A1h
040060             0130*  ffs_getfree:		EQU	A2h
040060             0131*  ffs_getlabel:		EQU	A3h
040060             0132*  ffs_setlabel:		EQU	A4h
040060             0133*  ffs_setcp:		EQU	A5h
040060             0134*  
040060             0135*  ; File access modes
040060             0136*  ;
040060             0137*  fa_read:		EQU	01h
040060             0138*  fa_write:		EQU	02h
040060             0139*  fa_open_existing:	EQU	00h
040060             0140*  fa_create_new:		EQU	04h
040060             0141*  fa_create_always:	EQU	08h
040060             0142*  fa_open_always:		EQU	10h
040060             0143*  fa_open_append:		EQU	30h
040060             0144*  
040060             0145*  ; System variable indexes for api_sysvars
040060             0146*  ; Index into _sysvars in globals.asm
040060             0147*  ;
040060             0148*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0149*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0150*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0151*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040060             0152*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040060             0153*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040060             0154*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040060             0155*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0156*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0157*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0158*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040060             0159*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040060             0160*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040060             0161*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040060             0162*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040060             0163*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0164*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040060             0165*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0166*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040060             0167*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040060             0168*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040060             0169*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040060             0170*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040060             0171*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040060             0172*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040060             0173*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0174*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040060             0175*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040060             0176*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040060             0177*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040060             0178*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040060             0179*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040060             0180*  ;
040060             0181*  ; Flags for the VPD protocol
040060             0182*  ;
040060             0183*  vdp_pflag_cursor:	EQU	00000001b
040060             0184*  vdp_pflag_scrchar:	EQU	00000010b
040060             0185*  vdp_pflag_point:	EQU	00000100b
040060             0186*  vdp_pflag_audio:	EQU	00001000b
040060             0187*  vdp_pflag_mode:		EQU	00010000b
040060             0188*  vdp_pflag_rtc:		EQU	00100000b
040060             0189*  vdp_pflag_mouse:	EQU	01000000b
040060             0190*  ; vdp_pflag_buffered:	EQU	10000000b
040060             0191*  
040060             0192*  
040060             0193*  ; FatFS structures
040060             0194*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0195*  ;
040060             0196*  ; Object ID and allocation information (FFOBJID)
040060             0197*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040060             0198*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040060             0199*  FFOBJID.attr:     EQU 5    ; Object attribute
040060             0200*  FFOBJID.stat:     EQU 6    ; Object chain status
040060             0201*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040060             0202*  FFOBJID.objsize:  EQU 11   ; Object size
040060             0203*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040060             0204*  ;
040060             0205*  ; File object structure (FIL)
040060             0206*  ;
040060             0207*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040060             0208*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040060             0209*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040060             0210*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040060             0211*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040060             0212*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040060             0213*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040060             0214*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040060             0215*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040060             0216*  ;
040060             0217*  ; Directory object structure (DIR)
040060             0218*  ;
040060             0219*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040060             0220*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040060             0221*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040060             0222*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040060             0223*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040060             0224*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040060             0225*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040060             0226*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040060             0227*  ;
040060             0228*  ; File information structure (FILINFO)
040060             0229*  ;
040060             0230*  FILINFO.fsize:    EQU 0    ; File size
040060             0231*  FILINFO.fdate:    EQU 4    ; Modified date
040060             0232*  FILINFO.ftime:    EQU 6    ; Modified time
040060             0233*  FILINFO.fattrib:  EQU 8    ; File attribute
040060             0234*  FILINFO.altname:  EQU 9    ; Alternative file name
040060             0235*  FILINFO.fname:    EQU 22   ; Primary file name
040060             0236*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040060             0237*  ;
040060             0238*  ; Macro for calling the API
040060             0239*  ; Parameters:
040060             0240*  ; - function: One of the function numbers listed above
040060             0241*  ;
040060             0242*  			MACRO MOSCALL	function
040060             0243*  			LD	A, function
040060             0244*  			RST.LIS	08h
040060             0245*  			ENDMACRO
040060             0034   	include "macros.inc" ; DEBUG
040060             0001*  
040060             0002*  ; https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
040060             0003*  ; Macro for loading bitmaps to VDP buffers
040060             0004*  	macro LOADBMP n,width,height,file
040060             0005*  	db 23,27,0  ; VDU 23, 27, 0 select bitmap
040060             0006*  	db n      ; specify target bitmap number (8-bits)
040060             0007*  	db 23,27,1  ; load bitmap data
040060             0008*      dw width    ; in pixels
040060             0009*      dw height   ; in pixels
040060             0010*  	incbin file ; path to file containing binary bitmap data
040060             0011*  	endmacro
040060             0012*  
040060             0013*  ; https://discord.com/channels/1158535358624039014/1158536809916149831/1208492884861653145
040060             0014*  	; load an rgba2222 bitmap to a 16-bit bufferId
040060             0015*  	macro LOADBMPBUFFER2 bufferId,width,height,file
040060             0016*  
040060             0017*      ; Clear buffer
040060             0018*      db 23,0,0xA0
040060             0019*      dw bufferId
040060             0020*      db 2
040060             0021*  
040060             0022*      db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
040060             0023*      dw bufferId
040060             0024*  
040060             0025*      ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040060             0026*      db 23,0,0xA0
040060             0027*      dw bufferId
040060             0028*      db 0
040060             0029*  	dw width * height ; length of data in bytes
040060             0030*      incbin file ; bitmap data
040060             0031*  
040060             0032*      ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
040060             0033*      db 23,27,0x21
040060             0034*      dw width ; in pixels
040060             0035*      dw height ; in pixels
040060             0036*      db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
040060             0037*      endmacro
040060             0038*  
040060             0039*  	; load an rgba8888 bitmap to a 16-bit bufferId
040060             0040*  	macro LOADBMPBUFFER8 bufferId,width,height,file
040060             0041*  
040060             0042*      ; Clear buffer
040060             0043*      db 23,0,0xA0
040060             0044*      dw bufferId
040060             0045*      db 2
040060             0046*  
040060             0047*      db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
040060             0048*      dw bufferId
040060             0049*  
040060             0050*      ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040060             0051*      db 23,0,0xA0
040060             0052*      dw bufferId
040060             0053*      db 0
040060             0054*  	dw width * height * 4 ; length of data in bytes
040060             0055*      incbin file ; bitmap data
040060             0056*  
040060             0057*      ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
040060             0058*      db 23,27,0x21
040060             0059*      dw width ; in pixels
040060             0060*      dw height ; in pixels
040060             0061*      db 0 ; bitmap format: 0 = RGBA8888 (4-bytes per pixel)
040060             0062*      endmacro
040060             0035       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*          LD A, char
040060             0004*          RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; test the sign of HL
040060             0008*  ; inputs: HL obviously
040060             0009*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0010*  ; destroys: flags
040060             0011*      MACRO sign_hlu
040060             0012*          add hl,de
040060             0013*          or a
040060             0014*          sbc hl,de
040060             0015*      ENDMACRO
040060             0016*  
040060             0017*  ; Simulated call to subroutine at HL
040060             0018*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0019*  ; outputs: whatever the subroutine does, including HL and BC
040060             0020*  ; destroys: only what the subroutine does, but always BC
040060             0021*      MACRO callHL
040060             0022*          ld bc,$+7     ; Address of first instruction after the jump
040060             0023*          push bc       ; which constitutes the return address
040060             0024*          jp   (hl)     ; Jump to the address in HL
040060             0025*      ENDMACRO
040060             0026*  
040060             0027*  ; Simulated call to subroutine at IX
040060             0028*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0029*  ; outputs: whatever the subroutine does, including IX and BC
040060             0030*  ; destroys: only what the subroutine does, but always BC
040060             0031*      MACRO callIX
040060             0032*          ld bc,$+7     ; Address of first instruction after the jump
040060             0033*          push bc       ; which constitutes the return address
040060             0034*          jp   (ix)     ; Jump to the address in IX
040060             0035*      ENDMACRO
040060             0036*  
040060             0037*  ; Simulated call to soubroutinte at IY
040060             0038*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0039*  ; outputs: whatever the subroutine does, including IY and BC
040060             0040*  ; destroys: only what the subroutine does, but always BC
040060             0041*      MACRO callIY
040060             0042*          ld bc,$+7     ; Address of first instruction after the jump
040060             0043*          push bc       ; which constitutes the return address
040060             0044*          jp   (iy)     ; Jump to the address in IY
040060             0045*      ENDMACRO
040060             0046*  
040060             0047*  ; put the value in HLU into the accumulator
040060             0048*  ; destroys: af
040060             0049*      MACRO HLU_TO_A
040060             0050*          push hl ; 4 cycles
040060             0051*          inc sp ; 1 cycle
040060             0052*          pop af  ; 4 cycles
040060             0053*          dec sp ; 1 cycle
040060             0054*                 ; 10 cycles total
040060             0055*      ENDMACRO
040060             0056*  
040060             0057*  A_TO_HLU:
040060             0058*      ; call is 7 cycles
040060 22 6D 00 04 0059*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0060*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0061*      ld hl,(@scratch) ; 7 cycles
04006C C9          0062*      ret ; 6 cycles
04006D             0063*          ; 25 cycles total
04006D 00 00 00    0064*  @scratch: dl 0
040070             0065*  
040070             0066*      ; TODO: implement this
040070             0067*      ; MACRO A_TO_HLU
040070             0068*      ;     push.s af
040070             0069*      ;     inc sp
040070             0070*      ;     push.s hl
040070             0071*      ;     pop hl
040070             0072*      ;     inc sp
040070             0073*      ;     inc sp
040070             0074*      ; ENDMACRO
040070             0075*  
040070             0076*      MACRO PUSH_ALL
040070             0077*          ex af,af'
040070             0078*          exx
040070             0079*          push af
040070             0080*          push hl
040070             0081*          push bc
040070             0082*          push de
040070             0083*  
040070             0084*          ex af,af'
040070             0085*          exx
040070             0086*          push af
040070             0087*          push hl
040070             0088*          push bc
040070             0089*          push de
040070             0090*          push ix
040070             0091*          push iy
040070             0092*      ENDMACRO
040070             0093*  
040070             0094*      MACRO POP_ALL
040070             0095*          pop iy
040070             0096*          pop ix
040070             0097*          pop de
040070             0098*          pop bc
040070             0099*          pop hl
040070             0100*          pop af
040070             0101*          ex af,af'
040070             0102*          exx
040070             0103*  
040070             0104*          pop de
040070             0105*          pop bc
040070             0106*          pop hl
040070             0107*          pop af
040070             0108*          ex af,af'
040070             0109*          exx
040070             0110*      ENDMACRO
040070             0111*  
040070             0112*  ; Print a zero-terminated string inline with code, e.g.:
040070             0113*  ;
040070             0114*  ;    call printInline
040070             0115*  ;    ASCIZ "Hello, world!\r\n"
040070             0116*  ;
040070             0117*  ; Destroys: HL,AF
040070             0118*  printInline:
040070 E1          0119*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0120*      call printString ; HL advances to end of string
040075 E5          0121*      push hl ; restore the return address = pointer to end of string
040076 C9          0122*      ret
040077             0123*  
040077             0124*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0125*  ; Print a zero-terminated string
040077             0126*  ; HL: Pointer to string
040077             0127*  printString:
040077 C5          0128*  	PUSH	BC
040078 01 00 00 00 0129*  	LD		BC,0
04007C 3E 00       0130*  	LD 	 	A,0
04007E 5B DF       0131*  	RST.LIL 18h
040080 C1          0132*  	POP		BC
040081 C9          0133*  	RET
040082             0134*  ; print a VDU sequence
040082             0135*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0136*  sendVDUsequence:
040082 C5          0137*  	PUSH	BC
040083 01 00 00 00 0138*  	LD		BC, 0
040087 4E          0139*  	LD		C, (HL)
040088 5B DF       0140*  	RST.LIL	18h
04008A C1          0141*  	POP		BC
04008B C9          0142*  	RET
04008C             0143*  ; Print Newline sequence to VDP
04008C             0144*  printNewLine:
04008C F5          0145*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0146*  	LD	A, '\r'
04008F 5B D7       0147*  	RST.LIL 10h
040091 3E 0A       0148*  	LD	A, '\n'
040093 5B D7       0149*  	RST.LIL 10h
040095 F1          0150*      pop af
040096 C9          0151*  	RET
040097             0152*  
040097             0153*  ; Print a 24-bit HEX number
040097             0154*  ; HLU: Number to print
040097             0155*  printHex24:
040097             0156*      HLU_TO_A
040097 E5          0001*M         push hl ; 4 cycles
040098 33          0002*M         inc sp ; 1 cycle
040099 F1          0003*M         pop af  ; 4 cycles
04009A 3B          0004*M         dec sp ; 1 cycle
04009B             0005*M                ; 10 cycles total
04009B CD A5 00 04 0157*  	CALL	printHex8
04009F             0158*  ; Print a 16-bit HEX number
04009F             0159*  ; HL: Number to print
04009F             0160*  printHex16:
04009F 7C          0161*  	LD		A,H
0400A0 CD A5 00 04 0162*  	CALL	printHex8
0400A4 7D          0163*  	LD		A,L
0400A5             0164*  ; Print an 8-bit HEX number
0400A5             0165*  ; A: Number to print
0400A5             0166*  printHex8:
0400A5 4F          0167*  	LD		C,A
0400A6 1F          0168*  	RRA
0400A7 1F          0169*  	RRA
0400A8 1F          0170*  	RRA
0400A9 1F          0171*  	RRA
0400AA CD AF 00 04 0172*  	CALL	@F
0400AE 79          0173*  	LD		A,C
0400AF             0174*  @@:
0400AF E6 0F       0175*  	AND		0Fh
0400B1 C6 90       0176*  	ADD		A,90h
0400B3 27          0177*  	DAA
0400B4 CE 40       0178*  	ADC		A,40h
0400B6 27          0179*  	DAA
0400B7 5B D7       0180*  	RST.LIL	10h
0400B9 C9          0181*  	RET
0400BA             0182*  
0400BA             0183*  printHexA:
0400BA F5          0184*      push af
0400BB C5          0185*      push bc
0400BC CD A5 00 04 0186*      call printHex8
0400C0 3E 20       0187*      ld a,' '
0400C2 5B D7       0188*      rst.lil 10h
0400C4 C1          0189*      pop bc
0400C5 F1          0190*      pop af
0400C6 C9          0191*      ret
0400C7             0192*  
0400C7             0193*  printHexHL:
0400C7 F5          0194*      push af
0400C8 C5          0195*      push bc
0400C9 CD 9F 00 04 0196*      call printHex16
0400CD 3E 20       0197*      ld a,' '
0400CF 5B D7       0198*      rst.lil 10h
0400D1 C1          0199*      pop bc
0400D2 F1          0200*      pop af
0400D3 C9          0201*      ret
0400D4             0202*  
0400D4             0203*  printHexUHL:
0400D4 F5          0204*      push af
0400D5 C5          0205*      push bc
0400D6 CD 97 00 04 0206*      call printHex24
0400DA 3E 20       0207*      ld a,' '
0400DC 5B D7       0208*      rst.lil 10h
0400DE C1          0209*      pop bc
0400DF F1          0210*      pop af
0400E0 C9          0211*      ret
0400E1             0212*  
0400E1             0213*  printHexAUHL:
0400E1 F5          0214*      push af
0400E2 C5          0215*      push bc
0400E3 CD A5 00 04 0216*      call printHex8
0400E7 3E 2E       0217*      ld a,'.'
0400E9 5B D7       0218*      rst.lil 10h
0400EB CD 97 00 04 0219*      call printHex24
0400EF 3E 20       0220*      ld a,' '
0400F1 5B D7       0221*      rst.lil 10h
0400F3 C1          0222*      pop bc
0400F4 F1          0223*      pop af
0400F5 C9          0224*      ret
0400F6             0225*  
0400F6             0226*  printHexABHL:
0400F6             0227*  ; preserve registers
0400F6 C5          0228*      push bc ; b will be ok c will not
0400F7 F5          0229*      push af ; will get totally destroyed
0400F8             0230*  ; print a
0400F8 CD A5 00 04 0231*      call printHex8
0400FC             0232*  ; print b
0400FC 78          0233*      ld a,b
0400FD CD A5 00 04 0234*      call printHex8
040101             0235*  ; print hl
040101 CD 9F 00 04 0236*      call printHex16
040105             0237*  ; restore registers
040105 F1          0238*      pop af
040106 C1          0239*      pop bc
040107 C9          0240*      ret
040108             0241*  
040108             0242*  printHexBHL:
040108             0243*  ; preserve registers
040108 C5          0244*      push bc ; b will be ok c will not
040109 F5          0245*      push af ; will get totally destroyed
04010A             0246*  ; print b
04010A 78          0247*      ld a,b
04010B CD A5 00 04 0248*      call printHex8
04010F             0249*  ; print hl
04010F CD 9F 00 04 0250*      call printHex16
040113             0251*  ; restore registers
040113 F1          0252*      pop af
040114 C1          0253*      pop bc
040115 C9          0254*      ret
040116             0255*  
040116             0256*  printHexCDE:
040116             0257*  ; preserve registers
040116 C5          0258*      push bc ; b will be ok c will not
040117 F5          0259*      push af ; will get totally destroyed
040118             0260*  ; print c
040118 79          0261*      ld a,c
040119 CD A5 00 04 0262*      call printHex8
04011D             0263*  ; print de
04011D EB          0264*      ex de,hl
04011E CD 9F 00 04 0265*      call printHex16
040122 EB          0266*      ex de,hl
040123             0267*  ; restore registers
040123 F1          0268*      pop af
040124 C1          0269*      pop bc
040125 C9          0270*      ret
040126             0271*  
040126             0272*  printHexUIX:
040126             0273*  ; store everything in scratch
040126 22 9F 05 04 0274*      ld (uhl),hl
04012A ED 43 A2 05 0275*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0276*      ld (ude),de
       04          
040134 DD 22 A8 05 0277*      ld (uix),ix
       04          
040139 FD 22 AB 05 0278*      ld (uiy),iy
       04          
04013E F5          0279*      push af ; fml
04013F             0280*  
04013F 21 36 05 04 0281*      ld hl,str_ixu
040143 CD 77 00 04 0282*      call printString
040147 2A A8 05 04 0283*      ld hl,(uix)
04014B CD 97 00 04 0284*      call printHex24
04014F CD 8C 00 04 0285*      call printNewLine
040153             0286*  
040153             0287*  ; restore everything
040153 2A 9F 05 04 0288*      ld hl, (uhl)
040157 ED 4B A2 05 0289*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0290*      ld de, (ude)
       04          
040161 DD 2A A8 05 0291*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0292*      ld iy, (uiy)
       04          
04016B F1          0293*      pop af
04016C             0294*  ; all done
04016C C9          0295*      ret
04016D             0296*  
04016D             0297*  ; Print a 0x HEX prefix
04016D             0298*  DisplayHexPrefix:
04016D 3E 30       0299*  	LD	A, '0'
04016F 5B D7       0300*  	RST.LIL 10h
040171 3E 78       0301*  	LD	A, 'x'
040173 5B D7       0302*  	RST.LIL 10h
040175 C9          0303*  	RET
040176             0304*  
040176             0305*      MACRO printDecBC
040176             0306*          push hl
040176             0307*          push bc
040176             0308*          pop hl
040176             0309*          call printDec
040176             0310*          pop hl
040176             0311*      ENDMACRO
040176             0312*  
040176             0313*      MACRO printDecDE
040176             0314*          push hl
040176             0315*          push de
040176             0316*          pop hl
040176             0317*          call printDec
040176             0318*          pop hl
040176             0319*      ENDMACRO
040176             0320*  
040176             0321*      MACRO printDecHL
040176             0322*          call printDec
040176             0323*      ENDMACRO
040176             0324*  
040176             0325*      MACRO printDecIX
040176             0326*          push hl
040176             0327*          push ix
040176             0328*          pop hl
040176             0329*          call printDec
040176             0330*          pop hl
040176             0331*      ENDMACRO
040176             0332*  
040176             0333*      MACRO printDecIY
040176             0334*          push hl
040176             0335*          push iy
040176             0336*          pop hl
040176             0337*          call printDec
040176             0338*          pop hl
040176             0339*      ENDMACRO
040176             0340*  
040176             0341*  
040176             0342*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0343*  ; HL : Value to print
040176             0344*  ; preserves all registers and flags
040176             0345*  printDec:
040176             0346*  ; BEGIN MY CODE
040176             0347*  ; back up all the things
040176 F5          0348*      push af
040177 C5          0349*      push bc
040178 D5          0350*      push de
040179 E5          0351*      push hl
04017A             0352*  ; END MY CODE
04017A 11 A2 01 04 0353*  	LD	 DE, _printDecBuffer
04017E CD B2 01 04 0354*  	CALL u24_to_ascii
040182             0355*  ; BEGIN MY CODE
040182             0356*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0357*      LD	 HL, _printDecBuffer
040186 06 07       0358*      ld   B, 7 ; if HL was 0, we want to keep the final zero
040188             0359*  @loop:
040188 7E          0360*      LD	 A, (HL)
040189 FE 30       0361*      CP	 '0'
04018B C2 95 01 04 0362*      JP	 NZ, @done
04018F 3E 20       0363*      LD   A, ' '
040191 77          0364*      LD	 (HL), A
040192 23          0365*      INC	 HL
040193             0366*      ; CALL vdu_cursor_forward
040193 10 F3       0367*      DJNZ @loop
040195             0368*  @done:
040195             0369*  ; END MY CODE
040195 21 A2 01 04 0370*  	LD	 HL, _printDecBuffer
040199 CD 77 00 04 0371*  	CALL printString
04019D             0372*  ; BEGIN MY CODE
04019D             0373*  ; restore all the things
04019D E1          0374*      pop hl
04019E D1          0375*      pop de
04019F C1          0376*      pop bc
0401A0 F1          0377*      pop af
0401A1             0378*  ; END MY CODE
0401A1 C9          0379*  	RET
0401A2 00 00 00 00 0380*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0381*  
0401B2             0382*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0383*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0384*  ; so it will allways be 8 characters length
0401B2             0385*  ; HL : Value to convert to string
0401B2             0386*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0387*  u24_to_ascii:
0401B2 01 80 69 67 0388*  	LD	 BC,-10000000
0401B6 CD E9 01 04 0389*  	CALL @one_digit
0401BA 01 C0 BD F0 0390*  	LD	 BC,-1000000
0401BE CD E9 01 04 0391*  	CALL @one_digit
0401C2 01 60 79 FE 0392*  	LD	 BC,-100000
0401C6 CD E9 01 04 0393*  	CALL @one_digit
0401CA 01 F0 D8 FF 0394*  	LD   BC,-10000
0401CE CD E9 01 04 0395*  	CALL @one_digit
0401D2 01 18 FC FF 0396*  	LD   BC,-1000
0401D6 CD E9 01 04 0397*  	CALL @one_digit
0401DA 01 9C FF FF 0398*  	LD   BC,-100
0401DE CD E9 01 04 0399*  	CALL @one_digit
0401E2 0E F6       0400*  	LD   C,-10
0401E4 CD E9 01 04 0401*  	CALL @one_digit
0401E8 48          0402*  	LD   C,B
0401E9             0403*  @one_digit:
0401E9 3E 2F       0404*  	LD   A,'0'-1
0401EB             0405*  @divide_me:
0401EB 3C          0406*  	INC  A
0401EC 09          0407*  	ADD  HL,BC
0401ED 38 FC       0408*  	JR   C,@divide_me
0401EF ED 42       0409*  	SBC  HL,BC
0401F1 12          0410*  	LD   (DE),A
0401F2 13          0411*  	INC  DE
0401F3 C9          0412*  	RET
0401F4             0413*  
0401F4             0414*  print_u24:
0401F4 D5          0415*      push de
0401F5 E5          0416*      push hl
0401F6 11 A2 01 04 0417*      ld de,_printDecBuffer
0401FA CD B2 01 04 0418*      call u24_to_ascii
0401FE 21 A2 01 04 0419*      ld hl,_printDecBuffer
040202 CD 77 00 04 0420*      call printString
040206 3E 20       0421*      ld a,' '
040208 5B D7       0422*      rst.lil 10h
04020A E1          0423*      pop hl
04020B D1          0424*      pop de
04020C C9          0425*      ret
04020D             0426*  
04020D             0427*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0428*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0429*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0430*  u168_to_ascii:
04020D             0431*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0432*      ld a,' '
04020F 12          0433*      ld (de),a
040210 13          0434*      inc de
040211             0435*  ; Convert integer part
040211 E5          0436*      push hl               ; Save HL (we’ll need the fractional part later)
040212 CD 99 10 04 0437*      call hlu_udiv256    ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0438*      ld   bc, -10000
04021A CD 3D 02 04 0439*      call @one_int
04021E 01 18 FC FF 0440*      ld   bc, -1000
040222 CD 3D 02 04 0441*      call @one_int
040226 01 9C FF FF 0442*      ld   bc, -100
04022A CD 3D 02 04 0443*      call @one_int
04022E 0E F6       0444*      ld   c, -10
040230 CD 3D 02 04 0445*      call @one_int
040234 48          0446*      ld   c, b
040235 CD 3D 02 04 0447*      call @one_int
040239 C3 48 02 04 0448*      jp   @frac            ; Jump to fractional part conversion
04023D             0449*  @one_int:
04023D 3E 2F       0450*      ld   a, '0' - 1       ; Start ASCII character at '0'
04023F             0451*  @divide_me:
04023F 3C          0452*      inc  a
040240 09          0453*      add  hl, bc           ; Accumulate until overflow
040241 38 FC       0454*      jr   c, @divide_me
040243 ED 42       0455*      sbc  hl, bc           ; Remove excess after overflow
040245 12          0456*      ld   (de), a          ; Store ASCII digit
040246 13          0457*      inc  de
040247 C9          0458*      ret
040248             0459*  ; Convert fractional part
040248             0460*  @frac:
040248 3E 2E       0461*      ld   a, '.'           ; Decimal point
04024A 12          0462*      ld   (de), a
04024B 13          0463*      inc  de
04024C E1          0464*      pop  hl               ; Restore HL with original fraction
04024D 06 03       0465*      ld   b, 3             ; Loop counter for 3 fractional digits
04024F             0466*  @frac_loop:
04024F 26 0A       0467*      ld   h, 10            ; Load multiplier for fractional part
040251 ED 6C       0468*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0469*      ld   a, '0'
040255 84          0470*      add  a, h             ; Convert integer part to ASCII
040256 12          0471*      ld   (de), a
040257 13          0472*      inc  de
040258 10 F5       0473*      djnz @frac_loop       ; Repeat for each fractional digit
04025A             0474*  ; Add null terminator
04025A AF          0475*      xor  a                ; Null terminator
04025B 12          0476*      ld   (de), a
04025C C9          0477*      ret
04025D             0478*  
04025D             0479*  print_u168:
04025D D5          0480*      push de
04025E E5          0481*      push hl
04025F 11 A2 01 04 0482*      ld de,_printDecBuffer
040263 CD 0D 02 04 0483*      call u168_to_ascii
040267 21 A2 01 04 0484*      ld hl,_printDecBuffer
04026B CD 77 00 04 0485*      call printString
04026F E1          0486*      pop hl
040270 D1          0487*      pop de
040271 C9          0488*      ret
040272             0489*  
040272             0490*  ; signed version of u168_to_ascii
040272             0491*  s168_to_ascii:
040272 D5          0492*      push de ; save starting address of buffer
040273 CD 32 10 04 0493*      call hlu_abs
040277 F5          0494*      push af ; save sign flag
040278 CD 0D 02 04 0495*      call u168_to_ascii
04027C F1          0496*      pop af ; restore sign flag
04027D D1          0497*      pop de ; restore starting address of buffer
04027E F0          0498*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0499*      ld a,'-'
040281 12          0500*      ld (de),a
040282 C9          0501*      ret
040283             0502*  
040283             0503*  print_s168:
040283 D5          0504*      push de
040284 E5          0505*      push hl
040285 11 A2 01 04 0506*      ld de,_printDecBuffer
040289 CD 72 02 04 0507*      call s168_to_ascii
04028D 21 A2 01 04 0508*      ld hl,_printDecBuffer
040291 CD 77 00 04 0509*      call printString
040295 E1          0510*      pop hl
040296 D1          0511*      pop de
040297 C9          0512*      ret
040298             0513*  
040298             0514*  print_s168_hl:
040298 F5          0515*      push af
040299 E5          0516*      push hl
04029A CD 83 02 04 0517*      call print_s168
04029E 3E 20       0518*      ld a,' '
0402A0 5B D7       0519*      rst.lil 10h
0402A2 E1          0520*      pop hl
0402A3 F1          0521*      pop af
0402A4 C9          0522*      ret
0402A5             0523*  
0402A5             0524*  print_s168_bc:
0402A5 F5          0525*      push af
0402A6 C5          0526*      push bc
0402A7 E5          0527*      push hl
0402A8 C5          0528*      push bc
0402A9 E1          0529*      pop hl
0402AA CD 83 02 04 0530*      call print_s168
0402AE 3E 20       0531*      ld a,' '
0402B0 5B D7       0532*      rst.lil 10h
0402B2 E1          0533*      pop hl
0402B3 C1          0534*      pop bc
0402B4 F1          0535*      pop af
0402B5 C9          0536*      ret
0402B6             0537*  
0402B6             0538*  print_s168_de:
0402B6 F5          0539*      push af
0402B7 D5          0540*      push de
0402B8 E5          0541*      push hl
0402B9 EB          0542*      ex de,hl
0402BA CD 83 02 04 0543*      call print_s168
0402BE 3E 20       0544*      ld a,' '
0402C0 5B D7       0545*      rst.lil 10h
0402C2 E1          0546*      pop hl
0402C3 D1          0547*      pop de
0402C4 F1          0548*      pop af
0402C5 C9          0549*      ret
0402C6             0550*  
0402C6             0551*  print_s168_hl_bc_de:
0402C6 F5          0552*      push af
0402C7 C5          0553*      push bc
0402C8 D5          0554*      push de
0402C9 E5          0555*      push hl
0402CA CD 83 02 04 0556*      call print_s168
0402CE 3E 20       0557*      ld a,' '
0402D0 5B D7       0558*      rst.lil 10h
0402D2 C5          0559*      push bc
0402D3 E1          0560*      pop hl
0402D4 CD 83 02 04 0561*      call print_s168
0402D8 3E 20       0562*      ld a,' '
0402DA 5B D7       0563*      rst.lil 10h
0402DC EB          0564*      ex de,hl
0402DD CD 83 02 04 0565*      call print_s168
0402E1 3E 20       0566*      ld a,' '
0402E3 5B D7       0567*      rst.lil 10h
0402E5 E1          0568*      pop hl
0402E6 D1          0569*      pop de
0402E7 C1          0570*      pop bc
0402E8 F1          0571*      pop af
0402E9 C9          0572*      ret
0402EA             0573*  
0402EA             0574*  print_s168_bc_de:
0402EA F5          0575*      push af
0402EB C5          0576*      push bc
0402EC D5          0577*      push de
0402ED C5          0578*      push bc
0402EE E1          0579*      pop hl
0402EF CD 83 02 04 0580*      call print_s168
0402F3 3E 20       0581*      ld a,' '
0402F5 5B D7       0582*      rst.lil 10h
0402F7 EB          0583*      ex de,hl
0402F8 CD 83 02 04 0584*      call print_s168
0402FC 3E 20       0585*      ld a,' '
0402FE 5B D7       0586*      rst.lil 10h
040300 E1          0587*      pop hl
040301 D1          0588*      pop de
040302 C1          0589*      pop bc
040303 F1          0590*      pop af
040304 C9          0591*      ret
040305             0592*  
040305             0593*  print_s168_a:
040305 F5          0594*      push af
040306 C5          0595*      push bc
040307 E5          0596*      push hl
040308 21 00 00 00 0597*      ld hl,0
04030C 6F          0598*      ld l,a
04030D CD 98 02 04 0599*      call print_s168_hl
040311 E1          0600*      pop hl
040312 C1          0601*      pop bc
040313 F1          0602*      pop af
040314 C9          0603*      ret
040315             0604*  
040315             0605*  ; #### new functions added by Brandon R. Gates ####
040315             0606*  
040315             0607*  ; print the binary representation of the 8-bit value in a
040315             0608*  ; destroys a, hl, bc
040315             0609*  printBin8:
040315 06 08       0610*      ld b,8      ; loop counter for 8 bits
040317 21 32 03 04 0611*      ld hl,@cmd  ; set hl to the low byte of the output string
04031B             0612*                  ; (which will be the high bit of the value in a)
04031B             0613*  @loop:
04031B 07          0614*      rlca ; put the next highest bit into carry
04031C 38 04       0615*      jr c,@one
04031E 36 30       0616*      ld (hl),'0'
040320 18 02       0617*      jr @next_bit
040322             0618*  @one:
040322 36 31       0619*      ld (hl),'1'
040324             0620*  @next_bit:
040324 23          0621*      inc hl
040325 10 F4       0622*      djnz @loop
040327             0623*  ; print it
040327 21 32 03 04 0624*  	ld hl,@cmd
04032B 01 08 00 00 0625*  	ld bc,@end-@cmd
04032F 5B DF       0626*  	rst.lil $18
040331 C9          0627*  	ret
040332             0628*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0629*  @end:
04033A             0630*  
04033A             0631*  ; print the binary representation of the 8-bit value in a
04033A             0632*  ; in reverse order (lsb first)
04033A             0633*  ; destroys a, hl, bc
04033A             0634*  printBin8Rev:
04033A 06 08       0635*      ld b,8      ; loop counter for 8 bits
04033C 21 57 03 04 0636*      ld hl,@cmd  ; set hl to the low byte of the output string
040340             0637*                  ; (which will be the high bit of the value in a)
040340             0638*  @loop:
040340 0F          0639*      rrca ; put the next lowest bit into carry
040341 38 04       0640*      jr c,@one
040343 36 30       0641*      ld (hl),'0'
040345 18 02       0642*      jr @next_bit
040347             0643*  @one:
040347 36 31       0644*      ld (hl),'1'
040349             0645*  @next_bit:
040349 23          0646*      inc hl
04034A 10 F4       0647*      djnz @loop
04034C             0648*  ; print it
04034C 21 57 03 04 0649*  	ld hl,@cmd
040350 01 08 00 00 0650*  	ld bc,@end-@cmd
040354 5B DF       0651*  	rst.lil $18
040356 C9          0652*  	ret
040357             0653*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0654*  @end:
04035F             0655*  
04035F             0656*  ; print registers to screen in hexidecimal format
04035F             0657*  ; inputs: none
04035F             0658*  ; outputs: values of every register printed to screen
04035F             0659*  ;    values of each register in global scratch memory
04035F             0660*  ; destroys: nothing
04035F             0661*  stepRegistersHex:
04035F             0662*  ; store everything in scratch
04035F 22 9F 05 04 0663*      ld (uhl),hl
040363 ED 43 A2 05 0664*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0665*      ld (ude),de
       04          
04036D DD 22 A8 05 0666*      ld (uix),ix
       04          
040372 FD 22 AB 05 0667*      ld (uiy),iy
       04          
040377 F5          0668*      push af ; fml
040378 E1          0669*      pop hl  ; thanks, zilog
040379 22 9C 05 04 0670*      ld (uaf),hl
04037D F5          0671*      push af ; dammit
04037E             0672*  
04037E             0673*  ; home the cursor
04037E             0674*      ; call vdu_home_cursor
04037E             0675*  
04037E             0676*  ; print each register
04037E 21 22 05 04 0677*      ld hl,str_afu
040382 CD 77 00 04 0678*      call printString
040386 2A 9C 05 04 0679*      ld hl,(uaf)
04038A CD 97 00 04 0680*      call printHex24
04038E CD 8C 00 04 0681*      call printNewLine
040392             0682*  
040392 21 27 05 04 0683*      ld hl,str_hlu
040396 CD 77 00 04 0684*      call printString
04039A 2A 9F 05 04 0685*      ld hl,(uhl)
04039E CD 97 00 04 0686*      call printHex24
0403A2 CD 8C 00 04 0687*      call printNewLine
0403A6             0688*  
0403A6 21 2C 05 04 0689*      ld hl,str_bcu
0403AA CD 77 00 04 0690*      call printString
0403AE 2A A2 05 04 0691*      ld hl,(ubc)
0403B2 CD 97 00 04 0692*      call printHex24
0403B6 CD 8C 00 04 0693*      call printNewLine
0403BA             0694*  
0403BA 21 31 05 04 0695*      ld hl,str_deu
0403BE CD 77 00 04 0696*      call printString
0403C2 2A A5 05 04 0697*      ld hl,(ude)
0403C6 CD 97 00 04 0698*      call printHex24
0403CA CD 8C 00 04 0699*      call printNewLine
0403CE             0700*  
0403CE 21 36 05 04 0701*      ld hl,str_ixu
0403D2 CD 77 00 04 0702*      call printString
0403D6 2A A8 05 04 0703*      ld hl,(uix)
0403DA CD 97 00 04 0704*      call printHex24
0403DE CD 8C 00 04 0705*      call printNewLine
0403E2             0706*  
0403E2 21 3B 05 04 0707*      ld hl,str_iyu
0403E6 CD 77 00 04 0708*      call printString
0403EA 2A AB 05 04 0709*      ld hl,(uiy)
0403EE CD 97 00 04 0710*      call printHex24
0403F2 CD 8C 00 04 0711*      call printNewLine
0403F6             0712*  
0403F6             0713*      ; call vsync
0403F6             0714*  
0403F6 CD 8C 00 04 0715*      call printNewLine
0403FA             0716*  
0403FA             0717*  ; check for right shift key and quit if pressed
0403FA             0718*  	MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 49 CF       0002*M 			RST.LIS	08h
0403FE             0719*  @stayhere:
0403FE             0720*  ; 7 RightShift
0403FE DD CB 00 76 0721*      bit 6,(ix+0)
040402 20 02       0722*      jr nz,@RightShift
040404 18 F8       0723*      jr @stayhere
040406             0724*  @RightShift:
040406 DD CB 0E 86 0725*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0726*      ld a,%10000000
04040C             0727*      ; call multiPurposeDelay
04040C             0728*  
04040C             0729*  ; restore everything
04040C 2A 9F 05 04 0730*      ld hl, (uhl)
040410 ED 4B A2 05 0731*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0732*      ld de, (ude)
       04          
04041A DD 2A A8 05 0733*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0734*      ld iy, (uiy)
       04          
040424 F1          0735*      pop af
040425             0736*  ; all done
040425 C9          0737*      ret
040426             0738*  
040426             0739*  ; print registers to screen in hexidecimal format
040426             0740*  ; inputs: none
040426             0741*  ; outputs: values of every register printed to screen
040426             0742*  ;    values of each register in global scratch memory
040426             0743*  ; destroys: nothing
040426             0744*  dumpRegistersHex:
040426             0745*  ; store everything in scratch
040426 22 9F 05 04 0746*      ld (uhl),hl
04042A ED 43 A2 05 0747*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0748*      ld (ude),de
       04          
040434 DD 22 A8 05 0749*      ld (uix),ix
       04          
040439 FD 22 AB 05 0750*      ld (uiy),iy
       04          
04043E F5          0751*      push af ; fml
04043F E1          0752*      pop hl  ; thanks, zilog
040440 22 9C 05 04 0753*      ld (uaf),hl
040444 F5          0754*      push af ; dammit
040445             0755*  
040445             0756*  ; home the cursor
040445             0757*      ; call vdu_home_cursor
040445             0758*      ; call printNewLine
040445             0759*  
040445             0760*  ; print each register
040445 21 22 05 04 0761*      ld hl,str_afu
040449 CD 77 00 04 0762*      call printString
04044D 2A 9C 05 04 0763*      ld hl,(uaf)
040451 CD 97 00 04 0764*      call printHex24
040455             0765*      ; call printNewLine
040455             0766*  
040455 21 27 05 04 0767*      ld hl,str_hlu
040459 CD 77 00 04 0768*      call printString
04045D 2A 9F 05 04 0769*      ld hl,(uhl)
040461 CD 97 00 04 0770*      call printHex24
040465             0771*      ; call printNewLine
040465             0772*  
040465 21 2C 05 04 0773*      ld hl,str_bcu
040469 CD 77 00 04 0774*      call printString
04046D 2A A2 05 04 0775*      ld hl,(ubc)
040471 CD 97 00 04 0776*      call printHex24
040475             0777*      ; call printNewLine
040475             0778*  
040475 21 31 05 04 0779*      ld hl,str_deu
040479 CD 77 00 04 0780*      call printString
04047D 2A A5 05 04 0781*      ld hl,(ude)
040481 CD 97 00 04 0782*      call printHex24
040485             0783*      ; call printNewLine
040485             0784*  
040485 21 36 05 04 0785*      ld hl,str_ixu
040489 CD 77 00 04 0786*      call printString
04048D 2A A8 05 04 0787*      ld hl,(uix)
040491 CD 97 00 04 0788*      call printHex24
040495             0789*      ; call printNewLine
040495             0790*  
040495 21 3B 05 04 0791*      ld hl,str_iyu
040499 CD 77 00 04 0792*      call printString
04049D 2A AB 05 04 0793*      ld hl,(uiy)
0404A1 CD 97 00 04 0794*      call printHex24
0404A5             0795*      ; call printNewLine
0404A5             0796*  
0404A5             0797*      ; call vdu_vblank
0404A5             0798*  
0404A5 CD 8C 00 04 0799*      call printNewLine
0404A9             0800*  ; restore everything
0404A9 2A 9F 05 04 0801*      ld hl, (uhl)
0404AD ED 4B A2 05 0802*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0803*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0804*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0805*      ld iy, (uiy)
       04          
0404C1 F1          0806*      pop af
0404C2             0807*  ; all done
0404C2 C9          0808*      ret
0404C3             0809*  
0404C3             0810*  dumpRegistersHexPrime:
0404C3 D9          0811*      exx
0404C4 08          0812*      ex af,af'
0404C5 CD 26 04 04 0813*      call dumpRegistersHex
0404C9 08          0814*      ex af,af'
0404CA D9          0815*      exx
0404CB C9          0816*      ret
0404CC             0817*  
0404CC             0818*  ; additionally dump prime registers
0404CC             0819*  ; inputs: none
0404CC             0820*  ; outputs: values of every register printed to screen
0404CC             0821*  ; destroys: nothing
0404CC             0822*  dumpRegistersHexAll:
0404CC CD 26 04 04 0823*      call dumpRegistersHex
0404D0 08          0824*      ex af,af'
0404D1 D9          0825*      exx
0404D2 CD 26 04 04 0826*      call dumpRegistersHex
0404D6 08          0827*      ex af,af'
0404D7 D9          0828*      exx
0404D8 C9          0829*      ret
0404D9             0830*  
0404D9             0831*  ; print hlu to screen in hexidecimal format
0404D9             0832*  ; inputs: none
0404D9             0833*  ; destroys: nothing
0404D9             0834*  print_hex_hl:
0404D9 F5          0835*      push af
0404DA E5          0836*      push hl
0404DB 21 27 05 04 0837*      ld hl,str_hlu
0404DF CD 77 00 04 0838*      call printString
0404E3 E1          0839*      pop hl
0404E4 E5          0840*      push hl
0404E5 CD 97 00 04 0841*      call printHex24
0404E9 3E 20       0842*      ld a,' '
0404EB 5B D7       0843*      rst.lil 10h
0404ED E1          0844*      pop hl
0404EE F1          0845*      pop af
0404EF C9          0846*      ret
0404F0             0847*  
0404F0             0848*  ; print bcu to screen in hexidecimal format
0404F0             0849*  ; inputs: none
0404F0             0850*  ; destroys: nothing
0404F0             0851*  print_hex_bc:
0404F0 F5          0852*      push af
0404F1 E5          0853*      push hl
0404F2 C5          0854*      push bc
0404F3 21 2C 05 04 0855*      ld hl,str_bcu
0404F7 CD 77 00 04 0856*      call printString
0404FB E1          0857*      pop hl
0404FC E5          0858*      push hl
0404FD CD 97 00 04 0859*      call printHex24
040501 3E 20       0860*      ld a,' '
040503 5B D7       0861*      rst.lil 10h
040505 C1          0862*      pop bc
040506 E1          0863*      pop hl
040507 F1          0864*      pop af
040508 C9          0865*      ret
040509             0866*  
040509             0867*  ; print deu to screen in hexidecimal format
040509             0868*  ; inputs: none
040509             0869*  ; destroys: nothing
040509             0870*  print_hex_de:
040509 F5          0871*      push af
04050A E5          0872*      push hl
04050B D5          0873*      push de
04050C 21 31 05 04 0874*      ld hl,str_deu
040510 CD 77 00 04 0875*      call printString
040514 E1          0876*      pop hl
040515 E5          0877*      push hl
040516 CD 97 00 04 0878*      call printHex24
04051A 3E 20       0879*      ld a,' '
04051C 5B D7       0880*      rst.lil 10h
04051E D1          0881*      pop de
04051F E1          0882*      pop hl
040520 F1          0883*      pop af
040521 C9          0884*      ret
040522             0885*  
040522 20 61 66 3D 0886*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0887*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0888*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0889*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0890*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0891*  str_iyu: db " iy=",0
       00          
040540             0892*  
040540             0893*  ; print udeuhl to screen in hexidecimal format
040540             0894*  ; inputs: none
040540             0895*  ; outputs: concatenated hexidecimal udeuhl
040540             0896*  ; destroys: nothing
040540             0897*  dumpUDEUHLHex:
040540             0898*  ; store everything in scratch
040540 22 9F 05 04 0899*      ld (uhl),hl
040544 ED 43 A2 05 0900*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0901*      ld (ude),de
       04          
04054E DD 22 A8 05 0902*      ld (uix),ix
       04          
040553 FD 22 AB 05 0903*      ld (uiy),iy
       04          
040558 F5          0904*      push af
040559             0905*  
040559             0906*  ; print each register
040559             0907*  
040559 21 93 05 04 0908*      ld hl,str_udeuhl
04055D CD 77 00 04 0909*      call printString
040561 2A A5 05 04 0910*      ld hl,(ude)
040565 CD 97 00 04 0911*      call printHex24
040569 3E 2E       0912*  	ld a,'.'	; print a dot to separate the values
04056B 5B D7       0913*  	rst.lil 10h
04056D 2A 9F 05 04 0914*      ld hl,(uhl)
040571 CD 97 00 04 0915*      call printHex24
040575 CD 8C 00 04 0916*      call printNewLine
040579             0917*  
040579             0918*  ; restore everything
040579 2A 9F 05 04 0919*      ld hl, (uhl)
04057D ED 4B A2 05 0920*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0921*      ld de, (ude)
       04          
040587 DD 2A A8 05 0922*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0923*      ld iy, (uiy)
       04          
040591 F1          0924*      pop af
040592             0925*  ; all done
040592 C9          0926*      ret
040593             0927*  
040593 75 64 65 2E 0928*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0929*  
04059C             0930*  ; global scratch memory for registers
04059C 00 00 00    0931*  uaf: dl 0
04059F 00 00 00    0932*  uhl: dl 0
0405A2 00 00 00    0933*  ubc: dl 0
0405A5 00 00 00    0934*  ude: dl 0
0405A8 00 00 00    0935*  uix: dl 0
0405AB 00 00 00    0936*  uiy: dl 0
0405AE 00 00 00    0937*  usp: dl 0
0405B1 00 00 00    0938*  upc: dl 0
0405B4             0939*  
0405B4             0940*  ; inputs: whatever is in the flags register
0405B4             0941*  ; outputs: binary representation of flags
0405B4             0942*  ;          with a header so we know which is what
0405B4             0943*  ; destroys: nothing
0405B4             0944*  ; preserves: everything
0405B4             0945*  dumpFlags:
0405B4             0946*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0947*      push af ; this is so we can send it back unharmed
0405B5 F5          0948*      push af ; this is so we can pop it to hl
0405B6             0949*  ; store everything in scratch
0405B6 22 9F 05 04 0950*      ld (uhl),hl
0405BA ED 43 A2 05 0951*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0952*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0953*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0954*      ld (uiy),iy
       04          
0405CE             0955*  ; next we print the header
0405CE 21 FA 05 04 0956*      ld hl,@header
0405D2 CD 77 00 04 0957*      call printString
0405D6 E1          0958*      pop hl ; flags are now in l
0405D7 7D          0959*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0960*      call printBin8
0405DC CD 8C 00 04 0961*  	call printNewLine
0405E0             0962*  ; restore everything
0405E0 2A 9F 05 04 0963*      ld hl, (uhl)
0405E4 ED 4B A2 05 0964*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0965*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0966*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0967*      ld iy, (uiy)
       04          
0405F8 F1          0968*      pop af ; send her home the way she came
0405F9 C9          0969*      ret
0405FA             0970*  ; Bit 7 (S): Sign flag
0405FA             0971*  ; Bit 6 (Z): Zero flag
0405FA             0972*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0973*  ; Bit 4 (H): Half Carry flag
0405FA             0974*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0975*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0976*  ; Bit 1 (N): Subtract flag
0405FA             0977*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0978*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0979*  
040605             0980*  ; set all the bits in the flag register
040605             0981*  ; more of an academic exercise than anything useful
040605             0982*  ; inputs; none
040605             0983*  ; outputs; a=0,f=255
040605             0984*  ; destroys: flags, hl
040605             0985*  ; preserves: a, because why not
040605             0986*  setAllFlags:
040605 21 FF 00 00 0987*      ld hl,255
040609 67          0988*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0989*      push hl
04060B F1          0990*      pop af
04060C C9          0991*      ret
04060D             0992*  
04060D             0993*  ; reset all the bits in the flag register
04060D             0994*  ; unlike its inverse counterpart, this may actually be useful
04060D             0995*  ; inputs; none
04060D             0996*  ; outputs; a=0,f=0
04060D             0997*  ; destroys: flags, hl
04060D             0998*  ; preserves: a, because why not
04060D             0999*  resetAllFlags:
04060D 21 00 00 00 1000*      ld hl,0
040611 67          1001*      ld h,a ; four cycles to preserve a is cheap
040612 E5          1002*      push hl
040613 F1          1003*      pop af
040614 C9          1004*      ret
040615             1005*  
040615             1006*  ; wait until user presses a key
040615             1007*  ; inputs: none
040615             1008*  ; outputs: ascii code of key pressed in a
040615             1009*  ; destroys: af,ix
040615             1010*  waitKeypress:
040615             1011*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 49 CF       0002*M 			RST.LIS	08h
040619 C9          1012*      ret
04061A             1013*  
04061A             1014*  ; print bytes from an address to the screen in hexidecimal format
04061A             1015*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1016*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1017*  ; destroys: nothing
04061A             1018*  dumpMemoryHex:
04061A             1019*  ; save registers to the stack
04061A C5          1020*      push bc
04061B E5          1021*      push hl
04061C F5          1022*      push af
04061D             1023*  
04061D             1024*  ; print the address and separator
04061D CD 97 00 04 1025*      call printHex24
040621 3E 3A       1026*      ld a,':'
040623 5B D7       1027*      rst.lil 10h
040625 3E 20       1028*      ld a,' '
040627 5B D7       1029*      rst.lil 10h
040629             1030*  
040629             1031*  ; set b to be our loop counter
040629 F1          1032*      pop af
04062A 47          1033*      ld b,a
04062B E1          1034*      pop hl
04062C E5          1035*      push hl
04062D F5          1036*      push af
04062E             1037*  @loop:
04062E             1038*  ; print the byte
04062E 7E          1039*      ld a,(hl)
04062F CD A5 00 04 1040*      call printHex8
040633             1041*  ; print a space
040633 3E 20       1042*      ld a,' '
040635 5B D7       1043*      rst.lil 10h
040637 23          1044*      inc hl
040638 10 F4       1045*      djnz @loop
04063A CD 8C 00 04 1046*      call printNewLine
04063E             1047*  
04063E             1048*  ; restore everything
04063E F1          1049*      pop af
04063F E1          1050*      pop hl
040640 C1          1051*      pop bc
040641             1052*  
040641             1053*  ; all done
040641 C9          1054*      ret
040642             1055*  
040642             1056*  
040642             1057*  ; print bytes from an address to the screen in binary format
040642             1058*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1059*  ; outputs: values of each byte printed to screen separated by spaces
040642             1060*  ; destroys: nothing
040642             1061*  dumpMemoryBin:
040642             1062*  ; save all registers to the stack
040642 F5          1063*      push af
040643 C5          1064*      push bc
040644 D5          1065*      push de
040645 E5          1066*      push hl
040646 DD E5       1067*      push ix
040648 FD E5       1068*      push iy
04064A             1069*  
04064A             1070*  ; set b to be our loop counter
04064A 47          1071*      ld b,a
04064B             1072*  @loop:
04064B             1073*  ; print the byte
04064B 7E          1074*      ld a,(hl)
04064C E5          1075*      push hl
04064D C5          1076*      push bc
04064E CD 15 03 04 1077*      call printBin8
040652 C1          1078*      pop bc
040653             1079*  ; print a space
040653 3E 20       1080*      ld a,' '
040655 5B D7       1081*      rst.lil 10h
040657 E1          1082*      pop hl
040658 23          1083*      inc hl
040659 10 F0       1084*      djnz @loop
04065B CD 8C 00 04 1085*      call printNewLine
04065F             1086*  
04065F             1087*  ; restore everything
04065F FD E1       1088*      pop iy
040661 DD E1       1089*      pop ix
040663 E1          1090*      pop hl
040664 D1          1091*      pop de
040665 C1          1092*      pop bc
040666 F1          1093*      pop af
040667             1094*  ; all done
040667 C9          1095*      ret
040668             1096*  
040668             1097*  ; print bytes from an address to the screen in binary format
040668             1098*  ; with the bits of each byte in reverse order (lsb first)
040668             1099*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1100*  ; outputs: values of each byte printed to screen separated by spaces
040668             1101*  ; destroys: nothing
040668             1102*  dumpMemoryBinRev:
040668             1103*  ; save all registers to the stack
040668 F5          1104*      push af
040669 C5          1105*      push bc
04066A D5          1106*      push de
04066B E5          1107*      push hl
04066C DD E5       1108*      push ix
04066E FD E5       1109*      push iy
040670             1110*  
040670             1111*  ; set b to be our loop counter
040670 47          1112*      ld b,a
040671             1113*  @loop:
040671             1114*  ; print the byte
040671 7E          1115*      ld a,(hl)
040672 E5          1116*      push hl
040673 C5          1117*      push bc
040674 CD 3A 03 04 1118*      call printBin8Rev
040678 C1          1119*      pop bc
040679             1120*  ; print a space
040679 3E 20       1121*      ld a,' '
04067B 5B D7       1122*      rst.lil 10h
04067D E1          1123*      pop hl
04067E 23          1124*      inc hl
04067F 10 F0       1125*      djnz @loop
040681 CD 8C 00 04 1126*      call printNewLine
040685             1127*  
040685             1128*  ; restore everything
040685 FD E1       1129*      pop iy
040687 DD E1       1130*      pop ix
040689 E1          1131*      pop hl
04068A D1          1132*      pop de
04068B C1          1133*      pop bc
04068C F1          1134*      pop af
04068D             1135*  ; all done
04068D C9          1136*      ret
04068E             0036   	include "files.inc"
04068E             0001*  ; load to onboard 8k sram
04068E             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
04068E             0037   	include "fonts_bmp.inc"
04068E             0001*  ; plots a bitmap character to the screen
04068E             0002*  ; inputs: a; ascii character to plot
04068E             0003*  ;      bc,de = x,y screen coordinates in pixels
04068E             0004*  ;      ix pointed at the font definition lut
04068E             0005*  ; returns: bc as the next x coordinate to plot
04068E             0006*  ;          pretty pixels which hopefully resemble readable text
04068E             0007*  ; destroys: lotsa stuff
04068E             0008*  font_bmp_plot:
04068E             0009*  ; back up bc,de
04068E C5          0010*      push bc
04068F D5          0011*      push de
040690             0012*  ; get the buffer id of the character
040690 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040692 06 06       0014*      ld b,6 ; six bytes per lookup record
040694 4F          0015*      ld c,a
040695 ED 4C       0016*      mlt bc
040697 DD 09       0017*      add ix,bc ; now ix points to the character definition
040699 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04069C CD 85 09 04 0019*      call vdu_buff_select
0406A0             0020*  ; plot the character
0406A0 D1          0021*      pop de
0406A1 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
0406A4 83          0023*      add a,e ; add the y-coordinate
0406A5 5F          0024*      ld e,a
0406A6 3E 00       0025*      ld a,0 ; can't xor it because we need carry
0406A8 8A          0026*      adc a,d
0406A9 57          0027*      ld d,a ; plot_y now correct for the character
0406AA C1          0028*      pop bc ; plot_x
0406AB C5          0029*      push bc ; we want it back after the plot
0406AC CD 6D 0C 04 0030*      call vdu_plot_bmp
0406B0             0031*  ; now set bc to the next x coordinate
0406B0 C1          0032*      pop bc
0406B1 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0406B4 C6 02       0034*      add a,2 ; add a little padding between characters
0406B6 81          0035*      add a,c ; bump the original x-coordinate
0406B7 4F          0036*      ld c,a
0406B8 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0406BA 88          0038*      adc a,b
0406BB 47          0039*      ld b,a ; plot_x now correct for the next character
0406BC C9          0040*      ret
0406BD             0041*  
0406BD             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0406BD             0043*  ; inputs: hl; pointer to the string
0406BD             0044*  ;       bc,de = x,y screen coordinates in pixels
0406BD             0045*  ;       ix pointed at the font definition lut
0406BD             0046*  ; returns: bc as the next x coordinate to plot
0406BD             0047*  ;          de as the next y coordinate to plot
0406BD             0048*  ;          pretty pixels which hopefully resemble readable text
0406BD             0049*  font_bmp_print:
0406BD             0050*  @next_char:
0406BD             0051*  ; fetch the next character in the string
0406BD 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0406BE FE 00       0053*      cp 0 ; is it zero?
0406C0 C8          0054*      ret z ; if so, we're done
0406C1 23          0055*      inc hl ; point to the next character
0406C2 E5          0056*      push hl ; save the pointer
0406C3 D5          0057*      push de ; save our y-coordinate
0406C4 DD E5       0058*      push ix ; save the font lut pointer
0406C6 CD 8E 06 04 0059*      call font_bmp_plot ; plot the character
0406CA DD E1       0060*      pop ix ; restore the font lut pointer
0406CC D1          0061*      pop de ; restore our y-coordinate
0406CD E1          0062*      pop hl ; restore the pointer
0406CE C3 BD 06 04 0063*      jp @next_char ; loop
0406D2             0038       include "timer.inc"
0406D2             0001*  ; Table 32. Timer Control Registers
0406D2             0002*  ; this constant is the base address of the timer control registers
0406D2             0003*  ; each timer takes three bytes:
0406D2             0004*  ;   0: control register
0406D2             0005*  ;   1: low byte of timer reset value
0406D2             0006*  ;   2: high byte of timer reset value
0406D2             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0406D2             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0406D2             0009*  TMR_CTL:     equ 80h
0406D2             0010*  
0406D2             0011*  ; Timer Control Register Bit Definitions
0406D2             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0406D2             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0406D2             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0406D2             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0406D2             0016*                              ; the TMRx_CTL register is read.
0406D2             0017*  
0406D2             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0406D2             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0406D2             0020*  
0406D2             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0406D2             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0406D2             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0406D2             0024*                              ; written to the counter when the end-of-count value is reached.
0406D2             0025*  
0406D2             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0406D2             0027*  CLK_DIV_256:  equ %00001100 ;
0406D2             0028*  CLK_DIV_64:   equ %00001000 ;
0406D2             0029*  CLK_DIV_16:   equ %00000100 ;
0406D2             0030*  CLK_DIV_4:    equ %00000000 ;
0406D2             0031*  
0406D2             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0406D2             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0406D2             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0406D2             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0406D2             0036*                              ; programmer must ensure that this bit is set to 1 each time
0406D2             0037*                              ; SINGLE-PASS mode is used.
0406D2             0038*  
0406D2             0039*  ; disable/enable the programmable reload timer
0406D2             0040*  PRT_EN_0:     equ %00000000 ;
0406D2             0041*  PRT_EN_1:     equ %00000001 ;
0406D2             0042*  
0406D2             0043*  ; Table 37. Timer Input Source Select Register
0406D2             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0406D2             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0406D2             0046*  ;   00: System clock / CLK_DIV
0406D2             0047*  ;   01: RTC / CLK_DIV
0406D2             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0406D2             0049*  ;   10: GPIO port B pin 1.
0406D2             0050*  ;   11: GPIO port B pin 1.
0406D2             0051*  TMR_ISS:   equ 92h ; register address
0406D2             0052*  
0406D2             0053*  ; Table 51. Real-Time Clock Control Register
0406D2             0054*  RTC_CTRL: equ EDh ; register address
0406D2             0055*  
0406D2             0056*  ; alarm interrupt disable/enable
0406D2             0057*  RTC_ALARM_0:    equ %00000000
0406D2             0058*  RTC_ALARM_1:    equ %10000000
0406D2             0059*  
0406D2             0060*  ; interrupt on alarm disable/enable
0406D2             0061*  RTC_INT_ENT_0:  equ %00000000
0406D2             0062*  RTC_INT_ENT_1:  equ %01000000
0406D2             0063*  
0406D2             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0406D2             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0406D2             0066*  
0406D2             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0406D2             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0406D2             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0406D2             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0406D2             0071*  
0406D2             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0406D2             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0406D2             0074*  
0406D2             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0406D2             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0406D2             0077*  
0406D2             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0406D2             0079*                                  ; RTC counter is enabled.
0406D2             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0406D2             0081*                                  ; RTC counter is disabled.
0406D2             0082*  
0406D2             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0406D2             0084*  
0406D2             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0406D2             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0406D2 00 00 00    0087*  prt_reload: dl 0x000000
0406D5             0088*  
0406D5             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0406D5             0090*  ; ;          de = number PRT interrupts during test interval
0406D5             0091*  ; prt_calibrate:
0406D5             0092*  ;     call vdu_vblank
0406D5             0093*  ; ; set a MOS timer
0406D5             0094*  ;     ld hl,120*1 ; 1 second
0406D5             0095*  ;     ld iy,tmr_test
0406D5             0096*  ;     call tmr_set
0406D5             0097*  ; ; set a PRT timer
0406D5             0098*  ;     ; ld hl,prt_reload_hardware
0406D5             0099*  ;     ; ld hl,prt_reload_emulator
0406D5             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0406D5             0101*  ;     ld (prt_reload),hl
0406D5             0102*  ;     call prt_set
0406D5             0103*  ; @loop:
0406D5             0104*  ; ; check time remaining on MOS timer
0406D5             0105*  ;     call tmr_get
0406D5             0106*  ;     jp z,@done ; time expired,so quit
0406D5             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0406D5             0108*  ;     jr @loop
0406D5             0109*  ; @done:
0406D5             0110*  ;     ld de,(prt_irq_counter)
0406D5             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0406D5             0112*  ;     ld (prt_reload),bc
0406D5             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0406D5             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0406D5             0115*  ;     ld (is_emulator),a
0406D5             0116*  ;     sbc hl,de
0406D5             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0406D5             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0406D5             0119*  ;     ret m ; negative result means we're on hardware
0406D5             0120*  ;     inc a ; we're on emulator
0406D5             0121*  ;     ld (is_emulator),a
0406D5             0122*  ;     ld bc,prt_reload_emulator
0406D5             0123*  ;     ld (prt_reload),bc
0406D5             0124*  ;     ld hl,on_emulator
0406D5             0125*  ;     ret
0406D5             0126*  
0406D5             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0406D5             0128*  
0406D5             0129*  ; set PRT timer
0406D5             0130*  prt_set:
0406D5 21 00 00 00 0131*      ld hl,0
0406D9 22 23 07 04 0132*      ld (prt_irq_counter),hl
0406DD 2A D2 06 04 0133*      ld hl,(prt_reload)
0406E1 ED 29 84    0134*      out0 ($84),l
0406E4 ED 21 85    0135*  	out0 ($85),h
0406E7             0136*  ; disable timer
0406E7 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0406E9 ED 39 83    0138*  	out0 ($83),a
0406EC             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0406EC 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0406EE ED 39 83    0141*  	out0 ($83),a
0406F1 C9          0142*      ret
0406F2             0143*  
0406F2             0144*  ; ===============================================
0406F2             0145*  ; PRT Timer Interrupt Handling
0406F2             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0406F2             0147*  ; -----------------------------------------------
0406F2             0148*  prt_irq_init:
0406F2             0149*      ; set up interrupt vector table 2
0406F2 21 00 00 00 0150*  	ld hl,0
0406F6 3A 0C 01 00 0151*  	ld a,($10c)
0406FA 6F          0152*  	ld l,a
0406FB 3A 0D 01 00 0153*  	ld a,($10d)
0406FF 67          0154*  	ld h,a
040700             0155*  
040700             0156*  	; skip over CALL ($c3)
040700 23          0157*  	inc hl
040701             0158*  	; load address of jump into vector table 2 (in ram)
040701 ED 27       0159*  	ld hl,(hl)
040703             0160*  
040703             0161*  	; write CALL prt_irq_handler to vector table 2
040703 3E C3       0162*  	ld a,$c3
040705 77          0163*  	ld (hl),a
040706 23          0164*  	inc hl
040707 11 0E 07 04 0165*  	ld de,prt_irq_handler
04070B ED 1F       0166*  	ld (hl),de
04070D             0167*  
04070D C9          0168*      ret
04070E             0169*  
04070E             0170*  prt_irq_handler:
04070E F3          0171*  	di
04070F F5          0172*  	push af
040710 E5          0173*      push hl
040711 ED 38 83    0174*  	in0 a,($83)
040714 2A 23 07 04 0175*  	ld hl,(prt_irq_counter)
040718 23          0176*  	inc hl
040719 22 23 07 04 0177*  	ld (prt_irq_counter),hl
04071D E1          0178*      pop hl
04071E F1          0179*  	pop af
04071F FB          0180*  	ei
040720 5B ED 4D    0181*  	reti.l
040723             0182*  
040723             0183*  prt_irq_counter:
040723 00 00 00    0184*  	.dl 0
040726             0185*  prt_irq_counter_saved:
040726 00 00 00    0186*      .dl 0
040729             0187*  
040729             0188*  prt_loop_reset:
040729 E5          0189*      push hl
04072A 21 00 00 00 0190*  	ld hl,0
04072E 22 23 07 04 0191*  	ld (prt_irq_counter),hl
040732 22 94 07 04 0192*      ld (prt_loop_counter),hl
040736 22 97 07 04 0193*      ld (prt_loops),hl
04073A CD D5 06 04 0194*      call prt_set
04073E E1          0195*      pop hl
04073F C9          0196*      ret
040740             0197*  
040740             0198*  prt_loop_start:
040740 E5          0199*      push hl
040741 21 00 00 00 0200*  	ld hl,0
040745 22 23 07 04 0201*  	ld (prt_irq_counter),hl
040749 E1          0202*      pop hl
04074A C9          0203*      ret
04074B             0204*  
04074B             0205*  prt_loop_stop:
04074B E5          0206*      push hl
04074C D5          0207*      push de
04074D 2A 23 07 04 0208*      ld hl,(prt_irq_counter)
040751 ED 5B 94 07 0209*      ld de,(prt_loop_counter)
       04          
040756 19          0210*      add hl,de
040757 22 94 07 04 0211*      ld (prt_loop_counter),hl
04075B 21 00 00 00 0212*      ld hl,0
04075F 22 23 07 04 0213*      ld (prt_irq_counter),hl
040763 2A 97 07 04 0214*      ld hl,(prt_loops)
040767 23          0215*      inc hl
040768 22 97 07 04 0216*      ld (prt_loops),hl
04076C D1          0217*      pop de
04076D E1          0218*      pop hl
04076E C9          0219*      ret
04076F             0220*  
04076F             0221*  ; inputs: bc = y,x text coordinates to print
04076F             0222*  prt_loop_print:
04076F F5          0223*      push af
040770 E5          0224*      push hl
040771 C5          0225*      push bc
040772 D5          0226*      push de
040773 DD E5       0227*      push ix
040775 FD E5       0228*      push iy
040777 CD 9D 08 04 0229*      call vdu_move_cursor
04077B             0230*  
04077B 2A 94 07 04 0231*      ld hl,(prt_loop_counter)
04077F CD 76 01 04 0232*      call printDec
040783             0233*  
040783 2A 97 07 04 0234*      ld hl,(prt_loops)
040787 CD 76 01 04 0235*      call printDec
04078B             0236*  
04078B FD E1       0237*      pop iy
04078D DD E1       0238*      pop ix
04078F D1          0239*      pop de
040790 C1          0240*      pop bc
040791 E1          0241*      pop hl
040792 F1          0242*      pop af
040793 C9          0243*      ret
040794             0244*  
040794             0245*  prt_loop_counter:
040794 00 00 00    0246*      .dl 0
040797             0247*  prt_loops:
040797 00 00 00    0248*      .dl 0
04079A             0249*  
04079A             0250*  ; ===============================================
04079A             0251*  ; Timer functions
04079A             0252*  ; -----------------------------------------------
04079A             0253*  ; set a countdown timer
04079A             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04079A             0255*  ; returns: hl = current time
04079A             0256*  tmr_set:
04079A FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04079D             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04079D 3E 08       0001*M 			LD	A, function
04079F 49 CF       0002*M 			RST.LIS	08h
0407A1 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0407A4 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0407A7 C9          0261*      ret
0407A8             0262*  
0407A8             0263*  ; gets time remaining on a countdown timer
0407A8             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0407A8             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0407A8             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0407A8             0267*  tmr_get:
0407A8             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0407A8 3E 08       0001*M 			LD	A, function
0407AA 49 CF       0002*M 			RST.LIS	08h
0407AC DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0407AF FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0407B2 AF          0271*      xor a                   ; clear carry
0407B3 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0407B5 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0407B8 AF          0274*      xor a                   ; clear carry
0407B9 ED 5A       0275*      adc hl,de               ; hl = time remaining
0407BB             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0407BB C9          0277*      ret
0407BC             0278*  
0407BC 00 00 00    0279*  timestamp_now: dl 0
0407BF 00 00 00    0280*  timestamp_old: dl 0
0407C2 00 00 00    0281*  timestamp_chg: dl 0
0407C5             0282*  
0407C5             0283*  ; update the global timestamp from the system clock
0407C5             0284*  ; inputs: none
0407C5             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0407C5             0286*  ;          de = current time
0407C5             0287*  ;          ix = pointer to syvars table
0407C5             0288*  ; destroys: af,hl,de,ix
0407C5             0289*  timestamp_tick:
0407C5 ED 5B BC 07 0290*      ld de,(timestamp_now)   ; get previous time
       04          
0407CA ED 53 BF 07 0291*      ld (timestamp_old),de   ; save previous time
       04          
0407CF             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0407CF 3E 08       0001*M 			LD	A, function
0407D1 49 CF       0002*M 			RST.LIS	08h
0407D3 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0407D6 22 BC 07 04 0294*      ld (timestamp_now),hl   ; save current time
0407DA AF          0295*      xor a                   ; clear carry
0407DB ED 52       0296*      sbc hl,de               ; hl = time elapsed
0407DD 22 C2 07 04 0297*      ld (timestamp_chg),hl   ; save elapsed time
0407E1 C9          0298*      ret
0407E2             0299*  
0407E2             0300*  ; set a countdown timer
0407E2             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0407E2             0302*  ; requires: timestamp_tick to be called at least once before this function
0407E2             0303*  ; returns: hl = current time
0407E2             0304*  ; destroys: hl
0407E2             0305*  timestamp_tmr_set:
0407E2 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0407E5 2A BC 07 04 0307*      ld hl,(timestamp_now)   ; get current timestamp
0407E9 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0407EC C9          0309*      ret
0407ED             0310*  
0407ED             0311*  ; gets time remaining on a countdown timer following the global timestamp
0407ED             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0407ED             0313*  ; requires: timestamp_tick to be called at least once before this function
0407ED             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0407ED             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0407ED             0316*  ; destroys: af,hl,de
0407ED             0317*  timestamp_tmr_get:
0407ED ED 5B BC 07 0318*      ld de,(timestamp_now)   ; get current timestamp
       04          
0407F2 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0407F5 AF          0320*      xor a                   ; clear carry
0407F6 ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0407F8 FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0407FB AF          0323*      xor a                   ; clear carry
0407FC ED 5A       0324*      adc hl,de               ; hl = time remaining
0407FE             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0407FE C9          0326*      ret
0407FF             0327*  
0407FF             0328*  ; main loop timer functions
0407FF             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
040805             0330*  
040805             0331*  ; set a countdown timer for the main loop using the timestamp timer
040805             0332*  ; inputs: hl = time to set in 1/120ths of a second
040805             0333*  ; returns: hl = current time
040805             0334*  ; destroys: af,hl,de,ix,iy
040805             0335*  tmr_main_loop_set:
040805 FD 21 FF 07 0336*      ld iy,tmr_main_loop
       04          
04080A FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
04080D CD C5 07 04 0338*      call timestamp_tick
040811 2A BC 07 04 0339*      ld hl,(timestamp_now)   ; get current timestamp
040815 FD 2F 00    0340*      ld (iy+0),hl ; set start time
040818 C9          0341*      ret
040819             0342*  
040819             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
040819             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
040819             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
040819             0346*  ; destroys: af,hl,de,ix,iy
040819             0347*  tmr_main_loop_get:
040819 CD C5 07 04 0348*      call timestamp_tick
04081D FD 21 FF 07 0349*      ld iy,tmr_main_loop
       04          
040822 CD ED 07 04 0350*      call timestamp_tmr_get
040826 C9          0351*      ret
040827             0352*  
040827             0353*  ; set a stopwatch
040827             0354*  ; returns: hl = start time
040827             0355*  ; destroys: hl,ix
040827             0356*  stopwatch_set:
040827             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
040827 3E 08       0001*M 			LD	A, function
040829 49 CF       0002*M 			RST.LIS	08h
04082B DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
04082E 22 43 08 04 0359*      ld (stopwatch_started),hl            ; set start time
040832 C9          0360*      ret
040833             0361*  
040833             0362*  ; gets time elapsed on a stopwatch
040833             0363*  ; returns: hl = time elapsed in 1/120ths of a second
040833             0364*  ; destroys: af,hl,de,ix
040833             0365*  stopwatch_get:
040833             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
040833 3E 08       0001*M 			LD	A, function
040835 49 CF       0002*M 			RST.LIS	08h
040837 DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
04083A ED 5B 43 08 0368*      ld de,(stopwatch_started)            ; get start time
       04          
04083F AF          0369*      xor a                   ; clear carry
040840 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
040842 C9          0371*      ret
040843             0372*  
040843             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
040846             0374*  
040846             0375*  ; ------------------
040846             0376*  ; delay routine
040846             0377*  ; Author: Richard Turrnidge
040846             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
040846             0379*  ; routine waits a fixed time,then returns
040846             0380*  ; arrive with A =  the delay byte. One bit to be set only.
040846             0381*  ; eg. ld A,00000100b
040846             0382*  
040846             0383*  multiPurposeDelay:
040846 F5          0384*      push af
040847 C5          0385*      push bc
040848 DD E5       0386*      push ix
04084A 47          0387*      ld b,a
04084B 3E 08       0388*      ld a,$08
04084D 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
04084F             0390*  
04084F             0391*  waitLoop:
04084F             0392*  
04084F DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
040852             0394*  
040852             0395*                                  ;   we check if bit set is same as last time we checked.
040852             0396*                                  ;   bit 0 - don't use
040852             0397*                                  ;   bit 1 - changes 64 times per second
040852             0398*                                  ;   bit 2 - changes 32 times per second
040852             0399*                                  ;   bit 3 - changes 16 times per second
040852             0400*  
040852             0401*                                  ;   bit 4 - changes 8 times per second
040852             0402*                                  ;   bit 5 - changes 4 times per second
040852             0403*                                  ;   bit 6 - changes 2 times per second
040852             0404*                                  ;   bit 7 - changes 1 times per second
040852 A0          0405*      and b
040853 4F          0406*      ld c,a
040854 3A 65 08 04 0407*      ld a,(oldTimeStamp)
040858 B9          0408*      cp c                        ; is A same as last value?
040859 28 F4       0409*      jr z,waitLoop              ; loop here if it is
04085B 79          0410*      ld a,c
04085C 32 65 08 04 0411*      ld (oldTimeStamp),a        ; set new value
040860             0412*  
040860 DD E1       0413*      pop ix
040862 C1          0414*      pop bc
040863 F1          0415*      pop af
040864 C9          0416*      ret
040865             0417*  
040865 00          0418*  oldTimeStamp:   .db 00h
040866             0039       include "vdu.inc"
040866             0001*  
040866             0002*  ; VDU 30: Home cursor
040866             0003*  vdu_home_cursor:
040866 3E 1E       0004*      ld a,30
040868 5B D7       0005*  	rst.lil $10
04086A C9          0006*  	ret
04086B             0007*  
04086B             0008*  vdu_cursor_on:
04086B 21 76 08 04 0009*  	ld hl,@cmd
04086F 01 03 00 00 0010*  	ld bc,@end-@cmd
040873 5B DF       0011*  	rst.lil $18
040875 C9          0012*  	ret
040876             0013*  @cmd:
040876 17 01 01    0014*  	db 23,1,1
040879             0015*  @end:
040879             0016*  
040879             0017*  vdu_cursor_off:
040879 21 84 08 04 0018*  	ld hl,@cmd
04087D 01 03 00 00 0019*  	ld bc,@end-@cmd
040881 5B DF       0020*  	rst.lil $18
040883 C9          0021*  	ret
040884             0022*  @cmd:
040884 17 01 00    0023*  	db 23,1,0
040887             0024*  @end:
040887             0025*  
040887             0026*  ; VDU 5: Write text at graphics cursor
040887             0027*  ; inputs: a is the character to write to the screen
040887             0028*  ; prerequisites: the graphics cursor at the intended position on screen
040887             0029*  ; outputs: see the name of the function
040887             0030*  ; destroys: a, hl, bc
040887             0031*  vdu_char_to_gfx_cursor:
040887 32 97 08 04 0032*  	ld (@arg),a
04088B 21 96 08 04 0033*  	ld hl,@cmd
04088F 01 02 00 00 0034*  	ld bc,@end-@cmd
040893 5B DF       0035*  	rst.lil $18
040895 C9          0036*  	ret
040896 05          0037*  @cmd: db 5
040897 00          0038*  @arg: db 0
040898             0039*  @end:
040898             0040*  ; VDU 9: Move cursor forward one character
040898             0041*  vdu_cursor_forward:
040898 3E 09       0042*      ld a,9
04089A 5B D7       0043*  	rst.lil $10
04089C C9          0044*  	ret
04089D             0045*  
04089D             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04089D             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
04089D             0048*  vdu_move_cursor:
04089D ED 43 AE 08 0049*      ld (@x0),bc
       04          
0408A2 21 AD 08 04 0050*  	ld hl,@cmd
0408A6 01 03 00 00 0051*  	ld bc,@end-@cmd
0408AA 5B DF       0052*  	rst.lil $18
0408AC C9          0053*  	ret
0408AD 1F          0054*  @cmd: 	db 31
0408AE 00          0055*  @x0:	db 0
0408AF 00          0056*  @y0: 	db 0
0408B0 00          0057*  @end: 	db 0 ; padding
0408B1             0058*  
0408B1             0059*  ; VDU 12: Clear text area (CLS)
0408B1             0060*  vdu_cls:
0408B1 3E 0C       0061*      ld a,12
0408B3 5B D7       0062*  	rst.lil $10
0408B5 C9          0063*  	ret
0408B6             0064*  
0408B6             0065*  vdu_flip:
0408B6 21 C1 08 04 0066*  	ld hl,@cmd
0408BA 01 03 00 00 0067*  	ld bc,@end-@cmd
0408BE 5B DF       0068*  	rst.lil $18
0408C0 C9          0069*  	ret
0408C1 17 00 C3    0070*  @cmd: db 23,0,0xC3
0408C4             0071*  @end:
0408C4             0072*  
0408C4             0073*  ; VDU 16: Clear graphics area (CLG)
0408C4             0074*  vdu_clg:
0408C4 3E 10       0075*      ld a,16
0408C6 5B D7       0076*  	rst.lil $10
0408C8 C9          0077*  	ret
0408C9             0078*  
0408C9             0079*  ; COLOUR MODES
0408C9             0080*  ; Mode	Effect
0408C9             0081*  ; 0	Set on-screen pixel to target colour value
0408C9             0082*  ; 1	OR value with the on-screen pixel
0408C9             0083*  ; 2	AND value with the on-screen pixel
0408C9             0084*  ; 3	XOR value with the on-screen pixel
0408C9             0085*  ; 4	Invert the on-screen pixel
0408C9             0086*  ; 5	No operation
0408C9             0087*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0408C9             0088*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0408C9             0089*  
0408C9             0090*  ; VDU 17, colour: Define text colour (COLOUR)
0408C9             0091*  vdu_colour_text:
0408C9 32 D9 08 04 0092*  	ld (@arg),a
0408CD 21 D8 08 04 0093*  	ld hl,@cmd
0408D1 01 02 00 00 0094*  	ld bc,@end-@cmd
0408D5 5B DF       0095*  	rst.lil $18
0408D7 C9          0096*  	ret
0408D8 11          0097*  @cmd: db 17
0408D9 00          0098*  @arg: db 0
0408DA             0099*  @end:
0408DA             0100*  
0408DA             0101*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0408DA             0102*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0408DA             0103*  vdu_gcol:
0408DA 32 EF 08 04 0104*  	ld (@mode),a
0408DE 79          0105*      ld a,c
0408DF 32 F0 08 04 0106*      ld (@col),a
0408E3 21 EE 08 04 0107*  	ld hl,@cmd
0408E7 01 03 00 00 0108*  	ld bc,@end-@cmd
0408EB 5B DF       0109*  	rst.lil $18
0408ED C9          0110*  	ret
0408EE 12          0111*  @cmd:  db 18
0408EF 00          0112*  @mode: db 0
0408F0 00          0113*  @col:  db 0
0408F1             0114*  @end:
0408F1             0115*  
0408F1             0116*  
0408F1             0117*  ; VDU 28, left, bottom, right, top: Set text viewport **
0408F1             0118*  ; MIND THE LITTLE-ENDIANESS
0408F1             0119*  ; inputs: c=left,b=bottom,e=right,d=top
0408F1             0120*  ; outputs; nothing
0408F1             0121*  ; destroys: a might make it out alive
0408F1             0122*  vdu_set_txt_viewport:
0408F1 ED 43 07 09 0123*      ld (@lb),bc
       04          
0408F6 ED 53 09 09 0124*  	ld (@rt),de
       04          
0408FB 21 06 09 04 0125*  	ld hl,@cmd
0408FF 01 05 00 00 0126*  	ld bc,@end-@cmd
040903 5B DF       0127*  	rst.lil $18
040905 C9          0128*  	ret
040906 1C          0129*  @cmd:   db 28 ; set text viewport command
040907 00 00       0130*  @lb: 	dw 0x0000 ; set by bc
040909 00 00       0131*  @rt: 	dw 0x0000 ; set by de
04090B 00          0132*  @end:   db 0x00	  ; padding
04090C             0133*  
04090C             0134*  ; Wait for VBLANK interrupt
04090C             0135*  vdu_vblank:
04090C DD E5       0136*      PUSH 	IX
04090E             0137*  	MOSCALL	mos_sysvars
04090E 3E 08       0001*M 			LD	A, function
040910 49 CF       0002*M 			RST.LIS	08h
040912 DD 7E 00    0138*  	LD	A, (IX + sysvar_time + 0)
040915             0139*  @wait:
040915 DD BE 00    0140*      CP 	A, (IX + sysvar_time + 0)
040918 28 FB       0141*      JR	Z, @wait
04091A DD E1       0142*      POP	IX
04091C C9          0143*      RET
04091D             0144*  
04091D             0145*  ; VDU 29, x; y;: Set graphics origin
04091D             0146*  ; This command sets the graphics origin.
04091D             0147*  ; The origin is the point on the screen where the coordinates (0,0) are located.
04091D             0148*  ; inputs: bc=x0,de=y0
04091D             0149*  ; outputs; nothing
04091D             0150*  ; destroys: a might make it out alive
04091D             0151*  vdu_set_gfx_origin:
04091D ED 43 33 09 0152*      ld (@x0),bc
       04          
040922 ED 53 35 09 0153*      ld (@y0),de
       04          
040927 21 32 09 04 0154*      ld hl,@cmd
04092B 01 05 00 00 0155*      ld bc,@end-@cmd
04092F 5B DF       0156*      rst.lil $18
040931 C9          0157*      ret
040932 1D          0158*  @cmd:   db 29 ; set graphics origin command
040933 00 00       0159*  @x0: 	dw 0x0000 ; set by bc
040935 00 00       0160*  @y0: 	dw 0x0000 ; set by de
040937 00          0161*  @end:   db 0x00	  ; padding
040938             0162*  
040938             0163*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040938             0164*  ; NOTE: the order of the y-coordinate parameters are inverted
040938             0165*  ; 	because we have turned off logical screen scaling
040938             0166*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040938             0167*  ; outputs; nothing
040938             0168*  ; destroys: a might make it out alive
040938             0169*  vdu_set_gfx_viewport:
040938 ED 43 58 09 0170*      ld (@x0),bc
       04          
04093D FD 22 5A 09 0171*      ld (@y1),iy
       04          
040942 DD 22 5C 09 0172*  	ld (@x1),ix
       04          
040947 ED 53 5E 09 0173*  	ld (@y0),de
       04          
04094C 21 57 09 04 0174*  	ld hl,@cmd
040950 01 09 00 00 0175*  	ld bc,@end-@cmd
040954 5B DF       0176*  	rst.lil $18
040956 C9          0177*  	ret
040957 18          0178*  @cmd:   db 24 ; set graphics viewport command
040958 00 00       0179*  @x0: 	dw 0x0000 ; set by bc
04095A 00 00       0180*  @y1: 	dw 0x0000 ; set by iy
04095C 00 00       0181*  @x1: 	dw 0x0000 ; set by ix
04095E 00 00       0182*  @y0: 	dw 0x0000 ; set by de
040960 00          0183*  @end:   db 0x00	  ; padding
040961             0184*  
040961             0185*  ; SCREEN MODES
040961             0186*  ; ===============================
040961             0187*  ; Mode  Horz  Vert  Cols  Refresh
040961             0188*  ; ---   ----  ----  ----  -------
040961             0189*  ; 11    320   240   2     60hz
040961             0190*  ; 139   320   240   2     60hz
040961             0191*  ; 23    512   384   2     60hz
040961             0192*  ; 151   512   384   2     60hz
040961             0193*  ; 6     640   240   2     60hz
040961             0194*  ; 134   640   240   2     60hz
040961             0195*  ; 2     640   480   2     60hz
040961             0196*  ; 130   640   480   2     60hz
040961             0197*  ; 17    800   600   2     60hz
040961             0198*  ; 145   800   600   2     60hz
040961             0199*  ; 18    1024  768   2     60hz
040961             0200*  ; 146   1024  768   2     60hz
040961             0201*  ; ---   ----  ----  ----  -------
040961             0202*  ; 10    320   240   4     60hz
040961             0203*  ; 138   320   240   4     60hz
040961             0204*  ; 22    512   384   4     60hz
040961             0205*  ; 150   512   384   4     60hz
040961             0206*  ; 5     640   240   4     60hz
040961             0207*  ; 133   640   240   4     60hz
040961             0208*  ; 1     640   480   4     60hz
040961             0209*  ; 129   640   480   4     60hz
040961             0210*  ; 16    800   600   4     60hz
040961             0211*  ; 19    1024  768   4     60hz
040961             0212*  ; ---   ----  ----  ----  -------
040961             0213*  ; 9     320   240   16    60hz
040961             0214*  ; 137   320   240   16    60hz
040961             0215*  ; 21    512   384   16    60hz
040961             0216*  ; 149   512   384   16    60hz
040961             0217*  ; 4     640   240   16    60hz
040961             0218*  ; 132   640   240   16    60hz
040961             0219*  ; 0     640   480   16    60hz
040961             0220*  ; 7     n/a   n/a   16    60hz
040961             0221*  ; ---   ----  ----  ----  -------
040961             0222*  ; 8     320   240   64    60hz
040961             0223*  ; 136   320   240   64    60hz
040961             0224*  ; 20    512   384   64    60hz
040961             0225*  ; 3     640   240   64    60hz
040961             0226*  ; ---   ----  ----  ----  -------
040961             0227*  vdu_set_screen_mode:
040961 32 71 09 04 0228*  	ld (@arg),a
040965 21 70 09 04 0229*  	ld hl,@cmd
040969 01 02 00 00 0230*  	ld bc,@end-@cmd
04096D 5B DF       0231*  	rst.lil $18
04096F C9          0232*  	ret
040970 16          0233*  @cmd: db 22 ; set screen mode
040971 00          0234*  @arg: db 0  ; screen mode parameter
040972             0235*  @end:
040972             0236*  
040972             0237*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
040972             0238*  ; inputs: a is scaling mode, 1=on, 0=off
040972             0239*  ; note: default setting on boot is scaling ON
040972             0240*  vdu_set_scaling:
040972 32 84 09 04 0241*  	ld (@arg),a
040976 21 81 09 04 0242*  	ld hl,@cmd
04097A 01 04 00 00 0243*  	ld bc,@end-@cmd
04097E 5B DF       0244*  	rst.lil $18
040980 C9          0245*  	ret
040981 17 00 C0    0246*  @cmd: db 23,0,0xC0
040984 00          0247*  @arg: db 0  ; scaling on/off
040985             0248*  @end:
040985             0249*  
040985             0250*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
040985             0251*  ; inputs: hl=bufferId
040985             0252*  vdu_buff_select:
040985 22 97 09 04 0253*  	ld (@bufferId),hl
040989 21 94 09 04 0254*  	ld hl,@cmd
04098D 01 05 00 00 0255*  	ld bc,@end-@cmd
040991 5B DF       0256*  	rst.lil $18
040993 C9          0257*  	ret
040994 17 1B 20    0258*  @cmd: db 23,27,0x20
040997 00 00       0259*  @bufferId: dw 0x0000
040999 00          0260*  @end: db 0x00 ; padding
04099A             0261*  
04099A             0262*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04099A             0263*  ; inputs: a=format; bc=width; de=height
04099A             0264*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04099A             0265*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04099A             0266*  ; 0 	RGBA8888 (4-bytes per pixel)
04099A             0267*  ; 1 	RGBA2222 (1-bytes per pixel)
04099A             0268*  ; 2 	Mono/Mask (1-bit per pixel)
04099A             0269*  ; 3 	Reserved for internal use by VDP (“native” format)
04099A             0270*  vdu_bmp_create:
04099A ED 43 B6 09 0271*      ld (@width),bc
       04          
04099F ED 53 B8 09 0272*      ld (@height),de
       04          
0409A4 32 BA 09 04 0273*      ld (@fmt),a
0409A8 21 B3 09 04 0274*  	ld hl,@cmd
0409AC 01 08 00 00 0275*  	ld bc,@end-@cmd
0409B0 5B DF       0276*  	rst.lil $18
0409B2 C9          0277*  	ret
0409B3 17 1B 21    0278*  @cmd:       db 23,27,0x21
0409B6 00 00       0279*  @width:     dw 0x0000
0409B8 00 00       0280*  @height:    dw 0x0000
0409BA 00          0281*  @fmt:       db 0x00
0409BB             0282*  @end:
0409BB             0283*  
0409BB             0284*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0409BB             0285*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0409BB             0286*  vdu_load_img_rgba2_to_8:
0409BB             0287*  ; backup the target buffer id and image dimensions
0409BB E5          0288*      push hl
0409BC D5          0289*      push de
0409BD C5          0290*      push bc
0409BE             0291*  ; load the rgba2 image to working buffer 65534
0409BE 21 FE FF 00 0292*      ld hl,65534 ; temporary working buffer id
0409C2 CD C5 0A 04 0293*  	call vdu_load_buffer_from_file
0409C6             0294*  ; restore the image dimensions and target buffer id
0409C6 C1          0295*      pop bc
0409C7 D1          0296*      pop de
0409C8 E1          0297*      pop hl
0409C9             0298*  ; fall through to vdu_rgba2_to_8
0409C9             0299*  
0409C9             0300*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0409C9             0301*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0409C9             0302*  ; the "expand bitmap" command is:
0409C9             0303*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0409C9             0304*  ; and then to reverse the byte order to fix endian-ness:
0409C9             0305*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0409C9             0306*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0409C9             0307*  ; VDU 23,27,&20,targetBufferID%;
0409C9             0308*  ; VDU 23,27,&21,width%;height%;0
0409C9             0309*  ; -------------------------------------------------------------------
0409C9             0310*  ; inputs: bc,de image width,height ; hl = targetBufferId
0409C9             0311*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0409C9             0312*  vdu_rgba2_to_8:
0409C9             0313*  ; load the image dimensions and buffer id parameters
0409C9 ED 43 25 0A 0314*      ld (@width),bc
       04          
0409CE ED 53 27 0A 0315*      ld (@height),de
       04          
0409D3 22 0A 0A 04 0316*      ld (@bufferId0),hl
0409D7 22 17 0A 04 0317*      ld (@bufferId2),hl
0409DB 22 20 0A 04 0318*      ld (@bufferId1),hl
0409DF             0319*  ; clean up bytes that got stomped on by the ID loads
0409DF 3E 48       0320*      ld a,0x48
0409E1 32 0C 0A 04 0321*      ld (@bufferId0+2),a
0409E5 3E 17       0322*      ld a,23
0409E7 32 22 0A 04 0323*      ld (@bufferId1+2),a
0409EB 3E 18       0324*      ld a,24
0409ED 32 19 0A 04 0325*      ld (@bufferId2+2),a
0409F1 AF          0326*      xor a
0409F2 32 29 0A 04 0327*      ld (@height+2),a
0409F6             0328*  ; send the vdu command strings
0409F6 21 01 0A 04 0329*      ld hl,@beg
0409FA 01 29 00 00 0330*      ld bc,@end-@beg
0409FE 5B DF       0331*      rst.lil $18
040A00 C9          0332*      ret
040A01             0333*  @beg:
040A01             0334*  ; Command 14: Consolidate blocks in a buffer
040A01             0335*  ; VDU 23, 0, &A0, bufferId; 14
040A01 17 00 A0    0336*      db 23,0,0xA0
040A04 FE FF       0337*      dw 65534 ; workingBufferId
040A06 0E          0338*      db 14 ; consolidate blocks
040A07             0339*  ; the "expand bitmap" command is:
040A07             0340*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
040A07 17 00 A0    0341*      db 23,0,0xA0
040A0A 00 00       0342*  @bufferId0: dw 0x0000 ; targetBufferId
040A0C 48          0343*      db 0x48 ; given as decimal command 72 in the docs
040A0D 02          0344*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
040A0E FE FF       0345*      dw 65534 ; sourceBufferId
040A10 00 7F BF FF 0346*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
040A14             0347*  ; reverse the byte order to fix endian-ness:
040A14             0348*  ; Command 24: Reverse the order of data of blocks within a buffer
040A14             0349*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
040A14             0350*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
040A14 17 00 A0    0351*      db 23,0,0xA0
040A17 00 00       0352*  @bufferId2:    dw 0x0000 ; targetBufferId
040A19 18          0353*      db 24 ; reverse byte order
040A1A 04          0354*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
040A1B 04 00       0355*      dw 4 ; size (4 bytes)
040A1D             0356*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
040A1D             0357*  ; VDU 23,27,&20,targetBufferID%;
040A1D 17 1B 20    0358*      db 23,27,0x20 ; select bitmap
040A20 00 00       0359*  @bufferId1: dw 0x0000 ; targetBufferId
040A22             0360*  ; VDU 23,27,&21,width%;height%;0
040A22 17 1B 21    0361*      db 23,27,0x21 ; create bitmap from buffer
040A25 00 00       0362*  @width: dw 0x0000
040A27 00 00       0363*  @height: dw 0x0000
040A29 00          0364*      db 0x00 ; rgba8888 format
040A2A             0365*  @end:
040A2A             0366*  
040A2A             0367*  ; scratch variables
040A2A 00 00 00    0368*  bufferId0: dl 0x000000
040A2D 00 00 00    0369*  bufferId1: dl 0x000000
040A30             0370*  
040A30             0371*  ; load a vdu buffer from local memory
040A30             0372*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040A30             0373*  vdu_load_buffer:
040A30 ED 43 59 0A 0374*      ld (@length),bc
       04          
040A35 D5          0375*      push de ; save data pointer
040A36             0376*  ; send the vdu command string
040A36 7D          0377*      ld a,l
040A37 32 56 0A 04 0378*      ld (@bufferId),a
040A3B 7C          0379*      ld a,h
040A3C 32 57 0A 04 0380*      ld (@bufferId+1),a
040A40 21 53 0A 04 0381*      ld hl,@cmd
040A44 01 08 00 00 0382*      ld bc,@end-@cmd
040A48 5B DF       0383*      rst.lil $18
040A4A             0384*  ; send the buffer data
040A4A E1          0385*      pop hl ; pointer to data
040A4B ED 4B 59 0A 0386*      ld bc,(@length)
       04          
040A50 5B DF       0387*      rst.lil $18 ; send it
040A52 C9          0388*      ret
040A53             0389*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040A53 17 00 A0    0390*  @cmd:       db 23,0,0xA0
040A56 00 00       0391*  @bufferId:	dw 0x0000
040A58 00          0392*  		    db 0 ; load buffer
040A59 00 00       0393*  @length:	dw 0x0000
040A5B 00          0394*  @end: db 0 ; padding
040A5C             0395*  
040A5C             0396*  ; clear a buffer
040A5C             0397*  ; inputs: hl = bufferId
040A5C             0398*  vdu_clear_buffer:
040A5C 7D          0399*      ld a,l
040A5D 32 74 0A 04 0400*      ld (@bufferId),a
040A61 7C          0401*      ld a,h
040A62 32 75 0A 04 0402*      ld (@bufferId+1),a
040A66 21 71 0A 04 0403*      ld hl,@cmd
040A6A 01 06 00 00 0404*      ld bc,@end-@cmd
040A6E 5B DF       0405*      rst.lil $18
040A70 C9          0406*      ret
040A71 17 00 A0    0407*  @cmd:       db 23,0,0xA0
040A74 00 00       0408*  @bufferId:	dw 0x0000
040A76 02          0409*  		    db 2 ; clear buffer
040A77             0410*  @end:
040A77             0411*  
040A77             0412*  vdu_clear_all_buffers:
040A77             0413*  ; clear all buffers
040A77 21 82 0A 04 0414*      ld hl,@beg
040A7B 01 06 00 00 0415*      ld bc,@end-@beg
040A7F 5B DF       0416*      rst.lil $18
040A81 C9          0417*      ret
040A82 17 00 A0    0418*  @beg: db 23,0,$A0
040A85 FF FF       0419*        dw -1 ; clear all buffers
040A87 02          0420*        db 2  ; command 2: clear a buffer
040A88             0421*  @end:
040A88             0422*  
040A88             0423*  ; Command 14: Consolidate blocks in a buffer
040A88             0424*  vdu_consolidate_buffer:
040A88             0425*  ; set parameters for vdu call
040A88 7D          0426*      ld a,l
040A89 32 A0 0A 04 0427*      ld (@bufferId),a
040A8D 7C          0428*      ld a,h
040A8E 32 A1 0A 04 0429*      ld (@bufferId+1),a
040A92 21 9D 0A 04 0430*      ld hl,@beg
040A96 01 06 00 00 0431*      ld bc,@end-@beg
040A9A 5B DF       0432*      rst.lil $18
040A9C C9          0433*      ret
040A9D             0434*  ; VDU 23, 0, &A0, bufferId; 14
040A9D 17 00 A0    0435*  @beg: db 23,0,0xA0
040AA0 00 00       0436*  @bufferId: dw 0x0000
040AA2 0E          0437*             db 14
040AA3             0438*  @end:
040AA3             0439*  
040AA3             0440*  ; load an image file to a buffer and make it a bitmap
040AA3             0441*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
040AA3             0442*  vdu_load_img:
040AA3             0443*  ; back up image type and dimension parameters
040AA3 22 2A 0A 04 0444*      ld (bufferId0),hl
040AA7 F5          0445*      push af
040AA8 C5          0446*  	push bc
040AA9 D5          0447*  	push de
040AAA             0448*  ; load the image
040AAA CD C5 0A 04 0449*  	call vdu_load_buffer_from_file
040AAE             0450*  ; now make it a bitmap
040AAE 2A 2A 0A 04 0451*      ld hl,(bufferId0)
040AB2 CD 88 0A 04 0452*      call vdu_consolidate_buffer
040AB6 2A 2A 0A 04 0453*      ld hl,(bufferId0)
040ABA CD 85 09 04 0454*      call vdu_buff_select
040ABE D1          0455*  	pop de ; image height
040ABF C1          0456*  	pop bc ; image width
040AC0 F1          0457*  	pop af ; image type
040AC1 C3 9A 09 04 0458*  	jp vdu_bmp_create ; will return to caller from there
040AC5             0459*  
040AC5             0460*  ; inputs: hl = bufferId; iy = pointer to filename
040AC5             0461*  vdu_load_buffer_from_file:
040AC5 22 2A 0A 04 0462*      ld (bufferId0),hl
040AC9             0463*  
040AC9             0464*  ; clear target buffer
040AC9 CD 5C 0A 04 0465*      call vdu_clear_buffer
040ACD             0466*  
040ACD             0467*  ; open the file in read mode
040ACD             0468*  ; Open a file
040ACD             0469*  ; HLU: Filename
040ACD             0470*  ;   C: Mode
040ACD             0471*  ; Returns:
040ACD             0472*  ;   A: Filehandle, or 0 if couldn't open
040ACD FD E5       0473*  	push iy ; pointer to filename
040ACF E1          0474*  	pop hl
040AD0 0E 01       0475*  	ld c,fa_read
040AD2             0476*      MOSCALL mos_fopen
040AD2 3E 0A       0001*M 			LD	A, function
040AD4 49 CF       0002*M 			RST.LIS	08h
040AD6 32 11 0B 04 0477*      ld (@filehandle),a
040ADA             0478*  
040ADA             0479*  @read_file:
040ADA             0480*  ; Read a block of data from a file
040ADA             0481*  ;   C: Filehandle
040ADA             0482*  ; HLU: Pointer to where to write the data to
040ADA             0483*  ; DEU: Number of bytes to read
040ADA             0484*  ; Returns:
040ADA             0485*  ; DEU: Number of bytes read
040ADA 3A 11 0B 04 0486*      ld a,(@filehandle)
040ADE 4F          0487*      ld c,a
040ADF 21 00 E0 B7 0488*      ld hl,filedata
040AE3 11 00 20 00 0489*      ld de,8192 ; max we can read into onboard sram at one time
040AE7             0490*      MOSCALL mos_fread
040AE7 3E 1A       0001*M 			LD	A, function
040AE9 49 CF       0002*M 			RST.LIS	08h
040AEB             0491*  
040AEB             0492*  ; ; DEBUG: print chunk size
040AEB             0493*  ;     push de
040AEB             0494*  ;     pop hl
040AEB             0495*  ;     call printDec
040AEB             0496*  ;     call printNewLine
040AEB             0497*  
040AEB             0498*  ; test de for zero bytes read
040AEB 21 00 00 00 0499*      ld hl,0
040AEF AF          0500*      xor a ; clear carry
040AF0 ED 52       0501*      sbc hl,de
040AF2 CA 08 0B 04 0502*      jp z,@close_file
040AF6             0503*  
040AF6             0504*  ; load a vdu buffer from local memory
040AF6             0505*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040AF6 2A 2A 0A 04 0506*      ld hl,(bufferId0)
040AFA D5          0507*      push de ; chunksize
040AFB C1          0508*      pop bc
040AFC 11 00 E0 B7 0509*      ld de,filedata
040B00 CD 30 0A 04 0510*      call vdu_load_buffer
040B04             0511*  
040B04             0512*  ; ; print progress breadcrumbs
040B04             0513*  ;     ld a,'.'
040B04             0514*  ;     rst.lil 10h
040B04             0515*  
040B04             0516*  ; read the next block
040B04 C3 DA 0A 04 0517*      jp @read_file
040B08             0518*  
040B08             0519*  ; close the file
040B08             0520*  @close_file:
040B08 3A 11 0B 04 0521*      ld a,(@filehandle)
040B0C             0522*      MOSCALL mos_fclose
040B0C 3E 0B       0001*M 			LD	A, function
040B0E 49 CF       0002*M 			RST.LIS	08h
040B10 C9          0523*      ret ; vdu_load_buffer_from_file
040B11             0524*  
040B11 00          0525*  @filehandle: db 0 ; file handle
040B12 00 00 00    0526*  @fil: dl 0 ; pointer to FIL struct
040B15             0527*  
040B15 00 00 00    0528*  @chunkpointer: dl 0 ; pointer to current chunk
040B18             0529*  
040B18             0530*  ; File information structure (FILINFO)
040B18             0531*  @filinfo:
040B18 00 00 00 00 0532*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040B1C 00 00       0533*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040B1E 00 00       0534*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
040B20 00          0535*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
040B21 00 00 00 00 0536*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040B2E 00 00 00 00 0537*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040C2E             0040   	include "vdu_plot.inc"
040C2E             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040C2E             0002*  ; PLOT code 	(Decimal) 	Effect
040C2E             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
040C2E             0004*  plot_sl_both: equ 0x00
040C2E             0005*  
040C2E             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
040C2E             0007*  plot_sl_first: equ 0x08
040C2E             0008*  
040C2E             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
040C2E             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
040C2E             0011*  
040C2E             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
040C2E             0013*  plot_sl_last: equ 0x20
040C2E             0014*  
040C2E             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
040C2E             0016*  plot_sl_none: equ 0x28
040C2E             0017*  
040C2E             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
040C2E             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
040C2E             0020*  
040C2E             0021*  ; &40-&47 	64-71 	Point plot
040C2E             0022*  plot_pt: equ 0x40
040C2E             0023*  
040C2E             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
040C2E             0025*  plot_lf_lr_non_bg: equ 0x48
040C2E             0026*  
040C2E             0027*  ; &50-&57 	80-87 	Triangle fill
040C2E             0028*  plot_tf: equ 0x50
040C2E             0029*  
040C2E             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
040C2E             0031*  plot_lf_r_bg: equ 0x58
040C2E             0032*  
040C2E             0033*  ; &60-&67 	96-103 	Rectangle fill
040C2E             0034*  plot_rf: equ 0x60
040C2E             0035*  
040C2E             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
040C2E             0037*  plot_lf_lr_fg: equ 0x60
040C2E             0038*  
040C2E             0039*  ; &70-&77 	112-119 	Parallelogram fill
040C2E             0040*  plot_pf: equ 0x70
040C2E             0041*  
040C2E             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
040C2E             0043*  plot_lf_r_non_fg: equ 0x78
040C2E             0044*  
040C2E             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
040C2E             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
040C2E             0047*  
040C2E             0048*  ; &90-&97 	144-151 	Circle outline
040C2E             0049*  plot_co: equ 0x90
040C2E             0050*  
040C2E             0051*  ; &98-&9F 	152-159 	Circle fill
040C2E             0052*  plot_cf: equ 0x98
040C2E             0053*  
040C2E             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
040C2E             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
040C2E             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
040C2E             0057*  
040C2E             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
040C2E             0059*  plot_rcm: equ 0xB8
040C2E             0060*  
040C2E             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
040C2E             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
040C2E             0063*  ; &D0-&D7 	208-215 	Not defined
040C2E             0064*  ; &D8-&DF 	216-223 	Not defined
040C2E             0065*  ; &E0-&E7 	224-231 	Not defined
040C2E             0066*  
040C2E             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
040C2E             0068*  plot_bmp: equ 0xE8
040C2E             0069*  
040C2E             0070*  ; &F0-&F7 	240-247 	Not defined
040C2E             0071*  ; &F8-&FF 	248-255 	Not defined
040C2E             0072*  
040C2E             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
040C2E             0074*  ; Agon Console8 VDP 2.2.0
040C2E             0075*  
040C2E             0076*  ; Within each group of eight plot codes, the effects are as follows:
040C2E             0077*  ; Plot code 	Effect
040C2E             0078*  ; 0 	Move relative
040C2E             0079*  mv_rel: equ 0
040C2E             0080*  
040C2E             0081*  ; 1 	Plot relative in current foreground colour
040C2E             0082*  dr_rel_fg: equ 1
040C2E             0083*  
040C2E             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
040C2E             0085*  ; 3 	Plot relative in current background colour
040C2E             0086*  dr_rel_bg: equ 3
040C2E             0087*  
040C2E             0088*  ; 4 	Move absolute
040C2E             0089*  mv_abs: equ 4
040C2E             0090*  
040C2E             0091*  ; 5 	Plot absolute in current foreground colour
040C2E             0092*  dr_abs_fg: equ 5
040C2E             0093*  
040C2E             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
040C2E             0095*  ; 7 	Plot absolute in current background colour
040C2E             0096*  dr_abs_bg: equ 7
040C2E             0097*  
040C2E             0098*  ; Codes 0-3 use the position data provided as part of the command
040C2E             0099*  ; as a relative position, adding the position given to the current
040C2E             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
040C2E             0101*  ; as part of the command as an absolute position, setting the current
040C2E             0102*  ; graphical cursor position to the position given.
040C2E             0103*  
040C2E             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
040C2E             0105*  ; current pixel colour. These operations cannot currently be supported
040C2E             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
040C2E             0107*  ; supported. Support for these codes may be added in a future version
040C2E             0108*  ; of the VDP firmware.
040C2E             0109*  
040C2E             0110*  ; 16 colour palette constants
040C2E             0111*  c_black: equ 0
040C2E             0112*  c_red_dk: equ 1
040C2E             0113*  c_green_dk: equ 2
040C2E             0114*  c_yellow_dk: equ 3
040C2E             0115*  c_blue_dk: equ 4
040C2E             0116*  c_magenta_dk: equ 5
040C2E             0117*  c_cyan_dk: equ 6
040C2E             0118*  c_grey: equ 7
040C2E             0119*  c_grey_dk: equ 8
040C2E             0120*  c_red: equ 9
040C2E             0121*  c_green: equ 10
040C2E             0122*  c_yellow: equ 11
040C2E             0123*  c_blue: equ 12
040C2E             0124*  c_magenta: equ 13
040C2E             0125*  c_cyan: equ 14
040C2E             0126*  c_white: equ 15
040C2E             0127*  
040C2E             0128*  ; VDU 25, mode, x; y;: PLOT command
040C2E             0129*  ; inputs: a=mode, bc=x0, de=y0
040C2E             0130*  vdu_plot:
040C2E 32 48 0C 04 0131*      ld (@mode),a
040C32 ED 43 49 0C 0132*      ld (@x0),bc
       04          
040C37 ED 53 4B 0C 0133*      ld (@y0),de
       04          
040C3C 21 47 0C 04 0134*  	ld hl,@cmd
040C40 01 06 00 00 0135*  	ld bc,@end-@cmd
040C44 5B DF       0136*  	rst.lil $18
040C46 C9          0137*  	ret
040C47 19          0138*  @cmd:   db 25
040C48 00          0139*  @mode:  db 0
040C49 00 00       0140*  @x0: 	dw 0
040C4B 00 00       0141*  @y0: 	dw 0
040C4D 00          0142*  @end:   db 0 ; extra byte to soak up deu
040C4E             0143*  
040C4E             0144*  ; VDU 25, mode, x; y;: PLOT command
040C4E             0145*  ; USING 16.8 FIXED POINT COORDINATES
040C4E             0146*  ; inputs: a=mode, ub.c=x0, ud.e=y0
040C4E             0147*  vdu_plot_168:
040C4E ED 53 6A 0C 0148*      ld (@y0-1),de ; load in reverse order to avoid stomping on inputs
       04          
040C53 ED 43 68 0C 0149*      ld (@x0-1),bc ; integer portion only
       04          
040C58 32 68 0C 04 0150*      ld (@mode),a  ; load this order b/c we shifted bc right
040C5C 21 67 0C 04 0151*  	ld hl,@cmd
040C60 01 06 00 00 0152*  	ld bc,@end-@cmd
040C64 5B DF       0153*  	rst.lil $18
040C66             0154*      ; ld hl,@cmd
040C66             0155*      ; ld a,6
040C66             0156*      ; call dumpMemoryHex
040C66             0157*      ; call printNewLine
040C66 C9          0158*  	ret
040C67 19          0159*  @cmd:   db 25
040C68 00          0160*  @mode:  db 0
040C69 00 00       0161*  @x0: 	dw 0
040C6B 00 00       0162*  @y0: 	dw 0
040C6D             0163*  @end:  ; no padding required b/c we shifted de right
040C6D             0164*  
040C6D             0165*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040C6D             0166*  ; &E8-&EF 	232-239 	Bitmap plot §
040C6D             0167*  ; VDU 25, mode, x; y;: PLOT command
040C6D             0168*  ; inputs: bc=x0, de=y0
040C6D             0169*  ; prerequisites: vdu_buff_select
040C6D             0170*  vdu_plot_bmp:
040C6D ED 43 84 0C 0171*      ld (@x0),bc
       04          
040C72 ED 53 86 0C 0172*      ld (@y0),de
       04          
040C77 21 82 0C 04 0173*  	ld hl,@cmd
040C7B 01 06 00 00 0174*  	ld bc,@end-@cmd
040C7F 5B DF       0175*  	rst.lil $18
040C81 C9          0176*  	ret
040C82 19          0177*  @cmd:   db 25
040C83 ED          0178*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040C84 00 00       0179*  @x0: 	dw 0x0000
040C86 00 00       0180*  @y0: 	dw 0x0000
040C88 00          0181*  @end:   db 0x00 ; padding
040C89             0182*  
040C89             0183*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040C89             0184*  ; &E8-&EF 	232-239 	Bitmap plot §
040C89             0185*  ; VDU 25, mode, x; y;: PLOT command
040C89             0186*  ; inputs: bc=x0, de=y0
040C89             0187*  ; USING 16.8 FIXED POINT COORDINATES
040C89             0188*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
040C89             0189*  ;   the fractional portiion of the inputs are truncated
040C89             0190*  ;   leaving only the 16-bit integer portion
040C89             0191*  ; prerequisites: vdu_buff_select
040C89             0192*  vdu_plot_bmp168:
040C89             0193*  ; populate in the reverse of normal to keep the
040C89             0194*  ; inputs from stomping on each other
040C89 ED 53 A7 0C 0195*      ld (@y0-1),de
       04          
040C8E ED 43 A5 0C 0196*      ld (@x0-1),bc
       04          
040C93 3E ED       0197*      ld a,plot_bmp+dr_abs_fg ; 0xED
040C95 32 A5 0C 04 0198*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
040C99 21 A4 0C 04 0199*  	ld hl,@cmd
040C9D 01 06 00 00 0200*  	ld bc,@end-@cmd
040CA1 5B DF       0201*  	rst.lil $18
040CA3 C9          0202*  	ret
040CA4 19          0203*  @cmd:   db 25
040CA5 ED          0204*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040CA6 00 00       0205*  @x0: 	dw 0x0000
040CA8 00 00       0206*  @y0: 	dw 0x0000
040CAA             0207*  @end:  ; no padding required b/c we shifted de right
040CAA             0208*  
040CAA             0209*  ; draw a filled rectangle
040CAA             0210*  vdu_plot_rf:
040CAA ED 43 D1 0C 0211*      ld (@x0),bc
       04          
040CAF ED 53 D3 0C 0212*      ld (@y0),de
       04          
040CB4 DD 22 D7 0C 0213*      ld (@x1),ix
       04          
040CB9 FD 22 D9 0C 0214*      ld (@y1),iy
       04          
040CBE 3E 19       0215*      ld a,25 ; we have to reload the 2nd plot command
040CC0 32 D5 0C 04 0216*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040CC4 21 CF 0C 04 0217*  	ld hl,@cmd0
040CC8 01 0C 00 00 0218*  	ld bc,@end-@cmd0
040CCC 5B DF       0219*  	rst.lil $18
040CCE C9          0220*      ret
040CCF 19          0221*  @cmd0:  db 25 ; plot
040CD0 04          0222*  @arg0:  db plot_sl_both+mv_abs
040CD1 00 00       0223*  @x0:    dw 0x0000
040CD3 00 00       0224*  @y0:    dw 0x0000
040CD5 19          0225*  @cmd1:  db 25 ; plot
040CD6 65          0226*  @arg1:  db plot_rf+dr_abs_fg
040CD7 00 00       0227*  @x1:    dw 0x0000
040CD9 00 00       0228*  @y1:    dw 0x0000
040CDB 00          0229*  @end:   db 0x00 ; padding
040CDC             0230*  
040CDC             0231*  ; draw a filled circle
040CDC             0232*  vdu_plot_cf:
040CDC ED 43 03 0D 0233*      ld (@x0),bc
       04          
040CE1 ED 53 05 0D 0234*      ld (@y0),de
       04          
040CE6 DD 22 09 0D 0235*      ld (@x1),ix
       04          
040CEB FD 22 0B 0D 0236*      ld (@y1),iy
       04          
040CF0 3E 19       0237*      ld a,25 ; we have to reload the 2nd plot command
040CF2 32 07 0D 04 0238*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040CF6 21 01 0D 04 0239*  	ld hl,@cmd0
040CFA 01 0C 00 00 0240*  	ld bc,@end-@cmd0
040CFE 5B DF       0241*  	rst.lil $18
040D00 C9          0242*      ret
040D01 19          0243*  @cmd0:  db 25 ; plot
040D02 04          0244*  @arg0:  db plot_sl_both+mv_abs
040D03 00 00       0245*  @x0:    dw 0x0000
040D05 00 00       0246*  @y0:    dw 0x0000
040D07 19          0247*  @cmd1:  db 25 ; plot
040D08 9D          0248*  @arg1:  db plot_cf+dr_abs_fg
040D09 00 00       0249*  @x1:    dw 0x0000
040D0B 00 00       0250*  @y1:    dw 0x0000
040D0D 00          0251*  @end:   db 0x00 ; padding
040D0E             0252*  
040D0E             0253*  ; VDU 25, mode, x; y;: PLOT command
040D0E             0254*  ; inputs: a=mode, ix=x0, iy=y0
040D0E             0255*  plot:
040D0E 32 28 0D 04 0256*      ld (@mode),a
040D12 DD 22 29 0D 0257*      ld (@x0),ix
       04          
040D17 FD 22 2B 0D 0258*      ld (@y0),iy
       04          
040D1C 21 27 0D 04 0259*  	ld hl,@cmd
040D20 01 06 00 00 0260*  	ld bc,@end-@cmd
040D24 5B DF       0261*  	rst.lil $18
040D26 C9          0262*  	ret
040D27 19          0263*  @cmd:   db 25
040D28 00          0264*  @mode:  db 0
040D29 00 00       0265*  @x0: 	dw 0
040D2B 00 00       0266*  @y0: 	dw 0
040D2D 00          0267*  @end:   db 0 ; padding
040D2E             0268*  
040D2E             0269*  ; VDU 5: Write text at graphics cursor
040D2E             0270*  ; inputs: hl = pointer to text, ix=x0, iy=y0
040D2E             0271*  ; prerequisites: gcol foreground set, VDU 5 set
040D2E             0272*  plot_text:
040D2E E5          0273*      push hl ; save text pointer
040D2F             0274*  ; move graphics cursor to x0, y0
040D2F 3E 44       0275*      ld a,plot_pt+mv_abs
040D31 CD 0E 0D 04 0276*      call plot
040D35             0277*  ; write text
040D35 E1          0278*      pop hl ; restore text pointer
040D36 CD 77 00 04 0279*      call printString
040D3A C9          0280*      ret
040D3B             0041       include "vdu_sound.inc"
040D3B 00          0001*  last_channel: db 0
040D3C             0002*  max_channels: equ 6
040D3C             0003*  
040D3C             0004*  vdu_play_sfx:
040D3C C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040D3D 22 75 0D 04 0006*      ld (@bufferId),hl
040D41 ED 43 7F 0D 0007*      ld (@duration),bc
       04          
040D46 3E 17       0008*      ld a,23
040D48 32 77 0D 04 0009*      ld (@bufferId+2),a
040D4C 3A 3B 0D 04 0010*      ld a,(last_channel)
040D50 3C          0011*      inc a
040D51             0012*      ; and 31 ; modulo 32
040D51 FE 06       0013*      cp max_channels
040D53 C2 58 0D 04 0014*      jp nz,@load_channel
040D57 AF          0015*      xor a
040D58             0016*  @load_channel:
040D58 32 3B 0D 04 0017*      ld (last_channel),a
040D5C 32 72 0D 04 0018*      ld (@channel0),a
040D60 32 7A 0D 04 0019*      ld (@channel1),a
040D64 21 6F 0D 04 0020*      ld hl, @sample
040D68 01 12 00 00 0021*      ld bc, @sample_end - @sample
040D6C 5B DF       0022*      rst.lil $18
040D6E C9          0023*      ret
040D6F             0024*  @sample:
040D6F             0025*  ; Command 4: Set waveform
040D6F             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040D6F 17 00 85    0027*      .db 23,0,$85                        ; do sound
040D72             0028*  @channel0:
040D72 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
040D75             0030*  @bufferId:
040D75 00 00       0031*      .dw 0x0000
040D77             0032*  ; Command 0: Play note
040D77             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040D77 17 00 85    0034*      .db 23,0,$85                        ; do sound
040D7A             0035*  @channel1:
040D7A 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040D7D 00 00       0037*      .dw 0
040D7F             0038*  @duration:                              ; freq (tuneable samples only)
040D7F 00 00       0039*      .dw 0x0000                        ; duration
040D81             0040*  @sample_end:
040D81 00          0041*      .db 0x00 ; padding
040D82             0042*  
040D82             0043*  ; enable enough additional channels so that total enabled = max_channels
040D82             0044*  ; inputs: max_channels set
040D82             0045*  ; returns: nothing
040D82             0046*  ; destroys: af, bc, hl
040D82             0047*  vdu_enable_channels:
040D82 3E 06       0048*      ld a,max_channels
040D84 D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040D86 F2 8D 0D 04 0050*      jp p,@loop
040D8A C9          0051*      ret
040D8B 3E 03       0052*      ld a,3 ; first non-default channel
040D8D             0053*  @loop:
040D8D 32 A8 0D 04 0054*      ld (@channel),a
040D91 21 A5 0D 04 0055*      ld hl,@beg
040D95 01 05 00 00 0056*      ld bc,@end-@beg
040D99 F5          0057*      push af
040D9A 5B DF       0058*      rst.lil $18
040D9C F1          0059*      pop af
040D9D 3C          0060*      inc a
040D9E FE 06       0061*      cp max_channels
040DA0 C2 8D 0D 04 0062*      jp nz,@loop
040DA4 C9          0063*      ret
040DA5             0064*  @beg:
040DA5 17 00 85    0065*              db 23, 0, $85
040DA8 00          0066*  @channel:   db 0
040DA9 08          0067*              db 8 ; command 8: enable channel
040DAA             0068*  @end:
040DAA             0069*  
040DAA             0070*  ; disable all but the three default sound channels
040DAA             0071*  ; inputs: max_channels set
040DAA             0072*  ; outputs: none
040DAA             0073*  ; destroys: ah,hl,bc
040DAA             0074*  vdu_disable_channels:
040DAA 3E 06       0075*      ld a,max_channels
040DAC D6 03       0076*      sub 3 ; subtract number of default channels already enabled
040DAE F2 B5 0D 04 0077*      jp p,@loop
040DB2 C9          0078*      ret
040DB3 3E 03       0079*      ld a,3 ; first non-default channel
040DB5             0080*  @loop:
040DB5 32 D0 0D 04 0081*      ld (@channel),a
040DB9 21 CD 0D 04 0082*      ld hl,@beg
040DBD 01 05 00 00 0083*      ld bc,@end-@beg
040DC1 F5          0084*      push af
040DC2 5B DF       0085*      rst.lil $18
040DC4 F1          0086*      pop af
040DC5 3C          0087*      inc a
040DC6 FE 06       0088*      cp max_channels
040DC8 C2 B5 0D 04 0089*      jp nz,@loop
040DCC C9          0090*      ret
040DCD             0091*  @beg:
040DCD 17 00 85    0092*      db 23, 0, $85
040DD0 00          0093*  @channel: db 0
040DD1 09          0094*      db 9 ; command 9: disable channel
040DD2             0095*  @end:
040DD2             0096*  
040DD2             0097*  
040DD2             0098*  ; ############################################################
040DD2             0099*  ; VDU SOUND API
040DD2             0100*  ; ############################################################
040DD2             0101*  ; Command 0: Play note
040DD2             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040DD2             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
040DD2             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
040DD2             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
040DD2             0106*      rst.lil $18
040DD2             0107*      jr @PLAY_NOTE_END
040DD2             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
040DD2             0109*                   db channel                  ; Channel, 0 (commented out)
040DD2             0110*                   db 0                        ; Play note command
040DD2             0111*                   db volume                   ; Volume
040DD2             0112*                   dw frequency                ; Frequency
040DD2             0113*                   dw duration                 ; Duration
040DD2             0114*  @PLAY_NOTE_END:
040DD2             0115*      ENDMACRO
040DD2             0116*  
040DD2             0117*      MACRO MUTE_CHANNEL channel
040DD2             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
040DD2             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
040DD2             0120*      rst.lil $18
040DD2             0121*      jr @MUTE_CHANNEL_END
040DD2             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
040DD2             0123*                     db channel                ; Channel, 0 (commented out)
040DD2             0124*                     db 2                      ; Set volume command
040DD2             0125*                     db 0                      ; Volume (mute)
040DD2             0126*  @MUTE_CHANNEL_END:
040DD2             0127*      ENDMACRO
040DD2             0128*  
040DD2             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
040DD2             0130*  vdu_play_note:
040DD2 79          0131*      ld a,c
040DD3 32 F3 0D 04 0132*      ld (@channel),a
040DD7 78          0133*      ld a,b
040DD8 32 F5 0D 04 0134*      ld (@volume),a
040DDC 22 F6 0D 04 0135*      ld (@frequency),hl
040DE0 ED 53 F8 0D 0136*      ld (@duration),de
       04          
040DE5 21 F0 0D 04 0137*      ld hl,@cmd
040DE9 01 0A 00 00 0138*      ld bc,@end-@cmd
040DED 5B DF       0139*      rst.lil $18
040DEF C9          0140*      ret
040DF0 17 00 85    0141*  @cmd:       db 23, 0, 0x85
040DF3 00          0142*  @channel:   db 0x00
040DF4 00          0143*              db 0x00 ; play note command
040DF5 00          0144*  @volume:    db 0x00
040DF6 00 00       0145*  @frequency: dw 0x0000
040DF8 00 00       0146*  @duration:  dw 0x0000
040DFA 00          0147*  @end:       db 0x00 ; padding
040DFB             0148*  
040DFB             0149*  ; Command 1: Status
040DFB             0150*  ; VDU 23, 0, &85, channel, 1
040DFB             0151*  ; inputs: a = channel
040DFB             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040DFB             0153*  ; Bit 	Name 	Meaning
040DFB             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040DFB             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040DFB             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040DFB             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040DFB             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040DFB             0159*  
040DFB             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040DFB             0161*  vdu_channel_status:
040DFB 32 0D 0E 04 0162*      ld (@channel),a
040DFF 21 0A 0E 04 0163*      ld hl,@cmd
040E03 01 05 00 00 0164*      ld bc,@end-@cmd
040E07 5B DF       0165*      rst.lil $18
040E09 C9          0166*      ret
040E0A 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040E0D 00          0168*  @channel:   db 0x00
040E0E 01          0169*              db 0x01 ; get channel status command
040E0F             0170*  @end:
040E0F             0171*  
040E0F             0172*  ; VDU 23, 0, &85, channel, 2, volume
040E0F             0173*  ; inputs: c = channel, b = volume
040E0F             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040E0F             0175*  
040E0F             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040E0F             0177*  
040E0F             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040E0F             0179*  vdu_channel_volume:
040E0F 79          0180*      ld a,c
040E10 32 27 0E 04 0181*      ld (@channel),a
040E14 78          0182*      ld a,b
040E15 32 29 0E 04 0183*      ld (@volume),a
040E19 21 24 0E 04 0184*      ld hl,@cmd
040E1D 01 06 00 00 0185*      ld bc,@end-@cmd
040E21 5B DF       0186*      rst.lil $18
040E23 C9          0187*      ret
040E24 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040E27 00          0189*  @channel:   db 0x00
040E28 02          0190*              db 0x02 ; set volume command
040E29 00          0191*  @volume:    db 0x00
040E2A             0192*  @end:
040E2A             0193*  
040E2A             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040E2A             0195*  
040E2A             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040E2A             0197*  
040E2A             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040E2A             0199*  
040E2A             0200*  ; Returns 1 on success, 0 for failure.
040E2A             0201*  vdu_channel_frequency:
040E2A 79          0202*      ld a,c
040E2B 32 42 0E 04 0203*      ld (@channel),a
040E2F ED 53 44 0E 0204*      ld (@frequency),de
       04          
040E34 21 3F 0E 04 0205*      ld hl,@cmd
040E38 01 07 00 00 0206*      ld bc,@end-@cmd
040E3C 5B DF       0207*      rst.lil $18
040E3E C9          0208*      ret
040E3F 17 00 85    0209*  @cmd:       db 23, 0, 0x85
040E42 00          0210*  @channel:   db 0x00
040E43 03          0211*              db 0x03 ; set frequency command
040E44 00 00       0212*  @frequency: dw 0x0000
040E46 00          0213*  @end:       db 0x00 ; padding
040E47             0214*  
040E47             0215*  
040E47             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040E47             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040E47             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040E47             0219*  
040E47             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040E47             0221*  
040E47             0222*  ; By default a channel is set to use waveform 0 (square wave).
040E47             0223*  
040E47             0224*  ; Valid waveform values are as follows:
040E47             0225*  ; Value 	Waveform
040E47             0226*  ; 0 	Square wave
040E47             0227*  ; 1 	Triangle wave
040E47             0228*  ; 2 	Sawtooth wave
040E47             0229*  ; 3 	Sine wave
040E47             0230*  ; 4 	Noise (simple white noise with no frequency support)
040E47             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040E47             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040E47             0233*  
040E47             0234*  vdu_channel_waveform:
040E47 79          0235*      ld a,c
040E48 32 6D 0E 04 0236*      ld (@channel),a
040E4C 78          0237*      ld a,b
040E4D 32 6F 0E 04 0238*      ld (@waveform),a
040E51 FE 08       0239*      cp 8 ; check if the waveform is a sample
040E53 28 06       0240*      jr z, @sample
040E55 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040E59 18 08       0242*      jr @sendToVdu
040E5B             0243*  @sample:
040E5B 22 70 0E 04 0244*      ld (@bufferId),hl
040E5F 01 08 00 00 0245*      ld bc,@end-@cmd
040E63             0246*  @sendToVdu:
040E63 21 6A 0E 04 0247*      ld hl,@cmd
040E67 5B DF       0248*      rst.lil $18
040E69 C9          0249*      ret
040E6A 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040E6D 00          0251*  @channel:   db 0x00
040E6E 04          0252*              db 0x04 ; set waveform command
040E6F 00          0253*  @waveform:  db 0x00
040E70 00 00       0254*  @bufferId:  dw 0x0000
040E72 00          0255*  @end:       db 0x00 ; padding
040E73             0256*  
040E73             0257*  
040E73             0258*  
040E73             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
040E73             0260*  ; inputs: hl = bufferId; a = format
040E73             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
040E73             0262*  ; Value 	Description
040E73             0263*  ; 0 	8-bit signed, 16KHz
040E73             0264*  ; 1 	8-bit unsigned, 16KHz
040E73             0265*  vdu_buffer_to_sound:
040E73 22 8C 0E 04 0266*      ld (@bufferId),hl
040E77 32 8E 0E 04 0267*      ld (@format),a
040E7B 21 86 0E 04 0268*      ld hl,@cmd
040E7F 01 09 00 00 0269*      ld bc,@end-@cmd
040E83 5B DF       0270*      rst.lil $18
040E85 C9          0271*      ret
040E86 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040E89 00          0273*              db 0x00 ; a magic number that is always 0
040E8A 05          0274*              db 0x05 ; buffer to sound command
040E8B 02          0275*              db 0x02 ; a magic number that is always 2
040E8C 00 00       0276*  @bufferId:  dw 0x0000
040E8E 00          0277*  @format:    db 0x00
040E8F             0278*  @end:
040E8F             0279*  
040E8F             0280*  
040E8F             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040E8F             0282*  vdu_play_sample:
040E8F             0283*      ; populate input parameters
040E8F 79          0284*      ld a,c
040E90 32 BA 0E 04 0285*      ld (@channel0),a
040E94 32 C2 0E 04 0286*      ld (@channel1),a
040E98 78          0287*      ld a,b
040E99 32 C4 0E 04 0288*      ld (@volume),a
040E9D ED 53 C5 0E 0289*      ld (@frequency),de
       04          
040EA2 22 BD 0E 04 0290*      ld (@bufferId),hl
040EA6             0291*      ; clean up byte that got stomped on by bufferId load from hl
040EA6 3E 17       0292*      ld a,23
040EA8 32 BF 0E 04 0293*      ld (@cmd1),a
040EAC             0294*      ; prep the vdu command string
040EAC 21 B7 0E 04 0295*      ld hl, @cmd0
040EB0 01 12 00 00 0296*      ld bc, @end - @cmd0
040EB4 5B DF       0297*      rst.lil $18
040EB6 C9          0298*      ret
040EB7 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
040EBA 00          0300*  @channel0:   db 0x00
040EBB 04          0301*               db 0x04 ; set waveform command
040EBC 08          0302*  @waveform:   db 0x08 ; sample
040EBD 00 00       0303*  @bufferId:   dw 0x0000
040EBF 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
040EC2 00          0305*  @channel1:   db 0x00
040EC3 00          0306*               db 0x00 ; play note command
040EC4 00          0307*  @volume:     db 0x00
040EC5 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040EC7 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
040EC9 00          0310*  @end:        db 0x00 ; padding
040ECA             0042   	include "vdu_sprites.inc"
040ECA             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
040ECA             0002*  ; the VDP can support up to 256 sprites. They must be defined
040ECA             0003*  ; contiguously, and so the first sprite is sprite 0.
040ECA             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
040ECA             0005*  ; Once a selection of sprites have been defined, you can activate
040ECA             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
040ECA             0007*  ; of sprites to activate. This will activate the first n sprites,
040ECA             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
040ECA             0009*  
040ECA             0010*  ; A single sprite can have multiple "frames", referring to
040ECA             0011*  ; different bitmaps.
040ECA             0012*  ; (These bitmaps do not need to be the same size.)
040ECA             0013*  ; This allows a sprite to include an animation sequence,
040ECA             0014*  ; which can be stepped through one frame at a time, or picked
040ECA             0015*  ; in any order.
040ECA             0016*  
040ECA             0017*  ; Any format of bitmap can be used as a sprite frame. It should
040ECA             0018*  ; be noted however that "native" format bitmaps are not
040ECA             0019*  ; recommended for use as sprite frames, as they cannot get
040ECA             0020*  ; erased from the screen. (As noted above, the "native" bitmap
040ECA             0021*  ; format is not really intended for general use.) This is part
040ECA             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
040ECA             0023*  ; screen are now stored in RGBA2222 format.
040ECA             0024*  
040ECA             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
040ECA             0026*  ; and then later shown again.
040ECA             0027*  
040ECA             0028*  ; Moving sprites around the screen is done by changing the
040ECA             0029*  ; position of the sprite. This can be done either by setting
040ECA             0030*  ; the absolute position of the sprite, or by moving the sprite
040ECA             0031*  ; by a given number of pixels. (Sprites are positioned using
040ECA             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
040ECA             0033*  ; In the current sprite system, sprites will not update their
040ECA             0034*  ; position on-screen until either another drawing operation is
040ECA             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
040ECA             0036*  
040ECA             0037*  ; VDU 23, 27, 4, n: Select sprite n
040ECA             0038*  ; inputs: a is the 8-bit sprite id
040ECA             0039*  vdu_sprite_select:
040ECA 32 DC 0E 04 0040*      ld (@sprite),a
040ECE 21 D9 0E 04 0041*      ld hl,@cmd
040ED2 01 04 00 00 0042*      ld bc,@end-@cmd
040ED6 5B DF       0043*      rst.lil $18
040ED8 C9          0044*      ret
040ED9 17 1B 04    0045*  @cmd:    db 23,27,4
040EDC 00          0046*  @sprite: db 0x00
040EDD             0047*  @end:
040EDD             0048*  
040EDD             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
040EDD             0050*  ; inputs: none
040EDD             0051*  ; prerequisites: vdu_sprite_select
040EDD             0052*  vdu_sprite_clear_frames:
040EDD 21 E8 0E 04 0053*      ld hl,@cmd
040EE1 01 03 00 00 0054*      ld bc,@end-@cmd
040EE5 5B DF       0055*      rst.lil $18
040EE7 C9          0056*      ret
040EE8 17 1B 05    0057*  @cmd: db 23,27,5
040EEB             0058*  @end:
040EEB             0059*  
040EEB             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
040EEB             0061*  ; inputs: a is the 8-bit bitmap number
040EEB             0062*  ; prerequisites: vdu_sprite_select
040EEB             0063*  vdu_sprite_add_bmp:
040EEB 32 FD 0E 04 0064*      ld (@bmp),a
040EEF 21 FA 0E 04 0065*      ld hl,@cmd
040EF3 01 04 00 00 0066*      ld bc,@end-@cmd
040EF7 5B DF       0067*      rst.lil $18
040EF9 C9          0068*      ret
040EFA 17 1B 06    0069*  @cmd: db 23,27,6
040EFD 00          0070*  @bmp: db 0x00
040EFE             0071*  @end:
040EFE             0072*  
040EFE             0073*  ; VDU 23, 27, 7, n: Activate n sprites
040EFE             0074*  ; inputs: a is the number of sprites to activate
040EFE             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
040EFE             0076*  vdu_sprite_activate:
040EFE 32 10 0F 04 0077*      ld (@num),a
040F02 21 0D 0F 04 0078*      ld hl,@cmd
040F06 01 04 00 00 0079*      ld bc,@end-@cmd
040F0A 5B DF       0080*      rst.lil $18
040F0C C9          0081*      ret
040F0D 17 1B 07    0082*  @cmd: db 23,27,7
040F10 00          0083*  @num: db 0x00
040F11             0084*  @end:
040F11             0085*  
040F11             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
040F11             0087*  ; inputs: none
040F11             0088*  ; prerequisites: vdu_sprite_select
040F11             0089*  vdu_sprite_next_frame:
040F11 21 1C 0F 04 0090*      ld hl,@cmd
040F15 01 03 00 00 0091*      ld bc,@end-@cmd
040F19 5B DF       0092*      rst.lil $18
040F1B C9          0093*      ret
040F1C 17 1B 08    0094*  @cmd: db 23,27,8
040F1F             0095*  @end:
040F1F             0096*  
040F1F             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
040F1F             0098*  ; inputs: none
040F1F             0099*  ; prerequisites: vdu_sprite_select
040F1F             0100*  vdu_sprite_prev_frame:
040F1F 21 2A 0F 04 0101*      ld hl,@cmd
040F23 01 03 00 00 0102*      ld bc,@end-@cmd
040F27 5B DF       0103*      rst.lil $18
040F29 C9          0104*      ret
040F2A 17 1B 09    0105*  @cmd: db 23,27,9
040F2D             0106*  @end:
040F2D             0107*  
040F2D             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
040F2D             0109*  ; inputs: a is frame number to select
040F2D             0110*  ; prerequisites: vdu_sprite_select
040F2D             0111*  vdu_sprite_select_frame:
040F2D 32 3F 0F 04 0112*      ld (@frame),a
040F31 21 3C 0F 04 0113*      ld hl,@cmd
040F35 01 04 00 00 0114*      ld bc,@end-@cmd
040F39 5B DF       0115*      rst.lil $18
040F3B C9          0116*      ret
040F3C 17 1B 0A    0117*  @cmd:    db 23,27,10
040F3F 00          0118*  @frame:  db 0x00
040F40             0119*  @end:
040F40             0120*  
040F40             0121*  ; VDU 23, 27, 11: Show current sprite
040F40             0122*  ; inputs: none
040F40             0123*  ; prerequisites: vdu_sprite_select
040F40             0124*  vdu_sprite_show:
040F40 21 4B 0F 04 0125*      ld hl,@cmd
040F44 01 03 00 00 0126*      ld bc,@end-@cmd
040F48 5B DF       0127*      rst.lil $18
040F4A C9          0128*      ret
040F4B 17 1B 0B    0129*  @cmd: db 23,27,11
040F4E             0130*  @end:
040F4E             0131*  
040F4E             0132*  ; VDU 23, 27, 12: Hide current sprite
040F4E             0133*  ; inputs: none
040F4E             0134*  ; prerequisites: vdu_sprite_select
040F4E             0135*  vdu_sprite_hide:
040F4E 21 59 0F 04 0136*      ld hl,@cmd
040F52 01 03 00 00 0137*      ld bc,@end-@cmd
040F56 5B DF       0138*      rst.lil $18
040F58 C9          0139*      ret
040F59 17 1B 0C    0140*  @cmd: db 23,27,12
040F5C             0141*  @end:
040F5C             0142*  
040F5C             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040F5C             0144*  ; inputs: bc is x coordinate, de is y coordinate
040F5C             0145*  ; prerequisites: vdu_sprite_select
040F5C             0146*  vdu_sprite_move_abs:
040F5C ED 43 74 0F 0147*      ld (@xpos),bc
       04          
040F61 ED 53 76 0F 0148*      ld (@ypos),de
       04          
040F66 21 71 0F 04 0149*      ld hl,@cmd
040F6A 01 07 00 00 0150*      ld bc,@end-@cmd
040F6E 5B DF       0151*      rst.lil $18
040F70 C9          0152*      ret
040F71 17 1B 0D    0153*  @cmd:  db 23,27,13
040F74 00 00       0154*  @xpos: dw 0x0000
040F76 00 00       0155*  @ypos: dw 0x0000
040F78 00          0156*  @end:  db 0x00 ; padding
040F79             0157*  
040F79             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040F79             0159*  ; inputs: bc is x coordinate, de is y coordinate
040F79             0160*  ; prerequisites: vdu_sprite_select
040F79             0161*  vdu_sprite_move_rel:
040F79 ED 43 91 0F 0162*      ld (@dx),bc
       04          
040F7E ED 53 93 0F 0163*      ld (@dy),de
       04          
040F83 21 8E 0F 04 0164*      ld hl,@cmd
040F87 01 07 00 00 0165*      ld bc,@end-@cmd
040F8B 5B DF       0166*      rst.lil $18
040F8D C9          0167*      ret
040F8E 17 1B 0E    0168*  @cmd: db 23,27,14
040F91 00 00       0169*  @dx:  dw 0x0000
040F93 00 00       0170*  @dy:  dw 0x0000
040F95 00          0171*  @end: db 0x00 ; padding
040F96             0172*  
040F96             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040F96             0174*  ; USING 16.8 FIXED POINT COORDINATES
040F96             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
040F96             0176*  ;   the fractional portiion of the inputs are truncated
040F96             0177*  ;   leaving only the 16-bit integer portion
040F96             0178*  ; prerequisites: vdu_sprite_select
040F96             0179*  vdu_sprite_move_abs168:
040F96             0180*  ; populate in the reverse of normal to keep the
040F96             0181*  ; inputs from stomping on each other
040F96 ED 53 B5 0F 0182*      ld (@ypos-1),de
       04          
040F9B ED 43 B3 0F 0183*      ld (@xpos-1),bc
       04          
040FA0 3E 0D       0184*      ld a,13       ; restore the final byte of the command
040FA2 32 B3 0F 04 0185*      ld (@cmd+2),a ; string that got stomped on by bcu
040FA6 21 B1 0F 04 0186*      ld hl,@cmd
040FAA 01 07 00 00 0187*      ld bc,@end-@cmd
040FAE 5B DF       0188*      rst.lil $18
040FB0 C9          0189*      ret
040FB1 17 1B 0D    0190*  @cmd:  db 23,27,13
040FB4 00 00       0191*  @xpos: dw 0x0000
040FB6 00 00       0192*  @ypos: dw 0x0000
040FB8             0193*  @end:  ; no padding required b/c we shifted de right
040FB8             0194*  
040FB8             0195*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040FB8             0196*  ; USING 16.8 FIXED POINT COORDINATES
040FB8             0197*  ; inputs: ub.c is dx, ud.e is dy
040FB8             0198*  ;   the fractional portiion of the inputs are truncated
040FB8             0199*  ;   leaving only the 16-bit integer portion
040FB8             0200*  ; prerequisites: vdu_sprite_select
040FB8             0201*  vdu_sprite_move_rel168:
040FB8             0202*  ; populate in the reverse of normal to keep the
040FB8             0203*  ; inputs from stomping on each other
040FB8 ED 53 D7 0F 0204*      ld (@dy-1),de
       04          
040FBD ED 43 D5 0F 0205*      ld (@dx-1),bc
       04          
040FC2 3E 0E       0206*      ld a,14       ; restore the final byte of the command
040FC4 32 D5 0F 04 0207*      ld (@cmd+2),a ; string that got stomped on by bcu
040FC8 21 D3 0F 04 0208*      ld hl,@cmd
040FCC 01 07 00 00 0209*      ld bc,@end-@cmd
040FD0 5B DF       0210*      rst.lil $18
040FD2 C9          0211*      ret
040FD3 17 1B 0E    0212*  @cmd:  db 23,27,14
040FD6 00 00       0213*  @dx: dw 0x0000
040FD8 00 00       0214*  @dy: dw 0x0000
040FDA             0215*  @end:  ; no padding required b/c we shifted de right
040FDA             0216*  
040FDA             0217*  ; VDU 23, 27, 15: Update the sprites in the GPU
040FDA             0218*  ; inputs: none
040FDA             0219*  vdu_sprite_update:
040FDA 21 E5 0F 04 0220*      ld hl,@cmd
040FDE 01 03 00 00 0221*      ld bc,@end-@cmd
040FE2 5B DF       0222*      rst.lil $18
040FE4 C9          0223*      ret
040FE5 17 1B 0F    0224*  @cmd: db 23,27,15
040FE8             0225*  @end:
040FE8             0226*  
040FE8             0227*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
040FE8             0228*  ; inputs: none
040FE8             0229*  vdu_sprite_bmp_reset:
040FE8 21 F3 0F 04 0230*      ld hl,@cmd
040FEC 01 03 00 00 0231*      ld bc,@end-@cmd
040FF0 5B DF       0232*      rst.lil $18
040FF2 C9          0233*      ret
040FF3 17 1B 10    0234*  @cmd: db 23,27,16
040FF6             0235*  @end:
040FF6             0236*  
040FF6             0237*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
040FF6             0238*  ; inputs: none
040FF6             0239*  vdu_sprite_reset:
040FF6 21 01 10 04 0240*      ld hl,@cmd
040FFA 01 03 00 00 0241*      ld bc,@end-@cmd
040FFE 5B DF       0242*      rst.lil $18
041000 C9          0243*      ret
041001 17 1B 11    0244*  @cmd: db 23,27,17
041004             0245*  @end:
041004             0246*  
041004             0247*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041004             0248*  ; inputs: a is the GCOL paint mode
041004             0249*  ; prerequisites: vdu_sprite_select
041004             0250*  vdu_sprite_set_gcol:
041004 32 16 10 04 0251*      ld (@mode),a
041008 21 13 10 04 0252*      ld hl,@cmd
04100C 01 04 00 00 0253*      ld bc,@end-@cmd
041010 5B DF       0254*      rst.lil $18
041012 C9          0255*      ret
041013 17 1B 12    0256*  @cmd:  db 23,27,18
041016 00          0257*  @mode: db 0x00
041017             0258*  @end:
041017             0259*  
041017             0260*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041017             0261*  ; inputs: hl=bufferId
041017             0262*  ; prerequisites: vdu_sprite_select
041017             0263*  vdu_sprite_add_buff:
041017 22 29 10 04 0264*      ld (@bufferId),hl
04101B 21 26 10 04 0265*      ld hl,@cmd
04101F 01 05 00 00 0266*      ld bc,@end-@cmd
041023 5B DF       0267*      rst.lil $18
041025 C9          0268*      ret
041026 17 1B 26    0269*  @cmd:      db 23,27,0x26
041029 00 00       0270*  @bufferId: dw 0x0000
04102B 00          0271*  @end:      db 0x00 ; padding
04102C             0043   	include "maths.inc"
04102C             0001*  ;------------------------------------------------------------------------
04102C             0002*  ; Scratch area for calculations
04102C             0003*  ;------------------------------------------------------------------------
04102C 00 00 00    0004*  scratch1:	dw24	0	;bit manipulation buffer 1
04102F 00 00 00    0005*  scratch2:	dw24	0	;bit manipulation buffer 2
041032             0006*  
041032             0007*  ; absolute value of hlu
041032             0008*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
041032             0009*  ;         s1,z0,pv0,n1,c0 if hlu was negative
041032             0010*  ;         s0,z1,pv0,n1,c0 if hlu was zero
041032             0011*  ;         s0,z0,pv0,n1,c0 if hlu was positive
041032             0012*  ; destroys: a
041032             0013*  hlu_abs:
041032 19          0014*      add hl,de
041033 B7          0015*      or a
041034 ED 52       0016*      sbc hl,de
041036 FA 3B 10 04 0017*      jp m,@is_neg
04103A C9          0018*      ret         ; hlu is positive or zero so we're done
04103B             0019*  @is_neg:
04103B F5          0020*      push af     ; otherwise, save current flags for return
04103C CD 42 10 04 0021*      call neg_hlu ; negate hlu
041040 F1          0022*      pop af      ; get back flags
041041 C9          0023*      ret
041042             0024*  
041042             0025*  ; flip the sign of hlu
041042             0026*  ; inputs: hlu
041042             0027*  ; returns: 0-hlu, flags set appropriately for the result:
041042             0028*  ;         s1,z0,pv0,n1,c1 if result is negative
041042             0029*  ;         s0,z1,pv0,n1,c0 if result is zero
041042             0030*  ;         s0,z0,pv0,n1,c1 if result is positive
041042             0031*  ; destroys a
041042             0032*  neg_hlu:
041042 D5          0033*      push de     ; save de
041043 EB          0034*      ex de,hl    ; put hl into de
041044 21 00 00 00 0035*      ld hl,0     ; clear hl
041048 AF          0036*      xor a       ; clear carry
041049 ED 52       0037*      sbc hl,de   ; 0-hlu = -hlu
04104B D1          0038*      pop de      ; get de back
04104C C9          0039*      ret         ; easy peasy
04104D             0040*  
04104D             0041*  ;------------------------------------------------------------------------
04104D             0042*  ; divide hlu by 2, inspired by above
04104D             0043*  ;------------------------------------------------------------------------
04104D             0044*  hlu_div2:
04104D 22 2C 10 04 0045*  	ld		(scratch1),hl
041051 21 2E 10 04 0046*  	ld		hl,scratch1+2
041055 CB 1E       0047*  	rr		(hl)
041057 2B          0048*  	dec		hl
041058 CB 1E       0049*  	rr		(hl)
04105A 2B          0050*  	dec		hl
04105B CB 1E       0051*  	rr		(hl)
04105D 23          0052*  	inc		hl
04105E 23          0053*  	inc		hl
04105F 2A 2C 10 04 0054*      ld hl,(scratch1)
041063 C9          0055*      ret
041064             0056*  
041064             0057*  ; this is my little hack to divide by 16
041064             0058*  hlu_div16:
041064 AF          0059*      xor a
041065 29          0060*      add hl,hl
041066 17          0061*      rla
041067 29          0062*      add hl,hl
041068 17          0063*      rla
041069 29          0064*      add hl,hl
04106A 17          0065*      rla
04106B 29          0066*      add hl,hl
04106C 17          0067*      rla
04106D 22 7A 10 04 0068*      ld (@scratch),hl
041071 32 7D 10 04 0069*      ld (@scratch+3),a
041075 2A 7B 10 04 0070*      ld hl,(@scratch+1)
041079 C9          0071*      ret
04107A             0072*  @scratch: ds 4
04107E             0073*  
04107E             0074*  ; hlu signed division by 256
04107E             0075*  ; returns: hlu / 256
04107E             0076*  ; destroys: af
04107E             0077*  hlu_sdiv256:
04107E AF          0078*      xor a ; assume hl is positive
04107F 22 95 10 04 0079*      ld (@buffer),hl
041083             0080*      sign_hlu
041083 19          0001*M         add hl,de
041084 B7          0002*M         or a
041085 ED 52       0003*M         sbc hl,de
041087 F2 8C 10 04 0081*      jp p,@hl_pos
04108B 3D          0082*      dec a
04108C             0083*  @hl_pos:
04108C 32 98 10 04 0084*      ld (@buffer+3),a
041090 2A 96 10 04 0085*      ld hl,(@buffer+1)
041094 C9          0086*      ret
041095             0087*  @buffer: ds 4
041099             0088*  
041099             0089*  ; hlu 1 byte right shift, unsigned
041099             0090*  ; returns: hlu / 256, fractional portion in a
041099             0091*  ; destroys: af
041099             0092*  hlu_udiv256:
041099 AF          0093*  	xor a
04109A 32 AB 10 04 0094*  	ld (@buffer+3),a
04109E 7D          0095*  	ld a,l ; save the fractional portion
04109F 22 A8 10 04 0096*  	ld (@buffer),hl
0410A3 2A A9 10 04 0097*  	ld hl,(@buffer+1)
0410A7 C9          0098*  	ret
0410A8             0099*  @buffer: ds 4
0410AC             0100*  
0410AC             0101*      MACRO hlu_mul256
0410AC             0102*          add hl,hl ; * 2
0410AC             0103*          add hl,hl ; * 4
0410AC             0104*          add hl,hl ; * 8
0410AC             0105*          add hl,hl ; * 16
0410AC             0106*          add hl,hl ; * 32
0410AC             0107*          add hl,hl ; * 64
0410AC             0108*          add hl,hl ; * 128
0410AC             0109*          add hl,hl ; * 256
0410AC             0110*      ENDMACRO
0410AC             0111*  
0410AC             0112*  ; compute the modulo of hlu by deu
0410AC             0113*  ; outputs: hlu = hlu % deu
0410AC             0114*  ; destroys: f, hl
0410AC             0115*  hlu_mod:
0410AC B7          0116*  	or a ; clear carry
0410AD             0117*  @loop:
0410AD ED 52       0118*      sbc hl,de
0410AF DA B7 10 04 0119*      jp c, @end
0410B3 C3 AD 10 04 0120*      jp @loop
0410B7             0121*  @end:
0410B7 19          0122*      add hl,de
0410B8 C9          0123*  	ret
0410B9             0124*  
0410B9             0125*  
0410B9 00 00 00 00 0126*  add_bcd_arg1: db #00,#00,#00,#00
0410BD 00 00 00 00 0127*  add_bcd_arg2: db #00,#00,#00,#00
0410C1             0128*  
0410C1             0129*  ; set bcd values in a scratch memory address from registers bcde
0410C1             0130*  ; input: hl; scratch address,bcde; 8-place bcd number
0410C1             0131*  ; destroys ; hl
0410C1             0132*  set_bcd:
0410C1 73          0133*      ld (hl),e
0410C2 23          0134*      inc hl
0410C3 72          0135*      ld (hl),d
0410C4 23          0136*      inc hl
0410C5 71          0137*      ld (hl),c
0410C6 23          0138*      inc hl
0410C7 70          0139*      ld (hl),b
0410C8 C9          0140*      ret
0410C9             0141*  
0410C9             0142*  ; load bcd values from a scratch memory address to bcde
0410C9             0143*  ; input: hl; scratch address
0410C9             0144*  ; output: bcde; 8-place bcd number
0410C9             0145*  ; destroys: hl
0410C9             0146*  get_bcd:
0410C9 5E          0147*      ld e,(hl)
0410CA 23          0148*      inc hl
0410CB 56          0149*      ld d,(hl)
0410CC 23          0150*      inc hl
0410CD 4E          0151*      ld c,(hl)
0410CE 23          0152*      inc hl
0410CF 46          0153*      ld b,(hl)
0410D0 C9          0154*      ret
0410D1             0155*  
0410D1             0156*  ; BCD addition
0410D1             0157*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0410D1             0158*  ;       a is the number of bytes holding each number (number of places/2)
0410D1             0159*  ; outputs: (hl) + (de) --> (hl)
0410D1             0160*  ; destroys: a,b,de,hl
0410D1             0161*  add_bcd:
0410D1 47          0162*      ld b,a ; loop counter
0410D2 AF          0163*      xor a ; reset a, clear carry flag
0410D3             0164*  adcec:
0410D3 1A          0165*      ld a,(de) ; addend to acc
0410D4 8E          0166*      adc a,(hl) ; add (hl) to acc
0410D5 27          0167*      daa ; adjust result to bcd
0410D6 77          0168*      ld (hl),a ; store result
0410D7 23          0169*      inc hl ; advance memory pointers
0410D8 13          0170*      inc de
0410D9 10 F8       0171*      djnz adcec ; loop until b == 0
0410DB C9          0172*      ret
0410DC             0173*  
0410DC             0174*  ; BCD subtraction
0410DC             0175*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0410DC             0176*  ;       a is the number of bytes holding each number (number of places/2)
0410DC             0177*  ; outputs: (hl) - (de) --> (hl)
0410DC             0178*  ; destroys: a,b,de,hl
0410DC             0179*  sub_bcd:
0410DC 47          0180*      ld b,a ; loop counter
0410DD AF          0181*      xor a ; reset a,clear carry flag
0410DE             0182*  subdec:
0410DE 1A          0183*      ld a,(de) ; subtrahend to acc
0410DF 9E          0184*      sbc a,(hl) ; subtract (hl) from acc
0410E0 27          0185*      daa ; adjust result to bcd
0410E1 77          0186*      ld (hl),a ; store result
0410E2 23          0187*      inc hl ; advance memory pointers
0410E3 13          0188*      inc de
0410E4 10 F8       0189*      djnz subdec ; loop until b == 0
0410E6 C9          0190*      ret
0410E7             0191*  
0410E7             0192*  ; http://www.z80.info/pseudo-random.txt
0410E7             0193*  rand_8:
0410E7 C5          0194*      push bc
0410E8 3A FB 10 04 0195*      ld a,(r_seed)
0410EC 4F          0196*      ld c,a
0410ED             0197*  
0410ED 0F          0198*      rrca ; multiply by 32
0410EE 0F          0199*      rrca
0410EF 0F          0200*      rrca
0410F0 EE 1F       0201*      xor 0x1f
0410F2             0202*  
0410F2 81          0203*      add a,c
0410F3 DE FF       0204*      sbc a,255 ; carry
0410F5             0205*  
0410F5 32 FB 10 04 0206*      ld (r_seed),a
0410F9 C1          0207*      pop bc
0410FA C9          0208*      ret
0410FB 50          0209*  r_seed: defb $50
0410FC             0044   	include "arith24.inc"
0410FC             0001*  ;------------------------------------------------------------------------
0410FC             0002*  ;  arith24.asm
0410FC             0003*  ;  24-bit ez80 arithmetic routines
0410FC             0004*  ;  Copyright (c) Shawn Sijnstra 2024
0410FC             0005*  ;  MIT license
0410FC             0006*  ;
0410FC             0007*  ;  This library was created as a tool to help make ez80
0410FC             0008*  ;  24-bit native assembly routines for simple mathematical problems
0410FC             0009*  ;  more widely available.
0410FC             0010*  ;
0410FC             0011*  ;------------------------------------------------------------------------
0410FC             0012*  
0410FC             0013*  ;------------------------------------------------------------------------
0410FC             0014*  ; umul24:	HL = HL*DE (unsigned)
0410FC             0015*  ; Preserves AF, BC, DE
0410FC             0016*  ; Uses a fast multiply routine.
0410FC             0017*  ;------------------------------------------------------------------------
0410FC             0018*  umul24:
0410FC D5          0019*  	push	DE
0410FD C5          0020*  	push	BC
0410FE F5          0021*  	push	AF
0410FF E5          0022*  	push	HL
041100 C1          0023*  	pop		BC
041101 3E 18       0024*      ld	 	a, 24 ; No. of bits to process
041103 21 00 00 00 0025*      ld	 	hl, 0 ; Result
041107             0026*  umul24_lp:
041107 29          0027*  	add	hl,hl
041108 EB          0028*  	ex	de,hl
041109 29          0029*  	add	hl,hl
04110A EB          0030*  	ex	de,hl
04110B 30 01       0031*  	jr	nc,umul24_nc
04110D 09          0032*  	add	hl,bc
04110E             0033*  umul24_nc:
04110E 3D          0034*  	dec	a
04110F 20 F6       0035*  	jr	nz,umul24_lp
041111 F1          0036*  	pop	af
041112 C1          0037*  	pop	bc
041113 D1          0038*  	pop	de
041114 C9          0039*  	ret
041115             0040*  
041115             0041*  
041115             0042*  ;------------------------------------------------------------------------
041115             0043*  ; udiv24
041115             0044*  ; Unsigned 24-bit division
041115             0045*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
041115             0046*  ;
041115             0047*  ; Uses AF BC DE HL
041115             0048*  ; Uses Restoring Division algorithm
041115             0049*  ;------------------------------------------------------------------------
041115             0050*  
041115             0051*  udiv24:
041115 E5          0052*  	push	hl
041116 C1          0053*  	pop		bc	;move dividend to BCU
041117 21 00 00 00 0054*  	ld		hl,0	;result
04111B A7          0055*  	and		a
04111C ED 52       0056*  	sbc		hl,de	;test for div by 0
04111E C8          0057*  	ret		z		;it's zero, carry flag is clear
04111F 19          0058*  	add		hl,de	;HL is 0 again
041120 3E 18       0059*  	ld		a,24	;number of loops through.
041122             0060*  udiv1:
041122 C5          0061*  	push	bc	;complicated way of doing this because of lack of access to top bits
041123 E3          0062*  	ex		(sp),hl
041124 37          0063*  	scf
041125 ED 6A       0064*  	adc	hl,hl
041127 E3          0065*  	ex	(sp),hl
041128 C1          0066*  	pop	bc		;we now have bc = (bc * 2) + 1
041129             0067*  
041129 ED 6A       0068*  	adc	hl,hl
04112B A7          0069*  	and	a		;is this the bug
04112C ED 52       0070*  	sbc	hl,de
04112E 30 02       0071*  	jr	nc,udiv2
041130 19          0072*  	add	hl,de
041131             0073*  ;	dec	c
041131 0B          0074*  	dec	bc
041132             0075*  udiv2:
041132 3D          0076*  	dec	a
041133 20 ED       0077*  	jr	nz,udiv1
041135 37          0078*  	scf		;flag used for div0 error
041136 C5          0079*  	push	bc
041137 D1          0080*  	pop		de	;remainder
041138 C9          0081*  	ret
041139             0082*  
041139             0083*  
041139             0084*  
041139             0085*  ;------------------------------------------------------------------------
041139             0086*  ; neg24
041139             0087*  ; Returns: HLU = 0-HLU
041139             0088*  ; preserves all other registers
041139             0089*  ;------------------------------------------------------------------------
041139             0090*  neg24:
041139 D5          0091*  	push	de
04113A EB          0092*  	ex		de,hl
04113B 21 00 00 00 0093*  	ld		hl,0
04113F B7          0094*  	or		a
041140 ED 52       0095*  	sbc		hl,de
041142 D1          0096*  	pop		de
041143 C9          0097*  	ret
041144             0098*  
041144             0099*  ;------------------------------------------------------------------------
041144             0100*  ; or_hlu_deu: 24 bit bitwise OR
041144             0101*  ; Returns: hlu = hlu OR deu
041144             0102*  ; preserves all other registers
041144             0103*  ;------------------------------------------------------------------------
041144             0104*  or_hlu_deu:
041144 22 CF 11 04 0105*  	ld	(bitbuf1),hl
041148 ED 53 D2 11 0106*  	ld	(bitbuf2),de
       04          
04114D D5          0107*  	push	de	;preserve DEU
04114E C5          0108*  	push	bc	;preserve BCU
04114F 06 03       0109*  	ld		b,3
041151 21 CF 11 04 0110*  	ld	hl,bitbuf1
041155 11 CF 11 04 0111*  	ld	de,bitbuf1
041159             0112*  orloop_24:
041159 1A          0113*  	ld	a,(de)
04115A B6          0114*  	or	(hl)
04115B 12          0115*  	ld	(de),a
04115C 13          0116*  	inc	de
04115D 23          0117*  	inc	hl
04115E 10 F9       0118*  	djnz	orloop_24
041160 2A D2 11 04 0119*  	ld	hl,(bitbuf2)
041164 C1          0120*  	pop		bc	;restore BC
041165 D1          0121*  	pop		de	;restore DE
041166             0122*  
041166             0123*  ;------------------------------------------------------------------------
041166             0124*  ; and_hlu_deu: 24 bit bitwise AND
041166             0125*  ; Returns: hlu = hlu AND deu
041166             0126*  ; preserves all other registers
041166             0127*  ;------------------------------------------------------------------------
041166             0128*  and_hlu_deu:
041166 22 CF 11 04 0129*  	ld	(bitbuf1),hl
04116A ED 53 D2 11 0130*  	ld	(bitbuf2),de
       04          
04116F D5          0131*  	push	de	;preserve DEU
041170 C5          0132*  	push	bc	;preserve BCU
041171 06 03       0133*  	ld		b,3
041173 21 CF 11 04 0134*  	ld	hl,bitbuf1
041177 11 CF 11 04 0135*  	ld	de,bitbuf1
04117B             0136*  andloop_24:
04117B 1A          0137*  	ld	a,(de)
04117C A6          0138*  	and	(hl)
04117D 12          0139*  	ld	(de),a
04117E 13          0140*  	inc	de
04117F 23          0141*  	inc	hl
041180 10 F9       0142*  	djnz	andloop_24
041182 2A D2 11 04 0143*  	ld	hl,(bitbuf2)
041186 C1          0144*  	pop		bc	;restore BC
041187 D1          0145*  	pop		de	;restore DE
041188             0146*  
041188             0147*  ;------------------------------------------------------------------------
041188             0148*  ; xor_hlu_deu: 24 bit bitwise XOR
041188             0149*  ; Returns: hlu = hlu XOR deu
041188             0150*  ; preserves all other registers
041188             0151*  ;------------------------------------------------------------------------
041188             0152*  xor_hlu_deu:
041188 22 CF 11 04 0153*  	ld	(bitbuf1),hl
04118C ED 53 D2 11 0154*  	ld	(bitbuf2),de
       04          
041191 D5          0155*  	push	de	;preserve DEU
041192 C5          0156*  	push	bc	;preserve BCU
041193 06 03       0157*  	ld		b,3
041195 21 CF 11 04 0158*  	ld	hl,bitbuf1
041199 11 CF 11 04 0159*  	ld	de,bitbuf1
04119D             0160*  xorloop_24:
04119D 1A          0161*  	ld	a,(de)
04119E AE          0162*  	xor	(hl)
04119F 12          0163*  	ld	(de),a
0411A0 13          0164*  	inc	de
0411A1 23          0165*  	inc	hl
0411A2 10 F9       0166*  	djnz	xorloop_24
0411A4 2A D2 11 04 0167*  	ld	hl,(bitbuf2)
0411A8 C1          0168*  	pop		bc	;restore BC
0411A9 D1          0169*  	pop		de	;restore DE
0411AA             0170*  
0411AA             0171*  ;------------------------------------------------------------------------
0411AA             0172*  ; shl_hlu: 24 bit shift left hlu by deu positions
0411AA             0173*  ; Returns: hlu = hlu << deu
0411AA             0174*  ;		   de = 0
0411AA             0175*  ; NOTE: only considers deu up to 16 bits.
0411AA             0176*  ; preserves all other registers
0411AA             0177*  ;------------------------------------------------------------------------
0411AA             0178*  shl_hlu:
0411AA 7A          0179*  	ld		a,d		;up to 16 bit.
0411AB B3          0180*  	or		e
0411AC C8          0181*  	ret		z		;we're done
0411AD 29          0182*  	add		hl,hl	;shift HLU left
0411AE 1B          0183*  	dec		de
0411AF 18 F9       0184*  	jr		shl_hlu
0411B1             0185*  
0411B1             0186*  ;------------------------------------------------------------------------
0411B1             0187*  ; shr_hlu: 24 bit shift right hlu by deu positions
0411B1             0188*  ; Returns: hlu = hlu >> deu
0411B1             0189*  ;		   de = 0
0411B1             0190*  ; NOTE: only considers deu up to 16 bits.
0411B1             0191*  ; preserves all other registers
0411B1             0192*  ;------------------------------------------------------------------------
0411B1             0193*  shr_hlu:
0411B1 22 CF 11 04 0194*  	ld		(bitbuf1),hl
0411B5 21 D1 11 04 0195*  	ld		hl,bitbuf1+2
0411B9             0196*  shr_loop:
0411B9 7A          0197*  	ld		a,d		;up to 16 bit.
0411BA B3          0198*  	or		e
0411BB 28 0D       0199*  	jr		z,shr_done		;we're done
0411BD             0200*  ;carry is clear from or instruction
0411BD CB 1E       0201*  	rr		(hl)
0411BF 2B          0202*  	dec		hl
0411C0 CB 1E       0203*  	rr		(hl)
0411C2 2B          0204*  	dec		hl
0411C3 CB 1E       0205*  	rr		(hl)
0411C5 23          0206*  	inc		hl
0411C6 23          0207*  	inc		hl
0411C7 1B          0208*  	dec		de
0411C8 18 EF       0209*  	jr		shr_loop
0411CA             0210*  shr_done:
0411CA 2A CF 11 04 0211*  	ld		hl,(bitbuf1)	;collect result
0411CE C9          0212*  	ret
0411CF             0213*  
0411CF             0214*  ;------------------------------------------------------------------------
0411CF             0215*  ; Scratch area for calculations
0411CF             0216*  ;------------------------------------------------------------------------
0411CF 00 00 00    0217*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0411D2 00 00 00    0218*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0411D5             0045   	include "fixed24.inc"
0411D5             0001*  arith24uaf: ds 6
0411DB             0002*  arith24uhl: ds 6
0411E1             0003*  arith24ubc: ds 6
0411E7             0004*  arith24ude: ds 6
0411ED             0005*  arith24uix: ds 6
0411F3             0006*  arith24uiy: ds 6
0411F9             0007*  arith24usp: ds 6
0411FF             0008*  arith24upc: ds 6
041205             0009*  
041205             0010*  ; write hlu to a 54-bit output buffer arithmetically shifted up or down a specified number of bits
041205             0011*  ; uses whole-byte shifts for the initial shift and bit shifts for the remainder
041205             0012*  ; inputs: hlu = 24-bit number to shift
041205             0013*  ;         a = signed number of bits to shift
041205             0014*  ;         ix = output buffer address
041205             0015*  ; outputs: hlu = shifted 24-bit number, ix = modified pointer aligned with value in hlu
041205             0016*  shift_hlu:
041205 C5          0017*      push bc ; preserve
041206 47          0018*      ld b,a            ; store shift value in b for later
041207             0019*  
041207             0020*  ; Initialize DE to zero and clear output buffer
041207 11 00 00 00 0021*      ld de, 0
04120B DD 1F FD    0022*      ld (ix-3), de
04120E DD 1F 03    0023*      ld (ix+3), de
041211             0024*  
041211             0025*  ; Get absolute value of a and save its original sign
041211 B7          0026*      or a
041212 F5          0027*      push af ; save sign flag
041213 F2 19 12 04 0028*      jp p,@F ; If a is positive do nothing
041217 ED 44       0029*      neg ; If a is negative, negate it
041219             0030*  @@:
041219             0031*  
041219             0032*  ; Write abs(HLU) to the output buffer and save its original sign
041219 CD 32 10 04 0033*      call hlu_abs
04121D F5          0034*      push af ; save sign of HLU
04121E DD 2F 00    0035*      ld (ix), hl
041221             0036*  
041221             0037*  ; Divide bits to shift by 8 to get the whole byte shift and bit remainder
041221 78          0038*      ld a,b            ; Restore original shift value into 'a'
041222 CB 3F       0039*      srl a             ; a = a / 2 (shift right 1 bit)
041224 CB 3F       0040*      srl a             ; a = a / 4 (shift right another bit)
041226 CB 3F       0041*      srl a             ; a = a / 8 (final shift for division by 8)
041228 4F          0042*      ld c,a            ; c holds the number of whole bytes to shift
041229             0043*  
041229             0044*  ; Calculate remainder of a (original shift) mod 8
041229 E6 07       0045*      and 0x07          ; Mask with 0x07 to get the remainder (bits to shift back up)
04122B 47          0046*      ld b,a            ; 'b' now holds the number of bits to shift back up
04122C 11 00 00 00 0047*      ld de,0           ; Clear deu for computing the offset address later
041230             0048*  
041230             0049*      ; call dumpRegistersHex ; DEBUG
041230             0050*  
041230             0051*  ; Get back the original sign of the byte shift
041230 F1          0052*      pop af            ; Restore sign flag
041231 F2 3F 12 04 0053*      jp p,@F           ; If a was positive, we're done
041235 79          0054*      ld a,c            ; 'a' now holds the number of whole bytes to shift
041236 ED 44       0055*      neg               ; Negate the number of whole bytes to shift
041238 3D          0056*      dec a             ; Subtract 1 because that's just how this works
041239 4F          0057*      ld c,a            ; 'c' now holds the number of whole bytes to shift
04123A 1B          0058*      dec de            ; DE = -1 to make the signed addition below work
04123B 3E 08       0059*      ld a,8            ; Subtract bits to shift from 8 because we're in backwards land
04123D 90          0060*      sub b
04123E 47          0061*      ld b,a            ; b is the number of bits to shift back up
04123F             0062*  
04123F             0063*      ; call dumpRegistersHex ; DEBUG
04123F             0064*  
04123F             0065*  @@:
04123F             0066*  
04123F             0067*  ; Add the byte offset to the base address of output buffer
04123F 59          0068*      ld e,c            ; DEU and D were properly signed above
041240 DD 19       0069*      add ix,de         ; Add byte-aligned offset (hl = output buffer + l)
041242             0070*  
041242             0071*      ; call dumpRegistersHex ; DEBUG
041242             0072*  
041242             0073*  ; Read the byte-aligned result into HL and shift in the required number of bits
041242 DD 27 00    0074*      ld hl,(ix)        ; Byte-aligned result
041245             0075*  
041245 CD 26 04 04 0076*      call dumpRegistersHex ; DEBUG
041249             0077*  
041249             0078*  ; Check whether we're already byte-aligned
041249 AF          0079*      xor a
04124A B0          0080*      or b
04124B 28 10       0081*      jr z,@end         ; If no bits to shift, we're done
04124D             0082*  
04124D             0083*  ; Otherwise shiften zee bitzen
04124D DD 7E FF    0084*      ld a,(ix-1)       ; read one byte below for the bits to shift into HLU
041250             0085*  @loop:
041250 07          0086*      rlca              ; One bit to carry
041251             0087*  
041251 CD B4 05 04 0088*      call dumpFlags ; DEBUG
041255             0089*  
041255 ED 6A       0090*      adc hl,hl         ; Shift the carry into the result
041257             0091*  
041257 CD 26 04 04 0092*      call dumpRegistersHex ; DEBUG
04125B             0093*  
04125B 10 F3       0094*      djnz @loop        ; Loop until all bits are shifted up
04125D             0095*  
04125D             0096*  @end:
04125D             0097*  
04125D CD 26 04 04 0098*      call dumpRegistersHex ; DEBUG
041261             0099*  
041261             0100*  ; get back HLU's original sign and negate if necessary
041261 F1          0101*      pop af
041262 F2 6A 12 04 0102*      jp p,@F
041266 CD 42 10 04 0103*      call neg_hlu
04126A             0104*  @@:
04126A             0105*  ; return the result
04126A DD 2F 00    0106*      ld (ix),hl        ; Store the shifted result
04126D C1          0107*      pop bc              ; Restore BC
04126E C9          0108*      ret
04126F             0109*  
04126F             0110*  ; operation: UHL * UDE --> UHL
04126F             0111*  ; multiply unsigned 24-bit numbers and return a 48-bit intermediate
04126F             0112*  ; with inputs and outputs having an arbitrary number of fractional bits from 0 to 24
04126F             0113*  ; inputs: hl = 24-bit number, de = 24-bit number,
04126F             0114*  ;         b = hl fractional bits, c = de fractional bits, a = output fractional bits
04126F             0115*  ; outputs: umulfxout = 48-bit intermediate
04126F             0116*  ; destroys: af, hl, bc, de
04126F             0117*  umulfx:
04126F DD E5       0118*      push ix ; preserve
041271 F5          0119*      push af ; need later
041272             0120*  
041272             0121*  ; do the multiplication
041272 CD 33 13 04 0122*      call umul24x24
041276             0123*      ; DEBUG
041276 21 C8 12 04 0124*      ld hl,umulfxout ; point to output buffer
04127A 3E 06       0125*      ld a,6 ; 6 bytes to print
04127C CD 1A 06 04 0126*      call dumpMemoryHex ; print the result
041280             0127*      ; END DEBUG
041280             0128*  
041280             0129*  ; shift the result to the required output precision
041280 78          0130*      ld a,b
041281 81          0131*      add a,c ; a is left shift from the multiplication
041282 C1          0132*      pop bc ; b is the output precision (was a)
041283 90          0133*      sub b ; a is the net shift of the output
041284             0134*  
041284             0135*  ; Get absolute value of a and save its original sign
041284 B7          0136*      or a
041285 F5          0137*      push af ; save sign flag
041286 F2 8C 12 04 0138*      jp p,@F ; If a is positive do nothing
04128A ED 44       0139*      neg ; If a is negative, negate it
04128C             0140*  @@:
04128C             0141*  
04128C             0142*  ; Divide a by 8 to get the whole byte shift and bit remainder
04128C 47          0143*      ld b,a            ; Store 'a' temporarily in 'b' (net shift)
04128D CB 3F       0144*      srl a             ; a = a / 2 (shift right 1 bit)
04128F CB 3F       0145*      srl a             ; a = a / 4 (shift right another bit)
041291 CB 3F       0146*      srl a             ; a = a / 8 (final shift for division by 8)
041293 4F          0147*      ld c,a            ; c holds the number of whole bytes to shift
041294             0148*  
041294             0149*  ; Calculate remainder of a (original shift) mod 8
041294 78          0150*      ld a,b            ; Restore original shift value into 'a'
041295 E6 07       0151*      and 0x07          ; Mask with 0x07 to get the remainder (bits to shift back up)
041297 47          0152*      ld b,a            ; 'b' now holds the number of bits to shift back up
041298 11 00 00 00 0153*      ld de,0           ; Clear deu for computing the offset address later
04129C             0154*  
04129C             0155*      ; call dumpRegistersHex ; DEBUG
04129C             0156*  
04129C             0157*  ; Get back the original sign of the byte shift
04129C F1          0158*      pop af            ; Restore sign flag
04129D F2 AB 12 04 0159*      jp p,@F           ; If a was positive, we're done
0412A1 79          0160*      ld a,c            ; 'a' now holds the number of whole bytes to shift
0412A2 ED 44       0161*      neg               ; Negate the number of whole bytes to shift
0412A4 3D          0162*      dec a             ; Subtract 1 because that's just how this works
0412A5 4F          0163*      ld c,a            ; 'c' now holds the number of whole bytes to shift
0412A6 1B          0164*      dec de            ; DE = -1 to make the signed addition below work
0412A7 3E 08       0165*      ld a,8            ; Subtract bits to shift from 8 because we're in backwards land
0412A9 90          0166*      sub b
0412AA 47          0167*      ld b,a            ; b is the number of bits to shift back up
0412AB             0168*  
0412AB             0169*      ; call dumpRegistersHex ; DEBUG
0412AB             0170*  
0412AB             0171*  @@:
0412AB             0172*  
0412AB             0173*  ; Add the byte offset to the base address of umulfxout
0412AB 59          0174*      ld e,c            ; DEU and D were properly signed above
0412AC DD 21 C8 12 0175*      ld ix,umulfxout   ; Load base address of the output buffer
       04          
0412B1 DD 19       0176*      add ix,de         ; Add byte-aligned offset (hl = umulfxout + l)
0412B3             0177*  
0412B3             0178*      ; call dumpRegistersHex ; DEBUG
0412B3             0179*  
0412B3             0180*  ; Read the byte-aligned result into HL and shift in the required number of bits
0412B3 DD 27 00    0181*      ld hl,(ix)        ; Byte-aligned result
0412B6 DD 7E FF    0182*      ld a,(ix-1)       ; One byte below
0412B9             0183*  
0412B9             0184*  ; Check whether we're already byte-aligned
0412B9 AF          0185*      xor a
0412BA B0          0186*      or b
0412BB 28 05       0187*      jr z,@end         ; If no bits to shift, we're done
0412BD             0188*  
0412BD             0189*  ; Otherwise shiften zee bitzen
0412BD             0190*  @loop:
0412BD             0191*  
0412BD             0192*      ; call dumpRegistersHex ; DEBUG
0412BD             0193*  
0412BD 07          0194*      rlca              ; One bit to carry
0412BE ED 6A       0195*      adc hl,hl         ; Shift the carry into the result
0412C0             0196*  
0412C0 10 FB       0197*      djnz @loop        ; Loop until all bits are shifted up
0412C2             0198*  
0412C2             0199*  @end:
0412C2             0200*  ; return the result
0412C2 DD E1       0201*      pop ix ; restore
0412C4 C9          0202*      ret
0412C5             0203*  
0412C5 00 00 00    0204*      dl 0 ; padding
0412C8 00 00 00 00 0205*  umulfxout: blkb 6,0
       00 00       
0412CE 00 00 00    0206*      dl 0 ; padding
0412D1             0207*  
0412D1             0208*  ; operation: UHL * UDE --> UHL
0412D1             0209*  ; multiply signed 24-bit numbers and return a 48-bit intermediate
0412D1             0210*  ; with inputs and outputs having an arbitrary number of fractional bits from 0 to 24
0412D1             0211*  ; inputs: hl = 24-bit number, de = 24-bit number,
0412D1             0212*  ;         b = hl fractional bits, c = de fractional bits, a = output fractional bits
0412D1             0213*  ; outputs: umulfxout = 48-bit intermediate
0412D1             0214*  ; destroys: af, hl, bc, de
0412D1             0215*  smulfx:
0412D1             0216*  ; make everything positive and store sign flags
0412D1 CD 32 10 04 0217*  	call hlu_abs
0412D5 F5          0218*  	push af
0412D6 EB          0219*  	ex de,hl
0412D7 CD 32 10 04 0220*  	call hlu_abs
0412DB EB          0221*  	ex de,hl
0412DC F5          0222*  	push af
0412DD             0223*  ; do the division
0412DD CD 6F 12 04 0224*      call umulfx ; hl = product
0412E1             0225*  ; adjust sign of result
0412E1 F1          0226*  	pop af ; sign de
0412E2 FA ED 12 04 0227*  	jp m,@de_neg
0412E6 F1          0228*  	pop af ; sign hl
0412E7 F0          0229*  	ret p ; both positive, nothing to do
0412E8             0230*  @hl_neg:
0412E8 CD 42 10 04 0231*      call neg_hlu ; de pos, hl neg, result is negative
0412EC C9          0232*      ret
0412ED             0233*  @de_neg:
0412ED F1          0234*  	pop af
0412EE F8          0235*  	ret m ; both negative, nothing to do
0412EF CD 42 10 04 0236*  	call neg_hlu ; result is negative
0412F3 C9          0237*  	ret
0412F4             0238*  
0412F4             0239*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
0412F4             0240*  ; uses EZ80 MLT instruction for speed
0412F4             0241*  ; operation: UHL * A --> UHL
0412F4             0242*  ; destroys: AF, HL
0412F4             0243*  smul24x8:
0412F4             0244*  ; make hl positive and store sign flag
0412F4 CD 32 10 04 0245*  	call hlu_abs
0412F8 F5          0246*  	push af
0412F9             0247*  ; do the division
0412F9 CD 04 13 04 0248*      call umul24x8 ; hl = product
0412FD             0249*  ; adjust sign of result
0412FD F1          0250*  	pop af ; sign de
0412FE F0          0251*  	ret p ; hl was positive, nothing to do
0412FF CD 42 10 04 0252*  	call neg_hlu ; result is negative
041303 C9          0253*  	ret
041304             0254*  
041304             0255*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
041304             0256*  ; uses EZ80 MLT instruction for speed
041304             0257*  ; operation: UHL * A --> AUHL
041304             0258*  ; destroys: AF, HL
041304             0259*  umul24x8:
041304 D5          0260*  	push de ; preserve de
041305             0261*  ; low byte
041305 5D          0262*  	ld e,l
041306 57          0263*  	ld d,a
041307 ED 5C       0264*  	mlt de
041309 6B          0265*  	ld l,e ; product low byte
04130A 08          0266*  	ex af,af' ; save multiplier
04130B 7A          0267*  	ld a,d ; carry
04130C 08          0268*  	ex af,af' ; save carry, restore multiplier
04130D             0269*  ; high byte
04130D 5C          0270*  	ld e,h
04130E 57          0271*  	ld d,a
04130F ED 5C       0272*  	mlt de
041311 08          0273*  	ex af,af' ; save multiplier, restore carry
041312 83          0274*  	add a,e ; add carry
041313 67          0275*  	ld h,a ; product middle byte
041314 7A          0276*  	ld a,d ; carry
041315 08          0277*  	ex af,af' ; save carry, restore multiplier
041316             0278*  ; upper byte
041316 E5          0279*  	push hl
041317 33          0280*  	inc sp
041318 D1          0281*  	pop de ; d = hlu
041319 3B          0282*  	dec sp
04131A 5F          0283*  	ld e,a
04131B ED 5C       0284*  	mlt de
04131D 08          0285*  	ex af,af' ; restore carry
04131E 8B          0286*  	adc a,e ; add carry
04131F 22 30 13 04 0287*      ld (@scratch),hl ; 7 cycles
041323 32 32 13 04 0288*      ld (@scratch+2),a ; 5 cycles
041327 2A 30 13 04 0289*      ld hl,(@scratch) ; 7 cycles
04132B             0290*  ; highest byte
04132B 3E 00       0291*  	ld a,0 ; preserve carry flag
04132D 8A          0292*  	adc a,d ; product highest byte
04132E D1          0293*  	pop de ; restore de
04132F C9          0294*  	ret
041330             0295*  @scratch: ds 3
041333             0296*  
041333             0297*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
041333             0298*  ; operation: UHL * UDE --> umulfxout
041333             0299*  umul24x24:
041333 FD 21 C8 12 0300*  	ld iy,umulfxout ; point to output buffer
       04          
041338 C5          0301*  	push bc
041339 01 00 00 00 0302*  	ld bc,0
04133D FD 0F 00    0303*  	ld (iy),bc
041340 FD 0F 03    0304*  	ld (iy+3),bc
041343 C1          0305*  	pop bc
041344             0306*  
041344             0307*  ; STEP 1: UHL * E
041344 7B          0308*  	ld a,e
041345 E5          0309*  	push hl
041346 CD 04 13 04 0310*  	call umul24x8
04134A FD 2F 00    0311*  	ld (iy+0),hl
04134D FD 77 03    0312*  	ld (iy+3),a
041350             0313*  
041350             0314*  ; STEP 2: UHL * D
041350 E1          0315*  	pop hl
041351 E5          0316*  	push hl
041352 7A          0317*  	ld a,d
041353 CD 04 13 04 0318*  	call umul24x8
041357 CD 64 13 04 0319*  	call @accumulate
04135B             0320*  
04135B             0321*  ; STEP 3: UHL * DEU
04135B E1          0322*  	pop hl
04135C D5          0323*  	push de
04135D 33          0324*  	inc sp
04135E F1          0325*  	pop af
04135F 3B          0326*  	dec sp
041360 CD 04 13 04 0327*  	call umul24x8
041364             0328*  
041364             0329*  @accumulate:
041364 FD 23       0330*  	inc iy
041366             0331*  ; highest byte of product to carry
041366 FD 77 03    0332*  	ld (iy+3),a
041369             0333*  ; low byte of product
041369 7D          0334*  	ld a,l
04136A FD 86 00    0335*  	add a,(iy+0)
04136D FD 77 00    0336*  	ld (iy+0),a
041370             0337*  ; high byte of product
041370 7C          0338*  	ld a,h
041371 FD 8E 01    0339*  	adc a,(iy+1)
041374 FD 77 01    0340*  	ld (iy+1),a
041377             0341*  ; uppper byte of product
041377 E5          0342*  	push hl
041378 33          0343*  	inc sp
041379 E1          0344*  	pop hl
04137A 3B          0345*  	dec sp
04137B 7C          0346*  	ld a,h
04137C FD 8E 02    0347*  	adc a,(iy+2)
04137F FD 77 02    0348*  	ld (iy+2),a
041382             0349*  ; carry
041382 3E 00       0350*  	ld a,0 ; preserve flags
041384 FD 8E 03    0351*  	adc a,(iy+3)
041387 FD 77 03    0352*  	ld (iy+3),a
04138A C9          0353*  	ret
04138B             0354*  
04138B             0355*  ; umul168:	UH.L = UH.L*UD.E (unsigned)
04138B             0356*  umul168:
04138B CD 33 13 04 0357*  	call umul24x24
04138F FD 27 FF    0358*  	ld hl,(iy-1)
041392 C9          0359*  	ret
041393             0360*  
041393             0361*  ; smul168:	UH.L * UD.E --> UH.L (signed)
041393             0362*  smul168:
041393             0363*  ; make everything positive and store sign flags
041393 CD 32 10 04 0364*  	call hlu_abs
041397 F5          0365*  	push af
041398 EB          0366*  	ex de,hl
041399 CD 32 10 04 0367*  	call hlu_abs
04139D EB          0368*  	ex de,hl
04139E F5          0369*  	push af
04139F             0370*  ; do the division
04139F CD 8B 13 04 0371*      call umul168 ; hl = product
0413A3             0372*  ; adjust sign of result
0413A3 F1          0373*  	pop af ; sign de
0413A4 FA AF 13 04 0374*  	jp m,@de_neg
0413A8 F1          0375*  	pop af ; sign hl
0413A9 F0          0376*  	ret p ; both positive, nothing to do
0413AA             0377*  @hl_neg:
0413AA CD 42 10 04 0378*      call neg_hlu ; de pos, hl neg, result is negative
0413AE C9          0379*      ret
0413AF             0380*  @de_neg:
0413AF F1          0381*  	pop af
0413B0 F8          0382*  	ret m ; both negative, nothing to do
0413B1 CD 42 10 04 0383*  	call neg_hlu ; result is negative
0413B5 C9          0384*  	ret
0413B6             0385*  
0413B6             0386*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0413B6             0387*  ; perform unsigned division of 16.8 fixed place values
0413B6             0388*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
0413B6             0389*  udiv168:
0413B6             0390*  ; back up divisor
0413B6 ED 53 ED 13 0391*  	ld (@ude),de
       04          
0413BB             0392*  ; get the 16-bit integer part of the quotient
0413BB CD 15 11 04 0393*      call udiv24 ; de = quotient, hl = remainder
0413BF             0394*  ; load quotient to upper three bytes of output
0413BF ED 53 F4 13 0395*      ld (div168_out+1),de
       04          
0413C4             0396*  @div256:
0413C4             0397*  ; multiply remainder by 256
0413C4             0398*  	hlu_mul256
0413C4 29          0001*M         add hl,hl ; * 2
0413C5 29          0002*M         add hl,hl ; * 4
0413C6 29          0003*M         add hl,hl ; * 8
0413C7 29          0004*M         add hl,hl ; * 16
0413C8 29          0005*M         add hl,hl ; * 32
0413C9 29          0006*M         add hl,hl ; * 64
0413CA 29          0007*M         add hl,hl ; * 128
0413CB 29          0008*M         add hl,hl ; * 256
0413CC             0399*  ; skip fractional computation if remainder is zero
0413CC             0400*      sign_hlu
0413CC 19          0001*M         add hl,de
0413CD B7          0002*M         or a
0413CE ED 52       0003*M         sbc hl,de
0413D0 20 03       0401*      jr nz,@div_frac
0413D2 AF          0402*      xor a
0413D3 18 0A       0403*      jr @write_frac
0413D5             0404*  ; now divide the shifted remainder by the divisor
0413D5             0405*  @div_frac:
0413D5 ED 5B ED 13 0406*  	ld de,(@ude) ; get back divisor
       04          
0413DA CD 15 11 04 0407*      call udiv24 ; de = quotient, hl = remainder
0413DE             0408*  ; load low byte of quotient to low byte of output
0413DE 7B          0409*      ld a,e
0413DF             0410*  @write_frac:
0413DF 32 F3 13 04 0411*      ld (div168_out),a
0413E3             0412*  ; load de with return value
0413E3 ED 5B F3 13 0413*      ld de,(div168_out)
       04          
0413E8             0414*  ; load a with any overflow
0413E8 3A F6 13 04 0415*      ld a,(div168_out+3)
0413EC C9          0416*      ret ; ud.e is the 16.8 result
0413ED             0417*  @ude: ds 6
0413F3             0418*  div168_out: ds 4 ; the extra byte is for overflow
0413F7             0419*  
0413F7             0420*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0413F7             0421*  ; perform signed division of 16.8 fixed place values
0413F7             0422*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0413F7             0423*  sdiv168:
0413F7             0424*  ; make everything positive and store sign flags
0413F7 CD 32 10 04 0425*  	call hlu_abs
0413FB F5          0426*  	push af
0413FC EB          0427*  	ex de,hl
0413FD CD 32 10 04 0428*  	call hlu_abs
041401 EB          0429*  	ex de,hl
041402 F5          0430*  	push af
041403             0431*  ; do the division
041403 CD B6 13 04 0432*      call udiv168 ; de = quotient, hl = remainder
041407             0433*  ; adjust sign of result
041407 F1          0434*  	pop af ; sign de
041408 FA 15 14 04 0435*  	jp m,@de_neg
04140C F1          0436*  	pop af ; sign hl
04140D F0          0437*  	ret p ; both positive, nothing to do
04140E             0438*  @hl_neg:
04140E EB          0439*      ex de,hl ; hl = quotient, de = remainder
04140F CD 42 10 04 0440*      call neg_hlu ; de pos, hl neg, result is negative
041413 EB          0441*      ex de,hl ; de = negated quotient, hl = remainder
041414 C9          0442*      ret
041415             0443*  @de_neg:
041415 F1          0444*  	pop af
041416 F8          0445*  	ret m ; both negative, nothing to do
041417 EB          0446*      ex de,hl ; hl = quotient, de = remainder
041418 CD 42 10 04 0447*  	call neg_hlu ; result is negative
04141C EB          0448*      ex de,hl ; de = negated quotient, hl = remainder
04141D C9          0449*  	ret
04141E             0450*  ; ========== FROM maths24.inc ==========
04141E             0451*  
04141E             0452*  ; Expects  ADL mode
04141E             0453*  ; Inputs:  UH.L
04141E             0454*  ; Outputs: UH.L is the 16.8 square root
04141E             0455*  ;          UD.E is the difference inputHL-DE^2
04141E             0456*  ;          c flag reset
04141E             0457*  sqrt168:
04141E CD 28 14 04 0458*      call sqrt24
041422 EB          0459*      ex de,hl
041423 29          0460*      add hl,hl
041424 29          0461*      add hl,hl
041425 29          0462*      add hl,hl
041426 29          0463*      add hl,hl
041427 C9          0464*      ret
041428             0465*  
041428             0466*  ; Expects  ADL mode
041428             0467*  ; Inputs:  HL
041428             0468*  ; Outputs: DE is the integer square root
041428             0469*  ;          HL is the difference inputHL-DE^2
041428             0470*  ;          c flag reset
041428             0471*  sqrt24:
041428 AF          0472*      xor a
041429 45          0473*      ld b,l
04142A C5          0474*      push bc
04142B 47          0475*      ld b,a
04142C 57          0476*      ld d,a
04142D 4F          0477*      ld c,a
04142E 6F          0478*      ld l,a
04142F 5F          0479*      ld e,a
041430             0480*  
041430             0481*      ;Iteration 1
041430 29          0482*      add hl,hl
041431 CB 11       0483*      rl c
041433 29          0484*      add hl,hl
041434 CB 11       0485*      rl c
041436 91          0486*      sub c
041437 30 04       0487*      jr nc,$+6
041439 1C          0488*      inc e
04143A 1C          0489*      inc e
04143B 2F          0490*      cpl
04143C 4F          0491*      ld c,a
04143D             0492*  
04143D             0493*      ;Iteration 2
04143D 29          0494*      add hl,hl
04143E CB 11       0495*      rl c
041440 29          0496*      add hl,hl
041441 CB 11       0497*      rl c
041443 CB 13       0498*      rl e
041445 7B          0499*      ld a,e
041446 91          0500*      sub c
041447 30 04       0501*      jr nc,$+6
041449 1C          0502*      inc e
04144A 1C          0503*      inc e
04144B 2F          0504*      cpl
04144C 4F          0505*      ld c,a
04144D             0506*  
04144D             0507*      ;Iteration 3
04144D 29          0508*      add hl,hl
04144E CB 11       0509*      rl c
041450 29          0510*      add hl,hl
041451 CB 11       0511*      rl c
041453 CB 13       0512*      rl e
041455 7B          0513*      ld a,e
041456 91          0514*      sub c
041457 30 04       0515*      jr nc,$+6
041459 1C          0516*      inc e
04145A 1C          0517*      inc e
04145B 2F          0518*      cpl
04145C 4F          0519*      ld c,a
04145D             0520*  
04145D             0521*      ;Iteration 4
04145D 29          0522*      add hl,hl
04145E CB 11       0523*      rl c
041460 29          0524*      add hl,hl
041461 CB 11       0525*      rl c
041463 CB 13       0526*      rl e
041465 7B          0527*      ld a,e
041466 91          0528*      sub c
041467 30 04       0529*      jr nc,$+6
041469 1C          0530*      inc e
04146A 1C          0531*      inc e
04146B 2F          0532*      cpl
04146C 4F          0533*      ld c,a
04146D             0534*  
04146D             0535*      ;Iteration 5
04146D 29          0536*      add hl,hl
04146E CB 11       0537*      rl c
041470 29          0538*      add hl,hl
041471 CB 11       0539*      rl c
041473 CB 13       0540*      rl e
041475 7B          0541*      ld a,e
041476 91          0542*      sub c
041477 30 04       0543*      jr nc,$+6
041479 1C          0544*      inc e
04147A 1C          0545*      inc e
04147B 2F          0546*      cpl
04147C 4F          0547*      ld c,a
04147D             0548*  
04147D             0549*      ;Iteration 6
04147D 29          0550*      add hl,hl
04147E CB 11       0551*      rl c
041480 29          0552*      add hl,hl
041481 CB 11       0553*      rl c
041483 CB 13       0554*      rl e
041485 7B          0555*      ld a,e
041486 91          0556*      sub c
041487 30 04       0557*      jr nc,$+6
041489 1C          0558*      inc e
04148A 1C          0559*      inc e
04148B 2F          0560*      cpl
04148C 4F          0561*      ld c,a
04148D             0562*  
04148D             0563*      ;Iteration 7
04148D 29          0564*      add hl,hl
04148E CB 11       0565*      rl c
041490 29          0566*      add hl,hl
041491 CB 11       0567*      rl c
041493 CB 10       0568*      rl b
041495 EB          0569*      ex de,hl
041496 29          0570*      add hl,hl
041497 E5          0571*      push hl
041498 ED 42       0572*      sbc hl,bc
04149A 30 06       0573*      jr nc,$+8
04149C 7C          0574*      ld a,h
04149D 2F          0575*      cpl
04149E 47          0576*      ld b,a
04149F 7D          0577*      ld a,l
0414A0 2F          0578*      cpl
0414A1 4F          0579*      ld c,a
0414A2 E1          0580*      pop hl
0414A3 30 02       0581*      jr nc,$+4
0414A5 23          0582*      inc hl
0414A6 23          0583*      inc hl
0414A7 EB          0584*      ex de,hl
0414A8             0585*  
0414A8             0586*      ;Iteration 8
0414A8 29          0587*      add hl,hl
0414A9 69          0588*      ld l,c
0414AA 60          0589*      ld h,b
0414AB ED 6A       0590*      adc hl,hl
0414AD ED 6A       0591*      adc hl,hl
0414AF EB          0592*      ex de,hl
0414B0 29          0593*      add hl,hl
0414B1 ED 52       0594*      sbc hl,de
0414B3 19          0595*      add hl,de
0414B4 EB          0596*      ex de,hl
0414B5 30 04       0597*      jr nc,$+6
0414B7 ED 52       0598*      sbc hl,de
0414B9 13          0599*      inc de
0414BA 13          0600*      inc de
0414BB             0601*  
0414BB             0602*      ;Iteration 9
0414BB F1          0603*      pop af
0414BC 17          0604*      rla
0414BD ED 6A       0605*      adc hl,hl
0414BF 17          0606*      rla
0414C0 ED 6A       0607*      adc hl,hl
0414C2 EB          0608*      ex de,hl
0414C3 29          0609*      add hl,hl
0414C4 ED 52       0610*      sbc hl,de
0414C6 19          0611*      add hl,de
0414C7 EB          0612*      ex de,hl
0414C8 30 04       0613*      jr nc,$+6
0414CA ED 52       0614*      sbc hl,de
0414CC 13          0615*      inc de
0414CD 13          0616*      inc de
0414CE             0617*  
0414CE             0618*      ;Iteration 10
0414CE 17          0619*      rla
0414CF ED 6A       0620*      adc hl,hl
0414D1 17          0621*      rla
0414D2 ED 6A       0622*      adc hl,hl
0414D4 EB          0623*      ex de,hl
0414D5 29          0624*      add hl,hl
0414D6 ED 52       0625*      sbc hl,de
0414D8 19          0626*      add hl,de
0414D9 EB          0627*      ex de,hl
0414DA 30 04       0628*      jr nc,$+6
0414DC ED 52       0629*      sbc hl,de
0414DE 13          0630*      inc de
0414DF 13          0631*      inc de
0414E0             0632*  
0414E0             0633*      ;Iteration 11
0414E0 17          0634*      rla
0414E1 ED 6A       0635*      adc hl,hl
0414E3 17          0636*      rla
0414E4 ED 6A       0637*      adc hl,hl
0414E6 EB          0638*      ex de,hl
0414E7 29          0639*      add hl,hl
0414E8 ED 52       0640*      sbc hl,de
0414EA 19          0641*      add hl,de
0414EB EB          0642*      ex de,hl
0414EC 30 04       0643*      jr nc,$+6
0414EE ED 52       0644*      sbc hl,de
0414F0 13          0645*      inc de
0414F1 13          0646*      inc de
0414F2             0647*  
0414F2             0648*      ;Iteration 11
0414F2 17          0649*      rla
0414F3 ED 6A       0650*      adc hl,hl
0414F5 17          0651*      rla
0414F6 ED 6A       0652*      adc hl,hl
0414F8 EB          0653*      ex de,hl
0414F9 29          0654*      add hl,hl
0414FA ED 52       0655*      sbc hl,de
0414FC 19          0656*      add hl,de
0414FD EB          0657*      ex de,hl
0414FE 30 04       0658*      jr nc,$+6
041500 ED 52       0659*      sbc hl,de
041502 13          0660*      inc de
041503 13          0661*      inc de
041504             0662*  
041504 CB 1A       0663*      rr d
041506 CB 1B       0664*      rr e
041508 C9          0665*      ret
041509             0046   	include "trig24.inc"
041509             0001*  
041509             0002*  ; convert signed angles from a 360 to 256 degree circle
041509             0003*  ; inputs: uh.l is the angle360 in 16.8 fixed format
041509             0004*  ; outputs: uh.l is the angle256 in 16.8 fixed format
041509             0005*  ; destroys: TODO
041509             0006*  deg_360_to_256:
041509 D5          0007*  	push de ; preserve de
04150A             0008*  ; make angle positive and store sign flag
04150A CD 32 10 04 0009*  	call hlu_abs
04150E F5          0010*  	push af
04150F             0011*  ; multiply by 256 first to keep precision
04150F             0012*  	hlu_mul256 ; uh.l = uh.l * 256
04150F 29          0001*M         add hl,hl ; * 2
041510 29          0002*M         add hl,hl ; * 4
041511 29          0003*M         add hl,hl ; * 8
041512 29          0004*M         add hl,hl ; * 16
041513 29          0005*M         add hl,hl ; * 32
041514 29          0006*M         add hl,hl ; * 64
041515 29          0007*M         add hl,hl ; * 128
041516 29          0008*M         add hl,hl ; * 256
041517             0013*  ; divide uh.l by 360
041517 11 68 01 00 0014*  	ld de,360
04151B CD 15 11 04 0015*  	call udiv24 ; ud.e = degrees / 360
04151F EB          0016*  	ex de,hl    ; uh.l = degrees / 360
041520             0017*  ; restore sign flag and adjust output accordingly
041520 F1          0018*  	pop af
041521 F2 29 15 04 0019*  	jp p,@pos ; positive number
041525 CD 42 10 04 0020*  	call neg_hlu
041529             0021*  @pos:
041529             0022*  ; restore de and return uh.l as the result
041529 D1          0023*  	pop de
04152A C9          0024*  	ret
04152B             0025*  
04152B             0026*  ; fixed 16.8 routine
04152B             0027*  ; cos(uh.l) --> uh.l
04152B             0028*  ; destroys: de
04152B             0029*  cos168:
04152B             0030*  ; for cos we simply increment the angle by 90 degrees
04152B             0031*  ; or 0x004000 in 16.8 degrees256
04152B             0032*  ; which makes it a sin problem
04152B 11 00 40 00 0033*      ld de,0x004000
04152F 19          0034*      add hl,de ; modulo 256 happens below
041530             0035*  ; fall through to sin168
041530             0036*  
041530             0037*  ; ---------------------
041530             0038*  ; fixed 16.8 routine
041530             0039*  ; sin(uh.l) --> uh.l
041530             0040*  ; destroys: af
041530             0041*  sin168:
041530 D5          0042*  	push de
041531 DD E5       0043*  	push ix
041533             0044*  ; handle negative angles appropriately
041533 CD 32 10 04 0045*  	call hlu_abs
041537 F2 40 15 04 0046*  	jp p,@f
04153B 11 00 00 FF 0047*  	ld de,-256*256
04153F 19          0048*  	add hl,de
041540             0049*  @@:
041540             0050*  ; get the lookup value for the integer portion of the angle
041540 7D          0051*  	ld a,l ; save fractional part of the angle
041541 2E 06       0052*  	ld l,6 ; multiply by 6 to get our lookup index
041543 EB          0053*  	ex de,hl ; can't add ix,hl
041544 ED 5C       0054*  	mlt de ; gosh that is handy
041546 DD 21 B2 19 0055*      ld ix,sin_lut_816 ; grab the lut address
       04          
04154B DD 19       0056*      add ix,de ; bump hl by the index
04154D DD 27 00    0057*      ld hl,(ix) ; hl = sin(int(angle))
041550 B7          0058*  	or a  ; check fractional part of the angle for zero
041551 CA 62 15 04 0059*  	jp z,@f ; no fractional part so skip interpolation
041555             0060*  ; interpolate the fractional part of the angle
041555 DD 17 03    0061*  	ld de,(ix+3)
041558 EB          0062*  	ex de,hl
041559 CD F4 12 04 0063*  	call smul24x8
04155D CD 7E 10 04 0064*  	call hlu_sdiv256
041561 19          0065*  	add hl,de ; hl = sin(int(angle)) + interpolation factor * (sin(int(angle+1)) - sin(int(angle))
041562             0066*  @@:
041562 CD 7E 10 04 0067*  	call hlu_sdiv256
041566 DD E1       0068*  	pop ix
041568 D1          0069*  	pop de
041569 C9          0070*      ret ; and out
04156A             0071*  
04156A             0072*  ; 16.8 fixed inputs / outputs
04156A             0073*  ; takes: uh.l as angle in degrees 256
04156A             0074*  ;        ud.e as radius
04156A             0075*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
04156A             0076*  ;        displacements from origin (0,0)
04156A             0077*  ; destroys: everything except indexes
04156A             0078*  polar_to_cartesian:
04156A             0079*  	; call printNewLine ; DEBUG
04156A             0080*  ; back up input parameters
04156A 22 95 15 04 0081*      ld (@angle), hl
04156E ED 53 98 15 0082*      ld (@radius), de
       04          
041573             0083*  ; compute dx = cos(uh.l) * ud.e
041573 CD 2B 15 04 0084*      call cos168 ; uh.l = cos(uh.l)
041577             0085*  	; call print_hex_hl ; DEBUG
041577             0086*  	; call print_s168_hl ; DEBUG
041577 ED 5B 98 15 0087*  	ld de,(@radius)
       04          
04157C CD 93 13 04 0088*  	call smul168 ; uh.l = dx
041580 E5          0089*      push hl
041581             0090*  ; compute dy = sin(uh.l) * ud.e
041581 2A 95 15 04 0091*      ld hl,(@angle)
041585 CD 30 15 04 0092*      call sin168 ; uh.l = sin(uh.l)
041589             0093*  	; call print_hex_hl ; DEBUG
041589             0094*  	; call print_s168_hl ; DEBUG
041589 ED 5B 98 15 0095*      ld de,(@radius)
       04          
04158E CD 93 13 04 0096*      call smul168    ; uh.l = dy
041592 EB          0097*      ex de,hl       ; de = dy for output
041593 C1          0098*      pop bc          ; bc = dx for output
041594             0099*  ; and out
041594 C9          0100*      ret
041595             0101*  @angle: ds 3
041598             0102*  @radius: ds 3
04159B             0103*  
04159B             0104*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
04159B             0105*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
04159B             0106*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
04159B             0107*  ;         also populates scratch locations dx168 and dy168
04159B             0108*  ; destroys: a,hl,bc,de
04159B             0109*  dxy168:
04159B             0110*  ; compute dx = x1-x0
04159B AF          0111*      xor a ; clear carry
04159C DD E5       0112*      push ix ; move ix to hl via the stack
04159E E1          0113*      pop hl ; hl = x1
04159F ED 42       0114*      sbc hl,bc ; hl = dx
0415A1 22 F6 15 04 0115*      ld (dx168),hl ; dx to scratch
0415A5             0116*  ; compute dy = y1-y0
0415A5 AF          0117*      xor a ; clear carry
0415A6 FD E5       0118*      push iy ; move iy to hl via the stack
0415A8 E1          0119*      pop hl ; hl = y1
0415A9 ED 52       0120*      sbc hl,de ; hl = dy
0415AB 22 FC 15 04 0121*      ld (dy168),hl ; dy to scratch
0415AF             0122*  ; populate output registers and return
0415AF EB          0123*      ex de,hl        ; ud.e = dy
0415B0 ED 4B F6 15 0124*      ld bc,(dx168)   ; ub.c = dx
       04          
0415B5 C9          0125*      ret
0415B6             0126*  
0415B6             0127*  ; compute the euclidian distance between two cartesian coordinates
0415B6             0128*  ; using the formula d = sqrt(dx^2+dy^2
0415B6             0129*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0415B6             0130*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0415B6             0131*  ; output; uh.l is the 16.8 fixed format distance
0415B6             0132*  ;       dx168/y are the 16.8 fixed format dx and dy
0415B6             0133*  ; destroys: a,hl,bc,de
0415B6             0134*  distance168:
0415B6             0135*  ; compute dx = x1-x0
0415B6 AF          0136*      xor a ; clear carry
0415B7 DD E5       0137*      push ix ; move ix to hl via the stack
0415B9 E1          0138*      pop hl ; hl = x1
0415BA ED 42       0139*      sbc hl,bc ; hl = dx
0415BC 22 F6 15 04 0140*      ld (dx168),hl ; dx to scratch
0415C0             0141*  ; ; test dx for overflow
0415C0             0142*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0415C0             0143*  ; 	ex de,hl
0415C0             0144*  ; 	sbc hl,de ; test for overflow
0415C0             0145*  ; 	push af ; carry indicates overflow
0415C0             0146*  ; compute dy = y1-y0
0415C0 AF          0147*      xor a ; clear carry
0415C1 FD E5       0148*      push iy ; move iy to hl via the stack
0415C3 E1          0149*      pop hl ; hl = y1
0415C4 ED 52       0150*      sbc hl,de ; hl = dy
0415C6 22 FC 15 04 0151*      ld (dy168),hl ; dy to scratch
0415CA             0152*  ; ; test dy for overflow
0415CA             0153*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0415CA             0154*  ; 	ex de,hl
0415CA             0155*  ; 	sbc hl,de ; test for overflow
0415CA             0156*  ; 	push af ; carry indicates overflow
0415CA             0157*  ; compute dy^2
0415CA 2A FC 15 04 0158*  	ld hl,(dy168)
0415CE CD 32 10 04 0159*      call hlu_abs  ; make dy positive so we can use unsigned multiply
0415D2             0160*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0415D2 E5          0161*      push hl ; load hl/2 to bc via the stack
0415D3 C1          0162*      pop bc ; bc = dy/2
0415D4 EB          0163*      ex de,hl ; de = dy/2
0415D5 CD 8B 13 04 0164*      call umul168 ; uh.l = dy^2/2
0415D9 E5          0165*      push hl ; dy^2/2 to the stack
0415DA             0166*  ; compute dx^2
0415DA 2A F6 15 04 0167*      ld hl,(dx168) ; get back dx
0415DE CD 32 10 04 0168*      call hlu_abs  ; make dx positive so we can use unsigned multiply
0415E2             0169*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0415E2 E5          0170*      push hl ; load hl/2 to bc via the stack
0415E3 C1          0171*      pop bc ; bc = dx/2
0415E4 EB          0172*      ex de,hl ; de = dx/2
0415E5 CD 8B 13 04 0173*      call umul168 ; uh.l = dx^2/2
0415E9             0174*  ; commpute dy^2+dx^2
0415E9 D1          0175*      pop de ; get back dx^2/2
0415EA 19          0176*      add hl,de ; hl = dx^2/2+dy^2/2
0415EB             0177*  ; compute sqrt(dx^2/2+dy^2/2)
0415EB CD 1E 14 04 0178*      call sqrt168 ; uh.l = distance/2
0415EF             0179*      ; add hl,hl ; hl = distance
0415EF             0180*  ; ; check for overflow
0415EF             0181*  ; 	pop af ; get back the overflow flags
0415EF             0182*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0415EF             0183*  ; 	ld b,a ; save the overflow flag
0415EF             0184*  ; 	pop af ; get back the overflow flags
0415EF             0185*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0415EF             0186*  ; 	add a,b ; if a != 0 then we had overflow
0415EF             0187*  ;     ret z ; no overflow we're done
0415EF             0188*  ; @overflow:
0415EF             0189*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0415EF C9          0190*  	ret
0415F0             0191*  @scratch: ds 6
0415F6             0192*  dx168: ds 6
0415FC             0193*  dy168: ds 6
041602             0194*  
041602             0195*  ; atan2(ub.c,ud.e) --> uh.l
041602             0196*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
041602             0197*  ;   whether inputs are integers or fractional doesn't matter
041602             0198*  ;   so long as the sign bit of the upper byte is correct
041602             0199*  ; output: uh.l is the 16.8 fixed angle in degrees 256
041602             0200*  ; angles are COMPASS HEADINGS based on
041602             0201*  ; screen coordinate conventions,where the y axis is flipped
041602             0202*  ; #E0 315      0       45 #20
041602             0203*  ;        -x,-y | +x,-y
041602             0204*  ; #C0 270------+------ 90 #40
041602             0205*  ;        -x,+y | +x,+y
041602             0206*  ; #A0 225   180 #80   135 #60
041602             0207*  atan2_168game:
041602             0208*  ; get signs and make everything positive
041602             0209*  ; get abs(x) and store its original sign
041602 C5          0210*      push bc
041603 E1          0211*      pop hl
041604 CD 32 10 04 0212*      call hlu_abs ; if x was negative this also sets the sign flag
041608 E5          0213*      push hl ; store abs(x)
041609 C1          0214*      pop bc ; bc = abs(x)
04160A F5          0215*      push af ; store sign of x
04160B             0216*  ; get abs(y) and store its original sign
04160B EB          0217*      ex de,hl ; hl = y
04160C CD 32 10 04 0218*      call hlu_abs ; if y was negative this also sets the sign flag
041610 EB          0219*      ex de,hl ; de = abs(y)
041611 F5          0220*      push af ; store sign of y
041612             0221*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
041612             0222*  ; this ensures that our lookup value is between 0 and 1 inclusive
041612 AF          0223*      xor a ; clear the carry flag
041613 D5          0224*      push de
041614 E1          0225*      pop hl
041615 ED 42       0226*      sbc hl,bc
041617 F5          0227*      push af ; save sign of de - bc
041618 F2 21 16 04 0228*      jp p,@1 ; bc <= de, so we skip ahead
04161C             0229*  ; otherwise we swap bc and de
04161C C5          0230*      push bc
04161D E1          0231*      pop hl
04161E EB          0232*      ex de,hl
04161F E5          0233*      push hl
041620 C1          0234*      pop bc
041621             0235*  @1:
041621             0236*  ; now we're ready to snag our preliminary result
041621 CD 8F 16 04 0237*      call atan_168game ; uh.l comes back with prelim result
041625             0238*  ; now we adjust uh.l based on sign of de - bc
041625 F1          0239*      pop af
041626 F2 32 16 04 0240*      jp p,@2 ; bc <= de,so we skip ahead
04162A EB          0241*      ex de,hl
04162B 21 00 40 00 0242*      ld hl,0x004000 ; 90 degrees
04162F AF          0243*      xor a ; clear the carry flag
041630 ED 52       0244*      sbc hl,de ; subtract result from 90 degrees
041632             0245*      ; ld de,0 ; prep to clear hlu
041632             0246*      ; ld d,h
041632             0247*      ; ld e,l
041632             0248*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
041632             0249*      ; fall through
041632             0250*  @2:
041632             0251*  ; now the fun part of adjusting the result
041632             0252*  ; based on which quadrant (x,y) is in
041632             0253*  ; #E0 315      0       45 #20
041632             0254*  ;        -x,-y | +x,-y
041632             0255*  ; #C0 270------+------ 90 #40
041632             0256*  ;        -x,+y | +x,+y
041632             0257*  ; #A0 225   180 #80   135 #60
041632 F1          0258*      pop af ; sign of y
041633 CA 70 16 04 0259*      jp z,@y_zero
041637 F2 50 16 04 0260*      jp p,@y_pos
04163B             0261*  ; y neg,check x
04163B F1          0262*      pop af ; sign of x
04163C CA 4A 16 04 0263*      jp z,@y_neg_x_zero
041640 F2 4F 16 04 0264*      jp p,@y_neg_x_pos
041644             0265*  ; y neg,x neg
041644             0266*  ; angle is 270-360
041644             0267*  ; negating the intermediate does the trick
041644 CD 42 10 04 0268*      call neg_hlu
041648 18 31       0269*      jr @zero_hlu
04164A             0270*  
04164A             0271*  @y_neg_x_zero:
04164A             0272*  ; y neg,x zero
04164A             0273*  ; angle is 0
04164A 21 00 00 00 0274*      ld hl,0
04164E C9          0275*      ret
04164F             0276*  @y_neg_x_pos:
04164F             0277*  ; y neg,x pos
04164F             0278*  ; angle is 0 to 90
04164F             0279*  ; so we're good
04164F C9          0280*      ret
041650             0281*  
041650             0282*  @y_pos:
041650 F1          0283*      pop af ; sign of x
041651 CA 60 16 04 0284*      jp z,@y_pos_x_zero
041655 F2 65 16 04 0285*      jp p,@y_pos_x_pos
041659             0286*  ; y pos,x neg
041659             0287*  ; angle is 180-270
041659             0288*  ; so we add 180 to intermediate
041659 11 00 80 00 0289*      ld de,0x008000
04165D 19          0290*      add hl,de
04165E 18 1B       0291*      jr @zero_hlu
041660             0292*  @y_pos_x_zero:
041660             0293*  ; y pos,x zero
041660             0294*  ; angle is 180
041660 21 00 80 00 0295*      ld hl,0x008000
041664 C9          0296*      ret
041665             0297*  @y_pos_x_pos:
041665             0298*  ; y pos,x pos
041665             0299*  ; angle is 90-180
041665             0300*  ; neg the intermediate and add 180 degrees
041665 CD 42 10 04 0301*      call neg_hlu
041669 11 00 80 00 0302*      ld de,0x008000
04166D 19          0303*      add hl,de
04166E 18 0B       0304*      jr @zero_hlu
041670             0305*  
041670             0306*  @y_zero:
041670 F1          0307*      pop af ; sign of x
041671 FA 76 16 04 0308*      jp m,@y_zero_x_neg
041675             0309*  ; y zero,x pos
041675             0310*  ; angle is 90,nothing to do
041675 C9          0311*      ret
041676             0312*  @y_zero_x_neg:
041676             0313*  ; y zero ,x neg
041676             0314*  ; angle is 270
041676 21 00 C0 00 0315*      ld hl,0x00C000
04167A C9          0316*      ret
04167B             0317*  @zero_hlu:
04167B AF          0318*      xor a
04167C 22 89 16 04 0319*      ld (@scratch),hl
041680 32 8B 16 04 0320*      ld (@scratch+2),a
041684 2A 89 16 04 0321*      ld hl,(@scratch)
041688 C9          0322*      ret
041689             0323*  @scratch: ds 6
04168F             0324*  
04168F             0325*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04168F             0326*  ; output: uh.l is the 16.8 fixed format angle
04168F             0327*  ; destroys: a,hl,bc,de
04168F             0328*  ; the following note was written by github copilot:
04168F             0329*  ; note: this routine is a bit of a hack
04168F             0330*  ;      but it works
04168F             0331*  ;      and it's fast
04168F             0332*  ;      and it's small
04168F             0333*  ;      and it's accurate
04168F             0334*  ;      and it's easy to understand
04168F             0335*  ;      and it's easy to modify
04168F             0336*  ;      and it's easy to use
04168F             0337*  ;      and it's easy to remember
04168F             0338*  ;      and it's easy to love
04168F             0339*  ;      and it's easy to hate
04168F             0340*  ;      and it's easy to ignore
04168F             0341*  ;      and it's easy to forget
04168F             0342*  ;      and it's easy to remember
04168F             0343*  ;      and it's easy to forget
04168F             0344*  ;      and it's easy to remember
04168F             0345*  ;      (ok the bot is stuck in a loop)
04168F             0346*  ; REAL NOTE: only works for angles from 0 to 45 degrees
04168F             0347*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
04168F             0348*  atan_168game:
04168F             0349*  ; because we use compass headings instead of geometric angles
04168F             0350*  ; we compute dx/dy which is 1/tan(theta) in the maths world
04168F             0351*  ; we can do faster unsigned division here because we know dx and dy are positive
04168F CD B6 13 04 0352*  	call udiv168 ; uh.l = dx/dy
041693             0353*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
041693             0354*  ; ; test uh.l for 0
041693             0355*  ;     add hl,de
041693             0356*  ;     or a
041693             0357*  ;     sbc hl,de
041693             0358*  ;     jr z,@is_zero
041693             0359*  ; ; test uh.l for 1
041693             0360*  ;     xor a ; clear carry
041693             0361*  ;     ex de,hl
041693             0362*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
041693             0363*  ;     sbc hl,de
041693             0364*  ;     jr z,@is_45
041693             0365*  ; ; END TODO
041693             0366*  
041693             0367*  ; no special cases so we move on
041693             0368*  ; l contains the fractional portion of tan(uh.l)
041693             0369*  ; we multiply it by three to get our lookup table index
041693 26 03       0370*      ld h,3
041695 ED 6C       0371*      mlt hl ; gosh that is handy
041697 11 00 00 00 0372*      ld de,0 ; clear deu
04169B 54          0373*      ld d,h ; copy hl to de
04169C 5D          0374*      ld e,l ; de contains our index
04169D 21 B8 22 04 0375*      ld hl,atan_lut_168 ; grab the lut address
0416A1 19          0376*      add hl,de ; bump hl by the index
0416A2 ED 27       0377*      ld hl,(hl) ; don't try this on a z80!
0416A4 C9          0378*      ret ; and out
0416A5             0379*  @is_45:
0416A5 21 00 20 00 0380*      ld hl,0x002000 ; 45 degrees decimal
0416A9 C9          0381*      ret
0416AA             0382*  ; for the case tan(0)
0416AA             0383*  @is_zero:
0416AA 21 00 00 00 0384*      ld hl,0x000000
0416AE C9          0385*      ret
0416AF             0386*  
0416AF             0387*  sin_lut_168:
0416AF 00 00 00    0388*  	dl 0x000000 ; 0.000 00, 0.000
0416B2 06 00 00    0389*  	dl 0x000006 ; 1.406 01, 0.025
0416B5 0C 00 00    0390*  	dl 0x00000C ; 2.813 02, 0.049
0416B8 12 00 00    0391*  	dl 0x000012 ; 4.219 03, 0.074
0416BB 19 00 00    0392*  	dl 0x000019 ; 5.625 04, 0.098
0416BE 1F 00 00    0393*  	dl 0x00001F ; 7.031 05, 0.122
0416C1 25 00 00    0394*  	dl 0x000025 ; 8.438 06, 0.147
0416C4 2B 00 00    0395*  	dl 0x00002B ; 9.844 07, 0.171
0416C7 31 00 00    0396*  	dl 0x000031 ; 11.250 08, 0.195
0416CA 38 00 00    0397*  	dl 0x000038 ; 12.656 09, 0.219
0416CD 3E 00 00    0398*  	dl 0x00003E ; 14.063 0A, 0.243
0416D0 44 00 00    0399*  	dl 0x000044 ; 15.469 0B, 0.267
0416D3 4A 00 00    0400*  	dl 0x00004A ; 16.875 0C, 0.290
0416D6 50 00 00    0401*  	dl 0x000050 ; 18.281 0D, 0.314
0416D9 56 00 00    0402*  	dl 0x000056 ; 19.688 0E, 0.337
0416DC 5C 00 00    0403*  	dl 0x00005C ; 21.094 0F, 0.360
0416DF 61 00 00    0404*  	dl 0x000061 ; 22.500 10, 0.383
0416E2 67 00 00    0405*  	dl 0x000067 ; 23.906 11, 0.405
0416E5 6D 00 00    0406*  	dl 0x00006D ; 25.313 12, 0.428
0416E8 73 00 00    0407*  	dl 0x000073 ; 26.719 13, 0.450
0416EB 78 00 00    0408*  	dl 0x000078 ; 28.125 14, 0.471
0416EE 7E 00 00    0409*  	dl 0x00007E ; 29.531 15, 0.493
0416F1 83 00 00    0410*  	dl 0x000083 ; 30.938 16, 0.514
0416F4 88 00 00    0411*  	dl 0x000088 ; 32.344 17, 0.535
0416F7 8E 00 00    0412*  	dl 0x00008E ; 33.750 18, 0.556
0416FA 93 00 00    0413*  	dl 0x000093 ; 35.156 19, 0.576
0416FD 98 00 00    0414*  	dl 0x000098 ; 36.563 1A, 0.596
041700 9D 00 00    0415*  	dl 0x00009D ; 37.969 1B, 0.615
041703 A2 00 00    0416*  	dl 0x0000A2 ; 39.375 1C, 0.634
041706 A7 00 00    0417*  	dl 0x0000A7 ; 40.781 1D, 0.653
041709 AB 00 00    0418*  	dl 0x0000AB ; 42.188 1E, 0.672
04170C B0 00 00    0419*  	dl 0x0000B0 ; 43.594 1F, 0.690
04170F B5 00 00    0420*  	dl 0x0000B5 ; 45.000 20, 0.707
041712 B9 00 00    0421*  	dl 0x0000B9 ; 46.406 21, 0.724
041715 BD 00 00    0422*  	dl 0x0000BD ; 47.813 22, 0.741
041718 C1 00 00    0423*  	dl 0x0000C1 ; 49.219 23, 0.757
04171B C5 00 00    0424*  	dl 0x0000C5 ; 50.625 24, 0.773
04171E C9 00 00    0425*  	dl 0x0000C9 ; 52.031 25, 0.788
041721 CD 00 00    0426*  	dl 0x0000CD ; 53.438 26, 0.803
041724 D1 00 00    0427*  	dl 0x0000D1 ; 54.844 27, 0.818
041727 D4 00 00    0428*  	dl 0x0000D4 ; 56.250 28, 0.831
04172A D8 00 00    0429*  	dl 0x0000D8 ; 57.656 29, 0.845
04172D DB 00 00    0430*  	dl 0x0000DB ; 59.063 2A, 0.858
041730 DE 00 00    0431*  	dl 0x0000DE ; 60.469 2B, 0.870
041733 E1 00 00    0432*  	dl 0x0000E1 ; 61.875 2C, 0.882
041736 E4 00 00    0433*  	dl 0x0000E4 ; 63.281 2D, 0.893
041739 E7 00 00    0434*  	dl 0x0000E7 ; 64.688 2E, 0.904
04173C EA 00 00    0435*  	dl 0x0000EA ; 66.094 2F, 0.914
04173F EC 00 00    0436*  	dl 0x0000EC ; 67.500 30, 0.924
041742 EE 00 00    0437*  	dl 0x0000EE ; 68.906 31, 0.933
041745 F1 00 00    0438*  	dl 0x0000F1 ; 70.313 32, 0.942
041748 F3 00 00    0439*  	dl 0x0000F3 ; 71.719 33, 0.950
04174B F4 00 00    0440*  	dl 0x0000F4 ; 73.125 34, 0.957
04174E F6 00 00    0441*  	dl 0x0000F6 ; 74.531 35, 0.964
041751 F8 00 00    0442*  	dl 0x0000F8 ; 75.938 36, 0.970
041754 F9 00 00    0443*  	dl 0x0000F9 ; 77.344 37, 0.976
041757 FB 00 00    0444*  	dl 0x0000FB ; 78.750 38, 0.981
04175A FC 00 00    0445*  	dl 0x0000FC ; 80.156 39, 0.985
04175D FD 00 00    0446*  	dl 0x0000FD ; 81.563 3A, 0.989
041760 FE 00 00    0447*  	dl 0x0000FE ; 82.969 3B, 0.992
041763 FE 00 00    0448*  	dl 0x0000FE ; 84.375 3C, 0.995
041766 FF 00 00    0449*  	dl 0x0000FF ; 85.781 3D, 0.997
041769 FF 00 00    0450*  	dl 0x0000FF ; 87.188 3E, 0.999
04176C FF 00 00    0451*  	dl 0x0000FF ; 88.594 3F, 1.000
04176F 00 01 00    0452*  	dl 0x000100 ; 90.000 40, 1.000
041772 FF 00 00    0453*  	dl 0x0000FF ; 91.406 41, 1.000
041775 FF 00 00    0454*  	dl 0x0000FF ; 92.813 42, 0.999
041778 FF 00 00    0455*  	dl 0x0000FF ; 94.219 43, 0.997
04177B FE 00 00    0456*  	dl 0x0000FE ; 95.625 44, 0.995
04177E FE 00 00    0457*  	dl 0x0000FE ; 97.031 45, 0.992
041781 FD 00 00    0458*  	dl 0x0000FD ; 98.438 46, 0.989
041784 FC 00 00    0459*  	dl 0x0000FC ; 99.844 47, 0.985
041787 FB 00 00    0460*  	dl 0x0000FB ; 101.250 48, 0.981
04178A F9 00 00    0461*  	dl 0x0000F9 ; 102.656 49, 0.976
04178D F8 00 00    0462*  	dl 0x0000F8 ; 104.063 4A, 0.970
041790 F6 00 00    0463*  	dl 0x0000F6 ; 105.469 4B, 0.964
041793 F4 00 00    0464*  	dl 0x0000F4 ; 106.875 4C, 0.957
041796 F3 00 00    0465*  	dl 0x0000F3 ; 108.281 4D, 0.950
041799 F1 00 00    0466*  	dl 0x0000F1 ; 109.688 4E, 0.942
04179C EE 00 00    0467*  	dl 0x0000EE ; 111.094 4F, 0.933
04179F EC 00 00    0468*  	dl 0x0000EC ; 112.500 50, 0.924
0417A2 EA 00 00    0469*  	dl 0x0000EA ; 113.906 51, 0.914
0417A5 E7 00 00    0470*  	dl 0x0000E7 ; 115.313 52, 0.904
0417A8 E4 00 00    0471*  	dl 0x0000E4 ; 116.719 53, 0.893
0417AB E1 00 00    0472*  	dl 0x0000E1 ; 118.125 54, 0.882
0417AE DE 00 00    0473*  	dl 0x0000DE ; 119.531 55, 0.870
0417B1 DB 00 00    0474*  	dl 0x0000DB ; 120.938 56, 0.858
0417B4 D8 00 00    0475*  	dl 0x0000D8 ; 122.344 57, 0.845
0417B7 D4 00 00    0476*  	dl 0x0000D4 ; 123.750 58, 0.831
0417BA D1 00 00    0477*  	dl 0x0000D1 ; 125.156 59, 0.818
0417BD CD 00 00    0478*  	dl 0x0000CD ; 126.563 5A, 0.803
0417C0 C9 00 00    0479*  	dl 0x0000C9 ; 127.969 5B, 0.788
0417C3 C5 00 00    0480*  	dl 0x0000C5 ; 129.375 5C, 0.773
0417C6 C1 00 00    0481*  	dl 0x0000C1 ; 130.781 5D, 0.757
0417C9 BD 00 00    0482*  	dl 0x0000BD ; 132.188 5E, 0.741
0417CC B9 00 00    0483*  	dl 0x0000B9 ; 133.594 5F, 0.724
0417CF B5 00 00    0484*  	dl 0x0000B5 ; 135.000 60, 0.707
0417D2 B0 00 00    0485*  	dl 0x0000B0 ; 136.406 61, 0.690
0417D5 AB 00 00    0486*  	dl 0x0000AB ; 137.813 62, 0.672
0417D8 A7 00 00    0487*  	dl 0x0000A7 ; 139.219 63, 0.653
0417DB A2 00 00    0488*  	dl 0x0000A2 ; 140.625 64, 0.634
0417DE 9D 00 00    0489*  	dl 0x00009D ; 142.031 65, 0.615
0417E1 98 00 00    0490*  	dl 0x000098 ; 143.438 66, 0.596
0417E4 93 00 00    0491*  	dl 0x000093 ; 144.844 67, 0.576
0417E7 8E 00 00    0492*  	dl 0x00008E ; 146.250 68, 0.556
0417EA 88 00 00    0493*  	dl 0x000088 ; 147.656 69, 0.535
0417ED 83 00 00    0494*  	dl 0x000083 ; 149.063 6A, 0.514
0417F0 7E 00 00    0495*  	dl 0x00007E ; 150.469 6B, 0.493
0417F3 78 00 00    0496*  	dl 0x000078 ; 151.875 6C, 0.471
0417F6 73 00 00    0497*  	dl 0x000073 ; 153.281 6D, 0.450
0417F9 6D 00 00    0498*  	dl 0x00006D ; 154.688 6E, 0.428
0417FC 67 00 00    0499*  	dl 0x000067 ; 156.094 6F, 0.405
0417FF 61 00 00    0500*  	dl 0x000061 ; 157.500 70, 0.383
041802 5C 00 00    0501*  	dl 0x00005C ; 158.906 71, 0.360
041805 56 00 00    0502*  	dl 0x000056 ; 160.313 72, 0.337
041808 50 00 00    0503*  	dl 0x000050 ; 161.719 73, 0.314
04180B 4A 00 00    0504*  	dl 0x00004A ; 163.125 74, 0.290
04180E 44 00 00    0505*  	dl 0x000044 ; 164.531 75, 0.267
041811 3E 00 00    0506*  	dl 0x00003E ; 165.938 76, 0.243
041814 38 00 00    0507*  	dl 0x000038 ; 167.344 77, 0.219
041817 31 00 00    0508*  	dl 0x000031 ; 168.750 78, 0.195
04181A 2B 00 00    0509*  	dl 0x00002B ; 170.156 79, 0.171
04181D 25 00 00    0510*  	dl 0x000025 ; 171.563 7A, 0.147
041820 1F 00 00    0511*  	dl 0x00001F ; 172.969 7B, 0.122
041823 19 00 00    0512*  	dl 0x000019 ; 174.375 7C, 0.098
041826 12 00 00    0513*  	dl 0x000012 ; 175.781 7D, 0.074
041829 0C 00 00    0514*  	dl 0x00000C ; 177.188 7E, 0.049
04182C 06 00 00    0515*  	dl 0x000006 ; 178.594 7F, 0.025
04182F 00 00 00    0516*  	dl 0x000000 ; 180.000 80, 0.000
041832 FA FF FF    0517*  	dl 0xFFFFFA ; 181.406 81, -0.025
041835 F4 FF FF    0518*  	dl 0xFFFFF4 ; 182.813 82, -0.049
041838 EE FF FF    0519*  	dl 0xFFFFEE ; 184.219 83, -0.074
04183B E7 FF FF    0520*  	dl 0xFFFFE7 ; 185.625 84, -0.098
04183E E1 FF FF    0521*  	dl 0xFFFFE1 ; 187.031 85, -0.122
041841 DB FF FF    0522*  	dl 0xFFFFDB ; 188.438 86, -0.147
041844 D5 FF FF    0523*  	dl 0xFFFFD5 ; 189.844 87, -0.171
041847 CF FF FF    0524*  	dl 0xFFFFCF ; 191.250 88, -0.195
04184A C8 FF FF    0525*  	dl 0xFFFFC8 ; 192.656 89, -0.219
04184D C2 FF FF    0526*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
041850 BC FF FF    0527*  	dl 0xFFFFBC ; 195.469 8B, -0.267
041853 B6 FF FF    0528*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
041856 B0 FF FF    0529*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
041859 AA FF FF    0530*  	dl 0xFFFFAA ; 199.688 8E, -0.337
04185C A4 FF FF    0531*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
04185F 9F FF FF    0532*  	dl 0xFFFF9F ; 202.500 90, -0.383
041862 99 FF FF    0533*  	dl 0xFFFF99 ; 203.906 91, -0.405
041865 93 FF FF    0534*  	dl 0xFFFF93 ; 205.313 92, -0.428
041868 8D FF FF    0535*  	dl 0xFFFF8D ; 206.719 93, -0.450
04186B 88 FF FF    0536*  	dl 0xFFFF88 ; 208.125 94, -0.471
04186E 82 FF FF    0537*  	dl 0xFFFF82 ; 209.531 95, -0.493
041871 7D FF FF    0538*  	dl 0xFFFF7D ; 210.938 96, -0.514
041874 78 FF FF    0539*  	dl 0xFFFF78 ; 212.344 97, -0.535
041877 72 FF FF    0540*  	dl 0xFFFF72 ; 213.750 98, -0.556
04187A 6D FF FF    0541*  	dl 0xFFFF6D ; 215.156 99, -0.576
04187D 68 FF FF    0542*  	dl 0xFFFF68 ; 216.563 9A, -0.596
041880 63 FF FF    0543*  	dl 0xFFFF63 ; 217.969 9B, -0.615
041883 5E FF FF    0544*  	dl 0xFFFF5E ; 219.375 9C, -0.634
041886 59 FF FF    0545*  	dl 0xFFFF59 ; 220.781 9D, -0.653
041889 55 FF FF    0546*  	dl 0xFFFF55 ; 222.188 9E, -0.672
04188C 50 FF FF    0547*  	dl 0xFFFF50 ; 223.594 9F, -0.690
04188F 4B FF FF    0548*  	dl 0xFFFF4B ; 225.000 A0, -0.707
041892 47 FF FF    0549*  	dl 0xFFFF47 ; 226.406 A1, -0.724
041895 43 FF FF    0550*  	dl 0xFFFF43 ; 227.813 A2, -0.741
041898 3F FF FF    0551*  	dl 0xFFFF3F ; 229.219 A3, -0.757
04189B 3B FF FF    0552*  	dl 0xFFFF3B ; 230.625 A4, -0.773
04189E 37 FF FF    0553*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0418A1 33 FF FF    0554*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0418A4 2F FF FF    0555*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0418A7 2C FF FF    0556*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0418AA 28 FF FF    0557*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0418AD 25 FF FF    0558*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0418B0 22 FF FF    0559*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0418B3 1F FF FF    0560*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0418B6 1C FF FF    0561*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0418B9 19 FF FF    0562*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0418BC 16 FF FF    0563*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0418BF 14 FF FF    0564*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0418C2 12 FF FF    0565*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0418C5 0F FF FF    0566*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0418C8 0D FF FF    0567*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0418CB 0C FF FF    0568*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0418CE 0A FF FF    0569*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0418D1 08 FF FF    0570*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0418D4 07 FF FF    0571*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0418D7 05 FF FF    0572*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0418DA 04 FF FF    0573*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0418DD 03 FF FF    0574*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0418E0 02 FF FF    0575*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0418E3 02 FF FF    0576*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0418E6 01 FF FF    0577*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0418E9 01 FF FF    0578*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0418EC 01 FF FF    0579*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0418EF 00 FF FF    0580*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0418F2 01 FF FF    0581*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0418F5 01 FF FF    0582*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0418F8 01 FF FF    0583*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0418FB 02 FF FF    0584*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0418FE 02 FF FF    0585*  	dl 0xFFFF02 ; 277.031 C5, -0.992
041901 03 FF FF    0586*  	dl 0xFFFF03 ; 278.438 C6, -0.989
041904 04 FF FF    0587*  	dl 0xFFFF04 ; 279.844 C7, -0.985
041907 05 FF FF    0588*  	dl 0xFFFF05 ; 281.250 C8, -0.981
04190A 07 FF FF    0589*  	dl 0xFFFF07 ; 282.656 C9, -0.976
04190D 08 FF FF    0590*  	dl 0xFFFF08 ; 284.063 CA, -0.970
041910 0A FF FF    0591*  	dl 0xFFFF0A ; 285.469 CB, -0.964
041913 0C FF FF    0592*  	dl 0xFFFF0C ; 286.875 CC, -0.957
041916 0D FF FF    0593*  	dl 0xFFFF0D ; 288.281 CD, -0.950
041919 0F FF FF    0594*  	dl 0xFFFF0F ; 289.688 CE, -0.942
04191C 12 FF FF    0595*  	dl 0xFFFF12 ; 291.094 CF, -0.933
04191F 14 FF FF    0596*  	dl 0xFFFF14 ; 292.500 D0, -0.924
041922 16 FF FF    0597*  	dl 0xFFFF16 ; 293.906 D1, -0.914
041925 19 FF FF    0598*  	dl 0xFFFF19 ; 295.313 D2, -0.904
041928 1C FF FF    0599*  	dl 0xFFFF1C ; 296.719 D3, -0.893
04192B 1F FF FF    0600*  	dl 0xFFFF1F ; 298.125 D4, -0.882
04192E 22 FF FF    0601*  	dl 0xFFFF22 ; 299.531 D5, -0.870
041931 25 FF FF    0602*  	dl 0xFFFF25 ; 300.938 D6, -0.858
041934 28 FF FF    0603*  	dl 0xFFFF28 ; 302.344 D7, -0.845
041937 2C FF FF    0604*  	dl 0xFFFF2C ; 303.750 D8, -0.831
04193A 2F FF FF    0605*  	dl 0xFFFF2F ; 305.156 D9, -0.818
04193D 33 FF FF    0606*  	dl 0xFFFF33 ; 306.563 DA, -0.803
041940 37 FF FF    0607*  	dl 0xFFFF37 ; 307.969 DB, -0.788
041943 3B FF FF    0608*  	dl 0xFFFF3B ; 309.375 DC, -0.773
041946 3F FF FF    0609*  	dl 0xFFFF3F ; 310.781 DD, -0.757
041949 43 FF FF    0610*  	dl 0xFFFF43 ; 312.188 DE, -0.741
04194C 47 FF FF    0611*  	dl 0xFFFF47 ; 313.594 DF, -0.724
04194F 4B FF FF    0612*  	dl 0xFFFF4B ; 315.000 E0, -0.707
041952 50 FF FF    0613*  	dl 0xFFFF50 ; 316.406 E1, -0.690
041955 55 FF FF    0614*  	dl 0xFFFF55 ; 317.813 E2, -0.672
041958 59 FF FF    0615*  	dl 0xFFFF59 ; 319.219 E3, -0.653
04195B 5E FF FF    0616*  	dl 0xFFFF5E ; 320.625 E4, -0.634
04195E 63 FF FF    0617*  	dl 0xFFFF63 ; 322.031 E5, -0.615
041961 68 FF FF    0618*  	dl 0xFFFF68 ; 323.438 E6, -0.596
041964 6D FF FF    0619*  	dl 0xFFFF6D ; 324.844 E7, -0.576
041967 72 FF FF    0620*  	dl 0xFFFF72 ; 326.250 E8, -0.556
04196A 78 FF FF    0621*  	dl 0xFFFF78 ; 327.656 E9, -0.535
04196D 7D FF FF    0622*  	dl 0xFFFF7D ; 329.063 EA, -0.514
041970 82 FF FF    0623*  	dl 0xFFFF82 ; 330.469 EB, -0.493
041973 88 FF FF    0624*  	dl 0xFFFF88 ; 331.875 EC, -0.471
041976 8D FF FF    0625*  	dl 0xFFFF8D ; 333.281 ED, -0.450
041979 93 FF FF    0626*  	dl 0xFFFF93 ; 334.688 EE, -0.428
04197C 99 FF FF    0627*  	dl 0xFFFF99 ; 336.094 EF, -0.405
04197F 9F FF FF    0628*  	dl 0xFFFF9F ; 337.500 F0, -0.383
041982 A4 FF FF    0629*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
041985 AA FF FF    0630*  	dl 0xFFFFAA ; 340.313 F2, -0.337
041988 B0 FF FF    0631*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
04198B B6 FF FF    0632*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
04198E BC FF FF    0633*  	dl 0xFFFFBC ; 344.531 F5, -0.267
041991 C2 FF FF    0634*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
041994 C8 FF FF    0635*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
041997 CF FF FF    0636*  	dl 0xFFFFCF ; 348.750 F8, -0.195
04199A D5 FF FF    0637*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
04199D DB FF FF    0638*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0419A0 E1 FF FF    0639*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0419A3 E7 FF FF    0640*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0419A6 EE FF FF    0641*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0419A9 F4 FF FF    0642*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0419AC FA FF FF    0643*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0419AF 00 00 00    0644*  	dl 0x000000 ; 0.000 00, 0.000 for interpolation
0419B2             0645*  
0419B2             0646*  sin_lut_816:
0419B2 00 00 00 48 0647*      dl 0x000000,0x000648 ; 00 000.000 0.000
       06 00       
0419B8 48 06 00 48 0648*      dl 0x000648,0x000648 ; 01 001.406 0.025
       06 00       
0419BE 90 0C 00 45 0649*      dl 0x000C90,0x000645 ; 02 002.813 0.049
       06 00       
0419C4 D5 12 00 42 0650*      dl 0x0012D5,0x000642 ; 03 004.219 0.074
       06 00       
0419CA 17 19 00 3E 0651*      dl 0x001917,0x00063E ; 04 005.625 0.098
       06 00       
0419D0 56 1F 00 3A 0652*      dl 0x001F56,0x00063A ; 05 007.031 0.122
       06 00       
0419D6 90 25 00 33 0653*      dl 0x002590,0x000633 ; 06 008.438 0.147
       06 00       
0419DC C4 2B 00 2C 0654*      dl 0x002BC4,0x00062C ; 07 009.844 0.171
       06 00       
0419E2 F1 31 00 25 0655*      dl 0x0031F1,0x000625 ; 08 011.250 0.195
       06 00       
0419E8 16 38 00 1D 0656*      dl 0x003816,0x00061D ; 09 012.656 0.219
       06 00       
0419EE 34 3E 00 13 0657*      dl 0x003E34,0x000613 ; 0A 014.063 0.243
       06 00       
0419F4 47 44 00 08 0658*      dl 0x004447,0x000608 ; 0B 015.469 0.267
       06 00       
0419FA 50 4A 00 FD 0659*      dl 0x004A50,0x0005FD ; 0C 016.875 0.290
       05 00       
041A00 4D 50 00 F1 0660*      dl 0x00504D,0x0005F1 ; 0D 018.281 0.314
       05 00       
041A06 3E 56 00 E3 0661*      dl 0x00563E,0x0005E3 ; 0E 019.688 0.337
       05 00       
041A0C 22 5C 00 D5 0662*      dl 0x005C22,0x0005D5 ; 0F 021.094 0.360
       05 00       
041A12 F7 61 00 C6 0663*      dl 0x0061F7,0x0005C6 ; 10 022.500 0.383
       05 00       
041A18 BD 67 00 B7 0664*      dl 0x0067BD,0x0005B7 ; 11 023.906 0.405
       05 00       
041A1E 74 6D 00 A5 0665*      dl 0x006D74,0x0005A5 ; 12 025.313 0.428
       05 00       
041A24 19 73 00 93 0666*      dl 0x007319,0x000593 ; 13 026.719 0.450
       05 00       
041A2A AD 78 00 80 0667*      dl 0x0078AD,0x000580 ; 14 028.125 0.471
       05 00       
041A30 2E 7E 00 6E 0668*      dl 0x007E2E,0x00056E ; 15 029.531 0.493
       05 00       
041A36 9C 83 00 59 0669*      dl 0x00839C,0x000559 ; 16 030.938 0.514
       05 00       
041A3C F5 88 00 44 0670*      dl 0x0088F5,0x000544 ; 17 032.344 0.535
       05 00       
041A42 39 8E 00 2E 0671*      dl 0x008E39,0x00052E ; 18 033.750 0.556
       05 00       
041A48 67 93 00 18 0672*      dl 0x009367,0x000518 ; 19 035.156 0.576
       05 00       
041A4E 80 98 00 FF 0673*      dl 0x009880,0x0004FF ; 1A 036.563 0.596
       04 00       
041A54 80 9D 00 E7 0674*      dl 0x009D80,0x0004E7 ; 1B 037.969 0.615
       04 00       
041A5A 67 A2 00 CE 0675*      dl 0x00A267,0x0004CE ; 1C 039.375 0.634
       04 00       
041A60 36 A7 00 B5 0676*      dl 0x00A736,0x0004B5 ; 1D 040.781 0.653
       04 00       
041A66 EB AB 00 9A 0677*      dl 0x00ABEB,0x00049A ; 1E 042.188 0.672
       04 00       
041A6C 85 B0 00 7F 0678*      dl 0x00B085,0x00047F ; 1F 043.594 0.690
       04 00       
041A72 04 B5 00 63 0679*      dl 0x00B504,0x000463 ; 20 045.000 0.707
       04 00       
041A78 68 B9 00 47 0680*      dl 0x00B968,0x000447 ; 21 046.406 0.724
       04 00       
041A7E AF BD 00 29 0681*      dl 0x00BDAF,0x000429 ; 22 047.813 0.741
       04 00       
041A84 D8 C1 00 0B 0682*      dl 0x00C1D8,0x00040B ; 23 049.219 0.757
       04 00       
041A8A E4 C5 00 EC 0683*      dl 0x00C5E4,0x0003EC ; 24 050.625 0.773
       03 00       
041A90 D0 C9 00 CE 0684*      dl 0x00C9D0,0x0003CE ; 25 052.031 0.788
       03 00       
041A96 9F CD 00 AE 0685*      dl 0x00CD9F,0x0003AE ; 26 053.438 0.803
       03 00       
041A9C 4D D1 00 8D 0686*      dl 0x00D14D,0x00038D ; 27 054.844 0.818
       03 00       
041AA2 DB D4 00 6C 0687*      dl 0x00D4DB,0x00036C ; 28 056.250 0.831
       03 00       
041AA8 48 D8 00 4C 0688*      dl 0x00D848,0x00034C ; 29 057.656 0.845
       03 00       
041AAE 94 DB 00 29 0689*      dl 0x00DB94,0x000329 ; 2A 059.063 0.858
       03 00       
041AB4 BE DE 00 07 0690*      dl 0x00DEBE,0x000307 ; 2B 060.469 0.870
       03 00       
041ABA C5 E1 00 E4 0691*      dl 0x00E1C5,0x0002E4 ; 2C 061.875 0.882
       02 00       
041AC0 AA E4 00 C1 0692*      dl 0x00E4AA,0x0002C1 ; 2D 063.281 0.893
       02 00       
041AC6 6C E7 00 9D 0693*      dl 0x00E76C,0x00029D ; 2E 064.688 0.904
       02 00       
041ACC 09 EA 00 79 0694*      dl 0x00EA09,0x000279 ; 2F 066.094 0.914
       02 00       
041AD2 83 EC 00 55 0695*      dl 0x00EC83,0x000255 ; 30 067.500 0.924
       02 00       
041AD8 D8 EE 00 30 0696*      dl 0x00EED8,0x000230 ; 31 068.906 0.933
       02 00       
041ADE 09 F1 00 0B 0697*      dl 0x00F109,0x00020B ; 32 070.313 0.942
       02 00       
041AE4 14 F3 00 E5 0698*      dl 0x00F314,0x0001E5 ; 33 071.719 0.950
       01 00       
041AEA FA F4 00 BF 0699*      dl 0x00F4FA,0x0001BF ; 34 073.125 0.957
       01 00       
041AF0 B9 F6 00 9A 0700*      dl 0x00F6B9,0x00019A ; 35 074.531 0.964
       01 00       
041AF6 54 F8 00 73 0701*      dl 0x00F854,0x000173 ; 36 075.938 0.970
       01 00       
041AFC C7 F9 00 4D 0702*      dl 0x00F9C7,0x00014D ; 37 077.344 0.976
       01 00       
041B02 14 FB 00 26 0703*      dl 0x00FB14,0x000126 ; 38 078.750 0.981
       01 00       
041B08 3B FC 00 FF 0704*      dl 0x00FC3B,0x0000FF ; 39 080.156 0.985
       00 00       
041B0E 3A FD 00 D8 0705*      dl 0x00FD3A,0x0000D8 ; 3A 081.563 0.989
       00 00       
041B14 13 FE 00 B1 0706*      dl 0x00FE13,0x0000B1 ; 3B 082.969 0.992
       00 00       
041B1A C4 FE 00 89 0707*      dl 0x00FEC4,0x000089 ; 3C 084.375 0.995
       00 00       
041B20 4E FF 00 62 0708*      dl 0x00FF4E,0x000062 ; 3D 085.781 0.997
       00 00       
041B26 B1 FF 00 3B 0709*      dl 0x00FFB1,0x00003B ; 3E 087.188 0.999
       00 00       
041B2C EC FF 00 13 0710*      dl 0x00FFEC,0x000013 ; 3F 088.594 1.000
       00 00       
041B32 00 00 01 EC 0711*      dl 0x010000,0xFFFFEC ; 40 090.000 1.000
       FF FF       
041B38 EC FF 00 C4 0712*      dl 0x00FFEC,0xFFFFC4 ; 41 091.406 1.000
       FF FF       
041B3E B1 FF 00 9D 0713*      dl 0x00FFB1,0xFFFF9D ; 42 092.813 0.999
       FF FF       
041B44 4E FF 00 76 0714*      dl 0x00FF4E,0xFFFF76 ; 43 094.219 0.997
       FF FF       
041B4A C4 FE 00 4E 0715*      dl 0x00FEC4,0xFFFF4E ; 44 095.625 0.995
       FF FF       
041B50 13 FE 00 27 0716*      dl 0x00FE13,0xFFFF27 ; 45 097.031 0.992
       FF FF       
041B56 3A FD 00 00 0717*      dl 0x00FD3A,0xFFFF00 ; 46 098.438 0.989
       FF FF       
041B5C 3B FC 00 D9 0718*      dl 0x00FC3B,0xFFFED9 ; 47 099.844 0.985
       FE FF       
041B62 14 FB 00 B2 0719*      dl 0x00FB14,0xFFFEB2 ; 48 101.250 0.981
       FE FF       
041B68 C7 F9 00 8C 0720*      dl 0x00F9C7,0xFFFE8C ; 49 102.656 0.976
       FE FF       
041B6E 53 F8 00 66 0721*      dl 0x00F853,0xFFFE66 ; 4A 104.063 0.970
       FE FF       
041B74 B9 F6 00 40 0722*      dl 0x00F6B9,0xFFFE40 ; 4B 105.469 0.964
       FE FF       
041B7A FA F4 00 1A 0723*      dl 0x00F4FA,0xFFFE1A ; 4C 106.875 0.957
       FE FF       
041B80 14 F3 00 F4 0724*      dl 0x00F314,0xFFFDF4 ; 4D 108.281 0.950
       FD FF       
041B86 08 F1 00 CF 0725*      dl 0x00F108,0xFFFDCF ; 4E 109.688 0.942
       FD FF       
041B8C D8 EE 00 AA 0726*      dl 0x00EED8,0xFFFDAA ; 4F 111.094 0.933
       FD FF       
041B92 83 EC 00 86 0727*      dl 0x00EC83,0xFFFD86 ; 50 112.500 0.924
       FD FF       
041B98 09 EA 00 61 0728*      dl 0x00EA09,0xFFFD61 ; 51 113.906 0.914
       FD FF       
041B9E 6B E7 00 3E 0729*      dl 0x00E76B,0xFFFD3E ; 52 115.313 0.904
       FD FF       
041BA4 AA E4 00 1B 0730*      dl 0x00E4AA,0xFFFD1B ; 53 116.719 0.893
       FD FF       
041BAA C5 E1 00 F8 0731*      dl 0x00E1C5,0xFFFCF8 ; 54 118.125 0.882
       FC FF       
041BB0 BE DE 00 D5 0732*      dl 0x00DEBE,0xFFFCD5 ; 55 119.531 0.870
       FC FF       
041BB6 93 DB 00 B4 0733*      dl 0x00DB93,0xFFFCB4 ; 56 120.938 0.858
       FC FF       
041BBC 48 D8 00 93 0734*      dl 0x00D848,0xFFFC93 ; 57 122.344 0.845
       FC FF       
041BC2 DB D4 00 72 0735*      dl 0x00D4DB,0xFFFC72 ; 58 123.750 0.831
       FC FF       
041BC8 4D D1 00 51 0736*      dl 0x00D14D,0xFFFC51 ; 59 125.156 0.818
       FC FF       
041BCE 9E CD 00 32 0737*      dl 0x00CD9E,0xFFFC32 ; 5A 126.563 0.803
       FC FF       
041BD4 D0 C9 00 13 0738*      dl 0x00C9D0,0xFFFC13 ; 5B 127.969 0.788
       FC FF       
041BDA E4 C5 00 F4 0739*      dl 0x00C5E4,0xFFFBF4 ; 5C 129.375 0.773
       FB FF       
041BE0 D8 C1 00 D5 0740*      dl 0x00C1D8,0xFFFBD5 ; 5D 130.781 0.757
       FB FF       
041BE6 AE BD 00 B9 0741*      dl 0x00BDAE,0xFFFBB9 ; 5E 132.188 0.741
       FB FF       
041BEC 68 B9 00 9C 0742*      dl 0x00B968,0xFFFB9C ; 5F 133.594 0.724
       FB FF       
041BF2 04 B5 00 80 0743*      dl 0x00B504,0xFFFB80 ; 60 135.000 0.707
       FB FF       
041BF8 85 B0 00 64 0744*      dl 0x00B085,0xFFFB64 ; 61 136.406 0.690
       FB FF       
041BFE EA AB 00 4B 0745*      dl 0x00ABEA,0xFFFB4B ; 62 137.813 0.672
       FB FF       
041C04 36 A7 00 31 0746*      dl 0x00A736,0xFFFB31 ; 63 139.219 0.653
       FB FF       
041C0A 67 A2 00 18 0747*      dl 0x00A267,0xFFFB18 ; 64 140.625 0.634
       FB FF       
041C10 80 9D 00 FF 0748*      dl 0x009D80,0xFFFAFF ; 65 142.031 0.615
       FA FF       
041C16 7F 98 00 E8 0749*      dl 0x00987F,0xFFFAE8 ; 66 143.438 0.596
       FA FF       
041C1C 67 93 00 D1 0750*      dl 0x009367,0xFFFAD1 ; 67 144.844 0.576
       FA FF       
041C22 39 8E 00 BB 0751*      dl 0x008E39,0xFFFABB ; 68 146.250 0.556
       FA FF       
041C28 F5 88 00 A5 0752*      dl 0x0088F5,0xFFFAA5 ; 69 147.656 0.535
       FA FF       
041C2E 9B 83 00 92 0753*      dl 0x00839B,0xFFFA92 ; 6A 149.063 0.514
       FA FF       
041C34 2E 7E 00 7F 0754*      dl 0x007E2E,0xFFFA7F ; 6B 150.469 0.493
       FA FF       
041C3A AD 78 00 6C 0755*      dl 0x0078AD,0xFFFA6C ; 6C 151.875 0.471
       FA FF       
041C40 19 73 00 59 0756*      dl 0x007319,0xFFFA59 ; 6D 153.281 0.450
       FA FF       
041C46 73 6D 00 49 0757*      dl 0x006D73,0xFFFA49 ; 6E 154.688 0.428
       FA FF       
041C4C BD 67 00 39 0758*      dl 0x0067BD,0xFFFA39 ; 6F 156.094 0.405
       FA FF       
041C52 F7 61 00 2A 0759*      dl 0x0061F7,0xFFFA2A ; 70 157.500 0.383
       FA FF       
041C58 22 5C 00 1B 0760*      dl 0x005C22,0xFFFA1B ; 71 158.906 0.360
       FA FF       
041C5E 3D 56 00 0F 0761*      dl 0x00563D,0xFFFA0F ; 72 160.313 0.337
       FA FF       
041C64 4D 50 00 02 0762*      dl 0x00504D,0xFFFA02 ; 73 161.719 0.314
       FA FF       
041C6A 50 4A 00 F7 0763*      dl 0x004A50,0xFFF9F7 ; 74 163.125 0.290
       F9 FF       
041C70 47 44 00 EB 0764*      dl 0x004447,0xFFF9EB ; 75 164.531 0.267
       F9 FF       
041C76 33 3E 00 E3 0765*      dl 0x003E33,0xFFF9E3 ; 76 165.938 0.243
       F9 FF       
041C7C 16 38 00 DA 0766*      dl 0x003816,0xFFF9DA ; 77 167.344 0.219
       F9 FF       
041C82 F1 31 00 D3 0767*      dl 0x0031F1,0xFFF9D3 ; 78 168.750 0.195
       F9 FF       
041C88 C4 2B 00 CB 0768*      dl 0x002BC4,0xFFF9CB ; 79 170.156 0.171
       F9 FF       
041C8E 8F 25 00 C6 0769*      dl 0x00258F,0xFFF9C6 ; 7A 171.563 0.147
       F9 FF       
041C94 56 1F 00 C1 0770*      dl 0x001F56,0xFFF9C1 ; 7B 172.969 0.122
       F9 FF       
041C9A 17 19 00 BD 0771*      dl 0x001917,0xFFF9BD ; 7C 174.375 0.098
       F9 FF       
041CA0 D5 12 00 B9 0772*      dl 0x0012D5,0xFFF9B9 ; 7D 175.781 0.074
       F9 FF       
041CA6 8F 0C 00 B8 0773*      dl 0x000C8F,0xFFF9B8 ; 7E 177.188 0.049
       F9 FF       
041CAC 48 06 00 B7 0774*      dl 0x000648,0xFFF9B7 ; 7F 178.594 0.025
       F9 FF       
041CB2 00 00 00 B7 0775*      dl 0x000000,0xFFF9B7 ; 80 180.000 0.000
       F9 FF       
041CB8 B8 F9 FF B7 0776*      dl 0xFFF9B8,0xFFF9B7 ; 81 181.406 -0.025
       F9 FF       
041CBE 70 F3 FF BA 0777*      dl 0xFFF370,0xFFF9BA ; 82 182.813 -0.049
       F9 FF       
041CC4 2B ED FF BD 0778*      dl 0xFFED2B,0xFFF9BD ; 83 184.219 -0.074
       F9 FF       
041CCA E9 E6 FF C1 0779*      dl 0xFFE6E9,0xFFF9C1 ; 84 185.625 -0.098
       F9 FF       
041CD0 AA E0 FF C5 0780*      dl 0xFFE0AA,0xFFF9C5 ; 85 187.031 -0.122
       F9 FF       
041CD6 70 DA FF CC 0781*      dl 0xFFDA70,0xFFF9CC ; 86 188.438 -0.147
       F9 FF       
041CDC 3C D4 FF D3 0782*      dl 0xFFD43C,0xFFF9D3 ; 87 189.844 -0.171
       F9 FF       
041CE2 0F CE FF DA 0783*      dl 0xFFCE0F,0xFFF9DA ; 88 191.250 -0.195
       F9 FF       
041CE8 EA C7 FF E2 0784*      dl 0xFFC7EA,0xFFF9E2 ; 89 192.656 -0.219
       F9 FF       
041CEE CC C1 FF EC 0785*      dl 0xFFC1CC,0xFFF9EC ; 8A 194.063 -0.243
       F9 FF       
041CF4 B9 BB FF F7 0786*      dl 0xFFBBB9,0xFFF9F7 ; 8B 195.469 -0.267
       F9 FF       
041CFA B0 B5 FF 02 0787*      dl 0xFFB5B0,0xFFFA02 ; 8C 196.875 -0.290
       FA FF       
041D00 B3 AF FF 0E 0788*      dl 0xFFAFB3,0xFFFA0E ; 8D 198.281 -0.314
       FA FF       
041D06 C2 A9 FF 1C 0789*      dl 0xFFA9C2,0xFFFA1C ; 8E 199.688 -0.337
       FA FF       
041D0C DE A3 FF 2A 0790*      dl 0xFFA3DE,0xFFFA2A ; 8F 201.094 -0.360
       FA FF       
041D12 09 9E FF 39 0791*      dl 0xFF9E09,0xFFFA39 ; 90 202.500 -0.383
       FA FF       
041D18 43 98 FF 48 0792*      dl 0xFF9843,0xFFFA48 ; 91 203.906 -0.405
       FA FF       
041D1E 8C 92 FF 5A 0793*      dl 0xFF928C,0xFFFA5A ; 92 205.313 -0.428
       FA FF       
041D24 E7 8C FF 6C 0794*      dl 0xFF8CE7,0xFFFA6C ; 93 206.719 -0.450
       FA FF       
041D2A 53 87 FF 7F 0795*      dl 0xFF8753,0xFFFA7F ; 94 208.125 -0.471
       FA FF       
041D30 D2 81 FF 91 0796*      dl 0xFF81D2,0xFFFA91 ; 95 209.531 -0.493
       FA FF       
041D36 64 7C FF A6 0797*      dl 0xFF7C64,0xFFFAA6 ; 96 210.938 -0.514
       FA FF       
041D3C 0B 77 FF BB 0798*      dl 0xFF770B,0xFFFABB ; 97 212.344 -0.535
       FA FF       
041D42 C7 71 FF D1 0799*      dl 0xFF71C7,0xFFFAD1 ; 98 213.750 -0.556
       FA FF       
041D48 99 6C FF E7 0800*      dl 0xFF6C99,0xFFFAE7 ; 99 215.156 -0.576
       FA FF       
041D4E 80 67 FF 00 0801*      dl 0xFF6780,0xFFFB00 ; 9A 216.563 -0.596
       FB FF       
041D54 80 62 FF 18 0802*      dl 0xFF6280,0xFFFB18 ; 9B 217.969 -0.615
       FB FF       
041D5A 99 5D FF 31 0803*      dl 0xFF5D99,0xFFFB31 ; 9C 219.375 -0.634
       FB FF       
041D60 CA 58 FF 4A 0804*      dl 0xFF58CA,0xFFFB4A ; 9D 220.781 -0.653
       FB FF       
041D66 15 54 FF 65 0805*      dl 0xFF5415,0xFFFB65 ; 9E 222.188 -0.672
       FB FF       
041D6C 7B 4F FF 80 0806*      dl 0xFF4F7B,0xFFFB80 ; 9F 223.594 -0.690
       FB FF       
041D72 FC 4A FF 9C 0807*      dl 0xFF4AFC,0xFFFB9C ; A0 225.000 -0.707
       FB FF       
041D78 98 46 FF B8 0808*      dl 0xFF4698,0xFFFBB8 ; A1 226.406 -0.724
       FB FF       
041D7E 51 42 FF D6 0809*      dl 0xFF4251,0xFFFBD6 ; A2 227.813 -0.741
       FB FF       
041D84 28 3E FF F4 0810*      dl 0xFF3E28,0xFFFBF4 ; A3 229.219 -0.757
       FB FF       
041D8A 1C 3A FF 13 0811*      dl 0xFF3A1C,0xFFFC13 ; A4 230.625 -0.773
       FC FF       
041D90 30 36 FF 31 0812*      dl 0xFF3630,0xFFFC31 ; A5 232.031 -0.788
       FC FF       
041D96 61 32 FF 51 0813*      dl 0xFF3261,0xFFFC51 ; A6 233.438 -0.803
       FC FF       
041D9C B3 2E FF 72 0814*      dl 0xFF2EB3,0xFFFC72 ; A7 234.844 -0.818
       FC FF       
041DA2 25 2B FF 93 0815*      dl 0xFF2B25,0xFFFC93 ; A8 236.250 -0.831
       FC FF       
041DA8 B8 27 FF B3 0816*      dl 0xFF27B8,0xFFFCB3 ; A9 237.656 -0.845
       FC FF       
041DAE 6C 24 FF D6 0817*      dl 0xFF246C,0xFFFCD6 ; AA 239.063 -0.858
       FC FF       
041DB4 42 21 FF F8 0818*      dl 0xFF2142,0xFFFCF8 ; AB 240.469 -0.870
       FC FF       
041DBA 3B 1E FF 1B 0819*      dl 0xFF1E3B,0xFFFD1B ; AC 241.875 -0.882
       FD FF       
041DC0 56 1B FF 3E 0820*      dl 0xFF1B56,0xFFFD3E ; AD 243.281 -0.893
       FD FF       
041DC6 94 18 FF 62 0821*      dl 0xFF1894,0xFFFD62 ; AE 244.688 -0.904
       FD FF       
041DCC F7 15 FF 86 0822*      dl 0xFF15F7,0xFFFD86 ; AF 246.094 -0.914
       FD FF       
041DD2 7D 13 FF AA 0823*      dl 0xFF137D,0xFFFDAA ; B0 247.500 -0.924
       FD FF       
041DD8 28 11 FF CF 0824*      dl 0xFF1128,0xFFFDCF ; B1 248.906 -0.933
       FD FF       
041DDE F7 0E FF F4 0825*      dl 0xFF0EF7,0xFFFDF4 ; B2 250.313 -0.942
       FD FF       
041DE4 EC 0C FF 1A 0826*      dl 0xFF0CEC,0xFFFE1A ; B3 251.719 -0.950
       FE FF       
041DEA 06 0B FF 40 0827*      dl 0xFF0B06,0xFFFE40 ; B4 253.125 -0.957
       FE FF       
041DF0 47 09 FF 65 0828*      dl 0xFF0947,0xFFFE65 ; B5 254.531 -0.964
       FE FF       
041DF6 AC 07 FF 8C 0829*      dl 0xFF07AC,0xFFFE8C ; B6 255.938 -0.970
       FE FF       
041DFC 39 06 FF B2 0830*      dl 0xFF0639,0xFFFEB2 ; B7 257.344 -0.976
       FE FF       
041E02 EC 04 FF D9 0831*      dl 0xFF04EC,0xFFFED9 ; B8 258.750 -0.981
       FE FF       
041E08 C5 03 FF 00 0832*      dl 0xFF03C5,0xFFFF00 ; B9 260.156 -0.985
       FF FF       
041E0E C6 02 FF 27 0833*      dl 0xFF02C6,0xFFFF27 ; BA 261.563 -0.989
       FF FF       
041E14 ED 01 FF 4E 0834*      dl 0xFF01ED,0xFFFF4E ; BB 262.969 -0.992
       FF FF       
041E1A 3C 01 FF 76 0835*      dl 0xFF013C,0xFFFF76 ; BC 264.375 -0.995
       FF FF       
041E20 B2 00 FF 9D 0836*      dl 0xFF00B2,0xFFFF9D ; BD 265.781 -0.997
       FF FF       
041E26 4F 00 FF C4 0837*      dl 0xFF004F,0xFFFFC4 ; BE 267.188 -0.999
       FF FF       
041E2C 14 00 FF EC 0838*      dl 0xFF0014,0xFFFFEC ; BF 268.594 -1.000
       FF FF       
041E32 00 00 FF 13 0839*      dl 0xFF0000,0x000013 ; C0 270.000 -1.000
       00 00       
041E38 14 00 FF 3B 0840*      dl 0xFF0014,0x00003B ; C1 271.406 -1.000
       00 00       
041E3E 4F 00 FF 62 0841*      dl 0xFF004F,0x000062 ; C2 272.813 -0.999
       00 00       
041E44 B2 00 FF 89 0842*      dl 0xFF00B2,0x000089 ; C3 274.219 -0.997
       00 00       
041E4A 3C 01 FF B1 0843*      dl 0xFF013C,0x0000B1 ; C4 275.625 -0.995
       00 00       
041E50 ED 01 FF D8 0844*      dl 0xFF01ED,0x0000D8 ; C5 277.031 -0.992
       00 00       
041E56 C6 02 FF FF 0845*      dl 0xFF02C6,0x0000FF ; C6 278.438 -0.989
       00 00       
041E5C C5 03 FF 26 0846*      dl 0xFF03C5,0x000126 ; C7 279.844 -0.985
       01 00       
041E62 EC 04 FF 4D 0847*      dl 0xFF04EC,0x00014D ; C8 281.250 -0.981
       01 00       
041E68 39 06 FF 73 0848*      dl 0xFF0639,0x000173 ; C9 282.656 -0.976
       01 00       
041E6E AD 07 FF 99 0849*      dl 0xFF07AD,0x000199 ; CA 284.063 -0.970
       01 00       
041E74 47 09 FF BF 0850*      dl 0xFF0947,0x0001BF ; CB 285.469 -0.964
       01 00       
041E7A 06 0B FF E5 0851*      dl 0xFF0B06,0x0001E5 ; CC 286.875 -0.957
       01 00       
041E80 EC 0C FF 0B 0852*      dl 0xFF0CEC,0x00020B ; CD 288.281 -0.950
       02 00       
041E86 F8 0E FF 30 0853*      dl 0xFF0EF8,0x000230 ; CE 289.688 -0.942
       02 00       
041E8C 28 11 FF 55 0854*      dl 0xFF1128,0x000255 ; CF 291.094 -0.933
       02 00       
041E92 7D 13 FF 79 0855*      dl 0xFF137D,0x000279 ; D0 292.500 -0.924
       02 00       
041E98 F7 15 FF 9E 0856*      dl 0xFF15F7,0x00029E ; D1 293.906 -0.914
       02 00       
041E9E 95 18 FF C1 0857*      dl 0xFF1895,0x0002C1 ; D2 295.313 -0.904
       02 00       
041EA4 56 1B FF E4 0858*      dl 0xFF1B56,0x0002E4 ; D3 296.719 -0.893
       02 00       
041EAA 3B 1E FF 07 0859*      dl 0xFF1E3B,0x000307 ; D4 298.125 -0.882
       03 00       
041EB0 42 21 FF 2A 0860*      dl 0xFF2142,0x00032A ; D5 299.531 -0.870
       03 00       
041EB6 6D 24 FF 4B 0861*      dl 0xFF246D,0x00034B ; D6 300.938 -0.858
       03 00       
041EBC B8 27 FF 6C 0862*      dl 0xFF27B8,0x00036C ; D7 302.344 -0.845
       03 00       
041EC2 25 2B FF 8D 0863*      dl 0xFF2B25,0x00038D ; D8 303.750 -0.831
       03 00       
041EC8 B3 2E FF AE 0864*      dl 0xFF2EB3,0x0003AE ; D9 305.156 -0.818
       03 00       
041ECE 62 32 FF CD 0865*      dl 0xFF3262,0x0003CD ; DA 306.563 -0.803
       03 00       
041ED4 30 36 FF EC 0866*      dl 0xFF3630,0x0003EC ; DB 307.969 -0.788
       03 00       
041EDA 1C 3A FF 0B 0867*      dl 0xFF3A1C,0x00040B ; DC 309.375 -0.773
       04 00       
041EE0 28 3E FF 2A 0868*      dl 0xFF3E28,0x00042A ; DD 310.781 -0.757
       04 00       
041EE6 52 42 FF 46 0869*      dl 0xFF4252,0x000446 ; DE 312.188 -0.741
       04 00       
041EEC 98 46 FF 63 0870*      dl 0xFF4698,0x000463 ; DF 313.594 -0.724
       04 00       
041EF2 FC 4A FF 7F 0871*      dl 0xFF4AFC,0x00047F ; E0 315.000 -0.707
       04 00       
041EF8 7B 4F FF 9B 0872*      dl 0xFF4F7B,0x00049B ; E1 316.406 -0.690
       04 00       
041EFE 16 54 FF B4 0873*      dl 0xFF5416,0x0004B4 ; E2 317.813 -0.672
       04 00       
041F04 CA 58 FF CE 0874*      dl 0xFF58CA,0x0004CE ; E3 319.219 -0.653
       04 00       
041F0A 99 5D FF E7 0875*      dl 0xFF5D99,0x0004E7 ; E4 320.625 -0.634
       04 00       
041F10 80 62 FF 00 0876*      dl 0xFF6280,0x000500 ; E5 322.031 -0.615
       05 00       
041F16 81 67 FF 17 0877*      dl 0xFF6781,0x000517 ; E6 323.438 -0.596
       05 00       
041F1C 99 6C FF 2E 0878*      dl 0xFF6C99,0x00052E ; E7 324.844 -0.576
       05 00       
041F22 C7 71 FF 44 0879*      dl 0xFF71C7,0x000544 ; E8 326.250 -0.556
       05 00       
041F28 0B 77 FF 5A 0880*      dl 0xFF770B,0x00055A ; E9 327.656 -0.535
       05 00       
041F2E 65 7C FF 6D 0881*      dl 0xFF7C65,0x00056D ; EA 329.063 -0.514
       05 00       
041F34 D2 81 FF 80 0882*      dl 0xFF81D2,0x000580 ; EB 330.469 -0.493
       05 00       
041F3A 53 87 FF 93 0883*      dl 0xFF8753,0x000593 ; EC 331.875 -0.471
       05 00       
041F40 E7 8C FF A6 0884*      dl 0xFF8CE7,0x0005A6 ; ED 333.281 -0.450
       05 00       
041F46 8D 92 FF B6 0885*      dl 0xFF928D,0x0005B6 ; EE 334.688 -0.428
       05 00       
041F4C 43 98 FF C6 0886*      dl 0xFF9843,0x0005C6 ; EF 336.094 -0.405
       05 00       
041F52 09 9E FF D5 0887*      dl 0xFF9E09,0x0005D5 ; F0 337.500 -0.383
       05 00       
041F58 DE A3 FF E4 0888*      dl 0xFFA3DE,0x0005E4 ; F1 338.906 -0.360
       05 00       
041F5E C3 A9 FF F0 0889*      dl 0xFFA9C3,0x0005F0 ; F2 340.313 -0.337
       05 00       
041F64 B3 AF FF FD 0890*      dl 0xFFAFB3,0x0005FD ; F3 341.719 -0.314
       05 00       
041F6A B0 B5 FF 08 0891*      dl 0xFFB5B0,0x000608 ; F4 343.125 -0.290
       06 00       
041F70 B9 BB FF 14 0892*      dl 0xFFBBB9,0x000614 ; F5 344.531 -0.267
       06 00       
041F76 CD C1 FF 1C 0893*      dl 0xFFC1CD,0x00061C ; F6 345.938 -0.243
       06 00       
041F7C EA C7 FF 25 0894*      dl 0xFFC7EA,0x000625 ; F7 347.344 -0.219
       06 00       
041F82 0F CE FF 2C 0895*      dl 0xFFCE0F,0x00062C ; F8 348.750 -0.195
       06 00       
041F88 3C D4 FF 34 0896*      dl 0xFFD43C,0x000634 ; F9 350.156 -0.171
       06 00       
041F8E 71 DA FF 39 0897*      dl 0xFFDA71,0x000639 ; FA 351.563 -0.147
       06 00       
041F94 AA E0 FF 3E 0898*      dl 0xFFE0AA,0x00063E ; FB 352.969 -0.122
       06 00       
041F9A E9 E6 FF 42 0899*      dl 0xFFE6E9,0x000642 ; FC 354.375 -0.098
       06 00       
041FA0 2B ED FF 46 0900*      dl 0xFFED2B,0x000646 ; FD 355.781 -0.074
       06 00       
041FA6 71 F3 FF 47 0901*      dl 0xFFF371,0x000647 ; FE 357.188 -0.049
       06 00       
041FAC B8 F9 FF 48 0902*      dl 0xFFF9B8,0x000648 ; FF 358.594 -0.025
       06 00       
041FB2 00 00 00 48 0903*      dl 0x000000,0x000648 ; 00 360.000 0.000
       06 00       
041FB8             0904*  
041FB8             0905*  sin_lut_1212:
041FB8 00 00 00    0906*      dl 0x000000 ; 00, 00.000, +0.000000
041FBB 65 00 00    0907*      dl 0x000065 ; 01, 01.406, +0.024541
041FBE C9 00 00    0908*      dl 0x0000C9 ; 02, 02.812, +0.049068
041FC1 2D 01 00    0909*      dl 0x00012D ; 03, 04.219, +0.073565
041FC4 91 01 00    0910*      dl 0x000191 ; 04, 05.625, +0.098017
041FC7 F5 01 00    0911*      dl 0x0001F5 ; 05, 07.031, +0.122411
041FCA 59 02 00    0912*      dl 0x000259 ; 06, 08.438, +0.146730
041FCD BC 02 00    0913*      dl 0x0002BC ; 07, 09.844, +0.170962
041FD0 1F 03 00    0914*      dl 0x00031F ; 08, 11.250, +0.195090
041FD3 81 03 00    0915*      dl 0x000381 ; 09, 12.656, +0.219101
041FD6 E3 03 00    0916*      dl 0x0003E3 ; 0A, 14.062, +0.242980
041FD9 44 04 00    0917*      dl 0x000444 ; 0B, 15.469, +0.266713
041FDC A5 04 00    0918*      dl 0x0004A5 ; 0C, 16.875, +0.290285
041FDF 05 05 00    0919*      dl 0x000505 ; 0D, 18.281, +0.313682
041FE2 64 05 00    0920*      dl 0x000564 ; 0E, 19.688, +0.336890
041FE5 C2 05 00    0921*      dl 0x0005C2 ; 0F, 21.094, +0.359895
041FE8 1F 06 00    0922*      dl 0x00061F ; 10, 22.500, +0.382683
041FEB 7C 06 00    0923*      dl 0x00067C ; 11, 23.906, +0.405241
041FEE D7 06 00    0924*      dl 0x0006D7 ; 12, 25.312, +0.427555
041FF1 32 07 00    0925*      dl 0x000732 ; 13, 26.719, +0.449611
041FF4 8B 07 00    0926*      dl 0x00078B ; 14, 28.125, +0.471397
041FF7 E3 07 00    0927*      dl 0x0007E3 ; 15, 29.531, +0.492898
041FFA 3A 08 00    0928*      dl 0x00083A ; 16, 30.938, +0.514103
041FFD 8F 08 00    0929*      dl 0x00088F ; 17, 32.344, +0.534998
042000 E4 08 00    0930*      dl 0x0008E4 ; 18, 33.750, +0.555570
042003 37 09 00    0931*      dl 0x000937 ; 19, 35.156, +0.575808
042006 88 09 00    0932*      dl 0x000988 ; 1A, 36.562, +0.595699
042009 D8 09 00    0933*      dl 0x0009D8 ; 1B, 37.969, +0.615232
04200C 26 0A 00    0934*      dl 0x000A26 ; 1C, 39.375, +0.634393
04200F 73 0A 00    0935*      dl 0x000A73 ; 1D, 40.781, +0.653173
042012 BF 0A 00    0936*      dl 0x000ABF ; 1E, 42.188, +0.671559
042015 08 0B 00    0937*      dl 0x000B08 ; 1F, 43.594, +0.689541
042018 50 0B 00    0938*      dl 0x000B50 ; 20, 45.000, +0.707107
04201B 97 0B 00    0939*      dl 0x000B97 ; 21, 46.406, +0.724247
04201E DB 0B 00    0940*      dl 0x000BDB ; 22, 47.812, +0.740951
042021 1E 0C 00    0941*      dl 0x000C1E ; 23, 49.219, +0.757209
042024 5E 0C 00    0942*      dl 0x000C5E ; 24, 50.625, +0.773010
042027 9D 0C 00    0943*      dl 0x000C9D ; 25, 52.031, +0.788346
04202A DA 0C 00    0944*      dl 0x000CDA ; 26, 53.438, +0.803208
04202D 15 0D 00    0945*      dl 0x000D15 ; 27, 54.844, +0.817585
042030 4E 0D 00    0946*      dl 0x000D4E ; 28, 56.250, +0.831470
042033 85 0D 00    0947*      dl 0x000D85 ; 29, 57.656, +0.844854
042036 B9 0D 00    0948*      dl 0x000DB9 ; 2A, 59.062, +0.857729
042039 EC 0D 00    0949*      dl 0x000DEC ; 2B, 60.469, +0.870087
04203C 1C 0E 00    0950*      dl 0x000E1C ; 2C, 61.875, +0.881921
04203F 4B 0E 00    0951*      dl 0x000E4B ; 2D, 63.281, +0.893224
042042 77 0E 00    0952*      dl 0x000E77 ; 2E, 64.688, +0.903989
042045 A1 0E 00    0953*      dl 0x000EA1 ; 2F, 66.094, +0.914210
042048 C8 0E 00    0954*      dl 0x000EC8 ; 30, 67.500, +0.923880
04204B EE 0E 00    0955*      dl 0x000EEE ; 31, 68.906, +0.932993
04204E 11 0F 00    0956*      dl 0x000F11 ; 32, 70.312, +0.941544
042051 31 0F 00    0957*      dl 0x000F31 ; 33, 71.719, +0.949528
042054 50 0F 00    0958*      dl 0x000F50 ; 34, 73.125, +0.956940
042057 6C 0F 00    0959*      dl 0x000F6C ; 35, 74.531, +0.963776
04205A 85 0F 00    0960*      dl 0x000F85 ; 36, 75.938, +0.970031
04205D 9C 0F 00    0961*      dl 0x000F9C ; 37, 77.344, +0.975702
042060 B1 0F 00    0962*      dl 0x000FB1 ; 38, 78.750, +0.980785
042063 C4 0F 00    0963*      dl 0x000FC4 ; 39, 80.156, +0.985278
042066 D4 0F 00    0964*      dl 0x000FD4 ; 3A, 81.562, +0.989177
042069 E1 0F 00    0965*      dl 0x000FE1 ; 3B, 82.969, +0.992480
04206C EC 0F 00    0966*      dl 0x000FEC ; 3C, 84.375, +0.995185
04206F F5 0F 00    0967*      dl 0x000FF5 ; 3D, 85.781, +0.997290
042072 FB 0F 00    0968*      dl 0x000FFB ; 3E, 87.188, +0.998795
042075 FF 0F 00    0969*      dl 0x000FFF ; 3F, 88.594, +0.999699
042078 00 10 00    0970*      dl 0x001000 ; 40, 90.000, +1.000000
04207B FF 0F 00    0971*      dl 0x000FFF ; 41, 91.406, +0.999699
04207E FB 0F 00    0972*      dl 0x000FFB ; 42, 92.812, +0.998795
042081 F5 0F 00    0973*      dl 0x000FF5 ; 43, 94.219, +0.997290
042084 EC 0F 00    0974*      dl 0x000FEC ; 44, 95.625, +0.995185
042087 E1 0F 00    0975*      dl 0x000FE1 ; 45, 97.031, +0.992480
04208A D4 0F 00    0976*      dl 0x000FD4 ; 46, 98.438, +0.989177
04208D C4 0F 00    0977*      dl 0x000FC4 ; 47, 99.844, +0.985278
042090 B1 0F 00    0978*      dl 0x000FB1 ; 48, 101.250, +0.980785
042093 9C 0F 00    0979*      dl 0x000F9C ; 49, 102.656, +0.975702
042096 85 0F 00    0980*      dl 0x000F85 ; 4A, 104.062, +0.970031
042099 6C 0F 00    0981*      dl 0x000F6C ; 4B, 105.469, +0.963776
04209C 50 0F 00    0982*      dl 0x000F50 ; 4C, 106.875, +0.956940
04209F 31 0F 00    0983*      dl 0x000F31 ; 4D, 108.281, +0.949528
0420A2 11 0F 00    0984*      dl 0x000F11 ; 4E, 109.688, +0.941544
0420A5 EE 0E 00    0985*      dl 0x000EEE ; 4F, 111.094, +0.932993
0420A8 C8 0E 00    0986*      dl 0x000EC8 ; 50, 112.500, +0.923880
0420AB A1 0E 00    0987*      dl 0x000EA1 ; 51, 113.906, +0.914210
0420AE 77 0E 00    0988*      dl 0x000E77 ; 52, 115.312, +0.903989
0420B1 4B 0E 00    0989*      dl 0x000E4B ; 53, 116.719, +0.893224
0420B4 1C 0E 00    0990*      dl 0x000E1C ; 54, 118.125, +0.881921
0420B7 EC 0D 00    0991*      dl 0x000DEC ; 55, 119.531, +0.870087
0420BA B9 0D 00    0992*      dl 0x000DB9 ; 56, 120.938, +0.857729
0420BD 85 0D 00    0993*      dl 0x000D85 ; 57, 122.344, +0.844854
0420C0 4E 0D 00    0994*      dl 0x000D4E ; 58, 123.750, +0.831470
0420C3 15 0D 00    0995*      dl 0x000D15 ; 59, 125.156, +0.817585
0420C6 DA 0C 00    0996*      dl 0x000CDA ; 5A, 126.562, +0.803208
0420C9 9D 0C 00    0997*      dl 0x000C9D ; 5B, 127.969, +0.788346
0420CC 5E 0C 00    0998*      dl 0x000C5E ; 5C, 129.375, +0.773010
0420CF 1E 0C 00    0999*      dl 0x000C1E ; 5D, 130.781, +0.757209
0420D2 DB 0B 00    1000*      dl 0x000BDB ; 5E, 132.188, +0.740951
0420D5 97 0B 00    1001*      dl 0x000B97 ; 5F, 133.594, +0.724247
0420D8 50 0B 00    1002*      dl 0x000B50 ; 60, 135.000, +0.707107
0420DB 08 0B 00    1003*      dl 0x000B08 ; 61, 136.406, +0.689541
0420DE BF 0A 00    1004*      dl 0x000ABF ; 62, 137.812, +0.671559
0420E1 73 0A 00    1005*      dl 0x000A73 ; 63, 139.219, +0.653173
0420E4 26 0A 00    1006*      dl 0x000A26 ; 64, 140.625, +0.634393
0420E7 D8 09 00    1007*      dl 0x0009D8 ; 65, 142.031, +0.615232
0420EA 88 09 00    1008*      dl 0x000988 ; 66, 143.438, +0.595699
0420ED 37 09 00    1009*      dl 0x000937 ; 67, 144.844, +0.575808
0420F0 E4 08 00    1010*      dl 0x0008E4 ; 68, 146.250, +0.555570
0420F3 8F 08 00    1011*      dl 0x00088F ; 69, 147.656, +0.534998
0420F6 3A 08 00    1012*      dl 0x00083A ; 6A, 149.062, +0.514103
0420F9 E3 07 00    1013*      dl 0x0007E3 ; 6B, 150.469, +0.492898
0420FC 8B 07 00    1014*      dl 0x00078B ; 6C, 151.875, +0.471397
0420FF 32 07 00    1015*      dl 0x000732 ; 6D, 153.281, +0.449611
042102 D7 06 00    1016*      dl 0x0006D7 ; 6E, 154.688, +0.427555
042105 7C 06 00    1017*      dl 0x00067C ; 6F, 156.094, +0.405241
042108 1F 06 00    1018*      dl 0x00061F ; 70, 157.500, +0.382683
04210B C2 05 00    1019*      dl 0x0005C2 ; 71, 158.906, +0.359895
04210E 64 05 00    1020*      dl 0x000564 ; 72, 160.312, +0.336890
042111 05 05 00    1021*      dl 0x000505 ; 73, 161.719, +0.313682
042114 A5 04 00    1022*      dl 0x0004A5 ; 74, 163.125, +0.290285
042117 44 04 00    1023*      dl 0x000444 ; 75, 164.531, +0.266713
04211A E3 03 00    1024*      dl 0x0003E3 ; 76, 165.938, +0.242980
04211D 81 03 00    1025*      dl 0x000381 ; 77, 167.344, +0.219101
042120 1F 03 00    1026*      dl 0x00031F ; 78, 168.750, +0.195090
042123 BC 02 00    1027*      dl 0x0002BC ; 79, 170.156, +0.170962
042126 59 02 00    1028*      dl 0x000259 ; 7A, 171.562, +0.146730
042129 F5 01 00    1029*      dl 0x0001F5 ; 7B, 172.969, +0.122411
04212C 91 01 00    1030*      dl 0x000191 ; 7C, 174.375, +0.098017
04212F 2D 01 00    1031*      dl 0x00012D ; 7D, 175.781, +0.073565
042132 C9 00 00    1032*      dl 0x0000C9 ; 7E, 177.188, +0.049068
042135 65 00 00    1033*      dl 0x000065 ; 7F, 178.594, +0.024541
042138 00 00 00    1034*      dl 0x000000 ; 80, 180.000, +0.000000
04213B 9B FF FF    1035*      dl 0xFFFF9B ; 81, 181.406, -0.024541
04213E 37 FF FF    1036*      dl 0xFFFF37 ; 82, 182.812, -0.049068
042141 D3 FE FF    1037*      dl 0xFFFED3 ; 83, 184.219, -0.073565
042144 6F FE FF    1038*      dl 0xFFFE6F ; 84, 185.625, -0.098017
042147 0B FE FF    1039*      dl 0xFFFE0B ; 85, 187.031, -0.122411
04214A A7 FD FF    1040*      dl 0xFFFDA7 ; 86, 188.438, -0.146730
04214D 44 FD FF    1041*      dl 0xFFFD44 ; 87, 189.844, -0.170962
042150 E1 FC FF    1042*      dl 0xFFFCE1 ; 88, 191.250, -0.195090
042153 7F FC FF    1043*      dl 0xFFFC7F ; 89, 192.656, -0.219101
042156 1D FC FF    1044*      dl 0xFFFC1D ; 8A, 194.062, -0.242980
042159 BC FB FF    1045*      dl 0xFFFBBC ; 8B, 195.469, -0.266713
04215C 5B FB FF    1046*      dl 0xFFFB5B ; 8C, 196.875, -0.290285
04215F FB FA FF    1047*      dl 0xFFFAFB ; 8D, 198.281, -0.313682
042162 9C FA FF    1048*      dl 0xFFFA9C ; 8E, 199.688, -0.336890
042165 3E FA FF    1049*      dl 0xFFFA3E ; 8F, 201.094, -0.359895
042168 E1 F9 FF    1050*      dl 0xFFF9E1 ; 90, 202.500, -0.382683
04216B 84 F9 FF    1051*      dl 0xFFF984 ; 91, 203.906, -0.405241
04216E 29 F9 FF    1052*      dl 0xFFF929 ; 92, 205.312, -0.427555
042171 CE F8 FF    1053*      dl 0xFFF8CE ; 93, 206.719, -0.449611
042174 75 F8 FF    1054*      dl 0xFFF875 ; 94, 208.125, -0.471397
042177 1D F8 FF    1055*      dl 0xFFF81D ; 95, 209.531, -0.492898
04217A C6 F7 FF    1056*      dl 0xFFF7C6 ; 96, 210.938, -0.514103
04217D 71 F7 FF    1057*      dl 0xFFF771 ; 97, 212.344, -0.534998
042180 1C F7 FF    1058*      dl 0xFFF71C ; 98, 213.750, -0.555570
042183 C9 F6 FF    1059*      dl 0xFFF6C9 ; 99, 215.156, -0.575808
042186 78 F6 FF    1060*      dl 0xFFF678 ; 9A, 216.562, -0.595699
042189 28 F6 FF    1061*      dl 0xFFF628 ; 9B, 217.969, -0.615232
04218C DA F5 FF    1062*      dl 0xFFF5DA ; 9C, 219.375, -0.634393
04218F 8D F5 FF    1063*      dl 0xFFF58D ; 9D, 220.781, -0.653173
042192 41 F5 FF    1064*      dl 0xFFF541 ; 9E, 222.188, -0.671559
042195 F8 F4 FF    1065*      dl 0xFFF4F8 ; 9F, 223.594, -0.689541
042198 B0 F4 FF    1066*      dl 0xFFF4B0 ; A0, 225.000, -0.707107
04219B 69 F4 FF    1067*      dl 0xFFF469 ; A1, 226.406, -0.724247
04219E 25 F4 FF    1068*      dl 0xFFF425 ; A2, 227.812, -0.740951
0421A1 E2 F3 FF    1069*      dl 0xFFF3E2 ; A3, 229.219, -0.757209
0421A4 A2 F3 FF    1070*      dl 0xFFF3A2 ; A4, 230.625, -0.773010
0421A7 63 F3 FF    1071*      dl 0xFFF363 ; A5, 232.031, -0.788346
0421AA 26 F3 FF    1072*      dl 0xFFF326 ; A6, 233.438, -0.803208
0421AD EB F2 FF    1073*      dl 0xFFF2EB ; A7, 234.844, -0.817585
0421B0 B2 F2 FF    1074*      dl 0xFFF2B2 ; A8, 236.250, -0.831470
0421B3 7B F2 FF    1075*      dl 0xFFF27B ; A9, 237.656, -0.844854
0421B6 47 F2 FF    1076*      dl 0xFFF247 ; AA, 239.062, -0.857729
0421B9 14 F2 FF    1077*      dl 0xFFF214 ; AB, 240.469, -0.870087
0421BC E4 F1 FF    1078*      dl 0xFFF1E4 ; AC, 241.875, -0.881921
0421BF B5 F1 FF    1079*      dl 0xFFF1B5 ; AD, 243.281, -0.893224
0421C2 89 F1 FF    1080*      dl 0xFFF189 ; AE, 244.688, -0.903989
0421C5 5F F1 FF    1081*      dl 0xFFF15F ; AF, 246.094, -0.914210
0421C8 38 F1 FF    1082*      dl 0xFFF138 ; B0, 247.500, -0.923880
0421CB 12 F1 FF    1083*      dl 0xFFF112 ; B1, 248.906, -0.932993
0421CE EF F0 FF    1084*      dl 0xFFF0EF ; B2, 250.312, -0.941544
0421D1 CF F0 FF    1085*      dl 0xFFF0CF ; B3, 251.719, -0.949528
0421D4 B0 F0 FF    1086*      dl 0xFFF0B0 ; B4, 253.125, -0.956940
0421D7 94 F0 FF    1087*      dl 0xFFF094 ; B5, 254.531, -0.963776
0421DA 7B F0 FF    1088*      dl 0xFFF07B ; B6, 255.938, -0.970031
0421DD 64 F0 FF    1089*      dl 0xFFF064 ; B7, 257.344, -0.975702
0421E0 4F F0 FF    1090*      dl 0xFFF04F ; B8, 258.750, -0.980785
0421E3 3C F0 FF    1091*      dl 0xFFF03C ; B9, 260.156, -0.985278
0421E6 2C F0 FF    1092*      dl 0xFFF02C ; BA, 261.562, -0.989177
0421E9 1F F0 FF    1093*      dl 0xFFF01F ; BB, 262.969, -0.992480
0421EC 14 F0 FF    1094*      dl 0xFFF014 ; BC, 264.375, -0.995185
0421EF 0B F0 FF    1095*      dl 0xFFF00B ; BD, 265.781, -0.997290
0421F2 05 F0 FF    1096*      dl 0xFFF005 ; BE, 267.188, -0.998795
0421F5 01 F0 FF    1097*      dl 0xFFF001 ; BF, 268.594, -0.999699
0421F8 00 F0 FF    1098*      dl 0xFFF000 ; C0, 270.000, -1.000000
0421FB 01 F0 FF    1099*      dl 0xFFF001 ; C1, 271.406, -0.999699
0421FE 05 F0 FF    1100*      dl 0xFFF005 ; C2, 272.812, -0.998795
042201 0B F0 FF    1101*      dl 0xFFF00B ; C3, 274.219, -0.997290
042204 14 F0 FF    1102*      dl 0xFFF014 ; C4, 275.625, -0.995185
042207 1F F0 FF    1103*      dl 0xFFF01F ; C5, 277.031, -0.992480
04220A 2C F0 FF    1104*      dl 0xFFF02C ; C6, 278.438, -0.989177
04220D 3C F0 FF    1105*      dl 0xFFF03C ; C7, 279.844, -0.985278
042210 4F F0 FF    1106*      dl 0xFFF04F ; C8, 281.250, -0.980785
042213 64 F0 FF    1107*      dl 0xFFF064 ; C9, 282.656, -0.975702
042216 7B F0 FF    1108*      dl 0xFFF07B ; CA, 284.062, -0.970031
042219 94 F0 FF    1109*      dl 0xFFF094 ; CB, 285.469, -0.963776
04221C B0 F0 FF    1110*      dl 0xFFF0B0 ; CC, 286.875, -0.956940
04221F CF F0 FF    1111*      dl 0xFFF0CF ; CD, 288.281, -0.949528
042222 EF F0 FF    1112*      dl 0xFFF0EF ; CE, 289.688, -0.941544
042225 12 F1 FF    1113*      dl 0xFFF112 ; CF, 291.094, -0.932993
042228 38 F1 FF    1114*      dl 0xFFF138 ; D0, 292.500, -0.923880
04222B 5F F1 FF    1115*      dl 0xFFF15F ; D1, 293.906, -0.914210
04222E 89 F1 FF    1116*      dl 0xFFF189 ; D2, 295.312, -0.903989
042231 B5 F1 FF    1117*      dl 0xFFF1B5 ; D3, 296.719, -0.893224
042234 E4 F1 FF    1118*      dl 0xFFF1E4 ; D4, 298.125, -0.881921
042237 14 F2 FF    1119*      dl 0xFFF214 ; D5, 299.531, -0.870087
04223A 47 F2 FF    1120*      dl 0xFFF247 ; D6, 300.938, -0.857729
04223D 7B F2 FF    1121*      dl 0xFFF27B ; D7, 302.344, -0.844854
042240 B2 F2 FF    1122*      dl 0xFFF2B2 ; D8, 303.750, -0.831470
042243 EB F2 FF    1123*      dl 0xFFF2EB ; D9, 305.156, -0.817585
042246 26 F3 FF    1124*      dl 0xFFF326 ; DA, 306.562, -0.803208
042249 63 F3 FF    1125*      dl 0xFFF363 ; DB, 307.969, -0.788346
04224C A2 F3 FF    1126*      dl 0xFFF3A2 ; DC, 309.375, -0.773010
04224F E2 F3 FF    1127*      dl 0xFFF3E2 ; DD, 310.781, -0.757209
042252 25 F4 FF    1128*      dl 0xFFF425 ; DE, 312.188, -0.740951
042255 69 F4 FF    1129*      dl 0xFFF469 ; DF, 313.594, -0.724247
042258 B0 F4 FF    1130*      dl 0xFFF4B0 ; E0, 315.000, -0.707107
04225B F8 F4 FF    1131*      dl 0xFFF4F8 ; E1, 316.406, -0.689541
04225E 41 F5 FF    1132*      dl 0xFFF541 ; E2, 317.812, -0.671559
042261 8D F5 FF    1133*      dl 0xFFF58D ; E3, 319.219, -0.653173
042264 DA F5 FF    1134*      dl 0xFFF5DA ; E4, 320.625, -0.634393
042267 28 F6 FF    1135*      dl 0xFFF628 ; E5, 322.031, -0.615232
04226A 78 F6 FF    1136*      dl 0xFFF678 ; E6, 323.438, -0.595699
04226D C9 F6 FF    1137*      dl 0xFFF6C9 ; E7, 324.844, -0.575808
042270 1C F7 FF    1138*      dl 0xFFF71C ; E8, 326.250, -0.555570
042273 71 F7 FF    1139*      dl 0xFFF771 ; E9, 327.656, -0.534998
042276 C6 F7 FF    1140*      dl 0xFFF7C6 ; EA, 329.062, -0.514103
042279 1D F8 FF    1141*      dl 0xFFF81D ; EB, 330.469, -0.492898
04227C 75 F8 FF    1142*      dl 0xFFF875 ; EC, 331.875, -0.471397
04227F CE F8 FF    1143*      dl 0xFFF8CE ; ED, 333.281, -0.449611
042282 29 F9 FF    1144*      dl 0xFFF929 ; EE, 334.688, -0.427555
042285 84 F9 FF    1145*      dl 0xFFF984 ; EF, 336.094, -0.405241
042288 E1 F9 FF    1146*      dl 0xFFF9E1 ; F0, 337.500, -0.382683
04228B 3E FA FF    1147*      dl 0xFFFA3E ; F1, 338.906, -0.359895
04228E 9C FA FF    1148*      dl 0xFFFA9C ; F2, 340.312, -0.336890
042291 FB FA FF    1149*      dl 0xFFFAFB ; F3, 341.719, -0.313682
042294 5B FB FF    1150*      dl 0xFFFB5B ; F4, 343.125, -0.290285
042297 BC FB FF    1151*      dl 0xFFFBBC ; F5, 344.531, -0.266713
04229A 1D FC FF    1152*      dl 0xFFFC1D ; F6, 345.938, -0.242980
04229D 7F FC FF    1153*      dl 0xFFFC7F ; F7, 347.344, -0.219101
0422A0 E1 FC FF    1154*      dl 0xFFFCE1 ; F8, 348.750, -0.195090
0422A3 44 FD FF    1155*      dl 0xFFFD44 ; F9, 350.156, -0.170962
0422A6 A7 FD FF    1156*      dl 0xFFFDA7 ; FA, 351.562, -0.146730
0422A9 0B FE FF    1157*      dl 0xFFFE0B ; FB, 352.969, -0.122411
0422AC 6F FE FF    1158*      dl 0xFFFE6F ; FC, 354.375, -0.098017
0422AF D3 FE FF    1159*      dl 0xFFFED3 ; FD, 355.781, -0.073565
0422B2 37 FF FF    1160*      dl 0xFFFF37 ; FE, 357.188, -0.049068
0422B5 9B FF FF    1161*      dl 0xFFFF9B ; FF, 358.594, -0.024541
0422B8             1162*  
0422B8             1163*  atan_lut_168:
0422B8 00 00 00    1164*  	dl 0x000000 ; 000000, 0.000
0422BB 28 00 00    1165*  	dl 0x000028 ; 000001, 0.224
0422BE 51 00 00    1166*  	dl 0x000051 ; 000002, 0.448
0422C1 7A 00 00    1167*  	dl 0x00007A ; 000003, 0.671
0422C4 A2 00 00    1168*  	dl 0x0000A2 ; 000004, 0.895
0422C7 CB 00 00    1169*  	dl 0x0000CB ; 000005, 1.119
0422CA F4 00 00    1170*  	dl 0x0000F4 ; 000006, 1.343
0422CD 1D 01 00    1171*  	dl 0x00011D ; 000007, 1.566
0422D0 45 01 00    1172*  	dl 0x000145 ; 000008, 1.790
0422D3 6E 01 00    1173*  	dl 0x00016E ; 000009, 2.013
0422D6 97 01 00    1174*  	dl 0x000197 ; 00000A, 2.237
0422D9 BF 01 00    1175*  	dl 0x0001BF ; 00000B, 2.460
0422DC E8 01 00    1176*  	dl 0x0001E8 ; 00000C, 2.684
0422DF 11 02 00    1177*  	dl 0x000211 ; 00000D, 2.907
0422E2 39 02 00    1178*  	dl 0x000239 ; 00000E, 3.130
0422E5 62 02 00    1179*  	dl 0x000262 ; 00000F, 3.353
0422E8 8B 02 00    1180*  	dl 0x00028B ; 000010, 3.576
0422EB B3 02 00    1181*  	dl 0x0002B3 ; 000011, 3.799
0422EE DC 02 00    1182*  	dl 0x0002DC ; 000012, 4.022
0422F1 04 03 00    1183*  	dl 0x000304 ; 000013, 4.245
0422F4 2D 03 00    1184*  	dl 0x00032D ; 000014, 4.467
0422F7 55 03 00    1185*  	dl 0x000355 ; 000015, 4.690
0422FA 7E 03 00    1186*  	dl 0x00037E ; 000016, 4.912
0422FD A6 03 00    1187*  	dl 0x0003A6 ; 000017, 5.134
042300 CE 03 00    1188*  	dl 0x0003CE ; 000018, 5.356
042303 F7 03 00    1189*  	dl 0x0003F7 ; 000019, 5.578
042306 1F 04 00    1190*  	dl 0x00041F ; 00001A, 5.799
042309 48 04 00    1191*  	dl 0x000448 ; 00001B, 6.021
04230C 70 04 00    1192*  	dl 0x000470 ; 00001C, 6.242
04230F 98 04 00    1193*  	dl 0x000498 ; 00001D, 6.463
042312 C0 04 00    1194*  	dl 0x0004C0 ; 00001E, 6.684
042315 E8 04 00    1195*  	dl 0x0004E8 ; 00001F, 6.905
042318 11 05 00    1196*  	dl 0x000511 ; 000020, 7.125
04231B 39 05 00    1197*  	dl 0x000539 ; 000021, 7.345
04231E 61 05 00    1198*  	dl 0x000561 ; 000022, 7.565
042321 89 05 00    1199*  	dl 0x000589 ; 000023, 7.785
042324 B1 05 00    1200*  	dl 0x0005B1 ; 000024, 8.005
042327 D9 05 00    1201*  	dl 0x0005D9 ; 000025, 8.224
04232A 01 06 00    1202*  	dl 0x000601 ; 000026, 8.443
04232D 28 06 00    1203*  	dl 0x000628 ; 000027, 8.662
042330 50 06 00    1204*  	dl 0x000650 ; 000028, 8.881
042333 78 06 00    1205*  	dl 0x000678 ; 000029, 9.099
042336 A0 06 00    1206*  	dl 0x0006A0 ; 00002A, 9.317
042339 C7 06 00    1207*  	dl 0x0006C7 ; 00002B, 9.535
04233C EF 06 00    1208*  	dl 0x0006EF ; 00002C, 9.752
04233F 16 07 00    1209*  	dl 0x000716 ; 00002D, 9.970
042342 3E 07 00    1210*  	dl 0x00073E ; 00002E, 10.187
042345 65 07 00    1211*  	dl 0x000765 ; 00002F, 10.403
042348 8D 07 00    1212*  	dl 0x00078D ; 000030, 10.620
04234B B4 07 00    1213*  	dl 0x0007B4 ; 000031, 10.836
04234E DB 07 00    1214*  	dl 0x0007DB ; 000032, 11.051
042351 03 08 00    1215*  	dl 0x000803 ; 000033, 11.267
042354 2A 08 00    1216*  	dl 0x00082A ; 000034, 11.482
042357 51 08 00    1217*  	dl 0x000851 ; 000035, 11.697
04235A 78 08 00    1218*  	dl 0x000878 ; 000036, 11.911
04235D 9F 08 00    1219*  	dl 0x00089F ; 000037, 12.125
042360 C6 08 00    1220*  	dl 0x0008C6 ; 000038, 12.339
042363 ED 08 00    1221*  	dl 0x0008ED ; 000039, 12.553
042366 13 09 00    1222*  	dl 0x000913 ; 00003A, 12.766
042369 3A 09 00    1223*  	dl 0x00093A ; 00003B, 12.978
04236C 61 09 00    1224*  	dl 0x000961 ; 00003C, 13.191
04236F 87 09 00    1225*  	dl 0x000987 ; 00003D, 13.403
042372 AE 09 00    1226*  	dl 0x0009AE ; 00003E, 13.614
042375 D4 09 00    1227*  	dl 0x0009D4 ; 00003F, 13.825
042378 FB 09 00    1228*  	dl 0x0009FB ; 000040, 14.036
04237B 21 0A 00    1229*  	dl 0x000A21 ; 000041, 14.247
04237E 47 0A 00    1230*  	dl 0x000A47 ; 000042, 14.457
042381 6D 0A 00    1231*  	dl 0x000A6D ; 000043, 14.666
042384 94 0A 00    1232*  	dl 0x000A94 ; 000044, 14.876
042387 BA 0A 00    1233*  	dl 0x000ABA ; 000045, 15.085
04238A E0 0A 00    1234*  	dl 0x000AE0 ; 000046, 15.293
04238D 05 0B 00    1235*  	dl 0x000B05 ; 000047, 15.501
042390 2B 0B 00    1236*  	dl 0x000B2B ; 000048, 15.709
042393 51 0B 00    1237*  	dl 0x000B51 ; 000049, 15.916
042396 77 0B 00    1238*  	dl 0x000B77 ; 00004A, 16.123
042399 9C 0B 00    1239*  	dl 0x000B9C ; 00004B, 16.329
04239C C2 0B 00    1240*  	dl 0x000BC2 ; 00004C, 16.535
04239F E7 0B 00    1241*  	dl 0x000BE7 ; 00004D, 16.740
0423A2 0C 0C 00    1242*  	dl 0x000C0C ; 00004E, 16.945
0423A5 32 0C 00    1243*  	dl 0x000C32 ; 00004F, 17.150
0423A8 57 0C 00    1244*  	dl 0x000C57 ; 000050, 17.354
0423AB 7C 0C 00    1245*  	dl 0x000C7C ; 000051, 17.558
0423AE A1 0C 00    1246*  	dl 0x000CA1 ; 000052, 17.761
0423B1 C6 0C 00    1247*  	dl 0x000CC6 ; 000053, 17.964
0423B4 EB 0C 00    1248*  	dl 0x000CEB ; 000054, 18.166
0423B7 0F 0D 00    1249*  	dl 0x000D0F ; 000055, 18.368
0423BA 34 0D 00    1250*  	dl 0x000D34 ; 000056, 18.569
0423BD 58 0D 00    1251*  	dl 0x000D58 ; 000057, 18.770
0423C0 7D 0D 00    1252*  	dl 0x000D7D ; 000058, 18.970
0423C3 A1 0D 00    1253*  	dl 0x000DA1 ; 000059, 19.170
0423C6 C6 0D 00    1254*  	dl 0x000DC6 ; 00005A, 19.370
0423C9 EA 0D 00    1255*  	dl 0x000DEA ; 00005B, 19.569
0423CC 0E 0E 00    1256*  	dl 0x000E0E ; 00005C, 19.767
0423CF 32 0E 00    1257*  	dl 0x000E32 ; 00005D, 19.965
0423D2 56 0E 00    1258*  	dl 0x000E56 ; 00005E, 20.163
0423D5 7A 0E 00    1259*  	dl 0x000E7A ; 00005F, 20.360
0423D8 9E 0E 00    1260*  	dl 0x000E9E ; 000060, 20.556
0423DB C1 0E 00    1261*  	dl 0x000EC1 ; 000061, 20.752
0423DE E5 0E 00    1262*  	dl 0x000EE5 ; 000062, 20.947
0423E1 08 0F 00    1263*  	dl 0x000F08 ; 000063, 21.142
0423E4 2C 0F 00    1264*  	dl 0x000F2C ; 000064, 21.337
0423E7 4F 0F 00    1265*  	dl 0x000F4F ; 000065, 21.531
0423EA 72 0F 00    1266*  	dl 0x000F72 ; 000066, 21.724
0423ED 95 0F 00    1267*  	dl 0x000F95 ; 000067, 21.917
0423F0 B8 0F 00    1268*  	dl 0x000FB8 ; 000068, 22.109
0423F3 DB 0F 00    1269*  	dl 0x000FDB ; 000069, 22.301
0423F6 FE 0F 00    1270*  	dl 0x000FFE ; 00006A, 22.493
0423F9 21 10 00    1271*  	dl 0x001021 ; 00006B, 22.683
0423FC 44 10 00    1272*  	dl 0x001044 ; 00006C, 22.874
0423FF 66 10 00    1273*  	dl 0x001066 ; 00006D, 23.063
042402 89 10 00    1274*  	dl 0x001089 ; 00006E, 23.253
042405 AB 10 00    1275*  	dl 0x0010AB ; 00006F, 23.441
042408 CD 10 00    1276*  	dl 0x0010CD ; 000070, 23.629
04240B EF 10 00    1277*  	dl 0x0010EF ; 000071, 23.817
04240E 11 11 00    1278*  	dl 0x001111 ; 000072, 24.004
042411 33 11 00    1279*  	dl 0x001133 ; 000073, 24.191
042414 55 11 00    1280*  	dl 0x001155 ; 000074, 24.376
042417 77 11 00    1281*  	dl 0x001177 ; 000075, 24.562
04241A 99 11 00    1282*  	dl 0x001199 ; 000076, 24.747
04241D BA 11 00    1283*  	dl 0x0011BA ; 000077, 24.931
042420 DC 11 00    1284*  	dl 0x0011DC ; 000078, 25.115
042423 FD 11 00    1285*  	dl 0x0011FD ; 000079, 25.298
042426 1E 12 00    1286*  	dl 0x00121E ; 00007A, 25.481
042429 3F 12 00    1287*  	dl 0x00123F ; 00007B, 25.663
04242C 60 12 00    1288*  	dl 0x001260 ; 00007C, 25.844
04242F 81 12 00    1289*  	dl 0x001281 ; 00007D, 26.025
042432 A2 12 00    1290*  	dl 0x0012A2 ; 00007E, 26.206
042435 C3 12 00    1291*  	dl 0x0012C3 ; 00007F, 26.386
042438 E4 12 00    1292*  	dl 0x0012E4 ; 000080, 26.565
04243B 04 13 00    1293*  	dl 0x001304 ; 000081, 26.744
04243E 25 13 00    1294*  	dl 0x001325 ; 000082, 26.922
042441 45 13 00    1295*  	dl 0x001345 ; 000083, 27.100
042444 65 13 00    1296*  	dl 0x001365 ; 000084, 27.277
042447 85 13 00    1297*  	dl 0x001385 ; 000085, 27.453
04244A A5 13 00    1298*  	dl 0x0013A5 ; 000086, 27.629
04244D C5 13 00    1299*  	dl 0x0013C5 ; 000087, 27.805
042450 E5 13 00    1300*  	dl 0x0013E5 ; 000088, 27.979
042453 05 14 00    1301*  	dl 0x001405 ; 000089, 28.154
042456 24 14 00    1302*  	dl 0x001424 ; 00008A, 28.327
042459 44 14 00    1303*  	dl 0x001444 ; 00008B, 28.501
04245C 63 14 00    1304*  	dl 0x001463 ; 00008C, 28.673
04245F 83 14 00    1305*  	dl 0x001483 ; 00008D, 28.845
042462 A2 14 00    1306*  	dl 0x0014A2 ; 00008E, 29.017
042465 C1 14 00    1307*  	dl 0x0014C1 ; 00008F, 29.187
042468 E0 14 00    1308*  	dl 0x0014E0 ; 000090, 29.358
04246B FF 14 00    1309*  	dl 0x0014FF ; 000091, 29.527
04246E 1E 15 00    1310*  	dl 0x00151E ; 000092, 29.697
042471 3C 15 00    1311*  	dl 0x00153C ; 000093, 29.865
042474 5B 15 00    1312*  	dl 0x00155B ; 000094, 30.033
042477 79 15 00    1313*  	dl 0x001579 ; 000095, 30.201
04247A 98 15 00    1314*  	dl 0x001598 ; 000096, 30.368
04247D B6 15 00    1315*  	dl 0x0015B6 ; 000097, 30.534
042480 D4 15 00    1316*  	dl 0x0015D4 ; 000098, 30.700
042483 F2 15 00    1317*  	dl 0x0015F2 ; 000099, 30.865
042486 10 16 00    1318*  	dl 0x001610 ; 00009A, 31.030
042489 2E 16 00    1319*  	dl 0x00162E ; 00009B, 31.194
04248C 4C 16 00    1320*  	dl 0x00164C ; 00009C, 31.357
04248F 6A 16 00    1321*  	dl 0x00166A ; 00009D, 31.520
042492 87 16 00    1322*  	dl 0x001687 ; 00009E, 31.682
042495 A5 16 00    1323*  	dl 0x0016A5 ; 00009F, 31.844
042498 C2 16 00    1324*  	dl 0x0016C2 ; 0000A0, 32.005
04249B DF 16 00    1325*  	dl 0x0016DF ; 0000A1, 32.166
04249E FC 16 00    1326*  	dl 0x0016FC ; 0000A2, 32.326
0424A1 19 17 00    1327*  	dl 0x001719 ; 0000A3, 32.486
0424A4 36 17 00    1328*  	dl 0x001736 ; 0000A4, 32.645
0424A7 53 17 00    1329*  	dl 0x001753 ; 0000A5, 32.803
0424AA 70 17 00    1330*  	dl 0x001770 ; 0000A6, 32.961
0424AD 8C 17 00    1331*  	dl 0x00178C ; 0000A7, 33.118
0424B0 A9 17 00    1332*  	dl 0x0017A9 ; 0000A8, 33.275
0424B3 C5 17 00    1333*  	dl 0x0017C5 ; 0000A9, 33.431
0424B6 E2 17 00    1334*  	dl 0x0017E2 ; 0000AA, 33.587
0424B9 FE 17 00    1335*  	dl 0x0017FE ; 0000AB, 33.742
0424BC 1A 18 00    1336*  	dl 0x00181A ; 0000AC, 33.896
0424BF 36 18 00    1337*  	dl 0x001836 ; 0000AD, 34.050
0424C2 52 18 00    1338*  	dl 0x001852 ; 0000AE, 34.203
0424C5 6E 18 00    1339*  	dl 0x00186E ; 0000AF, 34.356
0424C8 8A 18 00    1340*  	dl 0x00188A ; 0000B0, 34.509
0424CB A5 18 00    1341*  	dl 0x0018A5 ; 0000B1, 34.660
0424CE C1 18 00    1342*  	dl 0x0018C1 ; 0000B2, 34.811
0424D1 DC 18 00    1343*  	dl 0x0018DC ; 0000B3, 34.962
0424D4 F7 18 00    1344*  	dl 0x0018F7 ; 0000B4, 35.112
0424D7 13 19 00    1345*  	dl 0x001913 ; 0000B5, 35.262
0424DA 2E 19 00    1346*  	dl 0x00192E ; 0000B6, 35.410
0424DD 49 19 00    1347*  	dl 0x001949 ; 0000B7, 35.559
0424E0 64 19 00    1348*  	dl 0x001964 ; 0000B8, 35.707
0424E3 7F 19 00    1349*  	dl 0x00197F ; 0000B9, 35.854
0424E6 99 19 00    1350*  	dl 0x001999 ; 0000BA, 36.001
0424E9 B4 19 00    1351*  	dl 0x0019B4 ; 0000BB, 36.147
0424EC CE 19 00    1352*  	dl 0x0019CE ; 0000BC, 36.293
0424EF E9 19 00    1353*  	dl 0x0019E9 ; 0000BD, 36.438
0424F2 03 1A 00    1354*  	dl 0x001A03 ; 0000BE, 36.582
0424F5 1D 1A 00    1355*  	dl 0x001A1D ; 0000BF, 36.726
0424F8 37 1A 00    1356*  	dl 0x001A37 ; 0000C0, 36.870
0424FB 51 1A 00    1357*  	dl 0x001A51 ; 0000C1, 37.013
0424FE 6B 1A 00    1358*  	dl 0x001A6B ; 0000C2, 37.155
042501 85 1A 00    1359*  	dl 0x001A85 ; 0000C3, 37.297
042504 9F 1A 00    1360*  	dl 0x001A9F ; 0000C4, 37.439
042507 B9 1A 00    1361*  	dl 0x001AB9 ; 0000C5, 37.579
04250A D2 1A 00    1362*  	dl 0x001AD2 ; 0000C6, 37.720
04250D EC 1A 00    1363*  	dl 0x001AEC ; 0000C7, 37.859
042510 05 1B 00    1364*  	dl 0x001B05 ; 0000C8, 37.999
042513 1E 1B 00    1365*  	dl 0x001B1E ; 0000C9, 38.137
042516 37 1B 00    1366*  	dl 0x001B37 ; 0000CA, 38.276
042519 50 1B 00    1367*  	dl 0x001B50 ; 0000CB, 38.413
04251C 69 1B 00    1368*  	dl 0x001B69 ; 0000CC, 38.550
04251F 82 1B 00    1369*  	dl 0x001B82 ; 0000CD, 38.687
042522 9B 1B 00    1370*  	dl 0x001B9B ; 0000CE, 38.823
042525 B4 1B 00    1371*  	dl 0x001BB4 ; 0000CF, 38.959
042528 CC 1B 00    1372*  	dl 0x001BCC ; 0000D0, 39.094
04252B E5 1B 00    1373*  	dl 0x001BE5 ; 0000D1, 39.228
04252E FD 1B 00    1374*  	dl 0x001BFD ; 0000D2, 39.362
042531 16 1C 00    1375*  	dl 0x001C16 ; 0000D3, 39.496
042534 2E 1C 00    1376*  	dl 0x001C2E ; 0000D4, 39.629
042537 46 1C 00    1377*  	dl 0x001C46 ; 0000D5, 39.762
04253A 5E 1C 00    1378*  	dl 0x001C5E ; 0000D6, 39.894
04253D 76 1C 00    1379*  	dl 0x001C76 ; 0000D7, 40.025
042540 8E 1C 00    1380*  	dl 0x001C8E ; 0000D8, 40.156
042543 A5 1C 00    1381*  	dl 0x001CA5 ; 0000D9, 40.286
042546 BD 1C 00    1382*  	dl 0x001CBD ; 0000DA, 40.416
042549 D5 1C 00    1383*  	dl 0x001CD5 ; 0000DB, 40.546
04254C EC 1C 00    1384*  	dl 0x001CEC ; 0000DC, 40.675
04254F 04 1D 00    1385*  	dl 0x001D04 ; 0000DD, 40.803
042552 1B 1D 00    1386*  	dl 0x001D1B ; 0000DE, 40.931
042555 32 1D 00    1387*  	dl 0x001D32 ; 0000DF, 41.059
042558 49 1D 00    1388*  	dl 0x001D49 ; 0000E0, 41.186
04255B 60 1D 00    1389*  	dl 0x001D60 ; 0000E1, 41.312
04255E 77 1D 00    1390*  	dl 0x001D77 ; 0000E2, 41.438
042561 8E 1D 00    1391*  	dl 0x001D8E ; 0000E3, 41.564
042564 A5 1D 00    1392*  	dl 0x001DA5 ; 0000E4, 41.689
042567 BB 1D 00    1393*  	dl 0x001DBB ; 0000E5, 41.814
04256A D2 1D 00    1394*  	dl 0x001DD2 ; 0000E6, 41.938
04256D E9 1D 00    1395*  	dl 0x001DE9 ; 0000E7, 42.061
042570 FF 1D 00    1396*  	dl 0x001DFF ; 0000E8, 42.184
042573 15 1E 00    1397*  	dl 0x001E15 ; 0000E9, 42.307
042576 2C 1E 00    1398*  	dl 0x001E2C ; 0000EA, 42.429
042579 42 1E 00    1399*  	dl 0x001E42 ; 0000EB, 42.551
04257C 58 1E 00    1400*  	dl 0x001E58 ; 0000EC, 42.672
04257F 6E 1E 00    1401*  	dl 0x001E6E ; 0000ED, 42.793
042582 84 1E 00    1402*  	dl 0x001E84 ; 0000EE, 42.913
042585 99 1E 00    1403*  	dl 0x001E99 ; 0000EF, 43.033
042588 AF 1E 00    1404*  	dl 0x001EAF ; 0000F0, 43.152
04258B C5 1E 00    1405*  	dl 0x001EC5 ; 0000F1, 43.271
04258E DA 1E 00    1406*  	dl 0x001EDA ; 0000F2, 43.390
042591 F0 1E 00    1407*  	dl 0x001EF0 ; 0000F3, 43.508
042594 05 1F 00    1408*  	dl 0x001F05 ; 0000F4, 43.625
042597 1B 1F 00    1409*  	dl 0x001F1B ; 0000F5, 43.742
04259A 30 1F 00    1410*  	dl 0x001F30 ; 0000F6, 43.859
04259D 45 1F 00    1411*  	dl 0x001F45 ; 0000F7, 43.975
0425A0 5A 1F 00    1412*  	dl 0x001F5A ; 0000F8, 44.091
0425A3 6F 1F 00    1413*  	dl 0x001F6F ; 0000F9, 44.206
0425A6 84 1F 00    1414*  	dl 0x001F84 ; 0000FA, 44.321
0425A9 99 1F 00    1415*  	dl 0x001F99 ; 0000FB, 44.435
0425AC AD 1F 00    1416*  	dl 0x001FAD ; 0000FC, 44.549
0425AF C2 1F 00    1417*  	dl 0x001FC2 ; 0000FD, 44.662
0425B2 D7 1F 00    1418*  	dl 0x001FD7 ; 0000FE, 44.775
0425B5 EB 1F 00    1419*  	dl 0x001FEB ; 0000FF, 44.888
0425B8 00 20 00    1420*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0425BB             0047   
0425BB             0048   ; Application includes
0425BB             0049   	include "font_rc.inc"
0425BB             0001*  ; Bitmap indices:
0425BB             0002*  BUF_0032: equ 0x0020 ; 32
0425BB             0003*  BUF_0033: equ 0x0021 ; 33 !
0425BB             0004*  ; Missing character 34 "
0425BB             0005*  ; Missing character 35 #
0425BB             0006*  ; Missing character 36 $
0425BB             0007*  ; Missing character 37 %
0425BB             0008*  ; Missing character 38 &
0425BB             0009*  ; Missing character 39 '
0425BB             0010*  ; Missing character 40 (
0425BB             0011*  ; Missing character 41 )
0425BB             0012*  ; Missing character 42 *
0425BB             0013*  ; Missing character 43 +
0425BB             0014*  ; Missing character 44 ,
0425BB             0015*  ; Missing character 45 -
0425BB             0016*  ; Missing character 46 .
0425BB             0017*  ; Missing character 47 /
0425BB             0018*  BUF_0048: equ 0x0030 ; 48 0
0425BB             0019*  BUF_0049: equ 0x0031 ; 49 1
0425BB             0020*  BUF_0050: equ 0x0032 ; 50 2
0425BB             0021*  BUF_0051: equ 0x0033 ; 51 3
0425BB             0022*  BUF_0052: equ 0x0034 ; 52 4
0425BB             0023*  BUF_0053: equ 0x0035 ; 53 5
0425BB             0024*  BUF_0054: equ 0x0036 ; 54 6
0425BB             0025*  BUF_0055: equ 0x0037 ; 55 7
0425BB             0026*  BUF_0056: equ 0x0038 ; 56 8
0425BB             0027*  BUF_0057: equ 0x0039 ; 57 9
0425BB             0028*  ; Missing character 58 :
0425BB             0029*  ; Missing character 59 ;
0425BB             0030*  ; Missing character 60 <
0425BB             0031*  ; Missing character 61 =
0425BB             0032*  ; Missing character 62 >
0425BB             0033*  BUF_0063: equ 0x003F ; 63 ?
0425BB             0034*  ; Missing character 64 @
0425BB             0035*  BUF_0065: equ 0x0041 ; 65 A
0425BB             0036*  BUF_0066: equ 0x0042 ; 66 B
0425BB             0037*  BUF_0067: equ 0x0043 ; 67 C
0425BB             0038*  BUF_0068: equ 0x0044 ; 68 D
0425BB             0039*  BUF_0069: equ 0x0045 ; 69 E
0425BB             0040*  BUF_0070: equ 0x0046 ; 70 F
0425BB             0041*  BUF_0071: equ 0x0047 ; 71 G
0425BB             0042*  BUF_0072: equ 0x0048 ; 72 H
0425BB             0043*  BUF_0073: equ 0x0049 ; 73 I
0425BB             0044*  BUF_0074: equ 0x004A ; 74 J
0425BB             0045*  BUF_0075: equ 0x004B ; 75 K
0425BB             0046*  BUF_0076: equ 0x004C ; 76 L
0425BB             0047*  BUF_0077: equ 0x004D ; 77 M
0425BB             0048*  BUF_0078: equ 0x004E ; 78 N
0425BB             0049*  BUF_0079: equ 0x004F ; 79 O
0425BB             0050*  BUF_0080: equ 0x0050 ; 80 P
0425BB             0051*  BUF_0081: equ 0x0051 ; 81 Q
0425BB             0052*  BUF_0082: equ 0x0052 ; 82 R
0425BB             0053*  BUF_0083: equ 0x0053 ; 83 S
0425BB             0054*  BUF_0084: equ 0x0054 ; 84 T
0425BB             0055*  BUF_0085: equ 0x0055 ; 85 U
0425BB             0056*  BUF_0086: equ 0x0056 ; 86 V
0425BB             0057*  BUF_0087: equ 0x0057 ; 87 W
0425BB             0058*  BUF_0088: equ 0x0058 ; 88 X
0425BB             0059*  BUF_0089: equ 0x0059 ; 89 Y
0425BB             0060*  BUF_0090: equ 0x005A ; 90 Z
0425BB             0061*  ; Missing character 91 [
0425BB             0062*  ; Missing character 92 \
0425BB             0063*  ; Missing character 93 ]
0425BB             0064*  ; Missing character 94 ^
0425BB             0065*  ; Missing character 95 _
0425BB             0066*  ; Missing character 96 `
0425BB             0067*  ; Missing character 97 a
0425BB             0068*  ; Missing character 98 b
0425BB             0069*  ; Missing character 99 c
0425BB             0070*  ; Missing character 100 d
0425BB             0071*  ; Missing character 101 e
0425BB             0072*  ; Missing character 102 f
0425BB             0073*  ; Missing character 103 g
0425BB             0074*  ; Missing character 104 h
0425BB             0075*  ; Missing character 105 i
0425BB             0076*  ; Missing character 106 j
0425BB             0077*  ; Missing character 107 k
0425BB             0078*  ; Missing character 108 l
0425BB             0079*  ; Missing character 109 m
0425BB             0080*  ; Missing character 110 n
0425BB             0081*  ; Missing character 111 o
0425BB             0082*  ; Missing character 112 p
0425BB             0083*  ; Missing character 113 q
0425BB             0084*  ; Missing character 114 r
0425BB             0085*  ; Missing character 115 s
0425BB             0086*  ; Missing character 116 t
0425BB             0087*  ; Missing character 117 u
0425BB             0088*  ; Missing character 118 v
0425BB             0089*  ; Missing character 119 w
0425BB             0090*  ; Missing character 120 x
0425BB             0091*  ; Missing character 121 y
0425BB             0092*  ; Missing character 122 z
0425BB             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
0425BB             0094*  font_rc:
0425BB 06 01 00 20 0095*  	dl 0x000106,BUF_0032
       00 00       
0425C1 03 0E 00 21 0096*  	dl 0x000E03,BUF_0033
       00 00       
0425C7 06 01 00 20 0097*  	dl 0x000106,BUF_0032 ; Missing character 34
       00 00       
0425CD 06 01 00 20 0098*  	dl 0x000106,BUF_0032 ; Missing character 35
       00 00       
0425D3 06 01 00 20 0099*  	dl 0x000106,BUF_0032 ; Missing character 36
       00 00       
0425D9 06 01 00 20 0100*  	dl 0x000106,BUF_0032 ; Missing character 37
       00 00       
0425DF 06 01 00 20 0101*  	dl 0x000106,BUF_0032 ; Missing character 38
       00 00       
0425E5 06 01 00 20 0102*  	dl 0x000106,BUF_0032 ; Missing character 39
       00 00       
0425EB 06 01 00 20 0103*  	dl 0x000106,BUF_0032 ; Missing character 40
       00 00       
0425F1 06 01 00 20 0104*  	dl 0x000106,BUF_0032 ; Missing character 41
       00 00       
0425F7 06 01 00 20 0105*  	dl 0x000106,BUF_0032 ; Missing character 42
       00 00       
0425FD 06 01 00 20 0106*  	dl 0x000106,BUF_0032 ; Missing character 43
       00 00       
042603 06 01 00 20 0107*  	dl 0x000106,BUF_0032 ; Missing character 44
       00 00       
042609 06 01 00 20 0108*  	dl 0x000106,BUF_0032 ; Missing character 45
       00 00       
04260F 06 01 00 20 0109*  	dl 0x000106,BUF_0032 ; Missing character 46
       00 00       
042615 06 01 00 20 0110*  	dl 0x000106,BUF_0032 ; Missing character 47
       00 00       
04261B 08 0E 00 30 0111*  	dl 0x000E08,BUF_0048
       00 00       
042621 08 0E 00 31 0112*  	dl 0x000E08,BUF_0049
       00 00       
042627 08 0E 00 32 0113*  	dl 0x000E08,BUF_0050
       00 00       
04262D 08 0E 00 33 0114*  	dl 0x000E08,BUF_0051
       00 00       
042633 08 0E 00 34 0115*  	dl 0x000E08,BUF_0052
       00 00       
042639 08 0E 00 35 0116*  	dl 0x000E08,BUF_0053
       00 00       
04263F 08 0E 00 36 0117*  	dl 0x000E08,BUF_0054
       00 00       
042645 08 0E 00 37 0118*  	dl 0x000E08,BUF_0055
       00 00       
04264B 08 0E 00 38 0119*  	dl 0x000E08,BUF_0056
       00 00       
042651 08 0E 00 39 0120*  	dl 0x000E08,BUF_0057
       00 00       
042657 06 01 00 20 0121*  	dl 0x000106,BUF_0032 ; Missing character 58
       00 00       
04265D 06 01 00 20 0122*  	dl 0x000106,BUF_0032 ; Missing character 59
       00 00       
042663 06 01 00 20 0123*  	dl 0x000106,BUF_0032 ; Missing character 60
       00 00       
042669 06 01 00 20 0124*  	dl 0x000106,BUF_0032 ; Missing character 61
       00 00       
04266F 06 01 00 20 0125*  	dl 0x000106,BUF_0032 ; Missing character 62
       00 00       
042675 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0063
       00 00       
04267B 06 01 00 20 0127*  	dl 0x000106,BUF_0032 ; Missing character 64
       00 00       
042681 07 0E 00 41 0128*  	dl 0x000E07,BUF_0065
       00 00       
042687 08 0E 00 42 0129*  	dl 0x000E08,BUF_0066
       00 00       
04268D 07 0E 00 43 0130*  	dl 0x000E07,BUF_0067
       00 00       
042693 08 0E 00 44 0131*  	dl 0x000E08,BUF_0068
       00 00       
042699 08 0E 00 45 0132*  	dl 0x000E08,BUF_0069
       00 00       
04269F 07 0E 00 46 0133*  	dl 0x000E07,BUF_0070
       00 00       
0426A5 08 0E 00 47 0134*  	dl 0x000E08,BUF_0071
       00 00       
0426AB 07 0E 00 48 0135*  	dl 0x000E07,BUF_0072
       00 00       
0426B1 07 0E 00 49 0136*  	dl 0x000E07,BUF_0073
       00 00       
0426B7 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0074
       00 00       
0426BD 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0075
       00 00       
0426C3 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0076
       00 00       
0426C9 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0077
       00 00       
0426CF 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0078
       00 00       
0426D5 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0079
       00 00       
0426DB 07 0E 00 50 0143*  	dl 0x000E07,BUF_0080
       00 00       
0426E1 08 0F 00 51 0144*  	dl 0x000F08,BUF_0081
       00 00       
0426E7 08 0E 00 52 0145*  	dl 0x000E08,BUF_0082
       00 00       
0426ED 08 0E 00 53 0146*  	dl 0x000E08,BUF_0083
       00 00       
0426F3 07 0E 00 54 0147*  	dl 0x000E07,BUF_0084
       00 00       
0426F9 08 0E 00 55 0148*  	dl 0x000E08,BUF_0085
       00 00       
0426FF 07 0E 00 56 0149*  	dl 0x000E07,BUF_0086
       00 00       
042705 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0087
       00 00       
04270B 07 0E 00 58 0151*  	dl 0x000E07,BUF_0088
       00 00       
042711 08 0E 00 59 0152*  	dl 0x000E08,BUF_0089
       00 00       
042717 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0090
       00 00       
04271D 06 01 00 20 0154*  	dl 0x000106,BUF_0032 ; Missing character 91
       00 00       
042723 06 01 00 20 0155*  	dl 0x000106,BUF_0032 ; Missing character 92
       00 00       
042729 06 01 00 20 0156*  	dl 0x000106,BUF_0032 ; Missing character 93
       00 00       
04272F 06 01 00 20 0157*  	dl 0x000106,BUF_0032 ; Missing character 94
       00 00       
042735 06 01 00 20 0158*  	dl 0x000106,BUF_0032 ; Missing character 95
       00 00       
04273B 06 01 00 20 0159*  	dl 0x000106,BUF_0032 ; Missing character 96
       00 00       
042741 06 01 00 20 0160*  	dl 0x000106,BUF_0032 ; Missing character 97
       00 00       
042747 06 01 00 20 0161*  	dl 0x000106,BUF_0032 ; Missing character 98
       00 00       
04274D 06 01 00 20 0162*  	dl 0x000106,BUF_0032 ; Missing character 99
       00 00       
042753 06 01 00 20 0163*  	dl 0x000106,BUF_0032 ; Missing character 100
       00 00       
042759 06 01 00 20 0164*  	dl 0x000106,BUF_0032 ; Missing character 101
       00 00       
04275F 06 01 00 20 0165*  	dl 0x000106,BUF_0032 ; Missing character 102
       00 00       
042765 06 01 00 20 0166*  	dl 0x000106,BUF_0032 ; Missing character 103
       00 00       
04276B 06 01 00 20 0167*  	dl 0x000106,BUF_0032 ; Missing character 104
       00 00       
042771 06 01 00 20 0168*  	dl 0x000106,BUF_0032 ; Missing character 105
       00 00       
042777 06 01 00 20 0169*  	dl 0x000106,BUF_0032 ; Missing character 106
       00 00       
04277D 06 01 00 20 0170*  	dl 0x000106,BUF_0032 ; Missing character 107
       00 00       
042783 06 01 00 20 0171*  	dl 0x000106,BUF_0032 ; Missing character 108
       00 00       
042789 06 01 00 20 0172*  	dl 0x000106,BUF_0032 ; Missing character 109
       00 00       
04278F 06 01 00 20 0173*  	dl 0x000106,BUF_0032 ; Missing character 110
       00 00       
042795 06 01 00 20 0174*  	dl 0x000106,BUF_0032 ; Missing character 111
       00 00       
04279B 06 01 00 20 0175*  	dl 0x000106,BUF_0032 ; Missing character 112
       00 00       
0427A1 06 01 00 20 0176*  	dl 0x000106,BUF_0032 ; Missing character 113
       00 00       
0427A7 06 01 00 20 0177*  	dl 0x000106,BUF_0032 ; Missing character 114
       00 00       
0427AD 06 01 00 20 0178*  	dl 0x000106,BUF_0032 ; Missing character 115
       00 00       
0427B3 06 01 00 20 0179*  	dl 0x000106,BUF_0032 ; Missing character 116
       00 00       
0427B9 06 01 00 20 0180*  	dl 0x000106,BUF_0032 ; Missing character 117
       00 00       
0427BF 06 01 00 20 0181*  	dl 0x000106,BUF_0032 ; Missing character 118
       00 00       
0427C5 06 01 00 20 0182*  	dl 0x000106,BUF_0032 ; Missing character 119
       00 00       
0427CB 06 01 00 20 0183*  	dl 0x000106,BUF_0032 ; Missing character 120
       00 00       
0427D1 06 01 00 20 0184*  	dl 0x000106,BUF_0032 ; Missing character 121
       00 00       
0427D7 06 01 00 20 0185*  	dl 0x000106,BUF_0032 ; Missing character 122
       00 00       
0427DD             0186*  
0427DD             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
0427DD             0188*  load_font_rc:
0427DD             0189*  
0427DD 21 81 2D 04 0190*  	ld hl,Frc032
0427E1 11 00 E0 B7 0191*  	ld de,filedata
0427E5 01 00 00 01 0192*  	ld bc,65536
0427E9 3E 01       0193*  	ld a,mos_load
0427EB 5B CF       0194*  	RST.LIL 08h
0427ED 21 20 00 00 0195*  	ld hl,BUF_0032
0427F1 01 06 00 00 0196*  	ld bc,6
0427F5 11 01 00 00 0197*  	ld de,1
0427F9 DD 21 06 00 0198*  	ld ix,6
       00          
0427FE CD A3 0A 04 0199*  	call vdu_load_img
042802             0200*  
042802 21 94 2D 04 0201*  	ld hl,Frc033
042806 11 00 E0 B7 0202*  	ld de,filedata
04280A 01 00 00 01 0203*  	ld bc,65536
04280E 3E 01       0204*  	ld a,mos_load
042810 5B CF       0205*  	RST.LIL 08h
042812 21 21 00 00 0206*  	ld hl,BUF_0033
042816 01 03 00 00 0207*  	ld bc,3
04281A 11 0E 00 00 0208*  	ld de,14
04281E DD 21 2A 00 0209*  	ld ix,42
       00          
042823 CD A3 0A 04 0210*  	call vdu_load_img
042827             0211*  ; Missing character 34
042827             0212*  ; Missing character 35
042827             0213*  ; Missing character 36
042827             0214*  ; Missing character 37
042827             0215*  ; Missing character 38
042827             0216*  ; Missing character 39
042827             0217*  ; Missing character 40
042827             0218*  ; Missing character 41
042827             0219*  ; Missing character 42
042827             0220*  ; Missing character 43
042827             0221*  ; Missing character 44
042827             0222*  ; Missing character 45
042827             0223*  ; Missing character 46
042827             0224*  ; Missing character 47
042827             0225*  
042827 21 A7 2D 04 0226*  	ld hl,Frc048
04282B 11 00 E0 B7 0227*  	ld de,filedata
04282F 01 00 00 01 0228*  	ld bc,65536
042833 3E 01       0229*  	ld a,mos_load
042835 5B CF       0230*  	RST.LIL 08h
042837 21 30 00 00 0231*  	ld hl,BUF_0048
04283B 01 08 00 00 0232*  	ld bc,8
04283F 11 0E 00 00 0233*  	ld de,14
042843 DD 21 70 00 0234*  	ld ix,112
       00          
042848 CD A3 0A 04 0235*  	call vdu_load_img
04284C             0236*  
04284C 21 BA 2D 04 0237*  	ld hl,Frc049
042850 11 00 E0 B7 0238*  	ld de,filedata
042854 01 00 00 01 0239*  	ld bc,65536
042858 3E 01       0240*  	ld a,mos_load
04285A 5B CF       0241*  	RST.LIL 08h
04285C 21 31 00 00 0242*  	ld hl,BUF_0049
042860 01 08 00 00 0243*  	ld bc,8
042864 11 0E 00 00 0244*  	ld de,14
042868 DD 21 70 00 0245*  	ld ix,112
       00          
04286D CD A3 0A 04 0246*  	call vdu_load_img
042871             0247*  
042871 21 CD 2D 04 0248*  	ld hl,Frc050
042875 11 00 E0 B7 0249*  	ld de,filedata
042879 01 00 00 01 0250*  	ld bc,65536
04287D 3E 01       0251*  	ld a,mos_load
04287F 5B CF       0252*  	RST.LIL 08h
042881 21 32 00 00 0253*  	ld hl,BUF_0050
042885 01 08 00 00 0254*  	ld bc,8
042889 11 0E 00 00 0255*  	ld de,14
04288D DD 21 70 00 0256*  	ld ix,112
       00          
042892 CD A3 0A 04 0257*  	call vdu_load_img
042896             0258*  
042896 21 E0 2D 04 0259*  	ld hl,Frc051
04289A 11 00 E0 B7 0260*  	ld de,filedata
04289E 01 00 00 01 0261*  	ld bc,65536
0428A2 3E 01       0262*  	ld a,mos_load
0428A4 5B CF       0263*  	RST.LIL 08h
0428A6 21 33 00 00 0264*  	ld hl,BUF_0051
0428AA 01 08 00 00 0265*  	ld bc,8
0428AE 11 0E 00 00 0266*  	ld de,14
0428B2 DD 21 70 00 0267*  	ld ix,112
       00          
0428B7 CD A3 0A 04 0268*  	call vdu_load_img
0428BB             0269*  
0428BB 21 F3 2D 04 0270*  	ld hl,Frc052
0428BF 11 00 E0 B7 0271*  	ld de,filedata
0428C3 01 00 00 01 0272*  	ld bc,65536
0428C7 3E 01       0273*  	ld a,mos_load
0428C9 5B CF       0274*  	RST.LIL 08h
0428CB 21 34 00 00 0275*  	ld hl,BUF_0052
0428CF 01 08 00 00 0276*  	ld bc,8
0428D3 11 0E 00 00 0277*  	ld de,14
0428D7 DD 21 70 00 0278*  	ld ix,112
       00          
0428DC CD A3 0A 04 0279*  	call vdu_load_img
0428E0             0280*  
0428E0 21 06 2E 04 0281*  	ld hl,Frc053
0428E4 11 00 E0 B7 0282*  	ld de,filedata
0428E8 01 00 00 01 0283*  	ld bc,65536
0428EC 3E 01       0284*  	ld a,mos_load
0428EE 5B CF       0285*  	RST.LIL 08h
0428F0 21 35 00 00 0286*  	ld hl,BUF_0053
0428F4 01 08 00 00 0287*  	ld bc,8
0428F8 11 0E 00 00 0288*  	ld de,14
0428FC DD 21 70 00 0289*  	ld ix,112
       00          
042901 CD A3 0A 04 0290*  	call vdu_load_img
042905             0291*  
042905 21 19 2E 04 0292*  	ld hl,Frc054
042909 11 00 E0 B7 0293*  	ld de,filedata
04290D 01 00 00 01 0294*  	ld bc,65536
042911 3E 01       0295*  	ld a,mos_load
042913 5B CF       0296*  	RST.LIL 08h
042915 21 36 00 00 0297*  	ld hl,BUF_0054
042919 01 08 00 00 0298*  	ld bc,8
04291D 11 0E 00 00 0299*  	ld de,14
042921 DD 21 70 00 0300*  	ld ix,112
       00          
042926 CD A3 0A 04 0301*  	call vdu_load_img
04292A             0302*  
04292A 21 2C 2E 04 0303*  	ld hl,Frc055
04292E 11 00 E0 B7 0304*  	ld de,filedata
042932 01 00 00 01 0305*  	ld bc,65536
042936 3E 01       0306*  	ld a,mos_load
042938 5B CF       0307*  	RST.LIL 08h
04293A 21 37 00 00 0308*  	ld hl,BUF_0055
04293E 01 08 00 00 0309*  	ld bc,8
042942 11 0E 00 00 0310*  	ld de,14
042946 DD 21 70 00 0311*  	ld ix,112
       00          
04294B CD A3 0A 04 0312*  	call vdu_load_img
04294F             0313*  
04294F 21 3F 2E 04 0314*  	ld hl,Frc056
042953 11 00 E0 B7 0315*  	ld de,filedata
042957 01 00 00 01 0316*  	ld bc,65536
04295B 3E 01       0317*  	ld a,mos_load
04295D 5B CF       0318*  	RST.LIL 08h
04295F 21 38 00 00 0319*  	ld hl,BUF_0056
042963 01 08 00 00 0320*  	ld bc,8
042967 11 0E 00 00 0321*  	ld de,14
04296B DD 21 70 00 0322*  	ld ix,112
       00          
042970 CD A3 0A 04 0323*  	call vdu_load_img
042974             0324*  
042974 21 52 2E 04 0325*  	ld hl,Frc057
042978 11 00 E0 B7 0326*  	ld de,filedata
04297C 01 00 00 01 0327*  	ld bc,65536
042980 3E 01       0328*  	ld a,mos_load
042982 5B CF       0329*  	RST.LIL 08h
042984 21 39 00 00 0330*  	ld hl,BUF_0057
042988 01 08 00 00 0331*  	ld bc,8
04298C 11 0E 00 00 0332*  	ld de,14
042990 DD 21 70 00 0333*  	ld ix,112
       00          
042995 CD A3 0A 04 0334*  	call vdu_load_img
042999             0335*  ; Missing character 58
042999             0336*  ; Missing character 59
042999             0337*  ; Missing character 60
042999             0338*  ; Missing character 61
042999             0339*  ; Missing character 62
042999             0340*  
042999 21 65 2E 04 0341*  	ld hl,Frc063
04299D 11 00 E0 B7 0342*  	ld de,filedata
0429A1 01 00 00 01 0343*  	ld bc,65536
0429A5 3E 01       0344*  	ld a,mos_load
0429A7 5B CF       0345*  	RST.LIL 08h
0429A9 21 3F 00 00 0346*  	ld hl,BUF_0063
0429AD 01 08 00 00 0347*  	ld bc,8
0429B1 11 0E 00 00 0348*  	ld de,14
0429B5 DD 21 70 00 0349*  	ld ix,112
       00          
0429BA CD A3 0A 04 0350*  	call vdu_load_img
0429BE             0351*  ; Missing character 64
0429BE             0352*  
0429BE 21 78 2E 04 0353*  	ld hl,Frc065
0429C2 11 00 E0 B7 0354*  	ld de,filedata
0429C6 01 00 00 01 0355*  	ld bc,65536
0429CA 3E 01       0356*  	ld a,mos_load
0429CC 5B CF       0357*  	RST.LIL 08h
0429CE 21 41 00 00 0358*  	ld hl,BUF_0065
0429D2 01 07 00 00 0359*  	ld bc,7
0429D6 11 0E 00 00 0360*  	ld de,14
0429DA DD 21 62 00 0361*  	ld ix,98
       00          
0429DF CD A3 0A 04 0362*  	call vdu_load_img
0429E3             0363*  
0429E3 21 8B 2E 04 0364*  	ld hl,Frc066
0429E7 11 00 E0 B7 0365*  	ld de,filedata
0429EB 01 00 00 01 0366*  	ld bc,65536
0429EF 3E 01       0367*  	ld a,mos_load
0429F1 5B CF       0368*  	RST.LIL 08h
0429F3 21 42 00 00 0369*  	ld hl,BUF_0066
0429F7 01 08 00 00 0370*  	ld bc,8
0429FB 11 0E 00 00 0371*  	ld de,14
0429FF DD 21 70 00 0372*  	ld ix,112
       00          
042A04 CD A3 0A 04 0373*  	call vdu_load_img
042A08             0374*  
042A08 21 9E 2E 04 0375*  	ld hl,Frc067
042A0C 11 00 E0 B7 0376*  	ld de,filedata
042A10 01 00 00 01 0377*  	ld bc,65536
042A14 3E 01       0378*  	ld a,mos_load
042A16 5B CF       0379*  	RST.LIL 08h
042A18 21 43 00 00 0380*  	ld hl,BUF_0067
042A1C 01 07 00 00 0381*  	ld bc,7
042A20 11 0E 00 00 0382*  	ld de,14
042A24 DD 21 62 00 0383*  	ld ix,98
       00          
042A29 CD A3 0A 04 0384*  	call vdu_load_img
042A2D             0385*  
042A2D 21 B1 2E 04 0386*  	ld hl,Frc068
042A31 11 00 E0 B7 0387*  	ld de,filedata
042A35 01 00 00 01 0388*  	ld bc,65536
042A39 3E 01       0389*  	ld a,mos_load
042A3B 5B CF       0390*  	RST.LIL 08h
042A3D 21 44 00 00 0391*  	ld hl,BUF_0068
042A41 01 08 00 00 0392*  	ld bc,8
042A45 11 0E 00 00 0393*  	ld de,14
042A49 DD 21 70 00 0394*  	ld ix,112
       00          
042A4E CD A3 0A 04 0395*  	call vdu_load_img
042A52             0396*  
042A52 21 C4 2E 04 0397*  	ld hl,Frc069
042A56 11 00 E0 B7 0398*  	ld de,filedata
042A5A 01 00 00 01 0399*  	ld bc,65536
042A5E 3E 01       0400*  	ld a,mos_load
042A60 5B CF       0401*  	RST.LIL 08h
042A62 21 45 00 00 0402*  	ld hl,BUF_0069
042A66 01 08 00 00 0403*  	ld bc,8
042A6A 11 0E 00 00 0404*  	ld de,14
042A6E DD 21 70 00 0405*  	ld ix,112
       00          
042A73 CD A3 0A 04 0406*  	call vdu_load_img
042A77             0407*  
042A77 21 D7 2E 04 0408*  	ld hl,Frc070
042A7B 11 00 E0 B7 0409*  	ld de,filedata
042A7F 01 00 00 01 0410*  	ld bc,65536
042A83 3E 01       0411*  	ld a,mos_load
042A85 5B CF       0412*  	RST.LIL 08h
042A87 21 46 00 00 0413*  	ld hl,BUF_0070
042A8B 01 07 00 00 0414*  	ld bc,7
042A8F 11 0E 00 00 0415*  	ld de,14
042A93 DD 21 62 00 0416*  	ld ix,98
       00          
042A98 CD A3 0A 04 0417*  	call vdu_load_img
042A9C             0418*  
042A9C 21 EA 2E 04 0419*  	ld hl,Frc071
042AA0 11 00 E0 B7 0420*  	ld de,filedata
042AA4 01 00 00 01 0421*  	ld bc,65536
042AA8 3E 01       0422*  	ld a,mos_load
042AAA 5B CF       0423*  	RST.LIL 08h
042AAC 21 47 00 00 0424*  	ld hl,BUF_0071
042AB0 01 08 00 00 0425*  	ld bc,8
042AB4 11 0E 00 00 0426*  	ld de,14
042AB8 DD 21 70 00 0427*  	ld ix,112
       00          
042ABD CD A3 0A 04 0428*  	call vdu_load_img
042AC1             0429*  
042AC1 21 FD 2E 04 0430*  	ld hl,Frc072
042AC5 11 00 E0 B7 0431*  	ld de,filedata
042AC9 01 00 00 01 0432*  	ld bc,65536
042ACD 3E 01       0433*  	ld a,mos_load
042ACF 5B CF       0434*  	RST.LIL 08h
042AD1 21 48 00 00 0435*  	ld hl,BUF_0072
042AD5 01 07 00 00 0436*  	ld bc,7
042AD9 11 0E 00 00 0437*  	ld de,14
042ADD DD 21 62 00 0438*  	ld ix,98
       00          
042AE2 CD A3 0A 04 0439*  	call vdu_load_img
042AE6             0440*  
042AE6 21 10 2F 04 0441*  	ld hl,Frc073
042AEA 11 00 E0 B7 0442*  	ld de,filedata
042AEE 01 00 00 01 0443*  	ld bc,65536
042AF2 3E 01       0444*  	ld a,mos_load
042AF4 5B CF       0445*  	RST.LIL 08h
042AF6 21 49 00 00 0446*  	ld hl,BUF_0073
042AFA 01 07 00 00 0447*  	ld bc,7
042AFE 11 0E 00 00 0448*  	ld de,14
042B02 DD 21 62 00 0449*  	ld ix,98
       00          
042B07 CD A3 0A 04 0450*  	call vdu_load_img
042B0B             0451*  
042B0B 21 23 2F 04 0452*  	ld hl,Frc074
042B0F 11 00 E0 B7 0453*  	ld de,filedata
042B13 01 00 00 01 0454*  	ld bc,65536
042B17 3E 01       0455*  	ld a,mos_load
042B19 5B CF       0456*  	RST.LIL 08h
042B1B 21 4A 00 00 0457*  	ld hl,BUF_0074
042B1F 01 08 00 00 0458*  	ld bc,8
042B23 11 0E 00 00 0459*  	ld de,14
042B27 DD 21 70 00 0460*  	ld ix,112
       00          
042B2C CD A3 0A 04 0461*  	call vdu_load_img
042B30             0462*  
042B30 21 36 2F 04 0463*  	ld hl,Frc075
042B34 11 00 E0 B7 0464*  	ld de,filedata
042B38 01 00 00 01 0465*  	ld bc,65536
042B3C 3E 01       0466*  	ld a,mos_load
042B3E 5B CF       0467*  	RST.LIL 08h
042B40 21 4B 00 00 0468*  	ld hl,BUF_0075
042B44 01 07 00 00 0469*  	ld bc,7
042B48 11 0E 00 00 0470*  	ld de,14
042B4C DD 21 62 00 0471*  	ld ix,98
       00          
042B51 CD A3 0A 04 0472*  	call vdu_load_img
042B55             0473*  
042B55 21 49 2F 04 0474*  	ld hl,Frc076
042B59 11 00 E0 B7 0475*  	ld de,filedata
042B5D 01 00 00 01 0476*  	ld bc,65536
042B61 3E 01       0477*  	ld a,mos_load
042B63 5B CF       0478*  	RST.LIL 08h
042B65 21 4C 00 00 0479*  	ld hl,BUF_0076
042B69 01 08 00 00 0480*  	ld bc,8
042B6D 11 0E 00 00 0481*  	ld de,14
042B71 DD 21 70 00 0482*  	ld ix,112
       00          
042B76 CD A3 0A 04 0483*  	call vdu_load_img
042B7A             0484*  
042B7A 21 5C 2F 04 0485*  	ld hl,Frc077
042B7E 11 00 E0 B7 0486*  	ld de,filedata
042B82 01 00 00 01 0487*  	ld bc,65536
042B86 3E 01       0488*  	ld a,mos_load
042B88 5B CF       0489*  	RST.LIL 08h
042B8A 21 4D 00 00 0490*  	ld hl,BUF_0077
042B8E 01 09 00 00 0491*  	ld bc,9
042B92 11 0E 00 00 0492*  	ld de,14
042B96 DD 21 7E 00 0493*  	ld ix,126
       00          
042B9B CD A3 0A 04 0494*  	call vdu_load_img
042B9F             0495*  
042B9F 21 6F 2F 04 0496*  	ld hl,Frc078
042BA3 11 00 E0 B7 0497*  	ld de,filedata
042BA7 01 00 00 01 0498*  	ld bc,65536
042BAB 3E 01       0499*  	ld a,mos_load
042BAD 5B CF       0500*  	RST.LIL 08h
042BAF 21 4E 00 00 0501*  	ld hl,BUF_0078
042BB3 01 07 00 00 0502*  	ld bc,7
042BB7 11 0E 00 00 0503*  	ld de,14
042BBB DD 21 62 00 0504*  	ld ix,98
       00          
042BC0 CD A3 0A 04 0505*  	call vdu_load_img
042BC4             0506*  
042BC4 21 82 2F 04 0507*  	ld hl,Frc079
042BC8 11 00 E0 B7 0508*  	ld de,filedata
042BCC 01 00 00 01 0509*  	ld bc,65536
042BD0 3E 01       0510*  	ld a,mos_load
042BD2 5B CF       0511*  	RST.LIL 08h
042BD4 21 4F 00 00 0512*  	ld hl,BUF_0079
042BD8 01 08 00 00 0513*  	ld bc,8
042BDC 11 0E 00 00 0514*  	ld de,14
042BE0 DD 21 70 00 0515*  	ld ix,112
       00          
042BE5 CD A3 0A 04 0516*  	call vdu_load_img
042BE9             0517*  
042BE9 21 95 2F 04 0518*  	ld hl,Frc080
042BED 11 00 E0 B7 0519*  	ld de,filedata
042BF1 01 00 00 01 0520*  	ld bc,65536
042BF5 3E 01       0521*  	ld a,mos_load
042BF7 5B CF       0522*  	RST.LIL 08h
042BF9 21 50 00 00 0523*  	ld hl,BUF_0080
042BFD 01 07 00 00 0524*  	ld bc,7
042C01 11 0E 00 00 0525*  	ld de,14
042C05 DD 21 62 00 0526*  	ld ix,98
       00          
042C0A CD A3 0A 04 0527*  	call vdu_load_img
042C0E             0528*  
042C0E 21 A8 2F 04 0529*  	ld hl,Frc081
042C12 11 00 E0 B7 0530*  	ld de,filedata
042C16 01 00 00 01 0531*  	ld bc,65536
042C1A 3E 01       0532*  	ld a,mos_load
042C1C 5B CF       0533*  	RST.LIL 08h
042C1E 21 51 00 00 0534*  	ld hl,BUF_0081
042C22 01 08 00 00 0535*  	ld bc,8
042C26 11 0F 00 00 0536*  	ld de,15
042C2A DD 21 78 00 0537*  	ld ix,120
       00          
042C2F CD A3 0A 04 0538*  	call vdu_load_img
042C33             0539*  
042C33 21 BB 2F 04 0540*  	ld hl,Frc082
042C37 11 00 E0 B7 0541*  	ld de,filedata
042C3B 01 00 00 01 0542*  	ld bc,65536
042C3F 3E 01       0543*  	ld a,mos_load
042C41 5B CF       0544*  	RST.LIL 08h
042C43 21 52 00 00 0545*  	ld hl,BUF_0082
042C47 01 08 00 00 0546*  	ld bc,8
042C4B 11 0E 00 00 0547*  	ld de,14
042C4F DD 21 70 00 0548*  	ld ix,112
       00          
042C54 CD A3 0A 04 0549*  	call vdu_load_img
042C58             0550*  
042C58 21 CE 2F 04 0551*  	ld hl,Frc083
042C5C 11 00 E0 B7 0552*  	ld de,filedata
042C60 01 00 00 01 0553*  	ld bc,65536
042C64 3E 01       0554*  	ld a,mos_load
042C66 5B CF       0555*  	RST.LIL 08h
042C68 21 53 00 00 0556*  	ld hl,BUF_0083
042C6C 01 08 00 00 0557*  	ld bc,8
042C70 11 0E 00 00 0558*  	ld de,14
042C74 DD 21 70 00 0559*  	ld ix,112
       00          
042C79 CD A3 0A 04 0560*  	call vdu_load_img
042C7D             0561*  
042C7D 21 E1 2F 04 0562*  	ld hl,Frc084
042C81 11 00 E0 B7 0563*  	ld de,filedata
042C85 01 00 00 01 0564*  	ld bc,65536
042C89 3E 01       0565*  	ld a,mos_load
042C8B 5B CF       0566*  	RST.LIL 08h
042C8D 21 54 00 00 0567*  	ld hl,BUF_0084
042C91 01 07 00 00 0568*  	ld bc,7
042C95 11 0E 00 00 0569*  	ld de,14
042C99 DD 21 62 00 0570*  	ld ix,98
       00          
042C9E CD A3 0A 04 0571*  	call vdu_load_img
042CA2             0572*  
042CA2 21 F4 2F 04 0573*  	ld hl,Frc085
042CA6 11 00 E0 B7 0574*  	ld de,filedata
042CAA 01 00 00 01 0575*  	ld bc,65536
042CAE 3E 01       0576*  	ld a,mos_load
042CB0 5B CF       0577*  	RST.LIL 08h
042CB2 21 55 00 00 0578*  	ld hl,BUF_0085
042CB6 01 08 00 00 0579*  	ld bc,8
042CBA 11 0E 00 00 0580*  	ld de,14
042CBE DD 21 70 00 0581*  	ld ix,112
       00          
042CC3 CD A3 0A 04 0582*  	call vdu_load_img
042CC7             0583*  
042CC7 21 07 30 04 0584*  	ld hl,Frc086
042CCB 11 00 E0 B7 0585*  	ld de,filedata
042CCF 01 00 00 01 0586*  	ld bc,65536
042CD3 3E 01       0587*  	ld a,mos_load
042CD5 5B CF       0588*  	RST.LIL 08h
042CD7 21 56 00 00 0589*  	ld hl,BUF_0086
042CDB 01 07 00 00 0590*  	ld bc,7
042CDF 11 0E 00 00 0591*  	ld de,14
042CE3 DD 21 62 00 0592*  	ld ix,98
       00          
042CE8 CD A3 0A 04 0593*  	call vdu_load_img
042CEC             0594*  
042CEC 21 1A 30 04 0595*  	ld hl,Frc087
042CF0 11 00 E0 B7 0596*  	ld de,filedata
042CF4 01 00 00 01 0597*  	ld bc,65536
042CF8 3E 01       0598*  	ld a,mos_load
042CFA 5B CF       0599*  	RST.LIL 08h
042CFC 21 57 00 00 0600*  	ld hl,BUF_0087
042D00 01 0B 00 00 0601*  	ld bc,11
042D04 11 0E 00 00 0602*  	ld de,14
042D08 DD 21 9A 00 0603*  	ld ix,154
       00          
042D0D CD A3 0A 04 0604*  	call vdu_load_img
042D11             0605*  
042D11 21 2D 30 04 0606*  	ld hl,Frc088
042D15 11 00 E0 B7 0607*  	ld de,filedata
042D19 01 00 00 01 0608*  	ld bc,65536
042D1D 3E 01       0609*  	ld a,mos_load
042D1F 5B CF       0610*  	RST.LIL 08h
042D21 21 58 00 00 0611*  	ld hl,BUF_0088
042D25 01 07 00 00 0612*  	ld bc,7
042D29 11 0E 00 00 0613*  	ld de,14
042D2D DD 21 62 00 0614*  	ld ix,98
       00          
042D32 CD A3 0A 04 0615*  	call vdu_load_img
042D36             0616*  
042D36 21 40 30 04 0617*  	ld hl,Frc089
042D3A 11 00 E0 B7 0618*  	ld de,filedata
042D3E 01 00 00 01 0619*  	ld bc,65536
042D42 3E 01       0620*  	ld a,mos_load
042D44 5B CF       0621*  	RST.LIL 08h
042D46 21 59 00 00 0622*  	ld hl,BUF_0089
042D4A 01 08 00 00 0623*  	ld bc,8
042D4E 11 0E 00 00 0624*  	ld de,14
042D52 DD 21 70 00 0625*  	ld ix,112
       00          
042D57 CD A3 0A 04 0626*  	call vdu_load_img
042D5B             0627*  
042D5B 21 53 30 04 0628*  	ld hl,Frc090
042D5F 11 00 E0 B7 0629*  	ld de,filedata
042D63 01 00 00 01 0630*  	ld bc,65536
042D67 3E 01       0631*  	ld a,mos_load
042D69 5B CF       0632*  	RST.LIL 08h
042D6B 21 5A 00 00 0633*  	ld hl,BUF_0090
042D6F 01 07 00 00 0634*  	ld bc,7
042D73 11 0E 00 00 0635*  	ld de,14
042D77 DD 21 62 00 0636*  	ld ix,98
       00          
042D7C CD A3 0A 04 0637*  	call vdu_load_img
042D80             0638*  ; Missing character 91
042D80             0639*  ; Missing character 92
042D80             0640*  ; Missing character 93
042D80             0641*  ; Missing character 94
042D80             0642*  ; Missing character 95
042D80             0643*  ; Missing character 96
042D80             0644*  ; Missing character 97
042D80             0645*  ; Missing character 98
042D80             0646*  ; Missing character 99
042D80             0647*  ; Missing character 100
042D80             0648*  ; Missing character 101
042D80             0649*  ; Missing character 102
042D80             0650*  ; Missing character 103
042D80             0651*  ; Missing character 104
042D80             0652*  ; Missing character 105
042D80             0653*  ; Missing character 106
042D80             0654*  ; Missing character 107
042D80             0655*  ; Missing character 108
042D80             0656*  ; Missing character 109
042D80             0657*  ; Missing character 110
042D80             0658*  ; Missing character 111
042D80             0659*  ; Missing character 112
042D80             0660*  ; Missing character 113
042D80             0661*  ; Missing character 114
042D80             0662*  ; Missing character 115
042D80             0663*  ; Missing character 116
042D80             0664*  ; Missing character 117
042D80             0665*  ; Missing character 118
042D80             0666*  ; Missing character 119
042D80             0667*  ; Missing character 120
042D80             0668*  ; Missing character 121
042D80             0669*  ; Missing character 122
042D80             0670*  
042D80 C9          0671*  	ret
042D81             0672*  
042D81 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
042D94 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
042DA7 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
042DBA 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
042DCD 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
042DE0 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
042DF3 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
042E06 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
042E19 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
042E2C 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
042E3F 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
042E52 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
042E65 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
042E78 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
042E8B 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
042E9E 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
042EB1 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
042EC4 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
042ED7 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
042EEA 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
042EFD 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
042F10 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
042F23 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
042F36 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
042F49 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
042F5C 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
042F6F 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
042F82 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
042F95 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
042FA8 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
042FBB 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
042FCE 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
042FE1 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
042FF4 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
043007 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
04301A 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
04302D 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
043040 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
043053 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
043066             0050       ; include "images.inc"
043066             0051       ; include "images_sprites.inc"
043066             0052   	include "images2.asm" ; DEBUG
043066             0001*  ; Bitmap indices:
043066             0002*  BUF_0TILE_EMPTY: equ $0100
043066             0003*  BUF_1TILE_CROSS: equ $0101
043066             0004*  BUF_2TILE_HORIZ: equ $0102
043066             0005*  BUF_3TILE_VERT: equ $0103
043066             0006*  BUF_4TILE_SQUARE: equ $0104
043066             0007*  BUF_5TILE_CIRCLE: equ $0105
043066             0008*  BUF_6TILE_PAD: equ $0106
043066             0009*  BUF_7TILE_TURRET: equ $0107
043066             0010*  BUF_CIRCLE: equ $0108
043066             0011*  BUF_CRATER: equ $0109
043066             0012*  BUF_EXPLOSION_A: equ $010A
043066             0013*  BUF_EXPLOSION_B: equ $010B
043066             0014*  BUF_EXPLOSION_C: equ $010C
043066             0015*  BUF_EXPLOSION_D: equ $010D
043066             0016*  BUF_EXPLOSION_E: equ $010E
043066             0017*  BUF_FIREBALL_A: equ $010F
043066             0018*  BUF_FIREBALL_B: equ $0110
043066             0019*  BUF_LASER_A: equ $0111
043066             0020*  BUF_LASER_B: equ $0112
043066             0021*  BUF_PAD: equ $0113
043066             0022*  BUF_SEEKER_000: equ $0114
043066             0023*  BUF_SEEKER_008: equ $0115
043066             0024*  BUF_SEEKER_016: equ $0116
043066             0025*  BUF_SEEKER_024: equ $0117
043066             0026*  BUF_SEEKER_032: equ $0118
043066             0027*  BUF_SEEKER_040: equ $0119
043066             0028*  BUF_SEEKER_048: equ $011A
043066             0029*  BUF_SEEKER_056: equ $011B
043066             0030*  BUF_SEEKER_064: equ $011C
043066             0031*  BUF_SEEKER_072: equ $011D
043066             0032*  BUF_SEEKER_080: equ $011E
043066             0033*  BUF_SEEKER_088: equ $011F
043066             0034*  BUF_SEEKER_096: equ $0120
043066             0035*  BUF_SEEKER_104: equ $0121
043066             0036*  BUF_SEEKER_112: equ $0122
043066             0037*  BUF_SEEKER_120: equ $0123
043066             0038*  BUF_SEEKER_128: equ $0124
043066             0039*  BUF_SEEKER_136: equ $0125
043066             0040*  BUF_SEEKER_144: equ $0126
043066             0041*  BUF_SEEKER_152: equ $0127
043066             0042*  BUF_SEEKER_160: equ $0128
043066             0043*  BUF_SEEKER_168: equ $0129
043066             0044*  BUF_SEEKER_176: equ $012A
043066             0045*  BUF_SEEKER_184: equ $012B
043066             0046*  BUF_SEEKER_192: equ $012C
043066             0047*  BUF_SEEKER_200: equ $012D
043066             0048*  BUF_SEEKER_208: equ $012E
043066             0049*  BUF_SEEKER_216: equ $012F
043066             0050*  BUF_SEEKER_224: equ $0130
043066             0051*  BUF_SEEKER_232: equ $0131
043066             0052*  BUF_SEEKER_240: equ $0132
043066             0053*  BUF_SEEKER_248: equ $0133
043066             0054*  BUF_SHIP_0L: equ $0134
043066             0055*  BUF_SHIP_1C: equ $0135
043066             0056*  BUF_SHIP_2R: equ $0136
043066             0057*  BUF_SHIP_SMALL: equ $0137
043066             0058*  BUF_STAR: equ $0138
043066             0059*  BUF_TURRET: equ $0139
043066             0060*  BUF_TURRET_ROT: equ $013A
043066             0061*  
043066             0062*  ; import .rgba bitmap files and load them into VDP buffers
043066             0063*  bmp2_init:
043066 21 71 30 04 0064*  	ld hl, @cmd
04306A 01 40 3A 00 0065*  	ld bc, @end-@cmd
04306E 5B DF       0066*  	rst.lil $18
043070 C9          0067*  	ret
043071             0068*  @cmd:
043071             0069*  	LOADBMPBUFFER2 BUF_0TILE_EMPTY,16,16,"../../tgt/sprites/0tile_empty.rgba2"
043071             0001*M 
043071             0002*M     ; Clear buffer
043071 17 00 A0    0003*M     db 23,0,0xA0
043074 00 01       0004*M     dw bufferId
043076 02          0005*M     db 2
043077             0006*M 
043077 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04307A 00 01       0008*M     dw bufferId
04307C             0009*M 
04307C             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04307C 17 00 A0    0011*M     db 23,0,0xA0
04307F 00 01       0012*M     dw bufferId
043081 00          0013*M     db 0
043082 00 01       0014*M 	dw width * height ; length of data in bytes
043084 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043184             0016*M 
043184             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043184 17 1B 21    0018*M     db 23,27,0x21
043187 10 00       0019*M     dw width ; in pixels
043189 10 00       0020*M     dw height ; in pixels
04318B 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04318C             0070*  	LOADBMPBUFFER2 BUF_1TILE_CROSS,16,16,"../../tgt/sprites/1tile_cross.rgba2"
04318C             0001*M 
04318C             0002*M     ; Clear buffer
04318C 17 00 A0    0003*M     db 23,0,0xA0
04318F 01 01       0004*M     dw bufferId
043191 02          0005*M     db 2
043192             0006*M 
043192 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043195 01 01       0008*M     dw bufferId
043197             0009*M 
043197             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043197 17 00 A0    0011*M     db 23,0,0xA0
04319A 01 01       0012*M     dw bufferId
04319C 00          0013*M     db 0
04319D 00 01       0014*M 	dw width * height ; length of data in bytes
04319F 00 00 D0 F5 0015*M     incbin file ; bitmap data
       FA FF FF FF 
       FF FF FF EA 
       F5 D0 00 00 
       00 00 D0 F5 
       FA EA FF FF 
       FF FF EA EA 
       F5 D0 00 00 
       D0 D0 D0 F5 
       FA FF FF FF 
       FF FF EA EA 
       F5 D0 D0 D0 
       F5 F5 F5 F5 
       FB FA EA EA 
       EA EA EA E5 
       F5 F5 F5 F5 
       D1 E5 E5 D0 
       FA FB E5 FA 
       FA FA FA FA 
       C0 D0 D0 D0 
       E1 E1 D0 D0 
       FA D1 D0 D1 
       D0 D0 D0 EA 
       D1 D1 D1 D1 
       FA FF E5 E5 
       E5 D0 F8 FD 
       FE F8 D0 E5 
       D1 E5 E5 E5 
       FA FF FA E5 
       E5 D0 F8 FD 
       FE F8 D0 FA 
       E5 E5 E5 E5 
       E5 FB FA E5 
       E5 D0 F8 FD 
       FE F8 E1 FA 
       E5 E5 E5 E5 
       FA FA FA E5 
       E5 D0 F8 FD 
       FD F8 D0 FA 
       E5 E5 E5 E5 
       E5 E5 E5 E5 
       E5 D0 F8 F8 
       F8 F8 D0 FA 
       D1 D1 D1 D1 
       E1 E1 E1 E1 
       D1 D0 D0 D0 
       D0 D0 D0 E5 
       D0 D1 D0 D0 
       F5 F5 F5 F5 
       E5 D1 E1 E5 
       E5 E5 E5 E5 
       F5 F5 F5 F5 
       D0 D0 D0 F5 
       E5 E5 E5 E5 
       E6 E5 E5 E5 
       F5 D0 D0 D0 
       00 00 D0 F5 
       E5 E6 D6 E6 
       D7 E6 E6 E5 
       F5 D0 00 00 
       00 00 D0 F5 
       E5 E6 E6 D6 
       D6 D6 E6 E5 
       F5 D0 00 00 
04329F             0016*M 
04329F             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04329F 17 1B 21    0018*M     db 23,27,0x21
0432A2 10 00       0019*M     dw width ; in pixels
0432A4 10 00       0020*M     dw height ; in pixels
0432A6 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0432A7             0071*  	LOADBMPBUFFER2 BUF_2TILE_HORIZ,16,16,"../../tgt/sprites/2tile_horiz.rgba2"
0432A7             0001*M 
0432A7             0002*M     ; Clear buffer
0432A7 17 00 A0    0003*M     db 23,0,0xA0
0432AA 02 01       0004*M     dw bufferId
0432AC 02          0005*M     db 2
0432AD             0006*M 
0432AD 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0432B0 02 01       0008*M     dw bufferId
0432B2             0009*M 
0432B2             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0432B2 17 00 A0    0011*M     db 23,0,0xA0
0432B5 02 01       0012*M     dw bufferId
0432B7 00          0013*M     db 0
0432B8 00 01       0014*M 	dw width * height ; length of data in bytes
0432BA 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       EA EA EA EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA FF F8 
       F8 F8 F8 EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA FF FF 
       EA EA FA FA 
       F8 F8 EA EA 
       EA EA EA EA 
       EA EA EA EA 
       EA EA FA E5 
       F8 F8 EA EA 
       D0 E6 E6 D1 
       D1 D1 D1 EA 
       EA F8 F5 F5 
       EA F8 EA D0 
       C0 D1 D1 D1 
       D1 D2 D1 D0 
       D0 EA F5 E5 
       EA EA F8 E5 
       E5 E6 E6 E6 
       E6 E6 D1 F8 
       E5 EA E5 E5 
       EA E5 D1 D1 
       D1 D1 D1 D1 
       D1 D1 C0 D1 
       EA D1 EA D0 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0433BA             0016*M 
0433BA             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0433BA 17 1B 21    0018*M     db 23,27,0x21
0433BD 10 00       0019*M     dw width ; in pixels
0433BF 10 00       0020*M     dw height ; in pixels
0433C1 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0433C2             0072*  	LOADBMPBUFFER2 BUF_3TILE_VERT,16,16,"../../tgt/sprites/3tile_vert.rgba2"
0433C2             0001*M 
0433C2             0002*M     ; Clear buffer
0433C2 17 00 A0    0003*M     db 23,0,0xA0
0433C5 03 01       0004*M     dw bufferId
0433C7 02          0005*M     db 2
0433C8             0006*M 
0433C8 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0433CB 03 01       0008*M     dw bufferId
0433CD             0009*M 
0433CD             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0433CD 17 00 A0    0011*M     db 23,0,0xA0
0433D0 03 01       0012*M     dw bufferId
0433D2 00          0013*M     db 0
0433D3 00 01       0014*M 	dw width * height ; length of data in bytes
0433D5 00 00 D0 F5 0015*M     incbin file ; bitmap data
       D0 D0 D0 D0 
       E5 E5 EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 E5 E5 
       E5 F8 EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 D0 E5 E5 
       FA F8 FD F8 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 D0 E1 E5 
       E5 E5 FA F8 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 D0 D0 D1 
       E6 E6 FA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       C0 D1 D1 D1 
       FB EA FB D1 
       F5 D0 00 00 
       00 00 D0 F5 
       C0 D0 EA C0 
       EA EA EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 EA EA 
       EA FF EA FF 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E1 EA EA 
       EA FF EA FF 
       F5 D0 00 00 
       00 00 D0 F5 
       C0 D0 C0 EA 
       EA EA EA FF 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 EA EA 
       EA EA EA FF 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 EA EA 
       EA EA EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 EA EA 
       EA EA EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       D0 E5 F8 F8 
       FA EA EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       EA EA F8 F8 
       EA EA EA EA 
       F5 D0 00 00 
       00 00 D0 F5 
       C0 E5 F8 F8 
       EA EA EA EA 
       F5 D0 00 00 
0434D5             0016*M 
0434D5             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0434D5 17 1B 21    0018*M     db 23,27,0x21
0434D8 10 00       0019*M     dw width ; in pixels
0434DA 10 00       0020*M     dw height ; in pixels
0434DC 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0434DD             0073*  	LOADBMPBUFFER2 BUF_4TILE_SQUARE,16,16,"../../tgt/sprites/4tile_square.rgba2"
0434DD             0001*M 
0434DD             0002*M     ; Clear buffer
0434DD 17 00 A0    0003*M     db 23,0,0xA0
0434E0 04 01       0004*M     dw bufferId
0434E2 02          0005*M     db 2
0434E3             0006*M 
0434E3 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0434E6 04 01       0008*M     dw bufferId
0434E8             0009*M 
0434E8             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0434E8 17 00 A0    0011*M     db 23,0,0xA0
0434EB 04 01       0012*M     dw bufferId
0434ED 00          0013*M     db 0
0434EE 00 01       0014*M 	dw width * height ; length of data in bytes
0434F0 D0 D1 E5 D1 0015*M     incbin file ; bitmap data
       E5 E5 D0 D5 
       D0 D0 D0 D0 
       D0 D5 D0 D1 
       D5 EA EA EA 
       EA E5 E5 E5 
       E5 E5 E5 D5 
       D1 FF E9 D5 
       D0 EA EA D5 
       D5 D5 D1 D5 
       D4 D4 FE FE 
       D1 EA E5 D5 
       D0 C0 D1 D1 
       D2 D2 E6 E9 
       FE FE FE FE 
       C0 C0 C0 D1 
       D0 D1 D1 D2 
       D2 D2 E6 D4 
       E9 E9 FE FE 
       D1 D0 D0 D0 
       D0 D1 D2 D2 
       D2 D2 D5 C0 
       D1 D1 D4 E9 
       D1 C0 E5 D0 
       D0 D1 C0 D5 
       D5 D5 E6 E6 
       E6 E6 D1 E5 
       E5 C0 E5 E5 
       D0 D1 D1 E9 
       FE D5 D1 D2 
       D2 D1 D1 E9 
       E9 C0 D1 D0 
       E5 D1 C0 D0 
       E5 D0 D1 D2 
       D2 D1 D1 E5 
       E5 C0 EA D0 
       E5 E5 C0 C0 
       D5 C1 D5 D1 
       D1 C1 D1 D0 
       D4 D5 EA D0 
       E5 E5 D5 D2 
       D2 D2 D0 D0 
       D5 D5 D5 E9 
       E9 C0 EA E5 
       E5 E5 D5 D2 
       D2 D2 EA E9 
       FA FA D4 E6 
       E5 D5 E5 D1 
       D0 EA D5 D2 
       D1 C1 D5 E5 
       E9 E9 D0 E5 
       D0 E5 E5 E5 
       D0 D4 E9 D4 
       C0 C0 D5 C0 
       D0 D0 C0 D0 
       D0 EA EA D0 
       D0 D4 D4 D5 
       C0 D0 D5 C0 
       C0 C0 D0 C0 
       D0 D0 D0 D0 
       D0 D0 D0 C0 
       C0 D0 D0 D0 
       D5 D0 D0 C0 
       D0 D5 D0 D0 
0435F0             0016*M 
0435F0             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0435F0 17 1B 21    0018*M     db 23,27,0x21
0435F3 10 00       0019*M     dw width ; in pixels
0435F5 10 00       0020*M     dw height ; in pixels
0435F7 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0435F8             0074*  	LOADBMPBUFFER2 BUF_5TILE_CIRCLE,16,16,"../../tgt/sprites/5tile_circle.rgba2"
0435F8             0001*M 
0435F8             0002*M     ; Clear buffer
0435F8 17 00 A0    0003*M     db 23,0,0xA0
0435FB 05 01       0004*M     dw bufferId
0435FD 02          0005*M     db 2
0435FE             0006*M 
0435FE 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043601 05 01       0008*M     dw bufferId
043603             0009*M 
043603             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043603 17 00 A0    0011*M     db 23,0,0xA0
043606 05 01       0012*M     dw bufferId
043608 00          0013*M     db 0
043609 00 01       0014*M 	dw width * height ; length of data in bytes
04360B 00 00 00 00 0015*M     incbin file ; bitmap data
       00 D0 D0 D0 
       D0 D0 D0 00 
       00 00 00 00 
       00 00 00 D0 
       D0 D0 D0 D1 
       EA D1 D1 D0 
       D0 00 00 00 
       00 00 D0 D0 
       D0 D1 D1 EA 
       FB EA D1 D1 
       D0 D0 00 00 
       00 D0 D0 D1 
       D1 D0 D0 D1 
       D1 EA D1 E5 
       EA D0 D0 00 
       00 D0 E1 D1 
       D0 D0 CA EA 
       EA D7 EA E6 
       D1 D1 D0 00 
       D0 D1 E1 FA 
       D1 CA EF FF 
       FF EF D7 D0 
       D1 D1 D1 D0 
       D0 D0 D0 E5 
       FB EA EF FF 
       FF EF EA D0 
       E5 D0 D0 D0 
       D0 E1 D0 EA 
       EA EF EF EF 
       EF EF EA E5 
       EA D0 D0 D0 
       D0 D0 D0 D1 
       EA F8 EA EA 
       EA EA F8 D0 
       EA D0 D1 D0 
       D0 D0 D1 D1 
       E5 EA F8 F8 
       F8 F8 E5 E1 
       D0 D0 D0 D0 
       D0 D0 D0 D0 
       D1 E5 E5 E1 
       E1 E1 E1 D0 
       D0 D1 D0 D0 
       00 D0 D0 D0 
       D0 D0 C0 D0 
       D0 C0 D0 D0 
       D0 C0 D0 00 
       00 D0 D0 D0 
       C0 C0 EA E6 
       E6 D1 C0 C0 
       D0 D0 D0 00 
       00 00 D0 D0 
       C0 D1 D1 D1 
       D1 D1 D1 D0 
       D0 D0 00 00 
       00 00 00 D0 
       D0 D1 D1 D1 
       D1 D1 D1 D0 
       D0 00 00 00 
       00 00 00 00 
       00 D0 D0 D0 
       D0 D0 D0 00 
       00 00 00 00 
04370B             0016*M 
04370B             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04370B 17 1B 21    0018*M     db 23,27,0x21
04370E 10 00       0019*M     dw width ; in pixels
043710 10 00       0020*M     dw height ; in pixels
043712 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043713             0075*  	LOADBMPBUFFER2 BUF_6TILE_PAD,16,16,"../../tgt/sprites/6tile_pad.rgba2"
043713             0001*M 
043713             0002*M     ; Clear buffer
043713 17 00 A0    0003*M     db 23,0,0xA0
043716 06 01       0004*M     dw bufferId
043718 02          0005*M     db 2
043719             0006*M 
043719 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04371C 06 01       0008*M     dw bufferId
04371E             0009*M 
04371E             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04371E 17 00 A0    0011*M     db 23,0,0xA0
043721 06 01       0012*M     dw bufferId
043723 00          0013*M     db 0
043724 00 01       0014*M 	dw width * height ; length of data in bytes
043726 00 00 00 00 0015*M     incbin file ; bitmap data
       00 D0 D0 DF 
       DF D0 D0 00 
       00 00 00 00 
       00 C3 C3 D0 
       D0 F5 F5 DF 
       DF F5 F5 D0 
       D0 C3 C3 00 
       00 C3 C3 D0 
       F5 F5 D0 D0 
       D0 D0 F5 F5 
       D0 C3 C3 00 
       00 D0 D0 F5 
       FA FA D0 DF 
       DF D0 FA FA 
       F5 D0 D0 00 
       00 D0 F5 FA 
       D9 D9 D0 D0 
       D0 D0 D9 D9 
       FA F5 D0 00 
       D0 F5 F5 FA 
       D9 D9 D0 DF 
       DF D0 D9 D9 
       FA F5 F5 D0 
       D0 F5 D0 D0 
       D0 D0 D0 DF 
       DF D0 D0 D0 
       D0 D0 F5 D0 
       DF DF D0 DF 
       D0 DF DF D0 
       D0 DF DF D0 
       DF D0 DF DF 
       DF DF D0 DF 
       D0 DF DF D0 
       D0 DF DF D0 
       DF D0 DF DF 
       D0 F5 D0 D0 
       D0 D0 D0 DF 
       DF D0 D0 D0 
       D0 D0 F5 D0 
       D0 F5 F5 FA 
       D9 D9 D0 DF 
       DF D0 D9 D9 
       FA F5 F5 D0 
       00 D0 F5 FA 
       D9 D9 D0 D0 
       D0 D0 D9 D9 
       FA F5 D0 00 
       00 D0 D0 F5 
       FA FA D0 DF 
       DF D0 FA FA 
       F5 D0 D0 00 
       00 C3 C3 D0 
       F5 F5 D0 D0 
       D0 D0 F5 F5 
       D0 C3 C3 00 
       00 C3 C3 D0 
       D0 F5 F5 DF 
       DF F5 F5 D0 
       D0 C3 C3 00 
       00 00 00 00 
       00 D0 D0 DF 
       DF D0 D0 00 
       00 00 00 00 
043826             0016*M 
043826             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043826 17 1B 21    0018*M     db 23,27,0x21
043829 10 00       0019*M     dw width ; in pixels
04382B 10 00       0020*M     dw height ; in pixels
04382D 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04382E             0076*  	LOADBMPBUFFER2 BUF_7TILE_TURRET,16,16,"../../tgt/sprites/7tile_turret.rgba2"
04382E             0001*M 
04382E             0002*M     ; Clear buffer
04382E 17 00 A0    0003*M     db 23,0,0xA0
043831 07 01       0004*M     dw bufferId
043833 02          0005*M     db 2
043834             0006*M 
043834 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043837 07 01       0008*M     dw bufferId
043839             0009*M 
043839             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043839 17 00 A0    0011*M     db 23,0,0xA0
04383C 07 01       0012*M     dw bufferId
04383E 00          0013*M     db 0
04383F 00 01       0014*M 	dw width * height ; length of data in bytes
043841 00 00 00 00 0015*M     incbin file ; bitmap data
       00 D0 D0 DF 
       DF D0 D0 00 
       00 00 00 00 
       00 00 00 D0 
       D0 F5 F5 DF 
       DF F5 F5 D0 
       D0 00 00 00 
       00 00 D0 F5 
       F5 F5 C3 C3 
       C3 C3 F5 F5 
       F5 D0 00 00 
       00 D0 F5 F5 
       F5 F5 D0 DF 
       DF D0 F5 F5 
       F5 F5 D0 00 
       00 D0 F5 F5 
       F5 C3 C3 C3 
       C3 C3 C3 F5 
       F5 F5 D0 00 
       D0 F5 F5 F5 
       F5 F5 D0 DF 
       DF D0 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 D0 DF 
       DF D0 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       C3 C3 C3 C3 
       C3 C3 C3 C3 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 D0 D0 DF 
       DF D0 D0 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 D0 C3 DF 
       DF C3 D0 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 D0 C3 DF 
       DF C3 D0 F5 
       F5 F5 F5 D0 
       00 D0 F5 F5 
       F5 D0 D0 E5 
       E5 D0 D0 F5 
       F5 F5 D0 00 
       00 D0 F5 F5 
       D0 D0 E5 FA 
       FA E5 D0 D0 
       F5 F5 D0 00 
       00 00 D0 F5 
       D0 E5 FA FA 
       FA FA E5 D0 
       F5 D0 00 00 
       00 00 00 D0 
       D0 D0 E5 FA 
       FA E5 D0 D0 
       D0 00 00 00 
       00 00 00 00 
       00 D0 D0 D0 
       D0 D0 D0 00 
       00 00 00 00 
043941             0016*M 
043941             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043941 17 1B 21    0018*M     db 23,27,0x21
043944 10 00       0019*M     dw width ; in pixels
043946 10 00       0020*M     dw height ; in pixels
043948 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043949             0077*  	LOADBMPBUFFER2 BUF_CIRCLE,16,16,"../../tgt/sprites/circle.rgba2"
043949             0001*M 
043949             0002*M     ; Clear buffer
043949 17 00 A0    0003*M     db 23,0,0xA0
04394C 08 01       0004*M     dw bufferId
04394E 02          0005*M     db 2
04394F             0006*M 
04394F 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043952 08 01       0008*M     dw bufferId
043954             0009*M 
043954             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043954 17 00 A0    0011*M     db 23,0,0xA0
043957 08 01       0012*M     dw bufferId
043959 00          0013*M     db 0
04395A 00 01       0014*M 	dw width * height ; length of data in bytes
04395C 00 00 00 00 0015*M     incbin file ; bitmap data
       00 D0 D0 D0 
       D0 D0 D0 00 
       00 00 00 00 
       00 00 00 D0 
       D0 F5 F5 F5 
       F5 F5 F5 D0 
       D0 00 00 00 
       00 00 D0 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 D0 00 00 
       00 D0 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 D0 00 
       00 D0 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 D0 00 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       D0 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 D0 
       00 D0 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 D0 00 
       00 D0 F5 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 F5 D0 00 
       00 00 D0 F5 
       F5 F5 F5 F5 
       F5 F5 F5 F5 
       F5 D0 00 00 
       00 00 00 D0 
       D0 F5 F5 F5 
       F5 F5 F5 D0 
       D0 00 00 00 
       00 00 00 00 
       00 D0 D0 D0 
       D0 D0 D0 00 
       00 00 00 00 
043A5C             0016*M 
043A5C             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043A5C 17 1B 21    0018*M     db 23,27,0x21
043A5F 10 00       0019*M     dw width ; in pixels
043A61 10 00       0020*M     dw height ; in pixels
043A63 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043A64             0078*  	LOADBMPBUFFER2 BUF_CRATER,16,16,"../../tgt/sprites/crater.rgba2"
043A64             0001*M 
043A64             0002*M     ; Clear buffer
043A64 17 00 A0    0003*M     db 23,0,0xA0
043A67 09 01       0004*M     dw bufferId
043A69 02          0005*M     db 2
043A6A             0006*M 
043A6A 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043A6D 09 01       0008*M     dw bufferId
043A6F             0009*M 
043A6F             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043A6F 17 00 A0    0011*M     db 23,0,0xA0
043A72 09 01       0012*M     dw bufferId
043A74 00          0013*M     db 0
043A75 00 01       0014*M 	dw width * height ; length of data in bytes
043A77 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E2 C0 F2 
       C0 D1 E2 00 
       00 00 00 00 
       00 00 D2 D5 
       C0 D2 C0 C6 
       D1 C6 D1 C1 
       C0 E2 00 00 
       00 F2 EA D5 
       DF C0 D1 D2 
       DF D2 D1 C1 
       C0 EA C0 00 
       00 F2 D5 C0 
       C0 C0 CB D1 
       D6 DF D5 C0 
       C0 C0 D5 00 
       F2 D5 C0 C6 
       C0 CB D1 D6 
       D6 D7 D6 C0 
       D5 C1 C0 C0 
       D5 C0 C0 D5 
       C1 D1 C1 D6 
       C2 D7 C2 C1 
       C0 CB C1 C1 
       C1 C6 C0 C1 
       DF C2 D6 D7 
       D7 DB D6 CB 
       C1 D6 D6 D5 
       C0 C0 C0 D5 
       F7 D6 D7 DB 
       EB EF D7 D6 
       D6 CB C1 C1 
       C1 D6 C0 C1 
       D6 EB EB FF 
       CB FF FF EB 
       D6 C1 C1 D5 
       EA D5 C0 DF 
       C2 EA EA FF 
       FF FF EA C0 
       D6 D2 D5 C0 
       00 FA C2 D5 
       D5 C1 C0 CB 
       EA C0 D6 C1 
       C1 D5 E2 00 
       00 F2 FA C1 
       D5 D6 D5 C2 
       C0 D2 D2 D5 
       D6 C1 D5 00 
       00 00 FA F2 
       EB D6 C0 C0 
       C1 D5 D6 D6 
       EA D5 00 00 
       00 00 00 00 
       00 FA F6 F2 
       FA F6 F6 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043B77             0016*M 
043B77             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043B77 17 1B 21    0018*M     db 23,27,0x21
043B7A 10 00       0019*M     dw width ; in pixels
043B7C 10 00       0020*M     dw height ; in pixels
043B7E 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043B7F             0079*  	LOADBMPBUFFER2 BUF_EXPLOSION_A,16,16,"../../tgt/sprites/explosion_a.rgba2"
043B7F             0001*M 
043B7F             0002*M     ; Clear buffer
043B7F 17 00 A0    0003*M     db 23,0,0xA0
043B82 0A 01       0004*M     dw bufferId
043B84 02          0005*M     db 2
043B85             0006*M 
043B85 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043B88 0A 01       0008*M     dw bufferId
043B8A             0009*M 
043B8A             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043B8A 17 00 A0    0011*M     db 23,0,0xA0
043B8D 0A 01       0012*M     dw bufferId
043B8F 00          0013*M     db 0
043B90 00 01       0014*M 	dw width * height ; length of data in bytes
043B92 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 3F 
       3F 3F 2F C7 
       C7 C7 07 00 
       00 00 00 00 
       00 00 00 3F 
       3F 3F C7 C7 
       EF C7 C7 00 
       00 00 00 00 
       00 00 00 3F 
       3F 3F C7 EF 
       EF EF C7 00 
       00 00 00 00 
       00 00 00 C7 
       C7 3F C7 C7 
       EF C7 C7 00 
       00 00 00 00 
       00 00 00 C7 
       C7 3F 07 C7 
       C7 C7 07 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043C92             0016*M 
043C92             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043C92 17 1B 21    0018*M     db 23,27,0x21
043C95 10 00       0019*M     dw width ; in pixels
043C97 10 00       0020*M     dw height ; in pixels
043C99 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043C9A             0080*  	LOADBMPBUFFER2 BUF_EXPLOSION_B,16,16,"../../tgt/sprites/explosion_b.rgba2"
043C9A             0001*M 
043C9A             0002*M     ; Clear buffer
043C9A 17 00 A0    0003*M     db 23,0,0xA0
043C9D 0B 01       0004*M     dw bufferId
043C9F 02          0005*M     db 2
043CA0             0006*M 
043CA0 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043CA3 0B 01       0008*M     dw bufferId
043CA5             0009*M 
043CA5             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043CA5 17 00 A0    0011*M     db 23,0,0xA0
043CA8 0B 01       0012*M     dw bufferId
043CAA 00          0013*M     db 0
043CAB 00 01       0014*M 	dw width * height ; length of data in bytes
043CAD 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 3F 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F C7 C7 00 
       00 00 3F 3F 
       3F 3F 3F C7 
       C7 C7 3F 3F 
       3F C7 C7 00 
       00 00 3F 3F 
       3F C7 C7 EF 
       EF EF C7 C7 
       3F 07 07 00 
       00 00 3F 3F 
       3F C7 EF EF 
       EF EF EF C7 
       3F 07 07 00 
       00 00 3F 3F 
       C7 EF EF EF 
       EF EF EF EF 
       C7 3F 3F 00 
       00 00 3F C7 
       C7 EF EF EF 
       EF EF EF EF 
       C7 3F 3F 00 
       00 00 C7 C7 
       C7 C7 EF EF 
       EF EF EF EF 
       C7 3F 3F 00 
       00 00 C7 C7 
       C7 C7 EF EF 
       EF EF EF C7 
       3F 3F 3F 00 
       00 00 3F C7 
       C7 C7 C7 EF 
       EF EF C7 C7 
       3F 3F 3F 00 
       00 00 3F 3F 
       2F 07 07 C7 
       C7 C7 07 07 
       07 3F 3F 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043DAD             0016*M 
043DAD             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043DAD 17 1B 21    0018*M     db 23,27,0x21
043DB0 10 00       0019*M     dw width ; in pixels
043DB2 10 00       0020*M     dw height ; in pixels
043DB4 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043DB5             0081*  	LOADBMPBUFFER2 BUF_EXPLOSION_C,16,16,"../../tgt/sprites/explosion_c.rgba2"
043DB5             0001*M 
043DB5             0002*M     ; Clear buffer
043DB5 17 00 A0    0003*M     db 23,0,0xA0
043DB8 0C 01       0004*M     dw bufferId
043DBA 02          0005*M     db 2
043DBB             0006*M 
043DBB 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043DBE 0C 01       0008*M     dw bufferId
043DC0             0009*M 
043DC0             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043DC0 17 00 A0    0011*M     db 23,0,0xA0
043DC3 0C 01       0012*M     dw bufferId
043DC5 00          0013*M     db 0
043DC6 00 01       0014*M 	dw width * height ; length of data in bytes
043DC8 3F C7 07 3F 0015*M     incbin file ; bitmap data
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F 3F 00 
       3F 07 07 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       C6 C6 06 00 
       3F 07 07 3F 
       3F 3F C7 C7 
       C7 C7 3F C6 
       C7 C7 C6 00 
       3F 3F 3F 3F 
       C7 C7 EF EF 
       EF EF C7 C6 
       C7 C7 C6 00 
       3F 3F 3F C7 
       EF EF EF EF 
       EF EF EF EF 
       C6 C6 3F 00 
       3F 3F 3F C7 
       EF EF EF EF 
       EF EF EF EF 
       C7 07 07 00 
       3F 3F C7 EF 
       EF EF EF EF 
       EF EF EF EF 
       EF C7 06 00 
       07 C6 C6 C6 
       C6 EF EF EF 
       EF EF EF EF 
       EF C7 3F 00 
       C6 C6 C7 C7 
       C6 C6 EF EF 
       EF EF EF EF 
       EF C7 3F 00 
       C6 C7 C7 EF 
       C7 C6 EF EF 
       EF EF EF EF 
       EF C7 3F 00 
       C6 C7 06 C7 
       C7 C6 EF EF 
       EF EF EF EF 
       C7 3F 3F 00 
       C6 C6 C7 C7 
       C6 C6 EF EF 
       EF EF EF EF 
       C7 3F 3F 00 
       06 C6 C6 C6 
       C6 C7 EF EF 
       EF EF C7 C7 
       3F 3F 3F 00 
       3F 3F 2F 07 
       07 07 C7 C7 
       C7 C7 07 07 
       07 07 3F 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043EC8             0016*M 
043EC8             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043EC8 17 1B 21    0018*M     db 23,27,0x21
043ECB 10 00       0019*M     dw width ; in pixels
043ECD 10 00       0020*M     dw height ; in pixels
043ECF 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043ED0             0082*  	LOADBMPBUFFER2 BUF_EXPLOSION_D,16,16,"../../tgt/sprites/explosion_d.rgba2"
043ED0             0001*M 
043ED0             0002*M     ; Clear buffer
043ED0 17 00 A0    0003*M     db 23,0,0xA0
043ED3 0D 01       0004*M     dw bufferId
043ED5 02          0005*M     db 2
043ED6             0006*M 
043ED6 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043ED9 0D 01       0008*M     dw bufferId
043EDB             0009*M 
043EDB             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043EDB 17 00 A0    0011*M     db 23,0,0xA0
043EDE 0D 01       0012*M     dw bufferId
043EE0 00          0013*M     db 0
043EE1 00 01       0014*M 	dw width * height ; length of data in bytes
043EE3 3F C7 C7 07 0015*M     incbin file ; bitmap data
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F C6 06 3F 
       3F C7 C7 07 
       3F 3F C6 C6 
       C6 C6 3F C6 
       06 06 06 3F 
       3F 3F 07 07 
       C6 C6 C7 C7 
       C7 C7 C6 C6 
       C6 C6 06 3F 
       07 07 07 C6 
       C7 C7 EF EF 
       EF EF EF EF 
       C6 C6 06 C6 
       07 07 C6 C7 
       EF EF EF EF 
       EF EF EF C6 
       C7 C6 06 06 
       3F 3F C6 C7 
       EF EF EF 3F 
       3F EF EF EF 
       C7 C6 C6 06 
       3F C6 C7 EF 
       EF EF 3F 3F 
       3F 3F EF EF 
       EF C7 C6 06 
       3F C6 C7 EF 
       EF 3F 3F 3F 
       3F 3F 3F EF 
       EF C7 C6 06 
       3F C7 C7 C7 
       C7 07 3F 3F 
       3F 3F 3F EF 
       EF C7 C6 3F 
       C7 C6 C7 EF 
       EF C7 07 3F 
       3F 3F EF EF 
       EF C7 C6 3F 
       C6 06 C6 C7 
       EF C7 EF 3F 
       3F EF EF EF 
       C7 C6 3F 3F 
       C6 06 C6 C7 
       EF EF EF EF 
       EF EF EF EF 
       C7 C6 3F 3F 
       C6 06 3F C6 
       C7 C7 EF EF 
       EF EF C7 C7 
       C6 3F 3F 3F 
       06 C6 C6 C6 
       C7 C6 C7 C7 
       C7 C7 C6 C6 
       3F 3F 3F 3F 
       3F 3F 3F 06 
       07 07 C6 C6 
       C6 C6 07 07 
       07 06 3F 3F 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043FE3             0016*M 
043FE3             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
043FE3 17 1B 21    0018*M     db 23,27,0x21
043FE6 10 00       0019*M     dw width ; in pixels
043FE8 10 00       0020*M     dw height ; in pixels
043FEA 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
043FEB             0083*  	LOADBMPBUFFER2 BUF_EXPLOSION_E,16,16,"../../tgt/sprites/explosion_e.rgba2"
043FEB             0001*M 
043FEB             0002*M     ; Clear buffer
043FEB 17 00 A0    0003*M     db 23,0,0xA0
043FEE 0E 01       0004*M     dw bufferId
043FF0 02          0005*M     db 2
043FF1             0006*M 
043FF1 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
043FF4 0E 01       0008*M     dw bufferId
043FF6             0009*M 
043FF6             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043FF6 17 00 A0    0011*M     db 23,0,0xA0
043FF9 0E 01       0012*M     dw bufferId
043FFB 00          0013*M     db 0
043FFC 00 01       0014*M 	dw width * height ; length of data in bytes
043FFE 00 3F 3F C6 0015*M     incbin file ; bitmap data
       06 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F 3F 00 
       00 C6 06 3F 
       C6 3F C6 C6 
       C6 C6 06 3F 
       3F 3F 3F 00 
       00 C6 06 3F 
       C6 C6 C7 C7 
       C7 C7 C7 C6 
       06 2F 3F 00 
       00 06 C6 C6 
       C7 C7 3F 3F 
       3F 3F 07 07 
       C7 07 3F 00 
       00 2F C6 C7 
       3F 3F 3F 3F 
       3F 3F 07 07 
       07 C6 06 00 
       00 2F C6 C7 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       07 C6 06 00 
       00 C6 C7 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F C6 00 
       00 C6 C7 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F C7 00 
       00 C6 C7 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F C7 00 
       00 C6 C7 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F C7 00 
       00 06 C6 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F 07 00 
       00 06 C6 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F 07 00 
       00 2F 06 C7 
       07 3F 3F 3F 
       3F 3F 3F 3F 
       3F 06 06 00 
       00 2F 06 07 
       C6 C6 3F 3F 
       3F 3F 3F 3F 
       06 06 06 00 
       00 3F 3F 07 
       07 06 C7 C7 
       C7 C7 07 06 
       06 06 3F 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0440FE             0016*M 
0440FE             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0440FE 17 1B 21    0018*M     db 23,27,0x21
044101 10 00       0019*M     dw width ; in pixels
044103 10 00       0020*M     dw height ; in pixels
044105 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044106             0084*  	LOADBMPBUFFER2 BUF_FIREBALL_A,7,7,"../../tgt/sprites/fireball_a.rgba2"
044106             0001*M 
044106             0002*M     ; Clear buffer
044106 17 00 A0    0003*M     db 23,0,0xA0
044109 0F 01       0004*M     dw bufferId
04410B 02          0005*M     db 2
04410C             0006*M 
04410C 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04410F 0F 01       0008*M     dw bufferId
044111             0009*M 
044111             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044111 17 00 A0    0011*M     db 23,0,0xA0
044114 0F 01       0012*M     dw bufferId
044116 00          0013*M     db 0
044117 31 00       0014*M 	dw width * height ; length of data in bytes
044119 2B 2B D2 D2 0015*M     incbin file ; bitmap data
       D2 2B 2B 2B 
       D2 C3 D2 CF 
       D1 2B D2 CF 
       D6 C7 CB C7 
       D2 C3 D2 D6 
       CB D2 D2 D2 
       D2 D2 D6 D6 
       D6 C3 D1 2B 
       D1 C3 D2 CF 
       C1 2B 2B 2B 
       D1 D2 D1 2B 
       2B          
04414A             0016*M 
04414A             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04414A 17 1B 21    0018*M     db 23,27,0x21
04414D 07 00       0019*M     dw width ; in pixels
04414F 07 00       0020*M     dw height ; in pixels
044151 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044152             0085*  	LOADBMPBUFFER2 BUF_FIREBALL_B,7,7,"../../tgt/sprites/fireball_b.rgba2"
044152             0001*M 
044152             0002*M     ; Clear buffer
044152 17 00 A0    0003*M     db 23,0,0xA0
044155 10 01       0004*M     dw bufferId
044157 02          0005*M     db 2
044158             0006*M 
044158 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04415B 10 01       0008*M     dw bufferId
04415D             0009*M 
04415D             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04415D 17 00 A0    0011*M     db 23,0,0xA0
044160 10 01       0012*M     dw bufferId
044162 00          0013*M     db 0
044163 31 00       0014*M 	dw width * height ; length of data in bytes
044165 00 00 D2 D2 0015*M     incbin file ; bitmap data
       D2 00 00 00 
       D2 C3 DF CF 
       D1 00 D2 D2 
       C7 C3 C3 D2 
       D1 C3 C3 DF 
       CF CF C3 D2 
       D2 D2 C7 CF 
       C7 C3 D1 00 
       D1 C3 C3 D2 
       C1 00 00 00 
       D1 D2 D1 00 
       00          
044196             0016*M 
044196             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044196 17 1B 21    0018*M     db 23,27,0x21
044199 07 00       0019*M     dw width ; in pixels
04419B 07 00       0020*M     dw height ; in pixels
04419D 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04419E             0086*  	LOADBMPBUFFER2 BUF_LASER_A,5,13,"../../tgt/sprites/laser_a.rgba2"
04419E             0001*M 
04419E             0002*M     ; Clear buffer
04419E 17 00 A0    0003*M     db 23,0,0xA0
0441A1 11 01       0004*M     dw bufferId
0441A3 02          0005*M     db 2
0441A4             0006*M 
0441A4 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0441A7 11 01       0008*M     dw bufferId
0441A9             0009*M 
0441A9             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0441A9 17 00 A0    0011*M     db 23,0,0xA0
0441AC 11 01       0012*M     dw bufferId
0441AE 00          0013*M     db 0
0441AF 41 00       0014*M 	dw width * height ; length of data in bytes
0441B1 3F FF FF FF 0015*M     incbin file ; bitmap data
       3F FA FF FF 
       FF FA FA FF 
       FF FF FA FA 
       FF FF FF FA 
       3A FA FF FA 
       3A 3A FA FF 
       FA 3A 3F F5 
       FF F5 35 3F 
       35 FF F5 35 
       3F 35 FF F5 
       35 3F 3F FA 
       35 35 3F 3F 
       F5 35 35 3F 
       3F F5 35 3F 
       00 00 00 00 
       00          
0441F2             0016*M 
0441F2             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0441F2 17 1B 21    0018*M     db 23,27,0x21
0441F5 05 00       0019*M     dw width ; in pixels
0441F7 0D 00       0020*M     dw height ; in pixels
0441F9 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0441FA             0087*  	LOADBMPBUFFER2 BUF_LASER_B,5,13,"../../tgt/sprites/laser_b.rgba2"
0441FA             0001*M 
0441FA             0002*M     ; Clear buffer
0441FA 17 00 A0    0003*M     db 23,0,0xA0
0441FD 12 01       0004*M     dw bufferId
0441FF 02          0005*M     db 2
044200             0006*M 
044200 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044203 12 01       0008*M     dw bufferId
044205             0009*M 
044205             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044205 17 00 A0    0011*M     db 23,0,0xA0
044208 12 01       0012*M     dw bufferId
04420A 00          0013*M     db 0
04420B 41 00       0014*M 	dw width * height ; length of data in bytes
04420D 3F FF FF FF 0015*M     incbin file ; bitmap data
       3F FA FF FF 
       FF FA FA FF 
       FF FF FA FA 
       FF FF FF FA 
       3A FA FF FA 
       3A 3A FA FF 
       FA 3A 3F FA 
       FF F5 35 3F 
       F5 F5 3F 3F 
       3F 35 F5 3F 
       3F 3F 35 F5 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F 3F 3F 
       3F 3F F5 3F 
       3F          
04424E             0016*M 
04424E             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04424E 17 1B 21    0018*M     db 23,27,0x21
044251 05 00       0019*M     dw width ; in pixels
044253 0D 00       0020*M     dw height ; in pixels
044255 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044256             0088*  	LOADBMPBUFFER2 BUF_PAD,16,16,"../../tgt/sprites/pad.rgba2"
044256             0001*M 
044256             0002*M     ; Clear buffer
044256 17 00 A0    0003*M     db 23,0,0xA0
044259 13 01       0004*M     dw bufferId
04425B 02          0005*M     db 2
04425C             0006*M 
04425C 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04425F 13 01       0008*M     dw bufferId
044261             0009*M 
044261             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044261 17 00 A0    0011*M     db 23,0,0xA0
044264 13 01       0012*M     dw bufferId
044266 00          0013*M     db 0
044267 00 01       0014*M 	dw width * height ; length of data in bytes
044269 00 00 00 00 0015*M     incbin file ; bitmap data
       00 D0 D0 DF 
       DF D0 D0 00 
       00 00 00 00 
       00 C3 C3 D0 
       D0 F5 F5 DF 
       DF F5 F5 D0 
       D0 C3 C3 00 
       00 C3 C3 D0 
       F5 F5 D0 D0 
       D0 D0 F5 F5 
       D0 C3 C3 00 
       00 D0 D0 F5 
       FA FA D0 DF 
       DF D0 FA FA 
       F5 D0 D0 00 
       00 D0 F5 FA 
       D9 D9 D0 D0 
       D0 D0 D9 D9 
       FA F5 D0 00 
       D0 F5 F5 FA 
       D9 D9 D0 DF 
       DF D0 D9 D9 
       FA F5 F5 D0 
       D0 F5 D0 D0 
       D0 D0 D0 DF 
       DF D0 D0 D0 
       D0 D0 F5 D0 
       DF DF D0 DF 
       D0 DF DF D0 
       D0 DF DF D0 
       DF D0 DF DF 
       DF DF D0 DF 
       D0 DF DF D0 
       D0 DF DF D0 
       DF D0 DF DF 
       D0 F5 D0 D0 
       D0 D0 D0 DF 
       DF D0 D0 D0 
       D0 D0 F5 D0 
       D0 F5 F5 FA 
       D9 D9 D0 DF 
       DF D0 D9 D9 
       FA F5 F5 D0 
       00 D0 F5 FA 
       D9 D9 D0 D0 
       D0 D0 D9 D9 
       FA F5 D0 00 
       00 D0 D0 F5 
       FA FA D0 DF 
       DF D0 FA FA 
       F5 D0 D0 00 
       00 C3 C3 D0 
       F5 F5 D0 D0 
       D0 D0 F5 F5 
       D0 C3 C3 00 
       00 C3 C3 D0 
       D0 F5 F5 DF 
       DF F5 F5 D0 
       D0 C3 C3 00 
       00 00 00 00 
       00 D0 D0 DF 
       DF D0 D0 00 
       00 00 00 00 
044369             0016*M 
044369             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044369 17 1B 21    0018*M     db 23,27,0x21
04436C 10 00       0019*M     dw width ; in pixels
04436E 10 00       0020*M     dw height ; in pixels
044370 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044371             0089*  	LOADBMPBUFFER2 BUF_SEEKER_000,16,16,"../../tgt/sprites/seeker_000.rgba2"
044371             0001*M 
044371             0002*M     ; Clear buffer
044371 17 00 A0    0003*M     db 23,0,0xA0
044374 14 01       0004*M     dw bufferId
044376 02          0005*M     db 2
044377             0006*M 
044377 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04437A 14 01       0008*M     dw bufferId
04437C             0009*M 
04437C             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04437C 17 00 A0    0011*M     db 23,0,0xA0
04437F 14 01       0012*M     dw bufferId
044381 00          0013*M     db 0
044382 00 01       0014*M 	dw width * height ; length of data in bytes
044384 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 F1 
       E0 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 F1 
       E0 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FA F1 
       E0 E5 00 00 
       00 00 00 00 
       00 FB 00 00 
       FA 00 FF FF 
       FF EA 00 FA 
       00 00 FA 00 
       F3 E2 E5 00 
       E1 F3 FB FF 
       FF E5 E2 E1 
       00 E5 E1 E2 
       F2 E1 F2 E2 
       E1 EB FB FA 
       F6 E6 D3 E1 
       F7 F2 E1 E1 
       F1 E0 E1 00 
       F2 FB FE F5 
       F1 E5 D1 F2 
       00 E1 E0 E0 
       00 E0 E1 E2 
       E1 F6 F8 FC 
       F8 F4 E0 E1 
       E2 E0 E0 00 
       00 E0 00 00 
       E1 E1 FC FE 
       FD F8 E0 E1 
       00 00 E0 00 
       00 E0 00 00 
       E0 E0 FD FE 
       FD F8 D0 E0 
       00 00 E0 00 
       00 FB 00 00 
       E0 E0 F1 FD 
       F8 E0 D0 E0 
       00 00 FA 00 
       EF CB DB 00 
       E5 E0 E2 F5 
       F1 D1 D0 E5 
       00 DB CB DB 
       00 DF 00 00 
       00 E0 E2 F1 
       E0 D1 D0 00 
       00 00 DF 00 
       EF CB DB 00 
       00 E0 E2 00 
       00 D1 D0 00 
       00 DB CB DB 
       00 EB 00 00 
       00 E2 FB 00 
       00 E6 D1 00 
       00 00 D7 00 
       00 C3 00 00 
       00 F3 00 00 
       00 00 F3 00 
       00 00 C3 00 
044484             0016*M 
044484             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044484 17 1B 21    0018*M     db 23,27,0x21
044487 10 00       0019*M     dw width ; in pixels
044489 10 00       0020*M     dw height ; in pixels
04448B 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04448C             0090*  	LOADBMPBUFFER2 BUF_SEEKER_008,16,16,"../../tgt/sprites/seeker_008.rgba2"
04448C             0001*M 
04448C             0002*M     ; Clear buffer
04448C 17 00 A0    0003*M     db 23,0,0xA0
04448F 15 01       0004*M     dw bufferId
044491 02          0005*M     db 2
044492             0006*M 
044492 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044495 15 01       0008*M     dw bufferId
044497             0009*M 
044497             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044497 17 00 A0    0011*M     db 23,0,0xA0
04449A 15 01       0012*M     dw bufferId
04449C 00          0013*M     db 0
04449D 00 01       0014*M 	dw width * height ; length of data in bytes
04449F 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       F1 E0 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       F1 E0 00 00 
       00 00 00 00 
       00 00 FB 00 
       00 FA 00 FA 
       F1 E0 E5 00 
       00 00 00 00 
       00 F3 E2 E5 
       00 E1 00 FF 
       FF FF EA 00 
       00 00 00 00 
       00 F2 E1 F2 
       E2 E1 F3 FB 
       FF FF E5 00 
       FA 00 00 FA 
       00 E0 E1 00 
       F2 FB FB FA 
       F6 F6 E6 E2 
       E1 00 E5 E1 
       00 E0 E1 E2 
       E1 F6 FE F5 
       F1 E5 D1 E1 
       F7 F2 E1 E1 
       00 E0 00 00 
       E1 F6 F8 FC 
       F8 F4 E0 F2 
       00 E1 E0 E0 
       00 E0 00 00 
       E0 E1 FC FE 
       FD F8 E0 E1 
       E2 E0 E0 00 
       00 FB 00 00 
       E0 E0 FD FE 
       FD F8 E0 E1 
       00 00 E0 00 
       CB DB 00 E5 
       E0 F1 FD FD 
       F8 E0 D0 E0 
       00 00 E0 00 
       DF 00 00 00 
       E0 E2 F5 F1 
       D1 D0 E0 00 
       00 FA 00 00 
       CB DB 00 00 
       E0 E2 F1 E0 
       D1 D0 E5 00 
       DB CB DB 00 
       EB 00 00 00 
       E2 E2 00 00 
       D1 D0 00 00 
       00 DF 00 00 
       C3 00 00 00 
       F3 FB 00 00 
       E6 D1 00 00 
       DB CB DB 00 
       00 00 00 00 
       00 00 00 00 
       00 F3 00 00 
       00 D7 00 00 
04459F             0016*M 
04459F             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04459F 17 1B 21    0018*M     db 23,27,0x21
0445A2 10 00       0019*M     dw width ; in pixels
0445A4 10 00       0020*M     dw height ; in pixels
0445A6 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0445A7             0091*  	LOADBMPBUFFER2 BUF_SEEKER_016,16,16,"../../tgt/sprites/seeker_016.rgba2"
0445A7             0001*M 
0445A7             0002*M     ; Clear buffer
0445A7 17 00 A0    0003*M     db 23,0,0xA0
0445AA 16 01       0004*M     dw bufferId
0445AC 02          0005*M     db 2
0445AD             0006*M 
0445AD 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0445B0 16 01       0008*M     dw bufferId
0445B2             0009*M 
0445B2             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0445B2 17 00 A0    0011*M     db 23,0,0xA0
0445B5 16 01       0012*M     dw bufferId
0445B7 00          0013*M     db 0
0445B8 00 01       0014*M 	dw width * height ; length of data in bytes
0445BA 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 F1 00 
       00 00 00 00 
       00 00 F3 FB 
       00 00 00 00 
       00 00 F1 E0 
       00 00 00 00 
       00 00 F2 E2 
       E5 00 FA 00 
       FA F1 E0 00 
       00 00 00 00 
       00 F1 E1 F2 
       E2 00 E1 F3 
       FF FF E0 E5 
       00 00 00 00 
       00 00 E0 E1 
       00 E1 EB FB 
       FF FF FF EA 
       00 00 00 00 
       00 E0 E0 E1 
       E2 F2 FB FB 
       FA F6 E5 E2 
       FA 00 00 00 
       00 E0 00 00 
       E1 F6 F8 FE 
       F5 F1 E6 D3 
       E1 00 E5 FA 
       00 FB 00 00 
       E1 E1 FC FC 
       F8 E5 D1 F2 
       E1 F7 F2 E1 
       CB 00 00 E0 
       E0 E0 FD FE 
       FD F4 E0 E1 
       00 E1 E1 E1 
       DF DB 00 E5 
       E0 F1 FE FD 
       F8 F8 E0 E1 
       E2 E0 E0 E0 
       DB 00 00 00 
       E0 E2 FD F8 
       E0 D0 E0 00 
       00 E0 E0 00 
       00 00 00 E0 
       E2 F1 F5 F1 
       D1 D0 E0 00 
       00 E0 00 00 
       00 00 00 E0 
       E2 00 E0 D1 
       D0 E5 00 00 
       00 FA 00 00 
       00 00 F3 E2 
       FB 00 00 D1 
       D0 00 00 DB 
       CB 00 00 00 
       00 00 00 00 
       00 00 E6 D1 
       D0 00 00 00 
       DF DB 00 00 
       00 00 00 00 
       00 00 00 F3 
       00 00 DB CB 
       DB 00 00 00 
0446BA             0016*M 
0446BA             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0446BA 17 1B 21    0018*M     db 23,27,0x21
0446BD 10 00       0019*M     dw width ; in pixels
0446BF 10 00       0020*M     dw height ; in pixels
0446C1 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0446C2             0092*  	LOADBMPBUFFER2 BUF_SEEKER_024,16,16,"../../tgt/sprites/seeker_024.rgba2"
0446C2             0001*M 
0446C2             0002*M     ; Clear buffer
0446C2 17 00 A0    0003*M     db 23,0,0xA0
0446C5 17 01       0004*M     dw bufferId
0446C7 02          0005*M     db 2
0446C8             0006*M 
0446C8 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0446CB 17 01       0008*M     dw bufferId
0446CD             0009*M 
0446CD             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0446CD 17 00 A0    0011*M     db 23,0,0xA0
0446D0 17 01       0012*M     dw bufferId
0446D2 00          0013*M     db 0
0446D3 00 01       0014*M 	dw width * height ; length of data in bytes
0446D5 00 00 00 F3 0015*M     incbin file ; bitmap data
       00 FB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 F2 
       E2 00 00 00 
       00 00 00 F1 
       E0 00 00 00 
       00 00 F1 E1 
       F2 E5 00 FA 
       00 FA F1 F1 
       E0 00 00 00 
       00 00 00 E0 
       E1 E2 E1 F3 
       00 FF F1 E0 
       00 00 00 00 
       00 00 E0 E1 
       E2 00 E1 EB 
       FB FF FF FF 
       E5 00 00 00 
       00 E0 00 00 
       E2 E1 FB FE 
       FA FA FF EA 
       00 00 00 00 
       00 FB 00 00 
       E1 E1 F6 F8 
       F5 F6 E6 E2 
       E2 FA 00 00 
       CB DB 00 00 
       E0 E1 FC FC 
       F8 F1 E5 D3 
       E1 00 00 00 
       00 00 00 E0 
       E0 FD FE FE 
       FD F4 E0 F2 
       F7 F7 E5 E1 
       DB 00 00 E0 
       E0 F1 FD FD 
       F8 E0 E0 E1 
       00 E1 E1 E1 
       00 00 00 E0 
       E2 F5 F8 F8 
       F8 D0 E1 00 
       E0 E0 E0 E1 
       00 00 E0 E2 
       F1 F1 F1 D1 
       D0 E0 00 00 
       00 E0 00 00 
       00 F3 E2 FB 
       00 00 D1 D0 
       D0 E0 00 00 
       E0 00 00 00 
       00 00 00 00 
       00 00 D1 D0 
       00 00 DB 00 
       FA 00 00 00 
       00 00 00 00 
       00 E6 D1 00 
       00 00 00 CB 
       00 00 00 00 
       00 00 00 00 
       00 F3 F3 00 
       00 DB DF 00 
       DB 00 00 00 
0447D5             0016*M 
0447D5             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0447D5 17 1B 21    0018*M     db 23,27,0x21
0447D8 10 00       0019*M     dw width ; in pixels
0447DA 10 00       0020*M     dw height ; in pixels
0447DC 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0447DD             0093*  	LOADBMPBUFFER2 BUF_SEEKER_032,16,16,"../../tgt/sprites/seeker_032.rgba2"
0447DD             0001*M 
0447DD             0002*M     ; Clear buffer
0447DD 17 00 A0    0003*M     db 23,0,0xA0
0447E0 18 01       0004*M     dw bufferId
0447E2 02          0005*M     db 2
0447E3             0006*M 
0447E3 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0447E6 18 01       0008*M     dw bufferId
0447E8             0009*M 
0447E8             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0447E8 17 00 A0    0011*M     db 23,0,0xA0
0447EB 18 01       0012*M     dw bufferId
0447ED 00          0013*M     db 0
0447EE 00 01       0014*M 	dw width * height ; length of data in bytes
0447F0 00 00 00 00 0015*M     incbin file ; bitmap data
       F2 F3 FB 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 F1 
       F2 E1 E5 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E0 F2 E2 00 
       FA 00 00 00 
       F1 E0 00 00 
       00 00 00 E0 
       E1 00 E2 E1 
       F3 00 FF F1 
       E0 E0 00 00 
       00 00 E0 00 
       00 E2 F2 EB 
       EB FB FF FF 
       E0 00 00 00 
       EF FB 00 00 
       00 E1 F6 FB 
       FB FA FF FF 
       EA 00 00 00 
       DF DB 00 00 
       E0 E1 E1 F8 
       F5 F6 F6 E5 
       00 00 00 00 
       00 00 00 E0 
       E0 E0 FC FE 
       F8 F1 E6 D3 
       E2 FA 00 00 
       00 00 00 E0 
       E0 F1 FE FD 
       FD F4 D1 D3 
       E1 00 00 00 
       00 00 E0 E0 
       E2 FD F8 FD 
       F8 E0 E0 F2 
       F7 F7 E5 FA 
       00 E2 E0 E2 
       F1 F1 F8 E0 
       D0 E0 E1 E2 
       00 F2 E1 E2 
       F3 F3 FB 00 
       E0 E0 D1 D0 
       D0 E0 00 00 
       E0 E0 E1 E1 
       00 00 00 00 
       00 D1 D0 D0 
       E0 00 00 00 
       E0 00 E0 00 
       00 00 00 00 
       E6 D0 D0 00 
       00 00 00 E0 
       00 00 00 00 
       00 00 00 00 
       F3 D1 00 00 
       00 DB FA 00 
       00 00 00 00 
       00 00 00 00 
       F3 00 00 00 
       00 DF DB 00 
       00 00 00 00 
0448F0             0016*M 
0448F0             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0448F0 17 1B 21    0018*M     db 23,27,0x21
0448F3 10 00       0019*M     dw width ; in pixels
0448F5 10 00       0020*M     dw height ; in pixels
0448F7 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0448F8             0094*  	LOADBMPBUFFER2 BUF_SEEKER_040,16,16,"../../tgt/sprites/seeker_040.rgba2"
0448F8             0001*M 
0448F8             0002*M     ; Clear buffer
0448F8 17 00 A0    0003*M     db 23,0,0xA0
0448FB 19 01       0004*M     dw bufferId
0448FD 02          0005*M     db 2
0448FE             0006*M 
0448FE 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044901 19 01       0008*M     dw bufferId
044903             0009*M 
044903             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044903 17 00 A0    0011*M     db 23,0,0xA0
044906 19 01       0012*M     dw bufferId
044908 00          0013*M     db 0
044909 00 01       0014*M 	dw width * height ; length of data in bytes
04490B 00 00 00 00 0015*M     incbin file ; bitmap data
       00 F2 F2 E2 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E1 E5 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E0 E1 E1 E2 
       00 FA 00 00 
       00 00 00 00 
       EF 00 FB E0 
       00 E1 00 E2 
       E1 F3 00 FA 
       00 F1 F1 00 
       00 CB 00 00 
       00 00 E1 F2 
       EB F3 FF FF 
       F1 E0 E0 00 
       DF 00 DB 00 
       00 E1 F6 F6 
       FE FB FF FF 
       E0 E0 00 00 
       DB 00 00 E0 
       E0 E0 E1 F8 
       F5 FA F6 FF 
       EA E5 00 00 
       00 00 00 E0 
       E0 FD FC FE 
       FC F1 F6 E5 
       00 00 00 00 
       00 00 E0 E0 
       E2 FD FE FD 
       F8 F4 E5 D3 
       E2 FA 00 00 
       F3 E2 E2 E2 
       F5 FD F8 FD 
       F8 E0 D1 E1 
       E1 00 00 00 
       F3 FB 00 00 
       E0 F1 E0 F8 
       E0 E0 E1 00 
       F7 E5 00 FA 
       00 00 00 00 
       E0 D1 D0 D0 
       E0 E1 E2 E2 
       E1 F2 E1 00 
       00 00 00 E6 
       D1 D0 D0 E0 
       00 00 00 E0 
       E0 E1 E1 E2 
       00 00 00 D1 
       D0 00 00 00 
       00 00 00 E0 
       00 E0 00 00 
       00 00 00 F3 
       00 00 00 00 
       DB FA E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB 00 
       CB 00 00 00 
       00 00 00 00 
044A0B             0016*M 
044A0B             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044A0B 17 1B 21    0018*M     db 23,27,0x21
044A0E 10 00       0019*M     dw width ; in pixels
044A10 10 00       0020*M     dw height ; in pixels
044A12 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044A13             0095*  	LOADBMPBUFFER2 BUF_SEEKER_048,16,16,"../../tgt/sprites/seeker_048.rgba2"
044A13             0001*M 
044A13             0002*M     ; Clear buffer
044A13 17 00 A0    0003*M     db 23,0,0xA0
044A16 1A 01       0004*M     dw bufferId
044A18 02          0005*M     db 2
044A19             0006*M 
044A19 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044A1C 1A 01       0008*M     dw bufferId
044A1E             0009*M 
044A1E             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044A1E 17 00 A0    0011*M     db 23,0,0xA0
044A21 1A 01       0012*M     dw bufferId
044A23 00          0013*M     db 0
044A24 00 01       0014*M 	dw width * height ; length of data in bytes
044A26 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 F1 F2 
       E2 FB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E0 E1 
       F2 E5 00 00 
       00 00 00 00 
       00 EF 00 FB 
       E0 E0 E1 E1 
       E2 00 00 00 
       00 00 00 00 
       EF DF CB 00 
       00 00 E2 00 
       E1 E1 FA 00 
       00 00 00 00 
       CB 00 DB 00 
       00 00 E1 E1 
       F2 EB F3 FF 
       FA 00 F1 00 
       DB 00 00 00 
       E0 E0 E1 F6 
       FB FB FB FF 
       F1 F1 E0 E0 
       00 00 00 E5 
       E0 E0 FC F8 
       FE F5 FA FF 
       FF E0 00 00 
       00 E0 E0 E0 
       E2 F1 FD FE 
       FC F1 F6 FF 
       EA E5 00 00 
       F3 E2 E2 E2 
       F5 FD FE FD 
       F8 E5 E6 E5 
       E2 00 00 00 
       00 FB 00 F1 
       F1 F8 FD F8 
       F8 F4 D1 D3 
       E1 FA 00 00 
       00 00 00 00 
       E0 D1 E0 D0 
       E0 E0 F2 E1 
       00 00 00 00 
       00 00 E6 D1 
       D1 D0 D0 E0 
       E1 E1 E2 00 
       F7 E5 00 00 
       00 00 D1 D0 
       D0 00 E5 E0 
       00 00 E0 E1 
       F2 E1 FA 00 
       00 00 F3 00 
       00 00 00 00 
       00 00 E0 E0 
       E1 E1 E2 00 
       00 00 00 00 
       00 00 DB 00 
       FA E0 E0 00 
       E0 00 00 00 
       00 00 00 00 
       00 DB DF CB 
       00 00 00 00 
       00 00 00 00 
044B26             0016*M 
044B26             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044B26 17 1B 21    0018*M     db 23,27,0x21
044B29 10 00       0019*M     dw width ; in pixels
044B2B 10 00       0020*M     dw height ; in pixels
044B2D 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044B2E             0096*  	LOADBMPBUFFER2 BUF_SEEKER_056,16,16,"../../tgt/sprites/seeker_056.rgba2"
044B2E             0001*M 
044B2E             0002*M     ; Clear buffer
044B2E 17 00 A0    0003*M     db 23,0,0xA0
044B31 1B 01       0004*M     dw bufferId
044B33 02          0005*M     db 2
044B34             0006*M 
044B34 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044B37 1B 01       0008*M     dw bufferId
044B39             0009*M 
044B39             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044B39 17 00 A0    0011*M     db 23,0,0xA0
044B3C 1B 01       0012*M     dw bufferId
044B3E 00          0013*M     db 0
044B3F 00 01       0014*M 	dw width * height ; length of data in bytes
044B41 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       F1 F2 E2 FB 
       00 00 00 00 
       00 EF 00 EF 
       00 E0 E0 E0 
       E0 E1 E5 00 
       00 00 00 00 
       EB CB DF CB 
       FB 00 00 E1 
       E1 F2 00 00 
       00 00 00 00 
       00 DB 00 DB 
       00 00 00 E2 
       00 E2 E1 FA 
       00 00 00 00 
       00 00 00 00 
       00 E0 E1 E1 
       F2 E1 F3 00 
       00 00 00 00 
       00 00 00 E5 
       E0 E0 E1 E1 
       F6 FB FB FB 
       FF FA 00 F1 
       F3 E2 E0 E0 
       E0 F1 FD FC 
       F8 FE FA FF 
       FF F1 F1 F1 
       00 FB E2 E2 
       E2 FD FE FE 
       FC F5 FA FF 
       FF E0 E0 E0 
       00 00 00 F1 
       F5 F8 FD FD 
       F8 F1 F6 E5 
       EA E5 00 00 
       00 00 00 E0 
       F1 F8 F8 F8 
       F4 E5 E6 E2 
       00 00 00 00 
       00 E6 D1 D1 
       D1 E0 D0 E0 
       E0 E0 D1 E1 
       E1 FA 00 00 
       00 F3 D1 D0 
       D0 D0 E0 E0 
       E1 E1 F2 F7 
       00 00 00 00 
       00 00 00 00 
       00 E5 00 00 
       00 E2 00 F2 
       E5 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E1 E1 
       E1 FA 00 00 
       00 00 00 DB 
       00 DB FA E0 
       E0 E0 E0 E1 
       E2 00 00 00 
       00 C3 D7 CB 
       DF CB 00 00 
       00 00 00 00 
       00 00 00 00 
044C41             0016*M 
044C41             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044C41 17 1B 21    0018*M     db 23,27,0x21
044C44 10 00       0019*M     dw width ; in pixels
044C46 10 00       0020*M     dw height ; in pixels
044C48 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044C49             0097*  	LOADBMPBUFFER2 BUF_SEEKER_064,16,16,"../../tgt/sprites/seeker_064.rgba2"
044C49             0001*M 
044C49             0002*M     ; Clear buffer
044C49 17 00 A0    0003*M     db 23,0,0xA0
044C4C 1C 01       0004*M     dw bufferId
044C4E 02          0005*M     db 2
044C4F             0006*M 
044C4F 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044C52 1C 01       0008*M     dw bufferId
044C54             0009*M 
044C54             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044C54 17 00 A0    0011*M     db 23,0,0xA0
044C57 1C 01       0012*M     dw bufferId
044C59 00          0013*M     db 0
044C5A 00 01       0014*M 	dw width * height ; length of data in bytes
044C5C 00 00 EF 00 0015*M     incbin file ; bitmap data
       EF 00 00 00 
       00 F1 F2 F3 
       00 00 00 00 
       C3 EB CB DF 
       CB FB E0 E0 
       E0 E0 E1 E2 
       FB 00 00 00 
       00 00 DB 00 
       DB 00 00 00 
       E1 E1 F2 E5 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E2 00 E2 00 
       00 00 00 00 
       00 00 00 00 
       E5 E0 E0 E1 
       E1 F2 E1 E1 
       FA 00 00 00 
       F3 E2 E0 E0 
       E0 E0 E0 E1 
       F6 FB EB F3 
       00 00 00 00 
       00 FB E2 E2 
       E2 F1 FD FC 
       F8 FE FB FB 
       FF FA 00 00 
       00 00 00 F1 
       F5 FD FE FE 
       FC F5 FA FF 
       FF F1 F1 F1 
       00 00 00 E0 
       F1 F8 FD FD 
       F8 F1 F6 FF 
       FF E0 E0 E0 
       00 E6 D1 D1 
       D1 E0 F8 F8 
       F4 E5 E6 E5 
       EA E5 00 00 
       F3 D1 D0 D0 
       D0 D0 D0 E0 
       E0 D1 D3 E2 
       00 00 00 00 
       00 00 00 00 
       E5 E0 E0 E1 
       E1 F2 E1 E1 
       FA 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E2 00 F7 00 
       00 00 00 00 
       00 00 DB 00 
       DB 00 00 00 
       E0 E1 F2 E5 
       00 00 00 00 
       C3 D7 CB DF 
       CB FA E0 E0 
       E0 E0 E1 E1 
       FA 00 00 00 
       00 00 DB 00 
       DB 00 00 00 
       00 E0 E1 E2 
       00 00 00 00 
044D5C             0016*M 
044D5C             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044D5C 17 1B 21    0018*M     db 23,27,0x21
044D5F 10 00       0019*M     dw width ; in pixels
044D61 10 00       0020*M     dw height ; in pixels
044D63 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044D64             0098*  	LOADBMPBUFFER2 BUF_SEEKER_072,16,16,"../../tgt/sprites/seeker_072.rgba2"
044D64             0001*M 
044D64             0002*M     ; Clear buffer
044D64 17 00 A0    0003*M     db 23,0,0xA0
044D67 1D 01       0004*M     dw bufferId
044D69 02          0005*M     db 2
044D6A             0006*M 
044D6A 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044D6D 1D 01       0008*M     dw bufferId
044D6F             0009*M 
044D6F             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044D6F 17 00 A0    0011*M     db 23,0,0xA0
044D72 1D 01       0012*M     dw bufferId
044D74 00          0013*M     db 0
044D75 00 01       0014*M 	dw width * height ; length of data in bytes
044D77 00 C3 EB CB 0015*M     incbin file ; bitmap data
       DF CB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 DB 
       00 DB FB E0 
       E0 E0 E0 F2 
       F3 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E1 E1 E1 
       E2 FB 00 00 
       00 00 00 00 
       00 E5 00 00 
       00 E2 00 F2 
       E5 00 00 00 
       00 F3 E2 E0 
       E0 E0 E0 E0 
       E1 E1 F2 E2 
       00 00 00 00 
       00 FB E2 E2 
       E2 F1 E0 E1 
       F6 F6 FB E1 
       E1 FA 00 00 
       00 00 00 F1 
       F5 FD FD FC 
       F8 FE FB F3 
       00 00 00 00 
       00 00 00 E0 
       F1 FD FE FE 
       FC F5 FA FB 
       FF FA 00 00 
       00 E6 D1 D1 
       D1 F8 FD FD 
       F8 F1 F6 FF 
       FF F1 F1 F1 
       F3 D1 D0 D0 
       D0 E0 F8 F8 
       F4 E5 F6 FF 
       FF E0 E0 E0 
       00 00 00 E5 
       E0 D0 E0 E0 
       E0 D1 E6 E5 
       EA E5 00 E0 
       00 00 00 00 
       00 E0 E1 E1 
       F2 E1 E2 00 
       00 00 00 00 
       00 DB 00 DB 
       00 00 00 E2 
       00 F7 E1 FA 
       00 00 00 00 
       D7 CB DF CB 
       FA 00 00 E0 
       E1 F2 00 00 
       00 00 00 00 
       00 DB 00 DB 
       00 E0 E0 E0 
       E0 E1 E5 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E0 E1 E1 FA 
       00 00 00 00 
044E77             0016*M 
044E77             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044E77 17 1B 21    0018*M     db 23,27,0x21
044E7A 10 00       0019*M     dw width ; in pixels
044E7C 10 00       0020*M     dw height ; in pixels
044E7E 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044E7F             0099*  	LOADBMPBUFFER2 BUF_SEEKER_080,16,16,"../../tgt/sprites/seeker_080.rgba2"
044E7F             0001*M 
044E7F             0002*M     ; Clear buffer
044E7F 17 00 A0    0003*M     db 23,0,0xA0
044E82 1E 01       0004*M     dw bufferId
044E84 02          0005*M     db 2
044E85             0006*M 
044E85 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044E88 1E 01       0008*M     dw bufferId
044E8A             0009*M 
044E8A             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044E8A 17 00 A0    0011*M     db 23,0,0xA0
044E8D 1E 01       0012*M     dw bufferId
044E8F 00          0013*M     db 0
044E90 00 01       0014*M 	dw width * height ; length of data in bytes
044E92 00 00 00 00 0015*M     incbin file ; bitmap data
       00 DB DF CB 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB 00 
       FB E0 E0 00 
       F1 00 00 00 
       00 00 F3 00 
       00 00 00 00 
       00 00 E0 E0 
       E1 F2 F3 00 
       00 00 E2 E0 
       E0 00 E5 E0 
       00 00 E1 E1 
       F2 E2 FB 00 
       00 00 FB E2 
       E2 E0 E0 E0 
       E1 E1 E2 00 
       E2 E5 00 00 
       00 00 00 00 
       F1 E2 F1 E0 
       E1 F6 F2 E1 
       00 00 00 00 
       00 E6 00 E0 
       F5 FD FE FD 
       FC F8 FB EB 
       E1 FA 00 00 
       F3 D1 D1 D1 
       F1 F8 FD FE 
       FC FE FB FB 
       F3 00 00 00 
       00 D0 D0 D0 
       D1 E0 F8 FD 
       F8 F5 FA FF 
       FF FA 00 00 
       00 00 00 E5 
       D0 D0 F8 F4 
       E5 F1 F6 FF 
       FF F1 00 00 
       DB 00 00 00 
       E0 E0 E0 E0 
       D1 E6 E5 FF 
       E0 E0 F1 F1 
       CB 00 DB 00 
       00 00 E1 E1 
       F2 D3 E2 EA 
       E5 00 E0 00 
       DB DF CB 00 
       00 00 E2 00 
       E1 E1 FA 00 
       00 00 00 00 
       00 DB 00 FA 
       E0 E0 E0 E1 
       F7 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E0 E1 
       F2 E5 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 E0 E1 
       E1 FA 00 00 
       00 00 00 00 
044F92             0016*M 
044F92             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
044F92 17 1B 21    0018*M     db 23,27,0x21
044F95 10 00       0019*M     dw width ; in pixels
044F97 10 00       0020*M     dw height ; in pixels
044F99 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
044F9A             0100*  	LOADBMPBUFFER2 BUF_SEEKER_088,16,16,"../../tgt/sprites/seeker_088.rgba2"
044F9A             0001*M 
044F9A             0002*M     ; Clear buffer
044F9A 17 00 A0    0003*M     db 23,0,0xA0
044F9D 1F 01       0004*M     dw bufferId
044F9F 02          0005*M     db 2
044FA0             0006*M 
044FA0 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
044FA3 1F 01       0008*M     dw bufferId
044FA5             0009*M 
044FA5             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044FA5 17 00 A0    0011*M     db 23,0,0xA0
044FA8 1F 01       0012*M     dw bufferId
044FAA 00          0013*M     db 0
044FAB 00 01       0014*M 	dw width * height ; length of data in bytes
044FAD 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 DB 00 
       CB 00 00 00 
       00 00 00 00 
       00 00 00 F3 
       00 00 00 00 
       DB FB E0 00 
       00 00 00 00 
       00 00 00 E2 
       E0 00 00 00 
       00 00 00 E0 
       00 F1 00 00 
       00 00 00 FB 
       E2 E0 E0 E0 
       00 00 00 E1 
       E0 E1 F2 F3 
       00 00 00 00 
       F1 E2 E0 E0 
       E0 E1 E2 E2 
       E1 F2 E2 00 
       F3 E6 00 00 
       F1 F5 F1 FD 
       E1 E1 E1 00 
       E2 E5 00 FB 
       F3 D1 D1 D1 
       F1 F8 FD FE 
       FC F6 FB E1 
       E1 00 00 00 
       00 00 D0 D0 
       D1 F8 FD FE 
       FC F8 FE EB 
       F3 FA 00 00 
       00 00 00 D0 
       D0 F8 F8 FD 
       F8 F5 FA FB 
       00 00 00 00 
       DB 00 00 E0 
       E0 D0 E0 F4 
       F1 F6 FA FF 
       FF FA 00 00 
       DF 00 DB 00 
       00 E1 E0 E0 
       E5 E6 FF FF 
       F1 F1 00 00 
       00 CB 00 00 
       00 00 E1 F2 
       D3 E2 EA FF 
       E0 F1 F1 00 
       DB 00 FA E0 
       00 E0 00 F7 
       E1 E2 00 E5 
       00 E0 E0 00 
       00 00 00 00 
       E0 E0 E1 F7 
       00 FA 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E1 E5 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E1 E1 E1 
       00 00 00 00 
       00 00 00 00 
0450AD             0016*M 
0450AD             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0450AD 17 1B 21    0018*M     db 23,27,0x21
0450B0 10 00       0019*M     dw width ; in pixels
0450B2 10 00       0020*M     dw height ; in pixels
0450B4 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0450B5             0101*  	LOADBMPBUFFER2 BUF_SEEKER_096,16,16,"../../tgt/sprites/seeker_096.rgba2"
0450B5             0001*M 
0450B5             0002*M     ; Clear buffer
0450B5 17 00 A0    0003*M     db 23,0,0xA0
0450B8 20 01       0004*M     dw bufferId
0450BA 02          0005*M     db 2
0450BB             0006*M 
0450BB 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0450BE 20 01       0008*M     dw bufferId
0450C0             0009*M 
0450C0             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0450C0 17 00 A0    0011*M     db 23,0,0xA0
0450C3 20 01       0012*M     dw bufferId
0450C5 00          0013*M     db 0
0450C6 00 01       0014*M 	dw width * height ; length of data in bytes
0450C8 00 00 00 00 0015*M     incbin file ; bitmap data
       F3 00 00 00 
       00 DF EF 00 
       00 00 00 00 
       00 00 00 00 
       F3 E2 00 00 
       00 DB FB 00 
       00 00 00 00 
       00 00 00 00 
       FB E0 E0 00 
       00 00 00 E0 
       00 00 00 00 
       00 00 00 00 
       00 E2 E0 E0 
       E0 00 00 00 
       E0 00 F1 00 
       F3 F3 E6 00 
       E0 F1 E2 E0 
       E0 E0 00 E2 
       E1 E0 F2 F2 
       00 D1 D0 D1 
       E0 F1 FD F1 
       E0 E1 E1 E2 
       00 F2 E1 F3 
       00 00 D0 D0 
       D1 F8 F8 FE 
       FC F6 F6 F2 
       E2 E2 E5 FB 
       00 00 00 D0 
       D0 E0 FD FD 
       FC F8 FB EB 
       E1 00 00 00 
       00 00 00 E0 
       D0 D0 F8 F8 
       F8 F5 FB EB 
       F3 FA 00 00 
       DF DB 00 00 
       E0 E0 E0 F4 
       F1 F6 FA FB 
       00 00 00 00 
       DB FA 00 00 
       00 E1 E0 D1 
       E6 F6 FF FF 
       FF 00 00 00 
       00 00 E0 00 
       E2 E2 F2 D3 
       D3 E5 FF FF 
       F1 00 00 00 
       00 00 00 E0 
       E0 00 F7 E1 
       E2 00 EA E0 
       E0 F1 00 00 
       00 00 00 00 
       E0 F2 F7 00 
       FA 00 00 00 
       E0 E0 00 00 
       00 00 00 E0 
       E1 E1 E5 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E1 E2 FA 00 
       00 00 00 00 
       00 00 00 00 
0451C8             0016*M 
0451C8             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0451C8 17 1B 21    0018*M     db 23,27,0x21
0451CB 10 00       0019*M     dw width ; in pixels
0451CD 10 00       0020*M     dw height ; in pixels
0451CF 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0451D0             0102*  	LOADBMPBUFFER2 BUF_SEEKER_104,16,16,"../../tgt/sprites/seeker_104.rgba2"
0451D0             0001*M 
0451D0             0002*M     ; Clear buffer
0451D0 17 00 A0    0003*M     db 23,0,0xA0
0451D3 21 01       0004*M     dw bufferId
0451D5 02          0005*M     db 2
0451D6             0006*M 
0451D6 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0451D9 21 01       0008*M     dw bufferId
0451DB             0009*M 
0451DB             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0451DB 17 00 A0    0011*M     db 23,0,0xA0
0451DE 21 01       0012*M     dw bufferId
0451E0 00          0013*M     db 0
0451E1 00 01       0014*M 	dw width * height ; length of data in bytes
0451E3 00 00 00 00 0015*M     incbin file ; bitmap data
       00 F3 F3 00 
       00 DB DF 00 
       EF 00 00 00 
       00 00 00 00 
       00 FB E2 00 
       00 00 00 CB 
       00 00 00 00 
       00 00 00 00 
       00 00 E2 E0 
       00 00 DB 00 
       FB 00 00 00 
       00 F3 D1 E6 
       00 00 E2 E0 
       E0 E0 00 00 
       E0 00 00 00 
       00 00 D0 D1 
       E0 E0 F5 E2 
       E0 E0 00 00 
       00 E0 00 00 
       00 00 00 D0 
       D1 F1 FD FD 
       FD E0 E1 00 
       E1 E1 E0 F2 
       DB 00 00 D0 
       D0 E0 F8 FE 
       FC E1 F6 E1 
       00 E1 E1 F2 
       00 00 00 E0 
       D0 F8 FD FD 
       FE F8 F6 F2 
       E2 E2 E5 E2 
       CB DB 00 00 
       E0 E0 F8 F8 
       FC F5 FE EB 
       E1 00 00 00 
       00 FA 00 00 
       E1 E0 E0 F4 
       F1 FA FB F3 
       F3 FA 00 00 
       00 E0 00 00 
       E2 E1 D1 E5 
       F6 F6 FF FF 
       00 00 00 00 
       00 00 E0 E0 
       E2 00 E1 D3 
       E5 FF FF FF 
       FA 00 00 00 
       00 00 00 E0 
       E1 F7 E1 E2 
       00 EA E0 F1 
       00 00 00 00 
       00 00 E0 E1 
       F2 E5 00 FA 
       00 E5 E0 E0 
       F1 00 00 00 
       00 00 00 E1 
       E1 00 00 00 
       00 00 00 E0 
       F1 00 00 00 
       00 00 00 E2 
       00 FA 00 00 
       00 00 00 00 
       00 00 00 00 
0452E3             0016*M 
0452E3             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0452E3 17 1B 21    0018*M     db 23,27,0x21
0452E6 10 00       0019*M     dw width ; in pixels
0452E8 10 00       0020*M     dw height ; in pixels
0452EA 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0452EB             0103*  	LOADBMPBUFFER2 BUF_SEEKER_112,16,16,"../../tgt/sprites/seeker_112.rgba2"
0452EB             0001*M 
0452EB             0002*M     ; Clear buffer
0452EB 17 00 A0    0003*M     db 23,0,0xA0
0452EE 22 01       0004*M     dw bufferId
0452F0 02          0005*M     db 2
0452F1             0006*M 
0452F1 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0452F4 22 01       0008*M     dw bufferId
0452F6             0009*M 
0452F6             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0452F6 17 00 A0    0011*M     db 23,0,0xA0
0452F9 22 01       0012*M     dw bufferId
0452FB 00          0013*M     db 0
0452FC 00 01       0014*M 	dw width * height ; length of data in bytes
0452FE 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 F3 
       00 00 DB CB 
       EF 00 00 00 
       00 00 00 00 
       00 00 FB E2 
       E0 00 00 00 
       DF EF 00 00 
       00 00 F3 D1 
       E6 00 00 E2 
       E0 00 00 DB 
       CB 00 00 00 
       00 00 00 D0 
       D1 00 F1 E2 
       E0 E5 00 00 
       00 FB 00 00 
       00 00 00 D0 
       D1 E0 F1 F5 
       E2 E0 E0 00 
       00 E0 00 00 
       DB 00 00 00 
       D0 D1 F8 FD 
       F1 E0 E0 00 
       00 E0 E0 00 
       DF DB 00 E5 
       D0 E0 FD FE 
       FD FC E1 E1 
       E2 E1 E0 F1 
       CB 00 00 E0 
       E0 D0 F8 FD 
       FE F8 F6 E1 
       00 E1 E1 F2 
       00 FA 00 00 
       E1 E0 F8 F8 
       FC FE FB F2 
       E1 E2 F2 E2 
       00 E0 00 00 
       E1 E0 F4 E5 
       F1 F5 FB EB 
       E1 00 E5 FB 
       00 E0 E0 E0 
       E2 F2 D1 E6 
       F6 FA FB F3 
       FA 00 00 00 
       00 00 E0 E1 
       00 E1 D3 E5 
       FF FF FF FF 
       00 00 00 00 
       00 E0 E1 F2 
       F7 00 E1 E2 
       EA FF F1 FA 
       00 00 00 00 
       00 00 E1 E1 
       E5 00 FA 00 
       E5 E0 F1 00 
       00 00 00 00 
       00 00 E2 FA 
       00 00 00 00 
       00 00 E0 F1 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 E0 00 
       00 00 00 00 
0453FE             0016*M 
0453FE             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0453FE 17 1B 21    0018*M     db 23,27,0x21
045401 10 00       0019*M     dw width ; in pixels
045403 10 00       0020*M     dw height ; in pixels
045405 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045406             0104*  	LOADBMPBUFFER2 BUF_SEEKER_120,16,16,"../../tgt/sprites/seeker_120.rgba2"
045406             0001*M 
045406             0002*M     ; Clear buffer
045406 17 00 A0    0003*M     db 23,0,0xA0
045409 23 01       0004*M     dw bufferId
04540B 02          0005*M     db 2
04540C             0006*M 
04540C 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04540F 23 01       0008*M     dw bufferId
045411             0009*M 
045411             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045411 17 00 A0    0011*M     db 23,0,0xA0
045414 23 01       0012*M     dw bufferId
045416 00          0013*M     db 0
045417 00 01       0014*M 	dw width * height ; length of data in bytes
045419 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 F3 00 00 
       00 EB 00 00 
       C3 00 00 00 
       F3 E6 00 00 
       FB E2 00 00 
       DB CB EF 00 
       D7 00 00 00 
       D1 D1 00 00 
       E2 E0 00 00 
       00 DF 00 00 
       CB DB 00 00 
       D0 D1 E0 F1 
       E2 E0 E5 00 
       DB CB EF 00 
       DF 00 00 00 
       D0 D1 F1 F5 
       E2 E0 E0 00 
       00 FB 00 00 
       CB DB 00 E5 
       D0 E0 F8 F8 
       FD F1 E0 E0 
       00 00 E0 00 
       00 FA 00 00 
       E0 D0 F8 FD 
       FE FD E1 E1 
       00 00 E0 00 
       00 E0 00 00 
       E0 E0 F8 FD 
       FE FC E1 E1 
       E2 E1 E0 00 
       00 E0 00 00 
       E1 E0 F4 F8 
       FC F8 F6 F2 
       00 E1 E0 F1 
       00 E0 E0 E2 
       E1 E0 E5 F1 
       F5 FE FB E1 
       E2 F2 E1 F2 
       00 E0 E1 00 
       F2 D1 E6 F6 
       FA FA FB F3 
       E1 00 E5 E2 
       00 E1 E1 F2 
       F7 E1 E2 E5 
       FF FF FB 00 
       FA 00 00 FB 
       00 E2 E1 E5 
       00 E1 00 EA 
       FF FF FF 00 
       00 00 00 00 
       00 00 FA 00 
       00 FA 00 E5 
       E0 F1 FA 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E0 F1 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E0 F1 F1 00 
       00 00 00 00 
045519             0016*M 
045519             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045519 17 1B 21    0018*M     db 23,27,0x21
04551C 10 00       0019*M     dw width ; in pixels
04551E 10 00       0020*M     dw height ; in pixels
045520 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045521             0105*  	LOADBMPBUFFER2 BUF_SEEKER_128,16,16,"../../tgt/sprites/seeker_128.rgba2"
045521             0001*M 
045521             0002*M     ; Clear buffer
045521 17 00 A0    0003*M     db 23,0,0xA0
045524 24 01       0004*M     dw bufferId
045526 02          0005*M     db 2
045527             0006*M 
045527 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04552A 24 01       0008*M     dw bufferId
04552C             0009*M 
04552C             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04552C 17 00 A0    0011*M     db 23,0,0xA0
04552F 24 01       0012*M     dw bufferId
045531 00          0013*M     db 0
045532 00 01       0014*M 	dw width * height ; length of data in bytes
045534 00 C3 00 00 0015*M     incbin file ; bitmap data
       00 F3 00 00 
       00 00 F3 00 
       00 00 C3 00 
       00 D7 00 00 
       00 D1 E6 00 
       00 FB E2 00 
       00 00 EB 00 
       DB CB DB 00 
       00 D0 D1 00 
       00 E2 E0 00 
       00 DB CB EF 
       00 DF 00 00 
       00 D0 D1 E0 
       F1 E2 E0 00 
       00 00 DF 00 
       DB CB DB 00 
       E5 D0 D1 F1 
       F5 E2 E0 E5 
       00 DB CB EF 
       00 FA 00 00 
       E0 D0 E0 F8 
       FD F1 E0 E0 
       00 00 FB 00 
       00 E0 00 00 
       E0 D0 F8 FD 
       FE FD E0 E0 
       00 00 E0 00 
       00 E0 00 00 
       E1 E0 F8 FD 
       FE FC E1 E1 
       00 00 E0 00 
       00 E0 E0 E2 
       E1 E0 F4 F8 
       FC F8 F6 E1 
       E2 E1 E0 00 
       E0 E0 E1 00 
       F2 D1 E5 F1 
       F5 FE FB F2 
       00 E1 E0 F1 
       E1 E1 F2 F7 
       E1 D3 E6 F6 
       FA FB EB E1 
       E2 F2 E1 F2 
       E2 E1 E5 00 
       E1 E2 E5 FF 
       FF FB F3 E1 
       00 E5 E2 F3 
       00 FA 00 00 
       FA 00 EA FF 
       FF FF 00 FA 
       00 00 FB 00 
       00 00 00 00 
       00 00 E5 E0 
       F1 FA 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 E0 
       F1 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 E0 
       F1 00 00 00 
       00 00 00 00 
045634             0016*M 
045634             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045634 17 1B 21    0018*M     db 23,27,0x21
045637 10 00       0019*M     dw width ; in pixels
045639 10 00       0020*M     dw height ; in pixels
04563B 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04563C             0106*  	LOADBMPBUFFER2 BUF_SEEKER_136,16,16,"../../tgt/sprites/seeker_136.rgba2"
04563C             0001*M 
04563C             0002*M     ; Clear buffer
04563C 17 00 A0    0003*M     db 23,0,0xA0
04563F 25 01       0004*M     dw bufferId
045641 02          0005*M     db 2
045642             0006*M 
045642 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045645 25 01       0008*M     dw bufferId
045647             0009*M 
045647             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045647 17 00 A0    0011*M     db 23,0,0xA0
04564A 25 01       0012*M     dw bufferId
04564C 00          0013*M     db 0
04564D 00 01       0014*M 	dw width * height ; length of data in bytes
04564F 00 00 D7 00 0015*M     incbin file ; bitmap data
       00 00 F3 00 
       00 00 00 00 
       00 00 00 00 
       00 DB CB DB 
       00 00 D1 E6 
       00 00 FB F3 
       00 00 00 C3 
       00 00 DF 00 
       00 00 D0 D1 
       00 00 E2 E2 
       00 00 00 EB 
       00 DB CB DB 
       00 E5 D0 D1 
       E0 F1 E2 E0 
       00 00 DB CB 
       00 00 FA 00 
       00 E0 D0 D1 
       F1 F5 E2 E0 
       00 00 00 DF 
       00 E0 00 00 
       E0 D0 E0 F8 
       FD FD F1 E0 
       E5 00 DB CB 
       00 E0 00 00 
       E1 E0 F8 FD 
       FE FD E0 E0 
       00 00 FB 00 
       00 E0 E0 E2 
       E1 E0 F8 FD 
       FE FC E1 E0 
       00 00 E0 00 
       E0 E0 E1 00 
       F2 E0 F4 F8 
       FC F8 F6 E1 
       00 00 E0 00 
       E1 E1 F2 F7 
       E1 D1 E5 F1 
       F5 FE F6 E1 
       E2 E1 E0 00 
       E1 E5 00 E1 
       E2 E6 F6 F6 
       FA FB FB F2 
       00 E1 E0 00 
       FA 00 00 FA 
       00 E5 FF FF 
       FB F3 E1 E2 
       F2 E1 F2 00 
       00 00 00 00 
       00 EA FF FF 
       FF 00 E1 00 
       E5 E2 F3 00 
       00 00 00 00 
       00 E5 E0 F1 
       FA 00 FA 00 
       00 FB 00 00 
       00 00 00 00 
       00 00 E0 F1 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 E0 F1 
       00 00 00 00 
       00 00 00 00 
04574F             0016*M 
04574F             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04574F 17 1B 21    0018*M     db 23,27,0x21
045752 10 00       0019*M     dw width ; in pixels
045754 10 00       0020*M     dw height ; in pixels
045756 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045757             0107*  	LOADBMPBUFFER2 BUF_SEEKER_144,16,16,"../../tgt/sprites/seeker_144.rgba2"
045757             0001*M 
045757             0002*M     ; Clear buffer
045757 17 00 A0    0003*M     db 23,0,0xA0
04575A 26 01       0004*M     dw bufferId
04575C 02          0005*M     db 2
04575D             0006*M 
04575D 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045760 26 01       0008*M     dw bufferId
045762             0009*M 
045762             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045762 17 00 A0    0011*M     db 23,0,0xA0
045765 26 01       0012*M     dw bufferId
045767 00          0013*M     db 0
045768 00 01       0014*M 	dw width * height ; length of data in bytes
04576A 00 00 00 DB 0015*M     incbin file ; bitmap data
       CB DB 00 00 
       F3 00 00 00 
       00 00 00 00 
       00 00 DB DF 
       00 00 00 D0 
       D1 E6 00 00 
       00 00 00 00 
       00 00 00 CB 
       DB 00 00 D0 
       D1 00 00 FB 
       E2 F3 00 00 
       00 00 FA 00 
       00 00 E5 D0 
       D1 E0 00 E2 
       E0 00 00 00 
       00 00 E0 00 
       00 E0 D0 D1 
       F1 F5 F1 E2 
       E0 00 00 00 
       00 E0 E0 00 
       00 E0 D0 E0 
       F8 FD E2 E0 
       00 00 00 DB 
       E0 E0 E0 E2 
       E1 E0 F8 F8 
       FD FE F1 E0 
       E5 00 DB DF 
       E1 E1 E1 00 
       E1 E0 F4 FD 
       FE FD E0 E0 
       E0 00 00 CB 
       E1 F2 F7 E1 
       F2 D1 E5 F8 
       FC FC E1 E1 
       00 00 FB 00 
       FA E5 00 E1 
       D3 E6 F1 F5 
       FE F8 F6 E1 
       00 00 E0 00 
       00 00 00 FA 
       E2 E5 F6 FA 
       FB FB F2 E2 
       E1 E0 E0 00 
       00 00 00 00 
       EA FF FF FF 
       FB EB E1 00 
       E1 E0 00 00 
       00 00 00 00 
       E5 E0 FF FF 
       F3 E1 00 E2 
       F2 E1 F1 00 
       00 00 00 00 
       00 E0 F1 FA 
       00 FA 00 E5 
       E2 F2 00 00 
       00 00 00 00 
       E0 F1 00 00 
       00 00 00 00 
       FB F3 00 00 
       00 00 00 00 
       00 F1 00 00 
       00 00 00 00 
       00 00 00 00 
04586A             0016*M 
04586A             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04586A 17 1B 21    0018*M     db 23,27,0x21
04586D 10 00       0019*M     dw width ; in pixels
04586F 10 00       0020*M     dw height ; in pixels
045871 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045872             0108*  	LOADBMPBUFFER2 BUF_SEEKER_152,16,16,"../../tgt/sprites/seeker_152.rgba2"
045872             0001*M 
045872             0002*M     ; Clear buffer
045872 17 00 A0    0003*M     db 23,0,0xA0
045875 27 01       0004*M     dw bufferId
045877 02          0005*M     db 2
045878             0006*M 
045878 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04587B 27 01       0008*M     dw bufferId
04587D             0009*M 
04587D             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04587D 17 00 A0    0011*M     db 23,0,0xA0
045880 27 01       0012*M     dw bufferId
045882 00          0013*M     db 0
045883 00 01       0014*M 	dw width * height ; length of data in bytes
045885 00 00 00 DB 0015*M     incbin file ; bitmap data
       00 DF DB 00 
       00 F3 F3 00 
       00 00 00 00 
       00 00 00 00 
       CB 00 00 00 
       00 D1 E6 00 
       00 00 00 00 
       00 00 00 FA 
       00 DB 00 00 
       D0 D1 00 00 
       00 00 00 00 
       00 00 00 E0 
       00 00 E0 D0 
       D0 D1 00 00 
       FB E2 F3 00 
       00 00 E0 00 
       00 00 E0 D0 
       D1 F1 F1 F1 
       E2 E0 00 00 
       E1 E0 E0 E0 
       00 E1 D0 F8 
       F8 F8 F5 E2 
       E0 00 00 00 
       E1 E1 E1 00 
       E1 E0 E0 F8 
       FD FD F1 E0 
       E0 00 00 DB 
       E1 E5 F7 F7 
       F2 E0 F4 FD 
       FE FE FD E0 
       E0 00 00 00 
       00 00 00 E1 
       D3 E5 F1 F8 
       FC FC E1 E0 
       00 00 DB CB 
       00 00 FA E2 
       E2 E6 F6 F5 
       F8 F6 E1 E1 
       00 00 FB 00 
       00 00 00 00 
       EA FF FA FA 
       FE FB E1 E2 
       00 00 E0 00 
       00 00 00 E5 
       FF FF FF FB 
       EB E1 00 E2 
       E1 E0 00 00 
       00 00 00 00 
       E0 F1 FF 00 
       F3 E1 E2 E1 
       E0 00 00 00 
       00 00 00 E0 
       F1 F1 FA 00 
       FA 00 E5 F2 
       E1 F1 00 00 
       00 00 00 E0 
       F1 00 00 00 
       00 00 00 E2 
       F2 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FB 00 
       F3 00 00 00 
045985             0016*M 
045985             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045985 17 1B 21    0018*M     db 23,27,0x21
045988 10 00       0019*M     dw width ; in pixels
04598A 10 00       0020*M     dw height ; in pixels
04598C 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04598D             0109*  	LOADBMPBUFFER2 BUF_SEEKER_160,16,16,"../../tgt/sprites/seeker_160.rgba2"
04598D             0001*M 
04598D             0002*M     ; Clear buffer
04598D 17 00 A0    0003*M     db 23,0,0xA0
045990 28 01       0004*M     dw bufferId
045992 02          0005*M     db 2
045993             0006*M 
045993 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045996 28 01       0008*M     dw bufferId
045998             0009*M 
045998             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045998 17 00 A0    0011*M     db 23,0,0xA0
04599B 28 01       0012*M     dw bufferId
04599D 00          0013*M     db 0
04599E 00 01       0014*M 	dw width * height ; length of data in bytes
0459A0 00 00 00 00 0015*M     incbin file ; bitmap data
       00 DB DF 00 
       00 00 00 F3 
       00 00 00 00 
       00 00 00 00 
       00 FA DB 00 
       00 00 D1 F3 
       00 00 00 00 
       00 00 00 00 
       E0 00 00 00 
       00 D0 D0 E6 
       00 00 00 00 
       00 E0 00 E0 
       00 00 00 E0 
       D0 D0 D1 00 
       00 00 00 00 
       E1 E1 E0 E0 
       00 00 E0 D0 
       D0 D1 E0 F1 
       00 FB F3 F3 
       E2 E1 F2 00 
       E2 E1 E0 D0 
       E0 F8 F5 F1 
       E2 E0 E2 00 
       FA E5 F7 F7 
       F2 E0 E0 F8 
       FD FD FD E2 
       E0 E0 00 00 
       00 00 00 E1 
       D3 D1 F4 FD 
       FE FE F1 E0 
       E0 00 00 00 
       00 00 FA E2 
       D3 E6 F1 FC 
       FE FC E0 E0 
       E0 00 00 00 
       00 00 00 00 
       E5 F6 FA F5 
       F8 E1 E1 E0 
       00 00 DB DF 
       00 00 00 EA 
       FF FF FA FB 
       FB F6 E1 00 
       00 00 FB EF 
       00 00 00 E0 
       FF FF FB EB 
       EB F2 E2 00 
       00 E0 00 00 
       00 00 E0 F1 
       F1 FF 00 F3 
       E1 E2 00 E1 
       E0 00 00 00 
       00 00 F1 F1 
       00 00 00 FA 
       00 E2 F2 E0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E5 E1 F2 
       F1 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FB F3 F2 
       00 00 00 00 
045AA0             0016*M 
045AA0             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045AA0 17 1B 21    0018*M     db 23,27,0x21
045AA3 10 00       0019*M     dw width ; in pixels
045AA5 10 00       0020*M     dw height ; in pixels
045AA7 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045AA8             0110*  	LOADBMPBUFFER2 BUF_SEEKER_168,16,16,"../../tgt/sprites/seeker_168.rgba2"
045AA8             0001*M 
045AA8             0002*M     ; Clear buffer
045AA8 17 00 A0    0003*M     db 23,0,0xA0
045AAB 29 01       0004*M     dw bufferId
045AAD 02          0005*M     db 2
045AAE             0006*M 
045AAE 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045AB1 29 01       0008*M     dw bufferId
045AB3             0009*M 
045AB3             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045AB3 17 00 A0    0011*M     db 23,0,0xA0
045AB6 29 01       0012*M     dw bufferId
045AB8 00          0013*M     db 0
045AB9 00 01       0014*M 	dw width * height ; length of data in bytes
045ABB 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 CB 
       00 DB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E0 FA DB 
       00 00 00 00 
       F3 00 00 00 
       00 00 E0 00 
       E0 00 00 00 
       00 00 00 D0 
       D1 00 00 00 
       E2 E1 E1 E0 
       E0 00 00 00 
       E0 D0 D0 D1 
       E6 00 00 00 
       00 E1 F2 E1 
       E2 E2 E1 E0 
       D0 D0 D1 E0 
       00 00 00 00 
       FA 00 E5 F7 
       00 E1 E0 E0 
       F8 E0 F1 E0 
       00 00 FB F3 
       00 00 00 E1 
       E1 D1 E0 F8 
       FD F8 FD F5 
       E2 E2 E2 F3 
       00 00 FA E2 
       D3 E5 F4 F8 
       FD FE FD E2 
       E0 E0 00 00 
       00 00 00 00 
       E5 F6 F1 FC 
       FE FC FD E0 
       E0 00 00 00 
       00 00 E5 EA 
       FF F6 FA F5 
       F8 E1 E0 E0 
       E0 00 00 DB 
       00 00 E0 E0 
       FF FF FB FE 
       F6 F6 E1 00 
       00 DB 00 DF 
       00 E0 E0 F1 
       FF FF F3 EB 
       F2 E1 00 00 
       00 00 CB 00 
       00 F1 F1 00 
       FA 00 F3 E1 
       E2 00 E1 00 
       E0 FB 00 EF 
       00 00 00 00 
       00 00 FA 00 
       E2 E1 E1 E0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E5 E1 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E2 F2 F2 00 
       00 00 00 00 
045BBB             0016*M 
045BBB             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045BBB 17 1B 21    0018*M     db 23,27,0x21
045BBE 10 00       0019*M     dw width ; in pixels
045BC0 10 00       0020*M     dw height ; in pixels
045BC2 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045BC3             0111*  	LOADBMPBUFFER2 BUF_SEEKER_176,16,16,"../../tgt/sprites/seeker_176.rgba2"
045BC3             0001*M 
045BC3             0002*M     ; Clear buffer
045BC3 17 00 A0    0003*M     db 23,0,0xA0
045BC6 2A 01       0004*M     dw bufferId
045BC8 02          0005*M     db 2
045BC9             0006*M 
045BC9 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045BCC 2A 01       0008*M     dw bufferId
045BCE             0009*M 
045BCE             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045BCE 17 00 A0    0011*M     db 23,0,0xA0
045BD1 2A 01       0012*M     dw bufferId
045BD3 00          0013*M     db 0
045BD4 00 01       0014*M 	dw width * height ; length of data in bytes
045BD6 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       CB DF DB 00 
       00 00 00 00 
       00 00 00 E0 
       00 E0 E0 FA 
       00 DB 00 00 
       00 00 00 00 
       00 E2 E1 E1 
       E0 E0 00 00 
       00 00 00 00 
       00 F3 00 00 
       00 FA E1 F2 
       E1 E0 00 00 
       E0 E5 00 D0 
       D0 D1 00 00 
       00 00 E5 F7 
       00 E2 E1 E1 
       E0 D0 D0 D1 
       D1 E6 00 00 
       00 00 00 00 
       E1 F2 E0 E0 
       D0 E0 D1 E0 
       00 00 00 00 
       00 00 FA E1 
       D3 D1 F4 F8 
       F8 FD F8 F1 
       F1 00 FB 00 
       00 00 00 E2 
       E5 E6 E5 F8 
       FD FE FD F5 
       E2 E2 E2 F3 
       00 00 E5 EA 
       FF F6 F1 FC 
       FE FD F1 E2 
       E0 E0 E0 00 
       00 00 E0 FF 
       FF FA F5 FE 
       F8 FC E0 E0 
       E5 00 00 00 
       E0 E0 F1 F1 
       FF FB FB FB 
       F6 E1 E0 E0 
       00 00 00 DB 
       00 F1 00 FA 
       FF F3 EB F2 
       E1 E1 00 00 
       00 DB 00 CB 
       00 00 00 00 
       00 FA E1 E1 
       00 E2 00 00 
       00 CB DF EF 
       00 00 00 00 
       00 00 00 E2 
       E1 E1 E0 E0 
       FB 00 EF 00 
       00 00 00 00 
       00 00 E5 F2 
       E1 E0 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FB E2 
       F2 F1 00 00 
       00 00 00 00 
045CD6             0016*M 
045CD6             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045CD6 17 1B 21    0018*M     db 23,27,0x21
045CD9 10 00       0019*M     dw width ; in pixels
045CDB 10 00       0020*M     dw height ; in pixels
045CDD 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045CDE             0112*  	LOADBMPBUFFER2 BUF_SEEKER_184,16,16,"../../tgt/sprites/seeker_184.rgba2"
045CDE             0001*M 
045CDE             0002*M     ; Clear buffer
045CDE 17 00 A0    0003*M     db 23,0,0xA0
045CE1 2B 01       0004*M     dw bufferId
045CE3 02          0005*M     db 2
045CE4             0006*M 
045CE4 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045CE7 2B 01       0008*M     dw bufferId
045CE9             0009*M 
045CE9             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045CE9 17 00 A0    0011*M     db 23,0,0xA0
045CEC 2B 01       0012*M     dw bufferId
045CEE 00          0013*M     db 0
045CEF 00 01       0014*M 	dw width * height ; length of data in bytes
045CF1 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 CB DF 
       CB D7 C3 00 
       00 00 00 E2 
       E1 E0 E0 E0 
       E0 FA DB 00 
       DB 00 00 00 
       00 00 FA E1 
       E1 E1 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 E5 
       F2 00 E2 00 
       00 00 E5 00 
       00 00 00 00 
       00 00 00 00 
       F7 F2 E1 E1 
       E0 E0 D0 D0 
       D0 D1 F3 00 
       00 00 FA E1 
       E1 D1 E0 E0 
       E0 D0 E0 D1 
       D1 D1 E6 00 
       00 00 00 00 
       E2 E6 E5 F4 
       F8 F8 F8 F1 
       E0 00 00 00 
       00 00 E5 EA 
       E5 F6 F1 F8 
       FD FD F8 F5 
       F1 00 00 00 
       E0 E0 E0 FF 
       FF FA F5 FC 
       FE FE FD E2 
       E2 E2 FB 00 
       F1 F1 F1 FF 
       FF FA FE F8 
       FC FD F1 E0 
       E0 E0 E2 F3 
       F1 00 FA FF 
       FB FB FB F6 
       E1 E1 E0 E0 
       E5 00 00 00 
       00 00 00 00 
       00 F3 E1 F2 
       E1 E1 E0 00 
       00 00 00 00 
       00 00 00 00 
       FA E1 E2 00 
       E2 00 00 00 
       DB 00 DB 00 
       00 00 00 00 
       00 00 F2 E1 
       E1 00 00 FB 
       CB DF CB EB 
       00 00 00 00 
       00 E5 E1 E0 
       E0 E0 E0 00 
       EF 00 EF 00 
       00 00 00 00 
       FB E2 F2 F1 
       00 00 00 00 
       00 00 00 00 
045DF1             0016*M 
045DF1             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045DF1 17 1B 21    0018*M     db 23,27,0x21
045DF4 10 00       0019*M     dw width ; in pixels
045DF6 10 00       0020*M     dw height ; in pixels
045DF8 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045DF9             0113*  	LOADBMPBUFFER2 BUF_SEEKER_192,16,16,"../../tgt/sprites/seeker_192.rgba2"
045DF9             0001*M 
045DF9             0002*M     ; Clear buffer
045DF9 17 00 A0    0003*M     db 23,0,0xA0
045DFC 2C 01       0004*M     dw bufferId
045DFE 02          0005*M     db 2
045DFF             0006*M 
045DFF 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045E02 2C 01       0008*M     dw bufferId
045E04             0009*M 
045E04             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045E04 17 00 A0    0011*M     db 23,0,0xA0
045E07 2C 01       0012*M     dw bufferId
045E09 00          0013*M     db 0
045E0A 00 01       0014*M 	dw width * height ; length of data in bytes
045E0C 00 00 00 00 0015*M     incbin file ; bitmap data
       E2 E1 E0 00 
       00 00 00 DB 
       00 DB 00 00 
       00 00 00 FA 
       E1 E1 E0 E0 
       E0 E0 FA CB 
       DF CB D7 C3 
       00 00 00 00 
       E5 F2 E1 E0 
       00 00 00 DB 
       00 DB 00 00 
       00 00 00 00 
       00 F7 00 E2 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FA 
       E1 E1 F2 E1 
       E1 E0 E0 E5 
       00 00 00 00 
       00 00 00 00 
       E2 D3 D1 E0 
       E0 D0 D0 D0 
       D0 D0 D1 F3 
       00 00 E5 EA 
       E5 E6 E5 F4 
       F8 F8 E0 D1 
       D1 D1 E6 00 
       E0 E0 E0 FF 
       FF F6 F1 F8 
       FD FD F8 F1 
       E0 00 00 00 
       F1 F1 F1 FF 
       FF FA F5 FC 
       FE FE FD F5 
       F1 00 00 00 
       00 00 FA FF 
       FB FB FE F8 
       FC FD F1 E2 
       E2 E2 FB 00 
       00 00 00 00 
       F3 EB FB F6 
       E1 E0 E0 E0 
       E0 E0 E2 F3 
       00 00 00 FA 
       E1 E1 F2 E1 
       E1 E0 E0 E5 
       00 00 00 00 
       00 00 00 00 
       00 E2 00 E2 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E5 F2 E1 E1 
       00 00 00 DB 
       00 DB 00 00 
       00 00 00 FB 
       E2 E1 E0 E0 
       E0 E0 FB CB 
       DF CB EB C3 
       00 00 00 00 
       F3 F2 F1 00 
       00 00 00 EF 
       00 EF 00 00 
045F0C             0016*M 
045F0C             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
045F0C 17 1B 21    0018*M     db 23,27,0x21
045F0F 10 00       0019*M     dw width ; in pixels
045F11 10 00       0020*M     dw height ; in pixels
045F13 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
045F14             0114*  	LOADBMPBUFFER2 BUF_SEEKER_200,16,16,"../../tgt/sprites/seeker_200.rgba2"
045F14             0001*M 
045F14             0002*M     ; Clear buffer
045F14 17 00 A0    0003*M     db 23,0,0xA0
045F17 2D 01       0004*M     dw bufferId
045F19 02          0005*M     db 2
045F1A             0006*M 
045F1A 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
045F1D 2D 01       0008*M     dw bufferId
045F1F             0009*M 
045F1F             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
045F1F 17 00 A0    0011*M     db 23,0,0xA0
045F22 2D 01       0012*M     dw bufferId
045F24 00          0013*M     db 0
045F25 00 01       0014*M 	dw width * height ; length of data in bytes
045F27 00 00 00 00 0015*M     incbin file ; bitmap data
       FA E1 E1 E0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E5 E1 E0 
       E0 E0 E0 00 
       DB 00 DB 00 
       00 00 00 00 
       00 00 F2 E1 
       E0 00 00 FA 
       CB DF CB D7 
       00 00 00 00 
       FA E1 F7 00 
       E2 00 00 00 
       DB 00 DB 00 
       00 00 00 00 
       00 E2 E1 F2 
       E1 E1 E0 00 
       00 00 00 00 
       E0 00 E5 EA 
       E5 E6 D1 E0 
       E0 E0 D0 E0 
       E5 00 00 00 
       E0 E0 E0 FF 
       FF F6 E5 F4 
       F8 F8 E0 D0 
       D0 D0 D1 F3 
       F1 F1 F1 FF 
       FF F6 F1 F8 
       FD FD F8 D1 
       D1 D1 E6 00 
       00 00 FA FF 
       FB FA F5 FC 
       FE FE FD F1 
       E0 00 00 00 
       00 00 00 00 
       F3 FB FE F8 
       FC FD FD F5 
       F1 00 00 00 
       00 00 FA E1 
       E1 FB F6 F6 
       E1 E0 F1 E2 
       E2 E2 FB 00 
       00 00 00 00 
       E2 F2 E1 E1 
       E0 E0 E0 E0 
       E0 E2 F3 00 
       00 00 00 E5 
       F2 00 E2 00 
       00 00 E5 00 
       00 00 00 00 
       00 00 FB E2 
       E1 E1 E1 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 F3 
       F2 E0 E0 E0 
       E0 FB DB 00 
       DB 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 CB DF 
       CB EB C3 00 
046027             0016*M 
046027             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046027 17 1B 21    0018*M     db 23,27,0x21
04602A 10 00       0019*M     dw width ; in pixels
04602C 10 00       0020*M     dw height ; in pixels
04602E 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04602F             0115*  	LOADBMPBUFFER2 BUF_SEEKER_208,16,16,"../../tgt/sprites/seeker_208.rgba2"
04602F             0001*M 
04602F             0002*M     ; Clear buffer
04602F 17 00 A0    0003*M     db 23,0,0xA0
046032 2E 01       0004*M     dw bufferId
046034 02          0005*M     db 2
046035             0006*M 
046035 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046038 2E 01       0008*M     dw bufferId
04603A             0009*M 
04603A             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04603A 17 00 A0    0011*M     db 23,0,0xA0
04603D 2E 01       0012*M     dw bufferId
04603F 00          0013*M     db 0
046040 00 01       0014*M 	dw width * height ; length of data in bytes
046042 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 FA E1 
       E1 E0 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 E5 F2 
       E1 E0 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 F7 
       E1 E0 E0 E0 
       FA 00 DB 00 
       00 00 00 00 
       00 FA E1 E1 
       00 E2 00 00 
       00 CB DF DB 
       00 E0 00 E5 
       EA E2 D3 F2 
       E1 E1 00 00 
       00 DB 00 CB 
       F1 F1 E0 E0 
       FF E5 E6 D1 
       E0 E0 E0 E0 
       00 00 00 DB 
       00 00 F1 FF 
       FF F6 F1 E5 
       F4 F8 D0 D0 
       E5 00 00 00 
       00 00 FA FF 
       FF FA F5 F8 
       FD F8 E0 D1 
       D0 D0 D0 00 
       00 00 00 F3 
       FB FB FE FC 
       FE FD F8 F1 
       D1 D1 D1 F3 
       00 00 FA E1 
       EB FB F8 FC 
       FD FE FD F5 
       E0 00 E6 00 
       00 00 00 00 
       E1 F2 F6 E1 
       E0 F1 E2 F1 
       00 00 00 00 
       00 00 E5 E2 
       00 E2 E1 E1 
       E0 E0 E0 E2 
       E2 FB 00 00 
       00 FB E2 F2 
       E1 E1 00 00 
       E0 E5 00 E0 
       E0 E2 00 00 
       00 F3 F2 E1 
       E0 E0 00 00 
       00 00 00 00 
       00 F3 00 00 
       00 00 00 F1 
       00 E0 E0 FB 
       00 DB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       CB DF DB 00 
       00 00 00 00 
046142             0016*M 
046142             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046142 17 1B 21    0018*M     db 23,27,0x21
046145 10 00       0019*M     dw width ; in pixels
046147 10 00       0020*M     dw height ; in pixels
046149 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04614A             0116*  	LOADBMPBUFFER2 BUF_SEEKER_216,16,16,"../../tgt/sprites/seeker_216.rgba2"
04614A             0001*M 
04614A             0002*M     ; Clear buffer
04614A 17 00 A0    0003*M     db 23,0,0xA0
04614D 2F 01       0004*M     dw bufferId
04614F 02          0005*M     db 2
046150             0006*M 
046150 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046153 2F 01       0008*M     dw bufferId
046155             0009*M 
046155             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
046155 17 00 A0    0011*M     db 23,0,0xA0
046158 2F 01       0012*M     dw bufferId
04615A 00          0013*M     db 0
04615B 00 01       0014*M 	dw width * height ; length of data in bytes
04615D 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       E1 E1 E1 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       E5 E1 E0 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FA 00 
       F7 E1 E0 E0 
       00 00 00 00 
       00 E0 E0 00 
       E5 00 E2 E1 
       F7 00 E0 00 
       E0 FA 00 DB 
       00 F1 F1 E0 
       FF EA E2 D3 
       F2 E1 00 00 
       00 00 CB 00 
       00 00 F1 F1 
       FF FF E6 E5 
       E0 E0 E1 00 
       00 DB 00 DF 
       00 00 FA FF 
       FF FA F6 F1 
       F4 E0 D0 E0 
       E0 00 00 DB 
       00 00 00 00 
       FB FA F5 F8 
       FD F8 F8 D0 
       D0 00 00 00 
       00 00 FA F3 
       EB FE F8 FC 
       FE FD F8 D1 
       D0 D0 00 00 
       00 00 00 E1 
       E1 FB F6 FC 
       FE FD F8 F1 
       D1 D1 D1 F3 
       FB 00 E5 E2 
       00 E1 E1 E1 
       FD F1 F5 F1 
       00 00 E6 F3 
       00 E2 F2 E1 
       E2 E2 E1 E0 
       E0 E0 E2 F1 
       00 00 00 00 
       F3 F2 E1 E0 
       E1 00 00 00 
       E0 E0 E0 E2 
       FB 00 00 00 
       00 00 F1 00 
       E0 00 00 00 
       00 00 00 E0 
       E2 00 00 00 
       00 00 00 00 
       00 E0 FB DB 
       00 00 00 00 
       F3 00 00 00 
       00 00 00 00 
       00 00 00 CB 
       00 DB 00 00 
       00 00 00 00 
04625D             0016*M 
04625D             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
04625D 17 1B 21    0018*M     db 23,27,0x21
046260 10 00       0019*M     dw width ; in pixels
046262 10 00       0020*M     dw height ; in pixels
046264 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046265             0117*  	LOADBMPBUFFER2 BUF_SEEKER_224,16,16,"../../tgt/sprites/seeker_224.rgba2"
046265             0001*M 
046265             0002*M     ; Clear buffer
046265 17 00 A0    0003*M     db 23,0,0xA0
046268 30 01       0004*M     dw bufferId
04626A 02          0005*M     db 2
04626B             0006*M 
04626B 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
04626E 30 01       0008*M     dw bufferId
046270             0009*M 
046270             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
046270 17 00 A0    0011*M     db 23,0,0xA0
046273 30 01       0012*M     dw bufferId
046275 00          0013*M     db 0
046276 00 01       0014*M 	dw width * height ; length of data in bytes
046278 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 FA E2 E1 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 E5 E1 E1 
       E0 00 00 00 
       00 00 E0 E0 
       00 00 00 FA 
       00 F7 F2 E0 
       00 00 00 00 
       00 00 F1 E0 
       E0 EA 00 E2 
       E1 F7 00 E0 
       E0 00 00 00 
       00 00 00 F1 
       FF FF E5 D3 
       D3 F2 E2 00 
       00 E0 00 00 
       00 00 00 FF 
       FF FF F6 E6 
       D1 E0 E1 00 
       00 00 FA DB 
       00 00 00 00 
       FB FA F6 F1 
       F4 E0 E0 E0 
       00 00 DB DF 
       00 00 FA F3 
       EB FB F5 F8 
       FD F8 D0 D0 
       E0 00 00 00 
       00 00 00 E1 
       EB FB F8 FE 
       FD FD E0 D0 
       D0 00 00 00 
       FB E5 E2 E2 
       F2 F6 E1 FC 
       FE F8 F8 D1 
       D0 D0 00 00 
       F3 E1 F2 00 
       E2 E1 E1 E0 
       F1 FD F1 E0 
       D1 D0 D1 00 
       F2 F2 E0 E1 
       00 00 E0 E0 
       E0 E2 F1 E0 
       00 E6 F3 F3 
       00 F1 00 E0 
       00 00 00 E0 
       E0 E0 E2 00 
       00 00 00 00 
       00 00 00 00 
       E0 00 00 00 
       00 E0 E0 FB 
       00 00 00 00 
       00 00 00 00 
       00 FB DB 00 
       00 00 E2 F3 
       00 00 00 00 
       00 00 00 00 
       00 EF DF 00 
       00 00 00 F3 
       00 00 00 00 
046378             0016*M 
046378             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046378 17 1B 21    0018*M     db 23,27,0x21
04637B 10 00       0019*M     dw width ; in pixels
04637D 10 00       0020*M     dw height ; in pixels
04637F 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046380             0118*  	LOADBMPBUFFER2 BUF_SEEKER_232,16,16,"../../tgt/sprites/seeker_232.rgba2"
046380             0001*M 
046380             0002*M     ; Clear buffer
046380 17 00 A0    0003*M     db 23,0,0xA0
046383 31 01       0004*M     dw bufferId
046385 02          0005*M     db 2
046386             0006*M 
046386 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046389 31 01       0008*M     dw bufferId
04638B             0009*M 
04638B             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04638B 17 00 A0    0011*M     db 23,0,0xA0
04638E 31 01       0012*M     dw bufferId
046390 00          0013*M     db 0
046391 00 01       0014*M 	dw width * height ; length of data in bytes
046393 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 00 
       00 00 FA 00 
       E2 00 00 00 
       00 00 00 F1 
       E0 00 00 00 
       00 00 00 E1 
       E1 00 00 00 
       00 00 00 F1 
       E0 E0 E5 00 
       FA 00 E5 F2 
       E1 E0 00 00 
       00 00 00 00 
       F1 E0 EA 00 
       E2 E1 F7 E1 
       E0 00 00 00 
       00 00 00 FA 
       FF FF FF E5 
       D3 E1 00 E2 
       E0 E0 00 00 
       00 00 00 00 
       FF FF F6 F6 
       E5 D1 E1 E2 
       00 00 E0 00 
       00 00 FA F3 
       F3 FB FA F1 
       F4 E0 E0 E1 
       00 00 FA 00 
       00 00 00 E1 
       EB FE F5 FC 
       F8 F8 E0 E0 
       00 00 DB CB 
       E2 E5 E2 E2 
       F2 F6 F8 FE 
       FD FD F8 D0 
       E0 00 00 00 
       F2 E1 E1 00 
       E1 F6 E1 FC 
       FE F8 E0 D0 
       D0 00 00 DB 
       F2 E0 E1 E1 
       00 E1 E0 FD 
       FD FD F1 D1 
       D0 00 00 00 
       00 00 E0 00 
       00 00 E0 E0 
       E2 F5 E0 E0 
       D1 D0 00 00 
       00 00 00 E0 
       00 00 E0 E0 
       E0 E2 00 00 
       E6 D1 F3 00 
       00 00 00 FB 
       00 DB 00 00 
       E0 E2 00 00 
       00 00 00 00 
       00 00 00 00 
       CB 00 00 00 
       00 E2 FB 00 
       00 00 00 00 
       00 00 00 EF 
       00 DF DB 00 
       00 F3 F3 00 
       00 00 00 00 
046493             0016*M 
046493             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046493 17 1B 21    0018*M     db 23,27,0x21
046496 10 00       0019*M     dw width ; in pixels
046498 10 00       0020*M     dw height ; in pixels
04649A 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
04649B             0119*  	LOADBMPBUFFER2 BUF_SEEKER_240,16,16,"../../tgt/sprites/seeker_240.rgba2"
04649B             0001*M 
04649B             0002*M     ; Clear buffer
04649B 17 00 A0    0003*M     db 23,0,0xA0
04649E 32 01       0004*M     dw bufferId
0464A0 02          0005*M     db 2
0464A1             0006*M 
0464A1 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0464A4 32 01       0008*M     dw bufferId
0464A6             0009*M 
0464A6             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0464A6 17 00 A0    0011*M     db 23,0,0xA0
0464A9 32 01       0012*M     dw bufferId
0464AB 00          0013*M     db 0
0464AC 00 01       0014*M 	dw width * height ; length of data in bytes
0464AE 00 00 00 00 0015*M     incbin file ; bitmap data
       00 E0 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       F1 E0 00 00 
       00 00 00 00 
       FA E2 00 00 
       00 00 00 00 
       00 F1 E0 E5 
       00 FA 00 E5 
       E1 E1 00 00 
       00 00 00 00 
       FA F1 FF EA 
       E2 E1 00 F7 
       F2 E1 E0 00 
       00 00 00 00 
       FF FF FF FF 
       E5 D3 E1 00 
       E1 E0 00 00 
       00 00 00 FA 
       F3 FB FA F6 
       E6 D1 F2 E2 
       E0 E0 E0 00 
       FB E5 00 E1 
       EB FB F5 F1 
       E5 F4 E0 E1 
       00 00 E0 00 
       E2 F2 E2 E1 
       F2 FB FE FC 
       F8 F8 E0 E1 
       00 00 FA 00 
       F2 E1 E1 00 
       E1 F6 F8 FE 
       FD F8 D0 E0 
       E0 00 00 CB 
       F1 E0 E1 E2 
       E1 E1 FC FD 
       FE FD E0 D0 
       E5 00 DB DF 
       00 E0 E0 00 
       00 E0 E0 F1 
       FD F8 D1 D0 
       00 00 00 DB 
       00 00 E0 00 
       00 E0 E0 E2 
       F5 F1 E0 D1 
       D0 00 00 00 
       00 00 FB 00 
       00 00 E5 E0 
       E2 F1 00 D1 
       D0 00 00 00 
       00 00 00 CB 
       DB 00 00 E0 
       E2 00 00 E6 
       D1 F3 00 00 
       00 00 EF DF 
       00 00 00 E0 
       E2 FB 00 00 
       00 00 00 00 
       00 00 00 EF 
       CB DB 00 00 
       F3 00 00 00 
       00 00 00 00 
0465AE             0016*M 
0465AE             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0465AE 17 1B 21    0018*M     db 23,27,0x21
0465B1 10 00       0019*M     dw width ; in pixels
0465B3 10 00       0020*M     dw height ; in pixels
0465B5 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0465B6             0120*  	LOADBMPBUFFER2 BUF_SEEKER_248,16,16,"../../tgt/sprites/seeker_248.rgba2"
0465B6             0001*M 
0465B6             0002*M     ; Clear buffer
0465B6 17 00 A0    0003*M     db 23,0,0xA0
0465B9 33 01       0004*M     dw bufferId
0465BB 02          0005*M     db 2
0465BC             0006*M 
0465BC 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0465BF 33 01       0008*M     dw bufferId
0465C1             0009*M 
0465C1             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0465C1 17 00 A0    0011*M     db 23,0,0xA0
0465C4 33 01       0012*M     dw bufferId
0465C6 00          0013*M     db 0
0465C7 00 01       0014*M 	dw width * height ; length of data in bytes
0465C9 00 00 00 00 0015*M     incbin file ; bitmap data
       00 F1 F1 E0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 F1 E0 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FA F1 E0 
       E5 00 FA 00 
       00 FA 00 00 
       00 00 00 00 
       00 FF FF FF 
       EA 00 E1 00 
       E5 E1 E2 00 
       FB 00 00 FA 
       00 FB FF FF 
       E5 E2 E1 F7 
       F2 E1 E1 00 
       E2 E5 00 E1 
       F3 FB FA FA 
       F6 E6 D1 F2 
       00 E1 E0 00 
       F2 E1 F2 E2 
       E1 FB FE F5 
       F1 E5 E0 E1 
       E2 E0 E0 00 
       F1 E0 E1 00 
       F2 F6 F8 FC 
       F8 F4 E0 E1 
       00 00 E0 00 
       00 E0 E1 E2 
       E1 E1 FC FE 
       FD F8 E0 E0 
       00 00 E0 00 
       00 E0 00 00 
       E1 E1 FD FE 
       FD F8 D0 E0 
       00 00 FA 00 
       00 E0 00 00 
       E0 E0 F1 FD 
       F8 F8 E0 D0 
       E5 00 DB CB 
       00 00 FB 00 
       00 E0 E0 E2 
       F5 F1 D1 D0 
       00 00 00 DF 
       00 EF CB DB 
       00 E5 E0 E2 
       F1 E0 D1 D0 
       00 00 DB CB 
       00 00 DF 00 
       00 00 E0 E2 
       00 00 D1 D1 
       00 00 00 D7 
       00 EF CB DB 
       00 00 E2 FB 
       00 00 E6 F3 
       00 00 00 C3 
       00 00 EB 00 
       00 00 F3 00 
       00 00 00 00 
       00 00 00 00 
0466C9             0016*M 
0466C9             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0466C9 17 1B 21    0018*M     db 23,27,0x21
0466CC 10 00       0019*M     dw width ; in pixels
0466CE 10 00       0020*M     dw height ; in pixels
0466D0 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0466D1             0121*  	LOADBMPBUFFER2 BUF_SHIP_0L,16,16,"../../tgt/sprites/ship_0l.rgba2"
0466D1             0001*M 
0466D1             0002*M     ; Clear buffer
0466D1 17 00 A0    0003*M     db 23,0,0xA0
0466D4 34 01       0004*M     dw bufferId
0466D6 02          0005*M     db 2
0466D7             0006*M 
0466D7 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0466DA 34 01       0008*M     dw bufferId
0466DC             0009*M 
0466DC             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0466DC 17 00 A0    0011*M     db 23,0,0xA0
0466DF 34 01       0012*M     dw bufferId
0466E1 00          0013*M     db 0
0466E2 00 01       0014*M 	dw width * height ; length of data in bytes
0466E4 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 C6 
       C7 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 C6 CA 
       CF C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 D4 E5 
       CF C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 D4 FD FE 
       E5 C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 D4 FD FE 
       E5 C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 D4 E5 
       CF C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 C7 C6 CA 
       CF C7 DB 00 
       00 00 00 00 
       00 00 C7 00 
       C7 CA C6 CA 
       CF C7 CF DB 
       00 00 C7 00 
       00 00 C7 00 
       CA CA C6 CA 
       CF C7 CF CF 
       DB 00 C7 00 
       00 00 C7 C7 
       CA C6 C6 CA 
       CF C7 C7 CF 
       CF DB C7 00 
       00 00 C7 CA 
       C6 C6 C6 CA 
       CF C7 C7 C7 
       CF CF C7 00 
       00 00 C7 CA 
       C6 CA C6 CA 
       CF C7 CF C7 
       C7 CF C7 00 
       00 00 C7 CA 
       C7 C7 C6 CA 
       CF C7 DB DB 
       C7 CF C7 00 
       00 00 C7 00 
       00 00 C6 00 
       00 C7 00 00 
       DB CF C7 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       DB DB C7 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 C7 00 
0467E4             0016*M 
0467E4             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0467E4 17 1B 21    0018*M     db 23,27,0x21
0467E7 10 00       0019*M     dw width ; in pixels
0467E9 10 00       0020*M     dw height ; in pixels
0467EB 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
0467EC             0122*  	LOADBMPBUFFER2 BUF_SHIP_1C,16,16,"../../tgt/sprites/ship_1c.rgba2"
0467EC             0001*M 
0467EC             0002*M     ; Clear buffer
0467EC 17 00 A0    0003*M     db 23,0,0xA0
0467EF 35 01       0004*M     dw bufferId
0467F1 02          0005*M     db 2
0467F2             0006*M 
0467F2 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0467F5 35 01       0008*M     dw bufferId
0467F7             0009*M 
0467F7             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0467F7 17 00 A0    0011*M     db 23,0,0xA0
0467FA 35 01       0012*M     dw bufferId
0467FC 00          0013*M     db 0
0467FD 00 01       0014*M 	dw width * height ; length of data in bytes
0467FF 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 DB 
       C7 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB CF 
       CF C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB E9 
       E5 C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 E9 FE 
       FE E5 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 E9 FE 
       FE E5 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB E9 
       E5 C7 00 00 
       00 00 00 00 
       00 00 00 00 
       00 DB DB CF 
       CF C7 DB 00 
       00 00 00 00 
       00 DB 00 00 
       DB CF DB CF 
       CF C7 CF DB 
       00 00 C7 00 
       00 DB 00 DB 
       CF CF DB CF 
       CF C7 CF CF 
       DB 00 C7 00 
       00 DB DB CF 
       CF C7 DB CF 
       CF C7 C7 CF 
       CF DB C7 00 
       00 DB CF CF 
       C7 C7 DB CF 
       CF C7 C7 C7 
       CF CF C7 00 
       00 DB CF C7 
       C7 CF DB CF 
       CF C7 CF C7 
       C7 CF C7 00 
       00 DB CF C7 
       DB DB DB CF 
       CF C7 DB DB 
       C7 CF C7 00 
       00 DB DB DB 
       00 00 DB 00 
       00 C7 00 00 
       DB DB C7 00 
       00 DB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 C7 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0468FF             0016*M 
0468FF             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
0468FF 17 1B 21    0018*M     db 23,27,0x21
046902 10 00       0019*M     dw width ; in pixels
046904 10 00       0020*M     dw height ; in pixels
046906 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046907             0123*  	LOADBMPBUFFER2 BUF_SHIP_2R,16,16,"../../tgt/sprites/ship_2r.rgba2"
046907             0001*M 
046907             0002*M     ; Clear buffer
046907 17 00 A0    0003*M     db 23,0,0xA0
04690A 36 01       0004*M     dw bufferId
04690C 02          0005*M     db 2
04690D             0006*M 
04690D 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046910 36 01       0008*M     dw bufferId
046912             0009*M 
046912             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
046912 17 00 A0    0011*M     db 23,0,0xA0
046915 36 01       0012*M     dw bufferId
046917 00          0013*M     db 0
046918 00 01       0014*M 	dw width * height ; length of data in bytes
04691A 00 00 00 00 0015*M     incbin file ; bitmap data
       00 00 00 DB 
       C6 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB CF 
       CF C6 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB CF 
       E5 D4 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB E5 
       FE FD D4 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB E5 
       FE FD D4 00 
       00 00 00 00 
       00 00 00 00 
       00 00 DB CF 
       E5 D4 00 00 
       00 00 00 00 
       00 00 00 00 
       00 DB DB CF 
       CF C6 C7 00 
       00 00 00 00 
       00 DB 00 00 
       DB CF DB CF 
       CF C6 CA C7 
       00 C6 00 00 
       00 DB 00 DB 
       CF CF DB CF 
       CF C6 CA CA 
       00 C6 00 00 
       00 DB DB CF 
       CF C7 DB CF 
       CF C6 C6 CA 
       C7 C6 00 00 
       00 DB CF CF 
       C7 C7 DB CF 
       CF C6 C6 C6 
       CA C6 00 00 
       00 DB CF C7 
       C7 CF DB CF 
       CF C6 CA C6 
       CA C6 00 00 
       00 DB CF C7 
       DB DB DB CF 
       CF C6 C7 C7 
       CA C6 00 00 
       00 DB CF DB 
       00 00 DB 00 
       00 C6 00 00 
       00 C6 00 00 
       00 DB DB DB 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A1A             0016*M 
046A1A             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046A1A 17 1B 21    0018*M     db 23,27,0x21
046A1D 10 00       0019*M     dw width ; in pixels
046A1F 10 00       0020*M     dw height ; in pixels
046A21 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046A22             0124*  	LOADBMPBUFFER2 BUF_SHIP_SMALL,8,8,"../../tgt/sprites/ship_small.rgba2"
046A22             0001*M 
046A22             0002*M     ; Clear buffer
046A22 17 00 A0    0003*M     db 23,0,0xA0
046A25 37 01       0004*M     dw bufferId
046A27 02          0005*M     db 2
046A28             0006*M 
046A28 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046A2B 37 01       0008*M     dw bufferId
046A2D             0009*M 
046A2D             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
046A2D 17 00 A0    0011*M     db 23,0,0xA0
046A30 37 01       0012*M     dw bufferId
046A32 00          0013*M     db 0
046A33 40 00       0014*M 	dw width * height ; length of data in bytes
046A35 00 00 00 CF 0015*M     incbin file ; bitmap data
       CA 00 00 00 
       00 00 00 FE 
       FC 00 00 00 
       00 00 00 FE 
       FC 00 00 00 
       CF 00 00 CF 
       CA 00 00 CA 
       CF 00 CF C7 
       C6 CF 00 CA 
       CF CF C7 CF 
       CA C6 CF CA 
       CF C7 CF CF 
       CA CF C6 CA 
       CF 00 00 00 
       00 00 00 CA 
046A75             0016*M 
046A75             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046A75 17 1B 21    0018*M     db 23,27,0x21
046A78 08 00       0019*M     dw width ; in pixels
046A7A 08 00       0020*M     dw height ; in pixels
046A7C 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046A7D             0125*  	LOADBMPBUFFER2 BUF_STAR,5,5,"../../tgt/sprites/star.rgba2"
046A7D             0001*M 
046A7D             0002*M     ; Clear buffer
046A7D 17 00 A0    0003*M     db 23,0,0xA0
046A80 38 01       0004*M     dw bufferId
046A82 02          0005*M     db 2
046A83             0006*M 
046A83 17 1B 20    0007*M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
046A86 38 01       0008*M     dw bufferId
046A88             0009*M 
046A88             0010*M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
046A88 17 00 A0    0011*M     db 23,0,0xA0
046A8B 38 01       0012*M     dw bufferId
046A8D 00          0013*M     db 0
046A8E 19 00       0014*M 	dw width * height ; length of data in bytes
046A90 00 00 D0 00 0015*M     incbin file ; bitmap data
       00 00 00 E6 
       00 00 D0 E6 
       FF E6 D0 00 
       00 E6 00 00 
       00 00 D0 00 
       00          
046AA9             0016*M 
046AA9             0017*M     ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
046AA9 17 1B 21    0018*M     db 23,27,0x21
046AAC 05 00       0019*M     dw width ; in pixels
046AAE 05 00       0020*M     dw height ; in pixels
046AB0 01          0021*M     db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
046AB1             0126*  	; LOADBMPBUFFER2 BUF_TURRET,16,16,"../../tgt/sprites/turret.rgba2"
046AB1             0127*  	; LOADBMPBUFFER2 BUF_TURRET_ROT,16,16,"../../tgt/sprites/turret_rot.rgba2"
046AB1             0128*  @end:
046AB1             0053   	include "images_ui.inc"
046AB1             0001*  ; Generated by make_images.py
046AB1             0002*  
046AB1             0003*  ui_num_images: equ 2
046AB1             0004*  
046AB1             0005*  ; buffer_ids:
046AB1             0006*  BUF_SPLASH_BG: equ 0
046AB1             0007*  BUF_SPLASH_LOGO: equ 1
046AB1             0008*  
046AB1             0009*  ui_image_list: ; type; width; height; filename; bufferId:
046AB1 01 00 00 40 0010*  	dl 1, 320, 240, 76800, fn_splash_bg, 0
       01 00 F0 00 
       00 00 2C 01 
       D5 6A 04 00 
       00 00       
046AC3 01 00 00 40 0011*  	dl 1, 320, 212, 67840, fn_splash_logo, 1
       01 00 D4 00 
       00 00 09 01 
       E8 6A 04 01 
       00 00       
046AD5             0012*  
046AD5             0013*  ; files_list: ; filename:
046AD5 75 69 2F 73 0014*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
046AE8 75 69 2F 73 0015*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046AFD             0054   	include "player.inc"
046AFD             0001*  ; ######## PLAYER CONSTANTS ########
046AFD             0002*  speed_player: equ 0x000300 ; 3 pixels per frame
046AFD             0003*  
046AFD             0004*  ; ######## GAME STATE VARIABLES #######
046AFD             0005*  ; THESE MUST BE IN THIS ORDER FOR new_game TO WORK PROPERLY
046AFD 00 00 00    0006*  player_score: db 0x00,#00,#00 ; bcd
046B00             0007*  ; player current shields,binary
046B00             0008*  ; when < 0 player splodes
046B00             0009*  ; restores to player_max_shields when new ship spawns
046B00 10          0010*  player_shields: db 16 ; binary
046B01             0011*  ; max player shields,binary
046B01             0012*  ; can increase with power-ups (todo)
046B01 10          0013*  player_max_shields: db 16 ; binary
046B02             0014*  ; when reaches zero,game ends
046B02             0015*  ; can increase based on TODO
046B02 03          0016*  player_ships: db 0x03 ; binary
046B03             0017*  
046B03             0018*  ; ######### PLAYER SPRITE PARAMETERS ##########
046B03             0019*  ; uses the same offsets from its table base as the main sprite table:
046B03             0020*  player_start_variables: ; label marking beginning of table
046B03 10          0021*  player_id:               db table_max_records
046B04 00          0022*  player_type:             db     0x00 ; 1 bytes currently not used
046B05 34 01 00    0023*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
046B08 00 00 00    0024*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
046B0B 00          0025*  player_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
046B0C 00          0026*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
046B0D 00          0027*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
046B0E 00 00 00    0028*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
046B11 00 00 00    0029*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
046B14 00 00 00    0030*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
046B17 00 00 00    0031*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
046B1A 00 00 00    0032*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
046B1D 00 00 00    0033*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
046B20 00 00 00    0034*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
046B23 00          0035*  player_animation:        db     0x00 ; 1 bytes not currently used
046B24 00          0036*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
046B25 00          0037*  player_move_timer:       db     0x00 ; 1 bytes not currently used
046B26 00          0038*  player_move_step:        db     0x00 ; 1 bytes not currently used
046B27 00          0039*  player_points:           db     0x00 ; 1 bytes not currently used
046B28 00          0040*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
046B29             0041*  player_end_variables: ; for when we want to traverse this table in reverse
046B29             0042*  
046B29             0043*  
046B29             0044*  ; set initial player position
046B29             0045*  ; inputs: none,everything is hardcoded
046B29             0046*  ; outputs: player_x/y set to bottom-left corner of screen
046B29             0047*  ; destroys: a
046B29             0048*  player_init:
046B29 3E 10       0049*  	ld a,table_max_records ; this is always player spriteId
046B2B CD CA 0E 04 0050*  	call vdu_sprite_select
046B2F CD DD 0E 04 0051*      call vdu_sprite_clear_frames
046B33 21 34 01 00 0052*      ld hl,BUF_SHIP_0L
046B37 CD 17 10 04 0053*      call vdu_sprite_add_buff
046B3B 21 35 01 00 0054*      ld hl,BUF_SHIP_1C
046B3F CD 17 10 04 0055*      call vdu_sprite_add_buff
046B43 21 36 01 00 0056*      ld hl,BUF_SHIP_2R
046B47 CD 17 10 04 0057*      call vdu_sprite_add_buff
046B4B 01 00 00 00 0058*      ld bc,0
046B4F ED 43 0E 6B 0059*      ld (player_x),bc
       04          
046B54 11 00 DF 00 0060*      ld de,0x00DF00
046B58 ED 53 11 6B 0061*      ld (player_y),de
       04          
046B5D CD 96 0F 04 0062*      call vdu_sprite_move_abs168
046B61 CD 40 0F 04 0063*      call vdu_sprite_show
046B65 C9          0064*      ret
046B66             0065*  
046B66             0066*  ; process player keyboard input, set player bitmap
046B66             0067*  ; velocities and draw player bitmap at updated coordinates
046B66             0068*  ; Inputs: player_x/y set at desired position
046B66             0069*  ; Returns: player bitmap drawn at updated position
046B66             0070*  ; Destroys: probably everything except maybe iy
046B66             0071*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
046B66             0072*  ; TODO: requires sprite implementation
046B66             0073*  player_input:
046B66             0074*  ; reset player component velocities to zero as the default
046B66 21 00 00 00 0075*  	ld hl,0
046B6A 22 14 6B 04 0076*  	ld (player_xvel),hl
046B6E 22 17 6B 04 0077*  	ld (player_yvel),hl
046B72             0078*  ; make ship the active sprite
046B72 3A 03 6B 04 0079*      ld a,(player_id)
046B76 CD CA 0E 04 0080*      call vdu_sprite_select
046B7A             0081*  ; check for keypresses and branch accordingly
046B7A             0082*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
046B7A             0083*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
046B7A 3E 1E       0001*M 			LD	A, function
046B7C 49 CF       0002*M 			RST.LIS	08h
046B7E             0084*  ; we test all four arrow keys and add/subract velocities accordingly
046B7E             0085*  ; this handles the case where two opposing movement keys
046B7E             0086*  ; are down simultaneously (velocities will net to zero)
046B7E             0087*  ; and allows diagonal movement when a vertical and horizontal key are down
046B7E             0088*  ; it also allows movement and action keys to be detected simultaneously
046B7E             0089*  ; so we can walk and chew gum at the same time
046B7E 3E 01       0090*      ld a,1 ; set ship's default animation to center
046B80             0091*          ; if left and right are both down a will net to
046B80             0092*  
046B80             0093*  @left:
046B80 DD CB 03 4E 0094*      bit 1,(ix+3) ; keycode 26
046B84 28 0E       0095*      jr z,@right
046B86 2A 14 6B 04 0096*      ld hl,(player_xvel)
046B8A 01 00 FD FF 0097*      ld bc,-speed_player
046B8E 09          0098*      add hl,bc
046B8F 22 14 6B 04 0099*      ld (player_xvel),hl
046B93 3D          0100*      dec a ; set ship's animation to left
046B94             0101*  @right:
046B94 DD CB 0F 4E 0102*      bit 1,(ix+15) ; keycode 122
046B98 28 0E       0103*  	jr z,@up
046B9A 2A 14 6B 04 0104*      ld hl,(player_xvel)
046B9E 01 00 03 00 0105*      ld bc,speed_player
046BA2 09          0106*      add hl,bc
046BA3 22 14 6B 04 0107*      ld (player_xvel),hl
046BA7 3C          0108*      inc a ; set ship's animation to right
046BA8             0109*  @up:
046BA8 DD CB 07 4E 0110*      bit 1,(ix+7) ; keycode 58
046BAC 28 0D       0111*  	jr z,@down
046BAE 2A 17 6B 04 0112*      ld hl,(player_yvel)
046BB2 01 00 FD FF 0113*      ld bc,-speed_player
046BB6 09          0114*      add hl,bc
046BB7 22 17 6B 04 0115*      ld (player_yvel),hl
046BBB             0116*  @down:
046BBB DD CB 05 4E 0117*      bit 1,(ix+5) ; keycode 42
046BBF 28 0D       0118*  	jr z,@done_keyboard
046BC1 2A 17 6B 04 0119*      ld hl,(player_yvel)
046BC5 01 00 03 00 0120*      ld bc,speed_player
046BC9 09          0121*      add hl,bc
046BCA 22 17 6B 04 0122*      ld (player_yvel),hl
046BCE             0123*  @done_keyboard:
046BCE             0124*  ; move player sprite according to velocities set by keypresses
046BCE 2A 14 6B 04 0125*      ld hl,(player_xvel)
046BD2             0126*  ; compute new x position
046BD2 ED 5B 0E 6B 0127*      ld de,(player_x)
       04          
046BD7 19          0128*      add hl,de ; hl = player_x + player_xvel
046BD8             0129*      ; check for horizontal screen edge collisions
046BD8             0130*      ; and adjust coordinate as necessary
046BD8             0131*  ; TODO: make this work using 24-bit registers
046BD8             0132*      ; cp 8 ; 0 + 1/2 bitmap dim_x
046BD8             0133*      ; jr nc,@check_right ; x >= 8, no adjustment necessary
046BD8             0134*      ; ld a,8 ; set x to leftmost allowable position
046BD8             0135*  ; @check_right:
046BD8             0136*  ;     cp 248 ; 256 - 1/2 bitmap dim_x
046BD8             0137*  ;     jr c,@x_ok ; x < 248, no adjustment necessary
046BD8             0138*  ;     ld a,248 ; set x to rightmost allowable position
046BD8             0139*  @x_ok:
046BD8             0140*  ; save the updated drawing coordinate
046BD8 22 0E 6B 04 0141*      ld (player_x),hl
046BDC             0142*  ;compute new y position
046BDC 2A 11 6B 04 0143*      ld hl,(player_y)
046BE0 ED 5B 17 6B 0144*      ld de,(player_yvel)
       04          
046BE5 19          0145*      add hl,de ; hl = player_y + player_yvel
046BE6             0146*  ; TODO: make this work using 24-bit registers
046BE6             0147*  ;     ; check for vertical screen edge collisions
046BE6             0148*  ;     ; and adjust coordinate as necessary
046BE6             0149*  ;     cp 8 ; 0 + 1/2 bitmap dim_y
046BE6             0150*  ;     jr nc,@check_top ; y >= 8, no adjustment necessary
046BE6             0151*  ;     ld a,8 ; set y to topmost allowable position
046BE6             0152*  ; @check_top:
046BE6             0153*  ;     cp 232 ; 240 - 1/2 bitmap dim_y
046BE6             0154*  ;     jr c,@y_ok ; y < 248, no adjustment necessary
046BE6             0155*  ;     ld a,232 ; set y to bottommost allowable position
046BE6             0156*  @y_ok:
046BE6 22 11 6B 04 0157*      ld (player_y),hl ; do this here b/c next call destroys hl
046BEA             0158*  ; a should land here loaded with the correct frame
046BEA CD 2D 0F 04 0159*      call vdu_sprite_select_frame
046BEE             0160*  ; draw player at updated position
046BEE ED 4B 0E 6B 0161*      ld bc,(player_x)
       04          
046BF3 ED 5B 11 6B 0162*  	ld de,(player_y)
       04          
046BF8             0163*  
046BF8             0164*      ; call dumpRegistersHex
046BF8             0165*  
046BF8 CD 96 0F 04 0166*  	call vdu_sprite_move_abs168
046BFC             0167*  
046BFC             0168*  ; end player_input
046BFC C9          0169*  	ret
046BFD             0170*  
046BFD             0171*  ; ; THE BELOW WORKS WITH THE AGON BUT USES INTEGER COORDINATES
046BFD             0172*  ; ; INSTEAD OF FRACTIONAL
046BFD             0173*  ; ; ----------------------------------------------------------------
046BFD             0174*  ; ; process player keyboard input, set player bitmap
046BFD             0175*  ; ; velocities and draw player bitmap at updated coordinates
046BFD             0176*  ; ; Inputs: player_x/y set at desired position
046BFD             0177*  ; ; Returns: player bitmap drawn at updated position
046BFD             0178*  ; ; Destroys: probably everything except maybe iy
046BFD             0179*  ; ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
046BFD             0180*  ; ; TODO: requires sprite implementation
046BFD             0181*  ; player_input:
046BFD             0182*  ; ; reset player component velocities to zero as the default
046BFD             0183*  ; 	ld hl,0
046BFD             0184*  ; 	ld (player_xvel),hl
046BFD             0185*  ; 	ld (player_yvel),hl
046BFD             0186*  ; ; check for keypresses and branch accordingly
046BFD             0187*  ; ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
046BFD             0188*  ;     MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
046BFD             0189*  ; ; we test all four arrow keys and add/subract velocities accordingly
046BFD             0190*  ; ; this handles the case where two opposing movement keys
046BFD             0191*  ; ; are down simultaneously (velocities will net to zero)
046BFD             0192*  ; ; and allows diagonal movement when a vertical and horizontal key are down
046BFD             0193*  ; ; it also allows movement and action keys to be detected simultaneously
046BFD             0194*  ; ; so we can walk and chew gum at the same time
046BFD             0195*  ; @left:
046BFD             0196*  ;     bit 1,(ix+3) ; keycode 26
046BFD             0197*  ;     jr z,@right
046BFD             0198*  ;     ld hl,(player_xvel)
046BFD             0199*  ;     ld bc,-3
046BFD             0200*  ;     add hl,bc
046BFD             0201*  ;     ld (player_xvel),hl
046BFD             0202*  ; @right:
046BFD             0203*  ;     bit 1,(ix+15) ; keycode 122
046BFD             0204*  ; 	jr z,@up
046BFD             0205*  ;     ld hl,(player_xvel)
046BFD             0206*  ;     ld bc,3
046BFD             0207*  ;     add hl,bc
046BFD             0208*  ;     ld (player_xvel),hl
046BFD             0209*  ; @up:
046BFD             0210*  ;     bit 1,(ix+7) ; keycode 58
046BFD             0211*  ; 	jr z,@down
046BFD             0212*  ;     ld hl,(player_yvel)
046BFD             0213*  ;     ld bc,-3
046BFD             0214*  ;     add hl,bc
046BFD             0215*  ;     ld (player_yvel),hl
046BFD             0216*  ; @down:
046BFD             0217*  ;     bit 1,(ix+5) ; keycode 42
046BFD             0218*  ; 	jr z,@done_keyboard
046BFD             0219*  ;     ld hl,(player_yvel)
046BFD             0220*  ;     ld bc,3
046BFD             0221*  ;     add hl,bc
046BFD             0222*  ;     ld (player_yvel),hl
046BFD             0223*  ; @done_keyboard:
046BFD             0224*  ; ; move player sprite according to velocities set by keypresses
046BFD             0225*  ;     ld hl,(player_xvel)
046BFD             0226*  ; ; compute new x position
046BFD             0227*  ;     ld de,(player_x)
046BFD             0228*  ;     add hl,de ; hl = player_x + player_xvel
046BFD             0229*  ;     ; check for horizontal screen edge collisions
046BFD             0230*  ;     ; and adjust coordinate as necessary
046BFD             0231*  ; ; TODO: make this work using 24-bit registers
046BFD             0232*  ;     ; cp 8 ; 0 + 1/2 bitmap dim_x
046BFD             0233*  ;     ; jr nc,@check_right ; x >= 8, no adjustment necessary
046BFD             0234*  ;     ; ld a,8 ; set x to leftmost allowable position
046BFD             0235*  ; ; @check_right:
046BFD             0236*  ; ;     cp 248 ; 256 - 1/2 bitmap dim_x
046BFD             0237*  ; ;     jr c,@x_ok ; x < 248, no adjustment necessary
046BFD             0238*  ; ;     ld a,248 ; set x to rightmost allowable position
046BFD             0239*  ; @x_ok:
046BFD             0240*  ;     ; save the updated drawing coordinate
046BFD             0241*  ;     ld (player_x),hl
046BFD             0242*  ; ;compute new y position
046BFD             0243*  ;     ld hl,(player_y)
046BFD             0244*  ;     ld de,(player_yvel)
046BFD             0245*  ;     add hl,de ; hl = player_y + player_yvel
046BFD             0246*  ; ; TODO: make this work using 24-bit registers
046BFD             0247*  ; ;     ; check for vertical screen edge collisions
046BFD             0248*  ; ;     ; and adjust coordinate as necessary
046BFD             0249*  ; ;     cp 8 ; 0 + 1/2 bitmap dim_y
046BFD             0250*  ; ;     jr nc,@check_top ; y >= 8, no adjustment necessary
046BFD             0251*  ; ;     ld a,8 ; set y to topmost allowable position
046BFD             0252*  ; ; @check_top:
046BFD             0253*  ; ;     cp 232 ; 240 - 1/2 bitmap dim_y
046BFD             0254*  ; ;     jr c,@y_ok ; y < 248, no adjustment necessary
046BFD             0255*  ; ;     ld a,232 ; set y to bottommost allowable position
046BFD             0256*  ; @y_ok:
046BFD             0257*  ;     ld (player_y),hl
046BFD             0258*  ; ; draw player at updated position
046BFD             0259*  ;     ld a,(player_id)
046BFD             0260*  ;     call vdu_sprite_select
046BFD             0261*  ;     ld hl,(player_xvel) ; we do a cheeky little hack
046BFD             0262*  ;     call get_sign_hlu ; to set the proper animation
046BFD             0263*  ;     add a,1 ; ...
046BFD             0264*  ;     call vdu_sprite_select_frame
046BFD             0265*  ;     ld bc,(player_x)
046BFD             0266*  ; 	ld de,(player_y)
046BFD             0267*  ; 	call vdu_sprite_move_abs
046BFD             0268*  ; ; end player_input
046BFD             0269*  ; 	ret
046BFD             0270*  
046BFD             0271*  
046BFD             0272*  ; ###################################################################
046BFD             0273*  ; TODO: the below is all stuff from the original code we need to port
046BFD             0274*  ; ###################################################################
046BFD             0275*  
046BFD             0276*  ; kill_player:
046BFD             0277*  ; ; set player status to dead
046BFD             0278*  ;     xor a; sets all player flags to zero
046BFD             0279*  ;     ld (player_collisions),a
046BFD             0280*  ; ; deduct a ship from the inventory
046BFD             0281*  ;     ld a,(player_ships)
046BFD             0282*  ;     dec a
046BFD             0283*  ;     ld (player_ships),a
046BFD             0284*  ; ; are we out of ships?
046BFD             0285*  ;     jp z,game_over
046BFD             0286*  ; ; wait a few ticks
046BFD             0287*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
046BFD             0288*  ;     ld (player_move_timer),a
046BFD             0289*  ; kill_player_loop:
046BFD             0290*  ;     call vdu_vblank
046BFD             0291*  ;     ld a,(player_move_timer)
046BFD             0292*  ;     dec a
046BFD             0293*  ;     ld (player_move_timer),a
046BFD             0294*  ;     jr nz,kill_player_loop
046BFD             0295*  ;     call player_init ; player respawn if timer zero
046BFD             0296*  ;     ret ; and out
046BFD             0297*  
046BFD             0298*  
046BFD             0299*  ; player_move:
046BFD             0300*  ; ; begin setting player to active sprite
046BFD             0301*  ;     ld hl,player
046BFD             0302*  ;     ld (sprite_base_bufferId),hl
046BFD             0303*  ;     ld hl,0 ; north
046BFD             0304*  ;     ld (sprite_heading),hl
046BFD             0305*  ;     ld a,#01 ; animation 1 is center,which we set here as a default
046BFD             0306*  ;     ld (sprite_animation),a
046BFD             0307*  ;     ; we set position here for the time being as a default
046BFD             0308*  ;     ; in case the player doesn't move,or is flagged for deletion
046BFD             0309*  ;     ld hl,(player_x)
046BFD             0310*  ;     ld (sprite_x),hl
046BFD             0311*  ;     ld hl,(player_y)
046BFD             0312*  ;     ld (sprite_y),hl
046BFD             0313*  ; ; did we just die?
046BFD             0314*  ;     ld a,(player_collisions)
046BFD             0315*  ;     and %00000010 ; zero flag will be set if not dead
046BFD             0316*  ;     jr z,player_not_dead
046BFD             0317*  ; ; yes we died
046BFD             0318*  ;     call kill_player
046BFD             0319*  ;     ret ; done
046BFD             0320*  ; ; yay we didn't die
046BFD             0321*  ; player_not_dead:
046BFD             0322*  ; ; set player movements to zero by default
046BFD             0323*  ;     ld hl,0
046BFD             0324*  ;     ld (player_xvel),hl
046BFD             0325*  ;     ld (player_yvel),hl
046BFD             0326*  ; ; do we move it?
046BFD             0327*  ;     in a,(#82) ; keyboard
046BFD             0328*  ;     or a ; if zero,don't move
046BFD             0329*  ;     jr z,player_draw
046BFD             0330*  ; ; move it
046BFD             0331*  ;     call player_move_calc
046BFD             0332*  ; player_draw:
046BFD             0333*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
046BFD             0334*  ;     call vdu_bmp_draw ; TODO: convert to vdu_bmp_plot
046BFD             0335*  ; player_move_done:
046BFD             0336*  ;     ; write updated x,y coordinates back to player table
046BFD             0337*  ;     ld hl,(sprite_x)
046BFD             0338*  ;     ld (player_x),hl
046BFD             0339*  ;     ld hl,(sprite_y)
046BFD             0340*  ;     ld (player_y),hl
046BFD             0341*  ;     ret
046BFD             0055   	include "laser.inc"
046BFD             0001*  ; ##### LASER SPRITE PARAMETERS #####
046BFD             0002*  ; uses the same offsets from its table base as the main sprite table:
046BFD             0003*  laser_start_variables: ; label marking beginning of table
046BFD 0F          0004*  laser_id:               db table_max_records-1
046BFE 00          0005*  laser_type:             db     0x00 ; 1 bytes currently not used
046BFF 11 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
046C02 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
046C05 00          0008*  laser_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
046C06 00          0009*  laser_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
046C07 00          0010*  laser_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
046C08 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
046C0B 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
046C0E 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
046C11 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
046C14 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
046C17 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
046C1A 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
046C1D 00          0018*  laser_animation:        db     0x00 ; 1 bytes current sprite animation frame
046C1E 00          0019*  laser_animation_timer:  db     0x00 ; 1 bytes decremented every frame, when zero, advance animation
046C1F 00          0020*  laser_move_timer:       db     0x00 ; 1 bytes not currently used
046C20 00          0021*  laser_move_step:        db     0x00 ; 1 bytes not currently used
046C21 00          0022*  laser_points:           db     0x00 ; 1 bytes not currently used
046C22 00          0023*  laser_shield_damage:    db     0x00 ; 1 bytes not currently used
046C23             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
046C23             0025*  
046C23             0026*  ; laser_control:
046C23             0027*  ; ; is laser already active?
046C23             0028*  ;     ld a,(laser_collisions)
046C23             0029*  ;     and %00000001 ; bit zero is lit if laser is active
046C23             0030*  ;     jr nz,laser_move ; move laser if not zero
046C23             0031*  ; ; otherwise check if laser fired
046C23             0032*  ;     in a,(#82) ; keyboard
046C23             0033*  ;     and %00010000 ; bit 4 is lit if space bar pressed
046C23             0034*  ;     ret z ; go back if laser not fired
046C23             0035*  ; ; otherwise,FIRE ZEE LASER!!1111
046C23             0036*  ; ; set laser status to active (set bit 0)
046C23             0037*  ;     ld a,%1
046C23             0038*  ;     ld (laser_collisions),a
046C23             0039*  ; ; initialize laser position
046C23             0040*  ;     ld a,(player_x+1) ; we only need the integer part
046C23             0041*  ;     ; add a,6 ; horizontal center with player sprite
046C23             0042*  ;     ld (laser_x+1),a ; store laser x coordinate
046C23             0043*  ;     ld a,(player_y+1) ; we only need the integer part
046C23             0044*  ;     add a,-6 ; set laser y a few pixels above player
046C23             0045*  ;     ld (laser_y+1),a ; store laser y coordinate
046C23             0046*  ;     ; fall through to laser_move
046C23             0047*  
046C23             0048*  ; laser_move:
046C23             0049*  ; ; begin setting laser to active sprite
046C23             0050*  ;     ld hl,lasers
046C23             0051*  ;     ld (sprite_base_bufferId),hl
046C23             0052*  ;     ld hl,0 ; north
046C23             0053*  ;     ld (sprite_heading),hl
046C23             0054*  ;     xor a ; laser has no animations yet :-(
046C23             0055*  ;     ld (sprite_animation),a
046C23             0056*  ;     ; we set position here for the time being as a default
046C23             0057*  ;     ; in case the laser is flagged for deletion
046C23             0058*  ;     ; load sprite_x with laser x position (we do y further down)
046C23             0059*  ;     ld hl,(laser_x)
046C23             0060*  ;     ld (sprite_x),hl
046C23             0061*  ; ; did laser just die?
046C23             0062*  ;     ld a,(laser_collisions)
046C23             0063*  ;     bit 1,a ; z if laser didn't just die
046C23             0064*  ;     jr z,laser_not_dead_yet
046C23             0065*  ; ; yes laser died
046C23             0066*  ;     call kill_laser
046C23             0067*  ;     ret ; done
046C23             0068*  ; laser_not_dead_yet:
046C23             0069*  ; ; draw it
046C23             0070*  ; ; update laser y position
046C23             0071*  ;     ld hl,(laser_y) ; grab laser y position
046C23             0072*  ;     ld de,(laser_yvel) ; snag laser y velocity
046C23             0073*  ;     add hl,de ; add y velocity to y pos
046C23             0074*  ;     ld (sprite_y),hl ; update laser y position
046C23             0075*  ;     ld (laser_y),hl ; update laser y position
046C23             0076*  ; ; are we at top of screen?
046C23             0077*  ;     ld a,#51 ; top of visible screen plus a pixel
046C23             0078*  ;     sub h ; no carry if above threshold
046C23             0079*  ;     jr c,finally_draw_the_frikken_laser
046C23             0080*  ;     ; if at top of screen,laser dies
046C23             0081*  ;     call kill_laser
046C23             0082*  ;     ret
046C23             0083*  ; ; otherwise,finally draw the frikken laser
046C23             0084*  ; finally_draw_the_frikken_laser:
046C23             0085*  ;     call vdu_bmp_select
046C23             0086*  ;     call vdu_bmp_draw
046C23             0087*  ; ; all done
046C23             0088*  ;     ret
046C23             0089*  
046C23             0090*  ; kill_laser:
046C23             0091*  ; ; update status to inactive
046C23             0092*  ;     xor a ; zero out a
046C23             0093*  ;     ld (laser_collisions),a
046C23             0094*  ;     ret
046C23             0056   	include "sprites.inc"
046C23             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
046C23             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
046C23             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
046C23             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
046C23             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
046C23             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
046C23             0007*  sprite_collisions:      equ 08 ; 1 bytes low/high nibble: collision details
046C23             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
046C23             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
046C23             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
046C23             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
046C23             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
046C23             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
046C23             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
046C23             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
046C23             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
046C23             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
046C23             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
046C23             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
046C23             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
046C23             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type, BCD
046C23             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision, binary
046C23             0023*  
046C23             0024*  ; ###### SPRITE TABLE VARIABLES ######
046C23             0025*  ; maximum number of sprites
046C23             0026*  table_max_records: equ 16 ; this is about the limit for number of seekers. with turrets and landing pads ... remains to be seen
046C23             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
046C23             0028*  
046C23             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
046C23             0030*  table_base:
046C23 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046E83             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
046E83             0033*  
046E83             0034*  ; pointer to top address of current record, initialized to table_base
046E83 23 6C 04    0035*  table_pointer: dl table_base
046E86             0036*  ; how many active sprites
046E86 00          0037*  table_active_sprites: db 0x00
046E87             0038*  ; flag indicating collision with screen edge
046E87             0039*  ; uses orientation codes to specify which edge(s)
046E87 00          0040*  sprite_screen_edge: db #00
046E88             0041*  ; next sprite id to use
046E88 00          0042*  sprite_next_id: db 0
046E89             0043*  
046E89             0044*  ; ######### COLLISION SPRITE PARAMETERS ##########
046E89             0045*  ; integer coordinates are all that are needed for collision calculations
046E89 00          0046*  collision_x: db 0x00
046E8A 00          0047*  collision_y: db 0x00
046E8B 00          0048*  collision_dim_x: db 0x00
046E8C 00          0049*  collision_dim_y: db 0x00
046E8D             0050*  
046E8D             0051*  ; scratch variables
046E8D 00          0052*  x: db 0x00 ; 8-bit signed integer
046E8E 00          0053*  y: db 0x00 ; 8-bit signed integer
046E8F 00 00 00    0054*  x0: dl 0x000000 ; 16.8 signed fixed place
046E92 00 00 00    0055*  y0: dl 0x000000 ; 16.8 signed fixed place
046E95 00 00 00    0056*  incx1: dl 0x000000 ; 16.8 signed fixed place
046E98 00 00 00    0057*  incy1: dl 0x000000 ; 16.8 signed fixed place
046E9B 00 00 00    0058*  incx2: dl 0x000000 ; 16.8 signed fixed place
046E9E 00 00 00    0059*  incy2: dl 0x000000 ; 16.8 signed fixed place
046EA1             0060*  
046EA1             0061*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
046EA1 00 00 00    0062*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
046EA4 00 00 00    0063*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
046EA7 00 00 00    0064*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
046EAA             0065*  
046EAA             0066*  ; gets the next available sprite id
046EAA             0067*  ; inputs; none
046EAA             0068*  ; returns: if new sprite available, a = sprite id,
046EAA             0069*  ;           ix pointing to new sprite vars, carry set
046EAA             0070*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046EAA             0071*  ; destroys: a,b,hl,ix
046EAA             0072*  ; affects: bumps table_active_sprites by one
046EAA             0073*  table_get_next_id:
046EAA DD 21 23 6C 0074*      ld ix,table_base
       04          
046EAF 11 26 00 00 0075*      ld de,table_bytes_per_record
046EB3 06 10       0076*      ld b,table_max_records
046EB5             0077*  @loop:
046EB5 DD 7E 01    0078*      ld a,(ix+sprite_type)
046EB8 A7          0079*      and a
046EB9 28 06       0080*      jr z,@found
046EBB DD 19       0081*      add ix,de
046EBD 10 F6       0082*      djnz @loop
046EBF             0083*  @notfound:
046EBF AF          0084*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
046EC0 C9          0085*      ret
046EC1             0086*  @found:
046EC1             0087*  ; bump number of active sprites
046EC1 21 86 6E 04 0088*      ld hl,table_active_sprites
046EC5 34          0089*      inc (hl)
046EC6             0090*  ; return sprite id
046EC6 3E 10       0091*      ld a,table_max_records
046EC8 90          0092*      sub b
046EC9 32 88 6E 04 0093*      ld (sprite_next_id),a
046ECD 37          0094*      scf ; sets carry flag indicating we found a free sprite
046ECE C9          0095*      ret ; done
046ECF             0096*  
046ECF             0097*  ; deactivate the sprite with the given id
046ECF             0098*  ; inputs: a = sprite id
046ECF             0099*  ; outputs: nothing
046ECF             0100*  ; destroys: a,ix,de
046ECF             0101*  ; affects: decrements table_active_sprites by one
046ECF             0102*  table_deactivate_sprite:
046ECF F5          0103*      push af ; save sprite id bc we need it later
046ED0 CD CA 0E 04 0104*      call vdu_sprite_select
046ED4 CD 4E 0F 04 0105*      call vdu_sprite_hide
046ED8 F1          0106*      pop af ; restore sprite id
046ED9 11 00 00 00 0107*      ld de,0 ; clear deu
046EDD 57          0108*      ld d,a
046EDE 1E 26       0109*      ld e,table_bytes_per_record
046EE0 ED 5C       0110*      mlt de
046EE2 DD 21 23 6C 0111*      ld ix,table_base
       04          
046EE7 DD 19       0112*      add ix,de
046EE9 AF          0113*      xor a
046EEA DD 77 01    0114*      ld (ix+sprite_type),a
046EED DD 21 86 6E 0115*      ld ix,table_active_sprites
       04          
046EF2 DD 35 00    0116*      dec (ix)
046EF5 C9          0117*      ret
046EF6             0057   	include "tiles.inc"
046EF6             0001*  ; ######### TILES #########
046EF6             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
046EF6             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
046EF6 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046EF9 00          0005*  tiles_row: db 0 ; decrements each time a row is drawn. level is over when hits zero
046EFA             0006*                          ; initialize to zero for a maximum of 256 rows in a level
046EFA 00          0007*  cur_level: db 0
046EFB             0008*  num_levels: equ 2 ; number of levels,duh
046EFB             0009*  
046EFB             0010*  ; lookup table for level definitions
046EFB BC 6F 04 BD 0011*  tiles_levels: dl tiles_level_00,tiles_level_01
       7F 04       
046F01             0012*  
046F01             0013*  ; tiles_bufferId: dl 0
046F01 00 00 00    0014*  tiles_x_plot: dl 0
046F04 F1 FF FF    0015*  tiles_y_plot: dl -15
046F07             0016*  
046F07             0017*  
046F07             0018*  tiles_plot:
046F07             0019*  ; ; NOTE: this is bugged. y1 should be zero to get a 1px-tall viewport
046F07             0020*  ; ;       as written it gves a 2px-tall window which is what we'd expect,
046F07             0021*  ; ;       but don't want
046F07             0022*  ; ; https://discord.com/channels/1158535358624039014/1158536809916149831/1209571014514712637
046F07             0023*  ; ; set gfx viewport to one scanline to optimise plotting tiles
046F07             0024*  ; 	ld bc,0 ; leftmost x-coord
046F07             0025*  ; 	ld de,0 ; topmost y-coord
046F07             0026*  ; 	ld ix,255 ; rightmost x-coord
046F07             0027*  ; 	ld iy,1 ; bottommost y-coord
046F07             0028*  ; 	call vdu_set_gfx_viewport
046F07             0029*  
046F07 21 00 00 00 0030*      ld hl,0 ; init plotting x-coordinate
046F0B 22 01 6F 04 0031*      ld (tiles_x_plot),hl
046F0F 2A F6 6E 04 0032*      ld hl,(tiles_row_defs)
046F13 06 10       0033*  	ld b,16 ; loop counter
046F15             0034*  @loop:
046F15 C5          0035*  	push bc ; save the loop counter
046F16             0036*  ; read the tile defintion for the current column
046F16 7E          0037*      ld a,(hl) ; a has tile definition
046F17 E5          0038*      push hl  ; save pointer to tile definition
046F18 21 00 00 00 0039*      ld hl,0 ; hlu is non-zero
046F1C 6F          0040*      ld l,a ; l is tile defintion
046F1D 26 01       0041*      ld h,0x01 ; hl = 256 + tile index = the tile's bitmapId
046F1F CD 85 09 04 0042*      call vdu_buff_select ; tile bitmap buffer is now active
046F23             0043*  
046F23             0044*  ; plot the active bitmap
046F23 ED 4B 01 6F 0045*      ld bc,(tiles_x_plot)
       04          
046F28 ED 5B 04 6F 0046*      ld de,(tiles_y_plot)
       04          
046F2D CD 6D 0C 04 0047*      call vdu_plot_bmp
046F31             0048*  
046F31             0049*  ; bump x-coords the width of one tile and save it
046F31 2A 01 6F 04 0050*      ld hl,(tiles_x_plot)
046F35 01 10 00 00 0051*      ld bc,16
046F39 09          0052*      add hl,bc
046F3A 22 01 6F 04 0053*      ld (tiles_x_plot),hl
046F3E             0054*  
046F3E             0055*  ; prepare to loop to next column
046F3E E1          0056*      pop hl ; get back pointer to tile def
046F3F 23          0057*      inc hl ; bump it to the next column
046F40 C1          0058*  	pop bc ; snag our loop counter
046F41 10 D2       0059*      djnz @loop
046F43             0060*  
046F43             0061*  ; increment tiles plotting y-coordinate
046F43             0062*  ; when it hits zero, we go to next row of tiles in the map
046F43             0063*  ; (we use ix b/c we want to preserve hl for the next step)
046F43 DD 21 04 6F 0064*  	ld ix,tiles_y_plot
       04          
046F48 DD 34 00    0065*  	inc (ix)
046F4B C0          0066*  	ret nz
046F4C             0067*  
046F4C             0068*  ; time to bump tiles_row_defs to next row
046F4C             0069*  ; (hl was already there at the end of the loop)
046F4C 22 F6 6E 04 0070*      ld (tiles_row_defs),hl
046F50             0071*  
046F50             0072*  ; reset coords to plot next row of tiles
046F50 21 00 00 00 0073*      ld hl,0
046F54 22 01 6F 04 0074*      ld (tiles_x_plot),hl
046F58 21 F1 FF FF 0075*      ld hl,-15
046F5C 22 04 6F 04 0076*      ld (tiles_y_plot),hl
046F60             0077*  
046F60             0078*  ; decrement tiles row counter
046F60 21 F9 6E 04 0079*      ld hl,tiles_row
046F64 35          0080*      dec (hl)
046F65 C0          0081*      ret nz
046F66             0082*  
046F66             0083*  ; queue up next level
046F66 3A FA 6E 04 0084*      ld a,(cur_level)
046F6A FE 01       0085*      cp num_levels-1
046F6C 20 02       0086*      jr nz,@inc_level
046F6E 3E FF       0087*      ld a,-1 ; will wrap around to zero when we fall through
046F70             0088*  
046F70             0089*  @inc_level:
046F70 3C          0090*      inc a
046F71 32 FA 6E 04 0091*      ld (cur_level),a
046F75             0092*  
046F75             0093*  ; increase the number of enemy sprites
046F75 3A BE 80 04 0094*      ld a,(max_enemy_sprites)
046F79 3C          0095*      inc a
046F7A FE 10       0096*      cp table_max_records ; if we're at the global limit,skip ahead at max level
046F7C 28 04       0097*      jr z,init_level
046F7E 32 BE 80 04 0098*      ld (max_enemy_sprites),a ; otherwise save the updated number
046F82             0099*  ; fall through to init_level
046F82             0100*  
046F82             0101*  init_level:
046F82             0102*  ; look up address of level's tile defintion
046F82 21 FB 6E 04 0103*      ld hl,tiles_levels
046F86 3A FA 6E 04 0104*      ld a,(cur_level)
046F8A 11 00 00 00 0105*      ld de,0 ; just in case deu is non-zero
046F8E 57          0106*      ld d,a
046F8F 1E 03       0107*      ld e,3
046F91 ED 5C       0108*      mlt de
046F93 19          0109*      add hl,de
046F94 ED 37       0110*      ld ix,(hl)
046F96 DD 22 F6 6E 0111*      ld (tiles_row_defs),ix
       04          
046F9B             0112*  
046F9B             0113*  ; set tiles_row counter
046F9B DD 7E 00    0114*      ld a,(ix)
046F9E 32 F9 6E 04 0115*      ld (tiles_row),a
046FA2 DD 23       0116*      inc ix ; now ix points first element of first row tile def
046FA4 DD 22 F6 6E 0117*      ld (tiles_row_defs),ix ; ... so we save it
       04          
046FA9 C9          0118*      ret
046FAA             0119*  
046FAA             0120*  
046FAA             0121*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
046FAA             0122*  ; dt_is_active:
046FAA             0123*  ; ; a lands here containing a tile index in the low nibble
046FAA             0124*  ; ; we test the values for the tiles which are active
046FAA             0125*  ;     cp #07
046FAA             0126*  ;     call z,ld_act_landing_pad
046FAA             0127*  ;     cp #08
046FAA             0128*  ;     call z,ld_act_laser_turret
046FAA             0129*  ;     ; fall through
046FAA             0130*  ;     ret
046FAA             0131*  
046FAA             0132*  ; ; some tiles become active sprites,so we load those here
046FAA             0133*  ; ; sprite_x/y have already been loaded
046FAA             0134*  ; ; sprite_dim_x/y are loaded by table_add_record
046FAA             0135*  ; ; we don't want sprite drawn to background like other tiles
046FAA             0136*  ; ; so this routine only adds them to the sprite table
046FAA             0137*  ; dt_ld_act:
046FAA             0138*  ;     ld a,#48 ; top of screen + 1/2 tile height
046FAA             0139*  ;     ld (sprite_y+1),a ; just the integer part
046FAA             0140*  ;     ld (sprite_base_bufferId),hl
046FAA             0141*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
046FAA             0142*  ;     call table_add_record
046FAA             0143*  ;     call sprite_variables_from_stack
046FAA             0144*  ;     ld a,#FF ; lets calling proc know we loaded an active tile
046FAA             0145*  ;     ret ; and back
046FAA             0146*  
046FAA             0147*  ; ld_act_landing_pad:
046FAA             0148*  ;     call sprite_variables_to_stack
046FAA             0149*  
046FAA             0150*  ;     ld hl,move_landing_pad
046FAA             0151*  ;     ld (sprite_move_program),hl
046FAA             0152*  
046FAA             0153*  ;     xor a
046FAA             0154*  ;     ld (sprite_animation),a ; animation 0
046FAA             0155*  
046FAA             0156*  ;     call rand_8     ; snag a random number
046FAA             0157*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
046FAA             0158*  ;     add a,64 ; range is now 64-127
046FAA             0159*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
046FAA             0160*  
046FAA             0161*  ;     ld a,%10 ; collides with laser but not player
046FAA             0162*  ;     ld (iy+sprite_collisions),a
046FAA             0163*  
046FAA             0164*  ;     ld a,#05 ; BCD
046FAA             0165*  ;     ld (sprite_points),a
046FAA             0166*  ;     ld a,0 ; binary
046FAA             0167*  ;     ld (sprite_shield_damage),a
046FAA             0168*  
046FAA             0169*  ;     ld hl,landing_pad ; dt_ld_act loads this to sprite_base_bufferId
046FAA             0170*  ;     jr dt_ld_act
046FAA             0171*  
046FAA             0172*  ; ld_act_laser_turret:
046FAA             0173*  ;     call sprite_variables_to_stack
046FAA             0174*  
046FAA             0175*  ;     ld hl,move_laser_turret
046FAA             0176*  ;     ld (sprite_move_program),hl
046FAA             0177*  
046FAA             0178*  ;     xor a
046FAA             0179*  ;     ld (sprite_animation),a
046FAA             0180*  ;     ld (sprite_move_step),a
046FAA             0181*  
046FAA             0182*  ;     call rand_8     ; snag a random number
046FAA             0183*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
046FAA             0184*  ;     add a,64 ; range is now 64-127
046FAA             0185*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046FAA             0186*  
046FAA             0187*  ;     ld a,%10 ; collides with laser but not player
046FAA             0188*  ;     ld (iy+sprite_collisions),a
046FAA             0189*  
046FAA             0190*  ;     ld a,#10 ; BCD
046FAA             0191*  ;     ld (sprite_points),a
046FAA             0192*  ;     ld a,0 ; binary
046FAA             0193*  ;     ld (sprite_shield_damage),a
046FAA             0194*  
046FAA             0195*  ;     ld hl,laser_turret ; dt_ld_act loads this to sprite_base_bufferId
046FAA             0196*  ;     jp dt_ld_act
046FAA             0197*  
046FAA             0198*  
046FAA             0199*  ; moves active tile sprites down one pixel in sync with tiles movement
046FAA             0200*  ; deletes sprites from table when they wrap around to top of screen
046FAA             0201*  move_active_tiles:
046FAA             0202*  ; get current position
046FAA 3A 0F 00 00 0203*      ld a,(sprite_y+1) ; we only need the integer part
046FAE 3C          0204*      inc a
046FAF             0205*  ; are we at the bottom of the screen?
046FAF 20 06       0206*      jr nz,move_active_tiles_draw_sprite ; nope
046FB1             0207*  ; otherwise kill sprite
046FB1 3E 80       0208*      ld a,%10000000 ; any bit set in high nibble means sprite will die
046FB3 FD 77 08    0209*      ld (iy+sprite_collisions),a
046FB6 C9          0210*      ret ; debug
046FB7             0211*  move_active_tiles_draw_sprite:
046FB7 32 0F 00 00 0212*      ld (sprite_y+1),a ; update tile y position integer part
046FBB             0213*      ; call vdu_bmp_select ; TODO: convert to vdu_buff_select
046FBB             0214*      ; call vdu_bmp_draw ; TODO: convert to vdu_bmp_plot ; draw it
046FBB C9          0215*      ret ; and done
046FBC             0058   	include "levels.inc"
046FBC 00          0001*  tiles_level_00: db  0 ; number of rows, 0 is max of 256
046FBD 00 00 00 00 0002*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 0
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
046FCD 00 00 00 00 0003*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03 ; row 1
       00 00 00 00 
       00 03 00 05 
       03 05 00 03 
046FDD 00 00 00 00 0004*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 2
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
046FED 00 00 00 07 0005*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 3
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
046FFD 00 00 00 03 0006*  	db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 4
       00 05 03 05 
       00 03 05 00 
       03 00 00 03 
04700D 00 00 00 03 0007*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 5
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
04701D 00 00 00 01 0008*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 6
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
04702D 00 00 00 03 0009*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 7
       00 00 03 05 
       04 03 00 00 
       03 00 00 03 
04703D 00 00 00 03 0010*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 8
       00 00 03 04 
       05 03 00 00 
       03 00 00 03 
04704D 01 02 02 01 0011*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 9
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
04705D 03 04 05 03 0012*  	db 0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03 ; row 10
       00 00 03 00 
       00 03 00 00 
       03 05 05 03 
04706D 03 05 04 03 0013*  	db 0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 11
       00 00 03 00 
       00 03 00 00 
       03 04 04 03 
04707D 01 02 02 01 0014*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 12
       02 02 01 02 
       02 06 02 02 
       01 02 02 01 
04708D 00 00 00 00 0015*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 13
       00 00 03 04 
       00 03 05 00 
       03 00 00 03 
04709D 00 00 00 00 0016*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 14
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
0470AD 00 00 00 00 0017*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 15
       00 00 01 02 
       02 07 02 02 
       01 02 02 01 
0470BD 00 00 00 00 0018*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x00,0x00,0x00 ; row 16
       00 00 03 05 
       05 03 00 05 
       03 00 00 00 
0470CD 00 00 00 00 0019*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 17
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
0470DD 00 00 00 00 0020*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 18
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0470ED 00 00 00 00 0021*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x00 ; row 19
       00 00 03 00 
       00 03 04 00 
       03 00 00 00 
0470FD 00 00 00 00 0022*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 20
       00 00 03 00 
       05 03 00 00 
       03 00 00 00 
04710D 00 00 00 00 0023*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00 ; row 21
       00 00 03 00 
       00 03 05 00 
       03 00 00 00 
04711D 00 00 00 00 0024*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 22
       00 00 03 04 
       00 03 00 00 
       03 00 00 00 
04712D 00 00 00 00 0025*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 23
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04713D 00 00 00 00 0026*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 24
       00 00 03 00 
       04 03 00 00 
       00 00 00 00 
04714D 00 00 00 00 0027*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 25
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
04715D 00 00 00 01 0028*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 26
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
04716D 00 00 00 03 0029*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 27
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04717D 00 00 00 03 0030*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 28
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
04718D 00 00 00 01 0031*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 29
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
04719D 00 00 00 03 0032*  	db 0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 30
       04 05 03 00 
       00 03 00 00 
       00 00 00 00 
0471AD 00 00 00 03 0033*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 31
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
0471BD 00 00 00 01 0034*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 32
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
0471CD 00 00 00 00 0035*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 33
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0471DD 00 00 00 00 0036*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 34
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0471ED 00 00 00 00 0037*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 35
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
0471FD 00 00 00 00 0038*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 36
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04720D 00 00 00 00 0039*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 37
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04721D 00 00 00 00 0040*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 38
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04722D 00 00 00 00 0041*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 39
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
04723D 00 00 00 00 0042*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 40
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
04724D 00 00 00 01 0043*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 41
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
04725D 00 00 00 03 0044*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 42
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
04726D 00 00 00 03 0045*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 43
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
04727D 07 02 02 01 0046*  	db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 44
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
04728D 03 00 00 03 0047*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 45
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
04729D 03 00 00 03 0048*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 46
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
0472AD 01 02 02 01 0049*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 47
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
0472BD 00 00 00 03 0050*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 48
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
0472CD 00 00 00 03 0051*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 49
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
0472DD 00 00 00 06 0052*  	db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 50
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
0472ED 00 00 00 00 0053*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 51
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
0472FD 00 00 00 00 0054*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 52
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
04730D 00 00 00 00 0055*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 53
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
04731D 00 00 00 00 0056*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 54
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04732D 00 00 00 00 0057*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 55
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04733D 00 00 00 01 0058*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 56
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
04734D 00 00 00 03 0059*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 57
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
04735D 00 00 00 03 0060*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 58
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
04736D 00 00 00 01 0061*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 59
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
04737D 00 00 00 03 0062*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 60
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04738D 00 00 00 03 0063*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 61
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04739D 00 00 00 07 0064*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 62
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
0473AD 00 00 00 00 0065*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 63
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0473BD 00 00 00 00 0066*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 64
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0473CD 00 00 00 00 0067*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 65
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
0473DD 00 00 00 00 0068*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 66
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0473ED 00 00 00 00 0069*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 67
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0473FD 00 00 00 00 0070*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 68
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04740D 00 00 00 00 0071*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 69
       00 00 00 00 
       00 03 04 04 
       03 00 00 00 
04741D 00 00 00 00 0072*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00 ; row 70
       00 00 00 00 
       00 03 05 04 
       03 00 00 00 
04742D 00 00 00 00 0073*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 71
       00 00 00 00 
       00 01 02 02 
       01 00 00 00 
04743D 00 00 00 00 0074*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 72
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04744D 00 00 00 00 0075*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 73
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04745D 00 00 00 00 0076*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 74
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04746D 00 00 00 00 0077*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 75
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04747D 00 00 00 00 0078*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 76
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04748D 00 00 00 07 0079*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 77
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
04749D 00 00 00 03 0080*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 78
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0474AD 00 00 00 03 0081*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 79
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0474BD 00 00 00 01 0082*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 80
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
0474CD 00 00 00 03 0083*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 81
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
0474DD 00 00 00 03 0084*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 82
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
0474ED 00 00 00 01 0085*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 83
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
0474FD 00 00 00 00 0086*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 84
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04750D 00 00 00 00 0087*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 85
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
04751D 00 00 00 00 0088*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 86
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04752D 00 00 00 00 0089*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 87
       00 00 03 05 
       05 03 00 00 
       03 00 00 00 
04753D 00 00 00 00 0090*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 88
       00 00 03 04 
       04 03 00 00 
       03 00 00 00 
04754D 00 00 00 00 0091*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 89
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
04755D 00 00 00 00 0092*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 90
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
04756D 00 00 00 00 0093*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 91
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
04757D 00 00 00 00 0094*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 92
       00 00 06 02 
       02 01 02 02 
       01 02 02 01 
04758D 00 00 00 00 0095*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03 ; row 93
       00 00 00 00 
       00 03 00 00 
       03 05 04 03 
04759D 00 00 00 00 0096*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03 ; row 94
       00 00 00 00 
       00 03 00 00 
       03 04 05 03 
0475AD 00 00 00 01 0097*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 95
       02 02 02 02 
       02 07 02 02 
       01 02 02 01 
0475BD 00 00 00 03 0098*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 96
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
0475CD 00 00 00 03 0099*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 97
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
0475DD 00 00 00 01 0100*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01,0x02,0x02,0x01 ; row 98
       02 02 02 02 
       02 02 02 02 
       01 02 02 01 
0475ED 01 02 02 01 0101*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 99
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0475FD 03 00 00 03 0102*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 100
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04760D 03 00 00 03 0103*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 101
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04761D 01 02 02 07 0104*  	db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 102
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04762D 03 00 00 03 0105*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 103
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04763D 03 00 00 03 0106*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 104
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04764D 01 02 02 01 0107*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 105
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
04765D 03 00 04 03 0108*  	db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 106
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
04766D 03 04 00 03 0109*  	db 0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 107
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
04767D 01 02 02 01 0110*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 108
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
04768D 03 00 00 03 0111*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 109
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
04769D 03 00 04 03 0112*  	db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 110
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
0476AD 01 02 02 01 0113*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 111
       02 02 07 02 
       02 01 00 00 
       00 00 00 00 
0476BD 00 00 00 03 0114*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 112
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
0476CD 00 00 00 03 0115*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 113
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
0476DD 00 00 00 01 0116*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 114
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
0476ED 00 00 00 00 0117*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 115
       00 00 03 00 
       00 03 04 04 
       03 00 00 00 
0476FD 00 00 00 00 0118*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00 ; row 116
       00 00 03 00 
       00 03 05 05 
       03 00 00 00 
04770D 00 00 00 00 0119*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 117
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
04771D 00 00 00 00 0120*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 118
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04772D 00 00 00 00 0121*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 119
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04773D 00 00 00 00 0122*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 120
       00 00 00 00 
       00 06 02 02 
       01 02 02 01 
04774D 00 00 00 00 0123*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x05,0x03 ; row 121
       00 00 00 00 
       00 03 00 05 
       03 00 05 03 
04775D 00 00 00 00 0124*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x05,0x00,0x03 ; row 122
       00 00 00 00 
       00 03 00 04 
       03 05 00 03 
04776D 00 00 00 00 0125*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 123
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
04777D 00 00 00 00 0126*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 124
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04778D 00 00 00 00 0127*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 125
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
04779D 00 00 00 00 0128*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 126
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0477AD 00 00 00 00 0129*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 127
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
0477BD 00 00 00 00 0130*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 128
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
0477CD 00 00 00 01 0131*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 129
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
0477DD 00 00 00 03 0132*  	db 0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 130
       05 00 03 00 
       00 00 00 00 
       00 00 00 00 
0477ED 00 00 00 03 0133*  	db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 131
       00 05 03 00 
       00 00 00 00 
       00 00 00 00 
0477FD 01 02 02 07 0134*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 132
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
04780D 03 04 00 03 0135*  	db 0x03,0x04,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 133
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04781D 03 05 04 03 0136*  	db 0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 134
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04782D 01 02 02 01 0137*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 135
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04783D 03 00 00 03 0138*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 136
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04784D 03 00 00 03 0139*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 137
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04785D 01 02 02 01 0140*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 138
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
04786D 03 00 00 03 0141*  	db 0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 139
       04 05 03 00 
       00 00 00 00 
       00 00 00 00 
04787D 03 00 00 03 0142*  	db 0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 140
       05 04 03 00 
       00 00 00 00 
       00 00 00 00 
04788D 01 02 02 01 0143*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 141
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
04789D 00 00 00 03 0144*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 142
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0478AD 00 00 00 03 0145*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 143
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0478BD 00 00 00 06 0146*  	db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 144
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
0478CD 00 00 00 00 0147*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 145
       00 00 03 00 
       00 03 04 04 
       03 00 00 03 
0478DD 00 00 00 00 0148*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03 ; row 146
       00 00 03 00 
       00 03 05 05 
       03 00 00 03 
0478ED 00 00 00 00 0149*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01 ; row 147
       00 00 01 02 
       02 01 02 02 
       06 02 02 01 
0478FD 00 00 00 00 0150*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 148
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
04790D 00 00 00 00 0151*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 149
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
04791D 00 00 00 00 0152*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 150
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
04792D 00 00 00 00 0153*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 151
       00 00 00 00 
       00 03 04 04 
       03 00 00 03 
04793D 00 00 00 00 0154*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03 ; row 152
       00 00 00 00 
       00 03 05 04 
       03 00 00 03 
04794D 00 00 00 00 0155*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 153
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
04795D 00 00 00 00 0156*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 154
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
04796D 00 00 00 00 0157*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 155
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
04797D 00 00 00 00 0158*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 156
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
04798D 00 00 00 00 0159*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 157
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
04799D 00 00 00 00 0160*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 158
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
0479AD 00 00 00 00 0161*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01 ; row 159
       00 00 00 00 
       00 00 00 00 
       01 02 02 01 
0479BD 00 00 00 00 0162*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03 ; row 160
       00 00 00 00 
       00 00 00 00 
       03 05 05 03 
0479CD 00 00 00 00 0163*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03 ; row 161
       00 00 00 00 
       00 00 00 00 
       03 05 04 03 
0479DD 00 00 00 00 0164*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01 ; row 162
       00 00 00 00 
       00 00 00 00 
       06 02 02 01 
0479ED 00 00 00 00 0165*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 163
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
0479FD 00 00 00 00 0166*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 164
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
047A0D 00 00 00 01 0167*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01 ; row 165
       02 02 02 02 
       02 02 02 02 
       07 02 02 01 
047A1D 00 00 00 03 0168*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x05,0x04,0x05,0x05,0x05,0x04,0x04,0x04,0x05,0x03 ; row 166
       04 04 05 04 
       05 05 05 04 
       04 04 05 03 
047A2D 00 00 00 03 0169*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x04,0x04,0x04,0x04,0x05,0x05,0x04,0x05,0x05,0x03 ; row 167
       05 05 04 04 
       04 04 05 05 
       04 05 05 03 
047A3D 00 00 00 01 0170*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01 ; row 168
       02 02 02 02 
       02 02 02 02 
       02 02 02 01 
047A4D 01 02 02 07 0171*  	db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 169
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047A5D 03 00 00 03 0172*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 170
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047A6D 03 00 00 03 0173*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 171
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047A7D 01 02 02 01 0174*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 172
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047A8D 03 04 04 03 0175*  	db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 173
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047A9D 03 04 04 03 0176*  	db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 174
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047AAD 01 02 02 01 0177*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 175
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047ABD 03 00 00 03 0178*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 176
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047ACD 03 00 00 03 0179*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 177
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047ADD 01 02 02 01 0180*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 178
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047AED 03 00 00 03 0181*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 179
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047AFD 03 00 00 03 0182*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 180
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047B0D 01 02 02 07 0183*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 181
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
047B1D 03 00 00 03 0184*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 182
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047B2D 03 00 00 03 0185*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 183
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047B3D 01 02 02 01 0186*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 184
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
047B4D 00 00 00 03 0187*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 185
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
047B5D 00 00 00 03 0188*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 186
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
047B6D 00 00 00 01 0189*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 187
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
047B7D 00 00 00 03 0190*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 188
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
047B8D 00 00 00 03 0191*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 189
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
047B9D 00 00 00 01 0192*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 190
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
047BAD 00 00 00 03 0193*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 191
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047BBD 00 00 00 03 0194*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 192
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047BCD 00 00 00 01 0195*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 193
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
047BDD 00 00 00 03 0196*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 194
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
047BED 00 00 00 03 0197*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 195
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
047BFD 00 00 00 01 0198*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 196
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
047C0D 00 00 00 03 0199*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 197
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047C1D 00 00 00 03 0200*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 198
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047C2D 00 00 00 07 0201*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 199
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
047C3D 00 00 00 03 0202*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 200
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
047C4D 00 00 00 03 0203*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 201
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
047C5D 00 00 00 01 0204*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 202
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
047C6D 00 00 00 00 0205*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 203
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
047C7D 00 00 00 00 0206*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 204
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
047C8D 00 00 00 00 0207*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 205
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
047C9D 00 00 00 00 0208*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 206
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047CAD 00 00 00 00 0209*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 207
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047CBD 00 00 00 00 0210*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 208
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
047CCD 00 00 00 00 0211*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 209
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
047CDD 00 00 00 00 0212*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 210
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
047CED 00 00 00 00 0213*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 211
       00 00 00 00 
       01 06 02 02 
       01 02 02 01 
047CFD 00 00 00 00 0214*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x01,0x00,0x00,0x00,0x00,0x00 ; row 212
       00 00 00 01 
       05 04 01 00 
       00 00 00 00 
047D0D 00 00 00 00 0215*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00 ; row 213
       00 00 01 05 
       04 05 01 00 
       00 00 00 00 
047D1D 00 00 00 00 0216*  	db 0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 214
       00 01 05 04 
       05 01 00 00 
       00 00 00 00 
047D2D 00 00 00 00 0217*  	db 0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 215
       01 05 04 05 
       01 00 00 00 
       00 00 00 00 
047D3D 00 00 00 01 0218*  	db 0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 216
       05 04 05 01 
       00 00 00 00 
       00 00 00 00 
047D4D 00 00 01 05 0219*  	db 0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 217
       04 05 01 00 
       00 00 00 00 
       00 00 00 00 
047D5D 01 02 02 07 0220*  	db 0x01,0x02,0x02,0x07,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 218
       05 01 00 00 
       00 00 00 00 
       00 00 00 00 
047D6D 03 00 00 03 0221*  	db 0x03,0x00,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 219
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
047D7D 03 00 00 03 0222*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 220
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047D8D 01 02 02 01 0223*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 221
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
047D9D 03 00 00 03 0224*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 222
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047DAD 03 00 00 03 0225*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 223
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047DBD 01 02 02 01 0226*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 224
       02 02 06 00 
       00 00 00 00 
       00 00 00 00 
047DCD 00 00 00 03 0227*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 225
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047DDD 00 00 00 03 0228*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 226
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047DED 00 00 00 01 0229*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 227
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
047DFD 00 00 00 03 0230*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 228
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047E0D 00 00 00 03 0231*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 229
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047E1D 00 00 00 01 0232*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 230
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
047E2D 00 00 00 03 0233*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 231
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047E3D 00 00 00 03 0234*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 232
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047E4D 01 02 02 01 0235*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00 ; row 233
       02 02 01 02 
       02 01 02 02 
       06 00 00 00 
047E5D 03 00 00 03 0236*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 234
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047E6D 03 00 00 03 0237*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 235
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047E7D 07 02 02 01 0238*  	db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 236
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
047E8D 00 00 00 03 0239*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 237
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047E9D 00 00 00 03 0240*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 238
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
047EAD 00 00 00 01 0241*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 239
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
047EBD 00 00 00 03 0242*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 240
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047ECD 00 00 00 03 0243*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 241
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047EDD 00 00 00 01 0244*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 242
       02 02 06 02 
       02 01 02 02 
       01 00 00 00 
047EED 00 00 00 00 0245*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 243
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047EFD 00 00 00 00 0246*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 244
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047F0D 00 00 00 00 0247*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 245
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
047F1D 00 00 00 00 0248*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 246
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
047F2D 00 00 00 00 0249*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 247
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
047F3D 00 00 00 01 0250*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 248
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
047F4D 00 00 00 03 0251*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 249
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047F5D 00 00 00 03 0252*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 250
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
047F6D 01 02 02 07 0253*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01 ; row 251
       02 02 01 02 
       02 01 02 02 
       07 02 02 01 
047F7D 03 05 05 03 0254*  	db 0x03,0x05,0x05,0x03,0x04,0x05,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x05,0x04,0x03 ; row 252
       04 05 03 05 
       05 03 00 05 
       03 05 04 03 
047F8D 03 04 04 03 0255*  	db 0x03,0x04,0x04,0x03,0x05,0x05,0x03,0x04,0x04,0x03,0x05,0x00,0x03,0x04,0x04,0x03 ; row 253
       05 05 03 04 
       04 03 05 00 
       03 04 04 03 
047F9D 01 02 02 06 0256*  	db 0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06 ; row 254
       02 02 01 02 
       02 06 02 02 
       01 02 02 06 
047FAD 00 00 00 00 0257*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047FBD             0258*  
047FBD             0259*  
047FBD 10          0260*  tiles_level_01: db 16  ; number of rows, 0 is max of 256
047FBE 00 00 00 00 0261*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047FCE 00 00 00 00 0262*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047FDE 00 00 00 00 0263*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047FEE 00 00 00 00 0264*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047FFE 00 00 00 00 0265*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04800E 00 00 00 00 0266*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04801E 00 00 00 00 0267*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04802E 00 00 00 00 0268*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04803E 00 00 00 00 0269*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04804E 00 00 00 00 0270*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04805E 00 00 00 00 0271*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04806E 00 00 00 00 0272*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04807E 00 00 00 00 0273*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04808E 00 00 00 00 0274*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04809E 00 00 00 00 0275*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0480AE 00 00 00 00 0276*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0480BE             0277*  
0480BE             0059   	include "enemies.inc"
0480BE             0001*  ; ######### ENEMY CONSTANTS #########
0480BE             0002*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
0480BE 10          0003*  max_enemy_sprites: db 16
0480BF             0004*  
0480BF             0005*  ; sprite_type
0480BF             0006*  enemy_dead: equ 0
0480BF             0007*  enemy_small: equ 1
0480BF             0008*  enemy_medium: equ 2
0480BF             0009*  enemy_large: equ 3
0480BF             0010*  landing_pad: equ 4
0480BF             0011*  laser_turret: equ 5
0480BF             0012*  fireballs: equ 6
0480BF             0013*  explosion: equ 7
0480BF             0014*  
0480BF             0015*  
0480BF             0016*  respawn_countdown:
0480BF 2A E0 80 04 0017*      ld hl,(respawn_timer)
0480C3 2B          0018*      dec hl
0480C4 22 E0 80 04 0019*      ld (respawn_timer),hl
0480C8             0020*  ; check hl for zero
0480C8 19          0021*      add hl,de
0480C9 B7          0022*      or a
0480CA ED 52       0023*      sbc hl,de
0480CC C0          0024*      ret nz
0480CD 06 0F       0025*      ld b,table_max_records-1
0480CF             0026*  @respawn_loop:
0480CF C5          0027*      push bc
0480D0 CD D1 81 04 0028*      call enemy_init_from_landing_pad
0480D4 C1          0029*      pop bc
0480D5 10 F8       0030*      djnz @respawn_loop
0480D7 21 3C 00 00 0031*      ld hl,1*60 ; 1 second
0480DB 22 E0 80 04 0032*      ld (respawn_timer),hl
0480DF C9          0033*      ret
0480E0 3C 00 00    0034*  respawn_timer: dl 1*60
0480E3             0035*  
0480E3             0036*  move_enemies:
0480E3             0037*  ; are there any active enemies or explosions?
0480E3 21 00 00 00 0038*      ld hl,0
0480E7 3A 86 6E 04 0039*      ld a,(table_active_sprites)
0480EB 6F          0040*      ld l,a
0480EC             0041*      ; call dumpRegistersHex
0480EC A7          0042*      and a ; will be zero if no alive enemies or explosions
0480ED             0043*      ; ret z ; so nothing to do but go back
0480ED             0044*      ; ld hl,(respawn_timer)
0480ED             0045*      ; call dumpRegistersHex
0480ED 20 05       0046*      jr nz,move_enemies_do
0480EF CD BF 80 04 0047*      call respawn_countdown
0480F3 C9          0048*      ret
0480F4             0049*  move_enemies_do:
0480F4             0050*  ; initialize pointers and loop counter
0480F4 FD 21 23 6C 0051*      ld iy,table_base ; set iy to first record in table
       04          
0480F9 06 0F       0052*      ld b,table_max_records-1 ; loop counter
0480FB             0053*  move_enemies_loop:
0480FB FD 22 83 6E 0054*      ld (table_pointer),iy ; update table pointer
       04          
048100 C5          0055*      push bc ; backup loop counter
048101             0056*  ; check sprite_type to see if sprite is active
048101 FD 7E 01    0057*      ld a,(iy+sprite_type)
048104 A7          0058*      and a ; if zero, sprite is dead
048105 28 2E       0059*      jr z,move_enemies_next_record ; ... and we skip to next record
048107             0060*  ; otherwise we prepare to move the sprite
048107 FD 7E 00    0061*      ld a,(iy+sprite_id) ; get spriteId
04810A CD CA 0E 04 0062*      call vdu_sprite_select ; select sprite
04810E FD 27 05    0063*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
048111 E9          0064*      jp (hl)  ; ... and jump to it
048112             0065*  ; we always jp back here from behavior subroutines
048112             0066*  move_enemies_loop_return:
048112 FD 2A 83 6E 0067*      ld iy,(table_pointer) ; get back table pointer
       04          
048117             0068*  ; now we check results of all the moves
048117 FD 7E 08    0069*      ld a,(iy+sprite_collisions)
04811A E6 F0       0070*      and %11110000 ; any bits set in high nibble means we died
04811C FD 7E 00    0071*      ld a,(iy+sprite_id) ; get spriteId for the deactivate_sprite call if needed
04811F 28 0A       0072*      jr z,move_enemies_draw_sprite ; if not dead,draw sprite
048121 CD CF 6E 04 0073*      call table_deactivate_sprite ; otherwise we ded
048125 AF          0074*      xor a ; zero a so that we can ...
048126 FD 77 08    0075*      ld (iy+sprite_collisions),a ; ... clear collision flags
048129 18 0A       0076*      jr move_enemies_next_record ; and to the next record
04812B             0077*  move_enemies_draw_sprite:
04812B             0078*  ; if we got here sprite will have already been activated
04812B             0079*  ; so all we need to do is set its coordinates and draw it
04812B FD 07 0B    0080*      ld bc,(iy+sprite_x)
04812E FD 17 0E    0081*      ld de,(iy+sprite_y)
048131 CD 96 0F 04 0082*      call vdu_sprite_move_abs168
048135             0083*  ; fall through to next record
048135             0084*  move_enemies_next_record:
048135 11 26 00 00 0085*      ld de,table_bytes_per_record
048139 FD 19       0086*      add iy,de ; point to next record
04813B AF          0087*      xor a ; clears carry flag
04813C 32 87 6E 04 0088*      ld (sprite_screen_edge),a ; clear screen edge collision flag
048140 C1          0089*      pop bc ; get back our loop counter
048141 10 B8       0090*      djnz move_enemies_loop ; loop until we've checked all the records
048143 C9          0091*      ret ; and we're out
048144             0092*  
048144             0093*  en_nav_zigzag_start:
048144 FD 2A 83 6E 0094*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
048149 CD E7 10 04 0095*      call rand_8
04814D E6 3F       0096*      and %00111111 ; limit it to 64
04814F CB DF       0097*      set 3,a ; make sure it's at least 8
048151 FD 77 22    0098*      ld (iy+sprite_move_timer),a ; store it
048154             0099*      ; fall through to en_nav_zigzag
048154             0100*  en_nav_zigzag:
048154 FD 7E 22    0101*      ld a,(iy+sprite_move_timer)
048157 3D          0102*      dec a
048158 FD 77 22    0103*      ld (iy+sprite_move_timer),a
04815B 20 1C       0104*      jr nz,en_nav_zigzag_no_switch
04815D             0105*      ; otherwise flip direction and restart timer
04815D FD 7E 23    0106*      ld a,(iy+sprite_move_step)
048160 EE 01       0107*      xor %1 ; flips bit one
048162 FD 77 23    0108*      ld (iy+sprite_move_step),a ; store it
048165 20 09       0109*      jr nz,en_nav_zigzag_right
048167             0110*  ;otherwise zag left
048167 21 00 A0 00 0111*      ld hl,0x00A000; southwest heading
04816B FD 2F 1A    0112*      ld (iy+sprite_heading),hl ; save sprite heading
04816E 18 D4       0113*      jr en_nav_zigzag_start
048170             0114*  en_nav_zigzag_right:
048170 21 00 60 00 0115*      ld hl,0x006000; southeast heading
048174 FD 2F 1A    0116*      ld (iy+sprite_heading),hl ; save sprite heading
048177 18 CB       0117*      jr en_nav_zigzag_start
048179             0118*  en_nav_zigzag_no_switch:
048179             0119*      ; ld a,(sprite_orientation)
048179 FD 27 1A    0120*      ld hl,(iy+sprite_heading)
04817C 18 13       0121*      jr en_nav_computevelocities
04817E             0122*  
04817E             0123*  ; contains the logic for how to move the enemy
04817E             0124*  ; and then does the moving
04817E             0125*  ; inputs: a fully-populated active sprite table
04817E             0126*  ;         player position variables
04817E             0127*  ; destroys: everything except index registers
04817E             0128*  ; outputs: moving enemies
04817E             0129*  en_nav:
04817E             0130*  ; set velocity and orientation by player's relative location
04817E             0131*  ; move enemies y-axis
04817E             0132*  ; where is player relative to us?
04817E CD 54 82 04 0133*      call orientation_to_player
048182             0134*  ;    h.l 16.8 fixed angle256 to player
048182             0135*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
048182             0136*  ; is player above or below us?
048182 ED 53 A5 05 0137*      ld (ude),de ; dy
       04          
048187 3A A7 05 04 0138*      ld a,(ude+2) ; deu
04818B 17          0139*      rla ; shift sign bit into carry
04818C 30 C6       0140*      jr nc,en_nav_zigzag ; player is below,evade
04818E             0141*  ; player is even or above,so home in on current heading
04818E FD 2F 1A    0142*      ld (iy+sprite_heading),hl ; save sprite heading
048191             0143*  
048191             0144*  ; we land here from zig-zag program so as not to
048191             0145*  ; redundantly save orientation and heading
048191             0146*  en_nav_computevelocities:
048191             0147*  ; set x/y component velocities based on bearing to player
048191 FD 2A 83 6E 0148*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
048196 E5          0149*      push hl ; we need it back to set rotation frame
048197 FD 17 17    0150*      ld de,(iy+sprite_vel)
04819A CD 6A 15 04 0151*      call polar_to_cartesian
04819E FD 0F 11    0152*      ld (iy+sprite_xvel),bc ; save x-velocity component
0481A1 FD 1F 14    0153*      ld (iy+sprite_yvel),de ; save y-velocity component
0481A4             0154*  ; change the animation frame to match heading
0481A4             0155*  ; by dividng the heading by 8
0481A4 E1          0156*      pop hl ; get back Heading
0481A5 7C          0157*      ld a,h
0481A6 CB 3F       0158*      srl a
0481A8 CB 3F       0159*      srl a
0481AA CB 3F       0160*      srl a
0481AC CD 2D 0F 04 0161*      call vdu_sprite_select_frame
0481B0             0162*  ; update sprite position
0481B0             0163*  move_enemy_sprite:
0481B0 FD 27 0B    0164*      ld hl,(iy+sprite_x)
0481B3 FD 17 11    0165*      ld de,(iy+sprite_xvel)
0481B6 19          0166*      add hl,de
0481B7 FD 2F 0B    0167*      ld (iy+sprite_x),hl
0481BA             0168*  
0481BA FD 27 0E    0169*      ld hl,(iy+sprite_y)
0481BD FD 17 14    0170*      ld de,(iy+sprite_yvel)
0481C0 19          0171*      add hl,de
0481C1 FD 2F 0E    0172*      ld (iy+sprite_y),hl
0481C4 C9          0173*      ret
0481C5             0174*  
0481C5             0175*  ; ; TODO: IMPLEMENT THIS PROPERLY
0481C5             0176*  ; move_enemy_sprite:
0481C5             0177*  ; ; x-axis movement first
0481C5             0178*  ;     ld hl,(iy+sprite_x)
0481C5             0179*  ;     push hl ; save pre-move position
0481C5             0180*  ;     pop bc ; to detect screen edge collision
0481C5             0181*  ;     ld de,(iy+sprite_xvel)
0481C5             0182*  ;     add hl,de ;compute new x position
0481C5             0183*  ;     ld (iy+sprite_x),hl ; store it
0481C5             0184*  ;     and a ; clear the carry flag
0481C5             0185*  ;     sbc hl,bc ; test which direction was our movement
0481C5             0186*  ;     jr z,@move_y ; zero flag means no horizontal movement
0481C5             0187*  ;     jp p,@move_right ; sign positive means moved right
0481C5             0188*  ; @move_left: ; otherwise we moved left
0481C5             0189*  ;     jr c,@move_y ; move left,no wraparound |C1 N1 PV1 H1 Z0 S1|A=00 HL=FF00 BC=0100 DE=FF00
0481C5             0190*  ;     ld hl,0x000000   ; move left,with wraparound |C0 N1 PV0 H0 Z0 S1|A=00 HL=FF00 BC=0000 DE=FF00
0481C5             0191*  ;     ld (iy+sprite_x),hl ; set x position to left edge of screen
0481C5             0192*  ;     ld a,#20 ; west
0481C5             0193*  ;     ld (sprite_screen_edge),a ; set screen edge collision flag
0481C5             0194*  ;     jr @move_y
0481C5             0195*  ; @move_right:
0481C5             0196*  ;     jr nc,@move_y ; move right,no wraparound |C0 N1 PV1 H0 Z0 S0|A=00 HL=0100 BC=FE00 DE=0100
0481C5             0197*  ;     ; move right,with wraparound |C1 N1 PV0 H1 Z0 S0|A=00 HL=0100 BC=FF00 DE=0100
0481C5             0198*  ;     ld l,0x00
0481C5             0199*  ;     ld a,(iy+sprite_dim_x)
0481C5             0200*  ;     ld h,a
0481C5             0201*  ;     ld a,0x00
0481C5             0202*  ;     sub h
0481C5             0203*  ;     ld h,a
0481C5             0204*  ;     ld (iy+sprite_x),hl ; set x position to right edge of screen
0481C5             0205*  ;     ld a,0x02 ; east
0481C5             0206*  ;     ld (sprite_screen_edge),a ; set screen edge collision flag
0481C5             0207*  ; @move_y:
0481C5             0208*  ;     ld hl,(iy+sprite_y)
0481C5             0209*  ;     ld b,h ; save pre-move position
0481C5             0210*  ;     ld c,l ; to detect screen edge collision
0481C5             0211*  ;     ld de,(iy+sprite_yvel)
0481C5             0212*  ;     add hl,de ;compute new y position
0481C5             0213*  ;     ld (iy+sprite_y),hl ; store it
0481C5             0214*  ;     and a ; clear the carry flag
0481C5             0215*  ;     sbc hl,bc ; test which direction was our movement
0481C5             0216*  ;     jr z,@move_ret ; zero flag means no vertical movement
0481C5             0217*  ;     jp p,@move_dn ; sign positive means moved down
0481C5             0218*  ; @move_up:
0481C5             0219*  ;     add hl,bc ; get back new y position
0481C5             0220*  ;     ld de,0x5000 ; top edge of visible screen
0481C5             0221*  ;     and a ; clear the carry flag
0481C5             0222*  ;     sbc hl,de
0481C5             0223*  ;     jr nc,@move_ret ; move up,no wraparound |C0 N1 PV0 H0 Z1 S0|A=00 HL=0000 BC=5100 DE=5000
0481C5             0224*  ;     ; move up,with wraparound |C1 N1 PV1 H0 Z0 S1|A=00 HL=FF00 BC=5000 DE=5000
0481C5             0225*  ;     ld (iy+sprite_y),de ; set y position flush with top of screen
0481C5             0226*  ;     ld a,(sprite_screen_edge) ; load any vertical edge collision
0481C5             0227*  ;     or 0x80 ; north
0481C5             0228*  ;     ld (sprite_screen_edge),a ; set screen edge collision flag
0481C5             0229*  ;     jr @move_ret
0481C5             0230*  ; @move_dn:
0481C5             0231*  ;     jr nc,@move_ret ; move down,no wraparound |C0 N1 PV0 H0 Z0 S0|A=00 HL=0100 BC=5100 DE=0100
0481C5             0232*  ;     ; move down,with wraparound |C1 N1 PV0 H1 Z0 S0|A=00 HL=0100 BC=FF00 DE=0100
0481C5             0233*  ;     ld l,0x00
0481C5             0234*  ;     ld a,(iy+sprite_dim_y)
0481C5             0235*  ;     ld h,a
0481C5             0236*  ;     ld a,0x00
0481C5             0237*  ;     sub h
0481C5             0238*  ;     ld h,a
0481C5             0239*  ;     ld (iy+sprite_y),hl ; set y position flush with bottom of screen
0481C5             0240*  ;     ld a,(sprite_screen_edge) ; load any vertical edge collision
0481C5             0241*  ;     or 0x08 ; south
0481C5             0242*  ;     ld (sprite_screen_edge),a ; set screen edge collision flag
0481C5             0243*  ; @move_ret:
0481C5             0244*  ;     ret
0481C5             0245*  
0481C5             0246*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
0481C5             0247*  ; ; each sprite in the table must have one of these defined
0481C5             0248*  ; ; but they need not be unique to a particular sprite
0481C5             0249*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
0481C5             0250*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
0481C5             0251*  ; ; but they can call anything they want between those two endpoints
0481C5             0252*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
0481C5             0253*  
0481C5             0254*  ; move_nop: ; does nothing but burn a few cycles changing the PC
0481C5             0255*  ;     jp move_enemies_loop_return
0481C5             0256*  
0481C5             0257*  ; move_explosion:
0481C5             0258*  ;     call animate_explosion
0481C5             0259*  ;     jp move_enemies_loop_return
0481C5             0260*  
0481C5             0261*  move_enemy_small:
0481C5 CD 7E 81 04 0262*      call en_nav
0481C9 CD F0 82 04 0263*      call check_collisions
0481CD C3 12 81 04 0264*      jp move_enemies_loop_return
0481D1             0265*  
0481D1             0266*  ; move_enemy_medium:
0481D1             0267*  ;     call en_nav
0481D1             0268*  ;     call check_collisions
0481D1             0269*  ;     jp move_enemies_loop_return
0481D1             0270*  
0481D1             0271*  ; move_enemy_large:
0481D1             0272*  ;     call en_nav
0481D1             0273*  ;     call check_collisions
0481D1             0274*  ;     jp move_enemies_loop_return
0481D1             0275*  
0481D1             0276*  ; move_landing_pad:
0481D1             0277*  ;     call move_active_tiles
0481D1             0278*  ;     call check_collisions
0481D1             0279*  ; ; is it time to launch an enemy?
0481D1             0280*  ;     ld hl,sprite_move_timer
0481D1             0281*  ;     dec (hl)
0481D1             0282*  ;     jp nz,move_enemies_loop_return
0481D1             0283*  ;     call enemy_init_from_landing_pad
0481D1             0284*  ;     ; reset move timer so can spawn again if player doesn't take us out
0481D1             0285*  ;     call rand_8     ; snag a random number
0481D1             0286*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
0481D1             0287*  ;     add a,64 ; range is now 64-127
0481D1             0288*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
0481D1             0289*  ;     jp move_enemies_loop_return
0481D1             0290*  
0481D1             0291*  enemy_init_from_landing_pad:
0481D1             0292*  ; get next available spriteId
0481D1 CD AA 6E 04 0293*      call table_get_next_id
0481D5 D0          0294*      ret nc ; no carry means no free sprite slots, so we go home
0481D6             0295*  ; ix comes back with the pointer to the new sprite variables
0481D6 DD E5       0296*      push ix ; de picks it up when we're ready for the copy to the table
0481D8             0297*  ; a comes back with the spriteId of the new sprite
0481D8 32 2E 82 04 0298*      ld (@id),a
0481DC             0299*  ; initialize the new sprite
0481DC CD CA 0E 04 0300*      call vdu_sprite_select
0481E0 CD DD 0E 04 0301*      call vdu_sprite_clear_frames
0481E4 21 14 01 00 0302*      ld hl,BUF_SEEKER_000
0481E8 06 20       0303*      ld b,32
0481EA             0304*  @load_frames:
0481EA C5          0305*      push bc
0481EB E5          0306*      push hl
0481EC CD 17 10 04 0307*      call vdu_sprite_add_buff
0481F0 E1          0308*      pop hl
0481F1 23          0309*      inc hl
0481F2 C1          0310*      pop bc
0481F3 10 F5       0311*      djnz @load_frames
0481F5             0312*  ; copy coordinates of active sprite to new sprite
0481F5 FD 2A 83 6E 0313*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0481FA             0314*      ; ld hl,(iy+sprite_x)
0481FA             0315*  	; ld hl,0x008000 ; debug
0481FA             0316*  
0481FA CD E7 10 04 0317*      call rand_8
0481FE 21 00 00 00 0318*      ld hl,0
048202 67          0319*      ld h,a
048203             0320*  
048203 22 39 82 04 0321*      ld (@x),hl
048207             0322*      ; ld hl,(iy+sprite_y)
048207             0323*      ; ld hl,0x002000 ; debug
048207             0324*  
048207 CD E7 10 04 0325*      call rand_8
04820B 21 00 00 00 0326*      ld hl,0
04820F 67          0327*      ld h,a
048210             0328*  
048210 22 3C 82 04 0329*      ld (@y),hl
048214 CD E7 10 04 0330*      call rand_8
048218 E6 01       0331*      and %00000001 ; 50/50 chance of moving left or right on spanw
04821A 32 51 82 04 0332*      ld (@move_step),a
04821E             0333*  ; now copy to the table
04821E 21 2E 82 04 0334*      ld hl,@id ; address to copy from
048222 D1          0335*      pop de ; address to copy to (was ix)
048223 01 26 00 00 0336*      ld bc,table_bytes_per_record ; number of bytes to copy
048227 ED B0       0337*      ldir ; copy the records from local scratch to sprite table
048229             0338*  ; finally, make the new sprite visible
048229 CD 40 0F 04 0339*      call vdu_sprite_show
04822D C9          0340*      ret
04822E 00          0341*  @id:               db     0x00 ; 1 bytes unique spriteId, zero-based
04822F 01          0342*  @type:             db enemy_small ; 1 bytes type of sprite as defined in enemies.inc
048230 14 01 00    0343*  @base_bufferId:    dl BUF_SEEKER_000 ; 3 bytes bitmap bufferId
048233 C5 81 04    0344*  @move_program:     dl move_enemy_small ; 3 bytes address of sprite's behavior subroutine
048236 03          0345*  @collisions:       db %00000011 ; 3 bytes collides with enemy and laser
048237 10          0346*  @dim_x:            db     0x10 ; 1 bytes sprite width in pixels
048238 10          0347*  @dim_y:            db     0x10 ; 1 bytes sprite height in pixels
048239 00 00 00    0348*  @x:                dl 0x000000 ; 1 bytes 16.8 fractional x position in pixels
04823C 00 00 00    0349*  @y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04823F 00 00 00    0350*  @xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
048242 00 00 00    0351*  @yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
048245 80 02 00    0352*  @vel:              dl speed_seeker ; 3 bytes velocity, 16.8 fixed, pixels
048248 00 80 00    0353*  @heading:          dl 0x008000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04824B 00 80 00    0354*  @orientation:      dl 0x008000 ; 3 bytes orientation bits
04824E 00          0355*  @animation:        db     0x00 ; 1 bytes current animation index, zero-based
04824F 00          0356*  @animation_timer:  db     0x00 ; 1 bytes when hits zero, draw next animation
048250 01          0357*  @move_timer:       db     0x01 ; 1 bytes when zero, go to next move program, or step
048251 00          0358*  @move_step:        db     0x00 ; 1 bytes stage in a move program sequence, varies
048252 20          0359*  @points:           db     0x20 ; 1 bytes points awarded for killing this sprite type, BCD
048253 02          0360*  @shield_damage:    db     0x02 ; 1 bytes shield points deducted for collision, binary
048254             0361*  
048254             0362*  ; move_laser_turret:
048254             0363*  ; ; compute orientation to player
048254             0364*  ;     call orientation_to_player
048254             0365*  ; ; h.l 8.8 fixed angle256 to player
048254             0366*  ; ; bc and de as signed 16-bit integers
048254             0367*  ; ; representing delta-x/y *to* target respectively
048254             0368*  ;     ld (Bearing_t),hl
048254             0369*  ;     ld hl,0x0400
048254             0370*  ;     ld (Vp),hl
048254             0371*  ;     call targeting_computer
048254             0372*  ;     ld (sprite_heading),hl ; store bearing to player
048254             0373*  ; ; is it time to launch a fireball?
048254             0374*  ;     ld hl,sprite_move_timer
048254             0375*  ;     dec (hl)
048254             0376*  ;     jp nz,move_laser_turret_boilerplate
048254             0377*  ;     call fireballs_init
048254             0378*  ;     ; reset move timer so can fire again if player doesn't take us out
048254             0379*  ;     call rand_8     ; snag a random number
048254             0380*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
048254             0381*  ;     add a,64 ; range is now 64-127
048254             0382*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
048254             0383*  ; move_laser_turret_boilerplate:
048254             0384*  ;     call move_active_tiles
048254             0385*  ;     call check_collisions
048254             0386*  ;     jp move_enemies_loop_return
048254             0387*  
048254             0388*  ; fireballs_init:
048254             0389*  ;     call sprite_variables_to_stack
048254             0390*  
048254             0391*  ;     ld hl,fireballs
048254             0392*  ;     ld (sprite_base_bufferId),hl
048254             0393*  
048254             0394*  ;     ld hl,move_fireballs
048254             0395*  ;     ld (sprite_move_program),hl
048254             0396*  
048254             0397*  ;     ld a,%11 ; collides with laser and player
048254             0398*  ;     ; ld a,%10 ; collides with laser DEBUG
048254             0399*  ;     ld (iy+sprite_collisions),a
048254             0400*  
048254             0401*  ;     ld hl,(Vp)
048254             0402*  ;     ld (sprite_vel),hl
048254             0403*  ;     ld hl,(Vp_x)
048254             0404*  ;     ld (sprite_xvel),hl
048254             0405*  ;     ld hl,(Vp_y)
048254             0406*  ;     inc h ; account for ground movement
048254             0407*  ;     ld (sprite_yvel),hl
048254             0408*  
048254             0409*  ;     xor a ; zero a
048254             0410*  ;     ld (sprite_animation),a
048254             0411*  ;     ld (sprite_move_step),a
048254             0412*  ;     ld (sprite_move_timer),a
048254             0413*  
048254             0414*  ;     ld a,6 ; 1/10th of a second timer
048254             0415*  ;     ld (sprite_animation_timer),a
048254             0416*  
048254             0417*  ;     ld a,0x00 ; BCD
048254             0418*  ;     ld (sprite_points),a
048254             0419*  ;     ld a,1 ; binary
048254             0420*  ;     ld (sprite_shield_damage),a
048254             0421*  
048254             0422*  ;     call table_add_record ; plops that on the sprite stack for later
048254             0423*  ;     call sprite_variables_from_stack ; come back to where we started
048254             0424*  ;     ret
048254             0425*  
048254             0426*  ; move_fireballs:
048254             0427*  ;     call move_enemy_sprite ; move sprite
048254             0428*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
048254             0429*  ;     and a ; if zero we're still within screen bounds
048254             0430*  ;     jr z,move_fireballs_alive
048254             0431*  ; ; otherwise kill sprite
048254             0432*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
048254             0433*  ;     ld (iy+sprite_collisions),a
048254             0434*  ;     jp move_enemies_loop_return
048254             0435*  ; move_fireballs_alive:
048254             0436*  ;     ld a,(sprite_animation_timer)
048254             0437*  ;     dec a
048254             0438*  ;     ld (sprite_animation_timer),a
048254             0439*  ;     jr nz,move_fireballs_draw
048254             0440*  ;     ld a,(sprite_animation)
048254             0441*  ;     xor %1
048254             0442*  ;     ld (sprite_animation),a
048254             0443*  ;     ld a,6 ; 1/10th of a second timer
048254             0444*  ;     ld (sprite_animation_timer),a
048254             0445*  ;     ; fall through
048254             0446*  
048254             0447*  ; move_fireballs_draw:
048254             0448*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
048254             0449*  ;     call vdu_bmp_draw ; TODO: convert to vdu_bmp_plot
048254             0450*  ;     call check_collisions
048254             0451*  ;     jp move_enemies_loop_return
048254             0452*  
048254             0453*  ; compute orientation to player
048254             0454*  ; based on relative positions
048254             0455*  ; returns: h.l 16.8 fixed angle256 to player
048254             0456*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
048254             0457*  ;    representing delta-x/y *to* target respectively
048254             0458*  orientation_to_player:
048254 FD 2A 83 6E 0459*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
048259 FD E5       0460*      push iy ; so we can send it back intact
04825B FD 07 0B    0461*      ld bc,(iy+sprite_x)
04825E FD 17 0E    0462*      ld de,(iy+sprite_y)
048261 DD 2A 0E 6B 0463*      ld ix,(player_x)
       04          
048266 FD 2A 11 6B 0464*      ld iy,(player_y)
       04          
04826B CD 9B 15 04 0465*      call dxy168
04826F CD 02 16 04 0466*      call atan2_168game
048273 ED 4B F6 15 0467*      ld bc,(dx168)
       04          
048278 ED 5B FC 15 0468*      ld de,(dy168)
       04          
04827D FD E1       0469*      pop iy ; restore table pointer
04827F C9          0470*      ret
048280             0471*  
048280             0472*  
048280             0473*  ; targeting_computer scratch variables
048280 00 00       0474*  Bearing_t: dw #0000 ; 8.8 fixed
048282 00 00       0475*  Heading_t: dw #0000 ; 8.8 fixed
048284 00 00       0476*  Vp: dw #0000 ; 8.8 fixed
048286 00 00       0477*  Vp_x: dw #0000 ; 8.8 fixed
048288 00 00       0478*  Vp_y: dw #0000 ; 8.8 fixed
04828A 00 00       0479*  Vt: dw #0000 ; 8.8 fixed
04828C 00 00       0480*  Vt_x: dw #0000 ; 8.8 fixed
04828E 00 00       0481*  Vt_y: dw #0000 ; 8.8 fixed
048290             0482*  
048290             0483*  
048290             0484*  ; ; Inputs:   see scratch variables
048290             0485*  ; ; Note:     a call to orientation_to_player provides these inputs
048290             0486*  ; ; Outputs:  h.l is the 16.8 fixed firing angle256
048290             0487*  ; ;           b.c and d.e are the 16.8 fixed x,y component projectile velocities
048290             0488*  ; ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
048290             0489*  ; targeting_computer:
048290             0490*  ; ; compute target velocity from x,y component velocities
048290             0491*  ;     ld bc,(player_xvel)
048290             0492*  ;     ld de,(player_yvel)
048290             0493*  ;     dec d ; account for vertical ground movement: b.c=player_xvel,d.e=player_yvel-1
048290             0494*  
048290             0495*  ;     call cartesian_to_polar ; b.c=Heading_t, d.e=Vt
048290             0496*  ;     ld (Heading_t),bc
048290             0497*  ;     ld (Vt),de
048290             0498*  
048290             0499*  ; ; compute Heading_t-Bearing_t
048290             0500*  ;     ld h,b
048290             0501*  ;     ld l,c
048290             0502*  ;     ld bc,(Bearing_t)
048290             0503*  ;     and a ; clear carry
048290             0504*  ;     sbc hl,bc ; h.l=Heading_t-Bearing_t
048290             0505*  
048290             0506*  ; ; compute sin(Heading_t-Bearing_t)
048290             0507*  ;     ld b,h
048290             0508*  ;     ld c,l
048290             0509*  ;     call sin_bc ; h.l=sin(Heading_t-Bearing_t)
048290             0510*  
048290             0511*  ; ; compute (Vt*sin(Heading_t-Bearing_t))
048290             0512*  ;     ex de,hl
048290             0513*  ;     ld bc,(Vt)
048290             0514*  ;     call BC_Mul_DE_88 ; h.l=(Vt*sin(Heading_t-Bearing_t))
048290             0515*  
048290             0516*  ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
048290             0517*  ;     ld b,h
048290             0518*  ;     ld c,l
048290             0519*  ;     ld de,(Vp)
048290             0520*  ;     call div_88 ; h.l=(Vt*sin(Heading_t-Bearing_t)) / Vp
048290             0521*  ; ; answer is in radians, convert to degrees256
048290             0522*  ;     ex de,hl
048290             0523*  ;     ld bc,#28BE ; 40.74=57.29578*256/360
048290             0524*  ;     call BC_Mul_DE_88
048290             0525*  
048290             0526*  ; ; add lead angle to target bearing
048290             0527*  ;     ld de,(Bearing_t)
048290             0528*  ;     add hl,de ; h.l=lead angle+target bearing
048290             0529*  ;     push hl
048290             0530*  
048290             0531*  ; ; compute component projectile velocities
048290             0532*  ;     ld b,h
048290             0533*  ;     ld c,l
048290             0534*  ;     ld de,(Vp)
048290             0535*  ;     call polar_to_cartesian ; b.c=Vp_x, d.e=Vp_y
048290             0536*  
048290             0537*  ;     ld (Vp_x),bc
048290             0538*  ;     ld (Vp_y),de
048290             0539*  ;     pop hl ; h.l=lead angle+target bearing
048290             0540*  ;     ret
048290             0541*  
048290             0542*  ; this routine vanquishes the enemy sprite
048290             0543*  ; and replaces it with an animated explosion
048290             0544*  ; we jump here instead of call because
048290             0545*  ; we want to return to differing locations in the loop
048290             0546*  ; depending on whether we're still sploding
048290             0547*  ; destroys: everything except index registers
048290             0548*  ; returns: an incandescent ball of debris and gas
048290             0549*  kill_nurple:
048290             0550*  ; ; tally up points
048290             0551*  ;     ld bc,0
048290             0552*  ;     ld a,(sprite_points)
048290             0553*  ;     ld e,a
048290             0554*  ;     ld d,0
048290             0555*  ;     ld hl,add_bcd_arg2
048290             0556*  ;     call set_bcd
048290             0557*  ;     ld hl,player_score
048290             0558*  ;     ld de,add_bcd_arg2
048290             0559*  ;     ld a,3 ; number of bytes to add
048290             0560*  ;     call add_bcd
048290             0561*  ; ; initialize explosion
048290             0562*  ; init_explosion:
048290             0563*  ;     ld hl,explosion
048290             0564*  ;     ld (sprite_base_bufferId),hl
048290             0565*  ;     ld hl,move_explosion
048290             0566*  ;     ld (sprite_move_program),hl
048290             0567*  ;     ld a,%00000000 ; collides with nothing
048290             0568*  ;     ld (iy+sprite_collisions),a
048290             0569*  ;     ld hl,0 ; north
048290             0570*  ;     ld (sprite_heading),hl
048290             0571*  ;     ld a,0x04 ; will decrement to 03
048290             0572*  ;     ld (sprite_animation),a
048290             0573*  ;     ld a,0x07 ; 7/60th of a second timer
048290             0574*  ;     ld (sprite_animation_timer),a
048290             0575*  ;     xor a
048290             0576*  ;     ld (sprite_move_timer),a
048290             0577*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
048290             0578*  ; ; fall through to next_explosion
048290             0579*  ; next_explosion:
048290             0580*  ;     ld a,(sprite_animation)
048290             0581*  ;     dec a ; if rolled negative from zero,we're done sploding
048290             0582*  ;     jp m,done_explosion
048290             0583*  ;     ld (sprite_animation),a
048290             0584*  ;     ld a,0x7 ; 7/60th of a second timer
048290             0585*  ;     ld (sprite_animation_timer),a
048290             0586*  ; ; fall through to animate_explosion
048290             0587*  ; animate_explosion:
048290             0588*  ;     ld hl,sprite_y+1
048290             0589*  ;     inc (hl) ; move explosion down 1 pixel
048290             0590*  ;     jr z, done_explosion ; if wraparound to top of screen, kill explosion
048290             0591*  ;     ld hl,sprite_animation_timer
048290             0592*  ;     dec (hl) ; if timer is zero,we do next animation
048290             0593*  ;     jr z,next_explosion
048290             0594*  ;     ;otherwise we fall through to draw the current one
048290             0595*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
048290             0596*  ;     call vdu_bmp_draw ; TODO: convert to vdu_bmp_plot
048290             0597*  ;     ret ; now we go back to caller
048290             0598*  ; done_explosion:
048290 3E 80       0599*      ld a,%10000000 ; high bit set is non-specific kill-me flag
048292 FD 2A 83 6E 0600*      ld iy,(table_pointer); TODO: see if we can get IY to land here with the proper value
       04          
048297 FD 77 08    0601*      ld (iy+sprite_collisions),a
04829A C9          0602*      ret ; now we go back to caller
04829B             0603*  
04829B             0604*  ; game_over:
04829B             0605*  ;     jp new_game
04829B             0606*  
04829B             0607*  ; it's presumed we've already checked that laser is alive
04829B             0608*  collision_enemy_with_laser:
04829B DD 2A 08 6C 0609*      ld ix,(laser_x)
       04          
0482A0 FD 2A 0B 6C 0610*      ld iy,(laser_y)
       04          
0482A5 3A 06 6C 04 0611*      ld a,(laser_dim_x)
0482A9 CB 2F       0612*      sra a ; divide by 2
0482AB F5          0613*      push af ; we need this later
0482AC             0614*      ; ld de,0
0482AC             0615*      ; ld d,a
0482AC             0616*      ; add ix,de
0482AC             0617*      ; add iy,de
0482AC 18 11       0618*      jr collision_enemy
0482AE             0619*  
0482AE             0620*  ; it's presumed we've already checked that player is alive
0482AE             0621*  collision_enemy_with_player:
0482AE DD 2A 0E 6B 0622*      ld ix,(player_x)
       04          
0482B3 FD 2A 11 6B 0623*      ld iy,(player_y)
       04          
0482B8 3A 0C 6B 04 0624*      ld a,(player_dim_x)
0482BC             0625*  
0482BC             0626*      ; call dumpRegistersHex
0482BC             0627*  
0482BC CB 2F       0628*      sra a ; divide by 2
0482BE F5          0629*      push af ; we need this later
0482BF             0630*      ; ld de,0
0482BF             0631*      ; ld d,a
0482BF             0632*      ; add ix,de
0482BF             0633*      ; add iy,de
0482BF             0634*      ; fall through to collision_enemy
0482BF             0635*  
0482BF             0636*  ; compute the distance between the two sprites' centers
0482BF             0637*  ; inputs: bc and de as y0,x0 and y1,x1 respectively
0482BF             0638*  collision_enemy:
0482BF             0639*  ; back up iy because we need it as the sprite table pointer
0482BF FD E5       0640*      push iy
0482C1 FD 2A 83 6E 0641*      ld iy,(table_pointer)
       04          
0482C6 FD 27 0B    0642*      ld hl,(iy+sprite_x)
0482C9 FD 7E 09    0643*      ld a,(iy+sprite_dim_x)
0482CC CB 2F       0644*      sra a
0482CE F5          0645*      push af ; we need this later
0482CF             0646*      ; ld de,0
0482CF             0647*      ; ld d,a
0482CF             0648*      ; add hl,de
0482CF E5          0649*      push hl
0482D0 C1          0650*      pop bc ; bc = x0
0482D1 FD 27 0E    0651*      ld hl,(iy+sprite_y)
0482D4 FD 7E 0A    0652*      ld a,(iy+sprite_dim_y)
0482D7             0653*      ; sra a
0482D7             0654*      ; ld de,0
0482D7             0655*      ; ld d,a
0482D7             0656*      ; add hl,de
0482D7 EB          0657*      ex de,hl ; de = y0
0482D8 F1          0658*      pop af ; TODO: srsly, this is the best way to do this?
0482D9 FD E1       0659*      pop iy
0482DB F5          0660*      push af
0482DC             0661*  
0482DC             0662*      ; call dumpRegistersHex
0482DC             0663*  
0482DC CD B6 15 04 0664*      call distance168
0482E0             0665*      ; CALL dumpRegistersHex
0482E0             0666*  ; ; subtract sum of radii from distance between centers
0482E0             0667*  ;     ld de,0
0482E0             0668*  ;     pop af ; radius of enemy sprite
0482E0             0669*  ;     ld e,a
0482E0             0670*  ;     pop af ; radius of player or laser sprite
0482E0             0671*  ;     add a,e
0482E0             0672*  ;     ld e,a
0482E0             0673*  ;     and a ; clear carry
0482E0             0674*  ;     sbc hl,de
0482E0             0675*  ;     jr c,collision_enemy_is
0482E0             0676*  ;     xor a
0482E0             0677*  ;     ret
0482E0             0678*  ; temp fix TODO: remove this
0482E0 F1          0679*      pop af
0482E1 F1          0680*      pop af
0482E2 11 00 10 00 0681*      ld de,16*256
0482E6 A7          0682*      and a
0482E7 ED 52       0683*      sbc hl,de
0482E9 38 02       0684*      jr c,collision_enemy_is
0482EB AF          0685*      xor a
0482EC             0686*      ; call dumpRegistersHex
0482EC C9          0687*      ret
0482ED             0688*  collision_enemy_is:
0482ED AF          0689*      xor a
0482EE 3C          0690*      inc a
0482EF             0691*      ; call dumpRegistersHex
0482EF C9          0692*      ret
0482F0             0693*  
0482F0             0694*  ; ; looks up what enemy sprite collides with
0482F0             0695*  ; ; detects collisions
0482F0             0696*  ; ; and sets things to sploding accordingly
0482F0             0697*  ; check_collisions:
0482F0             0698*  ;     ld a,(iy+sprite_collisions) ; snag what we collide with
0482F0             0699*  ;     and a ; if this is zero,
0482F0             0700*  ;     ret z ; there's nothing to do
0482F0             0701*  ;     and %01 ; do we collide with player?
0482F0             0702*  ;     jr z,move_enemies_laser ; if not,check laser collision
0482F0             0703*  ;     call collision_enemy_with_player ; otherwise see if we hit player
0482F0             0704*  ;     and a ; was there a collision?
0482F0             0705*  ;     jr z,move_enemies_laser ; if not,see if laser smacked us
0482F0             0706*  ; ; yes collision with player
0482F0             0707*  ;     ; deduct shield damage
0482F0             0708*  ;     ld hl,sprite_shield_damage
0482F0             0709*  ;     ld a,(player_shields)
0482F0             0710*  ;     sub (hl)
0482F0             0711*  ;     ld (player_shields),a
0482F0             0712*  ; ; if shields >= 0,player survives
0482F0             0713*  ;     jp p,check_collisions_kill_nurple
0482F0             0714*  ; ; otherwise update player status so it will die
0482F0             0715*  ;     ld a,(player_collisions)
0482F0             0716*  ;     or %10 ; sets bit 1,meaning player just died
0482F0             0717*  ;     ld (player_collisions),a
0482F0             0718*  ;     ; fall through
0482F0             0719*  ; check_collisions_kill_nurple:
0482F0             0720*  ; ; kill enemy and replace with explosion
0482F0             0721*  ;     call kill_nurple
0482F0             0722*  ;     ret ; and out
0482F0             0723*  
0482F0             0724*  check_collisions:
0482F0 CD AE 82 04 0725*      call collision_enemy_with_player ; did we hit the player?
0482F4 A7          0726*      and a ; was there a collision?
0482F5 C8          0727*      ret z ; if not,we're done
0482F6 CD 90 82 04 0728*      call kill_nurple ; otherwise kill enemy
0482FA C9          0729*      ret
0482FB             0730*  
0482FB             0731*  ; did we hit the laser?
0482FB             0732*  move_enemies_laser:
0482FB FD 7E 08    0733*      ld a,(iy+sprite_collisions) ; snag what we collide with again
0482FE E6 02       0734*      and %10 ; do we even collide with laser?
048300 C8          0735*      ret z ; if not,we're out
048301 3A 05 6C 04 0736*      ld a,(laser_collisions) ; is laser alive?
048305 E6 01       0737*      and %1 ; if bit 0 is not set laser is dead
048307 C8          0738*      ret z ; so we're out
048308 CD 9B 82 04 0739*      call collision_enemy_with_laser ; otherwise check for collision
04830C A7          0740*      and a ; was there a collision?
04830D C8          0741*      ret z ; if not,we're done
04830E             0742*  ; otherwise we mark laser for termination and kill enemy
04830E             0743*  ; update laser status so it will die
04830E 3A 05 6C 04 0744*      ld a,(laser_collisions)
048312 F6 02       0745*      or %10 ; bit 1 set means laser just died
048314 32 05 6C 04 0746*      ld (laser_collisions),a
048318 CD 90 82 04 0747*      call kill_nurple ; yes there was a collision,so kill enemy
04831C C9          0748*      ret ; we're outta' here
04831D             0060   
04831D 57 65 6C 63 0061   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
048338 4C 6F 61 64 0062   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
048343 4C 6F 61 64 0063   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
048351 50 72 65 73 0064   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04836C             0065   
04836C             0066   init:
04836C             0067   ; clear all buffers
04836C CD 77 0A 04 0068       call vdu_clear_all_buffers
048370             0069   
048370             0070   ; set up the display
048370 3E 08       0071       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
048372 CD 61 09 04 0072       call vdu_set_screen_mode
048376 AF          0073       xor a
048377 CD 72 09 04 0074       call vdu_set_scaling
04837B             0075   
04837B             0076   ; enable additional audio channels
04837B CD 82 0D 04 0077   	call vdu_enable_channels
04837F             0078   
04837F             0079   ; set text background color
04837F 3E 84       0080   	ld a,4 + 128
048381 CD C9 08 04 0081   	call vdu_colour_text
048385             0082   
048385             0083   ; set text foreground color
048385 3E 2F       0084   	ld a,47 ; aaaaff lavenderish
048387 CD C9 08 04 0085   	call vdu_colour_text
04838B             0086   
04838B             0087   ; set gfx bg color
04838B AF          0088   	xor a ; plotting mode 0
04838C 0E 84       0089   	ld c,4+128 ; dark blue bg
04838E CD DA 08 04 0090   	call vdu_gcol
048392 CD C4 08 04 0091   	call vdu_clg
048396             0092   
048396             0093   ; set the cursor off
048396 CD 79 08 04 0094   	call vdu_cursor_off
04839A             0095   
04839A             0096   ; ; VDU 28, left, bottom, right, top: Set text viewport **
04839A             0097   ; ; MIND THE LITTLE-ENDIANESS
04839A             0098   ; ; inputs: c=left,b=bottom,e=right,d=top
04839A             0099   ; 	ld c,0 ; left
04839A             0100   ; 	ld d,29 ; top
04839A             0101   ; 	ld e,39 ; right
04839A             0102   ; 	ld b,29; bottom
04839A             0103   ; 	call vdu_set_txt_viewport
04839A             0104   
04839A             0105   ; ; print loading ui message
04839A             0106   ; 	ld hl,loading_ui
04839A             0107   ; 	call printString
04839A             0108   ; 	call vdu_flip
04839A             0109   
04839A             0110   ; ; load UI images
04839A             0111   ; 	call load_ui_images
04839A             0112   
04839A             0113   ; ; ; load fonts ; TODO
04839A             0114   ; ; 	call load_font_rc
04839A             0115   
04839A             0116   ; ; initialize animated splash screen during assets loading
04839A             0117   ; 	call img_load_init
04839A             0118   
04839A             0119   ; ; load sprites
04839A             0120   ; 	ld bc,sprites_num_images
04839A             0121   ; 	ld hl,sprites_image_list
04839A             0122   ; 	ld (cur_image_list),hl
04839A             0123   ; 	call img_load_main
04839A             0124   
04839A             0125   ; ; load sound effects ; TODO
04839A             0126   ; 	ld bc,SFX_num_buffers
04839A             0127   ; 	ld hl,SFX_buffer_id_lut
04839A             0128   ; 	ld (cur_buffer_id_lut),hl
04839A             0129   ; 	ld hl,SFX_load_routines_table
04839A             0130   ; 	ld (cur_load_jump_table),hl
04839A             0131   ; 	call sfx_load_main
04839A             0132   
04839A             0133   ; ; print loading complete message and wait for user keypress
04839A             0134   ; 	call vdu_cls
04839A             0135   ; 	ld hl,loading_complete
04839A             0136   ; 	call printString
04839A             0137   ; 	call vdu_flip
04839A             0138   ; 	call waitKeypress
04839A             0139   
04839A             0140   ; set up display for gameplay
04839A 3E 08       0141       ld a,8
04839C CD 61 09 04 0142       call vdu_set_screen_mode
0483A0 AF          0143       xor a
0483A1 CD 72 09 04 0144       call vdu_set_scaling
0483A5 01 20 00 00 0145   	ld bc,32
0483A9 11 10 00 00 0146   	ld de,16
0483AD CD 1D 09 04 0147   	call vdu_set_gfx_origin
0483B1 CD 79 08 04 0148   	call vdu_cursor_off
0483B5             0149   ; set gfx viewport to scrolling window
0483B5 01 00 00 00 0150   	ld bc,0
0483B9 11 00 00 00 0151   	ld de,0
0483BD DD 21 FF 00 0152   	ld ix,255
       00          
0483C2 FD 21 DF 00 0153   	ld iy,239-16
       00          
0483C7 CD 38 09 04 0154   	call vdu_set_gfx_viewport
0483CB             0155   
0483CB             0156   ; load sprite bitmaps
0483CB CD 66 30 04 0157   	call bmp2_init
0483CF             0158   
0483CF             0159   ; initialize sprites
0483CF CD F6 0F 04 0160   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0483D3 AF          0161   	xor a
0483D4             0162   @sprite_loop:
0483D4 F5          0163   	push af
0483D5 CD CA 0E 04 0164   	call vdu_sprite_select
0483D9 21 00 01 00 0165   	ld hl,BUF_0TILE_EMPTY ; can be anything, but why not blank?
0483DD CD 17 10 04 0166   	call vdu_sprite_add_buff
0483E1 F1          0167   	pop af
0483E2 3C          0168   	inc a
0483E3 FE 11       0169   	cp table_max_records+1 ; tack on sprites for player and laser
0483E5 20 ED       0170   	jr nz,@sprite_loop
0483E7 3C          0171   	inc a
0483E8 CD FE 0E 04 0172   	call vdu_sprite_activate
0483EC             0173   
0483EC             0174   ; define player sprite
0483EC 3E 10       0175   	ld a,16
0483EE CD CA 0E 04 0176   	call vdu_sprite_select
0483F2 CD DD 0E 04 0177   	call vdu_sprite_clear_frames
0483F6 21 34 01 00 0178   	ld hl,BUF_SHIP_0L
0483FA 01 03 00 00 0179   	ld bc,3 ; three bitmaps for player ship
0483FE             0180   @sprite_player_loop:
0483FE C5          0181   	push bc
0483FF E5          0182   	push hl
048400 CD 17 10 04 0183   	call vdu_sprite_add_buff
048404 E1          0184   	pop hl
048405 23          0185   	inc hl
048406 C1          0186   	pop bc
048407 10 F5       0187   	djnz @sprite_player_loop
048409             0188   
048409             0189   ; initialization done
048409 C9          0190   	ret
04840A             0191   
04840A             0192   main:
04840A             0193   	; call new_game
04840A             0194   
04840A             0195   ; initialize player
04840A CD 29 6B 04 0196   	call player_init
04840E CD 40 0F 04 0197   	call vdu_sprite_show
048412             0198   
048412             0199   ; spawn an enemy sprite
048412 06 10       0200   	ld b,table_max_records
048414             0201   @spawn_enemy_loop:
048414 C5          0202   	push bc
048415 CD D1 81 04 0203   	call enemy_init_from_landing_pad
048419 C1          0204   	pop bc
04841A 10 F8       0205   	djnz @spawn_enemy_loop
04841C             0206   
04841C             0207   main_loop:
04841C             0208   ; move player
04841C             0209   
04841C             0210   ; move enemies
04841C             0211   
04841C             0212   ; move tiles
04841C             0213   
04841C             0214   ; render ui
04841C             0215   
04841C             0216   ; check for escape key and quit if pressed
04841C             0217   	MOSCALL mos_getkbmap
04841C 3E 1E       0001M  			LD	A, function
04841E 49 CF       0002M  			RST.LIS	08h
048420             0218   ; 113 Escape
048420 DD CB 0E 46 0219       bit 0,(ix+14)
048424 20 02       0220   	jr nz,main_end
048426             0221   @Escape:
048426 18 F4       0222   	jr main_loop
048428             0223   
048428             0224   main_end:
048428             0225   	; call do_outro
048428             0226   
048428 CD 77 0A 04 0227       call vdu_clear_all_buffers
04842C CD AA 0D 04 0228   	call vdu_disable_channels
048430             0229   
048430             0230   ; restore screen to something normalish
048430 AF          0231   	xor a
048431 CD 61 09 04 0232   	call vdu_set_screen_mode
048435 CD 6B 08 04 0233   	call vdu_cursor_on
048439 C9          0234   	ret
04843A             0235   
04843A             0236   new_game:
04843A             0237   ; initialize the first level
04843A AF          0238   	xor a
04843B 32 FA 6E 04 0239   	ld (cur_level),a
04843F CD 82 6F 04 0240   	call init_level
048443             0241   ; initialize player
048443 CD 29 6B 04 0242   	call player_init
048447 C9          0243   	ret

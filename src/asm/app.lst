PC     Output      Line
040000             0001   	.assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 45 00 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   start:
040045 F5          0012       push af
040046 C5          0013       push bc
040047 D5          0014       push de
040048 DD E5       0015       push ix
04004A FD E5       0016       push iy
04004C             0017   
04004C             0018   ; ###############################################
04004C CD CA 27 04 0019   	call	init			; Initialization code
040050 CD 53 28 04 0020   	call 	main			; Call the main function
040054             0021   ; ###############################################
040054             0022   
040054             0023   exit:
040054 FD E1       0024       pop iy
040056 DD E1       0025       pop ix
040058 D1          0026       pop de
040059 C1          0027       pop bc
04005A F1          0028       pop af
04005B 21 00 00 00 0029       ld hl,0
04005F C9          0030       ret
040060             0031   
040060             0032   ; API includes
040060             0033       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ;
040060             0003*  ; Title:	AGON MOS - API for user projects
040060             0004*  ; Author:	Dean Belfield
040060             0005*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0006*  ;			Added MOS error codes for return in HL
040060             0007*  ; Created:	03/08/2022
040060             0008*  ; Last Updated:	10/08/2023
040060             0009*  ;
040060             0010*  ; Modinfo:
040060             0011*  ; 05/08/2022:	Added mos_feof
040060             0012*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0013*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0014*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0015*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0016*  ; 13/10/2022:	Added mos_oscli
040060             0017*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0018*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0019*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0020*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0021*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0022*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0023*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0024*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0025*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0026*  ; 19/05/2023:	Added sysvar_scrMode
040060             0027*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0028*  ; 03/08/2023:	Added mos_setkbvector
040060             0029*  ; 10/08/2023:	Added mos_getkbmap
040060             0030*  
040060             0031*  ; VDP control (VDU 23, 0, n)
040060             0032*  ;
040060             0033*  vdp_gp:				EQU 80h
040060             0034*  vdp_keycode:		EQU 81h
040060             0035*  vdp_cursor:			EQU	82h
040060             0036*  vdp_scrchar:		EQU	83h
040060             0037*  vdp_scrpixel:		EQU	84h
040060             0038*  vdp_audio:			EQU	85h
040060             0039*  vdp_mode:			EQU	86h
040060             0040*  vdp_rtc:			EQU	87h
040060             0041*  vdp_keystate:		EQU	88h
040060             0042*  vdp_logicalcoords:	EQU	C0h
040060             0043*  vdp_terminalmode:	EQU	FFh
040060             0044*  
040060             0045*  ;
040060             0046*  ; Macro for calling the API
040060             0047*  ; Parameters:
040060             0048*  ; - function: One of the function numbers listed below
040060             0049*  ;
040060             0050*  	MACRO	MOSCALL	function
040060             0051*  			LD	A, function
040060             0052*  			RST.LIL	08h
040060             0053*  	ENDMACRO
040060             0054*  
040060             0055*  ; MOS high level functions
040060             0056*  ;
040060             0057*  ; Get keycode
040060             0058*  ; Returns:
040060             0059*  ;  A: ASCII code of key pressed, or 0 if no key pressed
040060             0060*  mos_getkey:			EQU	00h
040060             0061*  
040060             0062*  ; Load an area of memory from a file.
040060             0063*  ; HLU: Address of filename (zero terminated)
040060             0064*  ; DEU: Address at which to load
040060             0065*  ; BCU: Maximum allowed size (bytes)
040060             0066*  ; Returns:
040060             0067*  ; - A: File error, or 0 if OK
040060             0068*  ; - F: Carry reset indicates no room for file.
040060             0069*  mos_load:			EQU	01h
040060             0070*  
040060             0071*  ; Save a file to the SD card from RAM
040060             0072*  ; HLU: Address of filename (zero terminated)
040060             0073*  ; DEU: Address to save from
040060             0074*  ; BCU: Number of bytes to save
040060             0075*  ; Returns:
040060             0076*  ; - A: File error, or 0 if OK
040060             0077*  ; - F: Carry reset indicates no room for file
040060             0078*  mos_save:			EQU	02h
040060             0079*  
040060             0080*  ; Change directory
040060             0081*  ; HLU: Address of path (zero terminated)
040060             0082*  ; Returns:
040060             0083*  ; - A: File error, or 0 if OK
040060             0084*  mos_cd:				EQU	03h
040060             0085*  
040060             0086*  ; Directory listing
040060             0087*  ; HLU: Address of path (zero terminated)
040060             0088*  ; Returns:
040060             0089*  ; - A: File error, or 0 if OK
040060             0090*  mos_dir:			EQU	04h
040060             0091*  
040060             0092*  ; Delete a file from the SD card
040060             0093*  ; HLU: Address of filename (zero terminated)
040060             0094*  ; Returns:
040060             0095*  ; - A: File error, or 0 if OK
040060             0096*  mos_del:			EQU	05h
040060             0097*  
040060             0098*  ; Rename a file on the SD card
040060             0099*  ; HLU: Address of filename1 (zero terminated)
040060             0100*  ; DEU: Address of filename2 (zero terminated)
040060             0101*  ; Returns:
040060             0102*  ; - A: File error, or 0 if OK
040060             0103*  mos_ren:			EQU	06h
040060             0104*  
040060             0105*  ; Make a folder on the SD card
040060             0106*  ; HLU: Address of filename (zero terminated)
040060             0107*  ; Returns:
040060             0108*  ; - A: File error, or 0 if OK
040060             0109*  mos_mkdir:			EQU	07h
040060             0110*  
040060             0111*  ; Get a pointer to a system variable
040060             0112*  ; Returns:
040060             0113*  ; IXU: Pointer to system variables (see mos_api.asm for more details)
040060             0114*  mos_sysvars:		EQU	08h
040060             0115*  
040060             0116*  ; Invoke the line editor
040060             0117*  ; HLU: Address of the buffer
040060             0118*  ; BCU: Buffer length
040060             0119*  ;   E: 0 to not clear buffer, 1 to clear
040060             0120*  ; Returns:
040060             0121*  ;   A: Key that was used to exit the input loop (CR=13, ESC=27)
040060             0122*  mos_editline:		EQU	09h
040060             0123*  
040060             0124*  ; Open a file
040060             0125*  ; HLU: Filename
040060             0126*  ;   C: Mode
040060             0127*  ; Returns:
040060             0128*  ;   A: Filehandle, or 0 if couldn't open
040060             0129*  mos_fopen:			EQU	0Ah
040060             0130*  
040060             0131*  ; Close a file
040060             0132*  ;   C: Filehandle
040060             0133*  ; Returns
040060             0134*  ;   A: Number of files still open
040060             0135*  mos_fclose:			EQU	0Bh
040060             0136*  
040060             0137*  ; Get a character from a file
040060             0138*  ;   C: Filehandle
040060             0139*  ; Returns:
040060             0140*  ;   A: Character read
040060             0141*  ;   F: C set if last character in file, otherwise NC
040060             0142*  mos_fgetc:			EQU	0Ch
040060             0143*  
040060             0144*  ; Write a character to a file
040060             0145*  ;   C: Filehandle
040060             0146*  ;   B: Character to write
040060             0147*  mos_fputc:			EQU	0Dh
040060             0148*  
040060             0149*  ; Check whether we're at the end of the file
040060             0150*  ;   C: Filehandle
040060             0151*  ; Returns:
040060             0152*  ;   A: 1 if at end of file, otherwise 0
040060             0153*  mos_feof:			EQU	0Eh
040060             0154*  
040060             0155*  ; Copy an error message
040060             0156*  ;   E: The error code
040060             0157*  ; HLU: Address of buffer to copy message into
040060             0158*  ; BCU: Size of buffer
040060             0159*  mos_getError:		EQU	0Fh
040060             0160*  
040060             0161*  ; Execute a MOS command
040060             0162*  ; HLU: Pointer the the MOS command string
040060             0163*  ; DEU: Pointer to additional command structure
040060             0164*  ; BCU: Number of additional commands
040060             0165*  ; Returns:
040060             0166*  ;   A: MOS error code
040060             0167*  mos_oscli:			EQU	10h
040060             0168*  
040060             0169*  ; Copy a file on the SD card
040060             0170*  ; HLU: Address of filename1 (zero terminated)
040060             0171*  ; DEU: Address of filename2 (zero terminated)
040060             0172*  ; Returns:
040060             0173*  ; - A: File error, or 0 if OK
040060             0174*  mos_copy:			EQU	11h
040060             0175*  
040060             0176*  ; Fetch a RTC string
040060             0177*  ; HLU: Pointer to a buffer to copy the string to
040060             0178*  ; Returns:
040060             0179*  ;   A: Length of time
040060             0180*  mos_getrtc:			EQU	12h
040060             0181*  
040060             0182*  ; Set the RTC
040060             0183*  ; HLU: Pointer to a buffer with the time data in
040060             0184*  mos_setrtc:			EQU	13h
040060             0185*  
040060             0186*  ; Set an interrupt vector
040060             0187*  ; HLU: Pointer to the interrupt vector (24-bit pointer)
040060             0188*  ;   E: Vector # to set
040060             0189*  ; Returns:
040060             0190*  ; HLU: Pointer to the previous vector
040060             0191*  mos_setintvector:	EQU	14h
040060             0192*  
040060             0193*  ; Open UART1
040060             0194*  ; IXU: Pointer to UART struct
040060             0195*  ;	+0: Baud rate (24-bit, little endian)
040060             0196*  ;	+3: Data bits
040060             0197*  ;	+4: Stop bits
040060             0198*  ;	+5: Parity bits
040060             0199*  ;	+6: Flow control (0: None, 1: Hardware)
040060             0200*  ;	+7: Enabled interrupts
040060             0201*  ; Returns:
040060             0202*  ;   A: Error code (0 = no error)
040060             0203*  mos_uopen:			EQU	15h
040060             0204*  
040060             0205*  ; Close UART1
040060             0206*  mos_uclose:			EQU	16h
040060             0207*  
040060             0208*  ; Get a character from UART1
040060             0209*  ; Returns:
040060             0210*  ;   A: Character read
040060             0211*  ;   F: C if successful
040060             0212*  ;   F: NC if the UART is not open
040060             0213*  mos_ugetc:			EQU	17h
040060             0214*  
040060             0215*  ; Write a character to UART1
040060             0216*  ;   C: Character to write
040060             0217*  ; Returns:
040060             0218*  ;   F: C if successful
040060             0219*  ;   F: NC if the UART is not open
040060             0220*  mos_uputc:			EQU	18h
040060             0221*  
040060             0222*  ; Convert a file handle to a FIL structure pointer
040060             0223*  ;   C: Filehandle
040060             0224*  ; Returns:
040060             0225*  ; HLU: Pointer to a FIL struct
040060             0226*  mos_getfil:			EQU	19h
040060             0227*  
040060             0228*  ; Read a block of data from a file
040060             0229*  ;   C: Filehandle
040060             0230*  ; HLU: Pointer to where to write the data to
040060             0231*  ; DEU: Number of bytes to read
040060             0232*  ; Returns:
040060             0233*  ; DEU: Number of bytes read
040060             0234*  mos_fread:			EQU	1Ah
040060             0235*  
040060             0236*  ; Write a block of data to a file
040060             0237*  ;  C: Filehandle
040060             0238*  ; HLU: Pointer to where the data is
040060             0239*  ; DEU: Number of bytes to write
040060             0240*  ; Returns:
040060             0241*  ; DEU: Number of bytes read
040060             0242*  mos_fwrite:			EQU	1Bh
040060             0243*  
040060             0244*  ; Move the read/write pointer in a file
040060             0245*  ;   C: Filehandle
040060             0246*  ; HLU: Least significant 3 bytes of the offset from the start of the file (DWORD)
040060             0247*  ;   E: Most significant byte of the offset
040060             0248*  ; Returns:
040060             0249*  ;   A: FRESULT
040060             0250*  mos_flseek:			EQU	1Ch
040060             0251*  
040060             0252*  ; Move the read/write pointer in a file relative to the current position
040060             0253*  ;   C: Filehandle
040060             0254*  ; DEU: Signed 24-bit offset
040060             0255*  ; Returns:
040060             0256*  ;   A: FRESULT
040060             0257*  mos_api_flseek_rel:
040060 C5          0258*  	push bc ; back up file handle in c
040061 D5          0259*  	push de ; save offset
040062             0260*  	MOSCALL mos_getfil
040062 3E 19       0001*M 			LD	A, function
040064 5B CF       0002*M 			RST.LIL	08h
040066 E5          0261*  	push hl
040067 FD E1       0262*  	pop iy ; iy points to FIL struct
040069 FD 27 11    0263*  	ld hl,(iy+fil_fptr) ; get lowest 3 bytes of current position
04006C AF          0264*  	xor a ; clear carry
04006D D1          0265*  	pop de ; restore offset
04006E ED 5A       0266*  	adc hl,de ; adc the offset because we need sign flag
040070 F2 78 00 04 0267*  	jp p,@not_neg
040074 21 00 00 00 0268*  	ld hl,0 ; seek to beginning of file
040078             0269*  @not_neg:
040078 C1          0270*  	pop bc ; restore file handle to c
040079 1E 00       0271*  	ld e,0 ; highest byte of offset
04007B             0272*  	MOSCALL mos_flseek
04007B 3E 1C       0001*M 			LD	A, function
04007D 5B CF       0002*M 			RST.LIL	08h
04007F C9          0273*  	ret
040080             0274*  
040080             0275*  ; Set a VDP keyboard packet receiver callback
040080             0276*  ;   C: If non-zero then set the top byte of HLU(callback address)  to MB (for ADL=0 callers)
040080             0277*  ; HLU: Pointer to callback
040080             0278*  mos_setkbvector:	EQU	1Dh
040080             0279*  
040080             0280*  ; Get the address of the keyboard map
040080             0281*  ; Returns:
040080             0282*  ; IXU: Base address of the keymap
040080             0283*  mos_getkbmap:		EQU	1Eh
040080             0284*  
040080             0285*  ; MOS program exit codes
040080             0286*  ;
040080             0287*  EXIT_OK:				EQU  0;	"OK",
040080             0288*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040080             0289*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040080             0290*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040080             0291*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040080             0292*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040080             0293*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040080             0294*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040080             0295*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040080             0296*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040080             0297*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040080             0298*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040080             0299*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040080             0300*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040080             0301*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040080             0302*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040080             0303*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040080             0304*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040080             0305*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040080             0306*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040080             0307*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040080             0308*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040080             0309*  
040080             0310*  ; FatFS file access functions
040080             0311*  ;
040080             0312*  ; Open a file
040080             0313*  ; HLU: Pointer to a blank FIL struct
040080             0314*  ; DEU: Pointer to the filename (0 terminated)
040080             0315*  ;   C: File mode
040080             0316*  ; Returns:
040080             0317*  ;   A: FRESULT
040080             0318*  ffs_fopen:			EQU	80h
040080             0319*  
040080             0320*  ; Close a file
040080             0321*  ; HLU: Pointer to a blank FIL struct
040080             0322*  ; Returns:
040080             0323*  ;   A: FRESULT
040080             0324*  ffs_fclose:			EQU	81h
040080             0325*  
040080             0326*  ; Read data from a file
040080             0327*  ; HLU: Pointer to a FIL struct
040080             0328*  ; DEU: Pointer to where to write the file out
040080             0329*  ; BCU: Number of bytes to read
040080             0330*  ; Returns:
040080             0331*  ;   A: FRESULT
040080             0332*  ; BCU: Number of bytes read
040080             0333*  ffs_fread:			EQU	82h
040080             0334*  
040080             0335*  ; Write data to a file
040080             0336*  ; HLU: Pointer to a FIL struct
040080             0337*  ; DEU: Pointer to the data to write out
040080             0338*  ; BCU: Number of bytes to write
040080             0339*  ; Returns:
040080             0340*  ;   A: FRESULT
040080             0341*  ; BCU: Number of bytes written
040080             0342*  ffs_fwrite:			EQU	83h
040080             0343*  
040080             0344*  ; Move the read/write pointer in a file
040080             0345*  ; HLU: Pointer to a FIL struct
040080             0346*  ; DEU: Least significant 3 bytes of the offset from the start of the file (DWORD)
040080             0347*  ;   C: Most significant byte of the offset
040080             0348*  ; Returns:
040080             0349*  ;   A: FRESULT
040080             0350*  ffs_flseek:			EQU	84h
040080             0351*  
040080             0352*  ; not implemented
040080             0353*  ffs_ftruncate:		EQU	85h
040080             0354*  
040080             0355*  ; not implemented
040080             0356*  ffs_fsync:			EQU	86h
040080             0357*  
040080             0358*  ; not implemented
040080             0359*  ffs_fforward:		EQU	87h
040080             0360*  
040080             0361*  ; not implemented
040080             0362*  ffs_fexpand:		EQU	88h
040080             0363*  
040080             0364*  ; not implemented
040080             0365*  ffs_fgets:			EQU	89h
040080             0366*  
040080             0367*  ; not implemented
040080             0368*  ffs_fputc:			EQU	8Ah
040080             0369*  
040080             0370*  ; not implemented
040080             0371*  ffs_fputs:			EQU	8Bh
040080             0372*  
040080             0373*  ; not implemented
040080             0374*  ffs_fprintf:		EQU	8Ch
040080             0375*  
040080             0376*  ; not implemented
040080             0377*  ffs_ftell:			EQU	8Dh
040080             0378*  
040080             0379*  ; Check for EOF
040080             0380*  ; HLU: Pointer to a FILINFO struct
040080             0381*  ; Returns:
040080             0382*  ;   A: 1 if end of file, otherwise 0
040080             0383*  ffs_feof:			EQU	8Eh
040080             0384*  
040080             0385*  ; not implemented
040080             0386*  ffs_fsize:			EQU	8Fh
040080             0387*  
040080             0388*  ; not implemented
040080             0389*  ffs_ferror:			EQU	90h
040080             0390*  
040080             0391*  ; FatFS directory access functions
040080             0392*  ;
040080             0393*  ; Open a directory
040080             0394*  ; HLU: Pointer to a blank DIR struct
040080             0395*  ; DEU: Pointer to the directory path
040080             0396*  ; Returns:
040080             0397*  ; A: FRESULT
040080             0398*  ffs_dopen:			EQU	91h
040080             0399*  
040080             0400*  ; Close a directory
040080             0401*  ; HLU: Pointer to an open DIR struct
040080             0402*  ; Returns:
040080             0403*  ; A: FRESULT
040080             0404*  ffs_dclose:			EQU	92h
040080             0405*  
040080             0406*  ; Read the next FILINFO from an open DIR
040080             0407*  ; HLU: Pointer to an open DIR struct
040080             0408*  ; DEU: Pointer to an empty FILINFO struct
040080             0409*  ; Returns:
040080             0410*  ; A: FRESULT
040080             0411*  ffs_dread:			EQU	93h
040080             0412*  
040080             0413*  ; not implemented
040080             0414*  ffs_dfindfirst:		EQU	94h
040080             0415*  
040080             0416*  ; not implemented
040080             0417*  ffs_dfindnext:		EQU	95h
040080             0418*  
040080             0419*  ; FatFS file and directory management functions
040080             0420*  ;
040080             0421*  ; Check file exists
040080             0422*  ; HLU: Pointer to a FILINFO struct
040080             0423*  ; DEU: Pointer to the filename (0 terminated)
040080             0424*  ; Returns:
040080             0425*  ;   A: FRESULT
040080             0426*  ffs_stat:			EQU	96h
040080             0427*  
040080             0428*  ; not implemented
040080             0429*  ffs_unlink:			EQU	97h
040080             0430*  
040080             0431*  ; not implemented
040080             0432*  ffs_rename:			EQU	98h
040080             0433*  
040080             0434*  ; not implemented
040080             0435*  ffs_chmod:			EQU	99h
040080             0436*  
040080             0437*  ; not implemented
040080             0438*  ffs_utime:			EQU	9Ah
040080             0439*  
040080             0440*  ; not implemented
040080             0441*  ffs_mkdir:			EQU	9Bh
040080             0442*  
040080             0443*  ; not implemented
040080             0444*  ffs_chdir:			EQU	9Ch
040080             0445*  
040080             0446*  ; not implemented
040080             0447*  ffs_chdrive:		EQU	9Dh
040080             0448*  
040080             0449*  ; Copy the current directory (string) into buffer (hl)
040080             0450*  ; HLU: Pointer to a buffer
040080             0451*  ; BCU: Maximum length of buffer
040080             0452*  ; Returns:
040080             0453*  ; A: FRESULT
040080             0454*  ffs_getcwd:			EQU	9Eh
040080             0455*  
040080             0456*  ; FatFS volume management and system configuration functions
040080             0457*  ;
040080             0458*  ; not implemented
040080             0459*  ffs_mount:			EQU	9Fh
040080             0460*  
040080             0461*  ; not implemented
040080             0462*  ffs_mkfs:			EQU	A0h
040080             0463*  
040080             0464*  ; not implemented
040080             0465*  ffs_fdisk:			EQU	A1h
040080             0466*  
040080             0467*  ; not implemented
040080             0468*  ffs_getfree:		EQU	A2h
040080             0469*  
040080             0470*  ; not implemented
040080             0471*  ffs_getlabel:		EQU	A3h
040080             0472*  
040080             0473*  ; not implemented
040080             0474*  ffs_setlabel:		EQU	A4h
040080             0475*  
040080             0476*  ; not implemented
040080             0477*  ffs_setcp:			EQU	A5h
040080             0478*  
040080             0479*  ; File access modes
040080             0480*  ;
040080             0481*  fa_read:			EQU	01h
040080             0482*  fa_write:			EQU	02h
040080             0483*  fa_open_existing:	EQU	00h
040080             0484*  fa_create_new:		EQU	04h
040080             0485*  fa_create_always:	EQU	08h
040080             0486*  fa_open_always:		EQU	10h
040080             0487*  fa_open_append:		EQU	30h
040080             0488*  
040080             0489*  ; System variable indexes for api_sysvars
040080             0490*  ; Index into _sysvars in globals.asm
040080             0491*  ;
040080             0492*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040080             0493*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040080             0494*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040080             0495*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040080             0496*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040080             0497*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040080             0498*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040080             0499*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040080             0500*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040080             0501*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040080             0502*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040080             0503*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040080             0504*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040080             0505*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040080             0506*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040080             0507*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040080             0508*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040080             0509*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040080             0510*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040080             0511*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040080             0512*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040080             0513*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040080             0514*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040080             0515*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040080             0516*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040080             0517*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040080             0518*  
040080             0519*  ; Flags for the VPD protocol
040080             0520*  ;
040080             0521*  vdp_pflag_cursor:		EQU	00000001b
040080             0522*  vdp_pflag_scrchar:		EQU	00000010b
040080             0523*  vdp_pflag_point:		EQU	00000100b
040080             0524*  vdp_pflag_audio:		EQU	00001000b
040080             0525*  vdp_pflag_mode:			EQU	00010000b
040080             0526*  vdp_pflag_rtc:			EQU	00100000b
040080             0527*  
040080             0528*  ;
040080             0529*  ; FatFS structures
040080             0530*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040080             0531*  ;
040080             0532*  ; Object ID and allocation information (FFOBJID)
040080             0533*  ;
040080             0534*  ; Indexes into FFOBJID structure
040080             0535*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040080             0536*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040080             0537*  ffobjid_attr:		EQU	5	; 1: Object attribute
040080             0538*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040080             0539*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040080             0540*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040080             0541*  ;
040080             0542*  ; File object structure (FIL)
040080             0543*  ;
040080             0544*  ; Indexes into FIL structure
040080             0545*  fil_obj:		EQU 0	; 15: Object identifier
040080             0546*  fil_flag:		EQU	15 	;  1: File status flags
040080             0547*  fil_err:		EQU	16	;  1: Abort flag (error code)
040080             0548*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040080             0549*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040080             0550*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040080             0551*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040080             0552*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040080             0553*  ;
040080             0554*  ; Directory object structure (DIR)
040080             0555*  ; Indexes into DIR structure
040080             0556*  dir_obj:		EQU  0	; 15: Object identifier
040080             0557*  dir_dptr:		EQU	15	;  4: Current read/write offset
040080             0558*  dir_clust:		EQU	19	;  4: Current cluster
040080             0559*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040080             0560*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040080             0561*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040080             0562*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040080             0563*  ;
040080             0564*  ; File information structure (FILINFO)
040080             0565*  ;
040080             0566*  ; Indexes into FILINFO structure
040080             0567*  filinfo_fsize:		EQU 0	;   4: File size
040080             0568*  filinfo_fdate:		EQU	4	;   2: Modified date
040080             0569*  filinfo_ftime:		EQU	6	;   2: Modified time
040080             0570*  filinfo_fattrib:	EQU	8	;   1: File attribute
040080             0571*  filinfo_altname:	EQU	9	;  13: Alternative file name
040080             0572*  filinfo_fname:		EQU	22	; 256: Primary file name
040080             0034       include "functions.inc"
040080             0001*      MACRO printChar char
040080             0002*          LD A, char
040080             0003*          RST.LIL 10h
040080             0004*      ENDMACRO
040080             0005*  
040080             0006*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040080             0007*  ; Print a zero-terminated string
040080             0008*  ; HL: Pointer to string
040080             0009*  printString:
040080 C5          0010*  	PUSH	BC
040081 01 00 00 00 0011*  	LD		BC,0
040085 3E 00       0012*  	LD 	 	A,0
040087 5B DF       0013*  	RST.LIL 18h
040089 C1          0014*  	POP		BC
04008A C9          0015*  	RET
04008B             0016*  ; print a VDU sequence
04008B             0017*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04008B             0018*  sendVDUsequence:
04008B C5          0019*  	PUSH	BC
04008C 01 00 00 00 0020*  	LD		BC, 0
040090 4E          0021*  	LD		C, (HL)
040091 5B DF       0022*  	RST.LIL	18h
040093 C1          0023*  	POP		BC
040094 C9          0024*  	RET
040095             0025*  ; Print Newline sequence to VDP
040095             0026*  printNewLine:
040095 F5          0027*      push af ; for some reason rst.lil 10h sets carry flag
040096 3E 0D       0028*  	LD	A, '\r'
040098 5B D7       0029*  	RST.LIL 10h
04009A 3E 0A       0030*  	LD	A, '\n'
04009C 5B D7       0031*  	RST.LIL 10h
04009E F1          0032*      pop af
04009F C9          0033*  	RET
0400A0             0034*  ; Print a 24-bit HEX number
0400A0             0035*  ; HLU: Number to print
0400A0             0036*  printHex24:
0400A0 E5          0037*  	PUSH	HL
0400A1 21 02 00 00 0038*  	LD		HL, 2
0400A5 39          0039*  	ADD		HL, SP
0400A6 7E          0040*  	LD		A, (HL)
0400A7 E1          0041*  	POP		HL
0400A8 CD B2 00 04 0042*  	CALL	printHex8
0400AC             0043*  ; Print a 16-bit HEX number
0400AC             0044*  ; HL: Number to print
0400AC             0045*  printHex16:
0400AC 7C          0046*  	LD		A,H
0400AD CD B2 00 04 0047*  	CALL	printHex8
0400B1 7D          0048*  	LD		A,L
0400B2             0049*  ; Print an 8-bit HEX number
0400B2             0050*  ; A: Number to print
0400B2             0051*  printHex8:
0400B2 4F          0052*  	LD		C,A
0400B3 1F          0053*  	RRA
0400B4 1F          0054*  	RRA
0400B5 1F          0055*  	RRA
0400B6 1F          0056*  	RRA
0400B7 CD BC 00 04 0057*  	CALL	@F
0400BB 79          0058*  	LD		A,C
0400BC             0059*  @@:
0400BC E6 0F       0060*  	AND		0Fh
0400BE C6 90       0061*  	ADD		A,90h
0400C0 27          0062*  	DAA
0400C1 CE 40       0063*  	ADC		A,40h
0400C3 27          0064*  	DAA
0400C4 5B D7       0065*  	RST.LIL	10h
0400C6 C9          0066*  	RET
0400C7             0067*  
0400C7             0068*  ; Print a 0x HEX prefix
0400C7             0069*  DisplayHexPrefix:
0400C7 3E 30       0070*  	LD	A, '0'
0400C9 5B D7       0071*  	RST.LIL 10h
0400CB 3E 78       0072*  	LD	A, 'x'
0400CD 5B D7       0073*  	RST.LIL 10h
0400CF C9          0074*  	RET
0400D0             0075*  
0400D0             0076*      MACRO printDecBC
0400D0             0077*          push hl
0400D0             0078*          push bc
0400D0             0079*          pop hl
0400D0             0080*          call printDec
0400D0             0081*          pop hl
0400D0             0082*      ENDMACRO
0400D0             0083*  
0400D0             0084*      MACRO printDecDE
0400D0             0085*          push hl
0400D0             0086*          push de
0400D0             0087*          pop hl
0400D0             0088*          call printDec
0400D0             0089*          pop hl
0400D0             0090*      ENDMACRO
0400D0             0091*  
0400D0             0092*      MACRO printDecHL
0400D0             0093*          call printDec
0400D0             0094*      ENDMACRO
0400D0             0095*  
0400D0             0096*      MACRO printDecIX
0400D0             0097*          push hl
0400D0             0098*          push ix
0400D0             0099*          pop hl
0400D0             0100*          call printDec
0400D0             0101*          pop hl
0400D0             0102*      ENDMACRO
0400D0             0103*  
0400D0             0104*      MACRO printDecIY
0400D0             0105*          push hl
0400D0             0106*          push iy
0400D0             0107*          pop hl
0400D0             0108*          call printDec
0400D0             0109*          pop hl
0400D0             0110*      ENDMACRO
0400D0             0111*  
0400D0             0112*  ; Prints the right justified decimal value in HL without leading zeroes
0400D0             0113*  ; HL : Value to print
0400D0             0114*  printDec:
0400D0             0115*  ; BEGIN MY CODE
0400D0             0116*  ; back up all the things
0400D0 F5          0117*      push af
0400D1 C5          0118*      push bc
0400D2 D5          0119*      push de
0400D3 E5          0120*      push hl
0400D4             0121*  ; END MY CODE
0400D4 11 FC 00 04 0122*  	LD	 DE, _printDecBuffer
0400D8 CD 05 01 04 0123*  	CALL Num2String
0400DC             0124*  ; BEGIN MY CODE
0400DC             0125*  ; replace leading zeroes with spaces
0400DC 21 FC 00 04 0126*      LD	 HL, _printDecBuffer
0400E0 06 07       0127*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0400E2             0128*  @loop:
0400E2 7E          0129*      LD	 A, (HL)
0400E3 FE 30       0130*      CP	 '0'
0400E5 C2 F3 00 04 0131*      JP	 NZ, @done
0400E9 3E 20       0132*      LD   A, ' '
0400EB 77          0133*      LD	 (HL), A
0400EC 23          0134*      INC	 HL
0400ED CD 82 06 04 0135*      CALL vdu_cursor_forward
0400F1 10 EF       0136*      DJNZ @loop
0400F3             0137*  @done:
0400F3             0138*  ; END MY CODE
0400F3             0139*  	; LD	 HL, _printDecBuffer
0400F3 CD 80 00 04 0140*  	CALL printString
0400F7             0141*  ; BEGIN MY CODE
0400F7             0142*  ; restore all the things
0400F7 E1          0143*      pop hl
0400F8 D1          0144*      pop de
0400F9 C1          0145*      pop bc
0400FA F1          0146*      pop af
0400FB             0147*  ; END MY CODE
0400FB C9          0148*  	RET
0400FC 00 00 00 00 0149*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
040105             0150*  
040105             0151*  ; This routine converts the value from HL into it's ASCII representation,
040105             0152*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040105             0153*  ; so it will allways be 8 characters length
040105             0154*  ; HL : Value to convert to string
040105             0155*  ; DE : pointer to buffer, at least 8 byte + 0
040105             0156*  Num2String:
040105 01 80 69 67 0157*  	LD	 BC,-10000000
040109 CD 3C 01 04 0158*  	CALL OneDigit
04010D 01 C0 BD F0 0159*  	LD	 BC,-1000000
040111 CD 3C 01 04 0160*  	CALL OneDigit
040115 01 60 79 FE 0161*  	LD	 BC,-100000
040119 CD 3C 01 04 0162*  	CALL OneDigit
04011D 01 F0 D8 FF 0163*  	LD   BC,-10000
040121 CD 3C 01 04 0164*  	CALL OneDigit
040125 01 18 FC FF 0165*  	LD   BC,-1000
040129 CD 3C 01 04 0166*  	CALL OneDigit
04012D 01 9C FF FF 0167*  	LD   BC,-100
040131 CD 3C 01 04 0168*  	CALL OneDigit
040135 0E F6       0169*  	LD   C,-10
040137 CD 3C 01 04 0170*  	CALL OneDigit
04013B 48          0171*  	LD   C,B
04013C             0172*  OneDigit:
04013C 3E 2F       0173*  	LD   A,'0'-1
04013E             0174*  DivideMe:
04013E 3C          0175*  	INC  A
04013F 09          0176*  	ADD  HL,BC
040140 38 FC       0177*  	JR   C,DivideMe
040142 ED 42       0178*  	SBC  HL,BC
040144 12          0179*  	LD   (DE),A
040145 13          0180*  	INC  DE
040146 C9          0181*  	RET
040147             0182*  
040147             0183*  
040147             0184*  ; #### new functions added by Brandon R. Gates ####
040147             0185*  
040147             0186*  ; print the binary representation of the 8-bit value in a
040147             0187*  ; destroys a, hl, bc
040147             0188*  printBin8:
040147 06 08       0189*      ld b,8      ; loop counter for 8 bits
040149 21 64 01 04 0190*      ld hl,@cmd  ; set hl to the low byte of the output string
04014D             0191*                  ; (which will be the high bit of the value in a)
04014D             0192*  @loop:
04014D 07          0193*      rlca ; put the next highest bit into carry
04014E 38 04       0194*      jr c,@one
040150 36 30       0195*      ld (hl),'0'
040152 18 02       0196*      jr @next_bit
040154             0197*  @one:
040154 36 31       0198*      ld (hl),'1'
040156             0199*  @next_bit:
040156 23          0200*      inc hl
040157 10 F4       0201*      djnz @loop
040159             0202*  ; print it
040159 21 64 01 04 0203*  	ld hl,@cmd
04015D 01 08 00 00 0204*  	ld bc,@end-@cmd
040161 5B DF       0205*  	rst.lil $18
040163 C9          0206*  	ret
040164             0207*  @cmd: ds 8 ; eight bytes for eight bits
04016C             0208*  @end:
04016C             0209*  
04016C             0210*  ; print the binary representation of the 8-bit value in a
04016C             0211*  ; in reverse order (lsb first)
04016C             0212*  ; destroys a, hl, bc
04016C             0213*  printBin8Rev:
04016C 06 08       0214*      ld b,8      ; loop counter for 8 bits
04016E 21 89 01 04 0215*      ld hl,@cmd  ; set hl to the low byte of the output string
040172             0216*                  ; (which will be the high bit of the value in a)
040172             0217*  @loop:
040172 0F          0218*      rrca ; put the next lowest bit into carry
040173 38 04       0219*      jr c,@one
040175 36 30       0220*      ld (hl),'0'
040177 18 02       0221*      jr @next_bit
040179             0222*  @one:
040179 36 31       0223*      ld (hl),'1'
04017B             0224*  @next_bit:
04017B 23          0225*      inc hl
04017C 10 F4       0226*      djnz @loop
04017E             0227*  ; print it
04017E 21 89 01 04 0228*  	ld hl,@cmd
040182 01 08 00 00 0229*  	ld bc,@end-@cmd
040186 5B DF       0230*  	rst.lil $18
040188 C9          0231*  	ret
040189             0232*  @cmd: ds 8 ; eight bytes for eight bits
040191             0233*  @end:
040191             0234*  
040191             0235*  ; print registers to screen in hexidecimal format
040191             0236*  ; inputs: none
040191             0237*  ; outputs: values of every register printed to screen
040191             0238*  ;    values of each register in global scratch memory
040191             0239*  ; destroys: nothing
040191             0240*  stepRegistersHex:
040191             0241*  ; store everything in scratch
040191 22 94 03 04 0242*      ld (uhl),hl
040195 ED 43 97 03 0243*      ld (ubc),bc
       04          
04019A ED 53 9A 03 0244*      ld (ude),de
       04          
04019F DD 22 9D 03 0245*      ld (uix),ix
       04          
0401A4 FD 22 A0 03 0246*      ld (uiy),iy
       04          
0401A9 F5          0247*      push af ; fml
0401AA E1          0248*      pop hl  ; thanks, zilog
0401AB 22 91 03 04 0249*      ld (uaf),hl
0401AF F5          0250*      push af ; dammit
0401B0             0251*  
0401B0             0252*  ; home the cursor
0401B0 CD 61 06 04 0253*      call vdu_home_cursor
0401B4             0254*  
0401B4             0255*  ; print each register
0401B4 21 1D 03 04 0256*      ld hl,str_afu
0401B8 CD 80 00 04 0257*      call printString
0401BC 2A 91 03 04 0258*      ld hl,(uaf)
0401C0 CD A0 00 04 0259*      call printHex24
0401C4 CD 95 00 04 0260*      call printNewLine
0401C8             0261*  
0401C8 21 21 03 04 0262*      ld hl,str_hlu
0401CC CD 80 00 04 0263*      call printString
0401D0 2A 94 03 04 0264*      ld hl,(uhl)
0401D4 CD A0 00 04 0265*      call printHex24
0401D8 CD 95 00 04 0266*      call printNewLine
0401DC             0267*  
0401DC 21 25 03 04 0268*      ld hl,str_bcu
0401E0 CD 80 00 04 0269*      call printString
0401E4 2A 97 03 04 0270*      ld hl,(ubc)
0401E8 CD A0 00 04 0271*      call printHex24
0401EC CD 95 00 04 0272*      call printNewLine
0401F0             0273*  
0401F0 21 29 03 04 0274*      ld hl,str_deu
0401F4 CD 80 00 04 0275*      call printString
0401F8 2A 9A 03 04 0276*      ld hl,(ude)
0401FC CD A0 00 04 0277*      call printHex24
040200 CD 95 00 04 0278*      call printNewLine
040204             0279*  
040204 21 2D 03 04 0280*      ld hl,str_ixu
040208 CD 80 00 04 0281*      call printString
04020C 2A 9D 03 04 0282*      ld hl,(uix)
040210 CD A0 00 04 0283*      call printHex24
040214 CD 95 00 04 0284*      call printNewLine
040218             0285*  
040218 21 31 03 04 0286*      ld hl,str_iyu
04021C CD 80 00 04 0287*      call printString
040220 2A A0 03 04 0288*      ld hl,(uiy)
040224 CD A0 00 04 0289*      call printHex24
040228 CD 95 00 04 0290*      call printNewLine
04022C             0291*  
04022C             0292*      ; call vsync
04022C             0293*  
04022C CD 95 00 04 0294*      call printNewLine
040230             0295*  
040230             0296*  ; check for right shift key and quit if pressed
040230             0297*  	MOSCALL mos_getkbmap
040230 3E 1E       0001*M 			LD	A, function
040232 5B CF       0002*M 			RST.LIL	08h
040234             0298*  @stayhere:
040234             0299*  ; 7 RightShift
040234 DD CB 00 76 0300*      bit 6,(ix+0)
040238 20 02       0301*      jr nz,@RightShift
04023A 18 F8       0302*      jr @stayhere
04023C             0303*  @RightShift:
04023C DD CB 0E 86 0304*      res 0,(ix+14) ; debounce the key (hopefully)
040240 3E 80       0305*      ld a,%10000000
040242 CD 41 06 04 0306*      call multiPurposeDelay
040246             0307*  
040246             0308*  ; restore everything
040246 2A 94 03 04 0309*      ld hl, (uhl)
04024A ED 4B 97 03 0310*      ld bc, (ubc)
       04          
04024F ED 5B 9A 03 0311*      ld de, (ude)
       04          
040254 DD 2A 9D 03 0312*      ld ix, (uix)
       04          
040259 FD 2A A0 03 0313*      ld iy, (uiy)
       04          
04025E F1          0314*      pop af
04025F             0315*  ; all done
04025F C9          0316*      ret
040260             0317*  
040260             0318*  ; print registers to screen in hexidecimal format
040260             0319*  ; inputs: none
040260             0320*  ; outputs: values of every register printed to screen
040260             0321*  ;    values of each register in global scratch memory
040260             0322*  ; destroys: nothing
040260             0323*  dumpRegistersHex:
040260             0324*  ; store everything in scratch
040260 22 94 03 04 0325*      ld (uhl),hl
040264 ED 43 97 03 0326*      ld (ubc),bc
       04          
040269 ED 53 9A 03 0327*      ld (ude),de
       04          
04026E DD 22 9D 03 0328*      ld (uix),ix
       04          
040273 FD 22 A0 03 0329*      ld (uiy),iy
       04          
040278 F5          0330*      push af ; fml
040279 E1          0331*      pop hl  ; thanks, zilog
04027A 22 91 03 04 0332*      ld (uaf),hl
04027E F5          0333*      push af ; dammit
04027F             0334*  
04027F             0335*  ; home the cursor
04027F             0336*      ; call vdu_home_cursor
04027F CD 95 00 04 0337*      call printNewLine
040283             0338*  
040283             0339*  ; print each register
040283 21 1D 03 04 0340*      ld hl,str_afu
040287 CD 80 00 04 0341*      call printString
04028B 2A 91 03 04 0342*      ld hl,(uaf)
04028F CD A0 00 04 0343*      call printHex24
040293 CD 95 00 04 0344*      call printNewLine
040297             0345*  
040297 21 21 03 04 0346*      ld hl,str_hlu
04029B CD 80 00 04 0347*      call printString
04029F 2A 94 03 04 0348*      ld hl,(uhl)
0402A3 CD A0 00 04 0349*      call printHex24
0402A7 CD 95 00 04 0350*      call printNewLine
0402AB             0351*  
0402AB 21 25 03 04 0352*      ld hl,str_bcu
0402AF CD 80 00 04 0353*      call printString
0402B3 2A 97 03 04 0354*      ld hl,(ubc)
0402B7 CD A0 00 04 0355*      call printHex24
0402BB CD 95 00 04 0356*      call printNewLine
0402BF             0357*  
0402BF 21 29 03 04 0358*      ld hl,str_deu
0402C3 CD 80 00 04 0359*      call printString
0402C7 2A 9A 03 04 0360*      ld hl,(ude)
0402CB CD A0 00 04 0361*      call printHex24
0402CF CD 95 00 04 0362*      call printNewLine
0402D3             0363*  
0402D3 21 2D 03 04 0364*      ld hl,str_ixu
0402D7 CD 80 00 04 0365*      call printString
0402DB 2A 9D 03 04 0366*      ld hl,(uix)
0402DF CD A0 00 04 0367*      call printHex24
0402E3 CD 95 00 04 0368*      call printNewLine
0402E7             0369*  
0402E7 21 31 03 04 0370*      ld hl,str_iyu
0402EB CD 80 00 04 0371*      call printString
0402EF 2A A0 03 04 0372*      ld hl,(uiy)
0402F3 CD A0 00 04 0373*      call printHex24
0402F7 CD 95 00 04 0374*      call printNewLine
0402FB             0375*  
0402FB CD F8 06 04 0376*      call vdu_vblank
0402FF             0377*  
0402FF CD 95 00 04 0378*      call printNewLine
040303             0379*  ; restore everything
040303 2A 94 03 04 0380*      ld hl, (uhl)
040307 ED 4B 97 03 0381*      ld bc, (ubc)
       04          
04030C ED 5B 9A 03 0382*      ld de, (ude)
       04          
040311 DD 2A 9D 03 0383*      ld ix, (uix)
       04          
040316 FD 2A A0 03 0384*      ld iy, (uiy)
       04          
04031B F1          0385*      pop af
04031C             0386*  ; all done
04031C C9          0387*      ret
04031D             0388*  
04031D 61 66 3D 00 0389*  str_afu: db "af=",0
040321 68 6C 3D 00 0390*  str_hlu: db "hl=",0
040325 62 63 3D 00 0391*  str_bcu: db "bc=",0
040329 64 65 3D 00 0392*  str_deu: db "de=",0
04032D 69 78 3D 00 0393*  str_ixu: db "ix=",0
040331 69 79 3D 00 0394*  str_iyu: db "iy=",0
040335             0395*  
040335             0396*  ; print udeuhl to screen in hexidecimal format
040335             0397*  ; inputs: none
040335             0398*  ; outputs: concatenated hexidecimal udeuhl
040335             0399*  ; destroys: nothing
040335             0400*  dumpUDEUHLHex:
040335             0401*  ; store everything in scratch
040335 22 94 03 04 0402*      ld (uhl),hl
040339 ED 43 97 03 0403*      ld (ubc),bc
       04          
04033E ED 53 9A 03 0404*      ld (ude),de
       04          
040343 DD 22 9D 03 0405*      ld (uix),ix
       04          
040348 FD 22 A0 03 0406*      ld (uiy),iy
       04          
04034D F5          0407*      push af
04034E             0408*  
04034E             0409*  ; print each register
04034E             0410*  
04034E 21 88 03 04 0411*      ld hl,str_udeuhl
040352 CD 80 00 04 0412*      call printString
040356 2A 9A 03 04 0413*      ld hl,(ude)
04035A CD A0 00 04 0414*      call printHex24
04035E 3E 2E       0415*  	ld a,'.'	; print a dot to separate the values
040360 5B D7       0416*  	rst.lil 10h
040362 2A 94 03 04 0417*      ld hl,(uhl)
040366 CD A0 00 04 0418*      call printHex24
04036A CD 95 00 04 0419*      call printNewLine
04036E             0420*  
04036E             0421*  ; restore everything
04036E 2A 94 03 04 0422*      ld hl, (uhl)
040372 ED 4B 97 03 0423*      ld bc, (ubc)
       04          
040377 ED 5B 9A 03 0424*      ld de, (ude)
       04          
04037C DD 2A 9D 03 0425*      ld ix, (uix)
       04          
040381 FD 2A A0 03 0426*      ld iy, (uiy)
       04          
040386 F1          0427*      pop af
040387             0428*  ; all done
040387 C9          0429*      ret
040388             0430*  
040388 75 64 65 2E 0431*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040391             0432*  
040391             0433*  ; global scratch memory for registers
040391 00 00 00    0434*  uaf: dl 0
040394 00 00 00    0435*  uhl: dl 0
040397 00 00 00    0436*  ubc: dl 0
04039A 00 00 00    0437*  ude: dl 0
04039D 00 00 00    0438*  uix: dl 0
0403A0 00 00 00    0439*  uiy: dl 0
0403A3 00 00 00    0440*  usp: dl 0
0403A6 00 00 00    0441*  upc: dl 0
0403A9             0442*  
0403A9             0443*  ; inputs: whatever is in the flags register
0403A9             0444*  ; outputs: binary representation of flags
0403A9             0445*  ;          with a header so we know which is what
0403A9             0446*  ; destroys: nothing
0403A9             0447*  ; preserves: everything
0403A9             0448*  dumpFlags:
0403A9             0449*  ; first we curse zilog for not giving direct access to flags
0403A9 F5          0450*      push af ; this is so we can send it back unharmed
0403AA F5          0451*      push af ; this is so we can pop it to hl
0403AB             0452*  ; store everything in scratch
0403AB 22 94 03 04 0453*      ld (uhl),hl
0403AF ED 43 97 03 0454*      ld (ubc),bc
       04          
0403B4 ED 53 9A 03 0455*      ld (ude),de
       04          
0403B9 DD 22 9D 03 0456*      ld (uix),ix
       04          
0403BE FD 22 A0 03 0457*      ld (uiy),iy
       04          
0403C3             0458*  ; next we print the header
0403C3 21 EF 03 04 0459*      ld hl,@header
0403C7 CD 80 00 04 0460*      call printString
0403CB E1          0461*      pop hl ; flags are now in l
0403CC 7D          0462*      ld a,l ; flags are now in a
0403CD CD 47 01 04 0463*      call printBin8
0403D1 CD 95 00 04 0464*  	call printNewLine
0403D5             0465*  ; restore everything
0403D5 2A 94 03 04 0466*      ld hl, (uhl)
0403D9 ED 4B 97 03 0467*      ld bc, (ubc)
       04          
0403DE ED 5B 9A 03 0468*      ld de, (ude)
       04          
0403E3 DD 2A 9D 03 0469*      ld ix, (uix)
       04          
0403E8 FD 2A A0 03 0470*      ld iy, (uiy)
       04          
0403ED F1          0471*      pop af ; send her home the way she came
0403EE C9          0472*      ret
0403EF             0473*  ; Bit 7 (S): Sign flag
0403EF             0474*  ; Bit 6 (Z): Zero flag
0403EF             0475*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0403EF             0476*  ; Bit 4 (H): Half Carry flag
0403EF             0477*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0403EF             0478*  ; Bit 2 (PV): Parity/Overflow flag
0403EF             0479*  ; Bit 1 (N): Subtract flag
0403EF             0480*  ; Bit 0 (C): Carry flag
0403EF 53 5A 78 48 0481*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0403FA             0482*  
0403FA             0483*  ; set all the bits in the flag register
0403FA             0484*  ; more of an academic exercise than anything useful
0403FA             0485*  ; inputs; none
0403FA             0486*  ; outputs; a=0,f=255
0403FA             0487*  ; destroys: flags, hl
0403FA             0488*  ; preserves: a, because why not
0403FA             0489*  setAllFlags:
0403FA 21 FF 00 00 0490*      ld hl,255
0403FE 67          0491*      ld h,a ; four cycles to preserve a is cheap
0403FF E5          0492*      push hl
040400 F1          0493*      pop af
040401 C9          0494*      ret
040402             0495*  
040402             0496*  ; reset all the bits in the flag register
040402             0497*  ; unlike its inverse counterpart, this may actually be useful
040402             0498*  ; inputs; none
040402             0499*  ; outputs; a=0,f=0
040402             0500*  ; destroys: flags, hl
040402             0501*  ; preserves: a, because why not
040402             0502*  resetAllFlags:
040402 21 00 00 00 0503*      ld hl,0
040406 67          0504*      ld h,a ; four cycles to preserve a is cheap
040407 E5          0505*      push hl
040408 F1          0506*      pop af
040409 C9          0507*      ret
04040A             0508*  
04040A             0509*  ; wait until user presses a key
04040A             0510*  ; inputs: none
04040A             0511*  ; outputs: none
04040A             0512*  ; destroys: af,ix
04040A             0513*  waitKeypress:
04040A             0514*      MOSCALL mos_sysvars
04040A 3E 08       0001*M 			LD	A, function
04040C 5B CF       0002*M 			RST.LIL	08h
04040E AF          0515*      xor a ; zero out any prior keypresses
04040F DD 77 05    0516*      ld (ix+sysvar_keyascii),a
040412             0517*  @loop:
040412 DD 7E 05    0518*      ld a,(ix+sysvar_keyascii)
040415 A7          0519*      and a
040416 C0          0520*      ret nz
040417 18 F9       0521*      jr @loop
040419             0522*  
040419             0523*  
040419             0524*  ; print bytes from an address to the screen in hexidecimal format
040419             0525*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040419             0526*  ; outputs: values of each byte printed to screen separated by spaces
040419             0527*  ; destroys: nothing
040419             0528*  dumpMemoryHex:
040419             0529*  ; save registers to the stack
040419 C5          0530*      push bc
04041A E5          0531*      push hl
04041B F5          0532*      push af
04041C             0533*  
04041C             0534*  ; print the address and separator
04041C CD A0 00 04 0535*      call printHex24
040420 3E 3A       0536*      ld a,':'
040422 5B D7       0537*      rst.lil 10h
040424 3E 20       0538*      ld a,' '
040426 5B D7       0539*      rst.lil 10h
040428             0540*  
040428             0541*  ; set b to be our loop counter
040428 F1          0542*      pop af
040429 47          0543*      ld b,a
04042A E1          0544*      pop hl
04042B E5          0545*      push hl
04042C F5          0546*      push af
04042D             0547*  @loop:
04042D             0548*  ; print the byte
04042D 7E          0549*      ld a,(hl)
04042E CD B2 00 04 0550*      call printHex8
040432             0551*  ; print a space
040432 3E 20       0552*      ld a,' '
040434 5B D7       0553*      rst.lil 10h
040436 23          0554*      inc hl
040437 10 F4       0555*      djnz @loop
040439             0556*      ; call printNewLine
040439             0557*  
040439             0558*  ; restore everything
040439 F1          0559*      pop af
04043A E1          0560*      pop hl
04043B C1          0561*      pop bc
04043C             0562*  
04043C             0563*  ; all done
04043C C9          0564*      ret
04043D             0565*  
04043D             0566*  
04043D             0567*  ; print bytes from an address to the screen in binary format
04043D             0568*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04043D             0569*  ; outputs: values of each byte printed to screen separated by spaces
04043D             0570*  ; destroys: nothing
04043D             0571*  dumpMemoryBin:
04043D             0572*  ; save all registers to the stack
04043D F5          0573*      push af
04043E C5          0574*      push bc
04043F D5          0575*      push de
040440 E5          0576*      push hl
040441 DD E5       0577*      push ix
040443 FD E5       0578*      push iy
040445             0579*  
040445             0580*  ; set b to be our loop counter
040445 47          0581*      ld b,a
040446             0582*  @loop:
040446             0583*  ; print the byte
040446 7E          0584*      ld a,(hl)
040447 E5          0585*      push hl
040448 C5          0586*      push bc
040449 CD 47 01 04 0587*      call printBin8
04044D C1          0588*      pop bc
04044E             0589*  ; print a space
04044E 3E 20       0590*      ld a,' '
040450 5B D7       0591*      rst.lil 10h
040452 E1          0592*      pop hl
040453 23          0593*      inc hl
040454 10 F0       0594*      djnz @loop
040456 CD 95 00 04 0595*      call printNewLine
04045A             0596*  
04045A             0597*  ; restore everything
04045A FD E1       0598*      pop iy
04045C DD E1       0599*      pop ix
04045E E1          0600*      pop hl
04045F D1          0601*      pop de
040460 C1          0602*      pop bc
040461 F1          0603*      pop af
040462             0604*  ; all done
040462 C9          0605*      ret
040463             0606*  
040463             0607*  ; print bytes from an address to the screen in binary format
040463             0608*  ; with the bits of each byte in reverse order (lsb first)
040463             0609*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040463             0610*  ; outputs: values of each byte printed to screen separated by spaces
040463             0611*  ; destroys: nothing
040463             0612*  dumpMemoryBinRev:
040463             0613*  ; save all registers to the stack
040463 F5          0614*      push af
040464 C5          0615*      push bc
040465 D5          0616*      push de
040466 E5          0617*      push hl
040467 DD E5       0618*      push ix
040469 FD E5       0619*      push iy
04046B             0620*  
04046B             0621*  ; set b to be our loop counter
04046B 47          0622*      ld b,a
04046C             0623*  @loop:
04046C             0624*  ; print the byte
04046C 7E          0625*      ld a,(hl)
04046D E5          0626*      push hl
04046E C5          0627*      push bc
04046F CD 6C 01 04 0628*      call printBin8Rev
040473 C1          0629*      pop bc
040474             0630*  ; print a space
040474 3E 20       0631*      ld a,' '
040476 5B D7       0632*      rst.lil 10h
040478 E1          0633*      pop hl
040479 23          0634*      inc hl
04047A 10 F0       0635*      djnz @loop
04047C CD 95 00 04 0636*      call printNewLine
040480             0637*  
040480             0638*  ; restore everything
040480 FD E1       0639*      pop iy
040482 DD E1       0640*      pop ix
040484 E1          0641*      pop hl
040485 D1          0642*      pop de
040486 C1          0643*      pop bc
040487 F1          0644*      pop af
040488             0645*  ; all done
040488 C9          0646*      ret
040489             0035   	include "files.inc"
040489             0001*  ; load to onboard 8k sram
040489             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040489             0036   	include "fonts_bmp.inc"
040489             0001*  ; plots a bitmap character to the screen
040489             0002*  ; inputs: a; ascii character to plot
040489             0003*  ;      bc,de = x,y screen coordinates in pixels
040489             0004*  ;      ix pointed at the font definition lut
040489             0005*  ; returns: bc as the next x coordinate to plot
040489             0006*  ;          pretty pixels which hopefully resemble readable text
040489             0007*  ; destroys: lotsa stuff
040489             0008*  font_bmp_plot:
040489             0009*  ; back up bc,de
040489 C5          0010*      push bc
04048A D5          0011*      push de
04048B             0012*  ; get the buffer id of the character
04048B D6 20       0013*      sub 32 ; lookup table starts at ascii 32
04048D 06 06       0014*      ld b,6 ; six bytes per lookup record
04048F 4F          0015*      ld c,a
040490 ED 4C       0016*      mlt bc
040492 DD 09       0017*      add ix,bc ; now ix points to the character definition
040494 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
040497 CD 56 07 04 0019*      call vdu_buff_select
04049B             0020*  ; plot the character
04049B D1          0021*      pop de
04049C DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
04049F 83          0023*      add a,e ; add the y-coordinate
0404A0 5F          0024*      ld e,a
0404A1 3E 00       0025*      ld a,0 ; can't xor it because we need carry
0404A3 8A          0026*      adc a,d
0404A4 57          0027*      ld d,a ; plot_y now correct for the character
0404A5 C1          0028*      pop bc ; plot_x
0404A6 C5          0029*      push bc ; we want it back after the plot
0404A7 CD 8C 07 04 0030*      call vdu_plot_bmp
0404AB             0031*  ; now set bc to the next x coordinate
0404AB C1          0032*      pop bc
0404AC DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0404AF C6 02       0034*      add a,2 ; add a little padding between characters
0404B1 81          0035*      add a,c ; bump the original x-coordinate
0404B2 4F          0036*      ld c,a
0404B3 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0404B5 88          0038*      adc a,b
0404B6 47          0039*      ld b,a ; plot_x now correct for the next character
0404B7 C9          0040*      ret
0404B8             0041*  
0404B8             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0404B8             0043*  ; inputs: hl; pointer to the string
0404B8             0044*  ;       bc,de = x,y screen coordinates in pixels
0404B8             0045*  ;       ix pointed at the font definition lut
0404B8             0046*  ; returns: bc as the next x coordinate to plot
0404B8             0047*  ;          de as the next y coordinate to plot
0404B8             0048*  ;          pretty pixels which hopefully resemble readable text
0404B8             0049*  font_bmp_print:
0404B8             0050*  @next_char:
0404B8             0051*  ; fetch the next character in the string
0404B8 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0404B9 FE 00       0053*      cp 0 ; is it zero?
0404BB C8          0054*      ret z ; if so, we're done
0404BC 23          0055*      inc hl ; point to the next character
0404BD E5          0056*      push hl ; save the pointer
0404BE D5          0057*      push de ; save our y-coordinate
0404BF DD E5       0058*      push ix ; save the font lut pointer
0404C1 CD 89 04 04 0059*      call font_bmp_plot ; plot the character
0404C5 DD E1       0060*      pop ix ; restore the font lut pointer
0404C7 D1          0061*      pop de ; restore our y-coordinate
0404C8 E1          0062*      pop hl ; restore the pointer
0404C9 C3 B8 04 04 0063*      jp @next_char ; loop
0404CD             0037       include "timer.inc"
0404CD             0001*  ; Table 32. Timer Control Registers
0404CD             0002*  ; this constant is the base address of the timer control registers
0404CD             0003*  ; each timer takes three bytes:
0404CD             0004*  ;   0: control register
0404CD             0005*  ;   1: low byte of timer reset value
0404CD             0006*  ;   2: high byte of timer reset value
0404CD             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0404CD             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0404CD             0009*  TMR_CTL:     equ 80h
0404CD             0010*  
0404CD             0011*  ; Timer Control Register Bit Definitions
0404CD             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0404CD             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0404CD             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0404CD             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0404CD             0016*                              ; the TMRx_CTL register is read.
0404CD             0017*  
0404CD             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0404CD             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0404CD             0020*  
0404CD             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0404CD             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0404CD             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0404CD             0024*                              ; written to the counter when the end-of-count value is reached.
0404CD             0025*  
0404CD             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0404CD             0027*  CLK_DIV_256:  equ %00001100 ;
0404CD             0028*  CLK_DIV_64:   equ %00001000 ;
0404CD             0029*  CLK_DIV_16:   equ %00000100 ;
0404CD             0030*  CLK_DIV_4:    equ %00000000 ;
0404CD             0031*  
0404CD             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0404CD             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0404CD             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0404CD             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0404CD             0036*                              ; programmer must ensure that this bit is set to 1 each time
0404CD             0037*                              ; SINGLE-PASS mode is used.
0404CD             0038*  
0404CD             0039*  ; disable/enable the programmable reload timer
0404CD             0040*  PRT_EN_0:     equ %00000000 ;
0404CD             0041*  PRT_EN_1:     equ %00000001 ;
0404CD             0042*  
0404CD             0043*  ; Table 37. Timer Input Source Select Register
0404CD             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0404CD             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0404CD             0046*  ;   00: System clock / CLK_DIV
0404CD             0047*  ;   01: RTC / CLK_DIV
0404CD             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0404CD             0049*  ;   10: GPIO port B pin 1.
0404CD             0050*  ;   11: GPIO port B pin 1.
0404CD             0051*  TMR_ISS:   equ 92h ; register address
0404CD             0052*  
0404CD             0053*  ; Table 51. Real-Time Clock Control Register
0404CD             0054*  RTC_CTRL: equ EDh ; register address
0404CD             0055*  
0404CD             0056*  ; alarm interrupt disable/enable
0404CD             0057*  RTC_ALARM_0:    equ %00000000
0404CD             0058*  RTC_ALARM_1:    equ %10000000
0404CD             0059*  
0404CD             0060*  ; interrupt on alarm disable/enable
0404CD             0061*  RTC_INT_ENT_0:  equ %00000000
0404CD             0062*  RTC_INT_ENT_1:  equ %01000000
0404CD             0063*  
0404CD             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0404CD             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0404CD             0066*  
0404CD             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0404CD             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0404CD             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0404CD             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0404CD             0071*  
0404CD             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0404CD             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0404CD             0074*  
0404CD             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0404CD             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0404CD             0077*  
0404CD             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0404CD             0079*                                  ; RTC counter is enabled.
0404CD             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0404CD             0081*                                  ; RTC counter is disabled.
0404CD             0082*  
0404CD             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0404CD             0084*  
0404CD             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0404CD             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0404CD 00 00 00    0087*  prt_reload: dl 0x000000
0404D0             0088*  
0404D0             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0404D0             0090*  ; ;          de = number PRT interrupts during test interval
0404D0             0091*  ; prt_calibrate:
0404D0             0092*  ;     call vdu_vblank
0404D0             0093*  ; ; set a MOS timer
0404D0             0094*  ;     ld hl,120*1 ; 1 second
0404D0             0095*  ;     ld iy,tmr_test
0404D0             0096*  ;     call tmr_set
0404D0             0097*  ; ; set a PRT timer
0404D0             0098*  ;     ; ld hl,prt_reload_hardware
0404D0             0099*  ;     ; ld hl,prt_reload_emulator
0404D0             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0404D0             0101*  ;     ld (prt_reload),hl
0404D0             0102*  ;     call prt_set
0404D0             0103*  ; @loop:
0404D0             0104*  ; ; check time remaining on MOS timer
0404D0             0105*  ;     call tmr_get
0404D0             0106*  ;     jp z,@done ; time expired,so quit
0404D0             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0404D0             0108*  ;     jr @loop
0404D0             0109*  ; @done:
0404D0             0110*  ;     ld de,(prt_irq_counter)
0404D0             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0404D0             0112*  ;     ld (prt_reload),bc
0404D0             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0404D0             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0404D0             0115*  ;     ld (is_emulator),a
0404D0             0116*  ;     sbc hl,de
0404D0             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0404D0             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0404D0             0119*  ;     ret m ; negative result means we're on hardware
0404D0             0120*  ;     inc a ; we're on emulator
0404D0             0121*  ;     ld (is_emulator),a
0404D0             0122*  ;     ld bc,prt_reload_emulator
0404D0             0123*  ;     ld (prt_reload),bc
0404D0             0124*  ;     ld hl,on_emulator
0404D0             0125*  ;     ret
0404D0             0126*  
0404D0             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0404D0             0128*  
0404D0             0129*  ; set PRT timer
0404D0             0130*  prt_set:
0404D0 21 00 00 00 0131*      ld hl,0
0404D4 22 1E 05 04 0132*      ld (prt_irq_counter),hl
0404D8 2A CD 04 04 0133*      ld hl,(prt_reload)
0404DC ED 29 84    0134*      out0 ($84),l
0404DF ED 21 85    0135*  	out0 ($85),h
0404E2             0136*  ; disable timer
0404E2 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0404E4 ED 39 83    0138*  	out0 ($83),a
0404E7             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0404E7 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0404E9 ED 39 83    0141*  	out0 ($83),a
0404EC C9          0142*      ret
0404ED             0143*  
0404ED             0144*  ; ===============================================
0404ED             0145*  ; PRT Timer Interrupt Handling
0404ED             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0404ED             0147*  ; -----------------------------------------------
0404ED             0148*  prt_irq_init:
0404ED             0149*      ; set up interrupt vector table 2
0404ED 21 00 00 00 0150*  	ld hl,0
0404F1 3A 0C 01 00 0151*  	ld a,($10c)
0404F5 6F          0152*  	ld l,a
0404F6 3A 0D 01 00 0153*  	ld a,($10d)
0404FA 67          0154*  	ld h,a
0404FB             0155*  
0404FB             0156*  	; skip over CALL ($c3)
0404FB 23          0157*  	inc hl
0404FC             0158*  	; load address of jump into vector table 2 (in ram)
0404FC ED 27       0159*  	ld hl,(hl)
0404FE             0160*  
0404FE             0161*  	; write CALL prt_irq_handler to vector table 2
0404FE 3E C3       0162*  	ld a,$c3
040500 77          0163*  	ld (hl),a
040501 23          0164*  	inc hl
040502 11 09 05 04 0165*  	ld de,prt_irq_handler
040506 ED 1F       0166*  	ld (hl),de
040508             0167*  
040508 C9          0168*      ret
040509             0169*  
040509             0170*  prt_irq_handler:
040509 F3          0171*  	di
04050A F5          0172*  	push af
04050B E5          0173*      push hl
04050C ED 38 83    0174*  	in0 a,($83)
04050F 2A 1E 05 04 0175*  	ld hl,(prt_irq_counter)
040513 23          0176*  	inc hl
040514 22 1E 05 04 0177*  	ld (prt_irq_counter),hl
040518 E1          0178*      pop hl
040519 F1          0179*  	pop af
04051A FB          0180*  	ei
04051B 5B ED 4D    0181*  	reti.l
04051E             0182*  
04051E             0183*  prt_irq_counter:
04051E 00 00 00    0184*  	.dl 0
040521             0185*  prt_irq_counter_saved:
040521 00 00 00    0186*      .dl 0
040524             0187*  
040524             0188*  prt_loop_reset:
040524 E5          0189*      push hl
040525 21 00 00 00 0190*  	ld hl,0
040529 22 1E 05 04 0191*  	ld (prt_irq_counter),hl
04052D 22 8F 05 04 0192*      ld (prt_loop_counter),hl
040531 22 92 05 04 0193*      ld (prt_loops),hl
040535 CD D0 04 04 0194*      call prt_set
040539 E1          0195*      pop hl
04053A C9          0196*      ret
04053B             0197*  
04053B             0198*  prt_loop_start:
04053B E5          0199*      push hl
04053C 21 00 00 00 0200*  	ld hl,0
040540 22 1E 05 04 0201*  	ld (prt_irq_counter),hl
040544 E1          0202*      pop hl
040545 C9          0203*      ret
040546             0204*  
040546             0205*  prt_loop_stop:
040546 E5          0206*      push hl
040547 D5          0207*      push de
040548 2A 1E 05 04 0208*      ld hl,(prt_irq_counter)
04054C ED 5B 8F 05 0209*      ld de,(prt_loop_counter)
       04          
040551 19          0210*      add hl,de
040552 22 8F 05 04 0211*      ld (prt_loop_counter),hl
040556 21 00 00 00 0212*      ld hl,0
04055A 22 1E 05 04 0213*      ld (prt_irq_counter),hl
04055E 2A 92 05 04 0214*      ld hl,(prt_loops)
040562 23          0215*      inc hl
040563 22 92 05 04 0216*      ld (prt_loops),hl
040567 D1          0217*      pop de
040568 E1          0218*      pop hl
040569 C9          0219*      ret
04056A             0220*  
04056A             0221*  ; inputs: bc = y,x text coordinates to print
04056A             0222*  prt_loop_print:
04056A F5          0223*      push af
04056B E5          0224*      push hl
04056C C5          0225*      push bc
04056D D5          0226*      push de
04056E DD E5       0227*      push ix
040570 FD E5       0228*      push iy
040572 CD 87 06 04 0229*      call vdu_move_cursor
040576             0230*  
040576 2A 8F 05 04 0231*      ld hl,(prt_loop_counter)
04057A CD D0 00 04 0232*      call printDec
04057E             0233*  
04057E 2A 92 05 04 0234*      ld hl,(prt_loops)
040582 CD D0 00 04 0235*      call printDec
040586             0236*  
040586 FD E1       0237*      pop iy
040588 DD E1       0238*      pop ix
04058A D1          0239*      pop de
04058B C1          0240*      pop bc
04058C E1          0241*      pop hl
04058D F1          0242*      pop af
04058E C9          0243*      ret
04058F             0244*  
04058F             0245*  prt_loop_counter:
04058F 00 00 00    0246*      .dl 0
040592             0247*  prt_loops:
040592 00 00 00    0248*      .dl 0
040595             0249*  
040595             0250*  ; ===============================================
040595             0251*  ; Timer functions
040595             0252*  ; -----------------------------------------------
040595             0253*  ; set a countdown timer
040595             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
040595             0255*  ; returns: hl = current time
040595             0256*  tmr_set:
040595 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
040598             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
040598 3E 08       0001*M 			LD	A, function
04059A 5B CF       0002*M 			RST.LIL	08h
04059C DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04059F FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0405A2 C9          0261*      ret
0405A3             0262*  
0405A3             0263*  ; gets time remaining on a countdown timer
0405A3             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0405A3             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0405A3             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0405A3             0267*  tmr_get:
0405A3             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0405A3 3E 08       0001*M 			LD	A, function
0405A5 5B CF       0002*M 			RST.LIL	08h
0405A7 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0405AA FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0405AD AF          0271*      xor a                   ; clear carry
0405AE ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0405B0 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0405B3 AF          0274*      xor a                   ; clear carry
0405B4 ED 5A       0275*      adc hl,de               ; hl = time remaining
0405B6             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0405B6 C9          0277*      ret
0405B7             0278*  
0405B7 00 00 00    0279*  timestamp_now: dl 0
0405BA 00 00 00    0280*  timestamp_old: dl 0
0405BD 00 00 00    0281*  timestamp_chg: dl 0
0405C0             0282*  
0405C0             0283*  ; update the global timestamp from the system clock
0405C0             0284*  ; inputs: none
0405C0             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0405C0             0286*  ;          de = current time
0405C0             0287*  ;          ix = pointer to syvars table
0405C0             0288*  ; destroys: af,hl,de,ix
0405C0             0289*  timestamp_tick:
0405C0 ED 5B B7 05 0290*      ld de,(timestamp_now)   ; get previous time
       04          
0405C5 ED 53 BA 05 0291*      ld (timestamp_old),de   ; save previous time
       04          
0405CA             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0405CA 3E 08       0001*M 			LD	A, function
0405CC 5B CF       0002*M 			RST.LIL	08h
0405CE DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0405D1 22 B7 05 04 0294*      ld (timestamp_now),hl   ; save current time
0405D5 AF          0295*      xor a                   ; clear carry
0405D6 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0405D8 22 BD 05 04 0297*      ld (timestamp_chg),hl   ; save elapsed time
0405DC C9          0298*      ret
0405DD             0299*  
0405DD             0300*  ; set a countdown timer
0405DD             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0405DD             0302*  ; requires: timestamp_tick to be called at least once before this function
0405DD             0303*  ; returns: hl = current time
0405DD             0304*  ; destroys: hl
0405DD             0305*  timestamp_tmr_set:
0405DD FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0405E0 2A B7 05 04 0307*      ld hl,(timestamp_now)   ; get current timestamp
0405E4 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0405E7 C9          0309*      ret
0405E8             0310*  
0405E8             0311*  ; gets time remaining on a countdown timer following the global timestamp
0405E8             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0405E8             0313*  ; requires: timestamp_tick to be called at least once before this function
0405E8             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0405E8             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0405E8             0316*  ; destroys: af,hl,de
0405E8             0317*  timestamp_tmr_get:
0405E8 ED 5B B7 05 0318*      ld de,(timestamp_now)   ; get current timestamp
       04          
0405ED FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0405F0 AF          0320*      xor a                   ; clear carry
0405F1 ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0405F3 FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0405F6 AF          0323*      xor a                   ; clear carry
0405F7 ED 5A       0324*      adc hl,de               ; hl = time remaining
0405F9             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0405F9 C9          0326*      ret
0405FA             0327*  
0405FA             0328*  ; main loop timer functions
0405FA             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
040600             0330*  
040600             0331*  ; set a countdown timer for the main loop using the timestamp timer
040600             0332*  ; inputs: hl = time to set in 1/120ths of a second
040600             0333*  ; returns: hl = current time
040600             0334*  ; destroys: af,hl,de,ix,iy
040600             0335*  tmr_main_loop_set:
040600 FD 21 FA 05 0336*      ld iy,tmr_main_loop
       04          
040605 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
040608 CD C0 05 04 0338*      call timestamp_tick
04060C 2A B7 05 04 0339*      ld hl,(timestamp_now)   ; get current timestamp
040610 FD 2F 00    0340*      ld (iy+0),hl ; set start time
040613 C9          0341*      ret
040614             0342*  
040614             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
040614             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
040614             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
040614             0346*  ; destroys: af,hl,de,ix,iy
040614             0347*  tmr_main_loop_get:
040614 CD C0 05 04 0348*      call timestamp_tick
040618 FD 21 FA 05 0349*      ld iy,tmr_main_loop
       04          
04061D CD E8 05 04 0350*      call timestamp_tmr_get
040621 C9          0351*      ret
040622             0352*  
040622             0353*  ; set a stopwatch
040622             0354*  ; returns: hl = start time
040622             0355*  ; destroys: hl,ix
040622             0356*  stopwatch_set:
040622             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
040622 3E 08       0001*M 			LD	A, function
040624 5B CF       0002*M 			RST.LIL	08h
040626 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
040629 22 3E 06 04 0359*      ld (stopwatch_started),hl            ; set start time
04062D C9          0360*      ret
04062E             0361*  
04062E             0362*  ; gets time elapsed on a stopwatch
04062E             0363*  ; returns: hl = time elapsed in 1/120ths of a second
04062E             0364*  ; destroys: af,hl,de,ix
04062E             0365*  stopwatch_get:
04062E             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
04062E 3E 08       0001*M 			LD	A, function
040630 5B CF       0002*M 			RST.LIL	08h
040632 DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
040635 ED 5B 3E 06 0368*      ld de,(stopwatch_started)            ; get start time
       04          
04063A AF          0369*      xor a                   ; clear carry
04063B ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04063D C9          0371*      ret
04063E             0372*  
04063E             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
040641             0374*  
040641             0375*  ; ------------------
040641             0376*  ; delay routine
040641             0377*  ; Author: Richard Turrnidge
040641             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
040641             0379*  ; routine waits a fixed time,then returns
040641             0380*  ; arrive with A =  the delay byte. One bit to be set only.
040641             0381*  ; eg. ld A,00000100b
040641             0382*  
040641             0383*  multiPurposeDelay:
040641 F5          0384*      push af
040642 C5          0385*      push bc
040643 DD E5       0386*      push ix
040645 47          0387*      ld b,a
040646 3E 08       0388*      ld a,$08
040648 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
04064A             0390*  
04064A             0391*  waitLoop:
04064A             0392*  
04064A DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04064D             0394*  
04064D             0395*                                  ;   we check if bit set is same as last time we checked.
04064D             0396*                                  ;   bit 0 - don't use
04064D             0397*                                  ;   bit 1 - changes 64 times per second
04064D             0398*                                  ;   bit 2 - changes 32 times per second
04064D             0399*                                  ;   bit 3 - changes 16 times per second
04064D             0400*  
04064D             0401*                                  ;   bit 4 - changes 8 times per second
04064D             0402*                                  ;   bit 5 - changes 4 times per second
04064D             0403*                                  ;   bit 6 - changes 2 times per second
04064D             0404*                                  ;   bit 7 - changes 1 times per second
04064D A0          0405*      and b
04064E 4F          0406*      ld c,a
04064F 3A 60 06 04 0407*      ld a,(oldTimeStamp)
040653 B9          0408*      cp c                        ; is A same as last value?
040654 28 F4       0409*      jr z,waitLoop              ; loop here if it is
040656 79          0410*      ld a,c
040657 32 60 06 04 0411*      ld (oldTimeStamp),a        ; set new value
04065B             0412*  
04065B DD E1       0413*      pop ix
04065D C1          0414*      pop bc
04065E F1          0415*      pop af
04065F C9          0416*      ret
040660             0417*  
040660 00          0418*  oldTimeStamp:   .db 00h
040661             0038       include "vdu.inc"
040661             0001*  ; &E8-&EF 	232-239 	Bitmap plot §
040661             0002*  plot_bmp: equ 0xE8
040661             0003*  ; 5 	Plot absolute in current foreground colour
040661             0004*  dr_abs_fg: equ 5
040661             0005*  
040661             0006*  ; VDU 30: Home cursor
040661             0007*  vdu_home_cursor:
040661 3E 1E       0008*      ld a,30
040663 5B D7       0009*  	rst.lil $10
040665 C9          0010*  	ret
040666             0011*  
040666             0012*  cursor_on:
040666 21 71 06 04 0013*  	ld hl,@cmd
04066A 01 03 00 00 0014*  	ld bc,@end-@cmd
04066E 5B DF       0015*  	rst.lil $18
040670 C9          0016*  	ret
040671             0017*  @cmd:
040671 17 01 01    0018*  	db 23,1,1
040674             0019*  @end:
040674             0020*  
040674             0021*  cursor_off:
040674 21 7F 06 04 0022*  	ld hl,@cmd
040678 01 03 00 00 0023*  	ld bc,@end-@cmd
04067C 5B DF       0024*  	rst.lil $18
04067E C9          0025*  	ret
04067F             0026*  @cmd:
04067F 17 01 00    0027*  	db 23,1,0
040682             0028*  @end:
040682             0029*  
040682             0030*  ; VDU 9: Move cursor forward one character
040682             0031*  vdu_cursor_forward:
040682 3E 09       0032*      ld a,9
040684 5B D7       0033*  	rst.lil $10
040686 C9          0034*  	ret
040687             0035*  
040687             0036*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
040687             0037*  ; inputs: c=x, b=y 8-bit unsigned integers
040687             0038*  vdu_move_cursor:
040687 ED 43 98 06 0039*      ld (@x0),bc
       04          
04068C 21 97 06 04 0040*  	ld hl,@cmd
040690 01 03 00 00 0041*  	ld bc,@end-@cmd
040694 5B DF       0042*  	rst.lil $18
040696 C9          0043*  	ret
040697 1F          0044*  @cmd: 	db 31
040698 00          0045*  @x0:	db 0
040699 00          0046*  @y0: 	db 0
04069A 00          0047*  @end: 	db 0 ; padding
04069B             0048*  
04069B             0049*  ; VDU 12: Clear text area (CLS)
04069B             0050*  vdu_cls:
04069B 3E 0C       0051*      ld a,12
04069D 5B D7       0052*  	rst.lil $10
04069F C9          0053*  	ret
0406A0             0054*  
0406A0             0055*  vdu_flip:
0406A0 21 AB 06 04 0056*  	ld hl,@cmd
0406A4 01 03 00 00 0057*  	ld bc,@end-@cmd
0406A8 5B DF       0058*  	rst.lil $18
0406AA C9          0059*  	ret
0406AB 17 00 C3    0060*  @cmd: db 23,0,0xC3
0406AE             0061*  @end:
0406AE             0062*  
0406AE             0063*  ; VDU 16: Clear graphics area (CLG)
0406AE             0064*  vdu_clg:
0406AE 3E 10       0065*      ld a,16
0406B0 5B D7       0066*  	rst.lil $10
0406B2 C9          0067*  	ret
0406B3             0068*  
0406B3             0069*  ; VDU 17, colour: Define text colour (COLOUR)
0406B3             0070*  vdu_colour_text:
0406B3 32 C3 06 04 0071*  	ld (@arg),a
0406B7 21 C2 06 04 0072*  	ld hl,@cmd
0406BB 01 02 00 00 0073*  	ld bc,@end-@cmd
0406BF 5B DF       0074*  	rst.lil $18
0406C1 C9          0075*  	ret
0406C2 11          0076*  @cmd: db 17
0406C3 00          0077*  @arg: db 0
0406C4             0078*  @end:
0406C4             0079*  
0406C4             0080*  
0406C4             0081*  vdu_gcol_bg:
0406C4 32 DB 06 04 0082*  	ld (@mode),a
0406C8 79          0083*      ld a,c
0406C9 C6 80       0084*      add a,128
0406CB 32 DC 06 04 0085*      ld (@col),a
0406CF 21 DA 06 04 0086*  	ld hl,@cmd
0406D3 01 03 00 00 0087*  	ld bc,@end-@cmd
0406D7 5B DF       0088*  	rst.lil $18
0406D9 C9          0089*  	ret
0406DA 12          0090*  @cmd:  db 18
0406DB 00          0091*  @mode: db 0
0406DC 00          0092*  @col:  db 0
0406DD             0093*  @end:
0406DD             0094*  
0406DD             0095*  
0406DD             0096*  ; VDU 28, left, bottom, right, top: Set text viewport **
0406DD             0097*  ; MIND THE LITTLE-ENDIANESS
0406DD             0098*  ; inputs: c=left,b=bottom,e=right,d=top
0406DD             0099*  ; outputs; nothing
0406DD             0100*  ; destroys: a might make it out alive
0406DD             0101*  vdu_set_txt_viewport:
0406DD ED 43 F3 06 0102*      ld (@lb),bc
       04          
0406E2 ED 53 F5 06 0103*  	ld (@rt),de
       04          
0406E7 21 F2 06 04 0104*  	ld hl,@cmd
0406EB 01 05 00 00 0105*  	ld bc,@end-@cmd
0406EF 5B DF       0106*  	rst.lil $18
0406F1 C9          0107*  	ret
0406F2 1C          0108*  @cmd:   db 28 ; set text viewport command
0406F3 00 00       0109*  @lb: 	dw 0x0000 ; set by bc
0406F5 00 00       0110*  @rt: 	dw 0x0000 ; set by de
0406F7 00          0111*  @end:   db 0x00	  ; padding
0406F8             0112*  
0406F8             0113*  ; Wait for VBLANK interrupt
0406F8             0114*  vdu_vblank:
0406F8 DD E5       0115*      PUSH 	IX
0406FA             0116*  	MOSCALL	mos_sysvars
0406FA 3E 08       0001*M 			LD	A, function
0406FC 5B CF       0002*M 			RST.LIL	08h
0406FE DD 7E 00    0117*  	LD	A, (IX + sysvar_time + 0)
040701             0118*  @wait:
040701 DD BE 00    0119*      CP 	A, (IX + sysvar_time + 0)
040704 28 FB       0120*      JR	Z, @wait
040706 DD E1       0121*      POP	IX
040708 C9          0122*      RET
040709             0123*  
040709             0124*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040709             0125*  ; NOTE: the order of the y-coordinate parameters are inverted
040709             0126*  ; 	because we have turned off logical screen scaling
040709             0127*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040709             0128*  ; outputs; nothing
040709             0129*  ; destroys: a might make it out alive
040709             0130*  vdu_set_gfx_viewport:
040709 ED 43 29 07 0131*      ld (@x0),bc
       04          
04070E FD 22 2B 07 0132*      ld (@y1),iy
       04          
040713 DD 22 2D 07 0133*  	ld (@x1),ix
       04          
040718 ED 53 2F 07 0134*  	ld (@y0),de
       04          
04071D 21 28 07 04 0135*  	ld hl,@cmd
040721 01 09 00 00 0136*  	ld bc,@end-@cmd
040725 5B DF       0137*  	rst.lil $18
040727 C9          0138*  	ret
040728 18          0139*  @cmd:   db 24 ; set graphics viewport command
040729 00 00       0140*  @x0: 	dw 0x0000 ; set by bc
04072B 00 00       0141*  @y1: 	dw 0x0000 ; set by iy
04072D 00 00       0142*  @x1: 	dw 0x0000 ; set by ix
04072F 00 00       0143*  @y0: 	dw 0x0000 ; set by de
040731 00          0144*  @end:   db 0x00	  ; padding
040732             0145*  
040732             0146*  ; SCREEN MODES
040732             0147*  ; ===============================
040732             0148*  ; Mode  Horz  Vert  Cols  Refresh
040732             0149*  ; ---   ----  ----  ----  -------
040732             0150*  ; 11    320   240   2     60hz
040732             0151*  ; 139   320   240   2     60hz
040732             0152*  ; 23    512   384   2     60hz
040732             0153*  ; 151   512   384   2     60hz
040732             0154*  ; 6     640   240   2     60hz
040732             0155*  ; 134   640   240   2     60hz
040732             0156*  ; 2     640   480   2     60hz
040732             0157*  ; 130   640   480   2     60hz
040732             0158*  ; 17    800   600   2     60hz
040732             0159*  ; 145   800   600   2     60hz
040732             0160*  ; 18    1024  768   2     60hz
040732             0161*  ; 146   1024  768   2     60hz
040732             0162*  ; ---   ----  ----  ----  -------
040732             0163*  ; 10    320   240   4     60hz
040732             0164*  ; 138   320   240   4     60hz
040732             0165*  ; 22    512   384   4     60hz
040732             0166*  ; 150   512   384   4     60hz
040732             0167*  ; 5     640   240   4     60hz
040732             0168*  ; 133   640   240   4     60hz
040732             0169*  ; 1     640   480   4     60hz
040732             0170*  ; 129   640   480   4     60hz
040732             0171*  ; 16    800   600   4     60hz
040732             0172*  ; 19    1024  768   4     60hz
040732             0173*  ; ---   ----  ----  ----  -------
040732             0174*  ; 9     320   240   16    60hz
040732             0175*  ; 137   320   240   16    60hz
040732             0176*  ; 21    512   384   16    60hz
040732             0177*  ; 149   512   384   16    60hz
040732             0178*  ; 4     640   240   16    60hz
040732             0179*  ; 132   640   240   16    60hz
040732             0180*  ; 0     640   480   16    60hz
040732             0181*  ; 7     n/a   n/a   16    60hz
040732             0182*  ; ---   ----  ----  ----  -------
040732             0183*  ; 8     320   240   64    60hz
040732             0184*  ; 136   320   240   64    60hz
040732             0185*  ; 20    512   384   64    60hz
040732             0186*  ; 3     640   240   64    60hz
040732             0187*  ; ---   ----  ----  ----  -------
040732             0188*  vdu_set_screen_mode:
040732 32 42 07 04 0189*  	ld (@arg),a
040736 21 41 07 04 0190*  	ld hl,@cmd
04073A 01 02 00 00 0191*  	ld bc,@end-@cmd
04073E 5B DF       0192*  	rst.lil $18
040740 C9          0193*  	ret
040741 16          0194*  @cmd: db 22 ; set screen mode
040742 00          0195*  @arg: db 0  ; screen mode parameter
040743             0196*  @end:
040743             0197*  
040743             0198*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
040743             0199*  ; inputs: a is scaling mode, 1=on, 0=off
040743             0200*  ; note: default setting on boot is scaling ON
040743             0201*  vdu_set_scaling:
040743 32 55 07 04 0202*  	ld (@arg),a
040747 21 52 07 04 0203*  	ld hl,@cmd
04074B 01 04 00 00 0204*  	ld bc,@end-@cmd
04074F 5B DF       0205*  	rst.lil $18
040751 C9          0206*  	ret
040752 17 00 C0    0207*  @cmd: db 23,0,0xC0
040755 00          0208*  @arg: db 0  ; scaling on/off
040756             0209*  @end:
040756             0210*  
040756             0211*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
040756             0212*  ; inputs: hl=bufferId
040756             0213*  vdu_buff_select:
040756 22 68 07 04 0214*  	ld (@bufferId),hl
04075A 21 65 07 04 0215*  	ld hl,@cmd
04075E 01 05 00 00 0216*  	ld bc,@end-@cmd
040762 5B DF       0217*  	rst.lil $18
040764 C9          0218*  	ret
040765 17 1B 20    0219*  @cmd: db 23,27,0x20
040768 00 00       0220*  @bufferId: dw 0x0000
04076A 00          0221*  @end: db 0x00 ; padding
04076B             0222*  
04076B             0223*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04076B             0224*  ; inputs: a=format; bc=width; de=height
04076B             0225*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04076B             0226*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04076B             0227*  ; 0 	RGBA8888 (4-bytes per pixel)
04076B             0228*  ; 1 	RGBA2222 (1-bytes per pixel)
04076B             0229*  ; 2 	Mono/Mask (1-bit per pixel)
04076B             0230*  ; 3 	Reserved for internal use by VDP (“native” format)
04076B             0231*  vdu_bmp_create:
04076B ED 43 87 07 0232*      ld (@width),bc
       04          
040770 ED 53 89 07 0233*      ld (@height),de
       04          
040775 32 8B 07 04 0234*      ld (@fmt),a
040779 21 84 07 04 0235*  	ld hl,@cmd
04077D 01 08 00 00 0236*  	ld bc,@end-@cmd
040781 5B DF       0237*  	rst.lil $18
040783 C9          0238*  	ret
040784 17 1B 21    0239*  @cmd:       db 23,27,0x21
040787 00 00       0240*  @width:     dw 0x0000
040789 00 00       0241*  @height:    dw 0x0000
04078B 00          0242*  @fmt:       db 0x00
04078C             0243*  @end:
04078C             0244*  
04078C             0245*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04078C             0246*  ; &E8-&EF 	232-239 	Bitmap plot §
04078C             0247*  ; VDU 25, mode, x; y;: PLOT command
04078C             0248*  ; inputs: bc=x0, de=y0
04078C             0249*  ; prerequisites: vdu_buff_select
04078C             0250*  vdu_plot_bmp:
04078C ED 43 A3 07 0251*      ld (@x0),bc
       04          
040791 ED 53 A5 07 0252*      ld (@y0),de
       04          
040796 21 A1 07 04 0253*  	ld hl,@cmd
04079A 01 06 00 00 0254*  	ld bc,@end-@cmd
04079E 5B DF       0255*  	rst.lil $18
0407A0 C9          0256*  	ret
0407A1 19          0257*  @cmd:   db 25
0407A2 ED          0258*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0407A3 00 00       0259*  @x0: 	dw 0x0000
0407A5 00 00       0260*  @y0: 	dw 0x0000
0407A7 00          0261*  @end:   db 0x00 ; padding
0407A8             0262*  
0407A8             0263*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0407A8             0264*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0407A8             0265*  vdu_load_img_rgba2_to_8:
0407A8             0266*  ; backup the target buffer id and image dimensions
0407A8 E5          0267*      push hl
0407A9 D5          0268*      push de
0407AA C5          0269*      push bc
0407AB             0270*  ; load the rgba2 image to working buffer 65534
0407AB 21 FE FF 00 0271*      ld hl,65534 ; temporary working buffer id
0407AF CD B2 08 04 0272*  	call vdu_load_buffer_from_file
0407B3             0273*  ; restore the image dimensions and target buffer id
0407B3 C1          0274*      pop bc
0407B4 D1          0275*      pop de
0407B5 E1          0276*      pop hl
0407B6             0277*  ; fall through to vdu_rgba2_to_8
0407B6             0278*  
0407B6             0279*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0407B6             0280*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0407B6             0281*  ; the "expand bitmap" command is:
0407B6             0282*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0407B6             0283*  ; and then to reverse the byte order to fix endian-ness:
0407B6             0284*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0407B6             0285*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0407B6             0286*  ; VDU 23,27,&20,targetBufferID%;
0407B6             0287*  ; VDU 23,27,&21,width%;height%;0
0407B6             0288*  ; -------------------------------------------------------------------
0407B6             0289*  ; inputs: bc,de image width,height ; hl = targetBufferId
0407B6             0290*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0407B6             0291*  vdu_rgba2_to_8:
0407B6             0292*  ; load the image dimensions and buffer id parameters
0407B6 ED 43 12 08 0293*      ld (@width),bc
       04          
0407BB ED 53 14 08 0294*      ld (@height),de
       04          
0407C0 22 F7 07 04 0295*      ld (@bufferId0),hl
0407C4 22 04 08 04 0296*      ld (@bufferId2),hl
0407C8 22 0D 08 04 0297*      ld (@bufferId1),hl
0407CC             0298*  ; clean up bytes that got stomped on by the ID loads
0407CC 3E 48       0299*      ld a,0x48
0407CE 32 F9 07 04 0300*      ld (@bufferId0+2),a
0407D2 3E 17       0301*      ld a,23
0407D4 32 0F 08 04 0302*      ld (@bufferId1+2),a
0407D8 3E 18       0303*      ld a,24
0407DA 32 06 08 04 0304*      ld (@bufferId2+2),a
0407DE AF          0305*      xor a
0407DF 32 16 08 04 0306*      ld (@height+2),a
0407E3             0307*  ; send the vdu command strings
0407E3 21 EE 07 04 0308*      ld hl,@beg
0407E7 01 29 00 00 0309*      ld bc,@end-@beg
0407EB 5B DF       0310*      rst.lil $18
0407ED C9          0311*      ret
0407EE             0312*  @beg:
0407EE             0313*  ; Command 14: Consolidate blocks in a buffer
0407EE             0314*  ; VDU 23, 0, &A0, bufferId; 14
0407EE 17 00 A0    0315*      db 23,0,0xA0
0407F1 FE FF       0316*      dw 65534 ; workingBufferId
0407F3 0E          0317*      db 14 ; consolidate blocks
0407F4             0318*  ; the "expand bitmap" command is:
0407F4             0319*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0407F4 17 00 A0    0320*      db 23,0,0xA0
0407F7 00 00       0321*  @bufferId0: dw 0x0000 ; targetBufferId
0407F9 48          0322*      db 0x48 ; given as decimal command 72 in the docs
0407FA 02          0323*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0407FB FE FF       0324*      dw 65534 ; sourceBufferId
0407FD 00 7F BF FF 0325*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
040801             0326*  ; reverse the byte order to fix endian-ness:
040801             0327*  ; Command 24: Reverse the order of data of blocks within a buffer
040801             0328*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
040801             0329*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
040801 17 00 A0    0330*      db 23,0,0xA0
040804 00 00       0331*  @bufferId2:    dw 0x0000 ; targetBufferId
040806 18          0332*      db 24 ; reverse byte order
040807 04          0333*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
040808 04 00       0334*      dw 4 ; size (4 bytes)
04080A             0335*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04080A             0336*  ; VDU 23,27,&20,targetBufferID%;
04080A 17 1B 20    0337*      db 23,27,0x20 ; select bitmap
04080D 00 00       0338*  @bufferId1: dw 0x0000 ; targetBufferId
04080F             0339*  ; VDU 23,27,&21,width%;height%;0
04080F 17 1B 21    0340*      db 23,27,0x21 ; create bitmap from buffer
040812 00 00       0341*  @width: dw 0x0000
040814 00 00       0342*  @height: dw 0x0000
040816 00          0343*      db 0x00 ; rgba8888 format
040817             0344*  @end:
040817             0345*  
040817             0346*  ; scratch variables
040817 00 00 00    0347*  bufferId0: dl 0x000000
04081A 00 00 00    0348*  bufferId1: dl 0x000000
04081D             0349*  
04081D             0350*  ; load a vdu buffer from local memory
04081D             0351*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04081D             0352*  vdu_load_buffer:
04081D ED 43 46 08 0353*      ld (@length),bc
       04          
040822 D5          0354*      push de ; save data pointer
040823             0355*  ; send the vdu command string
040823 7D          0356*      ld a,l
040824 32 43 08 04 0357*      ld (@bufferId),a
040828 7C          0358*      ld a,h
040829 32 44 08 04 0359*      ld (@bufferId+1),a
04082D 21 40 08 04 0360*      ld hl,@cmd
040831 01 08 00 00 0361*      ld bc,@end-@cmd
040835 5B DF       0362*      rst.lil $18
040837             0363*  ; send the buffer data
040837 E1          0364*      pop hl ; pointer to data
040838 ED 4B 46 08 0365*      ld bc,(@length)
       04          
04083D 5B DF       0366*      rst.lil $18 ; send it
04083F C9          0367*      ret
040840             0368*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040840 17 00 A0    0369*  @cmd:       db 23,0,0xA0
040843 00 00       0370*  @bufferId:	dw 0x0000
040845 00          0371*  		    db 0 ; load buffer
040846 00 00       0372*  @length:	dw 0x0000
040848 00          0373*  @end: db 0 ; padding
040849             0374*  
040849             0375*  ; clear a buffer
040849             0376*  ; inputs: hl = bufferId
040849             0377*  vdu_clear_buffer:
040849 7D          0378*      ld a,l
04084A 32 61 08 04 0379*      ld (@bufferId),a
04084E 7C          0380*      ld a,h
04084F 32 62 08 04 0381*      ld (@bufferId+1),a
040853 21 5E 08 04 0382*      ld hl,@cmd
040857 01 06 00 00 0383*      ld bc,@end-@cmd
04085B 5B DF       0384*      rst.lil $18
04085D C9          0385*      ret
04085E 17 00 A0    0386*  @cmd:       db 23,0,0xA0
040861 00 00       0387*  @bufferId:	dw 0x0000
040863 02          0388*  		    db 2 ; clear buffer
040864             0389*  @end:
040864             0390*  
040864             0391*  vdu_clear_all_buffers:
040864             0392*  ; clear all buffers
040864 21 6F 08 04 0393*      ld hl,@beg
040868 01 06 00 00 0394*      ld bc,@end-@beg
04086C 5B DF       0395*      rst.lil $18
04086E C9          0396*      ret
04086F 17 00 A0    0397*  @beg: db 23,0,$A0
040872 FF FF       0398*        dw -1 ; clear all buffers
040874 02          0399*        db 2  ; command 2: clear a buffer
040875             0400*  @end:
040875             0401*  
040875             0402*  ; Command 14: Consolidate blocks in a buffer
040875             0403*  vdu_consolidate_buffer:
040875             0404*  ; set parameters for vdu call
040875 7D          0405*      ld a,l
040876 32 8D 08 04 0406*      ld (@bufferId),a
04087A 7C          0407*      ld a,h
04087B 32 8E 08 04 0408*      ld (@bufferId+1),a
04087F 21 8A 08 04 0409*      ld hl,@beg
040883 01 06 00 00 0410*      ld bc,@end-@beg
040887 5B DF       0411*      rst.lil $18
040889 C9          0412*      ret
04088A             0413*  ; VDU 23, 0, &A0, bufferId; 14
04088A 17 00 A0    0414*  @beg: db 23,0,0xA0
04088D 00 00       0415*  @bufferId: dw 0x0000
04088F 0E          0416*             db 14
040890             0417*  @end:
040890             0418*  
040890             0419*  ; load an image file to a buffer and make it a bitmap
040890             0420*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
040890             0421*  vdu_load_img:
040890             0422*  ; back up image type and dimension parameters
040890 22 17 08 04 0423*      ld (bufferId0),hl
040894 F5          0424*      push af
040895 C5          0425*  	push bc
040896 D5          0426*  	push de
040897             0427*  ; load the image
040897 CD B2 08 04 0428*  	call vdu_load_buffer_from_file
04089B             0429*  ; now make it a bitmap
04089B 2A 17 08 04 0430*      ld hl,(bufferId0)
04089F CD 75 08 04 0431*      call vdu_consolidate_buffer
0408A3 2A 17 08 04 0432*      ld hl,(bufferId0)
0408A7 CD 56 07 04 0433*      call vdu_buff_select
0408AB D1          0434*  	pop de ; image height
0408AC C1          0435*  	pop bc ; image width
0408AD F1          0436*  	pop af ; image type
0408AE C3 6B 07 04 0437*  	jp vdu_bmp_create ; will return to caller from there
0408B2             0438*  
0408B2             0439*  ; inputs: hl = bufferId; iy = pointer to filename
0408B2             0440*  vdu_load_buffer_from_file:
0408B2 22 17 08 04 0441*      ld (bufferId0),hl
0408B6             0442*  
0408B6             0443*  ; clear target buffer
0408B6 CD 49 08 04 0444*      call vdu_clear_buffer
0408BA             0445*  
0408BA             0446*  ; open the file in read mode
0408BA             0447*  ; Open a file
0408BA             0448*  ; HLU: Filename
0408BA             0449*  ;   C: Mode
0408BA             0450*  ; Returns:
0408BA             0451*  ;   A: Filehandle, or 0 if couldn't open
0408BA FD E5       0452*  	push iy ; pointer to filename
0408BC E1          0453*  	pop hl
0408BD 0E 01       0454*  	ld c,fa_read
0408BF             0455*      MOSCALL mos_fopen
0408BF 3E 0A       0001*M 			LD	A, function
0408C1 5B CF       0002*M 			RST.LIL	08h
0408C3 32 0C 09 04 0456*      ld (@filehandle),a
0408C7             0457*  
0408C7             0458*  @read_file:
0408C7             0459*  ; Read a block of data from a file
0408C7             0460*  ;   C: Filehandle
0408C7             0461*  ; HLU: Pointer to where to write the data to
0408C7             0462*  ; DEU: Number of bytes to read
0408C7             0463*  ; Returns:
0408C7             0464*  ; DEU: Number of bytes read
0408C7 3A 0C 09 04 0465*      ld a,(@filehandle)
0408CB 4F          0466*      ld c,a
0408CC 21 00 E0 B7 0467*      ld hl,filedata
0408D0 11 00 20 00 0468*      ld de,8192 ; max we can read into onboard sram at one time
0408D4             0469*      MOSCALL mos_fread
0408D4 3E 1A       0001*M 			LD	A, function
0408D6 5B CF       0002*M 			RST.LIL	08h
0408D8             0470*  
0408D8 D5          0471*      push de
0408D9 E1          0472*      pop hl
0408DA CD D0 00 04 0473*      call printDec
0408DE CD 95 00 04 0474*      call printNewLine
0408E2             0475*  
0408E2             0476*  ; test de for zero bytes read
0408E2 21 00 00 00 0477*      ld hl,0
0408E6 AF          0478*      xor a ; clear carry
0408E7 ED 52       0479*      sbc hl,de
0408E9 CA 03 09 04 0480*      jp z,@close_file
0408ED             0481*  
0408ED             0482*  ; load a vdu buffer from local memory
0408ED             0483*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0408ED 2A 17 08 04 0484*      ld hl,(bufferId0)
0408F1 D5          0485*      push de ; chunksize
0408F2 C1          0486*      pop bc
0408F3 11 00 E0 B7 0487*      ld de,filedata
0408F7 CD 1D 08 04 0488*      call vdu_load_buffer
0408FB             0489*  
0408FB             0490*  ; print progress breadcrumbs
0408FB 3E 2E       0491*      ld a,'.'
0408FD 5B D7       0492*      rst.lil 10h
0408FF             0493*  
0408FF             0494*  ; read the next block
0408FF C3 C7 08 04 0495*      jp @read_file
040903             0496*  
040903             0497*  ; close the file
040903             0498*  @close_file:
040903 3A 0C 09 04 0499*      ld a,(@filehandle)
040907             0500*      MOSCALL mos_fclose
040907 3E 0B       0001*M 			LD	A, function
040909 5B CF       0002*M 			RST.LIL	08h
04090B C9          0501*      ret ; vdu_load_buffer_from_file
04090C             0502*  
04090C 00          0503*  @filehandle: db 0 ; file handle
04090D 00 00 00    0504*  @fil: dl 0 ; pointer to FIL struct
040910             0505*  
040910 00 00 00    0506*  @chunkpointer: dl 0 ; pointer to current chunk
040913             0507*  
040913             0508*  ; File information structure (FILINFO)
040913             0509*  @filinfo:
040913 00 00 00 00 0510*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040917 00 00       0511*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040919 00 00       0512*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04091B 00          0513*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
04091C 00 00 00 00 0514*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040929 00 00 00 00 0515*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040A29             0039       include "vdu_sound.inc"
040A29 00          0001*  last_channel: db 0
040A2A             0002*  max_channels: equ 6
040A2A             0003*  
040A2A             0004*  vdu_play_sfx:
040A2A C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040A2B 22 63 0A 04 0006*      ld (@bufferId),hl
040A2F ED 43 6D 0A 0007*      ld (@duration),bc
       04          
040A34 3E 17       0008*      ld a,23
040A36 32 65 0A 04 0009*      ld (@bufferId+2),a
040A3A 3A 29 0A 04 0010*      ld a,(last_channel)
040A3E 3C          0011*      inc a
040A3F             0012*      ; and 31 ; modulo 32
040A3F FE 06       0013*      cp max_channels
040A41 C2 46 0A 04 0014*      jp nz,@load_channel
040A45 AF          0015*      xor a
040A46             0016*  @load_channel:
040A46 32 29 0A 04 0017*      ld (last_channel),a
040A4A 32 60 0A 04 0018*      ld (@channel0),a
040A4E 32 68 0A 04 0019*      ld (@channel1),a
040A52 21 5D 0A 04 0020*      ld hl, @sample
040A56 01 12 00 00 0021*      ld bc, @sample_end - @sample
040A5A 5B DF       0022*      rst.lil $18
040A5C C9          0023*      ret
040A5D             0024*  @sample:
040A5D             0025*  ; Command 4: Set waveform
040A5D             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040A5D 17 00 85    0027*      .db 23,0,$85                        ; do sound
040A60             0028*  @channel0:
040A60 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
040A63             0030*  @bufferId:
040A63 00 00       0031*      .dw 0x0000
040A65             0032*  ; Command 0: Play note
040A65             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040A65 17 00 85    0034*      .db 23,0,$85                        ; do sound
040A68             0035*  @channel1:
040A68 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040A6B 00 00       0037*      .dw 0
040A6D             0038*  @duration:                              ; freq (tuneable samples only)
040A6D 00 00       0039*      .dw 0x0000                        ; duration
040A6F             0040*  @sample_end:
040A6F 00          0041*      .db 0x00 ; padding
040A70             0042*  
040A70             0043*  ; enable enough additional channels so that total enabled = max_channels
040A70             0044*  ; inputs: max_channels set
040A70             0045*  ; returns: nothing
040A70             0046*  ; destroys: af, bc, hl
040A70             0047*  vdu_enable_channels:
040A70 3E 06       0048*      ld a,max_channels
040A72 D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040A74 F2 7B 0A 04 0050*      jp p,@loop
040A78 C9          0051*      ret
040A79 3E 03       0052*      ld a,3 ; first non-default channel
040A7B             0053*  @loop:
040A7B 32 96 0A 04 0054*      ld (@channel),a
040A7F 21 93 0A 04 0055*      ld hl,@beg
040A83 01 05 00 00 0056*      ld bc,@end-@beg
040A87 F5          0057*      push af
040A88 5B DF       0058*      rst.lil $18
040A8A F1          0059*      pop af
040A8B 3C          0060*      inc a
040A8C FE 06       0061*      cp max_channels
040A8E C2 7B 0A 04 0062*      jp nz,@loop
040A92 C9          0063*      ret
040A93             0064*  @beg:
040A93 17 00 85    0065*              db 23, 0, $85
040A96 00          0066*  @channel:   db 0
040A97 08          0067*              db 8 ; command 8: enable channel
040A98             0068*  @end:
040A98             0069*  
040A98             0070*  ; disable all but the three default sound channels
040A98             0071*  ; inputs: max_channels set
040A98             0072*  ; outputs: none
040A98             0073*  ; destroys: ah,hl,bc
040A98             0074*  vdu_disable_channels:
040A98 3E 06       0075*      ld a,max_channels
040A9A D6 03       0076*      sub 3 ; subtract number of default channels already enabled
040A9C F2 A3 0A 04 0077*      jp p,@loop
040AA0 C9          0078*      ret
040AA1 3E 03       0079*      ld a,3 ; first non-default channel
040AA3             0080*  @loop:
040AA3 32 BE 0A 04 0081*      ld (@channel),a
040AA7 21 BB 0A 04 0082*      ld hl,@beg
040AAB 01 05 00 00 0083*      ld bc,@end-@beg
040AAF F5          0084*      push af
040AB0 5B DF       0085*      rst.lil $18
040AB2 F1          0086*      pop af
040AB3 3C          0087*      inc a
040AB4 FE 06       0088*      cp max_channels
040AB6 C2 A3 0A 04 0089*      jp nz,@loop
040ABA C9          0090*      ret
040ABB             0091*  @beg:
040ABB 17 00 85    0092*      db 23, 0, $85
040ABE 00          0093*  @channel: db 0
040ABF 09          0094*      db 9 ; command 9: disable channel
040AC0             0095*  @end:
040AC0             0096*  
040AC0             0097*  
040AC0             0098*  ; ############################################################
040AC0             0099*  ; VDU SOUND API
040AC0             0100*  ; ############################################################
040AC0             0101*  ; Command 0: Play note
040AC0             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040AC0             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
040AC0             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
040AC0             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
040AC0             0106*      rst.lil $18
040AC0             0107*      jr @PLAY_NOTE_END
040AC0             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
040AC0             0109*                   db channel                  ; Channel, 0 (commented out)
040AC0             0110*                   db 0                        ; Play note command
040AC0             0111*                   db volume                   ; Volume
040AC0             0112*                   dw frequency                ; Frequency
040AC0             0113*                   dw duration                 ; Duration
040AC0             0114*  @PLAY_NOTE_END:
040AC0             0115*      ENDMACRO
040AC0             0116*  
040AC0             0117*      MACRO MUTE_CHANNEL channel
040AC0             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
040AC0             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
040AC0             0120*      rst.lil $18
040AC0             0121*      jr @MUTE_CHANNEL_END
040AC0             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
040AC0             0123*                     db channel                ; Channel, 0 (commented out)
040AC0             0124*                     db 2                      ; Set volume command
040AC0             0125*                     db 0                      ; Volume (mute)
040AC0             0126*  @MUTE_CHANNEL_END:
040AC0             0127*      ENDMACRO
040AC0             0128*  
040AC0             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
040AC0             0130*  vdu_play_note:
040AC0 79          0131*      ld a,c
040AC1 32 E1 0A 04 0132*      ld (@channel),a
040AC5 78          0133*      ld a,b
040AC6 32 E3 0A 04 0134*      ld (@volume),a
040ACA 22 E4 0A 04 0135*      ld (@frequency),hl
040ACE ED 53 E6 0A 0136*      ld (@duration),de
       04          
040AD3 21 DE 0A 04 0137*      ld hl,@cmd
040AD7 01 0A 00 00 0138*      ld bc,@end-@cmd
040ADB 5B DF       0139*      rst.lil $18
040ADD C9          0140*      ret
040ADE 17 00 85    0141*  @cmd:       db 23, 0, 0x85
040AE1 00          0142*  @channel:   db 0x00
040AE2 00          0143*              db 0x00 ; play note command
040AE3 00          0144*  @volume:    db 0x00
040AE4 00 00       0145*  @frequency: dw 0x0000
040AE6 00 00       0146*  @duration:  dw 0x0000
040AE8 00          0147*  @end:       db 0x00 ; padding
040AE9             0148*  
040AE9             0149*  ; Command 1: Status
040AE9             0150*  ; VDU 23, 0, &85, channel, 1
040AE9             0151*  ; inputs: a = channel
040AE9             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040AE9             0153*  ; Bit 	Name 	Meaning
040AE9             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040AE9             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040AE9             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040AE9             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040AE9             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040AE9             0159*  
040AE9             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040AE9             0161*  vdu_channel_status:
040AE9 32 FB 0A 04 0162*      ld (@channel),a
040AED 21 F8 0A 04 0163*      ld hl,@cmd
040AF1 01 05 00 00 0164*      ld bc,@end-@cmd
040AF5 5B DF       0165*      rst.lil $18
040AF7 C9          0166*      ret
040AF8 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040AFB 00          0168*  @channel:   db 0x00
040AFC 01          0169*              db 0x01 ; get channel status command
040AFD             0170*  @end:
040AFD             0171*  
040AFD             0172*  ; VDU 23, 0, &85, channel, 2, volume
040AFD             0173*  ; inputs: c = channel, b = volume
040AFD             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040AFD             0175*  
040AFD             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040AFD             0177*  
040AFD             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040AFD             0179*  vdu_channel_volume:
040AFD 79          0180*      ld a,c
040AFE 32 15 0B 04 0181*      ld (@channel),a
040B02 78          0182*      ld a,b
040B03 32 17 0B 04 0183*      ld (@volume),a
040B07 21 12 0B 04 0184*      ld hl,@cmd
040B0B 01 06 00 00 0185*      ld bc,@end-@cmd
040B0F 5B DF       0186*      rst.lil $18
040B11 C9          0187*      ret
040B12 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040B15 00          0189*  @channel:   db 0x00
040B16 02          0190*              db 0x02 ; set volume command
040B17 00          0191*  @volume:    db 0x00
040B18             0192*  @end:
040B18             0193*  
040B18             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040B18             0195*  
040B18             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040B18             0197*  
040B18             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040B18             0199*  
040B18             0200*  ; Returns 1 on success, 0 for failure.
040B18             0201*  vdu_channel_frequency:
040B18 79          0202*      ld a,c
040B19 32 30 0B 04 0203*      ld (@channel),a
040B1D ED 53 32 0B 0204*      ld (@frequency),de
       04          
040B22 21 2D 0B 04 0205*      ld hl,@cmd
040B26 01 07 00 00 0206*      ld bc,@end-@cmd
040B2A 5B DF       0207*      rst.lil $18
040B2C C9          0208*      ret
040B2D 17 00 85    0209*  @cmd:       db 23, 0, 0x85
040B30 00          0210*  @channel:   db 0x00
040B31 03          0211*              db 0x03 ; set frequency command
040B32 00 00       0212*  @frequency: dw 0x0000
040B34 00          0213*  @end:       db 0x00 ; padding
040B35             0214*  
040B35             0215*  
040B35             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040B35             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040B35             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040B35             0219*  
040B35             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040B35             0221*  
040B35             0222*  ; By default a channel is set to use waveform 0 (square wave).
040B35             0223*  
040B35             0224*  ; Valid waveform values are as follows:
040B35             0225*  ; Value 	Waveform
040B35             0226*  ; 0 	Square wave
040B35             0227*  ; 1 	Triangle wave
040B35             0228*  ; 2 	Sawtooth wave
040B35             0229*  ; 3 	Sine wave
040B35             0230*  ; 4 	Noise (simple white noise with no frequency support)
040B35             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040B35             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040B35             0233*  
040B35             0234*  vdu_channel_waveform:
040B35 79          0235*      ld a,c
040B36 32 5B 0B 04 0236*      ld (@channel),a
040B3A 78          0237*      ld a,b
040B3B 32 5D 0B 04 0238*      ld (@waveform),a
040B3F FE 08       0239*      cp 8 ; check if the waveform is a sample
040B41 28 06       0240*      jr z, @sample
040B43 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040B47 18 08       0242*      jr @sendToVdu
040B49             0243*  @sample:
040B49 22 5E 0B 04 0244*      ld (@bufferId),hl
040B4D 01 08 00 00 0245*      ld bc,@end-@cmd
040B51             0246*  @sendToVdu:
040B51 21 58 0B 04 0247*      ld hl,@cmd
040B55 5B DF       0248*      rst.lil $18
040B57 C9          0249*      ret
040B58 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040B5B 00          0251*  @channel:   db 0x00
040B5C 04          0252*              db 0x04 ; set waveform command
040B5D 00          0253*  @waveform:  db 0x00
040B5E 00 00       0254*  @bufferId:  dw 0x0000
040B60 00          0255*  @end:       db 0x00 ; padding
040B61             0256*  
040B61             0257*  
040B61             0258*  
040B61             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
040B61             0260*  ; inputs: hl = bufferId; a = format
040B61             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
040B61             0262*  ; Value 	Description
040B61             0263*  ; 0 	8-bit signed, 16KHz
040B61             0264*  ; 1 	8-bit unsigned, 16KHz
040B61             0265*  vdu_buffer_to_sound:
040B61 22 7A 0B 04 0266*      ld (@bufferId),hl
040B65 32 7C 0B 04 0267*      ld (@format),a
040B69 21 74 0B 04 0268*      ld hl,@cmd
040B6D 01 09 00 00 0269*      ld bc,@end-@cmd
040B71 5B DF       0270*      rst.lil $18
040B73 C9          0271*      ret
040B74 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040B77 00          0273*              db 0x00 ; a magic number that is always 0
040B78 05          0274*              db 0x05 ; buffer to sound command
040B79 02          0275*              db 0x02 ; a magic number that is always 2
040B7A 00 00       0276*  @bufferId:  dw 0x0000
040B7C 00          0277*  @format:    db 0x00
040B7D             0278*  @end:
040B7D             0279*  
040B7D             0280*  
040B7D             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040B7D             0282*  vdu_play_sample:
040B7D             0283*      ; populate input parameters
040B7D 79          0284*      ld a,c
040B7E 32 A8 0B 04 0285*      ld (@channel0),a
040B82 32 B0 0B 04 0286*      ld (@channel1),a
040B86 78          0287*      ld a,b
040B87 32 B2 0B 04 0288*      ld (@volume),a
040B8B ED 53 B3 0B 0289*      ld (@frequency),de
       04          
040B90 22 AB 0B 04 0290*      ld (@bufferId),hl
040B94             0291*      ; clean up byte that got stomped on by bufferId load from hl
040B94 3E 17       0292*      ld a,23
040B96 32 AD 0B 04 0293*      ld (@cmd1),a
040B9A             0294*      ; prep the vdu command string
040B9A 21 A5 0B 04 0295*      ld hl, @cmd0
040B9E 01 12 00 00 0296*      ld bc, @end - @cmd0
040BA2 5B DF       0297*      rst.lil $18
040BA4 C9          0298*      ret
040BA5 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
040BA8 00          0300*  @channel0:   db 0x00
040BA9 04          0301*               db 0x04 ; set waveform command
040BAA 08          0302*  @waveform:   db 0x08 ; sample
040BAB 00 00       0303*  @bufferId:   dw 0x0000
040BAD 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
040BB0 00          0305*  @channel1:   db 0x00
040BB1 00          0306*               db 0x00 ; play note command
040BB2 00          0307*  @volume:     db 0x00
040BB3 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040BB5 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
040BB7 00          0310*  @end:        db 0x00 ; padding
040BB8             0040   
040BB8             0041   ; Application includes
040BB8             0042   	include "font_rc.inc"
040BB8             0001*  ; Bitmap indices:
040BB8             0002*  BUF_0032: equ 0x0020 ; 32
040BB8             0003*  BUF_0033: equ 0x0021 ; 33 !
040BB8             0004*  ; Missing character 34 "
040BB8             0005*  ; Missing character 35 #
040BB8             0006*  ; Missing character 36 $
040BB8             0007*  ; Missing character 37 %
040BB8             0008*  ; Missing character 38 &
040BB8             0009*  ; Missing character 39 '
040BB8             0010*  ; Missing character 40 (
040BB8             0011*  ; Missing character 41 )
040BB8             0012*  ; Missing character 42 *
040BB8             0013*  ; Missing character 43 +
040BB8             0014*  ; Missing character 44 ,
040BB8             0015*  ; Missing character 45 -
040BB8             0016*  ; Missing character 46 .
040BB8             0017*  ; Missing character 47 /
040BB8             0018*  BUF_0048: equ 0x0030 ; 48 0
040BB8             0019*  BUF_0049: equ 0x0031 ; 49 1
040BB8             0020*  BUF_0050: equ 0x0032 ; 50 2
040BB8             0021*  BUF_0051: equ 0x0033 ; 51 3
040BB8             0022*  BUF_0052: equ 0x0034 ; 52 4
040BB8             0023*  BUF_0053: equ 0x0035 ; 53 5
040BB8             0024*  BUF_0054: equ 0x0036 ; 54 6
040BB8             0025*  BUF_0055: equ 0x0037 ; 55 7
040BB8             0026*  BUF_0056: equ 0x0038 ; 56 8
040BB8             0027*  BUF_0057: equ 0x0039 ; 57 9
040BB8             0028*  ; Missing character 58 :
040BB8             0029*  ; Missing character 59 ;
040BB8             0030*  ; Missing character 60 <
040BB8             0031*  ; Missing character 61 =
040BB8             0032*  ; Missing character 62 >
040BB8             0033*  BUF_0063: equ 0x003F ; 63 ?
040BB8             0034*  ; Missing character 64 @
040BB8             0035*  BUF_0065: equ 0x0041 ; 65 A
040BB8             0036*  BUF_0066: equ 0x0042 ; 66 B
040BB8             0037*  BUF_0067: equ 0x0043 ; 67 C
040BB8             0038*  BUF_0068: equ 0x0044 ; 68 D
040BB8             0039*  BUF_0069: equ 0x0045 ; 69 E
040BB8             0040*  BUF_0070: equ 0x0046 ; 70 F
040BB8             0041*  BUF_0071: equ 0x0047 ; 71 G
040BB8             0042*  BUF_0072: equ 0x0048 ; 72 H
040BB8             0043*  BUF_0073: equ 0x0049 ; 73 I
040BB8             0044*  BUF_0074: equ 0x004A ; 74 J
040BB8             0045*  BUF_0075: equ 0x004B ; 75 K
040BB8             0046*  BUF_0076: equ 0x004C ; 76 L
040BB8             0047*  BUF_0077: equ 0x004D ; 77 M
040BB8             0048*  BUF_0078: equ 0x004E ; 78 N
040BB8             0049*  BUF_0079: equ 0x004F ; 79 O
040BB8             0050*  BUF_0080: equ 0x0050 ; 80 P
040BB8             0051*  BUF_0081: equ 0x0051 ; 81 Q
040BB8             0052*  BUF_0082: equ 0x0052 ; 82 R
040BB8             0053*  BUF_0083: equ 0x0053 ; 83 S
040BB8             0054*  BUF_0084: equ 0x0054 ; 84 T
040BB8             0055*  BUF_0085: equ 0x0055 ; 85 U
040BB8             0056*  BUF_0086: equ 0x0056 ; 86 V
040BB8             0057*  BUF_0087: equ 0x0057 ; 87 W
040BB8             0058*  BUF_0088: equ 0x0058 ; 88 X
040BB8             0059*  BUF_0089: equ 0x0059 ; 89 Y
040BB8             0060*  BUF_0090: equ 0x005A ; 90 Z
040BB8             0061*  ; Missing character 91 [
040BB8             0062*  ; Missing character 92 \
040BB8             0063*  ; Missing character 93 ]
040BB8             0064*  ; Missing character 94 ^
040BB8             0065*  ; Missing character 95 _
040BB8             0066*  ; Missing character 96 `
040BB8             0067*  ; Missing character 97 a
040BB8             0068*  ; Missing character 98 b
040BB8             0069*  ; Missing character 99 c
040BB8             0070*  ; Missing character 100 d
040BB8             0071*  ; Missing character 101 e
040BB8             0072*  ; Missing character 102 f
040BB8             0073*  ; Missing character 103 g
040BB8             0074*  ; Missing character 104 h
040BB8             0075*  ; Missing character 105 i
040BB8             0076*  ; Missing character 106 j
040BB8             0077*  ; Missing character 107 k
040BB8             0078*  ; Missing character 108 l
040BB8             0079*  ; Missing character 109 m
040BB8             0080*  ; Missing character 110 n
040BB8             0081*  ; Missing character 111 o
040BB8             0082*  ; Missing character 112 p
040BB8             0083*  ; Missing character 113 q
040BB8             0084*  ; Missing character 114 r
040BB8             0085*  ; Missing character 115 s
040BB8             0086*  ; Missing character 116 t
040BB8             0087*  ; Missing character 117 u
040BB8             0088*  ; Missing character 118 v
040BB8             0089*  ; Missing character 119 w
040BB8             0090*  ; Missing character 120 x
040BB8             0091*  ; Missing character 121 y
040BB8             0092*  ; Missing character 122 z
040BB8             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
040BB8             0094*  font_rc:
040BB8 06 01 00 20 0095*  	dl 0x000106,BUF_0032
       00 00       
040BBE 03 0E 00 21 0096*  	dl 0x000E03,BUF_0033
       00 00       
040BC4 06 01 00 20 0097*  	dl 0x000106,BUF_0032 ; Missing character 34
       00 00       
040BCA 06 01 00 20 0098*  	dl 0x000106,BUF_0032 ; Missing character 35
       00 00       
040BD0 06 01 00 20 0099*  	dl 0x000106,BUF_0032 ; Missing character 36
       00 00       
040BD6 06 01 00 20 0100*  	dl 0x000106,BUF_0032 ; Missing character 37
       00 00       
040BDC 06 01 00 20 0101*  	dl 0x000106,BUF_0032 ; Missing character 38
       00 00       
040BE2 06 01 00 20 0102*  	dl 0x000106,BUF_0032 ; Missing character 39
       00 00       
040BE8 06 01 00 20 0103*  	dl 0x000106,BUF_0032 ; Missing character 40
       00 00       
040BEE 06 01 00 20 0104*  	dl 0x000106,BUF_0032 ; Missing character 41
       00 00       
040BF4 06 01 00 20 0105*  	dl 0x000106,BUF_0032 ; Missing character 42
       00 00       
040BFA 06 01 00 20 0106*  	dl 0x000106,BUF_0032 ; Missing character 43
       00 00       
040C00 06 01 00 20 0107*  	dl 0x000106,BUF_0032 ; Missing character 44
       00 00       
040C06 06 01 00 20 0108*  	dl 0x000106,BUF_0032 ; Missing character 45
       00 00       
040C0C 06 01 00 20 0109*  	dl 0x000106,BUF_0032 ; Missing character 46
       00 00       
040C12 06 01 00 20 0110*  	dl 0x000106,BUF_0032 ; Missing character 47
       00 00       
040C18 08 0E 00 30 0111*  	dl 0x000E08,BUF_0048
       00 00       
040C1E 08 0E 00 31 0112*  	dl 0x000E08,BUF_0049
       00 00       
040C24 08 0E 00 32 0113*  	dl 0x000E08,BUF_0050
       00 00       
040C2A 08 0E 00 33 0114*  	dl 0x000E08,BUF_0051
       00 00       
040C30 08 0E 00 34 0115*  	dl 0x000E08,BUF_0052
       00 00       
040C36 08 0E 00 35 0116*  	dl 0x000E08,BUF_0053
       00 00       
040C3C 08 0E 00 36 0117*  	dl 0x000E08,BUF_0054
       00 00       
040C42 08 0E 00 37 0118*  	dl 0x000E08,BUF_0055
       00 00       
040C48 08 0E 00 38 0119*  	dl 0x000E08,BUF_0056
       00 00       
040C4E 08 0E 00 39 0120*  	dl 0x000E08,BUF_0057
       00 00       
040C54 06 01 00 20 0121*  	dl 0x000106,BUF_0032 ; Missing character 58
       00 00       
040C5A 06 01 00 20 0122*  	dl 0x000106,BUF_0032 ; Missing character 59
       00 00       
040C60 06 01 00 20 0123*  	dl 0x000106,BUF_0032 ; Missing character 60
       00 00       
040C66 06 01 00 20 0124*  	dl 0x000106,BUF_0032 ; Missing character 61
       00 00       
040C6C 06 01 00 20 0125*  	dl 0x000106,BUF_0032 ; Missing character 62
       00 00       
040C72 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0063
       00 00       
040C78 06 01 00 20 0127*  	dl 0x000106,BUF_0032 ; Missing character 64
       00 00       
040C7E 07 0E 00 41 0128*  	dl 0x000E07,BUF_0065
       00 00       
040C84 08 0E 00 42 0129*  	dl 0x000E08,BUF_0066
       00 00       
040C8A 07 0E 00 43 0130*  	dl 0x000E07,BUF_0067
       00 00       
040C90 08 0E 00 44 0131*  	dl 0x000E08,BUF_0068
       00 00       
040C96 08 0E 00 45 0132*  	dl 0x000E08,BUF_0069
       00 00       
040C9C 07 0E 00 46 0133*  	dl 0x000E07,BUF_0070
       00 00       
040CA2 08 0E 00 47 0134*  	dl 0x000E08,BUF_0071
       00 00       
040CA8 07 0E 00 48 0135*  	dl 0x000E07,BUF_0072
       00 00       
040CAE 07 0E 00 49 0136*  	dl 0x000E07,BUF_0073
       00 00       
040CB4 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0074
       00 00       
040CBA 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0075
       00 00       
040CC0 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0076
       00 00       
040CC6 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0077
       00 00       
040CCC 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0078
       00 00       
040CD2 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0079
       00 00       
040CD8 07 0E 00 50 0143*  	dl 0x000E07,BUF_0080
       00 00       
040CDE 08 0F 00 51 0144*  	dl 0x000F08,BUF_0081
       00 00       
040CE4 08 0E 00 52 0145*  	dl 0x000E08,BUF_0082
       00 00       
040CEA 08 0E 00 53 0146*  	dl 0x000E08,BUF_0083
       00 00       
040CF0 07 0E 00 54 0147*  	dl 0x000E07,BUF_0084
       00 00       
040CF6 08 0E 00 55 0148*  	dl 0x000E08,BUF_0085
       00 00       
040CFC 07 0E 00 56 0149*  	dl 0x000E07,BUF_0086
       00 00       
040D02 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0087
       00 00       
040D08 07 0E 00 58 0151*  	dl 0x000E07,BUF_0088
       00 00       
040D0E 08 0E 00 59 0152*  	dl 0x000E08,BUF_0089
       00 00       
040D14 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0090
       00 00       
040D1A 06 01 00 20 0154*  	dl 0x000106,BUF_0032 ; Missing character 91
       00 00       
040D20 06 01 00 20 0155*  	dl 0x000106,BUF_0032 ; Missing character 92
       00 00       
040D26 06 01 00 20 0156*  	dl 0x000106,BUF_0032 ; Missing character 93
       00 00       
040D2C 06 01 00 20 0157*  	dl 0x000106,BUF_0032 ; Missing character 94
       00 00       
040D32 06 01 00 20 0158*  	dl 0x000106,BUF_0032 ; Missing character 95
       00 00       
040D38 06 01 00 20 0159*  	dl 0x000106,BUF_0032 ; Missing character 96
       00 00       
040D3E 06 01 00 20 0160*  	dl 0x000106,BUF_0032 ; Missing character 97
       00 00       
040D44 06 01 00 20 0161*  	dl 0x000106,BUF_0032 ; Missing character 98
       00 00       
040D4A 06 01 00 20 0162*  	dl 0x000106,BUF_0032 ; Missing character 99
       00 00       
040D50 06 01 00 20 0163*  	dl 0x000106,BUF_0032 ; Missing character 100
       00 00       
040D56 06 01 00 20 0164*  	dl 0x000106,BUF_0032 ; Missing character 101
       00 00       
040D5C 06 01 00 20 0165*  	dl 0x000106,BUF_0032 ; Missing character 102
       00 00       
040D62 06 01 00 20 0166*  	dl 0x000106,BUF_0032 ; Missing character 103
       00 00       
040D68 06 01 00 20 0167*  	dl 0x000106,BUF_0032 ; Missing character 104
       00 00       
040D6E 06 01 00 20 0168*  	dl 0x000106,BUF_0032 ; Missing character 105
       00 00       
040D74 06 01 00 20 0169*  	dl 0x000106,BUF_0032 ; Missing character 106
       00 00       
040D7A 06 01 00 20 0170*  	dl 0x000106,BUF_0032 ; Missing character 107
       00 00       
040D80 06 01 00 20 0171*  	dl 0x000106,BUF_0032 ; Missing character 108
       00 00       
040D86 06 01 00 20 0172*  	dl 0x000106,BUF_0032 ; Missing character 109
       00 00       
040D8C 06 01 00 20 0173*  	dl 0x000106,BUF_0032 ; Missing character 110
       00 00       
040D92 06 01 00 20 0174*  	dl 0x000106,BUF_0032 ; Missing character 111
       00 00       
040D98 06 01 00 20 0175*  	dl 0x000106,BUF_0032 ; Missing character 112
       00 00       
040D9E 06 01 00 20 0176*  	dl 0x000106,BUF_0032 ; Missing character 113
       00 00       
040DA4 06 01 00 20 0177*  	dl 0x000106,BUF_0032 ; Missing character 114
       00 00       
040DAA 06 01 00 20 0178*  	dl 0x000106,BUF_0032 ; Missing character 115
       00 00       
040DB0 06 01 00 20 0179*  	dl 0x000106,BUF_0032 ; Missing character 116
       00 00       
040DB6 06 01 00 20 0180*  	dl 0x000106,BUF_0032 ; Missing character 117
       00 00       
040DBC 06 01 00 20 0181*  	dl 0x000106,BUF_0032 ; Missing character 118
       00 00       
040DC2 06 01 00 20 0182*  	dl 0x000106,BUF_0032 ; Missing character 119
       00 00       
040DC8 06 01 00 20 0183*  	dl 0x000106,BUF_0032 ; Missing character 120
       00 00       
040DCE 06 01 00 20 0184*  	dl 0x000106,BUF_0032 ; Missing character 121
       00 00       
040DD4 06 01 00 20 0185*  	dl 0x000106,BUF_0032 ; Missing character 122
       00 00       
040DDA             0186*  
040DDA             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040DDA             0188*  load_font_rc:
040DDA             0189*  
040DDA 21 7E 13 04 0190*  	ld hl,Frc032
040DDE 11 00 E0 B7 0191*  	ld de,filedata
040DE2 01 00 00 01 0192*  	ld bc,65536
040DE6 3E 01       0193*  	ld a,mos_load
040DE8 5B CF       0194*  	RST.LIL 08h
040DEA 21 20 00 00 0195*  	ld hl,BUF_0032
040DEE 01 06 00 00 0196*  	ld bc,6
040DF2 11 01 00 00 0197*  	ld de,1
040DF6 DD 21 06 00 0198*  	ld ix,6
       00          
040DFB CD 90 08 04 0199*  	call vdu_load_img
040DFF             0200*  
040DFF 21 91 13 04 0201*  	ld hl,Frc033
040E03 11 00 E0 B7 0202*  	ld de,filedata
040E07 01 00 00 01 0203*  	ld bc,65536
040E0B 3E 01       0204*  	ld a,mos_load
040E0D 5B CF       0205*  	RST.LIL 08h
040E0F 21 21 00 00 0206*  	ld hl,BUF_0033
040E13 01 03 00 00 0207*  	ld bc,3
040E17 11 0E 00 00 0208*  	ld de,14
040E1B DD 21 2A 00 0209*  	ld ix,42
       00          
040E20 CD 90 08 04 0210*  	call vdu_load_img
040E24             0211*  ; Missing character 34
040E24             0212*  ; Missing character 35
040E24             0213*  ; Missing character 36
040E24             0214*  ; Missing character 37
040E24             0215*  ; Missing character 38
040E24             0216*  ; Missing character 39
040E24             0217*  ; Missing character 40
040E24             0218*  ; Missing character 41
040E24             0219*  ; Missing character 42
040E24             0220*  ; Missing character 43
040E24             0221*  ; Missing character 44
040E24             0222*  ; Missing character 45
040E24             0223*  ; Missing character 46
040E24             0224*  ; Missing character 47
040E24             0225*  
040E24 21 A4 13 04 0226*  	ld hl,Frc048
040E28 11 00 E0 B7 0227*  	ld de,filedata
040E2C 01 00 00 01 0228*  	ld bc,65536
040E30 3E 01       0229*  	ld a,mos_load
040E32 5B CF       0230*  	RST.LIL 08h
040E34 21 30 00 00 0231*  	ld hl,BUF_0048
040E38 01 08 00 00 0232*  	ld bc,8
040E3C 11 0E 00 00 0233*  	ld de,14
040E40 DD 21 70 00 0234*  	ld ix,112
       00          
040E45 CD 90 08 04 0235*  	call vdu_load_img
040E49             0236*  
040E49 21 B7 13 04 0237*  	ld hl,Frc049
040E4D 11 00 E0 B7 0238*  	ld de,filedata
040E51 01 00 00 01 0239*  	ld bc,65536
040E55 3E 01       0240*  	ld a,mos_load
040E57 5B CF       0241*  	RST.LIL 08h
040E59 21 31 00 00 0242*  	ld hl,BUF_0049
040E5D 01 08 00 00 0243*  	ld bc,8
040E61 11 0E 00 00 0244*  	ld de,14
040E65 DD 21 70 00 0245*  	ld ix,112
       00          
040E6A CD 90 08 04 0246*  	call vdu_load_img
040E6E             0247*  
040E6E 21 CA 13 04 0248*  	ld hl,Frc050
040E72 11 00 E0 B7 0249*  	ld de,filedata
040E76 01 00 00 01 0250*  	ld bc,65536
040E7A 3E 01       0251*  	ld a,mos_load
040E7C 5B CF       0252*  	RST.LIL 08h
040E7E 21 32 00 00 0253*  	ld hl,BUF_0050
040E82 01 08 00 00 0254*  	ld bc,8
040E86 11 0E 00 00 0255*  	ld de,14
040E8A DD 21 70 00 0256*  	ld ix,112
       00          
040E8F CD 90 08 04 0257*  	call vdu_load_img
040E93             0258*  
040E93 21 DD 13 04 0259*  	ld hl,Frc051
040E97 11 00 E0 B7 0260*  	ld de,filedata
040E9B 01 00 00 01 0261*  	ld bc,65536
040E9F 3E 01       0262*  	ld a,mos_load
040EA1 5B CF       0263*  	RST.LIL 08h
040EA3 21 33 00 00 0264*  	ld hl,BUF_0051
040EA7 01 08 00 00 0265*  	ld bc,8
040EAB 11 0E 00 00 0266*  	ld de,14
040EAF DD 21 70 00 0267*  	ld ix,112
       00          
040EB4 CD 90 08 04 0268*  	call vdu_load_img
040EB8             0269*  
040EB8 21 F0 13 04 0270*  	ld hl,Frc052
040EBC 11 00 E0 B7 0271*  	ld de,filedata
040EC0 01 00 00 01 0272*  	ld bc,65536
040EC4 3E 01       0273*  	ld a,mos_load
040EC6 5B CF       0274*  	RST.LIL 08h
040EC8 21 34 00 00 0275*  	ld hl,BUF_0052
040ECC 01 08 00 00 0276*  	ld bc,8
040ED0 11 0E 00 00 0277*  	ld de,14
040ED4 DD 21 70 00 0278*  	ld ix,112
       00          
040ED9 CD 90 08 04 0279*  	call vdu_load_img
040EDD             0280*  
040EDD 21 03 14 04 0281*  	ld hl,Frc053
040EE1 11 00 E0 B7 0282*  	ld de,filedata
040EE5 01 00 00 01 0283*  	ld bc,65536
040EE9 3E 01       0284*  	ld a,mos_load
040EEB 5B CF       0285*  	RST.LIL 08h
040EED 21 35 00 00 0286*  	ld hl,BUF_0053
040EF1 01 08 00 00 0287*  	ld bc,8
040EF5 11 0E 00 00 0288*  	ld de,14
040EF9 DD 21 70 00 0289*  	ld ix,112
       00          
040EFE CD 90 08 04 0290*  	call vdu_load_img
040F02             0291*  
040F02 21 16 14 04 0292*  	ld hl,Frc054
040F06 11 00 E0 B7 0293*  	ld de,filedata
040F0A 01 00 00 01 0294*  	ld bc,65536
040F0E 3E 01       0295*  	ld a,mos_load
040F10 5B CF       0296*  	RST.LIL 08h
040F12 21 36 00 00 0297*  	ld hl,BUF_0054
040F16 01 08 00 00 0298*  	ld bc,8
040F1A 11 0E 00 00 0299*  	ld de,14
040F1E DD 21 70 00 0300*  	ld ix,112
       00          
040F23 CD 90 08 04 0301*  	call vdu_load_img
040F27             0302*  
040F27 21 29 14 04 0303*  	ld hl,Frc055
040F2B 11 00 E0 B7 0304*  	ld de,filedata
040F2F 01 00 00 01 0305*  	ld bc,65536
040F33 3E 01       0306*  	ld a,mos_load
040F35 5B CF       0307*  	RST.LIL 08h
040F37 21 37 00 00 0308*  	ld hl,BUF_0055
040F3B 01 08 00 00 0309*  	ld bc,8
040F3F 11 0E 00 00 0310*  	ld de,14
040F43 DD 21 70 00 0311*  	ld ix,112
       00          
040F48 CD 90 08 04 0312*  	call vdu_load_img
040F4C             0313*  
040F4C 21 3C 14 04 0314*  	ld hl,Frc056
040F50 11 00 E0 B7 0315*  	ld de,filedata
040F54 01 00 00 01 0316*  	ld bc,65536
040F58 3E 01       0317*  	ld a,mos_load
040F5A 5B CF       0318*  	RST.LIL 08h
040F5C 21 38 00 00 0319*  	ld hl,BUF_0056
040F60 01 08 00 00 0320*  	ld bc,8
040F64 11 0E 00 00 0321*  	ld de,14
040F68 DD 21 70 00 0322*  	ld ix,112
       00          
040F6D CD 90 08 04 0323*  	call vdu_load_img
040F71             0324*  
040F71 21 4F 14 04 0325*  	ld hl,Frc057
040F75 11 00 E0 B7 0326*  	ld de,filedata
040F79 01 00 00 01 0327*  	ld bc,65536
040F7D 3E 01       0328*  	ld a,mos_load
040F7F 5B CF       0329*  	RST.LIL 08h
040F81 21 39 00 00 0330*  	ld hl,BUF_0057
040F85 01 08 00 00 0331*  	ld bc,8
040F89 11 0E 00 00 0332*  	ld de,14
040F8D DD 21 70 00 0333*  	ld ix,112
       00          
040F92 CD 90 08 04 0334*  	call vdu_load_img
040F96             0335*  ; Missing character 58
040F96             0336*  ; Missing character 59
040F96             0337*  ; Missing character 60
040F96             0338*  ; Missing character 61
040F96             0339*  ; Missing character 62
040F96             0340*  
040F96 21 62 14 04 0341*  	ld hl,Frc063
040F9A 11 00 E0 B7 0342*  	ld de,filedata
040F9E 01 00 00 01 0343*  	ld bc,65536
040FA2 3E 01       0344*  	ld a,mos_load
040FA4 5B CF       0345*  	RST.LIL 08h
040FA6 21 3F 00 00 0346*  	ld hl,BUF_0063
040FAA 01 08 00 00 0347*  	ld bc,8
040FAE 11 0E 00 00 0348*  	ld de,14
040FB2 DD 21 70 00 0349*  	ld ix,112
       00          
040FB7 CD 90 08 04 0350*  	call vdu_load_img
040FBB             0351*  ; Missing character 64
040FBB             0352*  
040FBB 21 75 14 04 0353*  	ld hl,Frc065
040FBF 11 00 E0 B7 0354*  	ld de,filedata
040FC3 01 00 00 01 0355*  	ld bc,65536
040FC7 3E 01       0356*  	ld a,mos_load
040FC9 5B CF       0357*  	RST.LIL 08h
040FCB 21 41 00 00 0358*  	ld hl,BUF_0065
040FCF 01 07 00 00 0359*  	ld bc,7
040FD3 11 0E 00 00 0360*  	ld de,14
040FD7 DD 21 62 00 0361*  	ld ix,98
       00          
040FDC CD 90 08 04 0362*  	call vdu_load_img
040FE0             0363*  
040FE0 21 88 14 04 0364*  	ld hl,Frc066
040FE4 11 00 E0 B7 0365*  	ld de,filedata
040FE8 01 00 00 01 0366*  	ld bc,65536
040FEC 3E 01       0367*  	ld a,mos_load
040FEE 5B CF       0368*  	RST.LIL 08h
040FF0 21 42 00 00 0369*  	ld hl,BUF_0066
040FF4 01 08 00 00 0370*  	ld bc,8
040FF8 11 0E 00 00 0371*  	ld de,14
040FFC DD 21 70 00 0372*  	ld ix,112
       00          
041001 CD 90 08 04 0373*  	call vdu_load_img
041005             0374*  
041005 21 9B 14 04 0375*  	ld hl,Frc067
041009 11 00 E0 B7 0376*  	ld de,filedata
04100D 01 00 00 01 0377*  	ld bc,65536
041011 3E 01       0378*  	ld a,mos_load
041013 5B CF       0379*  	RST.LIL 08h
041015 21 43 00 00 0380*  	ld hl,BUF_0067
041019 01 07 00 00 0381*  	ld bc,7
04101D 11 0E 00 00 0382*  	ld de,14
041021 DD 21 62 00 0383*  	ld ix,98
       00          
041026 CD 90 08 04 0384*  	call vdu_load_img
04102A             0385*  
04102A 21 AE 14 04 0386*  	ld hl,Frc068
04102E 11 00 E0 B7 0387*  	ld de,filedata
041032 01 00 00 01 0388*  	ld bc,65536
041036 3E 01       0389*  	ld a,mos_load
041038 5B CF       0390*  	RST.LIL 08h
04103A 21 44 00 00 0391*  	ld hl,BUF_0068
04103E 01 08 00 00 0392*  	ld bc,8
041042 11 0E 00 00 0393*  	ld de,14
041046 DD 21 70 00 0394*  	ld ix,112
       00          
04104B CD 90 08 04 0395*  	call vdu_load_img
04104F             0396*  
04104F 21 C1 14 04 0397*  	ld hl,Frc069
041053 11 00 E0 B7 0398*  	ld de,filedata
041057 01 00 00 01 0399*  	ld bc,65536
04105B 3E 01       0400*  	ld a,mos_load
04105D 5B CF       0401*  	RST.LIL 08h
04105F 21 45 00 00 0402*  	ld hl,BUF_0069
041063 01 08 00 00 0403*  	ld bc,8
041067 11 0E 00 00 0404*  	ld de,14
04106B DD 21 70 00 0405*  	ld ix,112
       00          
041070 CD 90 08 04 0406*  	call vdu_load_img
041074             0407*  
041074 21 D4 14 04 0408*  	ld hl,Frc070
041078 11 00 E0 B7 0409*  	ld de,filedata
04107C 01 00 00 01 0410*  	ld bc,65536
041080 3E 01       0411*  	ld a,mos_load
041082 5B CF       0412*  	RST.LIL 08h
041084 21 46 00 00 0413*  	ld hl,BUF_0070
041088 01 07 00 00 0414*  	ld bc,7
04108C 11 0E 00 00 0415*  	ld de,14
041090 DD 21 62 00 0416*  	ld ix,98
       00          
041095 CD 90 08 04 0417*  	call vdu_load_img
041099             0418*  
041099 21 E7 14 04 0419*  	ld hl,Frc071
04109D 11 00 E0 B7 0420*  	ld de,filedata
0410A1 01 00 00 01 0421*  	ld bc,65536
0410A5 3E 01       0422*  	ld a,mos_load
0410A7 5B CF       0423*  	RST.LIL 08h
0410A9 21 47 00 00 0424*  	ld hl,BUF_0071
0410AD 01 08 00 00 0425*  	ld bc,8
0410B1 11 0E 00 00 0426*  	ld de,14
0410B5 DD 21 70 00 0427*  	ld ix,112
       00          
0410BA CD 90 08 04 0428*  	call vdu_load_img
0410BE             0429*  
0410BE 21 FA 14 04 0430*  	ld hl,Frc072
0410C2 11 00 E0 B7 0431*  	ld de,filedata
0410C6 01 00 00 01 0432*  	ld bc,65536
0410CA 3E 01       0433*  	ld a,mos_load
0410CC 5B CF       0434*  	RST.LIL 08h
0410CE 21 48 00 00 0435*  	ld hl,BUF_0072
0410D2 01 07 00 00 0436*  	ld bc,7
0410D6 11 0E 00 00 0437*  	ld de,14
0410DA DD 21 62 00 0438*  	ld ix,98
       00          
0410DF CD 90 08 04 0439*  	call vdu_load_img
0410E3             0440*  
0410E3 21 0D 15 04 0441*  	ld hl,Frc073
0410E7 11 00 E0 B7 0442*  	ld de,filedata
0410EB 01 00 00 01 0443*  	ld bc,65536
0410EF 3E 01       0444*  	ld a,mos_load
0410F1 5B CF       0445*  	RST.LIL 08h
0410F3 21 49 00 00 0446*  	ld hl,BUF_0073
0410F7 01 07 00 00 0447*  	ld bc,7
0410FB 11 0E 00 00 0448*  	ld de,14
0410FF DD 21 62 00 0449*  	ld ix,98
       00          
041104 CD 90 08 04 0450*  	call vdu_load_img
041108             0451*  
041108 21 20 15 04 0452*  	ld hl,Frc074
04110C 11 00 E0 B7 0453*  	ld de,filedata
041110 01 00 00 01 0454*  	ld bc,65536
041114 3E 01       0455*  	ld a,mos_load
041116 5B CF       0456*  	RST.LIL 08h
041118 21 4A 00 00 0457*  	ld hl,BUF_0074
04111C 01 08 00 00 0458*  	ld bc,8
041120 11 0E 00 00 0459*  	ld de,14
041124 DD 21 70 00 0460*  	ld ix,112
       00          
041129 CD 90 08 04 0461*  	call vdu_load_img
04112D             0462*  
04112D 21 33 15 04 0463*  	ld hl,Frc075
041131 11 00 E0 B7 0464*  	ld de,filedata
041135 01 00 00 01 0465*  	ld bc,65536
041139 3E 01       0466*  	ld a,mos_load
04113B 5B CF       0467*  	RST.LIL 08h
04113D 21 4B 00 00 0468*  	ld hl,BUF_0075
041141 01 07 00 00 0469*  	ld bc,7
041145 11 0E 00 00 0470*  	ld de,14
041149 DD 21 62 00 0471*  	ld ix,98
       00          
04114E CD 90 08 04 0472*  	call vdu_load_img
041152             0473*  
041152 21 46 15 04 0474*  	ld hl,Frc076
041156 11 00 E0 B7 0475*  	ld de,filedata
04115A 01 00 00 01 0476*  	ld bc,65536
04115E 3E 01       0477*  	ld a,mos_load
041160 5B CF       0478*  	RST.LIL 08h
041162 21 4C 00 00 0479*  	ld hl,BUF_0076
041166 01 08 00 00 0480*  	ld bc,8
04116A 11 0E 00 00 0481*  	ld de,14
04116E DD 21 70 00 0482*  	ld ix,112
       00          
041173 CD 90 08 04 0483*  	call vdu_load_img
041177             0484*  
041177 21 59 15 04 0485*  	ld hl,Frc077
04117B 11 00 E0 B7 0486*  	ld de,filedata
04117F 01 00 00 01 0487*  	ld bc,65536
041183 3E 01       0488*  	ld a,mos_load
041185 5B CF       0489*  	RST.LIL 08h
041187 21 4D 00 00 0490*  	ld hl,BUF_0077
04118B 01 09 00 00 0491*  	ld bc,9
04118F 11 0E 00 00 0492*  	ld de,14
041193 DD 21 7E 00 0493*  	ld ix,126
       00          
041198 CD 90 08 04 0494*  	call vdu_load_img
04119C             0495*  
04119C 21 6C 15 04 0496*  	ld hl,Frc078
0411A0 11 00 E0 B7 0497*  	ld de,filedata
0411A4 01 00 00 01 0498*  	ld bc,65536
0411A8 3E 01       0499*  	ld a,mos_load
0411AA 5B CF       0500*  	RST.LIL 08h
0411AC 21 4E 00 00 0501*  	ld hl,BUF_0078
0411B0 01 07 00 00 0502*  	ld bc,7
0411B4 11 0E 00 00 0503*  	ld de,14
0411B8 DD 21 62 00 0504*  	ld ix,98
       00          
0411BD CD 90 08 04 0505*  	call vdu_load_img
0411C1             0506*  
0411C1 21 7F 15 04 0507*  	ld hl,Frc079
0411C5 11 00 E0 B7 0508*  	ld de,filedata
0411C9 01 00 00 01 0509*  	ld bc,65536
0411CD 3E 01       0510*  	ld a,mos_load
0411CF 5B CF       0511*  	RST.LIL 08h
0411D1 21 4F 00 00 0512*  	ld hl,BUF_0079
0411D5 01 08 00 00 0513*  	ld bc,8
0411D9 11 0E 00 00 0514*  	ld de,14
0411DD DD 21 70 00 0515*  	ld ix,112
       00          
0411E2 CD 90 08 04 0516*  	call vdu_load_img
0411E6             0517*  
0411E6 21 92 15 04 0518*  	ld hl,Frc080
0411EA 11 00 E0 B7 0519*  	ld de,filedata
0411EE 01 00 00 01 0520*  	ld bc,65536
0411F2 3E 01       0521*  	ld a,mos_load
0411F4 5B CF       0522*  	RST.LIL 08h
0411F6 21 50 00 00 0523*  	ld hl,BUF_0080
0411FA 01 07 00 00 0524*  	ld bc,7
0411FE 11 0E 00 00 0525*  	ld de,14
041202 DD 21 62 00 0526*  	ld ix,98
       00          
041207 CD 90 08 04 0527*  	call vdu_load_img
04120B             0528*  
04120B 21 A5 15 04 0529*  	ld hl,Frc081
04120F 11 00 E0 B7 0530*  	ld de,filedata
041213 01 00 00 01 0531*  	ld bc,65536
041217 3E 01       0532*  	ld a,mos_load
041219 5B CF       0533*  	RST.LIL 08h
04121B 21 51 00 00 0534*  	ld hl,BUF_0081
04121F 01 08 00 00 0535*  	ld bc,8
041223 11 0F 00 00 0536*  	ld de,15
041227 DD 21 78 00 0537*  	ld ix,120
       00          
04122C CD 90 08 04 0538*  	call vdu_load_img
041230             0539*  
041230 21 B8 15 04 0540*  	ld hl,Frc082
041234 11 00 E0 B7 0541*  	ld de,filedata
041238 01 00 00 01 0542*  	ld bc,65536
04123C 3E 01       0543*  	ld a,mos_load
04123E 5B CF       0544*  	RST.LIL 08h
041240 21 52 00 00 0545*  	ld hl,BUF_0082
041244 01 08 00 00 0546*  	ld bc,8
041248 11 0E 00 00 0547*  	ld de,14
04124C DD 21 70 00 0548*  	ld ix,112
       00          
041251 CD 90 08 04 0549*  	call vdu_load_img
041255             0550*  
041255 21 CB 15 04 0551*  	ld hl,Frc083
041259 11 00 E0 B7 0552*  	ld de,filedata
04125D 01 00 00 01 0553*  	ld bc,65536
041261 3E 01       0554*  	ld a,mos_load
041263 5B CF       0555*  	RST.LIL 08h
041265 21 53 00 00 0556*  	ld hl,BUF_0083
041269 01 08 00 00 0557*  	ld bc,8
04126D 11 0E 00 00 0558*  	ld de,14
041271 DD 21 70 00 0559*  	ld ix,112
       00          
041276 CD 90 08 04 0560*  	call vdu_load_img
04127A             0561*  
04127A 21 DE 15 04 0562*  	ld hl,Frc084
04127E 11 00 E0 B7 0563*  	ld de,filedata
041282 01 00 00 01 0564*  	ld bc,65536
041286 3E 01       0565*  	ld a,mos_load
041288 5B CF       0566*  	RST.LIL 08h
04128A 21 54 00 00 0567*  	ld hl,BUF_0084
04128E 01 07 00 00 0568*  	ld bc,7
041292 11 0E 00 00 0569*  	ld de,14
041296 DD 21 62 00 0570*  	ld ix,98
       00          
04129B CD 90 08 04 0571*  	call vdu_load_img
04129F             0572*  
04129F 21 F1 15 04 0573*  	ld hl,Frc085
0412A3 11 00 E0 B7 0574*  	ld de,filedata
0412A7 01 00 00 01 0575*  	ld bc,65536
0412AB 3E 01       0576*  	ld a,mos_load
0412AD 5B CF       0577*  	RST.LIL 08h
0412AF 21 55 00 00 0578*  	ld hl,BUF_0085
0412B3 01 08 00 00 0579*  	ld bc,8
0412B7 11 0E 00 00 0580*  	ld de,14
0412BB DD 21 70 00 0581*  	ld ix,112
       00          
0412C0 CD 90 08 04 0582*  	call vdu_load_img
0412C4             0583*  
0412C4 21 04 16 04 0584*  	ld hl,Frc086
0412C8 11 00 E0 B7 0585*  	ld de,filedata
0412CC 01 00 00 01 0586*  	ld bc,65536
0412D0 3E 01       0587*  	ld a,mos_load
0412D2 5B CF       0588*  	RST.LIL 08h
0412D4 21 56 00 00 0589*  	ld hl,BUF_0086
0412D8 01 07 00 00 0590*  	ld bc,7
0412DC 11 0E 00 00 0591*  	ld de,14
0412E0 DD 21 62 00 0592*  	ld ix,98
       00          
0412E5 CD 90 08 04 0593*  	call vdu_load_img
0412E9             0594*  
0412E9 21 17 16 04 0595*  	ld hl,Frc087
0412ED 11 00 E0 B7 0596*  	ld de,filedata
0412F1 01 00 00 01 0597*  	ld bc,65536
0412F5 3E 01       0598*  	ld a,mos_load
0412F7 5B CF       0599*  	RST.LIL 08h
0412F9 21 57 00 00 0600*  	ld hl,BUF_0087
0412FD 01 0B 00 00 0601*  	ld bc,11
041301 11 0E 00 00 0602*  	ld de,14
041305 DD 21 9A 00 0603*  	ld ix,154
       00          
04130A CD 90 08 04 0604*  	call vdu_load_img
04130E             0605*  
04130E 21 2A 16 04 0606*  	ld hl,Frc088
041312 11 00 E0 B7 0607*  	ld de,filedata
041316 01 00 00 01 0608*  	ld bc,65536
04131A 3E 01       0609*  	ld a,mos_load
04131C 5B CF       0610*  	RST.LIL 08h
04131E 21 58 00 00 0611*  	ld hl,BUF_0088
041322 01 07 00 00 0612*  	ld bc,7
041326 11 0E 00 00 0613*  	ld de,14
04132A DD 21 62 00 0614*  	ld ix,98
       00          
04132F CD 90 08 04 0615*  	call vdu_load_img
041333             0616*  
041333 21 3D 16 04 0617*  	ld hl,Frc089
041337 11 00 E0 B7 0618*  	ld de,filedata
04133B 01 00 00 01 0619*  	ld bc,65536
04133F 3E 01       0620*  	ld a,mos_load
041341 5B CF       0621*  	RST.LIL 08h
041343 21 59 00 00 0622*  	ld hl,BUF_0089
041347 01 08 00 00 0623*  	ld bc,8
04134B 11 0E 00 00 0624*  	ld de,14
04134F DD 21 70 00 0625*  	ld ix,112
       00          
041354 CD 90 08 04 0626*  	call vdu_load_img
041358             0627*  
041358 21 50 16 04 0628*  	ld hl,Frc090
04135C 11 00 E0 B7 0629*  	ld de,filedata
041360 01 00 00 01 0630*  	ld bc,65536
041364 3E 01       0631*  	ld a,mos_load
041366 5B CF       0632*  	RST.LIL 08h
041368 21 5A 00 00 0633*  	ld hl,BUF_0090
04136C 01 07 00 00 0634*  	ld bc,7
041370 11 0E 00 00 0635*  	ld de,14
041374 DD 21 62 00 0636*  	ld ix,98
       00          
041379 CD 90 08 04 0637*  	call vdu_load_img
04137D             0638*  ; Missing character 91
04137D             0639*  ; Missing character 92
04137D             0640*  ; Missing character 93
04137D             0641*  ; Missing character 94
04137D             0642*  ; Missing character 95
04137D             0643*  ; Missing character 96
04137D             0644*  ; Missing character 97
04137D             0645*  ; Missing character 98
04137D             0646*  ; Missing character 99
04137D             0647*  ; Missing character 100
04137D             0648*  ; Missing character 101
04137D             0649*  ; Missing character 102
04137D             0650*  ; Missing character 103
04137D             0651*  ; Missing character 104
04137D             0652*  ; Missing character 105
04137D             0653*  ; Missing character 106
04137D             0654*  ; Missing character 107
04137D             0655*  ; Missing character 108
04137D             0656*  ; Missing character 109
04137D             0657*  ; Missing character 110
04137D             0658*  ; Missing character 111
04137D             0659*  ; Missing character 112
04137D             0660*  ; Missing character 113
04137D             0661*  ; Missing character 114
04137D             0662*  ; Missing character 115
04137D             0663*  ; Missing character 116
04137D             0664*  ; Missing character 117
04137D             0665*  ; Missing character 118
04137D             0666*  ; Missing character 119
04137D             0667*  ; Missing character 120
04137D             0668*  ; Missing character 121
04137D             0669*  ; Missing character 122
04137D             0670*  
04137D C9          0671*  	ret
04137E             0672*  
04137E 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
041391 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
0413A4 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
0413B7 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
0413CA 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
0413DD 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
0413F0 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
041403 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
041416 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
041429 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
04143C 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
04144F 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
041462 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
041475 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
041488 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04149B 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
0414AE 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
0414C1 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
0414D4 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
0414E7 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
0414FA 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
04150D 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
041520 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
041533 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
041546 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
041559 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
04156C 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
04157F 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
041592 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
0415A5 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
0415B8 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
0415CB 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
0415DE 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
0415F1 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
041604 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
041617 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
04162A 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
04163D 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
041650 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
041663             0043   	include "input.inc"
041663             0001*  keyboard_masks: ds 16 ; 16 bytes for the keyboard masks
041673             0002*  
041673             0003*  ; reset the local keyboard masks to zero
041673             0004*  ; inputs: none
041673             0005*  ; outputs: none
041673             0006*  ; clobbers: a, b, iy
041673             0007*  reset_keys:
041673 FD 21 63 16 0008*      ld iy,keyboard_masks
       04          
041678 AF          0009*      xor a
041679 06 10       0010*      ld b,16 ; loop counter
04167B             0011*  @loop:
04167B FD 77 00    0012*      ld (iy),a
04167E FD 23       0013*      inc iy
041680 10 F9       0014*      djnz @loop
041682 C9          0015*      ret
041683             0016*  
041683             0017*  ; check system virtual keyboard map for keys down and or them with local keyboard masks
041683             0018*  ; inputs: none
041683             0019*  ; outputs: none
041683             0020*  ; clobbers: a, b, ix, iy
041683             0021*  set_keys:
041683             0022*      MOSCALL mos_getkbmap ; ix points to the virtual keyboard map
041683 3E 1E       0001*M 			LD	A, function
041685 5B CF       0002*M 			RST.LIL	08h
041687 FD 21 63 16 0023*      ld iy,keyboard_masks
       04          
04168C 06 10       0024*      ld b,16 ; loop counter
04168E             0025*  @loop:
04168E DD 7E 00    0026*      ld a,(ix)
041691 FD B6 00    0027*      or (iy)
041694 FD 77 00    0028*      ld (iy),a
041697 DD 23       0029*      inc ix
041699 FD 23       0030*      inc iy
04169B 10 F1       0031*      djnz @loop
04169D C9          0032*      ret
04169E             0033*  
04169E             0034*  ; ============ KEYBOARD INPUT ============
04169E             0035*  do_input:
04169E             0036*  ; get user keyboard input
04169E DD 21 63 16 0037*      ld ix,keyboard_masks
       04          
0416A3 3E FF       0038*      ld a,-1 ; anything non-zero to indicates no ship movement key pressed
0416A5             0039*  
0416A5             0040*  ; ------ QUIT ------
0416A5             0041*  ; 113 Escape
0416A5 DD CB 0E 46 0042*      bit 0,(ix+14)
0416A9 C2 89 28 04 0043*  	jp nz,main_end
0416AD             0044*  
0416AD             0045*  ; 99 Space fire zee missiles
0416AD DD CB 0C 56 0046*      bit 2,(ix+12)
0416B1 CA B5 16 04 0047*      jp z,@Space
0416B5             0048*  @Space:
0416B5             0049*  
0416B5             0050*  ; 26 Left
0416B5 DD CB 03 4E 0051*      bit 1,(ix+3)
0416B9 CA BE 16 04 0052*      jp z,@Left
0416BD             0053*  
0416BD AF          0054*      xor a
0416BE             0055*  @Left:
0416BE             0056*  
0416BE             0057*  ; 122 Right
0416BE DD CB 0F 4E 0058*      bit 1,(ix+15)
0416C2 CA C6 16 04 0059*      jp z,@Right
0416C6             0060*  
0416C6             0061*  @Right:
0416C6             0062*  
0416C6             0063*  ; check keypress flag and branch accordingly
0416C6 A7          0064*      and a
0416C7             0065*  
0416C7 C9          0066*      ret
0416C8             0044       include "images.inc"
0416C8             0001*  image_type: equ 0
0416C8             0002*  image_width: equ image_type+3
0416C8             0003*  image_height: equ image_width+3
0416C8             0004*  image_filesize: equ image_height+3
0416C8             0005*  image_filename: equ image_filesize+3
0416C8             0006*  image_bufferId: equ image_filename+3
0416C8             0007*  image_record_size: equ image_bufferId+3
0416C8             0008*  
0416C8 00 00 00    0009*  cur_image_list: dl 0
0416CB 00 00 00    0010*  cur_file_idx: dl 0
0416CE 00 00 00    0011*  cur_filename: dl 0
0416D1 00 00 00    0012*  cur_buffer_id: dl 0
0416D4             0013*  
0416D4             0014*  load_ui_images:
0416D4             0015*  ; initialize image loading variables
0416D4 21 00 00 00 0016*  	ld hl,0
0416D8 22 CB 16 04 0017*  	ld (cur_file_idx),hl
0416DC 21 2D 27 04 0018*  	ld hl,ui_image_list
0416E0 22 C8 16 04 0019*  	ld (cur_image_list),hl
0416E4             0020*  ; load images
0416E4 06 02       0021*  	ld b,ui_num_images
0416E6             0022*  @loop:
0416E6 C5          0023*  	push bc
0416E7 CD EF 16 04 0024*  	call load_next_image
0416EB C1          0025*  	pop bc
0416EC 10 F8       0026*  	djnz @loop
0416EE C9          0027*  	ret
0416EF             0028*  
0416EF             0029*  load_next_image:
0416EF ED 53 CB 16 0030*      ld (cur_file_idx),de
       04          
0416F4 16 12       0031*      ld d,image_record_size
0416F6 ED 5C       0032*      mlt de
0416F8 FD 2A C8 16 0033*      ld iy,(cur_image_list)
       04          
0416FD FD 19       0034*      add iy,de
0416FF FD 7E 00    0035*      ld a,(iy+image_type) ; get image type
041702 FD 07 03    0036*      ld bc,(iy+image_width) ; get image width
041705 FD 17 06    0037*      ld de,(iy+image_height) ; get image height
041708 FD 31 09    0038*      ld ix,(iy+image_filesize) ; get image file size
04170B FD 27 0F    0039*  	ld hl,(iy+image_bufferId) ; get image bufferId
04170E FD 37 0C    0040*      ld iy,(iy+image_filename) ; get image filename
041711 CD 90 08 04 0041*      call vdu_load_img
041715 FD 21 CB 16 0042*      ld iy,cur_file_idx
       04          
04171A FD 34 00    0043*  	inc (iy)
04171D C9          0044*  	ret
04171E             0045*  img_load_init:
04171E             0046*  ; initialize logo's position parameters
04171E 21 00 00 00 0047*  	ld hl,0
041722 22 30 18 04 0048*  	ld (logo_yvel),hl
041726             0049*  
041726 21 2D 00 00 0050*      ld hl,45
04172A 22 33 18 04 0051*  	ld (logo_y_cur),hl
04172E 22 36 18 04 0052*  	ld (logo_y_min),hl
041732 22 39 18 04 0053*      ld (logo_y_max),hl
041736             0054*  
041736 21 01 00 00 0055*  	ld hl,1
04173A 22 24 18 04 0056*  	ld (logo_xvel),hl
04173E             0057*  
04173E 21 0A 00 00 0058*  	ld hl,10
041742 22 27 18 04 0059*  	ld (logo_x_cur),hl
041746 22 2A 18 04 0060*  	ld (logo_x_min),hl
04174A             0061*  
04174A 21 C8 00 00 0062*  	ld hl,320-120
04174E 22 2D 18 04 0063*  	ld (logo_x_max),hl
041752             0064*  
041752 C9          0065*      ret
041753             0066*  
041753             0067*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
041753             0068*  img_load_main:
041753 21 00 00 00 0069*      ld hl,0
041757 22 CB 16 04 0070*      ld (cur_file_idx),hl
04175B             0071*  img_load_main_loop:
04175B             0072*  ; back up loop counter
04175B C5          0073*      push bc
04175C             0074*  ; load the next image
04175C CD EF 16 04 0075*      call load_next_image
041760             0076*  ; draw all the things
041760 CD 3C 18 04 0077*      call draw_all_the_things
041764             0078*  ; draw the most recently loaded image
041764 2A D1 16 04 0079*  	ld hl,(cur_buffer_id)
041768 CD 56 07 04 0080*  	call vdu_buff_select
04176C 01 00 00 00 0081*  	ld bc,0
041770 11 00 00 00 0082*  	ld de,0
041774 CD 8C 07 04 0083*  	call vdu_plot_bmp
041778             0084*  ; move logo
041778 CD C4 17 04 0085*  	call move_logo
04177C             0086*  ; print welcome message
04177C DD 21 B8 0B 0087*  	ld ix,font_rc
       04          
041781 21 79 27 04 0088*  	ld hl,hello_world
041785 01 20 00 00 0089*  	ld bc,32
041789 11 02 00 00 0090*  	ld de,2
04178D CD B8 04 04 0091*  	call font_bmp_print
041791             0092*  ; print current filename
041791 CD 9B 06 04 0093*  	call vdu_cls
041795 2A CE 16 04 0094*  	ld hl,(cur_filename)
041799 CD 80 00 04 0095*  	call printString
04179D CD 95 00 04 0096*  	call printNewLine
0417A1             0097*  
0417A1             0098*  ; print current load stopwatch
0417A1 21 9F 27 04 0099*  	ld hl,loading_time
0417A5 CD 80 00 04 0100*  	call printString
0417A9 CD 2E 06 04 0101*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
0417AD CD D0 00 04 0102*  	call printDec
0417B1             0103*  
0417B1             0104*  ; flip screen
0417B1 CD A0 06 04 0105*      call vdu_flip
0417B5             0106*  ; decrement loop counter
0417B5 C1          0107*      pop bc
0417B6 0B          0108*  	dec bc
0417B7 79          0109*      ld a,c
0417B8 B7          0110*      or a
0417B9 C2 5B 17 04 0111*      jp nz,img_load_main_loop
0417BD 78          0112*      ld a,b
0417BE B7          0113*      or a
0417BF C2 5B 17 04 0114*      jp nz,img_load_main_loop
0417C3 C9          0115*      ret
0417C4             0116*  
0417C4             0117*  move_logo:
0417C4             0118*  ; activate logo bitmap
0417C4 21 01 00 00 0119*  	ld hl, BUF_SPLASH_LOGO
0417C8 CD 56 07 04 0120*  	call vdu_buff_select
0417CC             0121*  ; update position based on velocity parameters
0417CC 2A 27 18 04 0122*  	ld hl, (logo_x_cur)
0417D0 ED 5B 24 18 0123*  	ld de, (logo_xvel)
       04          
0417D5 19          0124*  	add hl, de
0417D6 22 27 18 04 0125*  	ld (logo_x_cur), hl
0417DA EB          0126*  	ex de,hl ; store x_cur in de
0417DB             0127*  ; check if we're < x_min
0417DB 2A 2A 18 04 0128*  	ld hl,(logo_x_min)
0417DF AF          0129*  	xor a ; clear carry
0417E0 ED 52       0130*  	sbc hl,de ; x_min - x_cur
0417E2 F2 00 18 04 0131*  	jp p, move_logo_x_min
0417E6             0132*  ; check if we're > x_max
0417E6 2A 2D 18 04 0133*  	ld hl,(logo_x_max)
0417EA AF          0134*  	xor a ; clear carry
0417EB ED 52       0135*  	sbc hl,de ; x_max - x_cur
0417ED FA 12 18 04 0136*  	jp m, move_logo_x_max
0417F1             0137*  ; if not at either boundary, fall through to draw logo's
0417F1             0138*  draw_logo:
0417F1 ED 4B 27 18 0139*  	ld bc,(logo_x_cur)
       04          
0417F6 ED 5B 33 18 0140*  	ld de,(logo_y_cur)
       04          
0417FB CD 8C 07 04 0141*  	call vdu_plot_bmp
0417FF C9          0142*  	ret
041800             0143*  move_logo_x_min:
041800 21 01 00 00 0144*  	ld hl,1
041804 22 24 18 04 0145*  	ld (logo_xvel),hl
041808 2A 2A 18 04 0146*  	ld hl,(logo_x_min)
04180C 22 27 18 04 0147*  	ld (logo_x_cur),hl
041810 18 DF       0148*  	jr draw_logo
041812             0149*  move_logo_x_max:
041812 21 FF FF FF 0150*  	ld hl,-1
041816 22 24 18 04 0151*  	ld (logo_xvel),hl
04181A 2A 2D 18 04 0152*  	ld hl,(logo_x_max)
04181E 22 27 18 04 0153*  	ld (logo_x_cur),hl
041822 18 CD       0154*  	jr draw_logo
041824 00 00 00    0155*  logo_xvel: dl 0
041827 00 00 00    0156*  logo_x_cur: dl 0
04182A 00 00 00    0157*  logo_x_min: dl 0
04182D 00 00 00    0158*  logo_x_max: dl 0
041830             0159*  
041830 00 00 00    0160*  logo_yvel: dl 0
041833 00 00 00    0161*  logo_y_cur: dl 0
041836 00 00 00    0162*  logo_y_min: dl 0
041839 00 00 00    0163*  logo_y_max: dl 0
04183C             0164*  
04183C             0165*  draw_all_the_things:
04183C 21 00 00 00 0166*      ld hl,BUF_SPLASH_BG
041840 CD 56 07 04 0167*      call vdu_buff_select
041844 01 00 00 00 0168*      ld bc,0
041848 11 00 00 00 0169*      ld de,0
04184C CD 8C 07 04 0170*      call vdu_plot_bmp
041850 C9          0171*  	ret
041851             0045       include "images_sprites.inc"
041851             0001*  ; Generated by make_images.py
041851             0002*  
041851             0003*  sprites_num_images: equ 89
041851             0004*  
041851             0005*  ; buffer_ids:
041851             0006*  BUF_0TILE_EMPTY: equ 256
041851             0007*  BUF_1TILE_CROSS: equ 257
041851             0008*  BUF_2TILE_HORIZ: equ 258
041851             0009*  BUF_3TILE_VERT: equ 259
041851             0010*  BUF_4TILE_SQUARE: equ 260
041851             0011*  BUF_5TILE_CIRCLE: equ 261
041851             0012*  BUF_6TILE_PAD: equ 262
041851             0013*  BUF_7TILE_TURRET: equ 263
041851             0014*  BUF_CIRCLE: equ 264
041851             0015*  BUF_CRATER: equ 265
041851             0016*  BUF_EXPLOSION_A: equ 266
041851             0017*  BUF_EXPLOSION_B: equ 267
041851             0018*  BUF_EXPLOSION_C: equ 268
041851             0019*  BUF_EXPLOSION_D: equ 269
041851             0020*  BUF_EXPLOSION_E: equ 270
041851             0021*  BUF_FIREBALL_A: equ 271
041851             0022*  BUF_FIREBALL_B: equ 272
041851             0023*  BUF_LASER_A: equ 273
041851             0024*  BUF_LASER_B: equ 274
041851             0025*  BUF_PAD: equ 275
041851             0026*  BUF_SEEKER_000: equ 276
041851             0027*  BUF_SEEKER_008: equ 277
041851             0028*  BUF_SEEKER_016: equ 278
041851             0029*  BUF_SEEKER_024: equ 279
041851             0030*  BUF_SEEKER_032: equ 280
041851             0031*  BUF_SEEKER_040: equ 281
041851             0032*  BUF_SEEKER_048: equ 282
041851             0033*  BUF_SEEKER_056: equ 283
041851             0034*  BUF_SEEKER_064: equ 284
041851             0035*  BUF_SEEKER_072: equ 285
041851             0036*  BUF_SEEKER_080: equ 286
041851             0037*  BUF_SEEKER_088: equ 287
041851             0038*  BUF_SEEKER_096: equ 288
041851             0039*  BUF_SEEKER_104: equ 289
041851             0040*  BUF_SEEKER_112: equ 290
041851             0041*  BUF_SEEKER_120: equ 291
041851             0042*  BUF_SEEKER_128: equ 292
041851             0043*  BUF_SEEKER_136: equ 293
041851             0044*  BUF_SEEKER_144: equ 294
041851             0045*  BUF_SEEKER_152: equ 295
041851             0046*  BUF_SEEKER_160: equ 296
041851             0047*  BUF_SEEKER_168: equ 297
041851             0048*  BUF_SEEKER_176: equ 298
041851             0049*  BUF_SEEKER_184: equ 299
041851             0050*  BUF_SEEKER_192: equ 300
041851             0051*  BUF_SEEKER_200: equ 301
041851             0052*  BUF_SEEKER_208: equ 302
041851             0053*  BUF_SEEKER_216: equ 303
041851             0054*  BUF_SEEKER_224: equ 304
041851             0055*  BUF_SEEKER_232: equ 305
041851             0056*  BUF_SEEKER_240: equ 306
041851             0057*  BUF_SEEKER_248: equ 307
041851             0058*  BUF_SHIP_0L: equ 308
041851             0059*  BUF_SHIP_1C: equ 309
041851             0060*  BUF_SHIP_2R: equ 310
041851             0061*  BUF_SHIP_SMALL: equ 311
041851             0062*  BUF_STAR: equ 312
041851             0063*  BUF_TURRET_000: equ 313
041851             0064*  BUF_TURRET_008: equ 314
041851             0065*  BUF_TURRET_016: equ 315
041851             0066*  BUF_TURRET_024: equ 316
041851             0067*  BUF_TURRET_032: equ 317
041851             0068*  BUF_TURRET_040: equ 318
041851             0069*  BUF_TURRET_048: equ 319
041851             0070*  BUF_TURRET_056: equ 320
041851             0071*  BUF_TURRET_064: equ 321
041851             0072*  BUF_TURRET_072: equ 322
041851             0073*  BUF_TURRET_080: equ 323
041851             0074*  BUF_TURRET_088: equ 324
041851             0075*  BUF_TURRET_096: equ 325
041851             0076*  BUF_TURRET_104: equ 326
041851             0077*  BUF_TURRET_112: equ 327
041851             0078*  BUF_TURRET_120: equ 328
041851             0079*  BUF_TURRET_128: equ 329
041851             0080*  BUF_TURRET_136: equ 330
041851             0081*  BUF_TURRET_144: equ 331
041851             0082*  BUF_TURRET_152: equ 332
041851             0083*  BUF_TURRET_160: equ 333
041851             0084*  BUF_TURRET_168: equ 334
041851             0085*  BUF_TURRET_176: equ 335
041851             0086*  BUF_TURRET_184: equ 336
041851             0087*  BUF_TURRET_192: equ 337
041851             0088*  BUF_TURRET_200: equ 338
041851             0089*  BUF_TURRET_208: equ 339
041851             0090*  BUF_TURRET_216: equ 340
041851             0091*  BUF_TURRET_224: equ 341
041851             0092*  BUF_TURRET_232: equ 342
041851             0093*  BUF_TURRET_240: equ 343
041851             0094*  BUF_TURRET_248: equ 344
041851             0095*  
041851             0096*  sprites_image_list: ; type; width; height; filename; bufferId:
041851 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_0tile_empty, 256
       00 00 10 00 
       00 00 01 00 
       93 1E 04 00 
       01 00       
041863 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_1tile_cross, 257
       00 00 10 00 
       00 00 01 00 
       AD 1E 04 01 
       01 00       
041875 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_2tile_horiz, 258
       00 00 10 00 
       00 00 01 00 
       C7 1E 04 02 
       01 00       
041887 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_3tile_vert, 259
       00 00 10 00 
       00 00 01 00 
       E1 1E 04 03 
       01 00       
041899 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_4tile_square, 260
       00 00 10 00 
       00 00 01 00 
       FA 1E 04 04 
       01 00       
0418AB 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_5tile_circle, 261
       00 00 10 00 
       00 00 01 00 
       15 1F 04 05 
       01 00       
0418BD 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_6tile_pad, 262
       00 00 10 00 
       00 00 01 00 
       30 1F 04 06 
       01 00       
0418CF 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_7tile_turret, 263
       00 00 10 00 
       00 00 01 00 
       48 1F 04 07 
       01 00       
0418E1 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_circle, 264
       00 00 10 00 
       00 00 01 00 
       63 1F 04 08 
       01 00       
0418F3 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_crater, 265
       00 00 10 00 
       00 00 01 00 
       78 1F 04 09 
       01 00       
041905 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_explosion_a, 266
       00 00 10 00 
       00 00 01 00 
       8D 1F 04 0A 
       01 00       
041917 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_explosion_b, 267
       00 00 10 00 
       00 00 01 00 
       A7 1F 04 0B 
       01 00       
041929 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_explosion_c, 268
       00 00 10 00 
       00 00 01 00 
       C1 1F 04 0C 
       01 00       
04193B 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_explosion_d, 269
       00 00 10 00 
       00 00 01 00 
       DB 1F 04 0D 
       01 00       
04194D 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_explosion_e, 270
       00 00 10 00 
       00 00 01 00 
       F5 1F 04 0E 
       01 00       
04195F 01 00 00 07 0112*  	dl 1, 7, 7, 49, fn_fireball_a, 271
       00 00 07 00 
       00 31 00 00 
       0F 20 04 0F 
       01 00       
041971 01 00 00 07 0113*  	dl 1, 7, 7, 49, fn_fireball_b, 272
       00 00 07 00 
       00 31 00 00 
       28 20 04 10 
       01 00       
041983 01 00 00 05 0114*  	dl 1, 5, 13, 65, fn_laser_a, 273
       00 00 0D 00 
       00 41 00 00 
       41 20 04 11 
       01 00       
041995 01 00 00 05 0115*  	dl 1, 5, 13, 65, fn_laser_b, 274
       00 00 0D 00 
       00 41 00 00 
       57 20 04 12 
       01 00       
0419A7 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_pad, 275
       00 00 10 00 
       00 00 01 00 
       6D 20 04 13 
       01 00       
0419B9 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_000, 276
       00 00 10 00 
       00 00 01 00 
       7F 20 04 14 
       01 00       
0419CB 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_008, 277
       00 00 10 00 
       00 00 01 00 
       98 20 04 15 
       01 00       
0419DD 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_016, 278
       00 00 10 00 
       00 00 01 00 
       B1 20 04 16 
       01 00       
0419EF 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_024, 279
       00 00 10 00 
       00 00 01 00 
       CA 20 04 17 
       01 00       
041A01 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_032, 280
       00 00 10 00 
       00 00 01 00 
       E3 20 04 18 
       01 00       
041A13 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_040, 281
       00 00 10 00 
       00 00 01 00 
       FC 20 04 19 
       01 00       
041A25 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_048, 282
       00 00 10 00 
       00 00 01 00 
       15 21 04 1A 
       01 00       
041A37 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_056, 283
       00 00 10 00 
       00 00 01 00 
       2E 21 04 1B 
       01 00       
041A49 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_064, 284
       00 00 10 00 
       00 00 01 00 
       47 21 04 1C 
       01 00       
041A5B 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_072, 285
       00 00 10 00 
       00 00 01 00 
       60 21 04 1D 
       01 00       
041A6D 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_080, 286
       00 00 10 00 
       00 00 01 00 
       79 21 04 1E 
       01 00       
041A7F 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_088, 287
       00 00 10 00 
       00 00 01 00 
       92 21 04 1F 
       01 00       
041A91 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_096, 288
       00 00 10 00 
       00 00 01 00 
       AB 21 04 20 
       01 00       
041AA3 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_seeker_104, 289
       00 00 10 00 
       00 00 01 00 
       C4 21 04 21 
       01 00       
041AB5 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_seeker_112, 290
       00 00 10 00 
       00 00 01 00 
       DD 21 04 22 
       01 00       
041AC7 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_seeker_120, 291
       00 00 10 00 
       00 00 01 00 
       F6 21 04 23 
       01 00       
041AD9 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_seeker_128, 292
       00 00 10 00 
       00 00 01 00 
       0F 22 04 24 
       01 00       
041AEB 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_seeker_136, 293
       00 00 10 00 
       00 00 01 00 
       28 22 04 25 
       01 00       
041AFD 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_seeker_144, 294
       00 00 10 00 
       00 00 01 00 
       41 22 04 26 
       01 00       
041B0F 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_seeker_152, 295
       00 00 10 00 
       00 00 01 00 
       5A 22 04 27 
       01 00       
041B21 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_seeker_160, 296
       00 00 10 00 
       00 00 01 00 
       73 22 04 28 
       01 00       
041B33 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_seeker_168, 297
       00 00 10 00 
       00 00 01 00 
       8C 22 04 29 
       01 00       
041B45 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_seeker_176, 298
       00 00 10 00 
       00 00 01 00 
       A5 22 04 2A 
       01 00       
041B57 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_seeker_184, 299
       00 00 10 00 
       00 00 01 00 
       BE 22 04 2B 
       01 00       
041B69 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_seeker_192, 300
       00 00 10 00 
       00 00 01 00 
       D7 22 04 2C 
       01 00       
041B7B 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_seeker_200, 301
       00 00 10 00 
       00 00 01 00 
       F0 22 04 2D 
       01 00       
041B8D 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_seeker_208, 302
       00 00 10 00 
       00 00 01 00 
       09 23 04 2E 
       01 00       
041B9F 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_seeker_216, 303
       00 00 10 00 
       00 00 01 00 
       22 23 04 2F 
       01 00       
041BB1 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_seeker_224, 304
       00 00 10 00 
       00 00 01 00 
       3B 23 04 30 
       01 00       
041BC3 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_seeker_232, 305
       00 00 10 00 
       00 00 01 00 
       54 23 04 31 
       01 00       
041BD5 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_seeker_240, 306
       00 00 10 00 
       00 00 01 00 
       6D 23 04 32 
       01 00       
041BE7 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_seeker_248, 307
       00 00 10 00 
       00 00 01 00 
       86 23 04 33 
       01 00       
041BF9 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_ship_0l, 308
       00 00 10 00 
       00 00 01 00 
       9F 23 04 34 
       01 00       
041C0B 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_ship_1c, 309
       00 00 10 00 
       00 00 01 00 
       B5 23 04 35 
       01 00       
041C1D 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_ship_2r, 310
       00 00 10 00 
       00 00 01 00 
       CB 23 04 36 
       01 00       
041C2F 01 00 00 08 0152*  	dl 1, 8, 8, 64, fn_ship_small, 311
       00 00 08 00 
       00 40 00 00 
       E1 23 04 37 
       01 00       
041C41 01 00 00 05 0153*  	dl 1, 5, 5, 25, fn_star, 312
       00 00 05 00 
       00 19 00 00 
       FA 23 04 38 
       01 00       
041C53 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_000, 313
       00 00 10 00 
       00 00 01 00 
       0D 24 04 39 
       01 00       
041C65 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_008, 314
       00 00 10 00 
       00 00 01 00 
       26 24 04 3A 
       01 00       
041C77 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_016, 315
       00 00 10 00 
       00 00 01 00 
       3F 24 04 3B 
       01 00       
041C89 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_024, 316
       00 00 10 00 
       00 00 01 00 
       58 24 04 3C 
       01 00       
041C9B 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_032, 317
       00 00 10 00 
       00 00 01 00 
       71 24 04 3D 
       01 00       
041CAD 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_040, 318
       00 00 10 00 
       00 00 01 00 
       8A 24 04 3E 
       01 00       
041CBF 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_048, 319
       00 00 10 00 
       00 00 01 00 
       A3 24 04 3F 
       01 00       
041CD1 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_056, 320
       00 00 10 00 
       00 00 01 00 
       BC 24 04 40 
       01 00       
041CE3 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_064, 321
       00 00 10 00 
       00 00 01 00 
       D5 24 04 41 
       01 00       
041CF5 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_072, 322
       00 00 10 00 
       00 00 01 00 
       EE 24 04 42 
       01 00       
041D07 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_080, 323
       00 00 10 00 
       00 00 01 00 
       07 25 04 43 
       01 00       
041D19 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_088, 324
       00 00 10 00 
       00 00 01 00 
       20 25 04 44 
       01 00       
041D2B 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_turret_096, 325
       00 00 10 00 
       00 00 01 00 
       39 25 04 45 
       01 00       
041D3D 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_turret_104, 326
       00 00 10 00 
       00 00 01 00 
       52 25 04 46 
       01 00       
041D4F 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_turret_112, 327
       00 00 10 00 
       00 00 01 00 
       6B 25 04 47 
       01 00       
041D61 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_turret_120, 328
       00 00 10 00 
       00 00 01 00 
       84 25 04 48 
       01 00       
041D73 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_turret_128, 329
       00 00 10 00 
       00 00 01 00 
       9D 25 04 49 
       01 00       
041D85 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_turret_136, 330
       00 00 10 00 
       00 00 01 00 
       B6 25 04 4A 
       01 00       
041D97 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_turret_144, 331
       00 00 10 00 
       00 00 01 00 
       CF 25 04 4B 
       01 00       
041DA9 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_turret_152, 332
       00 00 10 00 
       00 00 01 00 
       E8 25 04 4C 
       01 00       
041DBB 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_turret_160, 333
       00 00 10 00 
       00 00 01 00 
       01 26 04 4D 
       01 00       
041DCD 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_turret_168, 334
       00 00 10 00 
       00 00 01 00 
       1A 26 04 4E 
       01 00       
041DDF 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_turret_176, 335
       00 00 10 00 
       00 00 01 00 
       33 26 04 4F 
       01 00       
041DF1 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_turret_184, 336
       00 00 10 00 
       00 00 01 00 
       4C 26 04 50 
       01 00       
041E03 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_turret_192, 337
       00 00 10 00 
       00 00 01 00 
       65 26 04 51 
       01 00       
041E15 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_turret_200, 338
       00 00 10 00 
       00 00 01 00 
       7E 26 04 52 
       01 00       
041E27 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_turret_208, 339
       00 00 10 00 
       00 00 01 00 
       97 26 04 53 
       01 00       
041E39 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_turret_216, 340
       00 00 10 00 
       00 00 01 00 
       B0 26 04 54 
       01 00       
041E4B 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_turret_224, 341
       00 00 10 00 
       00 00 01 00 
       C9 26 04 55 
       01 00       
041E5D 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_turret_232, 342
       00 00 10 00 
       00 00 01 00 
       E2 26 04 56 
       01 00       
041E6F 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_turret_240, 343
       00 00 10 00 
       00 00 01 00 
       FB 26 04 57 
       01 00       
041E81 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_turret_248, 344
       00 00 10 00 
       00 00 01 00 
       14 27 04 58 
       01 00       
041E93             0186*  
041E93             0187*  ; files_list: ; filename:
041E93 73 70 72 69 0188*  fn_0tile_empty: db "sprites/0tile_empty.rgba2",0
       74 65 73 2F 
       30 74 69 6C 
       65 5F 65 6D 
       70 74 79 2E 
       72 67 62 61 
       32 00       
041EAD 73 70 72 69 0189*  fn_1tile_cross: db "sprites/1tile_cross.rgba2",0
       74 65 73 2F 
       31 74 69 6C 
       65 5F 63 72 
       6F 73 73 2E 
       72 67 62 61 
       32 00       
041EC7 73 70 72 69 0190*  fn_2tile_horiz: db "sprites/2tile_horiz.rgba2",0
       74 65 73 2F 
       32 74 69 6C 
       65 5F 68 6F 
       72 69 7A 2E 
       72 67 62 61 
       32 00       
041EE1 73 70 72 69 0191*  fn_3tile_vert: db "sprites/3tile_vert.rgba2",0
       74 65 73 2F 
       33 74 69 6C 
       65 5F 76 65 
       72 74 2E 72 
       67 62 61 32 
       00          
041EFA 73 70 72 69 0192*  fn_4tile_square: db "sprites/4tile_square.rgba2",0
       74 65 73 2F 
       34 74 69 6C 
       65 5F 73 71 
       75 61 72 65 
       2E 72 67 62 
       61 32 00    
041F15 73 70 72 69 0193*  fn_5tile_circle: db "sprites/5tile_circle.rgba2",0
       74 65 73 2F 
       35 74 69 6C 
       65 5F 63 69 
       72 63 6C 65 
       2E 72 67 62 
       61 32 00    
041F30 73 70 72 69 0194*  fn_6tile_pad: db "sprites/6tile_pad.rgba2",0
       74 65 73 2F 
       36 74 69 6C 
       65 5F 70 61 
       64 2E 72 67 
       62 61 32 00 
041F48 73 70 72 69 0195*  fn_7tile_turret: db "sprites/7tile_turret.rgba2",0
       74 65 73 2F 
       37 74 69 6C 
       65 5F 74 75 
       72 72 65 74 
       2E 72 67 62 
       61 32 00    
041F63 73 70 72 69 0196*  fn_circle: db "sprites/circle.rgba2",0
       74 65 73 2F 
       63 69 72 63 
       6C 65 2E 72 
       67 62 61 32 
       00          
041F78 73 70 72 69 0197*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
041F8D 73 70 72 69 0198*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
041FA7 73 70 72 69 0199*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
041FC1 73 70 72 69 0200*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
041FDB 73 70 72 69 0201*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
041FF5 73 70 72 69 0202*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
04200F 73 70 72 69 0203*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
042028 73 70 72 69 0204*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
042041 73 70 72 69 0205*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
042057 73 70 72 69 0206*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04206D 73 70 72 69 0207*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04207F 73 70 72 69 0208*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042098 73 70 72 69 0209*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0420B1 73 70 72 69 0210*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0420CA 73 70 72 69 0211*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0420E3 73 70 72 69 0212*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0420FC 73 70 72 69 0213*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042115 73 70 72 69 0214*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04212E 73 70 72 69 0215*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042147 73 70 72 69 0216*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
042160 73 70 72 69 0217*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
042179 73 70 72 69 0218*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
042192 73 70 72 69 0219*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0421AB 73 70 72 69 0220*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0421C4 73 70 72 69 0221*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0421DD 73 70 72 69 0222*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0421F6 73 70 72 69 0223*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04220F 73 70 72 69 0224*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
042228 73 70 72 69 0225*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
042241 73 70 72 69 0226*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04225A 73 70 72 69 0227*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
042273 73 70 72 69 0228*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04228C 73 70 72 69 0229*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0422A5 73 70 72 69 0230*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0422BE 73 70 72 69 0231*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0422D7 73 70 72 69 0232*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0422F0 73 70 72 69 0233*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
042309 73 70 72 69 0234*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
042322 73 70 72 69 0235*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04233B 73 70 72 69 0236*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
042354 73 70 72 69 0237*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04236D 73 70 72 69 0238*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042386 73 70 72 69 0239*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04239F 73 70 72 69 0240*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0423B5 73 70 72 69 0241*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0423CB 73 70 72 69 0242*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0423E1 73 70 72 69 0243*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0423FA 73 70 72 69 0244*  fn_star: db "sprites/star.rgba2",0
       74 65 73 2F 
       73 74 61 72 
       2E 72 67 62 
       61 32 00    
04240D 73 70 72 69 0245*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042426 73 70 72 69 0246*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04243F 73 70 72 69 0247*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042458 73 70 72 69 0248*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
042471 73 70 72 69 0249*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04248A 73 70 72 69 0250*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0424A3 73 70 72 69 0251*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0424BC 73 70 72 69 0252*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0424D5 73 70 72 69 0253*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0424EE 73 70 72 69 0254*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
042507 73 70 72 69 0255*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
042520 73 70 72 69 0256*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
042539 73 70 72 69 0257*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
042552 73 70 72 69 0258*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04256B 73 70 72 69 0259*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
042584 73 70 72 69 0260*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04259D 73 70 72 69 0261*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0425B6 73 70 72 69 0262*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0425CF 73 70 72 69 0263*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0425E8 73 70 72 69 0264*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
042601 73 70 72 69 0265*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04261A 73 70 72 69 0266*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
042633 73 70 72 69 0267*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04264C 73 70 72 69 0268*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
042665 73 70 72 69 0269*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04267E 73 70 72 69 0270*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
042697 73 70 72 69 0271*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0426B0 73 70 72 69 0272*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0426C9 73 70 72 69 0273*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0426E2 73 70 72 69 0274*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0426FB 73 70 72 69 0275*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
042714 73 70 72 69 0276*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04272D             0046   	include "images_ui.inc"
04272D             0001*  ; Generated by make_images.py
04272D             0002*  
04272D             0003*  ui_num_images: equ 2
04272D             0004*  
04272D             0005*  ; buffer_ids:
04272D             0006*  BUF_SPLASH_BG: equ 0
04272D             0007*  BUF_SPLASH_LOGO: equ 1
04272D             0008*  
04272D             0009*  ui_image_list: ; type; width; height; filename; bufferId:
04272D 01 00 00 40 0010*  	dl 1, 320, 240, 76800, fn_splash_bg, 0
       01 00 F0 00 
       00 00 2C 01 
       51 27 04 00 
       00 00       
04273F 01 00 00 40 0011*  	dl 1, 320, 212, 67840, fn_splash_logo, 1
       01 00 D4 00 
       00 00 09 01 
       64 27 04 01 
       00 00       
042751             0012*  
042751             0013*  ; files_list: ; filename:
042751 75 69 2F 73 0014*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
042764 75 69 2F 73 0015*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
042779             0047   
042779 57 65 6C 63 0048   hello_world: defb "Welcome to Purple Nurples!",0
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
042794 4C 6F 61 64 0049   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04279F 4C 6F 61 64 0050   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0427AD 50 72 65 73 0051   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
0427CA             0052   
0427CA             0053   init:
0427CA             0054   ; clear all buffers
0427CA CD 64 08 04 0055       call vdu_clear_all_buffers
0427CE             0056   
0427CE             0057   ; set up the display
0427CE 3E 08       0058       ld a,8 ; 320x240x64 single-buffered
0427D0 CD 32 07 04 0059       call vdu_set_screen_mode
0427D4 AF          0060       xor a
0427D5 CD 43 07 04 0061       call vdu_set_scaling
0427D9             0062   
0427D9             0063   ; start generic stopwatch to time setup loop
0427D9             0064   ; so we can determine if we're running on emulator or hardware
0427D9 CD 22 06 04 0065   	call stopwatch_set
0427DD             0066   
0427DD             0067   ; initialize global timestamp
0427DD DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
0427E0 22 B7 05 04 0069       ld (timestamp_now),hl
0427E4             0070   
0427E4             0071   ; enable additional audio channels
0427E4 CD 70 0A 04 0072   	call vdu_enable_channels
0427E8             0073   
0427E8             0074   ; set the cursor off
0427E8 CD 74 06 04 0075   	call cursor_off
0427EC             0076   
0427EC             0077   ; set text background color
0427EC 3E 84       0078   	ld a,4 + 128
0427EE CD B3 06 04 0079   	call vdu_colour_text
0427F2             0080   
0427F2             0081   ; set text foreground color
0427F2 3E 2F       0082   	ld a,47 ; aaaaff lavenderish
0427F4 CD B3 06 04 0083   	call vdu_colour_text
0427F8             0084   
0427F8             0085   ; set gfx bg color
0427F8 AF          0086   	xor a ; plotting mode 0
0427F9 0E 04       0087   	ld c,4 ; dark blue
0427FB CD C4 06 04 0088   	call vdu_gcol_bg
0427FF CD AE 06 04 0089   	call vdu_clg
042803             0090   
042803             0091   ; set the cursor off again since we changed screen modes
042803 CD 74 06 04 0092   	call cursor_off
042807             0093   
042807             0094   ; print loading ui message
042807 21 94 27 04 0095   	ld hl,loading_ui
04280B CD 80 00 04 0096   	call printString
04280F             0097   
04280F             0098   ; load UI images
04280F CD D4 16 04 0099   	call load_ui_images
042813             0100   
042813             0101   ; ; VDU 28, left, bottom, right, top: Set text viewport **
042813             0102   ; ; MIND THE LITTLE-ENDIANESS
042813             0103   ; ; inputs: c=left,b=bottom,e=right,d=top
042813             0104   ; 	ld c,0 ; left
042813             0105   ; 	ld d,20 ; top
042813             0106   ; 	ld e,39 ; right
042813             0107   ; 	ld b,29; bottom
042813             0108   ; 	call vdu_set_txt_viewport
042813             0109   
042813             0110   ; ; load fonts ; TODO
042813             0111   ; 	call load_font_rc
042813             0112   
042813             0113   ; ; load images ; TODO
042813             0114   ; 	call img_load_init
042813             0115   
042813             0116   ; ; load sprites
042813             0117   ; 	ld bc,sprites_num_images
042813             0118   ; 	ld hl,sprites_image_list
042813             0119   ; 	ld (cur_image_list),hl
042813             0120   ; 	call img_load_main
042813             0121   
042813             0122   ; ; load sound effects ; TODO
042813             0123   ; 	ld bc,SFX_num_buffers
042813             0124   ; 	ld hl,SFX_buffer_id_lut
042813             0125   ; 	ld (cur_buffer_id_lut),hl
042813             0126   ; 	ld hl,SFX_load_routines_table
042813             0127   ; 	ld (cur_load_jump_table),hl
042813             0128   ; 	call sfx_load_main
042813             0129   
042813             0130   ; DEBUG: plot ui images
042813 21 00 00 00 0131   	ld hl,BUF_SPLASH_BG
042817 CD 56 07 04 0132   	call vdu_buff_select
04281B 01 00 00 00 0133   	ld bc,0
04281F 11 00 00 00 0134   	ld de,0
042823 CD 8C 07 04 0135   	call vdu_plot_bmp
042827             0136   
042827 21 01 00 00 0137   	ld hl,BUF_SPLASH_LOGO
04282B CD 56 07 04 0138   	call vdu_buff_select
04282F 01 00 00 00 0139   	ld bc,0
042833 11 00 00 00 0140   	ld de,0
042837 CD 8C 07 04 0141   	call vdu_plot_bmp
04283B             0142   
04283B             0143   ; print loading complete message and wait for user keypress
04283B 21 AD 27 04 0144   	ld hl,loading_complete
04283F CD 80 00 04 0145   	call printString
042843 CD A0 06 04 0146   	call vdu_flip
042847 CD 0A 04 04 0147   	call waitKeypress
04284B             0148   
04284B             0149   ; initialization done
04284B C9          0150   	ret
04284C             0151   
04284C             0152   main_loop_tmr: ds 6
042852             0153   framerate: equ 30
042852             0154   
042852             0155   new_game:
042852             0156   
042852 C9          0157   	ret
042853             0158   
042853             0159   main:
042853             0160   
042853             0161   
042853             0162   main_loop:
042853             0163   ; update global timestamp
042853 CD C0 05 04 0164       call timestamp_tick
042857             0165   
042857             0166   ; move player
042857             0167   
042857             0168   
042857             0169   ; move enemies
042857             0170   
042857             0171   
042857             0172   ; render frame
042857             0173   
042857             0174   @wait:
042857 CD 83 16 04 0175   	call set_keys
04285B FD 21 4C 28 0176   	ld iy,main_loop_tmr
       04          
042860 CD A3 05 04 0177   	call tmr_get
042864 CA 70 28 04 0178   	jp z,@continue
042868 FA 70 28 04 0179   	jp m,@continue
04286C C3 57 28 04 0180   	jp @wait
042870             0181   @continue:
042870             0182   
042870             0183   ; reset main loop timer
042870 FD 21 4C 28 0184   	ld iy,main_loop_tmr
       04          
042875 21 04 00 00 0185   	ld hl,120/framerate
042879 CD 95 05 04 0186   	call tmr_set
04287D             0187   
04287D             0188   ; check for escape key and quit if pressed
04287D             0189   	MOSCALL mos_getkbmap
04287D 3E 1E       0001M  			LD	A, function
04287F 5B CF       0002M  			RST.LIL	08h
042881             0190   ; 113 Escape
042881 DD CB 0E 46 0191       bit 0,(ix+14)
042885 20 02       0192   	jr nz,main_end
042887             0193   @Escape:
042887 18 CA       0194   	jr main_loop
042889             0195   
042889             0196   main_end:
042889             0197   	; call do_outro
042889             0198   
042889 CD 64 08 04 0199       call vdu_clear_all_buffers
04288D CD 98 0A 04 0200   	call vdu_disable_channels
042891             0201   
042891             0202   ; restore screen to something normalish
042891 AF          0203   	xor a
042892 CD 32 07 04 0204   	call vdu_set_screen_mode
042896 CD 66 06 04 0205   	call cursor_on
04289A C9          0206   	ret

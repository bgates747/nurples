PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   start:
040045 F5          0009       push af
040046 C5          0010       push bc
040047 D5          0011       push de
040048 DD E5       0012       push ix
04004A FD E5       0013       push iy
04004C CD F7 4F 04 0014       call init
040050 CD 07 50 04 0015       call main
040054             0016   exit:
040054 FD E1       0017       pop iy
040056 DD E1       0018       pop ix
040058 D1          0019       pop de
040059 C1          0020       pop bc
04005A F1          0021       pop af
04005B 21 00 00 00 0022       ld hl,0
04005F C9          0023       ret
040060             0024   
040060             0025   ; API INCLUDES
040060             0026       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0027       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9F 05 04 0267*      ld (uhl),hl
04012A ED 43 A2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0269*      ld (ude),de
       04          
040134 DD 22 A8 05 0270*      ld (uix),ix
       04          
040139 FD 22 AB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 36 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9F 05 04 0281*      ld hl, (uhl)
040157 ED 4B A2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0283*      ld de, (ude)
       04          
040161 DD 2A A8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD FB 06 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 94 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9F 05 04 0656*      ld (uhl),hl
040363 ED 43 A2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0658*      ld (ude),de
       04          
04036D DD 22 A8 05 0659*      ld (uix),ix
       04          
040372 FD 22 AB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 9C 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 22 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 9C 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 27 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9F 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 2C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A A2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 31 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 36 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 3B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A AB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9F 05 04 0723*      ld hl, (uhl)
040410 ED 4B A2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0725*      ld de, (ude)
       04          
04041A DD 2A A8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9F 05 04 0739*      ld (uhl),hl
04042A ED 43 A2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0741*      ld (ude),de
       04          
040434 DD 22 A8 05 0742*      ld (uix),ix
       04          
040439 FD 22 AB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 9C 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 22 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 9C 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 27 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9F 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 2C 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A A2 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 31 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A5 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 36 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A8 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 3B 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A AB 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5 CD 8C 00 04 0792*      call printNewLine
0404A9             0793*  ; restore everything
0404A9 2A 9F 05 04 0794*      ld hl, (uhl)
0404AD ED 4B A2 05 0795*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0796*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0797*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0798*      ld iy, (uiy)
       04          
0404C1 F1          0799*      pop af
0404C2             0800*  ; all done
0404C2 C9          0801*      ret
0404C3             0802*  
0404C3             0803*  dumpRegistersHexPrime:
0404C3 D9          0804*      exx
0404C4 08          0805*      ex af,af'
0404C5 CD 26 04 04 0806*      call dumpRegistersHex
0404C9 08          0807*      ex af,af'
0404CA D9          0808*      exx
0404CB C9          0809*      ret
0404CC             0810*  
0404CC             0811*  ; additionally dump prime registers
0404CC             0812*  ; inputs: none
0404CC             0813*  ; outputs: values of every register printed to screen
0404CC             0814*  ; destroys: nothing
0404CC             0815*  dumpRegistersHexAll:
0404CC CD 26 04 04 0816*      call dumpRegistersHex
0404D0 08          0817*      ex af,af'
0404D1 D9          0818*      exx
0404D2 CD 26 04 04 0819*      call dumpRegistersHex
0404D6 08          0820*      ex af,af'
0404D7 D9          0821*      exx
0404D8 C9          0822*      ret
0404D9             0823*  
0404D9             0824*  ; print hlu to screen in hexidecimal format
0404D9             0825*  ; inputs: none
0404D9             0826*  ; destroys: nothing
0404D9             0827*  print_hex_hl:
0404D9 F5          0828*      push af
0404DA E5          0829*      push hl
0404DB 21 27 05 04 0830*      ld hl,str_hlu
0404DF CD 77 00 04 0831*      call printString
0404E3 E1          0832*      pop hl
0404E4 E5          0833*      push hl
0404E5 CD 97 00 04 0834*      call printHex24
0404E9 3E 20       0835*      ld a,' '
0404EB 5B D7       0836*      rst.lil 10h
0404ED E1          0837*      pop hl
0404EE F1          0838*      pop af
0404EF C9          0839*      ret
0404F0             0840*  
0404F0             0841*  ; print bcu to screen in hexidecimal format
0404F0             0842*  ; inputs: none
0404F0             0843*  ; destroys: nothing
0404F0             0844*  print_hex_bc:
0404F0 F5          0845*      push af
0404F1 E5          0846*      push hl
0404F2 C5          0847*      push bc
0404F3 21 2C 05 04 0848*      ld hl,str_bcu
0404F7 CD 77 00 04 0849*      call printString
0404FB E1          0850*      pop hl
0404FC E5          0851*      push hl
0404FD CD 97 00 04 0852*      call printHex24
040501 3E 20       0853*      ld a,' '
040503 5B D7       0854*      rst.lil 10h
040505 C1          0855*      pop bc
040506 E1          0856*      pop hl
040507 F1          0857*      pop af
040508 C9          0858*      ret
040509             0859*  
040509             0860*  ; print deu to screen in hexidecimal format
040509             0861*  ; inputs: none
040509             0862*  ; destroys: nothing
040509             0863*  print_hex_de:
040509 F5          0864*      push af
04050A E5          0865*      push hl
04050B D5          0866*      push de
04050C 21 31 05 04 0867*      ld hl,str_deu
040510 CD 77 00 04 0868*      call printString
040514 E1          0869*      pop hl
040515 E5          0870*      push hl
040516 CD 97 00 04 0871*      call printHex24
04051A 3E 20       0872*      ld a,' '
04051C 5B D7       0873*      rst.lil 10h
04051E D1          0874*      pop de
04051F E1          0875*      pop hl
040520 F1          0876*      pop af
040521 C9          0877*      ret
040522             0878*  
040522 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040540             0885*  
040540             0886*  ; print udeuhl to screen in hexidecimal format
040540             0887*  ; inputs: none
040540             0888*  ; outputs: concatenated hexidecimal udeuhl
040540             0889*  ; destroys: nothing
040540             0890*  dumpUDEUHLHex:
040540             0891*  ; store everything in scratch
040540 22 9F 05 04 0892*      ld (uhl),hl
040544 ED 43 A2 05 0893*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0894*      ld (ude),de
       04          
04054E DD 22 A8 05 0895*      ld (uix),ix
       04          
040553 FD 22 AB 05 0896*      ld (uiy),iy
       04          
040558 F5          0897*      push af
040559             0898*  
040559             0899*  ; print each register
040559             0900*  
040559 21 93 05 04 0901*      ld hl,str_udeuhl
04055D CD 77 00 04 0902*      call printString
040561 2A A5 05 04 0903*      ld hl,(ude)
040565 CD 97 00 04 0904*      call printHex24
040569 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04056B 5B D7       0906*      rst.lil 10h
04056D 2A 9F 05 04 0907*      ld hl,(uhl)
040571 CD 97 00 04 0908*      call printHex24
040575 CD 8C 00 04 0909*      call printNewLine
040579             0910*  
040579             0911*  ; restore everything
040579 2A 9F 05 04 0912*      ld hl, (uhl)
04057D ED 4B A2 05 0913*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0914*      ld de, (ude)
       04          
040587 DD 2A A8 05 0915*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0916*      ld iy, (uiy)
       04          
040591 F1          0917*      pop af
040592             0918*  ; all done
040592 C9          0919*      ret
040593             0920*  
040593 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0922*  
04059C             0923*  ; global scratch memory for registers
04059C 00 00 00    0924*  uaf: dl 0
04059F 00 00 00    0925*  uhl: dl 0
0405A2 00 00 00    0926*  ubc: dl 0
0405A5 00 00 00    0927*  ude: dl 0
0405A8 00 00 00    0928*  uix: dl 0
0405AB 00 00 00    0929*  uiy: dl 0
0405AE 00 00 00    0930*  usp: dl 0
0405B1 00 00 00    0931*  upc: dl 0
0405B4             0932*  
0405B4             0933*  ; inputs: whatever is in the flags register
0405B4             0934*  ; outputs: binary representation of flags
0405B4             0935*  ;          with a header so we know which is what
0405B4             0936*  ; destroys: nothing
0405B4             0937*  ; preserves: everything
0405B4             0938*  dumpFlags:
0405B4             0939*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0940*      push af ; this is so we can send it back unharmed
0405B5 F5          0941*      push af ; this is so we can pop it to hl
0405B6             0942*  ; store everything in scratch
0405B6 22 9F 05 04 0943*      ld (uhl),hl
0405BA ED 43 A2 05 0944*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0945*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0946*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0947*      ld (uiy),iy
       04          
0405CE             0948*  ; next we print the header
0405CE 21 FA 05 04 0949*      ld hl,@header
0405D2 CD 77 00 04 0950*      call printString
0405D6 E1          0951*      pop hl ; flags are now in l
0405D7 7D          0952*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0953*      call printBin8
0405DC CD 8C 00 04 0954*      call printNewLine
0405E0             0955*  ; restore everything
0405E0 2A 9F 05 04 0956*      ld hl, (uhl)
0405E4 ED 4B A2 05 0957*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0958*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0959*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0960*      ld iy, (uiy)
       04          
0405F8 F1          0961*      pop af ; send her home the way she came
0405F9 C9          0962*      ret
0405FA             0963*  ; Bit 7 (S): Sign flag
0405FA             0964*  ; Bit 6 (Z): Zero flag
0405FA             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0966*  ; Bit 4 (H): Half Carry flag
0405FA             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0969*  ; Bit 1 (N): Subtract flag
0405FA             0970*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0972*  
040605             0973*  ; set all the bits in the flag register
040605             0974*  ; more of an academic exercise than anything useful
040605             0975*  ; inputs; none
040605             0976*  ; outputs; a=0,f=255
040605             0977*  ; destroys: flags, hl
040605             0978*  ; preserves: a, because why not
040605             0979*  setAllFlags:
040605 21 FF 00 00 0980*      ld hl,255
040609 67          0981*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0982*      push hl
04060B F1          0983*      pop af
04060C C9          0984*      ret
04060D             0985*  
04060D             0986*  ; reset all the bits in the flag register
04060D             0987*  ; unlike its inverse counterpart, this may actually be useful
04060D             0988*  ; inputs; none
04060D             0989*  ; outputs; a=0,f=0
04060D             0990*  ; destroys: flags, hl
04060D             0991*  ; preserves: a, because why not
04060D             0992*  resetAllFlags:
04060D 21 00 00 00 0993*      ld hl,0
040611 67          0994*      ld h,a ; four cycles to preserve a is cheap
040612 E5          0995*      push hl
040613 F1          0996*      pop af
040614 C9          0997*      ret
040615             0998*  
040615             0999*  ; wait until user presses a key
040615             1000*  ; inputs: none
040615             1001*  ; outputs: ascii code of key pressed in a
040615             1002*  ; destroys: af,ix
040615             1003*  waitKeypress:
040615             1004*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 5B CF       0002*M 			RST.LIL	08h
040619 C9          1005*      ret
04061A             1006*  
04061A             1007*  ; print bytes from an address to the screen in hexidecimal format
04061A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1010*  ; destroys: nothing
04061A             1011*  dumpMemoryHex:
04061A             1012*  ; save registers to the stack
04061A C5          1013*      push bc
04061B E5          1014*      push hl
04061C F5          1015*      push af
04061D             1016*  
04061D             1017*  ; print the address and separator
04061D CD 97 00 04 1018*      call printHex24
040621 3E 3A       1019*      ld a,':'
040623 5B D7       1020*      rst.lil 10h
040625 3E 20       1021*      ld a,' '
040627 5B D7       1022*      rst.lil 10h
040629             1023*  
040629             1024*  ; set b to be our loop counter
040629 F1          1025*      pop af
04062A 47          1026*      ld b,a
04062B E1          1027*      pop hl
04062C E5          1028*      push hl
04062D F5          1029*      push af
04062E             1030*  @loop:
04062E             1031*  ; print the byte
04062E 7E          1032*      ld a,(hl)
04062F CD A5 00 04 1033*      call printHex8
040633             1034*  ; print a space
040633 3E 20       1035*      ld a,' '
040635 5B D7       1036*      rst.lil 10h
040637 23          1037*      inc hl
040638 10 F4       1038*      djnz @loop
04063A CD 8C 00 04 1039*      call printNewLine
04063E             1040*  
04063E             1041*  ; restore everything
04063E F1          1042*      pop af
04063F E1          1043*      pop hl
040640 C1          1044*      pop bc
040641             1045*  
040641             1046*  ; all done
040641 C9          1047*      ret
040642             1048*  
040642             1049*  
040642             1050*  ; print bytes from an address to the screen in binary format
040642             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1052*  ; outputs: values of each byte printed to screen separated by spaces
040642             1053*  ; destroys: nothing
040642             1054*  dumpMemoryBin:
040642             1055*  ; save all registers to the stack
040642 F5          1056*      push af
040643 C5          1057*      push bc
040644 D5          1058*      push de
040645 E5          1059*      push hl
040646 DD E5       1060*      push ix
040648 FD E5       1061*      push iy
04064A             1062*  
04064A             1063*  ; set b to be our loop counter
04064A 47          1064*      ld b,a
04064B             1065*  @loop:
04064B             1066*  ; print the byte
04064B 7E          1067*      ld a,(hl)
04064C E5          1068*      push hl
04064D C5          1069*      push bc
04064E CD 15 03 04 1070*      call printBin8
040652 C1          1071*      pop bc
040653             1072*  ; print a space
040653 3E 20       1073*      ld a,' '
040655 5B D7       1074*      rst.lil 10h
040657 E1          1075*      pop hl
040658 23          1076*      inc hl
040659 10 F0       1077*      djnz @loop
04065B CD 8C 00 04 1078*      call printNewLine
04065F             1079*  
04065F             1080*  ; restore everything
04065F FD E1       1081*      pop iy
040661 DD E1       1082*      pop ix
040663 E1          1083*      pop hl
040664 D1          1084*      pop de
040665 C1          1085*      pop bc
040666 F1          1086*      pop af
040667             1087*  ; all done
040667 C9          1088*      ret
040668             1089*  
040668             1090*  ; print bytes from an address to the screen in binary format
040668             1091*  ; with the bits of each byte in reverse order (lsb first)
040668             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1093*  ; outputs: values of each byte printed to screen separated by spaces
040668             1094*  ; destroys: nothing
040668             1095*  dumpMemoryBinRev:
040668             1096*  ; save all registers to the stack
040668 F5          1097*      push af
040669 C5          1098*      push bc
04066A D5          1099*      push de
04066B E5          1100*      push hl
04066C DD E5       1101*      push ix
04066E FD E5       1102*      push iy
040670             1103*  
040670             1104*  ; set b to be our loop counter
040670 47          1105*      ld b,a
040671             1106*  @loop:
040671             1107*  ; print the byte
040671 7E          1108*      ld a,(hl)
040672 E5          1109*      push hl
040673 C5          1110*      push bc
040674 CD 3A 03 04 1111*      call printBin8Rev
040678 C1          1112*      pop bc
040679             1113*  ; print a space
040679 3E 20       1114*      ld a,' '
04067B 5B D7       1115*      rst.lil 10h
04067D E1          1116*      pop hl
04067E 23          1117*      inc hl
04067F 10 F0       1118*      djnz @loop
040681 CD 8C 00 04 1119*      call printNewLine
040685             1120*  
040685             1121*  ; restore everything
040685 FD E1       1122*      pop iy
040687 DD E1       1123*      pop ix
040689 E1          1124*      pop hl
04068A D1          1125*      pop de
04068B C1          1126*      pop bc
04068C F1          1127*      pop af
04068D             1128*  ; all done
04068D C9          1129*      ret
04068E             0028       include "maths.inc"
04068E             0001*  ; test the sign of HL
04068E             0002*  ; inputs: HL obviously
04068E             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04068E             0004*  ; destroys: flags
04068E             0005*      MACRO sign_hlu
04068E             0006*      add hl,de
04068E             0007*      or a
04068E             0008*      sbc hl,de
04068E             0009*      ENDMACRO
04068E             0010*  
04068E             0011*  
04068E             0012*  ;------------------------------------------------------------------------
04068E             0013*  ; Scratch area for calculations
04068E             0014*  ;------------------------------------------------------------------------
04068E 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
040691 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040694             0017*  
040694             0018*  ; absolute value of hlu
040694             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040694             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040694             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040694             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040694             0023*  ; destroys: a
040694             0024*  hlu_abs:
040694 19          0025*      add hl,de
040695 B7          0026*      or a
040696 ED 52       0027*      sbc hl,de
040698 FA 9D 06 04 0028*      jp m,@is_neg
04069C C9          0029*      ret ; hlu is positive or zero so we're done
04069D             0030*  @is_neg:
04069D F5          0031*      push af ; otherwise, save current flags for return
04069E CD A4 06 04 0032*      call neg_hlu ; negate hlu
0406A2 F1          0033*      pop af ; get back flags
0406A3 C9          0034*      ret
0406A4             0035*  
0406A4             0036*  ; flip the sign of hlu
0406A4             0037*  ; inputs: hlu
0406A4             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406A4             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406A4             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406A4             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406A4             0042*  ; destroys a
0406A4             0043*  neg_hlu:
0406A4 D5          0044*      push de ; save de
0406A5 EB          0045*      ex de,hl ; put hl into de
0406A6 21 00 00 00 0046*      ld hl,0 ; clear hl
0406AA AF          0047*      xor a ; clear carry
0406AB ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406AD D1          0049*      pop de ; get de back
0406AE C9          0050*      ret ; easy peasy
0406AF             0051*  
0406AF             0052*  ;------------------------------------------------------------------------
0406AF             0053*  ; divide hlu by 2, inspired by above
0406AF             0054*  ;------------------------------------------------------------------------
0406AF             0055*  hlu_div2:
0406AF 22 8E 06 04 0056*      ld (scratch1),hl
0406B3 21 90 06 04 0057*      ld hl,scratch1+2
0406B7 CB 1E       0058*      rr (hl)
0406B9 2B          0059*      dec hl
0406BA CB 1E       0060*      rr (hl)
0406BC 2B          0061*      dec hl
0406BD CB 1E       0062*      rr (hl)
0406BF 23          0063*      inc hl
0406C0 23          0064*      inc hl
0406C1 2A 8E 06 04 0065*      ld hl,(scratch1)
0406C5 C9          0066*      ret
0406C6             0067*  
0406C6             0068*  ; this is my little hack to divide by 16
0406C6             0069*  hlu_div16:
0406C6 AF          0070*      xor a
0406C7 29          0071*      add hl,hl
0406C8 17          0072*      rla
0406C9 29          0073*      add hl,hl
0406CA 17          0074*      rla
0406CB 29          0075*      add hl,hl
0406CC 17          0076*      rla
0406CD 29          0077*      add hl,hl
0406CE 17          0078*      rla
0406CF 22 DC 06 04 0079*      ld (@scratch),hl
0406D3 32 DF 06 04 0080*      ld (@scratch+3),a
0406D7 2A DD 06 04 0081*      ld hl,(@scratch+1)
0406DB C9          0082*      ret
0406DC             0083*  @scratch: ds 4
0406E0             0084*  
0406E0             0085*  ; hlu signed division by 256
0406E0             0086*  ; returns: hlu / 256
0406E0             0087*  ; destroys: af
0406E0             0088*  hlu_sdiv256:
0406E0 AF          0089*      xor a ; assume hl is positive
0406E1 22 F7 06 04 0090*      ld (@buffer),hl
0406E5             0091*      sign_hlu
0406E5 19          0001*M     add hl,de
0406E6 B7          0002*M     or a
0406E7 ED 52       0003*M     sbc hl,de
0406E9 F2 EE 06 04 0092*      jp p,@hl_pos
0406ED 3D          0093*      dec a
0406EE             0094*  @hl_pos:
0406EE 32 FA 06 04 0095*      ld (@buffer+3),a
0406F2 2A F8 06 04 0096*      ld hl,(@buffer+1)
0406F6 C9          0097*      ret
0406F7             0098*  @buffer: ds 4
0406FB             0099*  
0406FB             0100*  ; hlu 1 byte right shift, unsigned
0406FB             0101*  ; returns: hlu / 256, fractional portion in a
0406FB             0102*  ; destroys: af
0406FB             0103*  hlu_udiv256:
0406FB AF          0104*      xor a
0406FC 32 0D 07 04 0105*      ld (@buffer+3),a
040700 7D          0106*      ld a,l ; save the fractional portion
040701 22 0A 07 04 0107*      ld (@buffer),hl
040705 2A 0B 07 04 0108*      ld hl,(@buffer+1)
040709 C9          0109*      ret
04070A             0110*  @buffer: ds 4
04070E             0111*  
04070E             0112*      MACRO hlu_mul256
04070E             0113*      add hl,hl ; * 2
04070E             0114*      add hl,hl ; * 4
04070E             0115*      add hl,hl ; * 8
04070E             0116*      add hl,hl ; * 16
04070E             0117*      add hl,hl ; * 32
04070E             0118*      add hl,hl ; * 64
04070E             0119*      add hl,hl ; * 128
04070E             0120*      add hl,hl ; * 256
04070E             0121*      ENDMACRO
04070E             0122*  
04070E             0123*  ; compute the modulo of hlu by deu
04070E             0124*  ; outputs: hlu = hlu % deu
04070E             0125*  ; destroys: f, hl
04070E             0126*  hlu_mod:
04070E B7          0127*      or a ; clear carry
04070F             0128*  @loop:
04070F ED 52       0129*      sbc hl,de
040711 DA 19 07 04 0130*      jp c, @end
040715 C3 0F 07 04 0131*      jp @loop
040719             0132*  @end:
040719 19          0133*      add hl,de
04071A C9          0134*      ret
04071B             0135*  
04071B             0136*  
04071B 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04071F 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
040723             0139*  
040723             0140*  ; set bcd values in a scratch memory address from registers bcde
040723             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
040723             0142*  ; destroys ; hl
040723             0143*  set_bcd:
040723 73          0144*      ld (hl),e
040724 23          0145*      inc hl
040725 72          0146*      ld (hl),d
040726 23          0147*      inc hl
040727 71          0148*      ld (hl),c
040728 23          0149*      inc hl
040729 70          0150*      ld (hl),b
04072A C9          0151*      ret
04072B             0152*  
04072B             0153*  ; load bcd values from a scratch memory address to bcde
04072B             0154*  ; input: hl; scratch address
04072B             0155*  ; output: bcde; 8-place bcd number
04072B             0156*  ; destroys: hl
04072B             0157*  get_bcd:
04072B 5E          0158*      ld e,(hl)
04072C 23          0159*      inc hl
04072D 56          0160*      ld d,(hl)
04072E 23          0161*      inc hl
04072F 4E          0162*      ld c,(hl)
040730 23          0163*      inc hl
040731 46          0164*      ld b,(hl)
040732 C9          0165*      ret
040733             0166*  
040733             0167*  ; BCD addition
040733             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040733             0169*  ;       a is the number of bytes holding each number (number of places/2)
040733             0170*  ; outputs: (hl) + (de) --> (hl)
040733             0171*  ; destroys: a,b,de,hl
040733             0172*  add_bcd:
040733 47          0173*      ld b,a ; loop counter
040734 AF          0174*      xor a ; reset a, clear carry flag
040735             0175*  adcec:
040735 1A          0176*      ld a,(de) ; addend to acc
040736 8E          0177*      adc a,(hl) ; add (hl) to acc
040737 27          0178*      daa ; adjust result to bcd
040738 77          0179*      ld (hl),a ; store result
040739 23          0180*      inc hl ; advance memory pointers
04073A 13          0181*      inc de
04073B 10 F8       0182*      djnz adcec ; loop until b == 0
04073D C9          0183*      ret
04073E             0184*  
04073E             0185*  ; BCD subtraction
04073E             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04073E             0187*  ;       a is the number of bytes holding each number (number of places/2)
04073E             0188*  ; outputs: (hl) - (de) --> (hl)
04073E             0189*  ; destroys: a,b,de,hl
04073E             0190*  sub_bcd:
04073E 47          0191*      ld b,a ; loop counter
04073F AF          0192*      xor a ; reset a,clear carry flag
040740             0193*  subdec:
040740 1A          0194*      ld a,(de) ; subtrahend to acc
040741 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040742 27          0196*      daa ; adjust result to bcd
040743 77          0197*      ld (hl),a ; store result
040744 23          0198*      inc hl ; advance memory pointers
040745 13          0199*      inc de
040746 10 F8       0200*      djnz subdec ; loop until b == 0
040748 C9          0201*      ret
040749             0202*  
040749             0203*  ; http://www.z80.info/pseudo-random.txt
040749             0204*  rand_8:
040749 C5          0205*      push bc
04074A 3A 5D 07 04 0206*      ld a,(r_seed)
04074E 4F          0207*      ld c,a
04074F             0208*  
04074F 0F          0209*      rrca ; multiply by 32
040750 0F          0210*      rrca
040751 0F          0211*      rrca
040752 EE 1F       0212*      xor 0x1f
040754             0213*  
040754 81          0214*      add a,c
040755 DE FF       0215*      sbc a,255 ; carry
040757             0216*  
040757 32 5D 07 04 0217*      ld (r_seed),a
04075B C1          0218*      pop bc
04075C C9          0219*      ret
04075D 50          0220*  r_seed: defb $50
04075E             0221*  
04075E             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04075E             0223*  prng24:
04075E             0224*  ;;Expects ADL mode.
04075E             0225*  ;;Output: HL
04075E             0226*  ;;50cc
04075E             0227*  ;;33 bytes
04075E             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04075E ED 5B 7F 07 0229*      ld de,(seed1)
       04          
040763 B7          0230*      or a
040764 ED 62       0231*      sbc hl,hl
040766 19          0232*      add hl,de
040767 29          0233*      add hl,hl
040768 29          0234*      add hl,hl
040769 2C          0235*      inc l
04076A 19          0236*      add hl,de
04076B 22 7F 07 04 0237*      ld (seed1),hl
04076F 2A 82 07 04 0238*      ld hl,(seed2)
040773 29          0239*      add hl,hl
040774 9F          0240*      sbc a,a
040775 E6 1B       0241*      and %00011011
040777 AD          0242*      xor l
040778 6F          0243*      ld l,a
040779 22 82 07 04 0244*      ld (seed2),hl
04077D 19          0245*      add hl,de
04077E C9          0246*      ret
04077F 00 00 00    0247*  seed1: dl 0
040782 00 00 00    0248*  seed2: dl 0
040785             0029       include "files.inc"
040785             0001*  ; load to onboard 8k sram
040785             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040785             0030       include "vdu.inc"
040785             0001*  
040785             0002*  ; VDU 30: Home cursor
040785             0003*  vdu_home_cursor:
040785 3E 1E       0004*      ld a,30
040787 5B D7       0005*  	rst.lil $10
040789 C9          0006*  	ret
04078A             0007*  
04078A             0008*  vdu_cursor_on:
04078A 21 95 07 04 0009*  	ld hl,@cmd
04078E 01 03 00 00 0010*  	ld bc,@end-@cmd
040792 5B DF       0011*  	rst.lil $18
040794 C9          0012*  	ret
040795             0013*  @cmd:
040795 17 01 01    0014*  	db 23,1,1
040798             0015*  @end:
040798             0016*  
040798             0017*  vdu_cursor_off:
040798 21 A3 07 04 0018*  	ld hl,@cmd
04079C 01 03 00 00 0019*  	ld bc,@end-@cmd
0407A0 5B DF       0020*  	rst.lil $18
0407A2 C9          0021*  	ret
0407A3             0022*  @cmd:
0407A3 17 01 00    0023*  	db 23,1,0
0407A6             0024*  @end:
0407A6             0025*  
0407A6             0026*  ; VDU 5: Write text at graphics cursor
0407A6             0027*  ; inputs: a is the character to write to the screen
0407A6             0028*  ; prerequisites: the graphics cursor at the intended position on screen
0407A6             0029*  ; outputs: see the name of the function
0407A6             0030*  ; destroys: a, hl, bc
0407A6             0031*  vdu_char_to_gfx_cursor:
0407A6 32 B6 07 04 0032*  	ld (@arg),a
0407AA 21 B5 07 04 0033*  	ld hl,@cmd
0407AE 01 02 00 00 0034*  	ld bc,@end-@cmd
0407B2 5B DF       0035*  	rst.lil $18
0407B4 C9          0036*  	ret
0407B5 05          0037*  @cmd: db 5
0407B6 00          0038*  @arg: db 0
0407B7             0039*  @end:
0407B7             0040*  ; VDU 9: Move cursor forward one character
0407B7             0041*  vdu_cursor_forward:
0407B7 3E 09       0042*      ld a,9
0407B9 5B D7       0043*  	rst.lil $10
0407BB C9          0044*  	ret
0407BC             0045*  
0407BC             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0407BC             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
0407BC             0048*  vdu_move_cursor:
0407BC ED 43 CD 07 0049*      ld (@x0),bc
       04          
0407C1 21 CC 07 04 0050*  	ld hl,@cmd
0407C5 01 03 00 00 0051*  	ld bc,@end-@cmd
0407C9 5B DF       0052*  	rst.lil $18
0407CB C9          0053*  	ret
0407CC 1F          0054*  @cmd: 	db 31
0407CD 00          0055*  @x0:	db 0
0407CE 00          0056*  @y0: 	db 0
0407CF 00          0057*  @end: 	db 0 ; padding
0407D0             0058*  
0407D0             0059*  ; VDU 12: Clear text area (CLS)
0407D0             0060*  vdu_cls:
0407D0 3E 0C       0061*      ld a,12
0407D2 5B D7       0062*  	rst.lil $10
0407D4 C9          0063*  	ret
0407D5             0064*  
0407D5             0065*  vdu_flip:
0407D5 21 E0 07 04 0066*  	ld hl,@cmd
0407D9 01 03 00 00 0067*  	ld bc,@end-@cmd
0407DD 5B DF       0068*  	rst.lil $18
0407DF C9          0069*  	ret
0407E0 17 00 C3    0070*  @cmd: db 23,0,0xC3
0407E3             0071*  @end:
0407E3             0072*  
0407E3             0073*  ; VDU 16: Clear graphics area (CLG)
0407E3             0074*  vdu_clg:
0407E3 3E 10       0075*      ld a,16
0407E5 5B D7       0076*  	rst.lil $10
0407E7 C9          0077*  	ret
0407E8             0078*  
0407E8             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0407E8             0080*  ; VDU 23, 7: Scrolling
0407E8             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0407E8             0082*  ; inputs: a, extent; l, direction; h; speed
0407E8             0083*  vdu_scroll_down:
0407E8 32 FD 07 04 0084*  	ld (@extent),a
0407EC 22 FE 07 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0407F0 21 FB 07 04 0086*  	ld hl,@cmd
0407F4 01 05 00 00 0087*  	ld bc,@end-@cmd
0407F8 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0407FA C9          0089*  	ret
0407FB 17 07       0090*  @cmd:       db 23,7
0407FD 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0407FE 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0407FF 00          0093*  @speed:     db 0x00 ; pixels
040800 00          0094*  @end:		db 0x00 ; padding
040801             0095*  
040801             0096*  ; COLOUR MODES
040801             0097*  ; Mode	Effect
040801             0098*  ; 0	Set on-screen pixel to target colour value
040801             0099*  ; 1	OR value with the on-screen pixel
040801             0100*  ; 2	AND value with the on-screen pixel
040801             0101*  ; 3	XOR value with the on-screen pixel
040801             0102*  ; 4	Invert the on-screen pixel
040801             0103*  ; 5	No operation
040801             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
040801             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
040801             0106*  
040801             0107*  ; VDU 17, colour: Define text colour (COLOUR)
040801             0108*  vdu_colour_text:
040801 32 11 08 04 0109*  	ld (@arg),a
040805 21 10 08 04 0110*  	ld hl,@cmd
040809 01 02 00 00 0111*  	ld bc,@end-@cmd
04080D 5B DF       0112*  	rst.lil $18
04080F C9          0113*  	ret
040810 11          0114*  @cmd: db 17
040811 00          0115*  @arg: db 0
040812             0116*  @end:
040812             0117*  
040812             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
040812             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
040812             0120*  vdu_gcol:
040812 32 27 08 04 0121*  	ld (@mode),a
040816 79          0122*      ld a,c
040817 32 28 08 04 0123*      ld (@col),a
04081B 21 26 08 04 0124*  	ld hl,@cmd
04081F 01 03 00 00 0125*  	ld bc,@end-@cmd
040823 5B DF       0126*  	rst.lil $18
040825 C9          0127*  	ret
040826 12          0128*  @cmd:  db 18
040827 00          0129*  @mode: db 0
040828 00          0130*  @col:  db 0
040829             0131*  @end:
040829             0132*  
040829             0133*  
040829             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
040829             0135*  ; MIND THE LITTLE-ENDIANESS
040829             0136*  ; inputs: c=left,b=bottom,e=right,d=top
040829             0137*  ; outputs; nothing
040829             0138*  ; destroys: a might make it out alive
040829             0139*  vdu_set_txt_viewport:
040829 ED 43 3F 08 0140*      ld (@lb),bc
       04          
04082E ED 53 41 08 0141*  	ld (@rt),de
       04          
040833 21 3E 08 04 0142*  	ld hl,@cmd
040837 01 05 00 00 0143*  	ld bc,@end-@cmd
04083B 5B DF       0144*  	rst.lil $18
04083D C9          0145*  	ret
04083E 1C          0146*  @cmd:   db 28 ; set text viewport command
04083F 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
040841 00 00       0148*  @rt: 	dw 0x0000 ; set by de
040843 00          0149*  @end:   db 0x00	  ; padding
040844             0150*  
040844             0151*  ; Wait for VBLANK interrupt
040844             0152*  vdu_vblank:
040844 DD E5       0153*      PUSH 	IX
040846             0154*  	MOSCALL	mos_sysvars
040846 3E 08       0001*M 			LD	A, function
040848 5B CF       0002*M 			RST.LIL	08h
04084A DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
04084D             0156*  @wait:
04084D DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
040850 28 FB       0158*      JR	Z, @wait
040852 DD E1       0159*      POP	IX
040854 C9          0160*      RET
040855             0161*  
040855             0162*  ; VDU 29, x; y;: Set graphics origin
040855             0163*  ; This command sets the graphics origin.
040855             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
040855             0165*  ; inputs: bc=x0,de=y0
040855             0166*  ; outputs; nothing
040855             0167*  ; destroys: a might make it out alive
040855             0168*  vdu_set_gfx_origin:
040855 ED 43 6B 08 0169*      ld (@x0),bc
       04          
04085A ED 53 6D 08 0170*      ld (@y0),de
       04          
04085F 21 6A 08 04 0171*      ld hl,@cmd
040863 01 05 00 00 0172*      ld bc,@end-@cmd
040867 5B DF       0173*      rst.lil $18
040869 C9          0174*      ret
04086A 1D          0175*  @cmd:   db 29 ; set graphics origin command
04086B 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
04086D 00 00       0177*  @y0: 	dw 0x0000 ; set by de
04086F 00          0178*  @end:   db 0x00	  ; padding
040870             0179*  
040870             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040870             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
040870             0182*  ; 	because we have turned off logical screen scaling
040870             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040870             0184*  ; outputs; nothing
040870             0185*  ; destroys: a might make it out alive
040870             0186*  vdu_set_gfx_viewport:
040870 ED 43 90 08 0187*      ld (@x0),bc
       04          
040875 FD 22 92 08 0188*      ld (@y1),iy
       04          
04087A DD 22 94 08 0189*  	ld (@x1),ix
       04          
04087F ED 53 96 08 0190*  	ld (@y0),de
       04          
040884 21 8F 08 04 0191*  	ld hl,@cmd
040888 01 09 00 00 0192*  	ld bc,@end-@cmd
04088C 5B DF       0193*  	rst.lil $18
04088E C9          0194*  	ret
04088F 18          0195*  @cmd:   db 24 ; set graphics viewport command
040890 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
040892 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
040894 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
040896 00 00       0199*  @y0: 	dw 0x0000 ; set by de
040898 00          0200*  @end:   db 0x00	  ; padding
040899             0201*  
040899             0202*  ; SCREEN MODES
040899             0203*  ; ===============================
040899             0204*  ; Mode  Horz  Vert  Cols  Refresh
040899             0205*  ; ---   ----  ----  ----  -------
040899             0206*  ; 11    320   240   2     60hz
040899             0207*  ; 139   320   240   2     60hz
040899             0208*  ; 23    512   384   2     60hz
040899             0209*  ; 151   512   384   2     60hz
040899             0210*  ; 6     640   240   2     60hz
040899             0211*  ; 134   640   240   2     60hz
040899             0212*  ; 2     640   480   2     60hz
040899             0213*  ; 130   640   480   2     60hz
040899             0214*  ; 17    800   600   2     60hz
040899             0215*  ; 145   800   600   2     60hz
040899             0216*  ; 18    1024  768   2     60hz
040899             0217*  ; 146   1024  768   2     60hz
040899             0218*  ; ---   ----  ----  ----  -------
040899             0219*  ; 10    320   240   4     60hz
040899             0220*  ; 138   320   240   4     60hz
040899             0221*  ; 22    512   384   4     60hz
040899             0222*  ; 150   512   384   4     60hz
040899             0223*  ; 5     640   240   4     60hz
040899             0224*  ; 133   640   240   4     60hz
040899             0225*  ; 1     640   480   4     60hz
040899             0226*  ; 129   640   480   4     60hz
040899             0227*  ; 16    800   600   4     60hz
040899             0228*  ; 19    1024  768   4     60hz
040899             0229*  ; ---   ----  ----  ----  -------
040899             0230*  ; 9     320   240   16    60hz
040899             0231*  ; 137   320   240   16    60hz
040899             0232*  ; 21    512   384   16    60hz
040899             0233*  ; 149   512   384   16    60hz
040899             0234*  ; 4     640   240   16    60hz
040899             0235*  ; 132   640   240   16    60hz
040899             0236*  ; 0     640   480   16    60hz
040899             0237*  ; 7     n/a   n/a   16    60hz
040899             0238*  ; ---   ----  ----  ----  -------
040899             0239*  ; 8     320   240   64    60hz
040899             0240*  ; 136   320   240   64    60hz
040899             0241*  ; 20    512   384   64    60hz
040899             0242*  ; 3     640   240   64    60hz
040899             0243*  ; ---   ----  ----  ----  -------
040899             0244*  vdu_set_screen_mode:
040899 32 A9 08 04 0245*  	ld (@arg),a
04089D 21 A8 08 04 0246*  	ld hl,@cmd
0408A1 01 02 00 00 0247*  	ld bc,@end-@cmd
0408A5 5B DF       0248*  	rst.lil $18
0408A7 C9          0249*  	ret
0408A8 16          0250*  @cmd: db 22 ; set screen mode
0408A9 00          0251*  @arg: db 0  ; screen mode parameter
0408AA             0252*  @end:
0408AA             0253*  
0408AA             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0408AA             0255*  ; inputs: a is scaling mode, 1=on, 0=off
0408AA             0256*  ; note: default setting on boot is scaling ON
0408AA             0257*  vdu_set_scaling:
0408AA 32 BC 08 04 0258*  	ld (@arg),a
0408AE 21 B9 08 04 0259*  	ld hl,@cmd
0408B2 01 04 00 00 0260*  	ld bc,@end-@cmd
0408B6 5B DF       0261*  	rst.lil $18
0408B8 C9          0262*  	ret
0408B9 17 00 C0    0263*  @cmd: db 23,0,0xC0
0408BC 00          0264*  @arg: db 0  ; scaling on/off
0408BD             0265*  @end:
0408BD             0266*  
0408BD             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0408BD             0268*  ; inputs: hl=bufferId
0408BD             0269*  vdu_buff_select:
0408BD 22 CF 08 04 0270*  	ld (@bufferId),hl
0408C1 21 CC 08 04 0271*  	ld hl,@cmd
0408C5 01 05 00 00 0272*  	ld bc,@end-@cmd
0408C9 5B DF       0273*  	rst.lil $18
0408CB C9          0274*  	ret
0408CC 17 1B 20    0275*  @cmd: db 23,27,0x20
0408CF 00 00       0276*  @bufferId: dw 0x0000
0408D1 00          0277*  @end: db 0x00 ; padding
0408D2             0278*  
0408D2             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0408D2             0280*  ; inputs: a=format; bc=width; de=height
0408D2             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0408D2             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0408D2             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
0408D2             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
0408D2             0285*  ; 2 	Mono/Mask (1-bit per pixel)
0408D2             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
0408D2             0287*  vdu_bmp_create:
0408D2 ED 43 EE 08 0288*      ld (@width),bc
       04          
0408D7 ED 53 F0 08 0289*      ld (@height),de
       04          
0408DC 32 F2 08 04 0290*      ld (@fmt),a
0408E0 21 EB 08 04 0291*  	ld hl,@cmd
0408E4 01 08 00 00 0292*  	ld bc,@end-@cmd
0408E8 5B DF       0293*  	rst.lil $18
0408EA C9          0294*  	ret
0408EB 17 1B 21    0295*  @cmd:       db 23,27,0x21
0408EE 00 00       0296*  @width:     dw 0x0000
0408F0 00 00       0297*  @height:    dw 0x0000
0408F2 00          0298*  @fmt:       db 0x00
0408F3             0299*  @end:
0408F3             0300*  
0408F3             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0408F3             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0408F3             0303*  vdu_load_img_rgba2_to_8:
0408F3             0304*  ; backup the target buffer id and image dimensions
0408F3 E5          0305*      push hl
0408F4 D5          0306*      push de
0408F5 C5          0307*      push bc
0408F6             0308*  ; load the rgba2 image to working buffer 65534
0408F6 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0408FA CD FD 09 04 0310*  	call vdu_load_buffer_from_file
0408FE             0311*  ; restore the image dimensions and target buffer id
0408FE C1          0312*      pop bc
0408FF D1          0313*      pop de
040900 E1          0314*      pop hl
040901             0315*  ; fall through to vdu_rgba2_to_8
040901             0316*  
040901             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
040901             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
040901             0319*  ; the "expand bitmap" command is:
040901             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
040901             0321*  ; and then to reverse the byte order to fix endian-ness:
040901             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
040901             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
040901             0324*  ; VDU 23,27,&20,targetBufferID%;
040901             0325*  ; VDU 23,27,&21,width%;height%;0
040901             0326*  ; -------------------------------------------------------------------
040901             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
040901             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
040901             0329*  vdu_rgba2_to_8:
040901             0330*  ; load the image dimensions and buffer id parameters
040901 ED 43 5D 09 0331*      ld (@width),bc
       04          
040906 ED 53 5F 09 0332*      ld (@height),de
       04          
04090B 22 42 09 04 0333*      ld (@bufferId0),hl
04090F 22 4F 09 04 0334*      ld (@bufferId2),hl
040913 22 58 09 04 0335*      ld (@bufferId1),hl
040917             0336*  ; clean up bytes that got stomped on by the ID loads
040917 3E 48       0337*      ld a,0x48
040919 32 44 09 04 0338*      ld (@bufferId0+2),a
04091D 3E 17       0339*      ld a,23
04091F 32 5A 09 04 0340*      ld (@bufferId1+2),a
040923 3E 18       0341*      ld a,24
040925 32 51 09 04 0342*      ld (@bufferId2+2),a
040929 AF          0343*      xor a
04092A 32 61 09 04 0344*      ld (@height+2),a
04092E             0345*  ; send the vdu command strings
04092E 21 39 09 04 0346*      ld hl,@beg
040932 01 29 00 00 0347*      ld bc,@end-@beg
040936 5B DF       0348*      rst.lil $18
040938 C9          0349*      ret
040939             0350*  @beg:
040939             0351*  ; Command 14: Consolidate blocks in a buffer
040939             0352*  ; VDU 23, 0, &A0, bufferId; 14
040939 17 00 A0    0353*      db 23,0,0xA0
04093C FE FF       0354*      dw 65534 ; workingBufferId
04093E 0E          0355*      db 14 ; consolidate blocks
04093F             0356*  ; the "expand bitmap" command is:
04093F             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04093F 17 00 A0    0358*      db 23,0,0xA0
040942 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
040944 48          0360*      db 0x48 ; given as decimal command 72 in the docs
040945 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
040946 FE FF       0362*      dw 65534 ; sourceBufferId
040948 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
04094C             0364*  ; reverse the byte order to fix endian-ness:
04094C             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
04094C             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
04094C             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04094C 17 00 A0    0368*      db 23,0,0xA0
04094F 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
040951 18          0370*      db 24 ; reverse byte order
040952 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
040953 04 00       0372*      dw 4 ; size (4 bytes)
040955             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
040955             0374*  ; VDU 23,27,&20,targetBufferID%;
040955 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
040958 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
04095A             0377*  ; VDU 23,27,&21,width%;height%;0
04095A 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
04095D 00 00       0379*  @width: dw 0x0000
04095F 00 00       0380*  @height: dw 0x0000
040961 00          0381*      db 0x00 ; rgba8888 format
040962             0382*  @end:
040962             0383*  
040962             0384*  ; scratch variables
040962 00 00 00    0385*  bufferId0: dl 0x000000
040965 00 00 00    0386*  bufferId1: dl 0x000000
040968             0387*  
040968             0388*  ; load a vdu buffer from local memory
040968             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040968             0390*  vdu_load_buffer:
040968 ED 43 91 09 0391*      ld (@length),bc
       04          
04096D D5          0392*      push de ; save data pointer
04096E             0393*  ; send the vdu command string
04096E 7D          0394*      ld a,l
04096F 32 8E 09 04 0395*      ld (@bufferId),a
040973 7C          0396*      ld a,h
040974 32 8F 09 04 0397*      ld (@bufferId+1),a
040978 21 8B 09 04 0398*      ld hl,@cmd
04097C 01 08 00 00 0399*      ld bc,@end-@cmd
040980 5B DF       0400*      rst.lil $18
040982             0401*  ; send the buffer data
040982 E1          0402*      pop hl ; pointer to data
040983 ED 4B 91 09 0403*      ld bc,(@length)
       04          
040988 5B DF       0404*      rst.lil $18 ; send it
04098A C9          0405*      ret
04098B             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04098B 17 00 A0    0407*  @cmd:       db 23,0,0xA0
04098E 00 00       0408*  @bufferId:	dw 0x0000
040990 00          0409*  		    db 0 ; load buffer
040991 00 00       0410*  @length:	dw 0x0000
040993 00          0411*  @end: db 0 ; padding
040994             0412*  
040994             0413*  ; clear a buffer
040994             0414*  ; inputs: hl = bufferId
040994             0415*  vdu_clear_buffer:
040994 7D          0416*      ld a,l
040995 32 AC 09 04 0417*      ld (@bufferId),a
040999 7C          0418*      ld a,h
04099A 32 AD 09 04 0419*      ld (@bufferId+1),a
04099E 21 A9 09 04 0420*      ld hl,@cmd
0409A2 01 06 00 00 0421*      ld bc,@end-@cmd
0409A6 5B DF       0422*      rst.lil $18
0409A8 C9          0423*      ret
0409A9 17 00 A0    0424*  @cmd:       db 23,0,0xA0
0409AC 00 00       0425*  @bufferId:	dw 0x0000
0409AE 02          0426*  		    db 2 ; clear buffer
0409AF             0427*  @end:
0409AF             0428*  
0409AF             0429*  vdu_clear_all_buffers:
0409AF             0430*  ; clear all buffers
0409AF 21 BA 09 04 0431*      ld hl,@beg
0409B3 01 06 00 00 0432*      ld bc,@end-@beg
0409B7 5B DF       0433*      rst.lil $18
0409B9 C9          0434*      ret
0409BA 17 00 A0    0435*  @beg: db 23,0,$A0
0409BD FF FF       0436*        dw -1 ; clear all buffers
0409BF 02          0437*        db 2  ; command 2: clear a buffer
0409C0             0438*  @end:
0409C0             0439*  
0409C0             0440*  ; Command 14: Consolidate blocks in a buffer
0409C0             0441*  vdu_consolidate_buffer:
0409C0             0442*  ; set parameters for vdu call
0409C0 7D          0443*      ld a,l
0409C1 32 D8 09 04 0444*      ld (@bufferId),a
0409C5 7C          0445*      ld a,h
0409C6 32 D9 09 04 0446*      ld (@bufferId+1),a
0409CA 21 D5 09 04 0447*      ld hl,@beg
0409CE 01 06 00 00 0448*      ld bc,@end-@beg
0409D2 5B DF       0449*      rst.lil $18
0409D4 C9          0450*      ret
0409D5             0451*  ; VDU 23, 0, &A0, bufferId; 14
0409D5 17 00 A0    0452*  @beg: db 23,0,0xA0
0409D8 00 00       0453*  @bufferId: dw 0x0000
0409DA 0E          0454*             db 14
0409DB             0455*  @end:
0409DB             0456*  
0409DB             0457*  ; load an image file to a buffer and make it a bitmap
0409DB             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0409DB             0459*  vdu_load_img:
0409DB             0460*  ; back up image type and dimension parameters
0409DB 22 62 09 04 0461*      ld (bufferId0),hl
0409DF F5          0462*      push af
0409E0 C5          0463*  	push bc
0409E1 D5          0464*  	push de
0409E2             0465*  ; load the image
0409E2 CD FD 09 04 0466*  	call vdu_load_buffer_from_file
0409E6             0467*  ; now make it a bitmap
0409E6 2A 62 09 04 0468*      ld hl,(bufferId0)
0409EA CD C0 09 04 0469*      call vdu_consolidate_buffer
0409EE 2A 62 09 04 0470*      ld hl,(bufferId0)
0409F2 CD BD 08 04 0471*      call vdu_buff_select
0409F6 D1          0472*  	pop de ; image height
0409F7 C1          0473*  	pop bc ; image width
0409F8 F1          0474*  	pop af ; image type
0409F9 C3 D2 08 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0409FD             0476*  
0409FD             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0409FD             0478*  vdu_load_buffer_from_file:
0409FD 22 62 09 04 0479*      ld (bufferId0),hl
040A01             0480*  
040A01             0481*  ; clear target buffer
040A01 CD 94 09 04 0482*      call vdu_clear_buffer
040A05             0483*  
040A05             0484*  ; open the file in read mode
040A05             0485*  ; Open a file
040A05             0486*  ; HLU: Filename
040A05             0487*  ;   C: Mode
040A05             0488*  ; Returns:
040A05             0489*  ;   A: Filehandle, or 0 if couldn't open
040A05 FD E5       0490*  	push iy ; pointer to filename
040A07 E1          0491*  	pop hl
040A08 0E 01       0492*  	ld c,fa_read
040A0A             0493*      MOSCALL mos_fopen
040A0A 3E 0A       0001*M 			LD	A, function
040A0C 5B CF       0002*M 			RST.LIL	08h
040A0E 32 49 0A 04 0494*      ld (@filehandle),a
040A12             0495*  
040A12             0496*  @read_file:
040A12             0497*  ; Read a block of data from a file
040A12             0498*  ;   C: Filehandle
040A12             0499*  ; HLU: Pointer to where to write the data to
040A12             0500*  ; DEU: Number of bytes to read
040A12             0501*  ; Returns:
040A12             0502*  ; DEU: Number of bytes read
040A12 3A 49 0A 04 0503*      ld a,(@filehandle)
040A16 4F          0504*      ld c,a
040A17 21 00 E0 B7 0505*      ld hl,filedata
040A1B 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
040A1F             0507*      MOSCALL mos_fread
040A1F 3E 1A       0001*M 			LD	A, function
040A21 5B CF       0002*M 			RST.LIL	08h
040A23             0508*  
040A23             0509*  ; test de for zero bytes read
040A23 21 00 00 00 0510*      ld hl,0
040A27 AF          0511*      xor a ; clear carry
040A28 ED 52       0512*      sbc hl,de
040A2A CA 40 0A 04 0513*      jp z,@close_file
040A2E             0514*  
040A2E             0515*  ; load a vdu buffer from local memory
040A2E             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040A2E 2A 62 09 04 0517*      ld hl,(bufferId0)
040A32 D5          0518*      push de ; chunksize
040A33 C1          0519*      pop bc
040A34 11 00 E0 B7 0520*      ld de,filedata
040A38 CD 68 09 04 0521*      call vdu_load_buffer
040A3C             0522*  
040A3C             0523*  ; read the next block
040A3C C3 12 0A 04 0524*      jp @read_file
040A40             0525*  
040A40             0526*  ; close the file
040A40             0527*  @close_file:
040A40 3A 49 0A 04 0528*      ld a,(@filehandle)
040A44             0529*      MOSCALL mos_fclose
040A44 3E 0B       0001*M 			LD	A, function
040A46 5B CF       0002*M 			RST.LIL	08h
040A48 C9          0530*      ret ; vdu_load_buffer_from_file
040A49             0531*  
040A49 00          0532*  @filehandle: db 0 ; file handle
040A4A 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
040A4D             0534*  
040A4D 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
040A50             0536*  
040A50             0537*  ; File information structure (FILINFO)
040A50             0538*  @filinfo:
040A50 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040A54 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040A56 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
040A58 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
040A59 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040A66 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B66             0031       include "vdu_plot.inc"
040B66             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040B66             0002*  ; PLOT code 	(Decimal) 	Effect
040B66             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
040B66             0004*  plot_sl_both: equ 0x00
040B66             0005*  
040B66             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
040B66             0007*  plot_sl_first: equ 0x08
040B66             0008*  
040B66             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
040B66             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
040B66             0011*  
040B66             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
040B66             0013*  plot_sl_last: equ 0x20
040B66             0014*  
040B66             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
040B66             0016*  plot_sl_none: equ 0x28
040B66             0017*  
040B66             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
040B66             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
040B66             0020*  
040B66             0021*  ; &40-&47 	64-71 	Point plot
040B66             0022*  plot_pt: equ 0x40
040B66             0023*  
040B66             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
040B66             0025*  plot_lf_lr_non_bg: equ 0x48
040B66             0026*  
040B66             0027*  ; &50-&57 	80-87 	Triangle fill
040B66             0028*  plot_tf: equ 0x50
040B66             0029*  
040B66             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
040B66             0031*  plot_lf_r_bg: equ 0x58
040B66             0032*  
040B66             0033*  ; &60-&67 	96-103 	Rectangle fill
040B66             0034*  plot_rf: equ 0x60
040B66             0035*  
040B66             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
040B66             0037*  plot_lf_lr_fg: equ 0x60
040B66             0038*  
040B66             0039*  ; &70-&77 	112-119 	Parallelogram fill
040B66             0040*  plot_pf: equ 0x70
040B66             0041*  
040B66             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
040B66             0043*  plot_lf_r_non_fg: equ 0x78
040B66             0044*  
040B66             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
040B66             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
040B66             0047*  
040B66             0048*  ; &90-&97 	144-151 	Circle outline
040B66             0049*  plot_co: equ 0x90
040B66             0050*  
040B66             0051*  ; &98-&9F 	152-159 	Circle fill
040B66             0052*  plot_cf: equ 0x98
040B66             0053*  
040B66             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
040B66             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
040B66             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
040B66             0057*  
040B66             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
040B66             0059*  plot_rcm: equ 0xB8
040B66             0060*  
040B66             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
040B66             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
040B66             0063*  ; &D0-&D7 	208-215 	Not defined
040B66             0064*  ; &D8-&DF 	216-223 	Not defined
040B66             0065*  ; &E0-&E7 	224-231 	Not defined
040B66             0066*  
040B66             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
040B66             0068*  plot_bmp: equ 0xE8
040B66             0069*  
040B66             0070*  ; &F0-&F7 	240-247 	Not defined
040B66             0071*  ; &F8-&FF 	248-255 	Not defined
040B66             0072*  
040B66             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
040B66             0074*  ; Agon Console8 VDP 2.2.0
040B66             0075*  
040B66             0076*  ; Within each group of eight plot codes, the effects are as follows:
040B66             0077*  ; Plot code 	Effect
040B66             0078*  ; 0 	Move relative
040B66             0079*  mv_rel: equ 0
040B66             0080*  
040B66             0081*  ; 1 	Plot relative in current foreground colour
040B66             0082*  dr_rel_fg: equ 1
040B66             0083*  
040B66             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
040B66             0085*  ; 3 	Plot relative in current background colour
040B66             0086*  dr_rel_bg: equ 3
040B66             0087*  
040B66             0088*  ; 4 	Move absolute
040B66             0089*  mv_abs: equ 4
040B66             0090*  
040B66             0091*  ; 5 	Plot absolute in current foreground colour
040B66             0092*  dr_abs_fg: equ 5
040B66             0093*  
040B66             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
040B66             0095*  ; 7 	Plot absolute in current background colour
040B66             0096*  dr_abs_bg: equ 7
040B66             0097*  
040B66             0098*  ; Codes 0-3 use the position data provided as part of the command
040B66             0099*  ; as a relative position, adding the position given to the current
040B66             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
040B66             0101*  ; as part of the command as an absolute position, setting the current
040B66             0102*  ; graphical cursor position to the position given.
040B66             0103*  
040B66             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
040B66             0105*  ; current pixel colour. These operations cannot currently be supported
040B66             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
040B66             0107*  ; supported. Support for these codes may be added in a future version
040B66             0108*  ; of the VDP firmware.
040B66             0109*  
040B66             0110*  ; 16 colour palette constants
040B66             0111*  c_black: equ 0
040B66             0112*  c_red_dk: equ 1
040B66             0113*  c_green_dk: equ 2
040B66             0114*  c_yellow_dk: equ 3
040B66             0115*  c_blue_dk: equ 4
040B66             0116*  c_magenta_dk: equ 5
040B66             0117*  c_cyan_dk: equ 6
040B66             0118*  c_grey: equ 7
040B66             0119*  c_grey_dk: equ 8
040B66             0120*  c_red: equ 9
040B66             0121*  c_green: equ 10
040B66             0122*  c_yellow: equ 11
040B66             0123*  c_blue: equ 12
040B66             0124*  c_magenta: equ 13
040B66             0125*  c_cyan: equ 14
040B66             0126*  c_white: equ 15
040B66             0127*  
040B66             0128*  ; VDU 25, mode, x; y;: PLOT command
040B66             0129*  ; inputs: a=mode, bc=x0, de=y0
040B66             0130*  vdu_plot:
040B66 32 80 0B 04 0131*      ld (@mode),a
040B6A ED 43 81 0B 0132*      ld (@x0),bc
       04          
040B6F ED 53 83 0B 0133*      ld (@y0),de
       04          
040B74 21 7F 0B 04 0134*  	ld hl,@cmd
040B78 01 06 00 00 0135*  	ld bc,@end-@cmd
040B7C 5B DF       0136*  	rst.lil $18
040B7E C9          0137*  	ret
040B7F 19          0138*  @cmd:   db 25
040B80 00          0139*  @mode:  db 0
040B81 00 00       0140*  @x0: 	dw 0
040B83 00 00       0141*  @y0: 	dw 0
040B85 00          0142*  @end:   db 0 ; extra byte to soak up deu
040B86             0143*  
040B86             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040B86             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
040B86             0146*  ; VDU 25, mode, x; y;: PLOT command
040B86             0147*  ; inputs: bc=x0, de=y0
040B86             0148*  ; prerequisites: vdu_buff_select
040B86             0149*  vdu_plot_bmp:
040B86 ED 43 9D 0B 0150*      ld (@x0),bc
       04          
040B8B ED 53 9F 0B 0151*      ld (@y0),de
       04          
040B90 21 9B 0B 04 0152*  	ld hl,@cmd
040B94 01 06 00 00 0153*  	ld bc,@end-@cmd
040B98 5B DF       0154*  	rst.lil $18
040B9A C9          0155*  	ret
040B9B 19          0156*  @cmd:   db 25
040B9C ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040B9D 00 00       0158*  @x0: 	dw 0x0000
040B9F 00 00       0159*  @y0: 	dw 0x0000
040BA1 00          0160*  @end:   db 0x00 ; padding
040BA2             0161*  
040BA2             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040BA2             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
040BA2             0164*  ; VDU 25, mode, x; y;: PLOT command
040BA2             0165*  ; inputs: bc=x0, de=y0
040BA2             0166*  ; USING 16.8 FIXED POINT COORDINATES
040BA2             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
040BA2             0168*  ;   the fractional portiion of the inputs are truncated
040BA2             0169*  ;   leaving only the 16-bit integer portion
040BA2             0170*  ; prerequisites: vdu_buff_select
040BA2             0171*  vdu_plot_bmp168:
040BA2             0172*  ; populate in the reverse of normal to keep the
040BA2             0173*  ; inputs from stomping on each other
040BA2 ED 53 C0 0B 0174*      ld (@y0-1),de
       04          
040BA7 ED 43 BE 0B 0175*      ld (@x0-1),bc
       04          
040BAC 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
040BAE 32 BE 0B 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
040BB2 21 BD 0B 04 0178*  	ld hl,@cmd
040BB6 01 06 00 00 0179*  	ld bc,@end-@cmd
040BBA 5B DF       0180*  	rst.lil $18
040BBC C9          0181*  	ret
040BBD 19          0182*  @cmd:   db 25
040BBE ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040BBF 00 00       0184*  @x0: 	dw 0x0000
040BC1 00 00       0185*  @y0: 	dw 0x0000
040BC3             0186*  @end:  ; no padding required b/c we shifted de right
040BC3             0187*  
040BC3             0188*  ; draw a filled rectangle
040BC3             0189*  vdu_plot_rf:
040BC3 ED 43 EA 0B 0190*      ld (@x0),bc
       04          
040BC8 ED 53 EC 0B 0191*      ld (@y0),de
       04          
040BCD DD 22 F0 0B 0192*      ld (@x1),ix
       04          
040BD2 FD 22 F2 0B 0193*      ld (@y1),iy
       04          
040BD7 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
040BD9 32 EE 0B 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040BDD 21 E8 0B 04 0196*  	ld hl,@cmd0
040BE1 01 0C 00 00 0197*  	ld bc,@end-@cmd0
040BE5 5B DF       0198*  	rst.lil $18
040BE7 C9          0199*      ret
040BE8 19          0200*  @cmd0:  db 25 ; plot
040BE9 04          0201*  @arg0:  db plot_sl_both+mv_abs
040BEA 00 00       0202*  @x0:    dw 0x0000
040BEC 00 00       0203*  @y0:    dw 0x0000
040BEE 19          0204*  @cmd1:  db 25 ; plot
040BEF 65          0205*  @arg1:  db plot_rf+dr_abs_fg
040BF0 00 00       0206*  @x1:    dw 0x0000
040BF2 00 00       0207*  @y1:    dw 0x0000
040BF4 00          0208*  @end:   db 0x00 ; padding
040BF5             0209*  
040BF5             0210*  ; draw a filled circle
040BF5             0211*  vdu_plot_cf:
040BF5 ED 43 1C 0C 0212*      ld (@x0),bc
       04          
040BFA ED 53 1E 0C 0213*      ld (@y0),de
       04          
040BFF DD 22 22 0C 0214*      ld (@x1),ix
       04          
040C04 FD 22 24 0C 0215*      ld (@y1),iy
       04          
040C09 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
040C0B 32 20 0C 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040C0F 21 1A 0C 04 0218*  	ld hl,@cmd0
040C13 01 0C 00 00 0219*  	ld bc,@end-@cmd0
040C17 5B DF       0220*  	rst.lil $18
040C19 C9          0221*      ret
040C1A 19          0222*  @cmd0:  db 25 ; plot
040C1B 04          0223*  @arg0:  db plot_sl_both+mv_abs
040C1C 00 00       0224*  @x0:    dw 0x0000
040C1E 00 00       0225*  @y0:    dw 0x0000
040C20 19          0226*  @cmd1:  db 25 ; plot
040C21 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
040C22 00 00       0228*  @x1:    dw 0x0000
040C24 00 00       0229*  @y1:    dw 0x0000
040C26 00          0230*  @end:   db 0x00 ; padding
040C27             0032   
040C27             0033   ; APPLICATION INCLUDES
040C27             0034       include "images_tiles_dg.inc"
040C27             0001*  ; Generated by tiles_dg.py
040C27             0002*  
040C27             0003*  tiles_dg_num_images: equ 368
040C27             0004*  
040C27             0005*  ; buffer_ids:
040C27             0006*  BUF_DG_0_00: equ 512
040C27             0007*  BUF_DG_0_01: equ 513
040C27             0008*  BUF_DG_0_02: equ 514
040C27             0009*  BUF_DG_0_03: equ 515
040C27             0010*  BUF_DG_0_04: equ 516
040C27             0011*  BUF_DG_0_05: equ 517
040C27             0012*  BUF_DG_0_06: equ 518
040C27             0013*  BUF_DG_0_07: equ 519
040C27             0014*  BUF_DG_0_08: equ 520
040C27             0015*  BUF_DG_0_09: equ 521
040C27             0016*  BUF_DG_0_0A: equ 522
040C27             0017*  BUF_DG_0_0B: equ 523
040C27             0018*  BUF_DG_0_0C: equ 524
040C27             0019*  BUF_DG_0_0D: equ 525
040C27             0020*  BUF_DG_0_0E: equ 526
040C27             0021*  BUF_DG_0_0F: equ 527
040C27             0022*  BUF_DG_0_10: equ 528
040C27             0023*  BUF_DG_0_11: equ 529
040C27             0024*  BUF_DG_0_12: equ 530
040C27             0025*  BUF_DG_0_13: equ 531
040C27             0026*  BUF_DG_0_14: equ 532
040C27             0027*  BUF_DG_0_15: equ 533
040C27             0028*  BUF_DG_0_16: equ 534
040C27             0029*  BUF_DG_0_17: equ 535
040C27             0030*  BUF_DG_0_18: equ 536
040C27             0031*  BUF_DG_0_19: equ 537
040C27             0032*  BUF_DG_0_1A: equ 538
040C27             0033*  BUF_DG_0_1B: equ 539
040C27             0034*  BUF_DG_0_1C: equ 540
040C27             0035*  BUF_DG_0_1D: equ 541
040C27             0036*  BUF_DG_0_1E: equ 542
040C27             0037*  BUF_DG_0_1F: equ 543
040C27             0038*  BUF_DG_0_20: equ 544
040C27             0039*  BUF_DG_0_21: equ 545
040C27             0040*  BUF_DG_0_22: equ 546
040C27             0041*  BUF_DG_0_23: equ 547
040C27             0042*  BUF_DG_0_24: equ 548
040C27             0043*  BUF_DG_0_25: equ 549
040C27             0044*  BUF_DG_0_26: equ 550
040C27             0045*  BUF_DG_0_27: equ 551
040C27             0046*  BUF_DG_0_28: equ 552
040C27             0047*  BUF_DG_0_29: equ 553
040C27             0048*  BUF_DG_0_2A: equ 554
040C27             0049*  BUF_DG_0_2B: equ 555
040C27             0050*  BUF_DG_0_2C: equ 556
040C27             0051*  BUF_DG_0_2D: equ 557
040C27             0052*  BUF_DG_0_2E: equ 558
040C27             0053*  BUF_DG_0_2F: equ 559
040C27             0054*  BUF_DG_0_30: equ 560
040C27             0055*  BUF_DG_0_31: equ 561
040C27             0056*  BUF_DG_0_32: equ 562
040C27             0057*  BUF_DG_0_33: equ 563
040C27             0058*  BUF_DG_0_34: equ 564
040C27             0059*  BUF_DG_0_35: equ 565
040C27             0060*  BUF_DG_0_36: equ 566
040C27             0061*  BUF_DG_0_37: equ 567
040C27             0062*  BUF_DG_0_38: equ 568
040C27             0063*  BUF_DG_0_39: equ 569
040C27             0064*  BUF_DG_0_3A: equ 570
040C27             0065*  BUF_DG_0_3B: equ 571
040C27             0066*  BUF_DG_0_3C: equ 572
040C27             0067*  BUF_DG_0_3D: equ 573
040C27             0068*  BUF_DG_0_3E: equ 574
040C27             0069*  BUF_DG_0_3F: equ 575
040C27             0070*  BUF_DG_0_40: equ 576
040C27             0071*  BUF_DG_0_41: equ 577
040C27             0072*  BUF_DG_0_42: equ 578
040C27             0073*  BUF_DG_0_43: equ 579
040C27             0074*  BUF_DG_1_00: equ 768
040C27             0075*  BUF_DG_1_01: equ 769
040C27             0076*  BUF_DG_1_02: equ 770
040C27             0077*  BUF_DG_1_03: equ 771
040C27             0078*  BUF_DG_1_04: equ 772
040C27             0079*  BUF_DG_1_05: equ 773
040C27             0080*  BUF_DG_1_06: equ 774
040C27             0081*  BUF_DG_1_07: equ 775
040C27             0082*  BUF_DG_1_08: equ 776
040C27             0083*  BUF_DG_1_09: equ 777
040C27             0084*  BUF_DG_1_0A: equ 778
040C27             0085*  BUF_DG_1_0B: equ 779
040C27             0086*  BUF_DG_1_0C: equ 780
040C27             0087*  BUF_DG_1_0D: equ 781
040C27             0088*  BUF_DG_1_0E: equ 782
040C27             0089*  BUF_DG_1_0F: equ 783
040C27             0090*  BUF_DG_1_10: equ 784
040C27             0091*  BUF_DG_1_11: equ 785
040C27             0092*  BUF_DG_1_12: equ 786
040C27             0093*  BUF_DG_1_13: equ 787
040C27             0094*  BUF_DG_1_14: equ 788
040C27             0095*  BUF_DG_1_15: equ 789
040C27             0096*  BUF_DG_1_16: equ 790
040C27             0097*  BUF_DG_1_17: equ 791
040C27             0098*  BUF_DG_1_18: equ 792
040C27             0099*  BUF_DG_1_19: equ 793
040C27             0100*  BUF_DG_1_1A: equ 794
040C27             0101*  BUF_DG_1_1B: equ 795
040C27             0102*  BUF_DG_1_1C: equ 796
040C27             0103*  BUF_DG_1_1D: equ 797
040C27             0104*  BUF_DG_1_1E: equ 798
040C27             0105*  BUF_DG_1_1F: equ 799
040C27             0106*  BUF_DG_1_20: equ 800
040C27             0107*  BUF_DG_1_21: equ 801
040C27             0108*  BUF_DG_1_22: equ 802
040C27             0109*  BUF_DG_1_23: equ 803
040C27             0110*  BUF_DG_1_24: equ 804
040C27             0111*  BUF_DG_1_25: equ 805
040C27             0112*  BUF_DG_1_26: equ 806
040C27             0113*  BUF_DG_1_27: equ 807
040C27             0114*  BUF_DG_1_28: equ 808
040C27             0115*  BUF_DG_1_29: equ 809
040C27             0116*  BUF_DG_1_2A: equ 810
040C27             0117*  BUF_DG_1_2B: equ 811
040C27             0118*  BUF_DG_1_2C: equ 812
040C27             0119*  BUF_DG_1_2D: equ 813
040C27             0120*  BUF_DG_1_2E: equ 814
040C27             0121*  BUF_DG_2_00: equ 1024
040C27             0122*  BUF_DG_2_01: equ 1025
040C27             0123*  BUF_DG_2_02: equ 1026
040C27             0124*  BUF_DG_2_03: equ 1027
040C27             0125*  BUF_DG_2_04: equ 1028
040C27             0126*  BUF_DG_2_05: equ 1029
040C27             0127*  BUF_DG_2_06: equ 1030
040C27             0128*  BUF_DG_2_07: equ 1031
040C27             0129*  BUF_DG_2_08: equ 1032
040C27             0130*  BUF_DG_2_09: equ 1033
040C27             0131*  BUF_DG_2_0A: equ 1034
040C27             0132*  BUF_DG_2_0B: equ 1035
040C27             0133*  BUF_DG_2_0C: equ 1036
040C27             0134*  BUF_DG_2_0D: equ 1037
040C27             0135*  BUF_DG_2_0E: equ 1038
040C27             0136*  BUF_DG_2_0F: equ 1039
040C27             0137*  BUF_DG_2_10: equ 1040
040C27             0138*  BUF_DG_2_11: equ 1041
040C27             0139*  BUF_DG_2_12: equ 1042
040C27             0140*  BUF_DG_2_13: equ 1043
040C27             0141*  BUF_DG_2_14: equ 1044
040C27             0142*  BUF_DG_2_15: equ 1045
040C27             0143*  BUF_DG_2_16: equ 1046
040C27             0144*  BUF_DG_2_17: equ 1047
040C27             0145*  BUF_DG_2_18: equ 1048
040C27             0146*  BUF_DG_2_19: equ 1049
040C27             0147*  BUF_DG_2_1A: equ 1050
040C27             0148*  BUF_DG_2_1B: equ 1051
040C27             0149*  BUF_DG_2_1C: equ 1052
040C27             0150*  BUF_DG_2_1D: equ 1053
040C27             0151*  BUF_DG_2_1E: equ 1054
040C27             0152*  BUF_DG_2_1F: equ 1055
040C27             0153*  BUF_DG_2_20: equ 1056
040C27             0154*  BUF_DG_2_21: equ 1057
040C27             0155*  BUF_DG_2_22: equ 1058
040C27             0156*  BUF_DG_2_23: equ 1059
040C27             0157*  BUF_DG_2_24: equ 1060
040C27             0158*  BUF_DG_2_25: equ 1061
040C27             0159*  BUF_DG_2_26: equ 1062
040C27             0160*  BUF_DG_2_27: equ 1063
040C27             0161*  BUF_DG_2_28: equ 1064
040C27             0162*  BUF_DG_2_29: equ 1065
040C27             0163*  BUF_DG_2_2A: equ 1066
040C27             0164*  BUF_DG_2_2B: equ 1067
040C27             0165*  BUF_DG_2_2C: equ 1068
040C27             0166*  BUF_DG_2_2D: equ 1069
040C27             0167*  BUF_DG_2_2E: equ 1070
040C27             0168*  BUF_DG_2_2F: equ 1071
040C27             0169*  BUF_DG_2_30: equ 1072
040C27             0170*  BUF_DG_2_31: equ 1073
040C27             0171*  BUF_DG_2_32: equ 1074
040C27             0172*  BUF_DG_2_33: equ 1075
040C27             0173*  BUF_DG_2_34: equ 1076
040C27             0174*  BUF_DG_2_35: equ 1077
040C27             0175*  BUF_DG_2_36: equ 1078
040C27             0176*  BUF_DG_2_37: equ 1079
040C27             0177*  BUF_DG_2_38: equ 1080
040C27             0178*  BUF_DG_2_39: equ 1081
040C27             0179*  BUF_DG_2_3A: equ 1082
040C27             0180*  BUF_DG_2_3B: equ 1083
040C27             0181*  BUF_DG_2_3C: equ 1084
040C27             0182*  BUF_DG_2_3D: equ 1085
040C27             0183*  BUF_DG_2_3E: equ 1086
040C27             0184*  BUF_DG_2_3F: equ 1087
040C27             0185*  BUF_DG_2_40: equ 1088
040C27             0186*  BUF_DG_3_00: equ 1280
040C27             0187*  BUF_DG_3_01: equ 1281
040C27             0188*  BUF_DG_3_02: equ 1282
040C27             0189*  BUF_DG_3_03: equ 1283
040C27             0190*  BUF_DG_3_04: equ 1284
040C27             0191*  BUF_DG_3_05: equ 1285
040C27             0192*  BUF_DG_3_06: equ 1286
040C27             0193*  BUF_DG_3_07: equ 1287
040C27             0194*  BUF_DG_3_08: equ 1288
040C27             0195*  BUF_DG_3_09: equ 1289
040C27             0196*  BUF_DG_3_0A: equ 1290
040C27             0197*  BUF_DG_3_0B: equ 1291
040C27             0198*  BUF_DG_3_0C: equ 1292
040C27             0199*  BUF_DG_3_0D: equ 1293
040C27             0200*  BUF_DG_3_0E: equ 1294
040C27             0201*  BUF_DG_3_0F: equ 1295
040C27             0202*  BUF_DG_3_10: equ 1296
040C27             0203*  BUF_DG_3_11: equ 1297
040C27             0204*  BUF_DG_3_12: equ 1298
040C27             0205*  BUF_DG_3_13: equ 1299
040C27             0206*  BUF_DG_3_14: equ 1300
040C27             0207*  BUF_DG_3_15: equ 1301
040C27             0208*  BUF_DG_3_16: equ 1302
040C27             0209*  BUF_DG_3_17: equ 1303
040C27             0210*  BUF_DG_3_18: equ 1304
040C27             0211*  BUF_DG_3_19: equ 1305
040C27             0212*  BUF_DG_3_1A: equ 1306
040C27             0213*  BUF_DG_3_1B: equ 1307
040C27             0214*  BUF_DG_3_1C: equ 1308
040C27             0215*  BUF_DG_3_1D: equ 1309
040C27             0216*  BUF_DG_3_1E: equ 1310
040C27             0217*  BUF_DG_3_1F: equ 1311
040C27             0218*  BUF_DG_3_20: equ 1312
040C27             0219*  BUF_DG_3_21: equ 1313
040C27             0220*  BUF_DG_3_22: equ 1314
040C27             0221*  BUF_DG_3_23: equ 1315
040C27             0222*  BUF_DG_3_24: equ 1316
040C27             0223*  BUF_DG_3_25: equ 1317
040C27             0224*  BUF_DG_3_26: equ 1318
040C27             0225*  BUF_DG_3_27: equ 1319
040C27             0226*  BUF_DG_3_28: equ 1320
040C27             0227*  BUF_DG_3_29: equ 1321
040C27             0228*  BUF_DG_3_2A: equ 1322
040C27             0229*  BUF_DG_3_2B: equ 1323
040C27             0230*  BUF_DG_3_2C: equ 1324
040C27             0231*  BUF_DG_3_2D: equ 1325
040C27             0232*  BUF_DG_3_2E: equ 1326
040C27             0233*  BUF_DG_3_2F: equ 1327
040C27             0234*  BUF_DG_3_30: equ 1328
040C27             0235*  BUF_DG_3_31: equ 1329
040C27             0236*  BUF_DG_3_32: equ 1330
040C27             0237*  BUF_DG_3_33: equ 1331
040C27             0238*  BUF_DG_3_34: equ 1332
040C27             0239*  BUF_DG_4_00: equ 1536
040C27             0240*  BUF_DG_4_01: equ 1537
040C27             0241*  BUF_DG_4_02: equ 1538
040C27             0242*  BUF_DG_4_03: equ 1539
040C27             0243*  BUF_DG_4_04: equ 1540
040C27             0244*  BUF_DG_4_05: equ 1541
040C27             0245*  BUF_DG_4_06: equ 1542
040C27             0246*  BUF_DG_4_07: equ 1543
040C27             0247*  BUF_DG_4_08: equ 1544
040C27             0248*  BUF_DG_4_09: equ 1545
040C27             0249*  BUF_DG_4_0A: equ 1546
040C27             0250*  BUF_DG_4_0B: equ 1547
040C27             0251*  BUF_DG_4_0C: equ 1548
040C27             0252*  BUF_DG_4_0D: equ 1549
040C27             0253*  BUF_DG_4_0E: equ 1550
040C27             0254*  BUF_DG_4_0F: equ 1551
040C27             0255*  BUF_DG_4_10: equ 1552
040C27             0256*  BUF_DG_4_11: equ 1553
040C27             0257*  BUF_DG_4_12: equ 1554
040C27             0258*  BUF_DG_4_13: equ 1555
040C27             0259*  BUF_DG_4_14: equ 1556
040C27             0260*  BUF_DG_4_15: equ 1557
040C27             0261*  BUF_DG_4_16: equ 1558
040C27             0262*  BUF_DG_4_17: equ 1559
040C27             0263*  BUF_DG_4_18: equ 1560
040C27             0264*  BUF_DG_4_19: equ 1561
040C27             0265*  BUF_DG_4_1A: equ 1562
040C27             0266*  BUF_DG_4_1B: equ 1563
040C27             0267*  BUF_DG_4_1C: equ 1564
040C27             0268*  BUF_DG_4_1D: equ 1565
040C27             0269*  BUF_DG_4_1E: equ 1566
040C27             0270*  BUF_DG_4_1F: equ 1567
040C27             0271*  BUF_DG_4_20: equ 1568
040C27             0272*  BUF_DG_4_21: equ 1569
040C27             0273*  BUF_DG_4_22: equ 1570
040C27             0274*  BUF_DG_4_23: equ 1571
040C27             0275*  BUF_DG_4_24: equ 1572
040C27             0276*  BUF_DG_4_25: equ 1573
040C27             0277*  BUF_DG_4_26: equ 1574
040C27             0278*  BUF_DG_4_27: equ 1575
040C27             0279*  BUF_DG_4_28: equ 1576
040C27             0280*  BUF_DG_4_29: equ 1577
040C27             0281*  BUF_DG_4_2A: equ 1578
040C27             0282*  BUF_DG_4_2B: equ 1579
040C27             0283*  BUF_DG_4_2C: equ 1580
040C27             0284*  BUF_DG_4_2D: equ 1581
040C27             0285*  BUF_DG_4_2E: equ 1582
040C27             0286*  BUF_DG_4_2F: equ 1583
040C27             0287*  BUF_DG_4_30: equ 1584
040C27             0288*  BUF_DG_4_31: equ 1585
040C27             0289*  BUF_DG_5_00: equ 1792
040C27             0290*  BUF_DG_5_01: equ 1793
040C27             0291*  BUF_DG_5_02: equ 1794
040C27             0292*  BUF_DG_5_03: equ 1795
040C27             0293*  BUF_DG_5_04: equ 1796
040C27             0294*  BUF_DG_5_05: equ 1797
040C27             0295*  BUF_DG_5_06: equ 1798
040C27             0296*  BUF_DG_5_07: equ 1799
040C27             0297*  BUF_DG_5_08: equ 1800
040C27             0298*  BUF_DG_5_09: equ 1801
040C27             0299*  BUF_DG_5_0A: equ 1802
040C27             0300*  BUF_DG_5_0B: equ 1803
040C27             0301*  BUF_DG_5_0C: equ 1804
040C27             0302*  BUF_DG_5_0D: equ 1805
040C27             0303*  BUF_DG_5_0E: equ 1806
040C27             0304*  BUF_DG_5_0F: equ 1807
040C27             0305*  BUF_DG_5_10: equ 1808
040C27             0306*  BUF_DG_5_11: equ 1809
040C27             0307*  BUF_DG_5_12: equ 1810
040C27             0308*  BUF_DG_5_13: equ 1811
040C27             0309*  BUF_DG_5_14: equ 1812
040C27             0310*  BUF_DG_5_15: equ 1813
040C27             0311*  BUF_DG_5_16: equ 1814
040C27             0312*  BUF_DG_5_17: equ 1815
040C27             0313*  BUF_DG_5_18: equ 1816
040C27             0314*  BUF_DG_5_19: equ 1817
040C27             0315*  BUF_DG_5_1A: equ 1818
040C27             0316*  BUF_DG_5_1B: equ 1819
040C27             0317*  BUF_DG_5_1C: equ 1820
040C27             0318*  BUF_DG_5_1D: equ 1821
040C27             0319*  BUF_DG_5_1E: equ 1822
040C27             0320*  BUF_DG_5_1F: equ 1823
040C27             0321*  BUF_DG_5_20: equ 1824
040C27             0322*  BUF_DG_5_21: equ 1825
040C27             0323*  BUF_DG_5_22: equ 1826
040C27             0324*  BUF_DG_5_23: equ 1827
040C27             0325*  BUF_DG_5_24: equ 1828
040C27             0326*  BUF_DG_5_25: equ 1829
040C27             0327*  BUF_DG_5_26: equ 1830
040C27             0328*  BUF_DG_5_27: equ 1831
040C27             0329*  BUF_DG_5_28: equ 1832
040C27             0330*  BUF_DG_5_29: equ 1833
040C27             0331*  BUF_DG_5_2A: equ 1834
040C27             0332*  BUF_DG_5_2B: equ 1835
040C27             0333*  BUF_DG_5_2C: equ 1836
040C27             0334*  BUF_DG_5_2D: equ 1837
040C27             0335*  BUF_DG_5_2E: equ 1838
040C27             0336*  BUF_DG_5_2F: equ 1839
040C27             0337*  BUF_DG_5_30: equ 1840
040C27             0338*  BUF_DG_5_31: equ 1841
040C27             0339*  BUF_DG_5_32: equ 1842
040C27             0340*  BUF_DG_5_33: equ 1843
040C27             0341*  BUF_DG_5_34: equ 1844
040C27             0342*  BUF_DG_5_35: equ 1845
040C27             0343*  BUF_DG_5_36: equ 1846
040C27             0344*  BUF_DG_5_37: equ 1847
040C27             0345*  BUF_DG_5_38: equ 1848
040C27             0346*  BUF_DG_5_39: equ 1849
040C27             0347*  BUF_DG_5_3A: equ 1850
040C27             0348*  BUF_DG_5_3B: equ 1851
040C27             0349*  BUF_DG_5_3C: equ 1852
040C27             0350*  BUF_DG_5_3D: equ 1853
040C27             0351*  BUF_DG_5_3E: equ 1854
040C27             0352*  BUF_DG_5_3F: equ 1855
040C27             0353*  BUF_DG_5_40: equ 1856
040C27             0354*  BUF_DG_5_41: equ 1857
040C27             0355*  BUF_DG_5_42: equ 1858
040C27             0356*  BUF_DG_5_43: equ 1859
040C27             0357*  BUF_DG_5_44: equ 1860
040C27             0358*  BUF_DG_5_45: equ 1861
040C27             0359*  BUF_DG_5_46: equ 1862
040C27             0360*  BUF_DG_5_47: equ 1863
040C27             0361*  BUF_DG_5_48: equ 1864
040C27             0362*  BUF_DG_5_49: equ 1865
040C27             0363*  BUF_DG_5_4A: equ 1866
040C27             0364*  BUF_DG_5_4B: equ 1867
040C27             0365*  BUF_DG_5_4C: equ 1868
040C27             0366*  BUF_DG_5_4D: equ 1869
040C27             0367*  BUF_DG_5_4E: equ 1870
040C27             0368*  BUF_DG_5_4F: equ 1871
040C27             0369*  BUF_DG_5_50: equ 1872
040C27             0370*  BUF_DG_5_51: equ 1873
040C27             0371*  BUF_DG_5_52: equ 1874
040C27             0372*  BUF_DG_5_53: equ 1875
040C27             0373*  BUF_DG_5_54: equ 1876
040C27             0374*  
040C27             0375*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
040C27 01 00 00 10 0376*  	dl 1, 16, 16, 256, fn_dg_0_00, 512
       00 00 10 00 
       00 00 01 00 
       07 26 04 00 
       02 00       
040C39 01 00 00 10 0377*  	dl 1, 16, 16, 256, fn_dg_0_01, 513
       00 00 10 00 
       00 00 01 00 
       1B 26 04 01 
       02 00       
040C4B 01 00 00 10 0378*  	dl 1, 16, 16, 256, fn_dg_0_02, 514
       00 00 10 00 
       00 00 01 00 
       2F 26 04 02 
       02 00       
040C5D 01 00 00 10 0379*  	dl 1, 16, 16, 256, fn_dg_0_03, 515
       00 00 10 00 
       00 00 01 00 
       43 26 04 03 
       02 00       
040C6F 01 00 00 10 0380*  	dl 1, 16, 16, 256, fn_dg_0_04, 516
       00 00 10 00 
       00 00 01 00 
       57 26 04 04 
       02 00       
040C81 01 00 00 10 0381*  	dl 1, 16, 16, 256, fn_dg_0_05, 517
       00 00 10 00 
       00 00 01 00 
       6B 26 04 05 
       02 00       
040C93 01 00 00 10 0382*  	dl 1, 16, 16, 256, fn_dg_0_06, 518
       00 00 10 00 
       00 00 01 00 
       7F 26 04 06 
       02 00       
040CA5 01 00 00 10 0383*  	dl 1, 16, 16, 256, fn_dg_0_07, 519
       00 00 10 00 
       00 00 01 00 
       93 26 04 07 
       02 00       
040CB7 01 00 00 10 0384*  	dl 1, 16, 16, 256, fn_dg_0_08, 520
       00 00 10 00 
       00 00 01 00 
       A7 26 04 08 
       02 00       
040CC9 01 00 00 10 0385*  	dl 1, 16, 16, 256, fn_dg_0_09, 521
       00 00 10 00 
       00 00 01 00 
       BB 26 04 09 
       02 00       
040CDB 01 00 00 10 0386*  	dl 1, 16, 16, 256, fn_dg_0_0A, 522
       00 00 10 00 
       00 00 01 00 
       CF 26 04 0A 
       02 00       
040CED 01 00 00 10 0387*  	dl 1, 16, 16, 256, fn_dg_0_0B, 523
       00 00 10 00 
       00 00 01 00 
       E3 26 04 0B 
       02 00       
040CFF 01 00 00 10 0388*  	dl 1, 16, 16, 256, fn_dg_0_0C, 524
       00 00 10 00 
       00 00 01 00 
       F7 26 04 0C 
       02 00       
040D11 01 00 00 10 0389*  	dl 1, 16, 16, 256, fn_dg_0_0D, 525
       00 00 10 00 
       00 00 01 00 
       0B 27 04 0D 
       02 00       
040D23 01 00 00 10 0390*  	dl 1, 16, 16, 256, fn_dg_0_0E, 526
       00 00 10 00 
       00 00 01 00 
       1F 27 04 0E 
       02 00       
040D35 01 00 00 10 0391*  	dl 1, 16, 16, 256, fn_dg_0_0F, 527
       00 00 10 00 
       00 00 01 00 
       33 27 04 0F 
       02 00       
040D47 01 00 00 10 0392*  	dl 1, 16, 16, 256, fn_dg_0_10, 528
       00 00 10 00 
       00 00 01 00 
       47 27 04 10 
       02 00       
040D59 01 00 00 10 0393*  	dl 1, 16, 16, 256, fn_dg_0_11, 529
       00 00 10 00 
       00 00 01 00 
       5B 27 04 11 
       02 00       
040D6B 01 00 00 10 0394*  	dl 1, 16, 16, 256, fn_dg_0_12, 530
       00 00 10 00 
       00 00 01 00 
       6F 27 04 12 
       02 00       
040D7D 01 00 00 10 0395*  	dl 1, 16, 16, 256, fn_dg_0_13, 531
       00 00 10 00 
       00 00 01 00 
       83 27 04 13 
       02 00       
040D8F 01 00 00 10 0396*  	dl 1, 16, 16, 256, fn_dg_0_14, 532
       00 00 10 00 
       00 00 01 00 
       97 27 04 14 
       02 00       
040DA1 01 00 00 10 0397*  	dl 1, 16, 16, 256, fn_dg_0_15, 533
       00 00 10 00 
       00 00 01 00 
       AB 27 04 15 
       02 00       
040DB3 01 00 00 10 0398*  	dl 1, 16, 16, 256, fn_dg_0_16, 534
       00 00 10 00 
       00 00 01 00 
       BF 27 04 16 
       02 00       
040DC5 01 00 00 10 0399*  	dl 1, 16, 16, 256, fn_dg_0_17, 535
       00 00 10 00 
       00 00 01 00 
       D3 27 04 17 
       02 00       
040DD7 01 00 00 10 0400*  	dl 1, 16, 16, 256, fn_dg_0_18, 536
       00 00 10 00 
       00 00 01 00 
       E7 27 04 18 
       02 00       
040DE9 01 00 00 10 0401*  	dl 1, 16, 16, 256, fn_dg_0_19, 537
       00 00 10 00 
       00 00 01 00 
       FB 27 04 19 
       02 00       
040DFB 01 00 00 10 0402*  	dl 1, 16, 16, 256, fn_dg_0_1A, 538
       00 00 10 00 
       00 00 01 00 
       0F 28 04 1A 
       02 00       
040E0D 01 00 00 10 0403*  	dl 1, 16, 16, 256, fn_dg_0_1B, 539
       00 00 10 00 
       00 00 01 00 
       23 28 04 1B 
       02 00       
040E1F 01 00 00 10 0404*  	dl 1, 16, 16, 256, fn_dg_0_1C, 540
       00 00 10 00 
       00 00 01 00 
       37 28 04 1C 
       02 00       
040E31 01 00 00 10 0405*  	dl 1, 16, 16, 256, fn_dg_0_1D, 541
       00 00 10 00 
       00 00 01 00 
       4B 28 04 1D 
       02 00       
040E43 01 00 00 10 0406*  	dl 1, 16, 16, 256, fn_dg_0_1E, 542
       00 00 10 00 
       00 00 01 00 
       5F 28 04 1E 
       02 00       
040E55 01 00 00 10 0407*  	dl 1, 16, 16, 256, fn_dg_0_1F, 543
       00 00 10 00 
       00 00 01 00 
       73 28 04 1F 
       02 00       
040E67 01 00 00 10 0408*  	dl 1, 16, 16, 256, fn_dg_0_20, 544
       00 00 10 00 
       00 00 01 00 
       87 28 04 20 
       02 00       
040E79 01 00 00 10 0409*  	dl 1, 16, 16, 256, fn_dg_0_21, 545
       00 00 10 00 
       00 00 01 00 
       9B 28 04 21 
       02 00       
040E8B 01 00 00 10 0410*  	dl 1, 16, 16, 256, fn_dg_0_22, 546
       00 00 10 00 
       00 00 01 00 
       AF 28 04 22 
       02 00       
040E9D 01 00 00 10 0411*  	dl 1, 16, 16, 256, fn_dg_0_23, 547
       00 00 10 00 
       00 00 01 00 
       C3 28 04 23 
       02 00       
040EAF 01 00 00 10 0412*  	dl 1, 16, 16, 256, fn_dg_0_24, 548
       00 00 10 00 
       00 00 01 00 
       D7 28 04 24 
       02 00       
040EC1 01 00 00 10 0413*  	dl 1, 16, 16, 256, fn_dg_0_25, 549
       00 00 10 00 
       00 00 01 00 
       EB 28 04 25 
       02 00       
040ED3 01 00 00 10 0414*  	dl 1, 16, 16, 256, fn_dg_0_26, 550
       00 00 10 00 
       00 00 01 00 
       FF 28 04 26 
       02 00       
040EE5 01 00 00 10 0415*  	dl 1, 16, 16, 256, fn_dg_0_27, 551
       00 00 10 00 
       00 00 01 00 
       13 29 04 27 
       02 00       
040EF7 01 00 00 10 0416*  	dl 1, 16, 16, 256, fn_dg_0_28, 552
       00 00 10 00 
       00 00 01 00 
       27 29 04 28 
       02 00       
040F09 01 00 00 10 0417*  	dl 1, 16, 16, 256, fn_dg_0_29, 553
       00 00 10 00 
       00 00 01 00 
       3B 29 04 29 
       02 00       
040F1B 01 00 00 10 0418*  	dl 1, 16, 16, 256, fn_dg_0_2A, 554
       00 00 10 00 
       00 00 01 00 
       4F 29 04 2A 
       02 00       
040F2D 01 00 00 10 0419*  	dl 1, 16, 16, 256, fn_dg_0_2B, 555
       00 00 10 00 
       00 00 01 00 
       63 29 04 2B 
       02 00       
040F3F 01 00 00 10 0420*  	dl 1, 16, 16, 256, fn_dg_0_2C, 556
       00 00 10 00 
       00 00 01 00 
       77 29 04 2C 
       02 00       
040F51 01 00 00 10 0421*  	dl 1, 16, 16, 256, fn_dg_0_2D, 557
       00 00 10 00 
       00 00 01 00 
       8B 29 04 2D 
       02 00       
040F63 01 00 00 10 0422*  	dl 1, 16, 16, 256, fn_dg_0_2E, 558
       00 00 10 00 
       00 00 01 00 
       9F 29 04 2E 
       02 00       
040F75 01 00 00 10 0423*  	dl 1, 16, 16, 256, fn_dg_0_2F, 559
       00 00 10 00 
       00 00 01 00 
       B3 29 04 2F 
       02 00       
040F87 01 00 00 10 0424*  	dl 1, 16, 16, 256, fn_dg_0_30, 560
       00 00 10 00 
       00 00 01 00 
       C7 29 04 30 
       02 00       
040F99 01 00 00 10 0425*  	dl 1, 16, 16, 256, fn_dg_0_31, 561
       00 00 10 00 
       00 00 01 00 
       DB 29 04 31 
       02 00       
040FAB 01 00 00 10 0426*  	dl 1, 16, 16, 256, fn_dg_0_32, 562
       00 00 10 00 
       00 00 01 00 
       EF 29 04 32 
       02 00       
040FBD 01 00 00 10 0427*  	dl 1, 16, 16, 256, fn_dg_0_33, 563
       00 00 10 00 
       00 00 01 00 
       03 2A 04 33 
       02 00       
040FCF 01 00 00 10 0428*  	dl 1, 16, 16, 256, fn_dg_0_34, 564
       00 00 10 00 
       00 00 01 00 
       17 2A 04 34 
       02 00       
040FE1 01 00 00 10 0429*  	dl 1, 16, 16, 256, fn_dg_0_35, 565
       00 00 10 00 
       00 00 01 00 
       2B 2A 04 35 
       02 00       
040FF3 01 00 00 10 0430*  	dl 1, 16, 16, 256, fn_dg_0_36, 566
       00 00 10 00 
       00 00 01 00 
       3F 2A 04 36 
       02 00       
041005 01 00 00 10 0431*  	dl 1, 16, 16, 256, fn_dg_0_37, 567
       00 00 10 00 
       00 00 01 00 
       53 2A 04 37 
       02 00       
041017 01 00 00 10 0432*  	dl 1, 16, 16, 256, fn_dg_0_38, 568
       00 00 10 00 
       00 00 01 00 
       67 2A 04 38 
       02 00       
041029 01 00 00 10 0433*  	dl 1, 16, 16, 256, fn_dg_0_39, 569
       00 00 10 00 
       00 00 01 00 
       7B 2A 04 39 
       02 00       
04103B 01 00 00 10 0434*  	dl 1, 16, 16, 256, fn_dg_0_3A, 570
       00 00 10 00 
       00 00 01 00 
       8F 2A 04 3A 
       02 00       
04104D 01 00 00 10 0435*  	dl 1, 16, 16, 256, fn_dg_0_3B, 571
       00 00 10 00 
       00 00 01 00 
       A3 2A 04 3B 
       02 00       
04105F 01 00 00 10 0436*  	dl 1, 16, 16, 256, fn_dg_0_3C, 572
       00 00 10 00 
       00 00 01 00 
       B7 2A 04 3C 
       02 00       
041071 01 00 00 10 0437*  	dl 1, 16, 16, 256, fn_dg_0_3D, 573
       00 00 10 00 
       00 00 01 00 
       CB 2A 04 3D 
       02 00       
041083 01 00 00 10 0438*  	dl 1, 16, 16, 256, fn_dg_0_3E, 574
       00 00 10 00 
       00 00 01 00 
       DF 2A 04 3E 
       02 00       
041095 01 00 00 10 0439*  	dl 1, 16, 16, 256, fn_dg_0_3F, 575
       00 00 10 00 
       00 00 01 00 
       F3 2A 04 3F 
       02 00       
0410A7 01 00 00 10 0440*  	dl 1, 16, 16, 256, fn_dg_0_40, 576
       00 00 10 00 
       00 00 01 00 
       07 2B 04 40 
       02 00       
0410B9 01 00 00 10 0441*  	dl 1, 16, 16, 256, fn_dg_0_41, 577
       00 00 10 00 
       00 00 01 00 
       1B 2B 04 41 
       02 00       
0410CB 01 00 00 10 0442*  	dl 1, 16, 16, 256, fn_dg_0_42, 578
       00 00 10 00 
       00 00 01 00 
       2F 2B 04 42 
       02 00       
0410DD 01 00 00 10 0443*  	dl 1, 16, 16, 256, fn_dg_0_43, 579
       00 00 10 00 
       00 00 01 00 
       43 2B 04 43 
       02 00       
0410EF 01 00 00 10 0444*  	dl 1, 16, 16, 256, fn_dg_1_00, 768
       00 00 10 00 
       00 00 01 00 
       57 2B 04 00 
       03 00       
041101 01 00 00 10 0445*  	dl 1, 16, 16, 256, fn_dg_1_01, 769
       00 00 10 00 
       00 00 01 00 
       6B 2B 04 01 
       03 00       
041113 01 00 00 10 0446*  	dl 1, 16, 16, 256, fn_dg_1_02, 770
       00 00 10 00 
       00 00 01 00 
       7F 2B 04 02 
       03 00       
041125 01 00 00 10 0447*  	dl 1, 16, 16, 256, fn_dg_1_03, 771
       00 00 10 00 
       00 00 01 00 
       93 2B 04 03 
       03 00       
041137 01 00 00 10 0448*  	dl 1, 16, 16, 256, fn_dg_1_04, 772
       00 00 10 00 
       00 00 01 00 
       A7 2B 04 04 
       03 00       
041149 01 00 00 10 0449*  	dl 1, 16, 16, 256, fn_dg_1_05, 773
       00 00 10 00 
       00 00 01 00 
       BB 2B 04 05 
       03 00       
04115B 01 00 00 10 0450*  	dl 1, 16, 16, 256, fn_dg_1_06, 774
       00 00 10 00 
       00 00 01 00 
       CF 2B 04 06 
       03 00       
04116D 01 00 00 10 0451*  	dl 1, 16, 16, 256, fn_dg_1_07, 775
       00 00 10 00 
       00 00 01 00 
       E3 2B 04 07 
       03 00       
04117F 01 00 00 10 0452*  	dl 1, 16, 16, 256, fn_dg_1_08, 776
       00 00 10 00 
       00 00 01 00 
       F7 2B 04 08 
       03 00       
041191 01 00 00 10 0453*  	dl 1, 16, 16, 256, fn_dg_1_09, 777
       00 00 10 00 
       00 00 01 00 
       0B 2C 04 09 
       03 00       
0411A3 01 00 00 10 0454*  	dl 1, 16, 16, 256, fn_dg_1_0A, 778
       00 00 10 00 
       00 00 01 00 
       1F 2C 04 0A 
       03 00       
0411B5 01 00 00 10 0455*  	dl 1, 16, 16, 256, fn_dg_1_0B, 779
       00 00 10 00 
       00 00 01 00 
       33 2C 04 0B 
       03 00       
0411C7 01 00 00 10 0456*  	dl 1, 16, 16, 256, fn_dg_1_0C, 780
       00 00 10 00 
       00 00 01 00 
       47 2C 04 0C 
       03 00       
0411D9 01 00 00 10 0457*  	dl 1, 16, 16, 256, fn_dg_1_0D, 781
       00 00 10 00 
       00 00 01 00 
       5B 2C 04 0D 
       03 00       
0411EB 01 00 00 10 0458*  	dl 1, 16, 16, 256, fn_dg_1_0E, 782
       00 00 10 00 
       00 00 01 00 
       6F 2C 04 0E 
       03 00       
0411FD 01 00 00 10 0459*  	dl 1, 16, 16, 256, fn_dg_1_0F, 783
       00 00 10 00 
       00 00 01 00 
       83 2C 04 0F 
       03 00       
04120F 01 00 00 10 0460*  	dl 1, 16, 16, 256, fn_dg_1_10, 784
       00 00 10 00 
       00 00 01 00 
       97 2C 04 10 
       03 00       
041221 01 00 00 10 0461*  	dl 1, 16, 16, 256, fn_dg_1_11, 785
       00 00 10 00 
       00 00 01 00 
       AB 2C 04 11 
       03 00       
041233 01 00 00 10 0462*  	dl 1, 16, 16, 256, fn_dg_1_12, 786
       00 00 10 00 
       00 00 01 00 
       BF 2C 04 12 
       03 00       
041245 01 00 00 10 0463*  	dl 1, 16, 16, 256, fn_dg_1_13, 787
       00 00 10 00 
       00 00 01 00 
       D3 2C 04 13 
       03 00       
041257 01 00 00 10 0464*  	dl 1, 16, 16, 256, fn_dg_1_14, 788
       00 00 10 00 
       00 00 01 00 
       E7 2C 04 14 
       03 00       
041269 01 00 00 10 0465*  	dl 1, 16, 16, 256, fn_dg_1_15, 789
       00 00 10 00 
       00 00 01 00 
       FB 2C 04 15 
       03 00       
04127B 01 00 00 10 0466*  	dl 1, 16, 16, 256, fn_dg_1_16, 790
       00 00 10 00 
       00 00 01 00 
       0F 2D 04 16 
       03 00       
04128D 01 00 00 10 0467*  	dl 1, 16, 16, 256, fn_dg_1_17, 791
       00 00 10 00 
       00 00 01 00 
       23 2D 04 17 
       03 00       
04129F 01 00 00 10 0468*  	dl 1, 16, 16, 256, fn_dg_1_18, 792
       00 00 10 00 
       00 00 01 00 
       37 2D 04 18 
       03 00       
0412B1 01 00 00 10 0469*  	dl 1, 16, 16, 256, fn_dg_1_19, 793
       00 00 10 00 
       00 00 01 00 
       4B 2D 04 19 
       03 00       
0412C3 01 00 00 10 0470*  	dl 1, 16, 16, 256, fn_dg_1_1A, 794
       00 00 10 00 
       00 00 01 00 
       5F 2D 04 1A 
       03 00       
0412D5 01 00 00 10 0471*  	dl 1, 16, 16, 256, fn_dg_1_1B, 795
       00 00 10 00 
       00 00 01 00 
       73 2D 04 1B 
       03 00       
0412E7 01 00 00 10 0472*  	dl 1, 16, 16, 256, fn_dg_1_1C, 796
       00 00 10 00 
       00 00 01 00 
       87 2D 04 1C 
       03 00       
0412F9 01 00 00 10 0473*  	dl 1, 16, 16, 256, fn_dg_1_1D, 797
       00 00 10 00 
       00 00 01 00 
       9B 2D 04 1D 
       03 00       
04130B 01 00 00 10 0474*  	dl 1, 16, 16, 256, fn_dg_1_1E, 798
       00 00 10 00 
       00 00 01 00 
       AF 2D 04 1E 
       03 00       
04131D 01 00 00 10 0475*  	dl 1, 16, 16, 256, fn_dg_1_1F, 799
       00 00 10 00 
       00 00 01 00 
       C3 2D 04 1F 
       03 00       
04132F 01 00 00 10 0476*  	dl 1, 16, 16, 256, fn_dg_1_20, 800
       00 00 10 00 
       00 00 01 00 
       D7 2D 04 20 
       03 00       
041341 01 00 00 10 0477*  	dl 1, 16, 16, 256, fn_dg_1_21, 801
       00 00 10 00 
       00 00 01 00 
       EB 2D 04 21 
       03 00       
041353 01 00 00 10 0478*  	dl 1, 16, 16, 256, fn_dg_1_22, 802
       00 00 10 00 
       00 00 01 00 
       FF 2D 04 22 
       03 00       
041365 01 00 00 10 0479*  	dl 1, 16, 16, 256, fn_dg_1_23, 803
       00 00 10 00 
       00 00 01 00 
       13 2E 04 23 
       03 00       
041377 01 00 00 10 0480*  	dl 1, 16, 16, 256, fn_dg_1_24, 804
       00 00 10 00 
       00 00 01 00 
       27 2E 04 24 
       03 00       
041389 01 00 00 10 0481*  	dl 1, 16, 16, 256, fn_dg_1_25, 805
       00 00 10 00 
       00 00 01 00 
       3B 2E 04 25 
       03 00       
04139B 01 00 00 10 0482*  	dl 1, 16, 16, 256, fn_dg_1_26, 806
       00 00 10 00 
       00 00 01 00 
       4F 2E 04 26 
       03 00       
0413AD 01 00 00 10 0483*  	dl 1, 16, 16, 256, fn_dg_1_27, 807
       00 00 10 00 
       00 00 01 00 
       63 2E 04 27 
       03 00       
0413BF 01 00 00 10 0484*  	dl 1, 16, 16, 256, fn_dg_1_28, 808
       00 00 10 00 
       00 00 01 00 
       77 2E 04 28 
       03 00       
0413D1 01 00 00 10 0485*  	dl 1, 16, 16, 256, fn_dg_1_29, 809
       00 00 10 00 
       00 00 01 00 
       8B 2E 04 29 
       03 00       
0413E3 01 00 00 10 0486*  	dl 1, 16, 16, 256, fn_dg_1_2A, 810
       00 00 10 00 
       00 00 01 00 
       9F 2E 04 2A 
       03 00       
0413F5 01 00 00 10 0487*  	dl 1, 16, 16, 256, fn_dg_1_2B, 811
       00 00 10 00 
       00 00 01 00 
       B3 2E 04 2B 
       03 00       
041407 01 00 00 10 0488*  	dl 1, 16, 16, 256, fn_dg_1_2C, 812
       00 00 10 00 
       00 00 01 00 
       C7 2E 04 2C 
       03 00       
041419 01 00 00 10 0489*  	dl 1, 16, 16, 256, fn_dg_1_2D, 813
       00 00 10 00 
       00 00 01 00 
       DB 2E 04 2D 
       03 00       
04142B 01 00 00 10 0490*  	dl 1, 16, 16, 256, fn_dg_1_2E, 814
       00 00 10 00 
       00 00 01 00 
       EF 2E 04 2E 
       03 00       
04143D 01 00 00 10 0491*  	dl 1, 16, 16, 256, fn_dg_2_00, 1024
       00 00 10 00 
       00 00 01 00 
       03 2F 04 00 
       04 00       
04144F 01 00 00 10 0492*  	dl 1, 16, 16, 256, fn_dg_2_01, 1025
       00 00 10 00 
       00 00 01 00 
       17 2F 04 01 
       04 00       
041461 01 00 00 10 0493*  	dl 1, 16, 16, 256, fn_dg_2_02, 1026
       00 00 10 00 
       00 00 01 00 
       2B 2F 04 02 
       04 00       
041473 01 00 00 10 0494*  	dl 1, 16, 16, 256, fn_dg_2_03, 1027
       00 00 10 00 
       00 00 01 00 
       3F 2F 04 03 
       04 00       
041485 01 00 00 10 0495*  	dl 1, 16, 16, 256, fn_dg_2_04, 1028
       00 00 10 00 
       00 00 01 00 
       53 2F 04 04 
       04 00       
041497 01 00 00 10 0496*  	dl 1, 16, 16, 256, fn_dg_2_05, 1029
       00 00 10 00 
       00 00 01 00 
       67 2F 04 05 
       04 00       
0414A9 01 00 00 10 0497*  	dl 1, 16, 16, 256, fn_dg_2_06, 1030
       00 00 10 00 
       00 00 01 00 
       7B 2F 04 06 
       04 00       
0414BB 01 00 00 10 0498*  	dl 1, 16, 16, 256, fn_dg_2_07, 1031
       00 00 10 00 
       00 00 01 00 
       8F 2F 04 07 
       04 00       
0414CD 01 00 00 10 0499*  	dl 1, 16, 16, 256, fn_dg_2_08, 1032
       00 00 10 00 
       00 00 01 00 
       A3 2F 04 08 
       04 00       
0414DF 01 00 00 10 0500*  	dl 1, 16, 16, 256, fn_dg_2_09, 1033
       00 00 10 00 
       00 00 01 00 
       B7 2F 04 09 
       04 00       
0414F1 01 00 00 10 0501*  	dl 1, 16, 16, 256, fn_dg_2_0A, 1034
       00 00 10 00 
       00 00 01 00 
       CB 2F 04 0A 
       04 00       
041503 01 00 00 10 0502*  	dl 1, 16, 16, 256, fn_dg_2_0B, 1035
       00 00 10 00 
       00 00 01 00 
       DF 2F 04 0B 
       04 00       
041515 01 00 00 10 0503*  	dl 1, 16, 16, 256, fn_dg_2_0C, 1036
       00 00 10 00 
       00 00 01 00 
       F3 2F 04 0C 
       04 00       
041527 01 00 00 10 0504*  	dl 1, 16, 16, 256, fn_dg_2_0D, 1037
       00 00 10 00 
       00 00 01 00 
       07 30 04 0D 
       04 00       
041539 01 00 00 10 0505*  	dl 1, 16, 16, 256, fn_dg_2_0E, 1038
       00 00 10 00 
       00 00 01 00 
       1B 30 04 0E 
       04 00       
04154B 01 00 00 10 0506*  	dl 1, 16, 16, 256, fn_dg_2_0F, 1039
       00 00 10 00 
       00 00 01 00 
       2F 30 04 0F 
       04 00       
04155D 01 00 00 10 0507*  	dl 1, 16, 16, 256, fn_dg_2_10, 1040
       00 00 10 00 
       00 00 01 00 
       43 30 04 10 
       04 00       
04156F 01 00 00 10 0508*  	dl 1, 16, 16, 256, fn_dg_2_11, 1041
       00 00 10 00 
       00 00 01 00 
       57 30 04 11 
       04 00       
041581 01 00 00 10 0509*  	dl 1, 16, 16, 256, fn_dg_2_12, 1042
       00 00 10 00 
       00 00 01 00 
       6B 30 04 12 
       04 00       
041593 01 00 00 10 0510*  	dl 1, 16, 16, 256, fn_dg_2_13, 1043
       00 00 10 00 
       00 00 01 00 
       7F 30 04 13 
       04 00       
0415A5 01 00 00 10 0511*  	dl 1, 16, 16, 256, fn_dg_2_14, 1044
       00 00 10 00 
       00 00 01 00 
       93 30 04 14 
       04 00       
0415B7 01 00 00 10 0512*  	dl 1, 16, 16, 256, fn_dg_2_15, 1045
       00 00 10 00 
       00 00 01 00 
       A7 30 04 15 
       04 00       
0415C9 01 00 00 10 0513*  	dl 1, 16, 16, 256, fn_dg_2_16, 1046
       00 00 10 00 
       00 00 01 00 
       BB 30 04 16 
       04 00       
0415DB 01 00 00 10 0514*  	dl 1, 16, 16, 256, fn_dg_2_17, 1047
       00 00 10 00 
       00 00 01 00 
       CF 30 04 17 
       04 00       
0415ED 01 00 00 10 0515*  	dl 1, 16, 16, 256, fn_dg_2_18, 1048
       00 00 10 00 
       00 00 01 00 
       E3 30 04 18 
       04 00       
0415FF 01 00 00 10 0516*  	dl 1, 16, 16, 256, fn_dg_2_19, 1049
       00 00 10 00 
       00 00 01 00 
       F7 30 04 19 
       04 00       
041611 01 00 00 10 0517*  	dl 1, 16, 16, 256, fn_dg_2_1A, 1050
       00 00 10 00 
       00 00 01 00 
       0B 31 04 1A 
       04 00       
041623 01 00 00 10 0518*  	dl 1, 16, 16, 256, fn_dg_2_1B, 1051
       00 00 10 00 
       00 00 01 00 
       1F 31 04 1B 
       04 00       
041635 01 00 00 10 0519*  	dl 1, 16, 16, 256, fn_dg_2_1C, 1052
       00 00 10 00 
       00 00 01 00 
       33 31 04 1C 
       04 00       
041647 01 00 00 10 0520*  	dl 1, 16, 16, 256, fn_dg_2_1D, 1053
       00 00 10 00 
       00 00 01 00 
       47 31 04 1D 
       04 00       
041659 01 00 00 10 0521*  	dl 1, 16, 16, 256, fn_dg_2_1E, 1054
       00 00 10 00 
       00 00 01 00 
       5B 31 04 1E 
       04 00       
04166B 01 00 00 10 0522*  	dl 1, 16, 16, 256, fn_dg_2_1F, 1055
       00 00 10 00 
       00 00 01 00 
       6F 31 04 1F 
       04 00       
04167D 01 00 00 10 0523*  	dl 1, 16, 16, 256, fn_dg_2_20, 1056
       00 00 10 00 
       00 00 01 00 
       83 31 04 20 
       04 00       
04168F 01 00 00 10 0524*  	dl 1, 16, 16, 256, fn_dg_2_21, 1057
       00 00 10 00 
       00 00 01 00 
       97 31 04 21 
       04 00       
0416A1 01 00 00 10 0525*  	dl 1, 16, 16, 256, fn_dg_2_22, 1058
       00 00 10 00 
       00 00 01 00 
       AB 31 04 22 
       04 00       
0416B3 01 00 00 10 0526*  	dl 1, 16, 16, 256, fn_dg_2_23, 1059
       00 00 10 00 
       00 00 01 00 
       BF 31 04 23 
       04 00       
0416C5 01 00 00 10 0527*  	dl 1, 16, 16, 256, fn_dg_2_24, 1060
       00 00 10 00 
       00 00 01 00 
       D3 31 04 24 
       04 00       
0416D7 01 00 00 10 0528*  	dl 1, 16, 16, 256, fn_dg_2_25, 1061
       00 00 10 00 
       00 00 01 00 
       E7 31 04 25 
       04 00       
0416E9 01 00 00 10 0529*  	dl 1, 16, 16, 256, fn_dg_2_26, 1062
       00 00 10 00 
       00 00 01 00 
       FB 31 04 26 
       04 00       
0416FB 01 00 00 10 0530*  	dl 1, 16, 16, 256, fn_dg_2_27, 1063
       00 00 10 00 
       00 00 01 00 
       0F 32 04 27 
       04 00       
04170D 01 00 00 10 0531*  	dl 1, 16, 16, 256, fn_dg_2_28, 1064
       00 00 10 00 
       00 00 01 00 
       23 32 04 28 
       04 00       
04171F 01 00 00 10 0532*  	dl 1, 16, 16, 256, fn_dg_2_29, 1065
       00 00 10 00 
       00 00 01 00 
       37 32 04 29 
       04 00       
041731 01 00 00 10 0533*  	dl 1, 16, 16, 256, fn_dg_2_2A, 1066
       00 00 10 00 
       00 00 01 00 
       4B 32 04 2A 
       04 00       
041743 01 00 00 10 0534*  	dl 1, 16, 16, 256, fn_dg_2_2B, 1067
       00 00 10 00 
       00 00 01 00 
       5F 32 04 2B 
       04 00       
041755 01 00 00 10 0535*  	dl 1, 16, 16, 256, fn_dg_2_2C, 1068
       00 00 10 00 
       00 00 01 00 
       73 32 04 2C 
       04 00       
041767 01 00 00 10 0536*  	dl 1, 16, 16, 256, fn_dg_2_2D, 1069
       00 00 10 00 
       00 00 01 00 
       87 32 04 2D 
       04 00       
041779 01 00 00 10 0537*  	dl 1, 16, 16, 256, fn_dg_2_2E, 1070
       00 00 10 00 
       00 00 01 00 
       9B 32 04 2E 
       04 00       
04178B 01 00 00 10 0538*  	dl 1, 16, 16, 256, fn_dg_2_2F, 1071
       00 00 10 00 
       00 00 01 00 
       AF 32 04 2F 
       04 00       
04179D 01 00 00 10 0539*  	dl 1, 16, 16, 256, fn_dg_2_30, 1072
       00 00 10 00 
       00 00 01 00 
       C3 32 04 30 
       04 00       
0417AF 01 00 00 10 0540*  	dl 1, 16, 16, 256, fn_dg_2_31, 1073
       00 00 10 00 
       00 00 01 00 
       D7 32 04 31 
       04 00       
0417C1 01 00 00 10 0541*  	dl 1, 16, 16, 256, fn_dg_2_32, 1074
       00 00 10 00 
       00 00 01 00 
       EB 32 04 32 
       04 00       
0417D3 01 00 00 10 0542*  	dl 1, 16, 16, 256, fn_dg_2_33, 1075
       00 00 10 00 
       00 00 01 00 
       FF 32 04 33 
       04 00       
0417E5 01 00 00 10 0543*  	dl 1, 16, 16, 256, fn_dg_2_34, 1076
       00 00 10 00 
       00 00 01 00 
       13 33 04 34 
       04 00       
0417F7 01 00 00 10 0544*  	dl 1, 16, 16, 256, fn_dg_2_35, 1077
       00 00 10 00 
       00 00 01 00 
       27 33 04 35 
       04 00       
041809 01 00 00 10 0545*  	dl 1, 16, 16, 256, fn_dg_2_36, 1078
       00 00 10 00 
       00 00 01 00 
       3B 33 04 36 
       04 00       
04181B 01 00 00 10 0546*  	dl 1, 16, 16, 256, fn_dg_2_37, 1079
       00 00 10 00 
       00 00 01 00 
       4F 33 04 37 
       04 00       
04182D 01 00 00 10 0547*  	dl 1, 16, 16, 256, fn_dg_2_38, 1080
       00 00 10 00 
       00 00 01 00 
       63 33 04 38 
       04 00       
04183F 01 00 00 10 0548*  	dl 1, 16, 16, 256, fn_dg_2_39, 1081
       00 00 10 00 
       00 00 01 00 
       77 33 04 39 
       04 00       
041851 01 00 00 10 0549*  	dl 1, 16, 16, 256, fn_dg_2_3A, 1082
       00 00 10 00 
       00 00 01 00 
       8B 33 04 3A 
       04 00       
041863 01 00 00 10 0550*  	dl 1, 16, 16, 256, fn_dg_2_3B, 1083
       00 00 10 00 
       00 00 01 00 
       9F 33 04 3B 
       04 00       
041875 01 00 00 10 0551*  	dl 1, 16, 16, 256, fn_dg_2_3C, 1084
       00 00 10 00 
       00 00 01 00 
       B3 33 04 3C 
       04 00       
041887 01 00 00 10 0552*  	dl 1, 16, 16, 256, fn_dg_2_3D, 1085
       00 00 10 00 
       00 00 01 00 
       C7 33 04 3D 
       04 00       
041899 01 00 00 10 0553*  	dl 1, 16, 16, 256, fn_dg_2_3E, 1086
       00 00 10 00 
       00 00 01 00 
       DB 33 04 3E 
       04 00       
0418AB 01 00 00 10 0554*  	dl 1, 16, 16, 256, fn_dg_2_3F, 1087
       00 00 10 00 
       00 00 01 00 
       EF 33 04 3F 
       04 00       
0418BD 01 00 00 10 0555*  	dl 1, 16, 16, 256, fn_dg_2_40, 1088
       00 00 10 00 
       00 00 01 00 
       03 34 04 40 
       04 00       
0418CF 01 00 00 10 0556*  	dl 1, 16, 16, 256, fn_dg_3_00, 1280
       00 00 10 00 
       00 00 01 00 
       17 34 04 00 
       05 00       
0418E1 01 00 00 10 0557*  	dl 1, 16, 16, 256, fn_dg_3_01, 1281
       00 00 10 00 
       00 00 01 00 
       2B 34 04 01 
       05 00       
0418F3 01 00 00 10 0558*  	dl 1, 16, 16, 256, fn_dg_3_02, 1282
       00 00 10 00 
       00 00 01 00 
       3F 34 04 02 
       05 00       
041905 01 00 00 10 0559*  	dl 1, 16, 16, 256, fn_dg_3_03, 1283
       00 00 10 00 
       00 00 01 00 
       53 34 04 03 
       05 00       
041917 01 00 00 10 0560*  	dl 1, 16, 16, 256, fn_dg_3_04, 1284
       00 00 10 00 
       00 00 01 00 
       67 34 04 04 
       05 00       
041929 01 00 00 10 0561*  	dl 1, 16, 16, 256, fn_dg_3_05, 1285
       00 00 10 00 
       00 00 01 00 
       7B 34 04 05 
       05 00       
04193B 01 00 00 10 0562*  	dl 1, 16, 16, 256, fn_dg_3_06, 1286
       00 00 10 00 
       00 00 01 00 
       8F 34 04 06 
       05 00       
04194D 01 00 00 10 0563*  	dl 1, 16, 16, 256, fn_dg_3_07, 1287
       00 00 10 00 
       00 00 01 00 
       A3 34 04 07 
       05 00       
04195F 01 00 00 10 0564*  	dl 1, 16, 16, 256, fn_dg_3_08, 1288
       00 00 10 00 
       00 00 01 00 
       B7 34 04 08 
       05 00       
041971 01 00 00 10 0565*  	dl 1, 16, 16, 256, fn_dg_3_09, 1289
       00 00 10 00 
       00 00 01 00 
       CB 34 04 09 
       05 00       
041983 01 00 00 10 0566*  	dl 1, 16, 16, 256, fn_dg_3_0A, 1290
       00 00 10 00 
       00 00 01 00 
       DF 34 04 0A 
       05 00       
041995 01 00 00 10 0567*  	dl 1, 16, 16, 256, fn_dg_3_0B, 1291
       00 00 10 00 
       00 00 01 00 
       F3 34 04 0B 
       05 00       
0419A7 01 00 00 10 0568*  	dl 1, 16, 16, 256, fn_dg_3_0C, 1292
       00 00 10 00 
       00 00 01 00 
       07 35 04 0C 
       05 00       
0419B9 01 00 00 10 0569*  	dl 1, 16, 16, 256, fn_dg_3_0D, 1293
       00 00 10 00 
       00 00 01 00 
       1B 35 04 0D 
       05 00       
0419CB 01 00 00 10 0570*  	dl 1, 16, 16, 256, fn_dg_3_0E, 1294
       00 00 10 00 
       00 00 01 00 
       2F 35 04 0E 
       05 00       
0419DD 01 00 00 10 0571*  	dl 1, 16, 16, 256, fn_dg_3_0F, 1295
       00 00 10 00 
       00 00 01 00 
       43 35 04 0F 
       05 00       
0419EF 01 00 00 10 0572*  	dl 1, 16, 16, 256, fn_dg_3_10, 1296
       00 00 10 00 
       00 00 01 00 
       57 35 04 10 
       05 00       
041A01 01 00 00 10 0573*  	dl 1, 16, 16, 256, fn_dg_3_11, 1297
       00 00 10 00 
       00 00 01 00 
       6B 35 04 11 
       05 00       
041A13 01 00 00 10 0574*  	dl 1, 16, 16, 256, fn_dg_3_12, 1298
       00 00 10 00 
       00 00 01 00 
       7F 35 04 12 
       05 00       
041A25 01 00 00 10 0575*  	dl 1, 16, 16, 256, fn_dg_3_13, 1299
       00 00 10 00 
       00 00 01 00 
       93 35 04 13 
       05 00       
041A37 01 00 00 10 0576*  	dl 1, 16, 16, 256, fn_dg_3_14, 1300
       00 00 10 00 
       00 00 01 00 
       A7 35 04 14 
       05 00       
041A49 01 00 00 10 0577*  	dl 1, 16, 16, 256, fn_dg_3_15, 1301
       00 00 10 00 
       00 00 01 00 
       BB 35 04 15 
       05 00       
041A5B 01 00 00 10 0578*  	dl 1, 16, 16, 256, fn_dg_3_16, 1302
       00 00 10 00 
       00 00 01 00 
       CF 35 04 16 
       05 00       
041A6D 01 00 00 10 0579*  	dl 1, 16, 16, 256, fn_dg_3_17, 1303
       00 00 10 00 
       00 00 01 00 
       E3 35 04 17 
       05 00       
041A7F 01 00 00 10 0580*  	dl 1, 16, 16, 256, fn_dg_3_18, 1304
       00 00 10 00 
       00 00 01 00 
       F7 35 04 18 
       05 00       
041A91 01 00 00 10 0581*  	dl 1, 16, 16, 256, fn_dg_3_19, 1305
       00 00 10 00 
       00 00 01 00 
       0B 36 04 19 
       05 00       
041AA3 01 00 00 10 0582*  	dl 1, 16, 16, 256, fn_dg_3_1A, 1306
       00 00 10 00 
       00 00 01 00 
       1F 36 04 1A 
       05 00       
041AB5 01 00 00 10 0583*  	dl 1, 16, 16, 256, fn_dg_3_1B, 1307
       00 00 10 00 
       00 00 01 00 
       33 36 04 1B 
       05 00       
041AC7 01 00 00 10 0584*  	dl 1, 16, 16, 256, fn_dg_3_1C, 1308
       00 00 10 00 
       00 00 01 00 
       47 36 04 1C 
       05 00       
041AD9 01 00 00 10 0585*  	dl 1, 16, 16, 256, fn_dg_3_1D, 1309
       00 00 10 00 
       00 00 01 00 
       5B 36 04 1D 
       05 00       
041AEB 01 00 00 10 0586*  	dl 1, 16, 16, 256, fn_dg_3_1E, 1310
       00 00 10 00 
       00 00 01 00 
       6F 36 04 1E 
       05 00       
041AFD 01 00 00 10 0587*  	dl 1, 16, 16, 256, fn_dg_3_1F, 1311
       00 00 10 00 
       00 00 01 00 
       83 36 04 1F 
       05 00       
041B0F 01 00 00 10 0588*  	dl 1, 16, 16, 256, fn_dg_3_20, 1312
       00 00 10 00 
       00 00 01 00 
       97 36 04 20 
       05 00       
041B21 01 00 00 10 0589*  	dl 1, 16, 16, 256, fn_dg_3_21, 1313
       00 00 10 00 
       00 00 01 00 
       AB 36 04 21 
       05 00       
041B33 01 00 00 10 0590*  	dl 1, 16, 16, 256, fn_dg_3_22, 1314
       00 00 10 00 
       00 00 01 00 
       BF 36 04 22 
       05 00       
041B45 01 00 00 10 0591*  	dl 1, 16, 16, 256, fn_dg_3_23, 1315
       00 00 10 00 
       00 00 01 00 
       D3 36 04 23 
       05 00       
041B57 01 00 00 10 0592*  	dl 1, 16, 16, 256, fn_dg_3_24, 1316
       00 00 10 00 
       00 00 01 00 
       E7 36 04 24 
       05 00       
041B69 01 00 00 10 0593*  	dl 1, 16, 16, 256, fn_dg_3_25, 1317
       00 00 10 00 
       00 00 01 00 
       FB 36 04 25 
       05 00       
041B7B 01 00 00 10 0594*  	dl 1, 16, 16, 256, fn_dg_3_26, 1318
       00 00 10 00 
       00 00 01 00 
       0F 37 04 26 
       05 00       
041B8D 01 00 00 10 0595*  	dl 1, 16, 16, 256, fn_dg_3_27, 1319
       00 00 10 00 
       00 00 01 00 
       23 37 04 27 
       05 00       
041B9F 01 00 00 10 0596*  	dl 1, 16, 16, 256, fn_dg_3_28, 1320
       00 00 10 00 
       00 00 01 00 
       37 37 04 28 
       05 00       
041BB1 01 00 00 10 0597*  	dl 1, 16, 16, 256, fn_dg_3_29, 1321
       00 00 10 00 
       00 00 01 00 
       4B 37 04 29 
       05 00       
041BC3 01 00 00 10 0598*  	dl 1, 16, 16, 256, fn_dg_3_2A, 1322
       00 00 10 00 
       00 00 01 00 
       5F 37 04 2A 
       05 00       
041BD5 01 00 00 10 0599*  	dl 1, 16, 16, 256, fn_dg_3_2B, 1323
       00 00 10 00 
       00 00 01 00 
       73 37 04 2B 
       05 00       
041BE7 01 00 00 10 0600*  	dl 1, 16, 16, 256, fn_dg_3_2C, 1324
       00 00 10 00 
       00 00 01 00 
       87 37 04 2C 
       05 00       
041BF9 01 00 00 10 0601*  	dl 1, 16, 16, 256, fn_dg_3_2D, 1325
       00 00 10 00 
       00 00 01 00 
       9B 37 04 2D 
       05 00       
041C0B 01 00 00 10 0602*  	dl 1, 16, 16, 256, fn_dg_3_2E, 1326
       00 00 10 00 
       00 00 01 00 
       AF 37 04 2E 
       05 00       
041C1D 01 00 00 10 0603*  	dl 1, 16, 16, 256, fn_dg_3_2F, 1327
       00 00 10 00 
       00 00 01 00 
       C3 37 04 2F 
       05 00       
041C2F 01 00 00 10 0604*  	dl 1, 16, 16, 256, fn_dg_3_30, 1328
       00 00 10 00 
       00 00 01 00 
       D7 37 04 30 
       05 00       
041C41 01 00 00 10 0605*  	dl 1, 16, 16, 256, fn_dg_3_31, 1329
       00 00 10 00 
       00 00 01 00 
       EB 37 04 31 
       05 00       
041C53 01 00 00 10 0606*  	dl 1, 16, 16, 256, fn_dg_3_32, 1330
       00 00 10 00 
       00 00 01 00 
       FF 37 04 32 
       05 00       
041C65 01 00 00 10 0607*  	dl 1, 16, 16, 256, fn_dg_3_33, 1331
       00 00 10 00 
       00 00 01 00 
       13 38 04 33 
       05 00       
041C77 01 00 00 10 0608*  	dl 1, 16, 16, 256, fn_dg_3_34, 1332
       00 00 10 00 
       00 00 01 00 
       27 38 04 34 
       05 00       
041C89 01 00 00 10 0609*  	dl 1, 16, 16, 256, fn_dg_4_00, 1536
       00 00 10 00 
       00 00 01 00 
       3B 38 04 00 
       06 00       
041C9B 01 00 00 10 0610*  	dl 1, 16, 16, 256, fn_dg_4_01, 1537
       00 00 10 00 
       00 00 01 00 
       4F 38 04 01 
       06 00       
041CAD 01 00 00 10 0611*  	dl 1, 16, 16, 256, fn_dg_4_02, 1538
       00 00 10 00 
       00 00 01 00 
       63 38 04 02 
       06 00       
041CBF 01 00 00 10 0612*  	dl 1, 16, 16, 256, fn_dg_4_03, 1539
       00 00 10 00 
       00 00 01 00 
       77 38 04 03 
       06 00       
041CD1 01 00 00 10 0613*  	dl 1, 16, 16, 256, fn_dg_4_04, 1540
       00 00 10 00 
       00 00 01 00 
       8B 38 04 04 
       06 00       
041CE3 01 00 00 10 0614*  	dl 1, 16, 16, 256, fn_dg_4_05, 1541
       00 00 10 00 
       00 00 01 00 
       9F 38 04 05 
       06 00       
041CF5 01 00 00 10 0615*  	dl 1, 16, 16, 256, fn_dg_4_06, 1542
       00 00 10 00 
       00 00 01 00 
       B3 38 04 06 
       06 00       
041D07 01 00 00 10 0616*  	dl 1, 16, 16, 256, fn_dg_4_07, 1543
       00 00 10 00 
       00 00 01 00 
       C7 38 04 07 
       06 00       
041D19 01 00 00 10 0617*  	dl 1, 16, 16, 256, fn_dg_4_08, 1544
       00 00 10 00 
       00 00 01 00 
       DB 38 04 08 
       06 00       
041D2B 01 00 00 10 0618*  	dl 1, 16, 16, 256, fn_dg_4_09, 1545
       00 00 10 00 
       00 00 01 00 
       EF 38 04 09 
       06 00       
041D3D 01 00 00 10 0619*  	dl 1, 16, 16, 256, fn_dg_4_0A, 1546
       00 00 10 00 
       00 00 01 00 
       03 39 04 0A 
       06 00       
041D4F 01 00 00 10 0620*  	dl 1, 16, 16, 256, fn_dg_4_0B, 1547
       00 00 10 00 
       00 00 01 00 
       17 39 04 0B 
       06 00       
041D61 01 00 00 10 0621*  	dl 1, 16, 16, 256, fn_dg_4_0C, 1548
       00 00 10 00 
       00 00 01 00 
       2B 39 04 0C 
       06 00       
041D73 01 00 00 10 0622*  	dl 1, 16, 16, 256, fn_dg_4_0D, 1549
       00 00 10 00 
       00 00 01 00 
       3F 39 04 0D 
       06 00       
041D85 01 00 00 10 0623*  	dl 1, 16, 16, 256, fn_dg_4_0E, 1550
       00 00 10 00 
       00 00 01 00 
       53 39 04 0E 
       06 00       
041D97 01 00 00 10 0624*  	dl 1, 16, 16, 256, fn_dg_4_0F, 1551
       00 00 10 00 
       00 00 01 00 
       67 39 04 0F 
       06 00       
041DA9 01 00 00 10 0625*  	dl 1, 16, 16, 256, fn_dg_4_10, 1552
       00 00 10 00 
       00 00 01 00 
       7B 39 04 10 
       06 00       
041DBB 01 00 00 10 0626*  	dl 1, 16, 16, 256, fn_dg_4_11, 1553
       00 00 10 00 
       00 00 01 00 
       8F 39 04 11 
       06 00       
041DCD 01 00 00 10 0627*  	dl 1, 16, 16, 256, fn_dg_4_12, 1554
       00 00 10 00 
       00 00 01 00 
       A3 39 04 12 
       06 00       
041DDF 01 00 00 10 0628*  	dl 1, 16, 16, 256, fn_dg_4_13, 1555
       00 00 10 00 
       00 00 01 00 
       B7 39 04 13 
       06 00       
041DF1 01 00 00 10 0629*  	dl 1, 16, 16, 256, fn_dg_4_14, 1556
       00 00 10 00 
       00 00 01 00 
       CB 39 04 14 
       06 00       
041E03 01 00 00 10 0630*  	dl 1, 16, 16, 256, fn_dg_4_15, 1557
       00 00 10 00 
       00 00 01 00 
       DF 39 04 15 
       06 00       
041E15 01 00 00 10 0631*  	dl 1, 16, 16, 256, fn_dg_4_16, 1558
       00 00 10 00 
       00 00 01 00 
       F3 39 04 16 
       06 00       
041E27 01 00 00 10 0632*  	dl 1, 16, 16, 256, fn_dg_4_17, 1559
       00 00 10 00 
       00 00 01 00 
       07 3A 04 17 
       06 00       
041E39 01 00 00 10 0633*  	dl 1, 16, 16, 256, fn_dg_4_18, 1560
       00 00 10 00 
       00 00 01 00 
       1B 3A 04 18 
       06 00       
041E4B 01 00 00 10 0634*  	dl 1, 16, 16, 256, fn_dg_4_19, 1561
       00 00 10 00 
       00 00 01 00 
       2F 3A 04 19 
       06 00       
041E5D 01 00 00 10 0635*  	dl 1, 16, 16, 256, fn_dg_4_1A, 1562
       00 00 10 00 
       00 00 01 00 
       43 3A 04 1A 
       06 00       
041E6F 01 00 00 10 0636*  	dl 1, 16, 16, 256, fn_dg_4_1B, 1563
       00 00 10 00 
       00 00 01 00 
       57 3A 04 1B 
       06 00       
041E81 01 00 00 10 0637*  	dl 1, 16, 16, 256, fn_dg_4_1C, 1564
       00 00 10 00 
       00 00 01 00 
       6B 3A 04 1C 
       06 00       
041E93 01 00 00 10 0638*  	dl 1, 16, 16, 256, fn_dg_4_1D, 1565
       00 00 10 00 
       00 00 01 00 
       7F 3A 04 1D 
       06 00       
041EA5 01 00 00 10 0639*  	dl 1, 16, 16, 256, fn_dg_4_1E, 1566
       00 00 10 00 
       00 00 01 00 
       93 3A 04 1E 
       06 00       
041EB7 01 00 00 10 0640*  	dl 1, 16, 16, 256, fn_dg_4_1F, 1567
       00 00 10 00 
       00 00 01 00 
       A7 3A 04 1F 
       06 00       
041EC9 01 00 00 10 0641*  	dl 1, 16, 16, 256, fn_dg_4_20, 1568
       00 00 10 00 
       00 00 01 00 
       BB 3A 04 20 
       06 00       
041EDB 01 00 00 10 0642*  	dl 1, 16, 16, 256, fn_dg_4_21, 1569
       00 00 10 00 
       00 00 01 00 
       CF 3A 04 21 
       06 00       
041EED 01 00 00 10 0643*  	dl 1, 16, 16, 256, fn_dg_4_22, 1570
       00 00 10 00 
       00 00 01 00 
       E3 3A 04 22 
       06 00       
041EFF 01 00 00 10 0644*  	dl 1, 16, 16, 256, fn_dg_4_23, 1571
       00 00 10 00 
       00 00 01 00 
       F7 3A 04 23 
       06 00       
041F11 01 00 00 10 0645*  	dl 1, 16, 16, 256, fn_dg_4_24, 1572
       00 00 10 00 
       00 00 01 00 
       0B 3B 04 24 
       06 00       
041F23 01 00 00 10 0646*  	dl 1, 16, 16, 256, fn_dg_4_25, 1573
       00 00 10 00 
       00 00 01 00 
       1F 3B 04 25 
       06 00       
041F35 01 00 00 10 0647*  	dl 1, 16, 16, 256, fn_dg_4_26, 1574
       00 00 10 00 
       00 00 01 00 
       33 3B 04 26 
       06 00       
041F47 01 00 00 10 0648*  	dl 1, 16, 16, 256, fn_dg_4_27, 1575
       00 00 10 00 
       00 00 01 00 
       47 3B 04 27 
       06 00       
041F59 01 00 00 10 0649*  	dl 1, 16, 16, 256, fn_dg_4_28, 1576
       00 00 10 00 
       00 00 01 00 
       5B 3B 04 28 
       06 00       
041F6B 01 00 00 10 0650*  	dl 1, 16, 16, 256, fn_dg_4_29, 1577
       00 00 10 00 
       00 00 01 00 
       6F 3B 04 29 
       06 00       
041F7D 01 00 00 10 0651*  	dl 1, 16, 16, 256, fn_dg_4_2A, 1578
       00 00 10 00 
       00 00 01 00 
       83 3B 04 2A 
       06 00       
041F8F 01 00 00 10 0652*  	dl 1, 16, 16, 256, fn_dg_4_2B, 1579
       00 00 10 00 
       00 00 01 00 
       97 3B 04 2B 
       06 00       
041FA1 01 00 00 10 0653*  	dl 1, 16, 16, 256, fn_dg_4_2C, 1580
       00 00 10 00 
       00 00 01 00 
       AB 3B 04 2C 
       06 00       
041FB3 01 00 00 10 0654*  	dl 1, 16, 16, 256, fn_dg_4_2D, 1581
       00 00 10 00 
       00 00 01 00 
       BF 3B 04 2D 
       06 00       
041FC5 01 00 00 10 0655*  	dl 1, 16, 16, 256, fn_dg_4_2E, 1582
       00 00 10 00 
       00 00 01 00 
       D3 3B 04 2E 
       06 00       
041FD7 01 00 00 10 0656*  	dl 1, 16, 16, 256, fn_dg_4_2F, 1583
       00 00 10 00 
       00 00 01 00 
       E7 3B 04 2F 
       06 00       
041FE9 01 00 00 10 0657*  	dl 1, 16, 16, 256, fn_dg_4_30, 1584
       00 00 10 00 
       00 00 01 00 
       FB 3B 04 30 
       06 00       
041FFB 01 00 00 10 0658*  	dl 1, 16, 16, 256, fn_dg_4_31, 1585
       00 00 10 00 
       00 00 01 00 
       0F 3C 04 31 
       06 00       
04200D 01 00 00 10 0659*  	dl 1, 16, 16, 256, fn_dg_5_00, 1792
       00 00 10 00 
       00 00 01 00 
       23 3C 04 00 
       07 00       
04201F 01 00 00 10 0660*  	dl 1, 16, 16, 256, fn_dg_5_01, 1793
       00 00 10 00 
       00 00 01 00 
       37 3C 04 01 
       07 00       
042031 01 00 00 10 0661*  	dl 1, 16, 16, 256, fn_dg_5_02, 1794
       00 00 10 00 
       00 00 01 00 
       4B 3C 04 02 
       07 00       
042043 01 00 00 10 0662*  	dl 1, 16, 16, 256, fn_dg_5_03, 1795
       00 00 10 00 
       00 00 01 00 
       5F 3C 04 03 
       07 00       
042055 01 00 00 10 0663*  	dl 1, 16, 16, 256, fn_dg_5_04, 1796
       00 00 10 00 
       00 00 01 00 
       73 3C 04 04 
       07 00       
042067 01 00 00 10 0664*  	dl 1, 16, 16, 256, fn_dg_5_05, 1797
       00 00 10 00 
       00 00 01 00 
       87 3C 04 05 
       07 00       
042079 01 00 00 10 0665*  	dl 1, 16, 16, 256, fn_dg_5_06, 1798
       00 00 10 00 
       00 00 01 00 
       9B 3C 04 06 
       07 00       
04208B 01 00 00 10 0666*  	dl 1, 16, 16, 256, fn_dg_5_07, 1799
       00 00 10 00 
       00 00 01 00 
       AF 3C 04 07 
       07 00       
04209D 01 00 00 10 0667*  	dl 1, 16, 16, 256, fn_dg_5_08, 1800
       00 00 10 00 
       00 00 01 00 
       C3 3C 04 08 
       07 00       
0420AF 01 00 00 10 0668*  	dl 1, 16, 16, 256, fn_dg_5_09, 1801
       00 00 10 00 
       00 00 01 00 
       D7 3C 04 09 
       07 00       
0420C1 01 00 00 10 0669*  	dl 1, 16, 16, 256, fn_dg_5_0A, 1802
       00 00 10 00 
       00 00 01 00 
       EB 3C 04 0A 
       07 00       
0420D3 01 00 00 10 0670*  	dl 1, 16, 16, 256, fn_dg_5_0B, 1803
       00 00 10 00 
       00 00 01 00 
       FF 3C 04 0B 
       07 00       
0420E5 01 00 00 10 0671*  	dl 1, 16, 16, 256, fn_dg_5_0C, 1804
       00 00 10 00 
       00 00 01 00 
       13 3D 04 0C 
       07 00       
0420F7 01 00 00 10 0672*  	dl 1, 16, 16, 256, fn_dg_5_0D, 1805
       00 00 10 00 
       00 00 01 00 
       27 3D 04 0D 
       07 00       
042109 01 00 00 10 0673*  	dl 1, 16, 16, 256, fn_dg_5_0E, 1806
       00 00 10 00 
       00 00 01 00 
       3B 3D 04 0E 
       07 00       
04211B 01 00 00 10 0674*  	dl 1, 16, 16, 256, fn_dg_5_0F, 1807
       00 00 10 00 
       00 00 01 00 
       4F 3D 04 0F 
       07 00       
04212D 01 00 00 10 0675*  	dl 1, 16, 16, 256, fn_dg_5_10, 1808
       00 00 10 00 
       00 00 01 00 
       63 3D 04 10 
       07 00       
04213F 01 00 00 10 0676*  	dl 1, 16, 16, 256, fn_dg_5_11, 1809
       00 00 10 00 
       00 00 01 00 
       77 3D 04 11 
       07 00       
042151 01 00 00 10 0677*  	dl 1, 16, 16, 256, fn_dg_5_12, 1810
       00 00 10 00 
       00 00 01 00 
       8B 3D 04 12 
       07 00       
042163 01 00 00 10 0678*  	dl 1, 16, 16, 256, fn_dg_5_13, 1811
       00 00 10 00 
       00 00 01 00 
       9F 3D 04 13 
       07 00       
042175 01 00 00 10 0679*  	dl 1, 16, 16, 256, fn_dg_5_14, 1812
       00 00 10 00 
       00 00 01 00 
       B3 3D 04 14 
       07 00       
042187 01 00 00 10 0680*  	dl 1, 16, 16, 256, fn_dg_5_15, 1813
       00 00 10 00 
       00 00 01 00 
       C7 3D 04 15 
       07 00       
042199 01 00 00 10 0681*  	dl 1, 16, 16, 256, fn_dg_5_16, 1814
       00 00 10 00 
       00 00 01 00 
       DB 3D 04 16 
       07 00       
0421AB 01 00 00 10 0682*  	dl 1, 16, 16, 256, fn_dg_5_17, 1815
       00 00 10 00 
       00 00 01 00 
       EF 3D 04 17 
       07 00       
0421BD 01 00 00 10 0683*  	dl 1, 16, 16, 256, fn_dg_5_18, 1816
       00 00 10 00 
       00 00 01 00 
       03 3E 04 18 
       07 00       
0421CF 01 00 00 10 0684*  	dl 1, 16, 16, 256, fn_dg_5_19, 1817
       00 00 10 00 
       00 00 01 00 
       17 3E 04 19 
       07 00       
0421E1 01 00 00 10 0685*  	dl 1, 16, 16, 256, fn_dg_5_1A, 1818
       00 00 10 00 
       00 00 01 00 
       2B 3E 04 1A 
       07 00       
0421F3 01 00 00 10 0686*  	dl 1, 16, 16, 256, fn_dg_5_1B, 1819
       00 00 10 00 
       00 00 01 00 
       3F 3E 04 1B 
       07 00       
042205 01 00 00 10 0687*  	dl 1, 16, 16, 256, fn_dg_5_1C, 1820
       00 00 10 00 
       00 00 01 00 
       53 3E 04 1C 
       07 00       
042217 01 00 00 10 0688*  	dl 1, 16, 16, 256, fn_dg_5_1D, 1821
       00 00 10 00 
       00 00 01 00 
       67 3E 04 1D 
       07 00       
042229 01 00 00 10 0689*  	dl 1, 16, 16, 256, fn_dg_5_1E, 1822
       00 00 10 00 
       00 00 01 00 
       7B 3E 04 1E 
       07 00       
04223B 01 00 00 10 0690*  	dl 1, 16, 16, 256, fn_dg_5_1F, 1823
       00 00 10 00 
       00 00 01 00 
       8F 3E 04 1F 
       07 00       
04224D 01 00 00 10 0691*  	dl 1, 16, 16, 256, fn_dg_5_20, 1824
       00 00 10 00 
       00 00 01 00 
       A3 3E 04 20 
       07 00       
04225F 01 00 00 10 0692*  	dl 1, 16, 16, 256, fn_dg_5_21, 1825
       00 00 10 00 
       00 00 01 00 
       B7 3E 04 21 
       07 00       
042271 01 00 00 10 0693*  	dl 1, 16, 16, 256, fn_dg_5_22, 1826
       00 00 10 00 
       00 00 01 00 
       CB 3E 04 22 
       07 00       
042283 01 00 00 10 0694*  	dl 1, 16, 16, 256, fn_dg_5_23, 1827
       00 00 10 00 
       00 00 01 00 
       DF 3E 04 23 
       07 00       
042295 01 00 00 10 0695*  	dl 1, 16, 16, 256, fn_dg_5_24, 1828
       00 00 10 00 
       00 00 01 00 
       F3 3E 04 24 
       07 00       
0422A7 01 00 00 10 0696*  	dl 1, 16, 16, 256, fn_dg_5_25, 1829
       00 00 10 00 
       00 00 01 00 
       07 3F 04 25 
       07 00       
0422B9 01 00 00 10 0697*  	dl 1, 16, 16, 256, fn_dg_5_26, 1830
       00 00 10 00 
       00 00 01 00 
       1B 3F 04 26 
       07 00       
0422CB 01 00 00 10 0698*  	dl 1, 16, 16, 256, fn_dg_5_27, 1831
       00 00 10 00 
       00 00 01 00 
       2F 3F 04 27 
       07 00       
0422DD 01 00 00 10 0699*  	dl 1, 16, 16, 256, fn_dg_5_28, 1832
       00 00 10 00 
       00 00 01 00 
       43 3F 04 28 
       07 00       
0422EF 01 00 00 10 0700*  	dl 1, 16, 16, 256, fn_dg_5_29, 1833
       00 00 10 00 
       00 00 01 00 
       57 3F 04 29 
       07 00       
042301 01 00 00 10 0701*  	dl 1, 16, 16, 256, fn_dg_5_2A, 1834
       00 00 10 00 
       00 00 01 00 
       6B 3F 04 2A 
       07 00       
042313 01 00 00 10 0702*  	dl 1, 16, 16, 256, fn_dg_5_2B, 1835
       00 00 10 00 
       00 00 01 00 
       7F 3F 04 2B 
       07 00       
042325 01 00 00 10 0703*  	dl 1, 16, 16, 256, fn_dg_5_2C, 1836
       00 00 10 00 
       00 00 01 00 
       93 3F 04 2C 
       07 00       
042337 01 00 00 10 0704*  	dl 1, 16, 16, 256, fn_dg_5_2D, 1837
       00 00 10 00 
       00 00 01 00 
       A7 3F 04 2D 
       07 00       
042349 01 00 00 10 0705*  	dl 1, 16, 16, 256, fn_dg_5_2E, 1838
       00 00 10 00 
       00 00 01 00 
       BB 3F 04 2E 
       07 00       
04235B 01 00 00 10 0706*  	dl 1, 16, 16, 256, fn_dg_5_2F, 1839
       00 00 10 00 
       00 00 01 00 
       CF 3F 04 2F 
       07 00       
04236D 01 00 00 10 0707*  	dl 1, 16, 16, 256, fn_dg_5_30, 1840
       00 00 10 00 
       00 00 01 00 
       E3 3F 04 30 
       07 00       
04237F 01 00 00 10 0708*  	dl 1, 16, 16, 256, fn_dg_5_31, 1841
       00 00 10 00 
       00 00 01 00 
       F7 3F 04 31 
       07 00       
042391 01 00 00 10 0709*  	dl 1, 16, 16, 256, fn_dg_5_32, 1842
       00 00 10 00 
       00 00 01 00 
       0B 40 04 32 
       07 00       
0423A3 01 00 00 10 0710*  	dl 1, 16, 16, 256, fn_dg_5_33, 1843
       00 00 10 00 
       00 00 01 00 
       1F 40 04 33 
       07 00       
0423B5 01 00 00 10 0711*  	dl 1, 16, 16, 256, fn_dg_5_34, 1844
       00 00 10 00 
       00 00 01 00 
       33 40 04 34 
       07 00       
0423C7 01 00 00 10 0712*  	dl 1, 16, 16, 256, fn_dg_5_35, 1845
       00 00 10 00 
       00 00 01 00 
       47 40 04 35 
       07 00       
0423D9 01 00 00 10 0713*  	dl 1, 16, 16, 256, fn_dg_5_36, 1846
       00 00 10 00 
       00 00 01 00 
       5B 40 04 36 
       07 00       
0423EB 01 00 00 10 0714*  	dl 1, 16, 16, 256, fn_dg_5_37, 1847
       00 00 10 00 
       00 00 01 00 
       6F 40 04 37 
       07 00       
0423FD 01 00 00 10 0715*  	dl 1, 16, 16, 256, fn_dg_5_38, 1848
       00 00 10 00 
       00 00 01 00 
       83 40 04 38 
       07 00       
04240F 01 00 00 10 0716*  	dl 1, 16, 16, 256, fn_dg_5_39, 1849
       00 00 10 00 
       00 00 01 00 
       97 40 04 39 
       07 00       
042421 01 00 00 10 0717*  	dl 1, 16, 16, 256, fn_dg_5_3A, 1850
       00 00 10 00 
       00 00 01 00 
       AB 40 04 3A 
       07 00       
042433 01 00 00 10 0718*  	dl 1, 16, 16, 256, fn_dg_5_3B, 1851
       00 00 10 00 
       00 00 01 00 
       BF 40 04 3B 
       07 00       
042445 01 00 00 10 0719*  	dl 1, 16, 16, 256, fn_dg_5_3C, 1852
       00 00 10 00 
       00 00 01 00 
       D3 40 04 3C 
       07 00       
042457 01 00 00 10 0720*  	dl 1, 16, 16, 256, fn_dg_5_3D, 1853
       00 00 10 00 
       00 00 01 00 
       E7 40 04 3D 
       07 00       
042469 01 00 00 10 0721*  	dl 1, 16, 16, 256, fn_dg_5_3E, 1854
       00 00 10 00 
       00 00 01 00 
       FB 40 04 3E 
       07 00       
04247B 01 00 00 10 0722*  	dl 1, 16, 16, 256, fn_dg_5_3F, 1855
       00 00 10 00 
       00 00 01 00 
       0F 41 04 3F 
       07 00       
04248D 01 00 00 10 0723*  	dl 1, 16, 16, 256, fn_dg_5_40, 1856
       00 00 10 00 
       00 00 01 00 
       23 41 04 40 
       07 00       
04249F 01 00 00 10 0724*  	dl 1, 16, 16, 256, fn_dg_5_41, 1857
       00 00 10 00 
       00 00 01 00 
       37 41 04 41 
       07 00       
0424B1 01 00 00 10 0725*  	dl 1, 16, 16, 256, fn_dg_5_42, 1858
       00 00 10 00 
       00 00 01 00 
       4B 41 04 42 
       07 00       
0424C3 01 00 00 10 0726*  	dl 1, 16, 16, 256, fn_dg_5_43, 1859
       00 00 10 00 
       00 00 01 00 
       5F 41 04 43 
       07 00       
0424D5 01 00 00 10 0727*  	dl 1, 16, 16, 256, fn_dg_5_44, 1860
       00 00 10 00 
       00 00 01 00 
       73 41 04 44 
       07 00       
0424E7 01 00 00 10 0728*  	dl 1, 16, 16, 256, fn_dg_5_45, 1861
       00 00 10 00 
       00 00 01 00 
       87 41 04 45 
       07 00       
0424F9 01 00 00 10 0729*  	dl 1, 16, 16, 256, fn_dg_5_46, 1862
       00 00 10 00 
       00 00 01 00 
       9B 41 04 46 
       07 00       
04250B 01 00 00 10 0730*  	dl 1, 16, 16, 256, fn_dg_5_47, 1863
       00 00 10 00 
       00 00 01 00 
       AF 41 04 47 
       07 00       
04251D 01 00 00 10 0731*  	dl 1, 16, 16, 256, fn_dg_5_48, 1864
       00 00 10 00 
       00 00 01 00 
       C3 41 04 48 
       07 00       
04252F 01 00 00 10 0732*  	dl 1, 16, 16, 256, fn_dg_5_49, 1865
       00 00 10 00 
       00 00 01 00 
       D7 41 04 49 
       07 00       
042541 01 00 00 10 0733*  	dl 1, 16, 16, 256, fn_dg_5_4A, 1866
       00 00 10 00 
       00 00 01 00 
       EB 41 04 4A 
       07 00       
042553 01 00 00 10 0734*  	dl 1, 16, 16, 256, fn_dg_5_4B, 1867
       00 00 10 00 
       00 00 01 00 
       FF 41 04 4B 
       07 00       
042565 01 00 00 10 0735*  	dl 1, 16, 16, 256, fn_dg_5_4C, 1868
       00 00 10 00 
       00 00 01 00 
       13 42 04 4C 
       07 00       
042577 01 00 00 10 0736*  	dl 1, 16, 16, 256, fn_dg_5_4D, 1869
       00 00 10 00 
       00 00 01 00 
       27 42 04 4D 
       07 00       
042589 01 00 00 10 0737*  	dl 1, 16, 16, 256, fn_dg_5_4E, 1870
       00 00 10 00 
       00 00 01 00 
       3B 42 04 4E 
       07 00       
04259B 01 00 00 10 0738*  	dl 1, 16, 16, 256, fn_dg_5_4F, 1871
       00 00 10 00 
       00 00 01 00 
       4F 42 04 4F 
       07 00       
0425AD 01 00 00 10 0739*  	dl 1, 16, 16, 256, fn_dg_5_50, 1872
       00 00 10 00 
       00 00 01 00 
       63 42 04 50 
       07 00       
0425BF 01 00 00 10 0740*  	dl 1, 16, 16, 256, fn_dg_5_51, 1873
       00 00 10 00 
       00 00 01 00 
       77 42 04 51 
       07 00       
0425D1 01 00 00 10 0741*  	dl 1, 16, 16, 256, fn_dg_5_52, 1874
       00 00 10 00 
       00 00 01 00 
       8B 42 04 52 
       07 00       
0425E3 01 00 00 10 0742*  	dl 1, 16, 16, 256, fn_dg_5_53, 1875
       00 00 10 00 
       00 00 01 00 
       9F 42 04 53 
       07 00       
0425F5 01 00 00 10 0743*  	dl 1, 16, 16, 256, fn_dg_5_54, 1876
       00 00 10 00 
       00 00 01 00 
       B3 42 04 54 
       07 00       
042607             0744*  
042607             0745*  tiles_dg_files_list: ; filename:
042607 74 69 6C 65 0746*  fn_dg_0_00: db "tiles/dg_0_00.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
04261B 74 69 6C 65 0747*  fn_dg_0_01: db "tiles/dg_0_01.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       31 2E 72 67 
       62 61 32 00 
04262F 74 69 6C 65 0748*  fn_dg_0_02: db "tiles/dg_0_02.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       32 2E 72 67 
       62 61 32 00 
042643 74 69 6C 65 0749*  fn_dg_0_03: db "tiles/dg_0_03.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       33 2E 72 67 
       62 61 32 00 
042657 74 69 6C 65 0750*  fn_dg_0_04: db "tiles/dg_0_04.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       34 2E 72 67 
       62 61 32 00 
04266B 74 69 6C 65 0751*  fn_dg_0_05: db "tiles/dg_0_05.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       35 2E 72 67 
       62 61 32 00 
04267F 74 69 6C 65 0752*  fn_dg_0_06: db "tiles/dg_0_06.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       36 2E 72 67 
       62 61 32 00 
042693 74 69 6C 65 0753*  fn_dg_0_07: db "tiles/dg_0_07.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       37 2E 72 67 
       62 61 32 00 
0426A7 74 69 6C 65 0754*  fn_dg_0_08: db "tiles/dg_0_08.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       38 2E 72 67 
       62 61 32 00 
0426BB 74 69 6C 65 0755*  fn_dg_0_09: db "tiles/dg_0_09.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       39 2E 72 67 
       62 61 32 00 
0426CF 74 69 6C 65 0756*  fn_dg_0_0A: db "tiles/dg_0_0A.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       41 2E 72 67 
       62 61 32 00 
0426E3 74 69 6C 65 0757*  fn_dg_0_0B: db "tiles/dg_0_0B.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       42 2E 72 67 
       62 61 32 00 
0426F7 74 69 6C 65 0758*  fn_dg_0_0C: db "tiles/dg_0_0C.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       43 2E 72 67 
       62 61 32 00 
04270B 74 69 6C 65 0759*  fn_dg_0_0D: db "tiles/dg_0_0D.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       44 2E 72 67 
       62 61 32 00 
04271F 74 69 6C 65 0760*  fn_dg_0_0E: db "tiles/dg_0_0E.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       45 2E 72 67 
       62 61 32 00 
042733 74 69 6C 65 0761*  fn_dg_0_0F: db "tiles/dg_0_0F.rgba2",0
       73 2F 64 67 
       5F 30 5F 30 
       46 2E 72 67 
       62 61 32 00 
042747 74 69 6C 65 0762*  fn_dg_0_10: db "tiles/dg_0_10.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       30 2E 72 67 
       62 61 32 00 
04275B 74 69 6C 65 0763*  fn_dg_0_11: db "tiles/dg_0_11.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       31 2E 72 67 
       62 61 32 00 
04276F 74 69 6C 65 0764*  fn_dg_0_12: db "tiles/dg_0_12.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       32 2E 72 67 
       62 61 32 00 
042783 74 69 6C 65 0765*  fn_dg_0_13: db "tiles/dg_0_13.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       33 2E 72 67 
       62 61 32 00 
042797 74 69 6C 65 0766*  fn_dg_0_14: db "tiles/dg_0_14.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       34 2E 72 67 
       62 61 32 00 
0427AB 74 69 6C 65 0767*  fn_dg_0_15: db "tiles/dg_0_15.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       35 2E 72 67 
       62 61 32 00 
0427BF 74 69 6C 65 0768*  fn_dg_0_16: db "tiles/dg_0_16.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       36 2E 72 67 
       62 61 32 00 
0427D3 74 69 6C 65 0769*  fn_dg_0_17: db "tiles/dg_0_17.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       37 2E 72 67 
       62 61 32 00 
0427E7 74 69 6C 65 0770*  fn_dg_0_18: db "tiles/dg_0_18.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       38 2E 72 67 
       62 61 32 00 
0427FB 74 69 6C 65 0771*  fn_dg_0_19: db "tiles/dg_0_19.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       39 2E 72 67 
       62 61 32 00 
04280F 74 69 6C 65 0772*  fn_dg_0_1A: db "tiles/dg_0_1A.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       41 2E 72 67 
       62 61 32 00 
042823 74 69 6C 65 0773*  fn_dg_0_1B: db "tiles/dg_0_1B.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       42 2E 72 67 
       62 61 32 00 
042837 74 69 6C 65 0774*  fn_dg_0_1C: db "tiles/dg_0_1C.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       43 2E 72 67 
       62 61 32 00 
04284B 74 69 6C 65 0775*  fn_dg_0_1D: db "tiles/dg_0_1D.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       44 2E 72 67 
       62 61 32 00 
04285F 74 69 6C 65 0776*  fn_dg_0_1E: db "tiles/dg_0_1E.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       45 2E 72 67 
       62 61 32 00 
042873 74 69 6C 65 0777*  fn_dg_0_1F: db "tiles/dg_0_1F.rgba2",0
       73 2F 64 67 
       5F 30 5F 31 
       46 2E 72 67 
       62 61 32 00 
042887 74 69 6C 65 0778*  fn_dg_0_20: db "tiles/dg_0_20.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       30 2E 72 67 
       62 61 32 00 
04289B 74 69 6C 65 0779*  fn_dg_0_21: db "tiles/dg_0_21.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       31 2E 72 67 
       62 61 32 00 
0428AF 74 69 6C 65 0780*  fn_dg_0_22: db "tiles/dg_0_22.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       32 2E 72 67 
       62 61 32 00 
0428C3 74 69 6C 65 0781*  fn_dg_0_23: db "tiles/dg_0_23.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       33 2E 72 67 
       62 61 32 00 
0428D7 74 69 6C 65 0782*  fn_dg_0_24: db "tiles/dg_0_24.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       34 2E 72 67 
       62 61 32 00 
0428EB 74 69 6C 65 0783*  fn_dg_0_25: db "tiles/dg_0_25.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       35 2E 72 67 
       62 61 32 00 
0428FF 74 69 6C 65 0784*  fn_dg_0_26: db "tiles/dg_0_26.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       36 2E 72 67 
       62 61 32 00 
042913 74 69 6C 65 0785*  fn_dg_0_27: db "tiles/dg_0_27.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       37 2E 72 67 
       62 61 32 00 
042927 74 69 6C 65 0786*  fn_dg_0_28: db "tiles/dg_0_28.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       38 2E 72 67 
       62 61 32 00 
04293B 74 69 6C 65 0787*  fn_dg_0_29: db "tiles/dg_0_29.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       39 2E 72 67 
       62 61 32 00 
04294F 74 69 6C 65 0788*  fn_dg_0_2A: db "tiles/dg_0_2A.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       41 2E 72 67 
       62 61 32 00 
042963 74 69 6C 65 0789*  fn_dg_0_2B: db "tiles/dg_0_2B.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       42 2E 72 67 
       62 61 32 00 
042977 74 69 6C 65 0790*  fn_dg_0_2C: db "tiles/dg_0_2C.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       43 2E 72 67 
       62 61 32 00 
04298B 74 69 6C 65 0791*  fn_dg_0_2D: db "tiles/dg_0_2D.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       44 2E 72 67 
       62 61 32 00 
04299F 74 69 6C 65 0792*  fn_dg_0_2E: db "tiles/dg_0_2E.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       45 2E 72 67 
       62 61 32 00 
0429B3 74 69 6C 65 0793*  fn_dg_0_2F: db "tiles/dg_0_2F.rgba2",0
       73 2F 64 67 
       5F 30 5F 32 
       46 2E 72 67 
       62 61 32 00 
0429C7 74 69 6C 65 0794*  fn_dg_0_30: db "tiles/dg_0_30.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       30 2E 72 67 
       62 61 32 00 
0429DB 74 69 6C 65 0795*  fn_dg_0_31: db "tiles/dg_0_31.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       31 2E 72 67 
       62 61 32 00 
0429EF 74 69 6C 65 0796*  fn_dg_0_32: db "tiles/dg_0_32.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       32 2E 72 67 
       62 61 32 00 
042A03 74 69 6C 65 0797*  fn_dg_0_33: db "tiles/dg_0_33.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       33 2E 72 67 
       62 61 32 00 
042A17 74 69 6C 65 0798*  fn_dg_0_34: db "tiles/dg_0_34.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       34 2E 72 67 
       62 61 32 00 
042A2B 74 69 6C 65 0799*  fn_dg_0_35: db "tiles/dg_0_35.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       35 2E 72 67 
       62 61 32 00 
042A3F 74 69 6C 65 0800*  fn_dg_0_36: db "tiles/dg_0_36.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       36 2E 72 67 
       62 61 32 00 
042A53 74 69 6C 65 0801*  fn_dg_0_37: db "tiles/dg_0_37.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       37 2E 72 67 
       62 61 32 00 
042A67 74 69 6C 65 0802*  fn_dg_0_38: db "tiles/dg_0_38.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       38 2E 72 67 
       62 61 32 00 
042A7B 74 69 6C 65 0803*  fn_dg_0_39: db "tiles/dg_0_39.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       39 2E 72 67 
       62 61 32 00 
042A8F 74 69 6C 65 0804*  fn_dg_0_3A: db "tiles/dg_0_3A.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       41 2E 72 67 
       62 61 32 00 
042AA3 74 69 6C 65 0805*  fn_dg_0_3B: db "tiles/dg_0_3B.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       42 2E 72 67 
       62 61 32 00 
042AB7 74 69 6C 65 0806*  fn_dg_0_3C: db "tiles/dg_0_3C.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       43 2E 72 67 
       62 61 32 00 
042ACB 74 69 6C 65 0807*  fn_dg_0_3D: db "tiles/dg_0_3D.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       44 2E 72 67 
       62 61 32 00 
042ADF 74 69 6C 65 0808*  fn_dg_0_3E: db "tiles/dg_0_3E.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       45 2E 72 67 
       62 61 32 00 
042AF3 74 69 6C 65 0809*  fn_dg_0_3F: db "tiles/dg_0_3F.rgba2",0
       73 2F 64 67 
       5F 30 5F 33 
       46 2E 72 67 
       62 61 32 00 
042B07 74 69 6C 65 0810*  fn_dg_0_40: db "tiles/dg_0_40.rgba2",0
       73 2F 64 67 
       5F 30 5F 34 
       30 2E 72 67 
       62 61 32 00 
042B1B 74 69 6C 65 0811*  fn_dg_0_41: db "tiles/dg_0_41.rgba2",0
       73 2F 64 67 
       5F 30 5F 34 
       31 2E 72 67 
       62 61 32 00 
042B2F 74 69 6C 65 0812*  fn_dg_0_42: db "tiles/dg_0_42.rgba2",0
       73 2F 64 67 
       5F 30 5F 34 
       32 2E 72 67 
       62 61 32 00 
042B43 74 69 6C 65 0813*  fn_dg_0_43: db "tiles/dg_0_43.rgba2",0
       73 2F 64 67 
       5F 30 5F 34 
       33 2E 72 67 
       62 61 32 00 
042B57 74 69 6C 65 0814*  fn_dg_1_00: db "tiles/dg_1_00.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       30 2E 72 67 
       62 61 32 00 
042B6B 74 69 6C 65 0815*  fn_dg_1_01: db "tiles/dg_1_01.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       31 2E 72 67 
       62 61 32 00 
042B7F 74 69 6C 65 0816*  fn_dg_1_02: db "tiles/dg_1_02.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       32 2E 72 67 
       62 61 32 00 
042B93 74 69 6C 65 0817*  fn_dg_1_03: db "tiles/dg_1_03.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       33 2E 72 67 
       62 61 32 00 
042BA7 74 69 6C 65 0818*  fn_dg_1_04: db "tiles/dg_1_04.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       34 2E 72 67 
       62 61 32 00 
042BBB 74 69 6C 65 0819*  fn_dg_1_05: db "tiles/dg_1_05.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       35 2E 72 67 
       62 61 32 00 
042BCF 74 69 6C 65 0820*  fn_dg_1_06: db "tiles/dg_1_06.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       36 2E 72 67 
       62 61 32 00 
042BE3 74 69 6C 65 0821*  fn_dg_1_07: db "tiles/dg_1_07.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       37 2E 72 67 
       62 61 32 00 
042BF7 74 69 6C 65 0822*  fn_dg_1_08: db "tiles/dg_1_08.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       38 2E 72 67 
       62 61 32 00 
042C0B 74 69 6C 65 0823*  fn_dg_1_09: db "tiles/dg_1_09.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       39 2E 72 67 
       62 61 32 00 
042C1F 74 69 6C 65 0824*  fn_dg_1_0A: db "tiles/dg_1_0A.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       41 2E 72 67 
       62 61 32 00 
042C33 74 69 6C 65 0825*  fn_dg_1_0B: db "tiles/dg_1_0B.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       42 2E 72 67 
       62 61 32 00 
042C47 74 69 6C 65 0826*  fn_dg_1_0C: db "tiles/dg_1_0C.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       43 2E 72 67 
       62 61 32 00 
042C5B 74 69 6C 65 0827*  fn_dg_1_0D: db "tiles/dg_1_0D.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       44 2E 72 67 
       62 61 32 00 
042C6F 74 69 6C 65 0828*  fn_dg_1_0E: db "tiles/dg_1_0E.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       45 2E 72 67 
       62 61 32 00 
042C83 74 69 6C 65 0829*  fn_dg_1_0F: db "tiles/dg_1_0F.rgba2",0
       73 2F 64 67 
       5F 31 5F 30 
       46 2E 72 67 
       62 61 32 00 
042C97 74 69 6C 65 0830*  fn_dg_1_10: db "tiles/dg_1_10.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       30 2E 72 67 
       62 61 32 00 
042CAB 74 69 6C 65 0831*  fn_dg_1_11: db "tiles/dg_1_11.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       31 2E 72 67 
       62 61 32 00 
042CBF 74 69 6C 65 0832*  fn_dg_1_12: db "tiles/dg_1_12.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       32 2E 72 67 
       62 61 32 00 
042CD3 74 69 6C 65 0833*  fn_dg_1_13: db "tiles/dg_1_13.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       33 2E 72 67 
       62 61 32 00 
042CE7 74 69 6C 65 0834*  fn_dg_1_14: db "tiles/dg_1_14.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       34 2E 72 67 
       62 61 32 00 
042CFB 74 69 6C 65 0835*  fn_dg_1_15: db "tiles/dg_1_15.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       35 2E 72 67 
       62 61 32 00 
042D0F 74 69 6C 65 0836*  fn_dg_1_16: db "tiles/dg_1_16.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       36 2E 72 67 
       62 61 32 00 
042D23 74 69 6C 65 0837*  fn_dg_1_17: db "tiles/dg_1_17.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       37 2E 72 67 
       62 61 32 00 
042D37 74 69 6C 65 0838*  fn_dg_1_18: db "tiles/dg_1_18.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       38 2E 72 67 
       62 61 32 00 
042D4B 74 69 6C 65 0839*  fn_dg_1_19: db "tiles/dg_1_19.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       39 2E 72 67 
       62 61 32 00 
042D5F 74 69 6C 65 0840*  fn_dg_1_1A: db "tiles/dg_1_1A.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       41 2E 72 67 
       62 61 32 00 
042D73 74 69 6C 65 0841*  fn_dg_1_1B: db "tiles/dg_1_1B.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       42 2E 72 67 
       62 61 32 00 
042D87 74 69 6C 65 0842*  fn_dg_1_1C: db "tiles/dg_1_1C.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       43 2E 72 67 
       62 61 32 00 
042D9B 74 69 6C 65 0843*  fn_dg_1_1D: db "tiles/dg_1_1D.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       44 2E 72 67 
       62 61 32 00 
042DAF 74 69 6C 65 0844*  fn_dg_1_1E: db "tiles/dg_1_1E.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       45 2E 72 67 
       62 61 32 00 
042DC3 74 69 6C 65 0845*  fn_dg_1_1F: db "tiles/dg_1_1F.rgba2",0
       73 2F 64 67 
       5F 31 5F 31 
       46 2E 72 67 
       62 61 32 00 
042DD7 74 69 6C 65 0846*  fn_dg_1_20: db "tiles/dg_1_20.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       30 2E 72 67 
       62 61 32 00 
042DEB 74 69 6C 65 0847*  fn_dg_1_21: db "tiles/dg_1_21.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       31 2E 72 67 
       62 61 32 00 
042DFF 74 69 6C 65 0848*  fn_dg_1_22: db "tiles/dg_1_22.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       32 2E 72 67 
       62 61 32 00 
042E13 74 69 6C 65 0849*  fn_dg_1_23: db "tiles/dg_1_23.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       33 2E 72 67 
       62 61 32 00 
042E27 74 69 6C 65 0850*  fn_dg_1_24: db "tiles/dg_1_24.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       34 2E 72 67 
       62 61 32 00 
042E3B 74 69 6C 65 0851*  fn_dg_1_25: db "tiles/dg_1_25.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       35 2E 72 67 
       62 61 32 00 
042E4F 74 69 6C 65 0852*  fn_dg_1_26: db "tiles/dg_1_26.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       36 2E 72 67 
       62 61 32 00 
042E63 74 69 6C 65 0853*  fn_dg_1_27: db "tiles/dg_1_27.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       37 2E 72 67 
       62 61 32 00 
042E77 74 69 6C 65 0854*  fn_dg_1_28: db "tiles/dg_1_28.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       38 2E 72 67 
       62 61 32 00 
042E8B 74 69 6C 65 0855*  fn_dg_1_29: db "tiles/dg_1_29.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       39 2E 72 67 
       62 61 32 00 
042E9F 74 69 6C 65 0856*  fn_dg_1_2A: db "tiles/dg_1_2A.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       41 2E 72 67 
       62 61 32 00 
042EB3 74 69 6C 65 0857*  fn_dg_1_2B: db "tiles/dg_1_2B.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       42 2E 72 67 
       62 61 32 00 
042EC7 74 69 6C 65 0858*  fn_dg_1_2C: db "tiles/dg_1_2C.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       43 2E 72 67 
       62 61 32 00 
042EDB 74 69 6C 65 0859*  fn_dg_1_2D: db "tiles/dg_1_2D.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       44 2E 72 67 
       62 61 32 00 
042EEF 74 69 6C 65 0860*  fn_dg_1_2E: db "tiles/dg_1_2E.rgba2",0
       73 2F 64 67 
       5F 31 5F 32 
       45 2E 72 67 
       62 61 32 00 
042F03 74 69 6C 65 0861*  fn_dg_2_00: db "tiles/dg_2_00.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       30 2E 72 67 
       62 61 32 00 
042F17 74 69 6C 65 0862*  fn_dg_2_01: db "tiles/dg_2_01.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       31 2E 72 67 
       62 61 32 00 
042F2B 74 69 6C 65 0863*  fn_dg_2_02: db "tiles/dg_2_02.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       32 2E 72 67 
       62 61 32 00 
042F3F 74 69 6C 65 0864*  fn_dg_2_03: db "tiles/dg_2_03.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       33 2E 72 67 
       62 61 32 00 
042F53 74 69 6C 65 0865*  fn_dg_2_04: db "tiles/dg_2_04.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       34 2E 72 67 
       62 61 32 00 
042F67 74 69 6C 65 0866*  fn_dg_2_05: db "tiles/dg_2_05.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       35 2E 72 67 
       62 61 32 00 
042F7B 74 69 6C 65 0867*  fn_dg_2_06: db "tiles/dg_2_06.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       36 2E 72 67 
       62 61 32 00 
042F8F 74 69 6C 65 0868*  fn_dg_2_07: db "tiles/dg_2_07.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       37 2E 72 67 
       62 61 32 00 
042FA3 74 69 6C 65 0869*  fn_dg_2_08: db "tiles/dg_2_08.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       38 2E 72 67 
       62 61 32 00 
042FB7 74 69 6C 65 0870*  fn_dg_2_09: db "tiles/dg_2_09.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       39 2E 72 67 
       62 61 32 00 
042FCB 74 69 6C 65 0871*  fn_dg_2_0A: db "tiles/dg_2_0A.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       41 2E 72 67 
       62 61 32 00 
042FDF 74 69 6C 65 0872*  fn_dg_2_0B: db "tiles/dg_2_0B.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       42 2E 72 67 
       62 61 32 00 
042FF3 74 69 6C 65 0873*  fn_dg_2_0C: db "tiles/dg_2_0C.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       43 2E 72 67 
       62 61 32 00 
043007 74 69 6C 65 0874*  fn_dg_2_0D: db "tiles/dg_2_0D.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       44 2E 72 67 
       62 61 32 00 
04301B 74 69 6C 65 0875*  fn_dg_2_0E: db "tiles/dg_2_0E.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       45 2E 72 67 
       62 61 32 00 
04302F 74 69 6C 65 0876*  fn_dg_2_0F: db "tiles/dg_2_0F.rgba2",0
       73 2F 64 67 
       5F 32 5F 30 
       46 2E 72 67 
       62 61 32 00 
043043 74 69 6C 65 0877*  fn_dg_2_10: db "tiles/dg_2_10.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       30 2E 72 67 
       62 61 32 00 
043057 74 69 6C 65 0878*  fn_dg_2_11: db "tiles/dg_2_11.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       31 2E 72 67 
       62 61 32 00 
04306B 74 69 6C 65 0879*  fn_dg_2_12: db "tiles/dg_2_12.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       32 2E 72 67 
       62 61 32 00 
04307F 74 69 6C 65 0880*  fn_dg_2_13: db "tiles/dg_2_13.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       33 2E 72 67 
       62 61 32 00 
043093 74 69 6C 65 0881*  fn_dg_2_14: db "tiles/dg_2_14.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       34 2E 72 67 
       62 61 32 00 
0430A7 74 69 6C 65 0882*  fn_dg_2_15: db "tiles/dg_2_15.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       35 2E 72 67 
       62 61 32 00 
0430BB 74 69 6C 65 0883*  fn_dg_2_16: db "tiles/dg_2_16.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       36 2E 72 67 
       62 61 32 00 
0430CF 74 69 6C 65 0884*  fn_dg_2_17: db "tiles/dg_2_17.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       37 2E 72 67 
       62 61 32 00 
0430E3 74 69 6C 65 0885*  fn_dg_2_18: db "tiles/dg_2_18.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       38 2E 72 67 
       62 61 32 00 
0430F7 74 69 6C 65 0886*  fn_dg_2_19: db "tiles/dg_2_19.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       39 2E 72 67 
       62 61 32 00 
04310B 74 69 6C 65 0887*  fn_dg_2_1A: db "tiles/dg_2_1A.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       41 2E 72 67 
       62 61 32 00 
04311F 74 69 6C 65 0888*  fn_dg_2_1B: db "tiles/dg_2_1B.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       42 2E 72 67 
       62 61 32 00 
043133 74 69 6C 65 0889*  fn_dg_2_1C: db "tiles/dg_2_1C.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       43 2E 72 67 
       62 61 32 00 
043147 74 69 6C 65 0890*  fn_dg_2_1D: db "tiles/dg_2_1D.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       44 2E 72 67 
       62 61 32 00 
04315B 74 69 6C 65 0891*  fn_dg_2_1E: db "tiles/dg_2_1E.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       45 2E 72 67 
       62 61 32 00 
04316F 74 69 6C 65 0892*  fn_dg_2_1F: db "tiles/dg_2_1F.rgba2",0
       73 2F 64 67 
       5F 32 5F 31 
       46 2E 72 67 
       62 61 32 00 
043183 74 69 6C 65 0893*  fn_dg_2_20: db "tiles/dg_2_20.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       30 2E 72 67 
       62 61 32 00 
043197 74 69 6C 65 0894*  fn_dg_2_21: db "tiles/dg_2_21.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       31 2E 72 67 
       62 61 32 00 
0431AB 74 69 6C 65 0895*  fn_dg_2_22: db "tiles/dg_2_22.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       32 2E 72 67 
       62 61 32 00 
0431BF 74 69 6C 65 0896*  fn_dg_2_23: db "tiles/dg_2_23.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       33 2E 72 67 
       62 61 32 00 
0431D3 74 69 6C 65 0897*  fn_dg_2_24: db "tiles/dg_2_24.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       34 2E 72 67 
       62 61 32 00 
0431E7 74 69 6C 65 0898*  fn_dg_2_25: db "tiles/dg_2_25.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       35 2E 72 67 
       62 61 32 00 
0431FB 74 69 6C 65 0899*  fn_dg_2_26: db "tiles/dg_2_26.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       36 2E 72 67 
       62 61 32 00 
04320F 74 69 6C 65 0900*  fn_dg_2_27: db "tiles/dg_2_27.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       37 2E 72 67 
       62 61 32 00 
043223 74 69 6C 65 0901*  fn_dg_2_28: db "tiles/dg_2_28.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       38 2E 72 67 
       62 61 32 00 
043237 74 69 6C 65 0902*  fn_dg_2_29: db "tiles/dg_2_29.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       39 2E 72 67 
       62 61 32 00 
04324B 74 69 6C 65 0903*  fn_dg_2_2A: db "tiles/dg_2_2A.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       41 2E 72 67 
       62 61 32 00 
04325F 74 69 6C 65 0904*  fn_dg_2_2B: db "tiles/dg_2_2B.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       42 2E 72 67 
       62 61 32 00 
043273 74 69 6C 65 0905*  fn_dg_2_2C: db "tiles/dg_2_2C.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       43 2E 72 67 
       62 61 32 00 
043287 74 69 6C 65 0906*  fn_dg_2_2D: db "tiles/dg_2_2D.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       44 2E 72 67 
       62 61 32 00 
04329B 74 69 6C 65 0907*  fn_dg_2_2E: db "tiles/dg_2_2E.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       45 2E 72 67 
       62 61 32 00 
0432AF 74 69 6C 65 0908*  fn_dg_2_2F: db "tiles/dg_2_2F.rgba2",0
       73 2F 64 67 
       5F 32 5F 32 
       46 2E 72 67 
       62 61 32 00 
0432C3 74 69 6C 65 0909*  fn_dg_2_30: db "tiles/dg_2_30.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       30 2E 72 67 
       62 61 32 00 
0432D7 74 69 6C 65 0910*  fn_dg_2_31: db "tiles/dg_2_31.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       31 2E 72 67 
       62 61 32 00 
0432EB 74 69 6C 65 0911*  fn_dg_2_32: db "tiles/dg_2_32.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       32 2E 72 67 
       62 61 32 00 
0432FF 74 69 6C 65 0912*  fn_dg_2_33: db "tiles/dg_2_33.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       33 2E 72 67 
       62 61 32 00 
043313 74 69 6C 65 0913*  fn_dg_2_34: db "tiles/dg_2_34.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       34 2E 72 67 
       62 61 32 00 
043327 74 69 6C 65 0914*  fn_dg_2_35: db "tiles/dg_2_35.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       35 2E 72 67 
       62 61 32 00 
04333B 74 69 6C 65 0915*  fn_dg_2_36: db "tiles/dg_2_36.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       36 2E 72 67 
       62 61 32 00 
04334F 74 69 6C 65 0916*  fn_dg_2_37: db "tiles/dg_2_37.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       37 2E 72 67 
       62 61 32 00 
043363 74 69 6C 65 0917*  fn_dg_2_38: db "tiles/dg_2_38.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       38 2E 72 67 
       62 61 32 00 
043377 74 69 6C 65 0918*  fn_dg_2_39: db "tiles/dg_2_39.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       39 2E 72 67 
       62 61 32 00 
04338B 74 69 6C 65 0919*  fn_dg_2_3A: db "tiles/dg_2_3A.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       41 2E 72 67 
       62 61 32 00 
04339F 74 69 6C 65 0920*  fn_dg_2_3B: db "tiles/dg_2_3B.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       42 2E 72 67 
       62 61 32 00 
0433B3 74 69 6C 65 0921*  fn_dg_2_3C: db "tiles/dg_2_3C.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       43 2E 72 67 
       62 61 32 00 
0433C7 74 69 6C 65 0922*  fn_dg_2_3D: db "tiles/dg_2_3D.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       44 2E 72 67 
       62 61 32 00 
0433DB 74 69 6C 65 0923*  fn_dg_2_3E: db "tiles/dg_2_3E.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       45 2E 72 67 
       62 61 32 00 
0433EF 74 69 6C 65 0924*  fn_dg_2_3F: db "tiles/dg_2_3F.rgba2",0
       73 2F 64 67 
       5F 32 5F 33 
       46 2E 72 67 
       62 61 32 00 
043403 74 69 6C 65 0925*  fn_dg_2_40: db "tiles/dg_2_40.rgba2",0
       73 2F 64 67 
       5F 32 5F 34 
       30 2E 72 67 
       62 61 32 00 
043417 74 69 6C 65 0926*  fn_dg_3_00: db "tiles/dg_3_00.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       30 2E 72 67 
       62 61 32 00 
04342B 74 69 6C 65 0927*  fn_dg_3_01: db "tiles/dg_3_01.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       31 2E 72 67 
       62 61 32 00 
04343F 74 69 6C 65 0928*  fn_dg_3_02: db "tiles/dg_3_02.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       32 2E 72 67 
       62 61 32 00 
043453 74 69 6C 65 0929*  fn_dg_3_03: db "tiles/dg_3_03.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       33 2E 72 67 
       62 61 32 00 
043467 74 69 6C 65 0930*  fn_dg_3_04: db "tiles/dg_3_04.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       34 2E 72 67 
       62 61 32 00 
04347B 74 69 6C 65 0931*  fn_dg_3_05: db "tiles/dg_3_05.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       35 2E 72 67 
       62 61 32 00 
04348F 74 69 6C 65 0932*  fn_dg_3_06: db "tiles/dg_3_06.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       36 2E 72 67 
       62 61 32 00 
0434A3 74 69 6C 65 0933*  fn_dg_3_07: db "tiles/dg_3_07.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       37 2E 72 67 
       62 61 32 00 
0434B7 74 69 6C 65 0934*  fn_dg_3_08: db "tiles/dg_3_08.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       38 2E 72 67 
       62 61 32 00 
0434CB 74 69 6C 65 0935*  fn_dg_3_09: db "tiles/dg_3_09.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       39 2E 72 67 
       62 61 32 00 
0434DF 74 69 6C 65 0936*  fn_dg_3_0A: db "tiles/dg_3_0A.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       41 2E 72 67 
       62 61 32 00 
0434F3 74 69 6C 65 0937*  fn_dg_3_0B: db "tiles/dg_3_0B.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       42 2E 72 67 
       62 61 32 00 
043507 74 69 6C 65 0938*  fn_dg_3_0C: db "tiles/dg_3_0C.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       43 2E 72 67 
       62 61 32 00 
04351B 74 69 6C 65 0939*  fn_dg_3_0D: db "tiles/dg_3_0D.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       44 2E 72 67 
       62 61 32 00 
04352F 74 69 6C 65 0940*  fn_dg_3_0E: db "tiles/dg_3_0E.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       45 2E 72 67 
       62 61 32 00 
043543 74 69 6C 65 0941*  fn_dg_3_0F: db "tiles/dg_3_0F.rgba2",0
       73 2F 64 67 
       5F 33 5F 30 
       46 2E 72 67 
       62 61 32 00 
043557 74 69 6C 65 0942*  fn_dg_3_10: db "tiles/dg_3_10.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       30 2E 72 67 
       62 61 32 00 
04356B 74 69 6C 65 0943*  fn_dg_3_11: db "tiles/dg_3_11.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       31 2E 72 67 
       62 61 32 00 
04357F 74 69 6C 65 0944*  fn_dg_3_12: db "tiles/dg_3_12.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       32 2E 72 67 
       62 61 32 00 
043593 74 69 6C 65 0945*  fn_dg_3_13: db "tiles/dg_3_13.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       33 2E 72 67 
       62 61 32 00 
0435A7 74 69 6C 65 0946*  fn_dg_3_14: db "tiles/dg_3_14.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       34 2E 72 67 
       62 61 32 00 
0435BB 74 69 6C 65 0947*  fn_dg_3_15: db "tiles/dg_3_15.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       35 2E 72 67 
       62 61 32 00 
0435CF 74 69 6C 65 0948*  fn_dg_3_16: db "tiles/dg_3_16.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       36 2E 72 67 
       62 61 32 00 
0435E3 74 69 6C 65 0949*  fn_dg_3_17: db "tiles/dg_3_17.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       37 2E 72 67 
       62 61 32 00 
0435F7 74 69 6C 65 0950*  fn_dg_3_18: db "tiles/dg_3_18.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       38 2E 72 67 
       62 61 32 00 
04360B 74 69 6C 65 0951*  fn_dg_3_19: db "tiles/dg_3_19.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       39 2E 72 67 
       62 61 32 00 
04361F 74 69 6C 65 0952*  fn_dg_3_1A: db "tiles/dg_3_1A.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       41 2E 72 67 
       62 61 32 00 
043633 74 69 6C 65 0953*  fn_dg_3_1B: db "tiles/dg_3_1B.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       42 2E 72 67 
       62 61 32 00 
043647 74 69 6C 65 0954*  fn_dg_3_1C: db "tiles/dg_3_1C.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       43 2E 72 67 
       62 61 32 00 
04365B 74 69 6C 65 0955*  fn_dg_3_1D: db "tiles/dg_3_1D.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       44 2E 72 67 
       62 61 32 00 
04366F 74 69 6C 65 0956*  fn_dg_3_1E: db "tiles/dg_3_1E.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       45 2E 72 67 
       62 61 32 00 
043683 74 69 6C 65 0957*  fn_dg_3_1F: db "tiles/dg_3_1F.rgba2",0
       73 2F 64 67 
       5F 33 5F 31 
       46 2E 72 67 
       62 61 32 00 
043697 74 69 6C 65 0958*  fn_dg_3_20: db "tiles/dg_3_20.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       30 2E 72 67 
       62 61 32 00 
0436AB 74 69 6C 65 0959*  fn_dg_3_21: db "tiles/dg_3_21.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       31 2E 72 67 
       62 61 32 00 
0436BF 74 69 6C 65 0960*  fn_dg_3_22: db "tiles/dg_3_22.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       32 2E 72 67 
       62 61 32 00 
0436D3 74 69 6C 65 0961*  fn_dg_3_23: db "tiles/dg_3_23.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       33 2E 72 67 
       62 61 32 00 
0436E7 74 69 6C 65 0962*  fn_dg_3_24: db "tiles/dg_3_24.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       34 2E 72 67 
       62 61 32 00 
0436FB 74 69 6C 65 0963*  fn_dg_3_25: db "tiles/dg_3_25.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       35 2E 72 67 
       62 61 32 00 
04370F 74 69 6C 65 0964*  fn_dg_3_26: db "tiles/dg_3_26.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       36 2E 72 67 
       62 61 32 00 
043723 74 69 6C 65 0965*  fn_dg_3_27: db "tiles/dg_3_27.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       37 2E 72 67 
       62 61 32 00 
043737 74 69 6C 65 0966*  fn_dg_3_28: db "tiles/dg_3_28.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       38 2E 72 67 
       62 61 32 00 
04374B 74 69 6C 65 0967*  fn_dg_3_29: db "tiles/dg_3_29.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       39 2E 72 67 
       62 61 32 00 
04375F 74 69 6C 65 0968*  fn_dg_3_2A: db "tiles/dg_3_2A.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       41 2E 72 67 
       62 61 32 00 
043773 74 69 6C 65 0969*  fn_dg_3_2B: db "tiles/dg_3_2B.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       42 2E 72 67 
       62 61 32 00 
043787 74 69 6C 65 0970*  fn_dg_3_2C: db "tiles/dg_3_2C.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       43 2E 72 67 
       62 61 32 00 
04379B 74 69 6C 65 0971*  fn_dg_3_2D: db "tiles/dg_3_2D.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       44 2E 72 67 
       62 61 32 00 
0437AF 74 69 6C 65 0972*  fn_dg_3_2E: db "tiles/dg_3_2E.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       45 2E 72 67 
       62 61 32 00 
0437C3 74 69 6C 65 0973*  fn_dg_3_2F: db "tiles/dg_3_2F.rgba2",0
       73 2F 64 67 
       5F 33 5F 32 
       46 2E 72 67 
       62 61 32 00 
0437D7 74 69 6C 65 0974*  fn_dg_3_30: db "tiles/dg_3_30.rgba2",0
       73 2F 64 67 
       5F 33 5F 33 
       30 2E 72 67 
       62 61 32 00 
0437EB 74 69 6C 65 0975*  fn_dg_3_31: db "tiles/dg_3_31.rgba2",0
       73 2F 64 67 
       5F 33 5F 33 
       31 2E 72 67 
       62 61 32 00 
0437FF 74 69 6C 65 0976*  fn_dg_3_32: db "tiles/dg_3_32.rgba2",0
       73 2F 64 67 
       5F 33 5F 33 
       32 2E 72 67 
       62 61 32 00 
043813 74 69 6C 65 0977*  fn_dg_3_33: db "tiles/dg_3_33.rgba2",0
       73 2F 64 67 
       5F 33 5F 33 
       33 2E 72 67 
       62 61 32 00 
043827 74 69 6C 65 0978*  fn_dg_3_34: db "tiles/dg_3_34.rgba2",0
       73 2F 64 67 
       5F 33 5F 33 
       34 2E 72 67 
       62 61 32 00 
04383B 74 69 6C 65 0979*  fn_dg_4_00: db "tiles/dg_4_00.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       30 2E 72 67 
       62 61 32 00 
04384F 74 69 6C 65 0980*  fn_dg_4_01: db "tiles/dg_4_01.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       31 2E 72 67 
       62 61 32 00 
043863 74 69 6C 65 0981*  fn_dg_4_02: db "tiles/dg_4_02.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       32 2E 72 67 
       62 61 32 00 
043877 74 69 6C 65 0982*  fn_dg_4_03: db "tiles/dg_4_03.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       33 2E 72 67 
       62 61 32 00 
04388B 74 69 6C 65 0983*  fn_dg_4_04: db "tiles/dg_4_04.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       34 2E 72 67 
       62 61 32 00 
04389F 74 69 6C 65 0984*  fn_dg_4_05: db "tiles/dg_4_05.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       35 2E 72 67 
       62 61 32 00 
0438B3 74 69 6C 65 0985*  fn_dg_4_06: db "tiles/dg_4_06.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       36 2E 72 67 
       62 61 32 00 
0438C7 74 69 6C 65 0986*  fn_dg_4_07: db "tiles/dg_4_07.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       37 2E 72 67 
       62 61 32 00 
0438DB 74 69 6C 65 0987*  fn_dg_4_08: db "tiles/dg_4_08.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       38 2E 72 67 
       62 61 32 00 
0438EF 74 69 6C 65 0988*  fn_dg_4_09: db "tiles/dg_4_09.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       39 2E 72 67 
       62 61 32 00 
043903 74 69 6C 65 0989*  fn_dg_4_0A: db "tiles/dg_4_0A.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       41 2E 72 67 
       62 61 32 00 
043917 74 69 6C 65 0990*  fn_dg_4_0B: db "tiles/dg_4_0B.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       42 2E 72 67 
       62 61 32 00 
04392B 74 69 6C 65 0991*  fn_dg_4_0C: db "tiles/dg_4_0C.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       43 2E 72 67 
       62 61 32 00 
04393F 74 69 6C 65 0992*  fn_dg_4_0D: db "tiles/dg_4_0D.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       44 2E 72 67 
       62 61 32 00 
043953 74 69 6C 65 0993*  fn_dg_4_0E: db "tiles/dg_4_0E.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       45 2E 72 67 
       62 61 32 00 
043967 74 69 6C 65 0994*  fn_dg_4_0F: db "tiles/dg_4_0F.rgba2",0
       73 2F 64 67 
       5F 34 5F 30 
       46 2E 72 67 
       62 61 32 00 
04397B 74 69 6C 65 0995*  fn_dg_4_10: db "tiles/dg_4_10.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       30 2E 72 67 
       62 61 32 00 
04398F 74 69 6C 65 0996*  fn_dg_4_11: db "tiles/dg_4_11.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       31 2E 72 67 
       62 61 32 00 
0439A3 74 69 6C 65 0997*  fn_dg_4_12: db "tiles/dg_4_12.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       32 2E 72 67 
       62 61 32 00 
0439B7 74 69 6C 65 0998*  fn_dg_4_13: db "tiles/dg_4_13.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       33 2E 72 67 
       62 61 32 00 
0439CB 74 69 6C 65 0999*  fn_dg_4_14: db "tiles/dg_4_14.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       34 2E 72 67 
       62 61 32 00 
0439DF 74 69 6C 65 1000*  fn_dg_4_15: db "tiles/dg_4_15.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       35 2E 72 67 
       62 61 32 00 
0439F3 74 69 6C 65 1001*  fn_dg_4_16: db "tiles/dg_4_16.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       36 2E 72 67 
       62 61 32 00 
043A07 74 69 6C 65 1002*  fn_dg_4_17: db "tiles/dg_4_17.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       37 2E 72 67 
       62 61 32 00 
043A1B 74 69 6C 65 1003*  fn_dg_4_18: db "tiles/dg_4_18.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       38 2E 72 67 
       62 61 32 00 
043A2F 74 69 6C 65 1004*  fn_dg_4_19: db "tiles/dg_4_19.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       39 2E 72 67 
       62 61 32 00 
043A43 74 69 6C 65 1005*  fn_dg_4_1A: db "tiles/dg_4_1A.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       41 2E 72 67 
       62 61 32 00 
043A57 74 69 6C 65 1006*  fn_dg_4_1B: db "tiles/dg_4_1B.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       42 2E 72 67 
       62 61 32 00 
043A6B 74 69 6C 65 1007*  fn_dg_4_1C: db "tiles/dg_4_1C.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       43 2E 72 67 
       62 61 32 00 
043A7F 74 69 6C 65 1008*  fn_dg_4_1D: db "tiles/dg_4_1D.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       44 2E 72 67 
       62 61 32 00 
043A93 74 69 6C 65 1009*  fn_dg_4_1E: db "tiles/dg_4_1E.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       45 2E 72 67 
       62 61 32 00 
043AA7 74 69 6C 65 1010*  fn_dg_4_1F: db "tiles/dg_4_1F.rgba2",0
       73 2F 64 67 
       5F 34 5F 31 
       46 2E 72 67 
       62 61 32 00 
043ABB 74 69 6C 65 1011*  fn_dg_4_20: db "tiles/dg_4_20.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       30 2E 72 67 
       62 61 32 00 
043ACF 74 69 6C 65 1012*  fn_dg_4_21: db "tiles/dg_4_21.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       31 2E 72 67 
       62 61 32 00 
043AE3 74 69 6C 65 1013*  fn_dg_4_22: db "tiles/dg_4_22.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       32 2E 72 67 
       62 61 32 00 
043AF7 74 69 6C 65 1014*  fn_dg_4_23: db "tiles/dg_4_23.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       33 2E 72 67 
       62 61 32 00 
043B0B 74 69 6C 65 1015*  fn_dg_4_24: db "tiles/dg_4_24.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       34 2E 72 67 
       62 61 32 00 
043B1F 74 69 6C 65 1016*  fn_dg_4_25: db "tiles/dg_4_25.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       35 2E 72 67 
       62 61 32 00 
043B33 74 69 6C 65 1017*  fn_dg_4_26: db "tiles/dg_4_26.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       36 2E 72 67 
       62 61 32 00 
043B47 74 69 6C 65 1018*  fn_dg_4_27: db "tiles/dg_4_27.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       37 2E 72 67 
       62 61 32 00 
043B5B 74 69 6C 65 1019*  fn_dg_4_28: db "tiles/dg_4_28.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       38 2E 72 67 
       62 61 32 00 
043B6F 74 69 6C 65 1020*  fn_dg_4_29: db "tiles/dg_4_29.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       39 2E 72 67 
       62 61 32 00 
043B83 74 69 6C 65 1021*  fn_dg_4_2A: db "tiles/dg_4_2A.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       41 2E 72 67 
       62 61 32 00 
043B97 74 69 6C 65 1022*  fn_dg_4_2B: db "tiles/dg_4_2B.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       42 2E 72 67 
       62 61 32 00 
043BAB 74 69 6C 65 1023*  fn_dg_4_2C: db "tiles/dg_4_2C.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       43 2E 72 67 
       62 61 32 00 
043BBF 74 69 6C 65 1024*  fn_dg_4_2D: db "tiles/dg_4_2D.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       44 2E 72 67 
       62 61 32 00 
043BD3 74 69 6C 65 1025*  fn_dg_4_2E: db "tiles/dg_4_2E.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       45 2E 72 67 
       62 61 32 00 
043BE7 74 69 6C 65 1026*  fn_dg_4_2F: db "tiles/dg_4_2F.rgba2",0
       73 2F 64 67 
       5F 34 5F 32 
       46 2E 72 67 
       62 61 32 00 
043BFB 74 69 6C 65 1027*  fn_dg_4_30: db "tiles/dg_4_30.rgba2",0
       73 2F 64 67 
       5F 34 5F 33 
       30 2E 72 67 
       62 61 32 00 
043C0F 74 69 6C 65 1028*  fn_dg_4_31: db "tiles/dg_4_31.rgba2",0
       73 2F 64 67 
       5F 34 5F 33 
       31 2E 72 67 
       62 61 32 00 
043C23 74 69 6C 65 1029*  fn_dg_5_00: db "tiles/dg_5_00.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       30 2E 72 67 
       62 61 32 00 
043C37 74 69 6C 65 1030*  fn_dg_5_01: db "tiles/dg_5_01.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       31 2E 72 67 
       62 61 32 00 
043C4B 74 69 6C 65 1031*  fn_dg_5_02: db "tiles/dg_5_02.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       32 2E 72 67 
       62 61 32 00 
043C5F 74 69 6C 65 1032*  fn_dg_5_03: db "tiles/dg_5_03.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       33 2E 72 67 
       62 61 32 00 
043C73 74 69 6C 65 1033*  fn_dg_5_04: db "tiles/dg_5_04.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       34 2E 72 67 
       62 61 32 00 
043C87 74 69 6C 65 1034*  fn_dg_5_05: db "tiles/dg_5_05.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       35 2E 72 67 
       62 61 32 00 
043C9B 74 69 6C 65 1035*  fn_dg_5_06: db "tiles/dg_5_06.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       36 2E 72 67 
       62 61 32 00 
043CAF 74 69 6C 65 1036*  fn_dg_5_07: db "tiles/dg_5_07.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       37 2E 72 67 
       62 61 32 00 
043CC3 74 69 6C 65 1037*  fn_dg_5_08: db "tiles/dg_5_08.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       38 2E 72 67 
       62 61 32 00 
043CD7 74 69 6C 65 1038*  fn_dg_5_09: db "tiles/dg_5_09.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       39 2E 72 67 
       62 61 32 00 
043CEB 74 69 6C 65 1039*  fn_dg_5_0A: db "tiles/dg_5_0A.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       41 2E 72 67 
       62 61 32 00 
043CFF 74 69 6C 65 1040*  fn_dg_5_0B: db "tiles/dg_5_0B.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       42 2E 72 67 
       62 61 32 00 
043D13 74 69 6C 65 1041*  fn_dg_5_0C: db "tiles/dg_5_0C.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       43 2E 72 67 
       62 61 32 00 
043D27 74 69 6C 65 1042*  fn_dg_5_0D: db "tiles/dg_5_0D.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       44 2E 72 67 
       62 61 32 00 
043D3B 74 69 6C 65 1043*  fn_dg_5_0E: db "tiles/dg_5_0E.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       45 2E 72 67 
       62 61 32 00 
043D4F 74 69 6C 65 1044*  fn_dg_5_0F: db "tiles/dg_5_0F.rgba2",0
       73 2F 64 67 
       5F 35 5F 30 
       46 2E 72 67 
       62 61 32 00 
043D63 74 69 6C 65 1045*  fn_dg_5_10: db "tiles/dg_5_10.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       30 2E 72 67 
       62 61 32 00 
043D77 74 69 6C 65 1046*  fn_dg_5_11: db "tiles/dg_5_11.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       31 2E 72 67 
       62 61 32 00 
043D8B 74 69 6C 65 1047*  fn_dg_5_12: db "tiles/dg_5_12.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       32 2E 72 67 
       62 61 32 00 
043D9F 74 69 6C 65 1048*  fn_dg_5_13: db "tiles/dg_5_13.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       33 2E 72 67 
       62 61 32 00 
043DB3 74 69 6C 65 1049*  fn_dg_5_14: db "tiles/dg_5_14.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       34 2E 72 67 
       62 61 32 00 
043DC7 74 69 6C 65 1050*  fn_dg_5_15: db "tiles/dg_5_15.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       35 2E 72 67 
       62 61 32 00 
043DDB 74 69 6C 65 1051*  fn_dg_5_16: db "tiles/dg_5_16.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       36 2E 72 67 
       62 61 32 00 
043DEF 74 69 6C 65 1052*  fn_dg_5_17: db "tiles/dg_5_17.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       37 2E 72 67 
       62 61 32 00 
043E03 74 69 6C 65 1053*  fn_dg_5_18: db "tiles/dg_5_18.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       38 2E 72 67 
       62 61 32 00 
043E17 74 69 6C 65 1054*  fn_dg_5_19: db "tiles/dg_5_19.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       39 2E 72 67 
       62 61 32 00 
043E2B 74 69 6C 65 1055*  fn_dg_5_1A: db "tiles/dg_5_1A.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       41 2E 72 67 
       62 61 32 00 
043E3F 74 69 6C 65 1056*  fn_dg_5_1B: db "tiles/dg_5_1B.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       42 2E 72 67 
       62 61 32 00 
043E53 74 69 6C 65 1057*  fn_dg_5_1C: db "tiles/dg_5_1C.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       43 2E 72 67 
       62 61 32 00 
043E67 74 69 6C 65 1058*  fn_dg_5_1D: db "tiles/dg_5_1D.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       44 2E 72 67 
       62 61 32 00 
043E7B 74 69 6C 65 1059*  fn_dg_5_1E: db "tiles/dg_5_1E.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       45 2E 72 67 
       62 61 32 00 
043E8F 74 69 6C 65 1060*  fn_dg_5_1F: db "tiles/dg_5_1F.rgba2",0
       73 2F 64 67 
       5F 35 5F 31 
       46 2E 72 67 
       62 61 32 00 
043EA3 74 69 6C 65 1061*  fn_dg_5_20: db "tiles/dg_5_20.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       30 2E 72 67 
       62 61 32 00 
043EB7 74 69 6C 65 1062*  fn_dg_5_21: db "tiles/dg_5_21.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       31 2E 72 67 
       62 61 32 00 
043ECB 74 69 6C 65 1063*  fn_dg_5_22: db "tiles/dg_5_22.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       32 2E 72 67 
       62 61 32 00 
043EDF 74 69 6C 65 1064*  fn_dg_5_23: db "tiles/dg_5_23.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       33 2E 72 67 
       62 61 32 00 
043EF3 74 69 6C 65 1065*  fn_dg_5_24: db "tiles/dg_5_24.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       34 2E 72 67 
       62 61 32 00 
043F07 74 69 6C 65 1066*  fn_dg_5_25: db "tiles/dg_5_25.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       35 2E 72 67 
       62 61 32 00 
043F1B 74 69 6C 65 1067*  fn_dg_5_26: db "tiles/dg_5_26.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       36 2E 72 67 
       62 61 32 00 
043F2F 74 69 6C 65 1068*  fn_dg_5_27: db "tiles/dg_5_27.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       37 2E 72 67 
       62 61 32 00 
043F43 74 69 6C 65 1069*  fn_dg_5_28: db "tiles/dg_5_28.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       38 2E 72 67 
       62 61 32 00 
043F57 74 69 6C 65 1070*  fn_dg_5_29: db "tiles/dg_5_29.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       39 2E 72 67 
       62 61 32 00 
043F6B 74 69 6C 65 1071*  fn_dg_5_2A: db "tiles/dg_5_2A.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       41 2E 72 67 
       62 61 32 00 
043F7F 74 69 6C 65 1072*  fn_dg_5_2B: db "tiles/dg_5_2B.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       42 2E 72 67 
       62 61 32 00 
043F93 74 69 6C 65 1073*  fn_dg_5_2C: db "tiles/dg_5_2C.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       43 2E 72 67 
       62 61 32 00 
043FA7 74 69 6C 65 1074*  fn_dg_5_2D: db "tiles/dg_5_2D.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       44 2E 72 67 
       62 61 32 00 
043FBB 74 69 6C 65 1075*  fn_dg_5_2E: db "tiles/dg_5_2E.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       45 2E 72 67 
       62 61 32 00 
043FCF 74 69 6C 65 1076*  fn_dg_5_2F: db "tiles/dg_5_2F.rgba2",0
       73 2F 64 67 
       5F 35 5F 32 
       46 2E 72 67 
       62 61 32 00 
043FE3 74 69 6C 65 1077*  fn_dg_5_30: db "tiles/dg_5_30.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       30 2E 72 67 
       62 61 32 00 
043FF7 74 69 6C 65 1078*  fn_dg_5_31: db "tiles/dg_5_31.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       31 2E 72 67 
       62 61 32 00 
04400B 74 69 6C 65 1079*  fn_dg_5_32: db "tiles/dg_5_32.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       32 2E 72 67 
       62 61 32 00 
04401F 74 69 6C 65 1080*  fn_dg_5_33: db "tiles/dg_5_33.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       33 2E 72 67 
       62 61 32 00 
044033 74 69 6C 65 1081*  fn_dg_5_34: db "tiles/dg_5_34.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       34 2E 72 67 
       62 61 32 00 
044047 74 69 6C 65 1082*  fn_dg_5_35: db "tiles/dg_5_35.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       35 2E 72 67 
       62 61 32 00 
04405B 74 69 6C 65 1083*  fn_dg_5_36: db "tiles/dg_5_36.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       36 2E 72 67 
       62 61 32 00 
04406F 74 69 6C 65 1084*  fn_dg_5_37: db "tiles/dg_5_37.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       37 2E 72 67 
       62 61 32 00 
044083 74 69 6C 65 1085*  fn_dg_5_38: db "tiles/dg_5_38.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       38 2E 72 67 
       62 61 32 00 
044097 74 69 6C 65 1086*  fn_dg_5_39: db "tiles/dg_5_39.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       39 2E 72 67 
       62 61 32 00 
0440AB 74 69 6C 65 1087*  fn_dg_5_3A: db "tiles/dg_5_3A.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       41 2E 72 67 
       62 61 32 00 
0440BF 74 69 6C 65 1088*  fn_dg_5_3B: db "tiles/dg_5_3B.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       42 2E 72 67 
       62 61 32 00 
0440D3 74 69 6C 65 1089*  fn_dg_5_3C: db "tiles/dg_5_3C.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       43 2E 72 67 
       62 61 32 00 
0440E7 74 69 6C 65 1090*  fn_dg_5_3D: db "tiles/dg_5_3D.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       44 2E 72 67 
       62 61 32 00 
0440FB 74 69 6C 65 1091*  fn_dg_5_3E: db "tiles/dg_5_3E.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       45 2E 72 67 
       62 61 32 00 
04410F 74 69 6C 65 1092*  fn_dg_5_3F: db "tiles/dg_5_3F.rgba2",0
       73 2F 64 67 
       5F 35 5F 33 
       46 2E 72 67 
       62 61 32 00 
044123 74 69 6C 65 1093*  fn_dg_5_40: db "tiles/dg_5_40.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       30 2E 72 67 
       62 61 32 00 
044137 74 69 6C 65 1094*  fn_dg_5_41: db "tiles/dg_5_41.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       31 2E 72 67 
       62 61 32 00 
04414B 74 69 6C 65 1095*  fn_dg_5_42: db "tiles/dg_5_42.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       32 2E 72 67 
       62 61 32 00 
04415F 74 69 6C 65 1096*  fn_dg_5_43: db "tiles/dg_5_43.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       33 2E 72 67 
       62 61 32 00 
044173 74 69 6C 65 1097*  fn_dg_5_44: db "tiles/dg_5_44.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       34 2E 72 67 
       62 61 32 00 
044187 74 69 6C 65 1098*  fn_dg_5_45: db "tiles/dg_5_45.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       35 2E 72 67 
       62 61 32 00 
04419B 74 69 6C 65 1099*  fn_dg_5_46: db "tiles/dg_5_46.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       36 2E 72 67 
       62 61 32 00 
0441AF 74 69 6C 65 1100*  fn_dg_5_47: db "tiles/dg_5_47.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       37 2E 72 67 
       62 61 32 00 
0441C3 74 69 6C 65 1101*  fn_dg_5_48: db "tiles/dg_5_48.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       38 2E 72 67 
       62 61 32 00 
0441D7 74 69 6C 65 1102*  fn_dg_5_49: db "tiles/dg_5_49.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       39 2E 72 67 
       62 61 32 00 
0441EB 74 69 6C 65 1103*  fn_dg_5_4A: db "tiles/dg_5_4A.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       41 2E 72 67 
       62 61 32 00 
0441FF 74 69 6C 65 1104*  fn_dg_5_4B: db "tiles/dg_5_4B.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       42 2E 72 67 
       62 61 32 00 
044213 74 69 6C 65 1105*  fn_dg_5_4C: db "tiles/dg_5_4C.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       43 2E 72 67 
       62 61 32 00 
044227 74 69 6C 65 1106*  fn_dg_5_4D: db "tiles/dg_5_4D.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       44 2E 72 67 
       62 61 32 00 
04423B 74 69 6C 65 1107*  fn_dg_5_4E: db "tiles/dg_5_4E.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       45 2E 72 67 
       62 61 32 00 
04424F 74 69 6C 65 1108*  fn_dg_5_4F: db "tiles/dg_5_4F.rgba2",0
       73 2F 64 67 
       5F 35 5F 34 
       46 2E 72 67 
       62 61 32 00 
044263 74 69 6C 65 1109*  fn_dg_5_50: db "tiles/dg_5_50.rgba2",0
       73 2F 64 67 
       5F 35 5F 35 
       30 2E 72 67 
       62 61 32 00 
044277 74 69 6C 65 1110*  fn_dg_5_51: db "tiles/dg_5_51.rgba2",0
       73 2F 64 67 
       5F 35 5F 35 
       31 2E 72 67 
       62 61 32 00 
04428B 74 69 6C 65 1111*  fn_dg_5_52: db "tiles/dg_5_52.rgba2",0
       73 2F 64 67 
       5F 35 5F 35 
       32 2E 72 67 
       62 61 32 00 
04429F 74 69 6C 65 1112*  fn_dg_5_53: db "tiles/dg_5_53.rgba2",0
       73 2F 64 67 
       5F 35 5F 35 
       33 2E 72 67 
       62 61 32 00 
0442B3 74 69 6C 65 1113*  fn_dg_5_54: db "tiles/dg_5_54.rgba2",0
       73 2F 64 67 
       5F 35 5F 35 
       34 2E 72 67 
       62 61 32 00 
0442C7             0035       include "images_sprites.inc"
0442C7             0001*  ; Generated by make_images.py
0442C7             0002*  
0442C7             0003*  sprites_num_images: equ 79
0442C7             0004*  
0442C7             0005*  ; buffer_ids:
0442C7             0006*  BUF_CRATER: equ 256
0442C7             0007*  BUF_EXPLOSION_A: equ 257
0442C7             0008*  BUF_EXPLOSION_B: equ 258
0442C7             0009*  BUF_EXPLOSION_C: equ 259
0442C7             0010*  BUF_EXPLOSION_D: equ 260
0442C7             0011*  BUF_EXPLOSION_E: equ 261
0442C7             0012*  BUF_FIREBALL_A: equ 262
0442C7             0013*  BUF_FIREBALL_B: equ 263
0442C7             0014*  BUF_LASER_A: equ 264
0442C7             0015*  BUF_LASER_B: equ 265
0442C7             0016*  BUF_PAD: equ 266
0442C7             0017*  BUF_SEEKER_000: equ 267
0442C7             0018*  BUF_SEEKER_008: equ 268
0442C7             0019*  BUF_SEEKER_016: equ 269
0442C7             0020*  BUF_SEEKER_024: equ 270
0442C7             0021*  BUF_SEEKER_032: equ 271
0442C7             0022*  BUF_SEEKER_040: equ 272
0442C7             0023*  BUF_SEEKER_048: equ 273
0442C7             0024*  BUF_SEEKER_056: equ 274
0442C7             0025*  BUF_SEEKER_064: equ 275
0442C7             0026*  BUF_SEEKER_072: equ 276
0442C7             0027*  BUF_SEEKER_080: equ 277
0442C7             0028*  BUF_SEEKER_088: equ 278
0442C7             0029*  BUF_SEEKER_096: equ 279
0442C7             0030*  BUF_SEEKER_104: equ 280
0442C7             0031*  BUF_SEEKER_112: equ 281
0442C7             0032*  BUF_SEEKER_120: equ 282
0442C7             0033*  BUF_SEEKER_128: equ 283
0442C7             0034*  BUF_SEEKER_136: equ 284
0442C7             0035*  BUF_SEEKER_144: equ 285
0442C7             0036*  BUF_SEEKER_152: equ 286
0442C7             0037*  BUF_SEEKER_160: equ 287
0442C7             0038*  BUF_SEEKER_168: equ 288
0442C7             0039*  BUF_SEEKER_176: equ 289
0442C7             0040*  BUF_SEEKER_184: equ 290
0442C7             0041*  BUF_SEEKER_192: equ 291
0442C7             0042*  BUF_SEEKER_200: equ 292
0442C7             0043*  BUF_SEEKER_208: equ 293
0442C7             0044*  BUF_SEEKER_216: equ 294
0442C7             0045*  BUF_SEEKER_224: equ 295
0442C7             0046*  BUF_SEEKER_232: equ 296
0442C7             0047*  BUF_SEEKER_240: equ 297
0442C7             0048*  BUF_SEEKER_248: equ 298
0442C7             0049*  BUF_SHIP_0L: equ 299
0442C7             0050*  BUF_SHIP_1C: equ 300
0442C7             0051*  BUF_SHIP_2R: equ 301
0442C7             0052*  BUF_SHIP_SMALL: equ 302
0442C7             0053*  BUF_TURRET_000: equ 303
0442C7             0054*  BUF_TURRET_008: equ 304
0442C7             0055*  BUF_TURRET_016: equ 305
0442C7             0056*  BUF_TURRET_024: equ 306
0442C7             0057*  BUF_TURRET_032: equ 307
0442C7             0058*  BUF_TURRET_040: equ 308
0442C7             0059*  BUF_TURRET_048: equ 309
0442C7             0060*  BUF_TURRET_056: equ 310
0442C7             0061*  BUF_TURRET_064: equ 311
0442C7             0062*  BUF_TURRET_072: equ 312
0442C7             0063*  BUF_TURRET_080: equ 313
0442C7             0064*  BUF_TURRET_088: equ 314
0442C7             0065*  BUF_TURRET_096: equ 315
0442C7             0066*  BUF_TURRET_104: equ 316
0442C7             0067*  BUF_TURRET_112: equ 317
0442C7             0068*  BUF_TURRET_120: equ 318
0442C7             0069*  BUF_TURRET_128: equ 319
0442C7             0070*  BUF_TURRET_136: equ 320
0442C7             0071*  BUF_TURRET_144: equ 321
0442C7             0072*  BUF_TURRET_152: equ 322
0442C7             0073*  BUF_TURRET_160: equ 323
0442C7             0074*  BUF_TURRET_168: equ 324
0442C7             0075*  BUF_TURRET_176: equ 325
0442C7             0076*  BUF_TURRET_184: equ 326
0442C7             0077*  BUF_TURRET_192: equ 327
0442C7             0078*  BUF_TURRET_200: equ 328
0442C7             0079*  BUF_TURRET_208: equ 329
0442C7             0080*  BUF_TURRET_216: equ 330
0442C7             0081*  BUF_TURRET_224: equ 331
0442C7             0082*  BUF_TURRET_232: equ 332
0442C7             0083*  BUF_TURRET_240: equ 333
0442C7             0084*  BUF_TURRET_248: equ 334
0442C7             0085*  
0442C7             0086*  sprites_image_list: ; type; width; height; size; filename; bufferId:
0442C7 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       55 48 04 00 
       01 00       
0442D9 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       6A 48 04 01 
       01 00       
0442EB 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       84 48 04 02 
       01 00       
0442FD 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       9E 48 04 03 
       01 00       
04430F 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       B8 48 04 04 
       01 00       
044321 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       D2 48 04 05 
       01 00       
044333 01 00 00 07 0093*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       EC 48 04 06 
       01 00       
044345 01 00 00 07 0094*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       05 49 04 07 
       01 00       
044357 01 00 00 05 0095*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       1E 49 04 08 
       01 00       
044369 01 00 00 05 0096*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       34 49 04 09 
       01 00       
04437B 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       4A 49 04 0A 
       01 00       
04438D 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       5C 49 04 0B 
       01 00       
04439F 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       75 49 04 0C 
       01 00       
0443B1 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       8E 49 04 0D 
       01 00       
0443C3 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       A7 49 04 0E 
       01 00       
0443D5 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       C0 49 04 0F 
       01 00       
0443E7 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       D9 49 04 10 
       01 00       
0443F9 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       F2 49 04 11 
       01 00       
04440B 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       0B 4A 04 12 
       01 00       
04441D 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       24 4A 04 13 
       01 00       
04442F 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       3D 4A 04 14 
       01 00       
044441 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       56 4A 04 15 
       01 00       
044453 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       6F 4A 04 16 
       01 00       
044465 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       88 4A 04 17 
       01 00       
044477 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       A1 4A 04 18 
       01 00       
044489 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       BA 4A 04 19 
       01 00       
04449B 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       D3 4A 04 1A 
       01 00       
0444AD 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       EC 4A 04 1B 
       01 00       
0444BF 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       05 4B 04 1C 
       01 00       
0444D1 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       1E 4B 04 1D 
       01 00       
0444E3 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       37 4B 04 1E 
       01 00       
0444F5 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       50 4B 04 1F 
       01 00       
044507 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       69 4B 04 20 
       01 00       
044519 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       82 4B 04 21 
       01 00       
04452B 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       9B 4B 04 22 
       01 00       
04453D 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       B4 4B 04 23 
       01 00       
04454F 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       CD 4B 04 24 
       01 00       
044561 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       E6 4B 04 25 
       01 00       
044573 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       FF 4B 04 26 
       01 00       
044585 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       18 4C 04 27 
       01 00       
044597 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       31 4C 04 28 
       01 00       
0445A9 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       4A 4C 04 29 
       01 00       
0445BB 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       63 4C 04 2A 
       01 00       
0445CD 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       7C 4C 04 2B 
       01 00       
0445DF 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       92 4C 04 2C 
       01 00       
0445F1 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       A8 4C 04 2D 
       01 00       
044603 01 00 00 08 0133*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       BE 4C 04 2E 
       01 00       
044615 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       D7 4C 04 2F 
       01 00       
044627 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       F0 4C 04 30 
       01 00       
044639 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       09 4D 04 31 
       01 00       
04464B 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       22 4D 04 32 
       01 00       
04465D 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       3B 4D 04 33 
       01 00       
04466F 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       54 4D 04 34 
       01 00       
044681 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       6D 4D 04 35 
       01 00       
044693 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       86 4D 04 36 
       01 00       
0446A5 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       9F 4D 04 37 
       01 00       
0446B7 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       B8 4D 04 38 
       01 00       
0446C9 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       D1 4D 04 39 
       01 00       
0446DB 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       EA 4D 04 3A 
       01 00       
0446ED 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       03 4E 04 3B 
       01 00       
0446FF 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       1C 4E 04 3C 
       01 00       
044711 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       35 4E 04 3D 
       01 00       
044723 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       4E 4E 04 3E 
       01 00       
044735 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       67 4E 04 3F 
       01 00       
044747 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       80 4E 04 40 
       01 00       
044759 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       99 4E 04 41 
       01 00       
04476B 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       B2 4E 04 42 
       01 00       
04477D 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       CB 4E 04 43 
       01 00       
04478F 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       E4 4E 04 44 
       01 00       
0447A1 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       FD 4E 04 45 
       01 00       
0447B3 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       16 4F 04 46 
       01 00       
0447C5 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       2F 4F 04 47 
       01 00       
0447D7 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       48 4F 04 48 
       01 00       
0447E9 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       61 4F 04 49 
       01 00       
0447FB 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       7A 4F 04 4A 
       01 00       
04480D 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       93 4F 04 4B 
       01 00       
04481F 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       AC 4F 04 4C 
       01 00       
044831 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       C5 4F 04 4D 
       01 00       
044843 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       DE 4F 04 4E 
       01 00       
044855             0166*  
044855             0167*  ; files_list: ; filename:
044855 73 70 72 69 0168*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
04486A 73 70 72 69 0169*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044884 73 70 72 69 0170*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
04489E 73 70 72 69 0171*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
0448B8 73 70 72 69 0172*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0448D2 73 70 72 69 0173*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
0448EC 73 70 72 69 0174*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044905 73 70 72 69 0175*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
04491E 73 70 72 69 0176*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044934 73 70 72 69 0177*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04494A 73 70 72 69 0178*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04495C 73 70 72 69 0179*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044975 73 70 72 69 0180*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04498E 73 70 72 69 0181*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0449A7 73 70 72 69 0182*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0449C0 73 70 72 69 0183*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0449D9 73 70 72 69 0184*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0449F2 73 70 72 69 0185*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044A0B 73 70 72 69 0186*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044A24 73 70 72 69 0187*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044A3D 73 70 72 69 0188*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044A56 73 70 72 69 0189*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044A6F 73 70 72 69 0190*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044A88 73 70 72 69 0191*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044AA1 73 70 72 69 0192*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044ABA 73 70 72 69 0193*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044AD3 73 70 72 69 0194*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044AEC 73 70 72 69 0195*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044B05 73 70 72 69 0196*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044B1E 73 70 72 69 0197*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044B37 73 70 72 69 0198*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044B50 73 70 72 69 0199*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044B69 73 70 72 69 0200*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044B82 73 70 72 69 0201*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044B9B 73 70 72 69 0202*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044BB4 73 70 72 69 0203*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044BCD 73 70 72 69 0204*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044BE6 73 70 72 69 0205*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044BFF 73 70 72 69 0206*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044C18 73 70 72 69 0207*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044C31 73 70 72 69 0208*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044C4A 73 70 72 69 0209*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044C63 73 70 72 69 0210*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044C7C 73 70 72 69 0211*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
044C92 73 70 72 69 0212*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044CA8 73 70 72 69 0213*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
044CBE 73 70 72 69 0214*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
044CD7 73 70 72 69 0215*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044CF0 73 70 72 69 0216*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044D09 73 70 72 69 0217*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044D22 73 70 72 69 0218*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044D3B 73 70 72 69 0219*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044D54 73 70 72 69 0220*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044D6D 73 70 72 69 0221*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044D86 73 70 72 69 0222*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044D9F 73 70 72 69 0223*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044DB8 73 70 72 69 0224*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044DD1 73 70 72 69 0225*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044DEA 73 70 72 69 0226*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044E03 73 70 72 69 0227*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044E1C 73 70 72 69 0228*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044E35 73 70 72 69 0229*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044E4E 73 70 72 69 0230*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044E67 73 70 72 69 0231*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044E80 73 70 72 69 0232*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044E99 73 70 72 69 0233*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044EB2 73 70 72 69 0234*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044ECB 73 70 72 69 0235*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044EE4 73 70 72 69 0236*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044EFD 73 70 72 69 0237*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044F16 73 70 72 69 0238*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044F2F 73 70 72 69 0239*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044F48 73 70 72 69 0240*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044F61 73 70 72 69 0241*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044F7A 73 70 72 69 0242*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044F93 73 70 72 69 0243*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044FAC 73 70 72 69 0244*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044FC5 73 70 72 69 0245*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044FDE 73 70 72 69 0246*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044FF7             0036   
044FF7             0037   ; --- INITIALIZATION ---
044FF7             0038   init:
044FF7             0039   ; clear all buffers
044FF7 CD AF 09 04 0040       call vdu_clear_all_buffers
044FFB             0041   
044FFB             0042   ; set up the display
044FFB 3E 08       0043       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
044FFD CD 99 08 04 0044       call vdu_set_screen_mode
045001 AF          0045       xor a
045002 CD AA 08 04 0046       call vdu_set_scaling
045006             0047   
045006             0048   
045006 C9          0049       ret
045007             0050   
045007             0051   ; --- MAIN PROGRAM ---
045007             0052   main:
045007             0053   load_sprite_images:
045007             0054   ; initialize image loading variables
045007 21 00 00 00 0055       ld hl,0
04500B 22 3B 50 04 0056       ld (cur_file_idx),hl
04500F 21 C7 42 04 0057       ld hl,sprites_image_list
045013 22 38 50 04 0058       ld (cur_image_list),hl
045017 01 4F 00 00 0059       ld bc,sprites_num_images
04501B             0060   ; load images
04501B CD 44 50 04 0061       call img_load_main
04501F             0062   load_tilesets:
04501F             0063   ; initialize image loading variables
04501F 21 00 00 00 0064       ld hl,0
045023 22 3B 50 04 0065       ld (cur_file_idx),hl
045027 21 27 0C 04 0066       ld hl,tiles_dg_image_list
04502B 22 38 50 04 0067       ld (cur_image_list),hl
04502F 01 70 01 00 0068       ld bc,tiles_dg_num_images
045033             0069   ; load images
045033 CD 44 50 04 0070       call img_load_main
045037 C9          0071       ret
045038             0072   
045038             0073   image_type: equ 0
045038             0074   image_width: equ image_type+3
045038             0075   image_height: equ image_width+3
045038             0076   image_filesize: equ image_height+3
045038             0077   image_filename: equ image_filesize+3
045038             0078   image_bufferId: equ image_filename+3
045038             0079   image_record_size: equ image_bufferId+3
045038             0080   
045038 00 00 00    0081   cur_image_list: dl 0
04503B 00 00 00    0082   cur_file_idx: dl 0
04503E 00 00 00    0083   cur_filename: dl 0
045041 00 00 00    0084   cur_buffer_id: dl 0
045044             0085   
045044             0086   ; inputs: bc is the number of images to load, cur_image_list set
045044             0087   img_load_main:
045044 AF          0088       xor a
045045 32 3B 50 04 0089       ld (cur_file_idx),a
045049             0090   
045049             0091   img_load_main_loop:
045049             0092   ; back up loop counter
045049 C5          0093       push bc
04504A             0094   
04504A             0095   ; load the next image
04504A CD 81 50 04 0096       call load_next_image
04504E             0097   
04504E             0098   ; draw the most recently loaded image
04504E CD D0 07 04 0099       call vdu_cls
045052 2A 41 50 04 0100   	ld hl,(cur_buffer_id)
045056 CD BD 08 04 0101   	call vdu_buff_select
04505A 01 40 00 00 0102   	ld bc,64
04505E 11 40 00 00 0103   	ld de,64
045062 CD 86 0B 04 0104   	call vdu_plot_bmp
045066             0105   
045066             0106   ; print current filename
045066 2A 3E 50 04 0107       ld hl,(cur_filename)
04506A CD 77 00 04 0108       call printString
04506E             0109   
04506E             0110   ; WAIT FOR KEY PRESS
04506E CD 15 06 04 0111       call waitKeypress
045072             0112   
045072             0113   ; decrement loop counter
045072 C1          0114       pop bc
045073 0B          0115       dec bc
045074 79          0116       ld a,c
045075 B7          0117       or a
045076 C2 49 50 04 0118       jp nz,img_load_main_loop
04507A 78          0119       ld a,b
04507B B7          0120       or a
04507C C2 49 50 04 0121       jp nz,img_load_main_loop
045080 C9          0122       ret
045081             0123   
045081             0124   load_next_image:
045081 16 12       0125       ld d,image_record_size
045083 3A 3B 50 04 0126       ld a,(cur_file_idx)
045087 5F          0127       ld e,a
045088 ED 5C       0128       mlt de
04508A FD 2A 38 50 0129       ld iy,(cur_image_list)
       04          
04508F FD 19       0130       add iy,de
045091             0131   
045091 FD 7E 00    0132       ld a,(iy+image_type) ; get image type
045094 FD 07 03    0133       ld bc,(iy+image_width) ; get image width
045097 FD 17 06    0134       ld de,(iy+image_height) ; get image height
04509A FD 31 09    0135       ld ix,(iy+image_filesize) ; get image file size
04509D FD 27 0F    0136       ld hl,(iy+image_bufferId) ; get image bufferId
0450A0 22 41 50 04 0137       ld (cur_buffer_id),hl
0450A4 FD 37 0C    0138       ld iy,(iy+image_filename) ; get image filename
0450A7 FD 22 3E 50 0139       ld (cur_filename),iy
       04          
0450AC CD DB 09 04 0140       call vdu_load_img
0450B0 FD 21 3B 50 0141       ld iy,cur_file_idx
       04          
0450B5 FD 34 00    0142       inc (iy)
0450B8 C9          0143       ret

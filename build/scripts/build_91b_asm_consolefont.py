import os
import csv
from PIL import Image
import shutil

def process_character_data(img, font_width, font_height, num_chars_per_row):
    """Extract character data from an image and convert it into byte format."""
    data = []
    num_chars_total = num_chars_per_row ** 2  # Total number of characters (16x16 grid)

    for char_index in range(num_chars_total):
        # Calculate the x, y offset for each character in the grid
        char_x = (char_index % num_chars_per_row) * font_width
        char_y = (char_index // num_chars_per_row) * font_height
        
        # Extract the pixel data for this character
        for y in range(font_height):
            row_data = 0
            for x in range(font_width):
                pixel = img.getpixel((char_x + x, char_y + y))
                # White (255) is foreground (set bit), Black (0) is background (clear bit)
                if pixel == 255:  # Set bit if pixel is white (foreground)
                    row_data |= (1 << (7 - (x % 8)))

                # Append row_data as a byte when 8 bits are processed or at end of row
                if (x + 1) % 8 == 0 or x == font_width - 1:
                    data.append(row_data)
                    row_data = 0  # Reset for the next row
    return data

def make_fonts(asm_fonts_filepath, originals_dir, target_dir, metadata_filepath):
    # Initialize variables
    num_fonts = 0
    font_list = []
    files_list = []
    index_list = []

    # Ensure target directory exists
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    # Read the CSV metadata file for the true font width and height (used only for assembly generation)
    metadata = {}
    with open(metadata_filepath, mode='r') as csvfile:
        csvreader = csv.reader(csvfile)
        for row in csvreader:
            font_name, true_font_width, font_height = row
            metadata[font_name] = (int(true_font_width), int(font_height))

    # Scan the source directory for all .png files
    font_filenames = [f for f in os.listdir(originals_dir) if f.endswith('.png')]
    font_filenames.sort()

    # Process the fonts
    for index, font_filename in enumerate(font_filenames):
        # Open the .png image and get its dimensions
        img = Image.open(os.path.join(originals_dir, font_filename)).convert("L")  # Convert to grayscale
        img_width, img_height = img.size

        # Assume the font dimensions are 16 characters per row (for 256 characters, that would be 16x16 grid)
        num_chars_per_row = 16
        font_width = img_width // num_chars_per_row
        font_height = img_height // num_chars_per_row

        # Extract the base file name without extension and replace '-' with '_'
        file_name = os.path.splitext(font_filename)[0].replace('-', '_')

        # Original base name with hyphens (to locate the correct subdirectory)
        original_base_name = os.path.splitext(font_filename)[0]

        # Process the image to extract character data in the correct byte order
        character_data = process_character_data(img, font_width, font_height, num_chars_per_row)

        # Write the character data to the .font file in the target directory (using modified file name)
        target_font_file = os.path.join(target_dir, f'{file_name}.font')
        with open(target_font_file, 'wb') as f:
            f.write(bytearray(character_data))

        print(f"Generated {target_font_file} from {font_filename}")

        # Calculate the font file size (number of bytes for 256 characters)
        font_filesize = len(character_data)

        # Add to index list (modified font name with index)
        index_list.append(f'{file_name}: equ {index}\n')

        # Use the true font width and height from metadata for assembly file
        true_font_width, true_font_height = metadata.get(original_base_name, (font_width, font_height))

        # Add to font list (true width and height from metadata)
        font_list.append(f'\tdl {true_font_width}, {true_font_height}, {font_filesize}, fn_{file_name}\n')

        # Add the file to the file list (corresponding .font file path)
        files_list.append(f'fn_{file_name}: db "cfonts/{file_name}.font",0 \n')

        num_fonts += 1

    # Write the assembly file
    with open(asm_fonts_filepath, 'w') as f:
        f.write(f'; Generated by build_91b_asm_cfont.py\n\n')

        f.write("\t align 4\n\n")

        f.write(f'num_fonts: equ {num_fonts}\n\n')

        # Write index of equ's
        f.write(f'; Index list:\n')
        f.write(''.join(index_list))
        f.write(f'\n')

        # Write font list (true width and height from metadata)
        f.write(f'font_list: ; width; height; filesize; filename;:\n')
        f.write(''.join(font_list))
        f.write(f'\n')

        # Write files list
        f.write(f'; files_list: ; filename:\n')
        f.write(''.join(files_list))

if __name__ == '__main__':
    asm_fonts_filepath = 'src/asm/fonts.inc'
    originals_dir = 'src/assets/cfonts'
    target_dir = 'tgt/cfonts'
    metadata_filepath = 'src/assets/cfonts/font_metadata.csv'

    make_fonts(asm_fonts_filepath, originals_dir, target_dir, metadata_filepath)
